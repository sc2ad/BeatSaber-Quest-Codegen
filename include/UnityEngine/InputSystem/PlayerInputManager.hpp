// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.InputSystem.PlayerNotifications
#include "UnityEngine/InputSystem/PlayerNotifications.hpp"
// Including type: UnityEngine.InputSystem.PlayerJoinBehavior
#include "UnityEngine/InputSystem/PlayerJoinBehavior.hpp"
// Including type: UnityEngine.InputSystem.InputActionProperty
#include "UnityEngine/InputSystem/InputActionProperty.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext
#include "UnityEngine/InputSystem/InputAction_CallbackContext.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventPtr
#include "UnityEngine/InputSystem/LowLevel/InputEventPtr.hpp"
// Including type: UnityEngine.InputSystem.Utilities.InlinedArray`1
#include "UnityEngine/InputSystem/Utilities/InlinedArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: PlayerInput
  class PlayerInput;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: PlayerInputManager
  class PlayerInputManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::PlayerInputManager);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::PlayerInputManager*, "UnityEngine.InputSystem", "PlayerInputManager");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.PlayerInputManager
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 958078
  class PlayerInputManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::UnityEngine::InputSystem::PlayerInputManager::PlayerJoinedEvent
    class PlayerJoinedEvent;
    // Nested type: ::UnityEngine::InputSystem::PlayerInputManager::PlayerLeftEvent
    class PlayerLeftEvent;
    public:
    // UnityEngine.InputSystem.PlayerNotifications m_NotificationBehavior
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::InputSystem::PlayerNotifications m_NotificationBehavior;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::PlayerNotifications) == 0x4);
    // System.Int32 m_MaxPlayerCount
    // Size: 0x4
    // Offset: 0x1C
    int m_MaxPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Boolean m_AllowJoining
    // Size: 0x1
    // Offset: 0x20
    bool m_AllowJoining;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // UnityEngine.InputSystem.PlayerJoinBehavior m_JoinBehavior
    // Size: 0x4
    // Offset: 0x24
    ::UnityEngine::InputSystem::PlayerJoinBehavior m_JoinBehavior;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::PlayerJoinBehavior) == 0x4);
    // UnityEngine.InputSystem.PlayerInputManager/UnityEngine.InputSystem.PlayerJoinedEvent m_PlayerJoinedEvent
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::InputSystem::PlayerInputManager::PlayerJoinedEvent* m_PlayerJoinedEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::PlayerInputManager::PlayerJoinedEvent*) == 0x8);
    // UnityEngine.InputSystem.PlayerInputManager/UnityEngine.InputSystem.PlayerLeftEvent m_PlayerLeftEvent
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::InputSystem::PlayerInputManager::PlayerLeftEvent* m_PlayerLeftEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::PlayerInputManager::PlayerLeftEvent*) == 0x8);
    // UnityEngine.InputSystem.InputActionProperty m_JoinAction
    // Size: 0x18
    // Offset: 0x38
    ::UnityEngine::InputSystem::InputActionProperty m_JoinAction;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionProperty) == 0x18);
    // UnityEngine.GameObject m_PlayerPrefab
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* m_PlayerPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // System.Boolean m_SplitScreen
    // Size: 0x1
    // Offset: 0x58
    bool m_SplitScreen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_MaintainAspectRatioInSplitScreen
    // Size: 0x1
    // Offset: 0x59
    bool m_MaintainAspectRatioInSplitScreen;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Int32 m_FixedNumberOfSplitScreens
    // Size: 0x4
    // Offset: 0x5C
    int m_FixedNumberOfSplitScreens;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // UnityEngine.Rect m_SplitScreenRect
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Rect m_SplitScreenRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private System.Boolean m_JoinActionDelegateHooked
    // Size: 0x1
    // Offset: 0x70
    bool m_JoinActionDelegateHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UnpairedDeviceUsedDelegateHooked
    // Size: 0x1
    // Offset: 0x71
    bool m_UnpairedDeviceUsedDelegateHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Action`1<UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext> m_JoinActionDelegate
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>* m_JoinActionDelegate;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*) == 0x8);
    // private System.Action`2<UnityEngine.InputSystem.InputControl,UnityEngine.InputSystem.LowLevel.InputEventPtr> m_UnpairedDeviceUsedDelegate
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_2<::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>* m_UnpairedDeviceUsedDelegate;
    // Field size check
    static_assert(sizeof(::System::Action_2<::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>*) == 0x8);
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.PlayerInput>> m_PlayerJoinedCallbacks
    // Size: 0xFFFFFFFF
    // Offset: 0x88
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*> m_PlayerJoinedCallbacks;
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.PlayerInput>> m_PlayerLeftCallbacks
    // Size: 0xFFFFFFFF
    // Offset: 0xA0
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*> m_PlayerLeftCallbacks;
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String PlayerJoinedMessage
    static constexpr const char* PlayerJoinedMessage = "OnPlayerJoined";
    // Get static field: static public System.String PlayerJoinedMessage
    static ::StringW _get_PlayerJoinedMessage();
    // Set static field: static public System.String PlayerJoinedMessage
    static void _set_PlayerJoinedMessage(::StringW value);
    // static field const value: static public System.String PlayerLeftMessage
    static constexpr const char* PlayerLeftMessage = "OnPlayerLeft";
    // Get static field: static public System.String PlayerLeftMessage
    static ::StringW _get_PlayerLeftMessage();
    // Set static field: static public System.String PlayerLeftMessage
    static void _set_PlayerLeftMessage(::StringW value);
    // Get static field: static private UnityEngine.InputSystem.PlayerInputManager <instance>k__BackingField
    static ::UnityEngine::InputSystem::PlayerInputManager* _get_$instance$k__BackingField();
    // Set static field: static private UnityEngine.InputSystem.PlayerInputManager <instance>k__BackingField
    static void _set_$instance$k__BackingField(::UnityEngine::InputSystem::PlayerInputManager* value);
    // Get instance field reference: UnityEngine.InputSystem.PlayerNotifications m_NotificationBehavior
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::PlayerNotifications& dyn_m_NotificationBehavior();
    // Get instance field reference: System.Int32 m_MaxPlayerCount
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxPlayerCount();
    // Get instance field reference: System.Boolean m_AllowJoining
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowJoining();
    // Get instance field reference: UnityEngine.InputSystem.PlayerJoinBehavior m_JoinBehavior
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::PlayerJoinBehavior& dyn_m_JoinBehavior();
    // Get instance field reference: UnityEngine.InputSystem.PlayerInputManager/UnityEngine.InputSystem.PlayerJoinedEvent m_PlayerJoinedEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::PlayerInputManager::PlayerJoinedEvent*& dyn_m_PlayerJoinedEvent();
    // Get instance field reference: UnityEngine.InputSystem.PlayerInputManager/UnityEngine.InputSystem.PlayerLeftEvent m_PlayerLeftEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::PlayerInputManager::PlayerLeftEvent*& dyn_m_PlayerLeftEvent();
    // Get instance field reference: UnityEngine.InputSystem.InputActionProperty m_JoinAction
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionProperty& dyn_m_JoinAction();
    // Get instance field reference: UnityEngine.GameObject m_PlayerPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_PlayerPrefab();
    // Get instance field reference: System.Boolean m_SplitScreen
    [[deprecated("Use field access instead!")]] bool& dyn_m_SplitScreen();
    // Get instance field reference: System.Boolean m_MaintainAspectRatioInSplitScreen
    [[deprecated("Use field access instead!")]] bool& dyn_m_MaintainAspectRatioInSplitScreen();
    // Get instance field reference: System.Int32 m_FixedNumberOfSplitScreens
    [[deprecated("Use field access instead!")]] int& dyn_m_FixedNumberOfSplitScreens();
    // Get instance field reference: UnityEngine.Rect m_SplitScreenRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_m_SplitScreenRect();
    // Get instance field reference: private System.Boolean m_JoinActionDelegateHooked
    [[deprecated("Use field access instead!")]] bool& dyn_m_JoinActionDelegateHooked();
    // Get instance field reference: private System.Boolean m_UnpairedDeviceUsedDelegateHooked
    [[deprecated("Use field access instead!")]] bool& dyn_m_UnpairedDeviceUsedDelegateHooked();
    // Get instance field reference: private System.Action`1<UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext> m_JoinActionDelegate
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*& dyn_m_JoinActionDelegate();
    // Get instance field reference: private System.Action`2<UnityEngine.InputSystem.InputControl,UnityEngine.InputSystem.LowLevel.InputEventPtr> m_UnpairedDeviceUsedDelegate
    [[deprecated("Use field access instead!")]] ::System::Action_2<::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr>*& dyn_m_UnpairedDeviceUsedDelegate();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.PlayerInput>> m_PlayerJoinedCallbacks
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*>& dyn_m_PlayerJoinedCallbacks();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.PlayerInput>> m_PlayerLeftCallbacks
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*>& dyn_m_PlayerLeftCallbacks();
    // public System.Boolean get_splitScreen()
    // Offset: 0xCCF72C
    bool get_splitScreen();
    // public System.Void set_splitScreen(System.Boolean value)
    // Offset: 0xCCF734
    void set_splitScreen(bool value);
    // public System.Boolean get_maintainAspectRatioInSplitScreen()
    // Offset: 0xCD0250
    bool get_maintainAspectRatioInSplitScreen();
    // public System.Int32 get_fixedNumberOfSplitScreens()
    // Offset: 0xCD0258
    int get_fixedNumberOfSplitScreens();
    // public UnityEngine.Rect get_splitScreenArea()
    // Offset: 0xCD0260
    ::UnityEngine::Rect get_splitScreenArea();
    // public System.Int32 get_playerCount()
    // Offset: 0xCD026C
    int get_playerCount();
    // public System.Int32 get_maxPlayerCount()
    // Offset: 0xCD02D4
    int get_maxPlayerCount();
    // public System.Boolean get_joiningEnabled()
    // Offset: 0xCD02DC
    bool get_joiningEnabled();
    // public UnityEngine.InputSystem.PlayerJoinBehavior get_joinBehavior()
    // Offset: 0xCD02E4
    ::UnityEngine::InputSystem::PlayerJoinBehavior get_joinBehavior();
    // public System.Void set_joinBehavior(UnityEngine.InputSystem.PlayerJoinBehavior value)
    // Offset: 0xCD02EC
    void set_joinBehavior(::UnityEngine::InputSystem::PlayerJoinBehavior value);
    // public UnityEngine.InputSystem.InputActionProperty get_joinAction()
    // Offset: 0xCD0600
    ::UnityEngine::InputSystem::InputActionProperty get_joinAction();
    // public System.Void set_joinAction(UnityEngine.InputSystem.InputActionProperty value)
    // Offset: 0xCD0614
    void set_joinAction(::UnityEngine::InputSystem::InputActionProperty value);
    // public UnityEngine.InputSystem.PlayerNotifications get_notificationBehavior()
    // Offset: 0xCD06C4
    ::UnityEngine::InputSystem::PlayerNotifications get_notificationBehavior();
    // public System.Void set_notificationBehavior(UnityEngine.InputSystem.PlayerNotifications value)
    // Offset: 0xCD06CC
    void set_notificationBehavior(::UnityEngine::InputSystem::PlayerNotifications value);
    // public UnityEngine.InputSystem.PlayerInputManager/UnityEngine.InputSystem.PlayerJoinedEvent get_playerJoinedEvent()
    // Offset: 0xCD06D4
    ::UnityEngine::InputSystem::PlayerInputManager::PlayerJoinedEvent* get_playerJoinedEvent();
    // public UnityEngine.InputSystem.PlayerInputManager/UnityEngine.InputSystem.PlayerLeftEvent get_playerLeftEvent()
    // Offset: 0xCD078C
    ::UnityEngine::InputSystem::PlayerInputManager::PlayerLeftEvent* get_playerLeftEvent();
    // public UnityEngine.GameObject get_playerPrefab()
    // Offset: 0xCD0B34
    ::UnityEngine::GameObject* get_playerPrefab();
    // public System.Void set_playerPrefab(UnityEngine.GameObject value)
    // Offset: 0xCD0B3C
    void set_playerPrefab(::UnityEngine::GameObject* value);
    // static public UnityEngine.InputSystem.PlayerInputManager get_instance()
    // Offset: 0xCD0B44
    static ::UnityEngine::InputSystem::PlayerInputManager* get_instance();
    // static private System.Void set_instance(UnityEngine.InputSystem.PlayerInputManager value)
    // Offset: 0xCD0B94
    static void set_instance(::UnityEngine::InputSystem::PlayerInputManager* value);
    // static System.String[] get_messages()
    // Offset: 0xCD1254
    static ::ArrayW<::StringW> get_messages();
    // public System.Void add_onPlayerJoined(System.Action`1<UnityEngine.InputSystem.PlayerInput> value)
    // Offset: 0xCD0844
    void add_onPlayerJoined(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>* value);
    // public System.Void remove_onPlayerJoined(System.Action`1<UnityEngine.InputSystem.PlayerInput> value)
    // Offset: 0xCD08E8
    void remove_onPlayerJoined(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>* value);
    // public System.Void add_onPlayerLeft(System.Action`1<UnityEngine.InputSystem.PlayerInput> value)
    // Offset: 0xCD09BC
    void add_onPlayerLeft(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>* value);
    // public System.Void remove_onPlayerLeft(System.Action`1<UnityEngine.InputSystem.PlayerInput> value)
    // Offset: 0xCD0A60
    void remove_onPlayerLeft(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>* value);
    // public System.Void .ctor()
    // Offset: 0xCD1B2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerInputManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::PlayerInputManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerInputManager*, creationType>()));
    }
    // public System.Void EnableJoining()
    // Offset: 0xCD0428
    void EnableJoining();
    // public System.Void DisableJoining()
    // Offset: 0xCD0340
    void DisableJoining();
    // System.Void JoinPlayerFromUI()
    // Offset: 0xCD0BE8
    void JoinPlayerFromUI();
    // public System.Void JoinPlayerFromAction(UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext context)
    // Offset: 0xCD0F60
    void JoinPlayerFromAction(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // public System.Void JoinPlayerFromActionIfNotAlreadyJoined(UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext context)
    // Offset: 0xCD108C
    void JoinPlayerFromActionIfNotAlreadyJoined(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // public UnityEngine.InputSystem.PlayerInput JoinPlayer(System.Int32 playerIndex, System.Int32 splitScreenIndex, System.String controlScheme, UnityEngine.InputSystem.InputDevice pairWithDevice)
    // Offset: 0xCD0FC0
    ::UnityEngine::InputSystem::PlayerInput* JoinPlayer(int playerIndex, int splitScreenIndex, ::StringW controlScheme, ::UnityEngine::InputSystem::InputDevice* pairWithDevice);
    // public UnityEngine.InputSystem.PlayerInput JoinPlayer(System.Int32 playerIndex, System.Int32 splitScreenIndex, System.String controlScheme, params UnityEngine.InputSystem.InputDevice[] pairWithDevices)
    // Offset: 0xCD1188
    ::UnityEngine::InputSystem::PlayerInput* JoinPlayer(int playerIndex, int splitScreenIndex, ::StringW controlScheme, ::ArrayW<::UnityEngine::InputSystem::InputDevice*> pairWithDevices);
    // private System.Boolean CheckIfPlayerCanJoin(System.Int32 playerIndex)
    // Offset: 0xCD0C68
    bool CheckIfPlayerCanJoin(int playerIndex);
    // private System.Void OnUnpairedDeviceUsed(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xCD1330
    void OnUnpairedDeviceUsed(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // private System.Void OnEnable()
    // Offset: 0xCD1858
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xCD1A2C
    void OnDisable();
    // private System.Void UpdateSplitScreen()
    // Offset: 0xCCFA40
    void UpdateSplitScreen();
    // private System.Boolean IsDeviceUsableWithPlayerActions(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0xCD13F8
    bool IsDeviceUsableWithPlayerActions(::UnityEngine::InputSystem::InputDevice* device);
    // System.Void NotifyPlayerJoined(UnityEngine.InputSystem.PlayerInput player)
    // Offset: 0xCCE38C
    void NotifyPlayerJoined(::UnityEngine::InputSystem::PlayerInput* player);
    // System.Void NotifyPlayerLeft(UnityEngine.InputSystem.PlayerInput player)
    // Offset: 0xCCE6FC
    void NotifyPlayerLeft(::UnityEngine::InputSystem::PlayerInput* player);
  }; // UnityEngine.InputSystem.PlayerInputManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_splitScreen
// Il2CppName: get_splitScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_splitScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_splitScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::set_splitScreen
// Il2CppName: set_splitScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(bool)>(&UnityEngine::InputSystem::PlayerInputManager::set_splitScreen)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "set_splitScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_maintainAspectRatioInSplitScreen
// Il2CppName: get_maintainAspectRatioInSplitScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_maintainAspectRatioInSplitScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_maintainAspectRatioInSplitScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_fixedNumberOfSplitScreens
// Il2CppName: get_fixedNumberOfSplitScreens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_fixedNumberOfSplitScreens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_fixedNumberOfSplitScreens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_splitScreenArea
// Il2CppName: get_splitScreenArea
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Rect (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_splitScreenArea)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_splitScreenArea", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_playerCount
// Il2CppName: get_playerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_playerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_playerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_maxPlayerCount
// Il2CppName: get_maxPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_maxPlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_maxPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_joiningEnabled
// Il2CppName: get_joiningEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_joiningEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_joiningEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_joinBehavior
// Il2CppName: get_joinBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerJoinBehavior (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_joinBehavior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_joinBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::set_joinBehavior
// Il2CppName: set_joinBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::PlayerJoinBehavior)>(&UnityEngine::InputSystem::PlayerInputManager::set_joinBehavior)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerJoinBehavior")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "set_joinBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_joinAction
// Il2CppName: get_joinAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionProperty (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_joinAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_joinAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::set_joinAction
// Il2CppName: set_joinAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::InputActionProperty)>(&UnityEngine::InputSystem::PlayerInputManager::set_joinAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionProperty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "set_joinAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_notificationBehavior
// Il2CppName: get_notificationBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerNotifications (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_notificationBehavior)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_notificationBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::set_notificationBehavior
// Il2CppName: set_notificationBehavior
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::PlayerNotifications)>(&UnityEngine::InputSystem::PlayerInputManager::set_notificationBehavior)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerNotifications")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "set_notificationBehavior", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_playerJoinedEvent
// Il2CppName: get_playerJoinedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerInputManager::PlayerJoinedEvent* (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_playerJoinedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_playerJoinedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_playerLeftEvent
// Il2CppName: get_playerLeftEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerInputManager::PlayerLeftEvent* (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_playerLeftEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_playerLeftEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_playerPrefab
// Il2CppName: get_playerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_playerPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_playerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::set_playerPrefab
// Il2CppName: set_playerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::GameObject*)>(&UnityEngine::InputSystem::PlayerInputManager::set_playerPrefab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "set_playerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerInputManager* (*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::set_instance
// Il2CppName: set_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::PlayerInputManager*)>(&UnityEngine::InputSystem::PlayerInputManager::set_instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInputManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "set_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::get_messages
// Il2CppName: get_messages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&UnityEngine::InputSystem::PlayerInputManager::get_messages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "get_messages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::add_onPlayerJoined
// Il2CppName: add_onPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*)>(&UnityEngine::InputSystem::PlayerInputManager::add_onPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInput")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "add_onPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::remove_onPlayerJoined
// Il2CppName: remove_onPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*)>(&UnityEngine::InputSystem::PlayerInputManager::remove_onPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInput")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "remove_onPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::add_onPlayerLeft
// Il2CppName: add_onPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*)>(&UnityEngine::InputSystem::PlayerInputManager::add_onPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInput")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "add_onPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::remove_onPlayerLeft
// Il2CppName: remove_onPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::System::Action_1<::UnityEngine::InputSystem::PlayerInput*>*)>(&UnityEngine::InputSystem::PlayerInputManager::remove_onPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInput")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "remove_onPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::EnableJoining
// Il2CppName: EnableJoining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::EnableJoining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "EnableJoining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::DisableJoining
// Il2CppName: DisableJoining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::DisableJoining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "DisableJoining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::JoinPlayerFromUI
// Il2CppName: JoinPlayerFromUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::JoinPlayerFromUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "JoinPlayerFromUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::JoinPlayerFromAction
// Il2CppName: JoinPlayerFromAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::PlayerInputManager::JoinPlayerFromAction)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "JoinPlayerFromAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::JoinPlayerFromActionIfNotAlreadyJoined
// Il2CppName: JoinPlayerFromActionIfNotAlreadyJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::PlayerInputManager::JoinPlayerFromActionIfNotAlreadyJoined)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "JoinPlayerFromActionIfNotAlreadyJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::JoinPlayer
// Il2CppName: JoinPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerInput* (UnityEngine::InputSystem::PlayerInputManager::*)(int, int, ::StringW, ::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::PlayerInputManager::JoinPlayer)> {
  static const MethodInfo* get() {
    static auto* playerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* splitScreenIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlScheme = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pairWithDevice = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "JoinPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerIndex, splitScreenIndex, controlScheme, pairWithDevice});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::JoinPlayer
// Il2CppName: JoinPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::PlayerInput* (UnityEngine::InputSystem::PlayerInputManager::*)(int, int, ::StringW, ::ArrayW<::UnityEngine::InputSystem::InputDevice*>)>(&UnityEngine::InputSystem::PlayerInputManager::JoinPlayer)> {
  static const MethodInfo* get() {
    static auto* playerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* splitScreenIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlScheme = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pairWithDevices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "JoinPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerIndex, splitScreenIndex, controlScheme, pairWithDevices});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::CheckIfPlayerCanJoin
// Il2CppName: CheckIfPlayerCanJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::PlayerInputManager::*)(int)>(&UnityEngine::InputSystem::PlayerInputManager::CheckIfPlayerCanJoin)> {
  static const MethodInfo* get() {
    static auto* playerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "CheckIfPlayerCanJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::OnUnpairedDeviceUsed
// Il2CppName: OnUnpairedDeviceUsed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::PlayerInputManager::OnUnpairedDeviceUsed)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "OnUnpairedDeviceUsed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::UpdateSplitScreen
// Il2CppName: UpdateSplitScreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)()>(&UnityEngine::InputSystem::PlayerInputManager::UpdateSplitScreen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "UpdateSplitScreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::IsDeviceUsableWithPlayerActions
// Il2CppName: IsDeviceUsableWithPlayerActions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::PlayerInputManager::IsDeviceUsableWithPlayerActions)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "IsDeviceUsableWithPlayerActions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::NotifyPlayerJoined
// Il2CppName: NotifyPlayerJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::PlayerInput*)>(&UnityEngine::InputSystem::PlayerInputManager::NotifyPlayerJoined)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "NotifyPlayerJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::PlayerInputManager::NotifyPlayerLeft
// Il2CppName: NotifyPlayerLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::PlayerInputManager::*)(::UnityEngine::InputSystem::PlayerInput*)>(&UnityEngine::InputSystem::PlayerInputManager::NotifyPlayerLeft)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "PlayerInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::PlayerInputManager*), "NotifyPlayerLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
