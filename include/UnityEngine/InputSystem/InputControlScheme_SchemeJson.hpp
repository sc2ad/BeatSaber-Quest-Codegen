// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControlScheme
#include "UnityEngine/InputSystem/InputControlScheme.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::SchemeJson, "UnityEngine.InputSystem", "InputControlScheme/SchemeJson");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlScheme::SchemeJson/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson
    struct DeviceJson;
    // Size: 0xA
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson/UnityEngine.InputSystem.DeviceJson
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeviceJson/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.String devicePath
      // Size: 0x8
      // Offset: 0x0
      ::StringW devicePath;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public System.Boolean isOptional
      // Size: 0x1
      // Offset: 0x8
      bool isOptional;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean isOR
      // Size: 0x1
      // Offset: 0x9
      bool isOR;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: DeviceJson
      constexpr DeviceJson(::StringW devicePath_ = {}, bool isOptional_ = {}, bool isOR_ = {}) noexcept : devicePath{devicePath_}, isOptional{isOptional_}, isOR{isOR_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.String devicePath
      [[deprecated("Use field access instead!")]] ::StringW& dyn_devicePath();
      // Get instance field reference: public System.Boolean isOptional
      [[deprecated("Use field access instead!")]] bool& dyn_isOptional();
      // Get instance field reference: public System.Boolean isOR
      [[deprecated("Use field access instead!")]] bool& dyn_isOR();
      // public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement ToDeviceEntry()
      // Offset: 0xA41DB8
      ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement ToDeviceEntry();
      // static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson/UnityEngine.InputSystem.DeviceJson From(UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement requirement)
      // Offset: 0xD898A4
      static ::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson From(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement requirement);
    }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson/UnityEngine.InputSystem.DeviceJson
    #pragma pack(pop)
    static check_size<sizeof(InputControlScheme::SchemeJson::DeviceJson), 9 + sizeof(bool)> __UnityEngine_InputSystem_InputControlScheme_SchemeJson_DeviceJsonSizeCheck;
    static_assert(sizeof(InputControlScheme::SchemeJson::DeviceJson) == 0xA);
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String bindingGroup
    // Size: 0x8
    // Offset: 0x8
    ::StringW bindingGroup;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson/UnityEngine.InputSystem.DeviceJson[] devices
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson> devices;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson>) == 0x8);
    public:
    // Creating value type constructor for type: SchemeJson
    constexpr SchemeJson(::StringW name_ = {}, ::StringW bindingGroup_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson> devices_ = ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson>(static_cast<void*>(nullptr))) noexcept : name{name_}, bindingGroup{bindingGroup_}, devices{devices_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String bindingGroup
    [[deprecated("Use field access instead!")]] ::StringW& dyn_bindingGroup();
    // Get instance field reference: public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson/UnityEngine.InputSystem.DeviceJson[] devices
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson>& dyn_devices();
    // public UnityEngine.InputSystem.InputControlScheme ToScheme()
    // Offset: 0xA41DB0
    ::UnityEngine::InputSystem::InputControlScheme ToScheme();
    // static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson ToJson(UnityEngine.InputSystem.InputControlScheme scheme)
    // Offset: 0xD897AC
    static ::UnityEngine::InputSystem::InputControlScheme::SchemeJson ToJson(::UnityEngine::InputSystem::InputControlScheme scheme);
    // static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson[] ToJson(UnityEngine.InputSystem.InputControlScheme[] schemes)
    // Offset: 0xD898B4
    static ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson> ToJson(::ArrayW<::UnityEngine::InputSystem::InputControlScheme> schemes);
    // static public UnityEngine.InputSystem.InputControlScheme[] ToSchemes(UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson[] schemes)
    // Offset: 0xD899CC
    static ::ArrayW<::UnityEngine::InputSystem::InputControlScheme> ToSchemes(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson> schemes);
  }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.SchemeJson
  #pragma pack(pop)
  static check_size<sizeof(InputControlScheme::SchemeJson), 16 + sizeof(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson>)> __UnityEngine_InputSystem_InputControlScheme_SchemeJsonSizeCheck;
  static_assert(sizeof(InputControlScheme::SchemeJson) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::SchemeJson::DeviceJson, "UnityEngine.InputSystem", "InputControlScheme/SchemeJson/DeviceJson");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToScheme
// Il2CppName: ToScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlScheme (UnityEngine::InputSystem::InputControlScheme::SchemeJson::*)()>(&UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToScheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme::SchemeJson), "ToScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlScheme::SchemeJson (*)(::UnityEngine::InputSystem::InputControlScheme)>(&UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToJson)> {
  static const MethodInfo* get() {
    static auto* scheme = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlScheme")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme::SchemeJson), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scheme});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToJson
// Il2CppName: ToJson
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson> (*)(::ArrayW<::UnityEngine::InputSystem::InputControlScheme>)>(&UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToJson)> {
  static const MethodInfo* get() {
    static auto* schemes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlScheme"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme::SchemeJson), "ToJson", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemes});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToSchemes
// Il2CppName: ToSchemes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::InputSystem::InputControlScheme> (*)(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::SchemeJson>)>(&UnityEngine::InputSystem::InputControlScheme::SchemeJson::ToSchemes)> {
  static const MethodInfo* get() {
    static auto* schemes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlScheme/SchemeJson"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme::SchemeJson), "ToSchemes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{schemes});
  }
};
