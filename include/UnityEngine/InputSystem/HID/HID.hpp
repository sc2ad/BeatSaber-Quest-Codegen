// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputDevice
#include "UnityEngine/InputSystem/InputDevice.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputControlLayout
#include "UnityEngine/InputSystem/Layouts/InputControlLayout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::HID
namespace UnityEngine::InputSystem::HID {
  // Skipping declaration: HIDCollectionType because it is already included!
  // Skipping declaration: HIDElementDescriptor because it is already included!
  // Skipping declaration: HIDCollectionDescriptor because it is already included!
  // Skipping declaration: UsagePage because it is already included!
  // Skipping declaration: HIDDeviceDescriptor because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Skipping declaration: FourCC because it is already included!
  // Skipping declaration: PrimitiveValue because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::Layouts
namespace UnityEngine::InputSystem::Layouts {
  // Skipping declaration: InputDeviceDescription because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputDeviceExecuteCommandDelegate
  class InputDeviceExecuteCommandDelegate;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.HID
namespace UnityEngine::InputSystem::HID {
  // Forward declaring type: HID
  class HID;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::HID::HID);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID*, "UnityEngine.InputSystem.HID", "HID");
// Type namespace: UnityEngine.InputSystem.HID
namespace UnityEngine::InputSystem::HID {
  // Size: 0x188
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.HID.HID
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class HID : public ::UnityEngine::InputSystem::InputDevice {
    public:
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDLayoutBuilder
    class HIDLayoutBuilder;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDReportType
    struct HIDReportType;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDCollectionType
    struct HIDCollectionType;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDElementFlags
    struct HIDElementFlags;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor
    struct HIDElementDescriptor;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor
    struct HIDCollectionDescriptor;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor
    struct HIDDeviceDescriptor;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder
    struct HIDDeviceDescriptorBuilder;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::UsagePage
    struct UsagePage;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::GenericDesktop
    struct GenericDesktop;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::Simulation
    struct Simulation;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::Button
    struct Button;
    // Nested type: ::UnityEngine::InputSystem::HID::HID::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType
    // [TokenAttribute] Offset: FFFFFFFF
    struct HIDReportType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HIDReportType
      constexpr HIDReportType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Unknown
      static ::UnityEngine::InputSystem::HID::HID::HIDReportType _get_Unknown();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Unknown
      static void _set_Unknown(::UnityEngine::InputSystem::HID::HID::HIDReportType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Input
      static constexpr const int Input = 1;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Input
      static ::UnityEngine::InputSystem::HID::HID::HIDReportType _get_Input();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Input
      static void _set_Input(::UnityEngine::InputSystem::HID::HID::HIDReportType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Output
      static constexpr const int Output = 2;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Output
      static ::UnityEngine::InputSystem::HID::HID::HIDReportType _get_Output();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Output
      static void _set_Output(::UnityEngine::InputSystem::HID::HID::HIDReportType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Feature
      static constexpr const int Feature = 3;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Feature
      static ::UnityEngine::InputSystem::HID::HID::HIDReportType _get_Feature();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType Feature
      static void _set_Feature(::UnityEngine::InputSystem::HID::HID::HIDReportType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType
    #pragma pack(pop)
    static check_size<sizeof(HID::HIDReportType), 0 + sizeof(int)> __UnityEngine_InputSystem_HID_HID_HIDReportTypeSizeCheck;
    static_assert(sizeof(HID::HIDReportType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType
    // [TokenAttribute] Offset: FFFFFFFF
    struct HIDCollectionType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HIDCollectionType
      constexpr HIDCollectionType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Physical
      static constexpr const int Physical = 0;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Physical
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_Physical();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Physical
      static void _set_Physical(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Application
      static constexpr const int Application = 1;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Application
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_Application();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Application
      static void _set_Application(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Logical
      static constexpr const int Logical = 2;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Logical
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_Logical();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Logical
      static void _set_Logical(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Report
      static constexpr const int Report = 3;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Report
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_Report();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType Report
      static void _set_Report(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType NamedArray
      static constexpr const int NamedArray = 4;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType NamedArray
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_NamedArray();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType NamedArray
      static void _set_NamedArray(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType UsageSwitch
      static constexpr const int UsageSwitch = 5;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType UsageSwitch
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_UsageSwitch();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType UsageSwitch
      static void _set_UsageSwitch(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType UsageModifier
      static constexpr const int UsageModifier = 6;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType UsageModifier
      static ::UnityEngine::InputSystem::HID::HID::HIDCollectionType _get_UsageModifier();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType UsageModifier
      static void _set_UsageModifier(::UnityEngine::InputSystem::HID::HID::HIDCollectionType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType
    #pragma pack(pop)
    static check_size<sizeof(HID::HIDCollectionType), 0 + sizeof(int)> __UnityEngine_InputSystem_HID_HID_HIDCollectionTypeSizeCheck;
    static_assert(sizeof(HID::HIDCollectionType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct HIDElementFlags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HIDElementFlags
      constexpr HIDElementFlags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Constant
      static constexpr const int Constant = 1;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Constant
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_Constant();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Constant
      static void _set_Constant(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Variable
      static constexpr const int Variable = 2;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Variable
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_Variable();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Variable
      static void _set_Variable(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Relative
      static constexpr const int Relative = 4;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Relative
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_Relative();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Relative
      static void _set_Relative(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Wrap
      static constexpr const int Wrap = 8;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Wrap
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_Wrap();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Wrap
      static void _set_Wrap(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NonLinear
      static constexpr const int NonLinear = 16;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NonLinear
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_NonLinear();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NonLinear
      static void _set_NonLinear(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NoPreferred
      static constexpr const int NoPreferred = 32;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NoPreferred
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_NoPreferred();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NoPreferred
      static void _set_NoPreferred(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NullState
      static constexpr const int NullState = 64;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NullState
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_NullState();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags NullState
      static void _set_NullState(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Volatile
      static constexpr const int Volatile = 128;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Volatile
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_Volatile();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags Volatile
      static void _set_Volatile(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags BufferedBytes
      static constexpr const int BufferedBytes = 256;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags BufferedBytes
      static ::UnityEngine::InputSystem::HID::HID::HIDElementFlags _get_BufferedBytes();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags BufferedBytes
      static void _set_BufferedBytes(::UnityEngine::InputSystem::HID::HID::HIDElementFlags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags
    #pragma pack(pop)
    static check_size<sizeof(HID::HIDElementFlags), 0 + sizeof(int)> __UnityEngine_InputSystem_HID_HID_HIDElementFlagsSizeCheck;
    static_assert(sizeof(HID::HIDElementFlags) == 0x4);
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor
    // [TokenAttribute] Offset: FFFFFFFF
    struct HIDElementDescriptor/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 usage
      // Size: 0x4
      // Offset: 0x0
      int usage;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
      // Size: 0x4
      // Offset: 0x4
      ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::UsagePage) == 0x4);
      // public System.Int32 unit
      // Size: 0x4
      // Offset: 0x8
      int unit;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 unitExponent
      // Size: 0x4
      // Offset: 0xC
      int unitExponent;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 logicalMin
      // Size: 0x4
      // Offset: 0x10
      int logicalMin;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 logicalMax
      // Size: 0x4
      // Offset: 0x14
      int logicalMax;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 physicalMin
      // Size: 0x4
      // Offset: 0x18
      int physicalMin;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 physicalMax
      // Size: 0x4
      // Offset: 0x1C
      int physicalMax;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType reportType
      // Size: 0x4
      // Offset: 0x20
      ::UnityEngine::InputSystem::HID::HID::HIDReportType reportType;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::HIDReportType) == 0x4);
      // public System.Int32 collectionIndex
      // Size: 0x4
      // Offset: 0x24
      int collectionIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 reportId
      // Size: 0x4
      // Offset: 0x28
      int reportId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 reportSizeInBits
      // Size: 0x4
      // Offset: 0x2C
      int reportSizeInBits;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 reportOffsetInBits
      // Size: 0x4
      // Offset: 0x30
      int reportOffsetInBits;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags flags
      // Size: 0x4
      // Offset: 0x34
      ::UnityEngine::InputSystem::HID::HID::HIDElementFlags flags;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::HIDElementFlags) == 0x4);
      // public System.Nullable`1<System.Int32> usageMin
      // Size: 0xFFFFFFFF
      // Offset: 0x38
      ::System::Nullable_1<int> usageMin;
      // public System.Nullable`1<System.Int32> usageMax
      // Size: 0xFFFFFFFF
      // Offset: 0x40
      ::System::Nullable_1<int> usageMax;
      public:
      // Creating value type constructor for type: HIDElementDescriptor
      constexpr HIDElementDescriptor(int usage_ = {}, ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage_ = {}, int unit_ = {}, int unitExponent_ = {}, int logicalMin_ = {}, int logicalMax_ = {}, int physicalMin_ = {}, int physicalMax_ = {}, ::UnityEngine::InputSystem::HID::HID::HIDReportType reportType_ = {}, int collectionIndex_ = {}, int reportId_ = {}, int reportSizeInBits_ = {}, int reportOffsetInBits_ = {}, ::UnityEngine::InputSystem::HID::HID::HIDElementFlags flags_ = {}, ::System::Nullable_1<int> usageMin_ = {}, ::System::Nullable_1<int> usageMax_ = {}) noexcept : usage{usage_}, usagePage{usagePage_}, unit{unit_}, unitExponent{unitExponent_}, logicalMin{logicalMin_}, logicalMax{logicalMax_}, physicalMin{physicalMin_}, physicalMax{physicalMax_}, reportType{reportType_}, collectionIndex{collectionIndex_}, reportId{reportId_}, reportSizeInBits{reportSizeInBits_}, reportOffsetInBits{reportOffsetInBits_}, flags{flags_}, usageMin{usageMin_}, usageMax{usageMax_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 usage
      [[deprecated("Use field access instead!")]] int& dyn_usage();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::UsagePage& dyn_usagePage();
      // Get instance field reference: public System.Int32 unit
      [[deprecated("Use field access instead!")]] int& dyn_unit();
      // Get instance field reference: public System.Int32 unitExponent
      [[deprecated("Use field access instead!")]] int& dyn_unitExponent();
      // Get instance field reference: public System.Int32 logicalMin
      [[deprecated("Use field access instead!")]] int& dyn_logicalMin();
      // Get instance field reference: public System.Int32 logicalMax
      [[deprecated("Use field access instead!")]] int& dyn_logicalMax();
      // Get instance field reference: public System.Int32 physicalMin
      [[deprecated("Use field access instead!")]] int& dyn_physicalMin();
      // Get instance field reference: public System.Int32 physicalMax
      [[deprecated("Use field access instead!")]] int& dyn_physicalMax();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType reportType
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::HIDReportType& dyn_reportType();
      // Get instance field reference: public System.Int32 collectionIndex
      [[deprecated("Use field access instead!")]] int& dyn_collectionIndex();
      // Get instance field reference: public System.Int32 reportId
      [[deprecated("Use field access instead!")]] int& dyn_reportId();
      // Get instance field reference: public System.Int32 reportSizeInBits
      [[deprecated("Use field access instead!")]] int& dyn_reportSizeInBits();
      // Get instance field reference: public System.Int32 reportOffsetInBits
      [[deprecated("Use field access instead!")]] int& dyn_reportOffsetInBits();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementFlags flags
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::HIDElementFlags& dyn_flags();
      // Get instance field reference: public System.Nullable`1<System.Int32> usageMin
      [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_usageMin();
      // Get instance field reference: public System.Nullable`1<System.Int32> usageMax
      [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_usageMax();
      // public System.Boolean get_hasNullState()
      // Offset: 0xA44CDC
      bool get_hasNullState();
      // public System.Boolean get_hasPreferredState()
      // Offset: 0xA44CE8
      bool get_hasPreferredState();
      // public System.Boolean get_isArray()
      // Offset: 0xA44CF8
      bool get_isArray();
      // public System.Boolean get_isNonLinear()
      // Offset: 0xA44D08
      bool get_isNonLinear();
      // public System.Boolean get_isRelative()
      // Offset: 0xA44D14
      bool get_isRelative();
      // public System.Boolean get_isConstant()
      // Offset: 0xA44D20
      bool get_isConstant();
      // public System.Boolean get_isWrapping()
      // Offset: 0xA44D2C
      bool get_isWrapping();
      // System.Boolean get_isSigned()
      // Offset: 0xA44D38
      bool get_isSigned();
      // System.Single get_minFloatValue()
      // Offset: 0xA44D44
      float get_minFloatValue();
      // System.Single get_maxFloatValue()
      // Offset: 0xA44D7C
      float get_maxFloatValue();
      // public System.Boolean Is(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage, System.Int32 usage)
      // Offset: 0xA44DB8
      bool Is(::UnityEngine::InputSystem::HID::HID::UsagePage usagePage, int usage);
      // System.String DetermineName()
      // Offset: 0xA44DDC
      ::StringW DetermineName();
      // System.String DetermineDisplayName()
      // Offset: 0xA44DE4
      ::StringW DetermineDisplayName();
      // System.Boolean IsUsableElement()
      // Offset: 0xA44DEC
      bool IsUsableElement();
      // System.String DetermineLayout()
      // Offset: 0xA44E28
      ::StringW DetermineLayout();
      // UnityEngine.InputSystem.Utilities.FourCC DetermineFormat()
      // Offset: 0xA44E30
      ::UnityEngine::InputSystem::Utilities::FourCC DetermineFormat();
      // UnityEngine.InputSystem.Utilities.InternedString[] DetermineUsages()
      // Offset: 0xA44E4C
      ::ArrayW<::UnityEngine::InputSystem::Utilities::InternedString> DetermineUsages();
      // System.String DetermineParameters()
      // Offset: 0xA44E54
      ::StringW DetermineParameters();
      // private System.String DetermineAxisNormalizationParameters()
      // Offset: 0xA44E5C
      ::StringW DetermineAxisNormalizationParameters();
      // System.String DetermineProcessors()
      // Offset: 0xA44E64
      ::StringW DetermineProcessors();
      // UnityEngine.InputSystem.Utilities.PrimitiveValue DetermineDefaultState()
      // Offset: 0xA44E6C
      ::UnityEngine::InputSystem::Utilities::PrimitiveValue DetermineDefaultState();
      // System.Void AddChildControls(ref UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor element, System.String controlName, ref UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.Builder builder)
      // Offset: 0xA44E74
      void AddChildControls(ByRef<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor> element, ::StringW controlName, ByRef<::UnityEngine::InputSystem::Layouts::InputControlLayout::Builder*> builder);
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor
    // WARNING Not writing size check since size may be invalid!
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionDescriptor
    // [TokenAttribute] Offset: FFFFFFFF
    struct HIDCollectionDescriptor/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType type
      // Size: 0x4
      // Offset: 0x0
      ::UnityEngine::InputSystem::HID::HID::HIDCollectionType type;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::HIDCollectionType) == 0x4);
      // public System.Int32 usage
      // Size: 0x4
      // Offset: 0x4
      int usage;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
      // Size: 0x4
      // Offset: 0x8
      ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::UsagePage) == 0x4);
      // public System.Int32 parent
      // Size: 0x4
      // Offset: 0xC
      int parent;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 childCount
      // Size: 0x4
      // Offset: 0x10
      int childCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 firstChild
      // Size: 0x4
      // Offset: 0x14
      int firstChild;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HIDCollectionDescriptor
      constexpr HIDCollectionDescriptor(::UnityEngine::InputSystem::HID::HID::HIDCollectionType type_ = {}, int usage_ = {}, ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage_ = {}, int parent_ = {}, int childCount_ = {}, int firstChild_ = {}) noexcept : type{type_}, usage{usage_}, usagePage{usagePage_}, parent{parent_}, childCount{childCount_}, firstChild{firstChild_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionType type
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::HIDCollectionType& dyn_type();
      // Get instance field reference: public System.Int32 usage
      [[deprecated("Use field access instead!")]] int& dyn_usage();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::UsagePage& dyn_usagePage();
      // Get instance field reference: public System.Int32 parent
      [[deprecated("Use field access instead!")]] int& dyn_parent();
      // Get instance field reference: public System.Int32 childCount
      [[deprecated("Use field access instead!")]] int& dyn_childCount();
      // Get instance field reference: public System.Int32 firstChild
      [[deprecated("Use field access instead!")]] int& dyn_firstChild();
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionDescriptor
    #pragma pack(pop)
    static check_size<sizeof(HID::HIDCollectionDescriptor), 20 + sizeof(int)> __UnityEngine_InputSystem_HID_HID_HIDCollectionDescriptorSizeCheck;
    static_assert(sizeof(HID::HIDCollectionDescriptor) == 0x18);
    // Size: 0x30
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor
    // [TokenAttribute] Offset: FFFFFFFF
    struct HIDDeviceDescriptor/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 vendorId
      // Size: 0x4
      // Offset: 0x0
      int vendorId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 productId
      // Size: 0x4
      // Offset: 0x4
      int productId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 usage
      // Size: 0x4
      // Offset: 0x8
      int usage;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
      // Size: 0x4
      // Offset: 0xC
      ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::UsagePage) == 0x4);
      // public System.Int32 inputReportSize
      // Size: 0x4
      // Offset: 0x10
      int inputReportSize;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 outputReportSize
      // Size: 0x4
      // Offset: 0x14
      int outputReportSize;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 featureReportSize
      // Size: 0x4
      // Offset: 0x18
      int featureReportSize;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Padding between fields: featureReportSize and: elements
      char __padding6[0x4] = {};
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor[] elements
      // Size: 0x8
      // Offset: 0x20
      ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor> elements;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>) == 0x8);
      // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionDescriptor[] collections
      // Size: 0x8
      // Offset: 0x28
      ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor> collections;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>) == 0x8);
      public:
      // Creating value type constructor for type: HIDDeviceDescriptor
      constexpr HIDDeviceDescriptor(int vendorId_ = {}, int productId_ = {}, int usage_ = {}, ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage_ = {}, int inputReportSize_ = {}, int outputReportSize_ = {}, int featureReportSize_ = {}, ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor> elements_ = ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor> collections_ = ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>(static_cast<void*>(nullptr))) noexcept : vendorId{vendorId_}, productId{productId_}, usage{usage_}, usagePage{usagePage_}, inputReportSize{inputReportSize_}, outputReportSize{outputReportSize_}, featureReportSize{featureReportSize_}, elements{elements_}, collections{collections_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 vendorId
      [[deprecated("Use field access instead!")]] int& dyn_vendorId();
      // Get instance field reference: public System.Int32 productId
      [[deprecated("Use field access instead!")]] int& dyn_productId();
      // Get instance field reference: public System.Int32 usage
      [[deprecated("Use field access instead!")]] int& dyn_usage();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::UsagePage& dyn_usagePage();
      // Get instance field reference: public System.Int32 inputReportSize
      [[deprecated("Use field access instead!")]] int& dyn_inputReportSize();
      // Get instance field reference: public System.Int32 outputReportSize
      [[deprecated("Use field access instead!")]] int& dyn_outputReportSize();
      // Get instance field reference: public System.Int32 featureReportSize
      [[deprecated("Use field access instead!")]] int& dyn_featureReportSize();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor[] elements
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>& dyn_elements();
      // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionDescriptor[] collections
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>& dyn_collections();
      // public System.String ToJson()
      // Offset: 0xA44BCC
      ::StringW ToJson();
      // static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor FromJson(System.String json)
      // Offset: 0xE1C82C
      static ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor FromJson(::StringW json);
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor
    #pragma pack(pop)
    static check_size<sizeof(HID::HIDDeviceDescriptor), 40 + sizeof(::ArrayW<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>)> __UnityEngine_InputSystem_HID_HID_HIDDeviceDescriptorSizeCheck;
    static_assert(sizeof(HID::HIDDeviceDescriptor) == 0x30);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage
    // [TokenAttribute] Offset: FFFFFFFF
    struct UsagePage/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UsagePage
      constexpr UsagePage(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Undefined
      static constexpr const int Undefined = 0;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Undefined
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Undefined();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Undefined
      static void _set_Undefined(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GenericDesktop
      static constexpr const int GenericDesktop = 1;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GenericDesktop
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_GenericDesktop();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GenericDesktop
      static void _set_GenericDesktop(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Simulation
      static constexpr const int Simulation = 2;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Simulation
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Simulation();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Simulation
      static void _set_Simulation(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage VRControls
      static constexpr const int VRControls = 3;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage VRControls
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_VRControls();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage VRControls
      static void _set_VRControls(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage SportControls
      static constexpr const int SportControls = 4;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage SportControls
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_SportControls();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage SportControls
      static void _set_SportControls(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GameControls
      static constexpr const int GameControls = 5;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GameControls
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_GameControls();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GameControls
      static void _set_GameControls(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GenericDeviceControls
      static constexpr const int GenericDeviceControls = 6;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GenericDeviceControls
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_GenericDeviceControls();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage GenericDeviceControls
      static void _set_GenericDeviceControls(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Keyboard
      static constexpr const int Keyboard = 7;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Keyboard
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Keyboard();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Keyboard
      static void _set_Keyboard(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage LEDs
      static constexpr const int LEDs = 8;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage LEDs
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_LEDs();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage LEDs
      static void _set_LEDs(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Button
      static constexpr const int Button = 9;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Button
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Button();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Button
      static void _set_Button(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Ordinal
      static constexpr const int Ordinal = 10;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Ordinal
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Ordinal();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Ordinal
      static void _set_Ordinal(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Telephony
      static constexpr const int Telephony = 11;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Telephony
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Telephony();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Telephony
      static void _set_Telephony(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Consumer
      static constexpr const int Consumer = 12;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Consumer
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Consumer();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Consumer
      static void _set_Consumer(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Digitizer
      static constexpr const int Digitizer = 13;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Digitizer
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Digitizer();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Digitizer
      static void _set_Digitizer(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage PID
      static constexpr const int PID = 15;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage PID
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_PID();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage PID
      static void _set_PID(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Unicode
      static constexpr const int Unicode = 16;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Unicode
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Unicode();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Unicode
      static void _set_Unicode(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage AlphanumericDisplay
      static constexpr const int AlphanumericDisplay = 20;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage AlphanumericDisplay
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_AlphanumericDisplay();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage AlphanumericDisplay
      static void _set_AlphanumericDisplay(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage MedicalInstruments
      static constexpr const int MedicalInstruments = 64;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage MedicalInstruments
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_MedicalInstruments();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage MedicalInstruments
      static void _set_MedicalInstruments(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Monitor
      static constexpr const int Monitor = 128;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Monitor
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Monitor();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Monitor
      static void _set_Monitor(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Power
      static constexpr const int Power = 132;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Power
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Power();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Power
      static void _set_Power(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage BarCodeScanner
      static constexpr const int BarCodeScanner = 140;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage BarCodeScanner
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_BarCodeScanner();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage BarCodeScanner
      static void _set_BarCodeScanner(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage MagneticStripeReader
      static constexpr const int MagneticStripeReader = 142;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage MagneticStripeReader
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_MagneticStripeReader();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage MagneticStripeReader
      static void _set_MagneticStripeReader(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Camera
      static constexpr const int Camera = 144;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Camera
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Camera();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Camera
      static void _set_Camera(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Arcade
      static constexpr const int Arcade = 145;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Arcade
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_Arcade();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage Arcade
      static void _set_Arcade(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // static field const value: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage VendorDefined
      static constexpr const int VendorDefined = 65280;
      // Get static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage VendorDefined
      static ::UnityEngine::InputSystem::HID::HID::UsagePage _get_VendorDefined();
      // Set static field: static public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage VendorDefined
      static void _set_VendorDefined(::UnityEngine::InputSystem::HID::HID::UsagePage value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage
    #pragma pack(pop)
    static check_size<sizeof(HID::UsagePage), 0 + sizeof(int)> __UnityEngine_InputSystem_HID_HID_UsagePageSizeCheck;
    static_assert(sizeof(HID::UsagePage) == 0x4);
    public:
    // private System.Boolean m_HaveParsedHIDDescriptor
    // Size: 0x1
    // Offset: 0x150
    bool m_HaveParsedHIDDescriptor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HaveParsedHIDDescriptor and: m_HIDDescriptor
    char __padding0[0x7] = {};
    // private UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor m_HIDDescriptor
    // Size: 0x30
    // Offset: 0x158
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor m_HIDDescriptor;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor) == 0x30);
    public:
    // static field const value: static System.String kHIDInterface
    static constexpr const char* kHIDInterface = "HID";
    // Get static field: static System.String kHIDInterface
    static ::StringW _get_kHIDInterface();
    // Set static field: static System.String kHIDInterface
    static void _set_kHIDInterface(::StringW value);
    // static field const value: static System.String kHIDNamespace
    static constexpr const char* kHIDNamespace = "HID";
    // Get static field: static System.String kHIDNamespace
    static ::StringW _get_kHIDNamespace();
    // Set static field: static System.String kHIDNamespace
    static void _set_kHIDNamespace(::StringW value);
    // Get instance field reference: private System.Boolean m_HaveParsedHIDDescriptor
    [[deprecated("Use field access instead!")]] bool& dyn_m_HaveParsedHIDDescriptor();
    // Get instance field reference: private UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor m_HIDDescriptor
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor& dyn_m_HIDDescriptor();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_QueryHIDReportDescriptorDeviceCommandType()
    // Offset: 0xE1B7A8
    static ::UnityEngine::InputSystem::Utilities::FourCC get_QueryHIDReportDescriptorDeviceCommandType();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_QueryHIDReportDescriptorSizeDeviceCommandType()
    // Offset: 0xE1B7E4
    static ::UnityEngine::InputSystem::Utilities::FourCC get_QueryHIDReportDescriptorSizeDeviceCommandType();
    // static public UnityEngine.InputSystem.Utilities.FourCC get_QueryHIDParsedReportDescriptorDeviceCommandType()
    // Offset: 0xE1B820
    static ::UnityEngine::InputSystem::Utilities::FourCC get_QueryHIDParsedReportDescriptorDeviceCommandType();
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor get_hidDescriptor()
    // Offset: 0xE1B85C
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor get_hidDescriptor();
    // static System.String OnFindLayoutForDevice(ref UnityEngine.InputSystem.Layouts.InputDeviceDescription description, System.String matchedLayout, UnityEngine.InputSystem.LowLevel.InputDeviceExecuteCommandDelegate executeDeviceCommand)
    // Offset: 0xE1B928
    static ::StringW OnFindLayoutForDevice(ByRef<::UnityEngine::InputSystem::Layouts::InputDeviceDescription> description, ::StringW matchedLayout, ::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate* executeDeviceCommand);
    // static UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor ReadHIDDeviceDescriptor(ref UnityEngine.InputSystem.Layouts.InputDeviceDescription deviceDescription, UnityEngine.InputSystem.LowLevel.InputDeviceExecuteCommandDelegate executeCommandDelegate)
    // Offset: 0xE1C13C
    static ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor ReadHIDDeviceDescriptor(ByRef<::UnityEngine::InputSystem::Layouts::InputDeviceDescription> deviceDescription, ::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate* executeCommandDelegate);
    // static public System.String UsagePageToString(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage)
    // Offset: 0xE1C904
    static ::StringW UsagePageToString(::UnityEngine::InputSystem::HID::HID::UsagePage usagePage);
    // static public System.String UsageToString(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage, System.Int32 usage)
    // Offset: 0xE1C9B0
    static ::StringW UsageToString(::UnityEngine::InputSystem::HID::HID::UsagePage usagePage, int usage);
    // public System.Void .ctor()
    // Offset: 0xE1CAA4
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HID* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::HID::HID::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HID*, creationType>()));
    }
  }; // UnityEngine.InputSystem.HID.HID
  #pragma pack(pop)
  static check_size<sizeof(HID), 344 + sizeof(::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor)> __UnityEngine_InputSystem_HID_HIDSizeCheck;
  static_assert(sizeof(HID) == 0x188);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::UsagePage, "UnityEngine.InputSystem.HID", "HID/UsagePage");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor, "UnityEngine.InputSystem.HID", "HID/HIDDeviceDescriptor");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor, "UnityEngine.InputSystem.HID", "HID/HIDCollectionDescriptor");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor, "UnityEngine.InputSystem.HID", "HID/HIDElementDescriptor");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDElementFlags, "UnityEngine.InputSystem.HID", "HID/HIDElementFlags");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDCollectionType, "UnityEngine.InputSystem.HID", "HID/HIDCollectionType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDReportType, "UnityEngine.InputSystem.HID", "HID/HIDReportType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::get_QueryHIDReportDescriptorDeviceCommandType
// Il2CppName: get_QueryHIDReportDescriptorDeviceCommandType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::HID::HID::get_QueryHIDReportDescriptorDeviceCommandType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "get_QueryHIDReportDescriptorDeviceCommandType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::get_QueryHIDReportDescriptorSizeDeviceCommandType
// Il2CppName: get_QueryHIDReportDescriptorSizeDeviceCommandType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::HID::HID::get_QueryHIDReportDescriptorSizeDeviceCommandType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "get_QueryHIDReportDescriptorSizeDeviceCommandType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::get_QueryHIDParsedReportDescriptorDeviceCommandType
// Il2CppName: get_QueryHIDParsedReportDescriptorDeviceCommandType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::FourCC (*)()>(&UnityEngine::InputSystem::HID::HID::get_QueryHIDParsedReportDescriptorDeviceCommandType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "get_QueryHIDParsedReportDescriptorDeviceCommandType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::get_hidDescriptor
// Il2CppName: get_hidDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor (UnityEngine::InputSystem::HID::HID::*)()>(&UnityEngine::InputSystem::HID::HID::get_hidDescriptor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "get_hidDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::OnFindLayoutForDevice
// Il2CppName: OnFindLayoutForDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::UnityEngine::InputSystem::Layouts::InputDeviceDescription>, ::StringW, ::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate*)>(&UnityEngine::InputSystem::HID::HID::OnFindLayoutForDevice)> {
  static const MethodInfo* get() {
    static auto* description = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->this_arg;
    static auto* matchedLayout = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* executeDeviceCommand = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceExecuteCommandDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "OnFindLayoutForDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{description, matchedLayout, executeDeviceCommand});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::ReadHIDDeviceDescriptor
// Il2CppName: ReadHIDDeviceDescriptor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor (*)(ByRef<::UnityEngine::InputSystem::Layouts::InputDeviceDescription>, ::UnityEngine::InputSystem::LowLevel::InputDeviceExecuteCommandDelegate*)>(&UnityEngine::InputSystem::HID::HID::ReadHIDDeviceDescriptor)> {
  static const MethodInfo* get() {
    static auto* deviceDescription = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputDeviceDescription")->this_arg;
    static auto* executeCommandDelegate = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputDeviceExecuteCommandDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "ReadHIDDeviceDescriptor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceDescription, executeCommandDelegate});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::UsagePageToString
// Il2CppName: UsagePageToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::InputSystem::HID::HID::UsagePage)>(&UnityEngine::InputSystem::HID::HID::UsagePageToString)> {
  static const MethodInfo* get() {
    static auto* usagePage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HID/UsagePage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "UsagePageToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usagePage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::UsageToString
// Il2CppName: UsageToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::InputSystem::HID::HID::UsagePage, int)>(&UnityEngine::InputSystem::HID::HID::UsageToString)> {
  static const MethodInfo* get() {
    static auto* usagePage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HID/UsagePage")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID*), "UsageToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usagePage, usage});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
