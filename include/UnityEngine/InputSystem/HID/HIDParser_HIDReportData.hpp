// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.HID.HIDParser
#include "UnityEngine/InputSystem/HID/HIDParser.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType
#include "UnityEngine/InputSystem/HID/HID.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HIDParser::HIDReportData, "UnityEngine.InputSystem.HID", "HIDParser/HIDReportData");
// Type namespace: UnityEngine.InputSystem.HID
namespace UnityEngine::InputSystem::HID {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.HID.HIDParser/UnityEngine.InputSystem.HID.HIDReportData
  // [TokenAttribute] Offset: FFFFFFFF
  struct HIDParser::HIDReportData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 reportId
    // Size: 0x4
    // Offset: 0x0
    int reportId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType reportType
    // Size: 0x4
    // Offset: 0x4
    ::UnityEngine::InputSystem::HID::HID::HIDReportType reportType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::HIDReportType) == 0x4);
    // public System.Int32 currentBitOffset
    // Size: 0x4
    // Offset: 0x8
    int currentBitOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: HIDReportData
    constexpr HIDReportData(int reportId_ = {}, ::UnityEngine::InputSystem::HID::HID::HIDReportType reportType_ = {}, int currentBitOffset_ = {}) noexcept : reportId{reportId_}, reportType{reportType_}, currentBitOffset{currentBitOffset_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 reportId
    [[deprecated("Use field access instead!")]] int& dyn_reportId();
    // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType reportType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::HIDReportType& dyn_reportType();
    // Get instance field reference: public System.Int32 currentBitOffset
    [[deprecated("Use field access instead!")]] int& dyn_currentBitOffset();
    // static public System.Int32 FindOrAddReport(System.Nullable`1<System.Int32> reportId, UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType reportType, System.Collections.Generic.List`1<UnityEngine.InputSystem.HID.HIDParser/UnityEngine.InputSystem.HID.HIDReportData> reports)
    // Offset: 0xF3C608
    static int FindOrAddReport(::System::Nullable_1<int> reportId, ::UnityEngine::InputSystem::HID::HID::HIDReportType reportType, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HIDParser::HIDReportData>* reports);
  }; // UnityEngine.InputSystem.HID.HIDParser/UnityEngine.InputSystem.HID.HIDReportData
  #pragma pack(pop)
  static check_size<sizeof(HIDParser::HIDReportData), 8 + sizeof(int)> __UnityEngine_InputSystem_HID_HIDParser_HIDReportDataSizeCheck;
  static_assert(sizeof(HIDParser::HIDReportData) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HIDParser::HIDReportData::FindOrAddReport
// Il2CppName: FindOrAddReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::Nullable_1<int>, ::UnityEngine::InputSystem::HID::HID::HIDReportType, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HIDParser::HIDReportData>*)>(&UnityEngine::InputSystem::HID::HIDParser::HIDReportData::FindOrAddReport)> {
  static const MethodInfo* get() {
    static auto* reportId = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* reportType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HID/HIDReportType")->byval_arg;
    static auto* reports = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HIDParser/HIDReportData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HIDParser::HIDReportData), "FindOrAddReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportId, reportType, reports});
  }
};
