// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.HID.HID
#include "UnityEngine/InputSystem/HID/HID.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType
// Already included the same include: UnityEngine/InputSystem/HID/HID.hpp
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder, "UnityEngine.InputSystem.HID", "HID/HIDDeviceDescriptorBuilder");
// Type namespace: UnityEngine.InputSystem.HID
namespace UnityEngine::InputSystem::HID {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  struct HID::HIDDeviceDescriptorBuilder/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::HID::HID::UsagePage usagePage;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::UsagePage) == 0x4);
    // public System.Int32 usage
    // Size: 0x4
    // Offset: 0x4
    int usage;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_CurrentReportId
    // Size: 0x4
    // Offset: 0x8
    int m_CurrentReportId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType m_CurrentReportType
    // Size: 0x4
    // Offset: 0xC
    ::UnityEngine::InputSystem::HID::HID::HIDReportType m_CurrentReportType;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::HID::HID::HIDReportType) == 0x4);
    // private System.Int32 m_CurrentReportOffsetInBits
    // Size: 0x4
    // Offset: 0x10
    int m_CurrentReportOffsetInBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_CurrentReportOffsetInBits and: m_Elements
    char __padding4[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor> m_Elements
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>* m_Elements;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionDescriptor> m_Collections
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>* m_Collections;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>*) == 0x8);
    // private System.Int32 m_InputReportSize
    // Size: 0x4
    // Offset: 0x28
    int m_InputReportSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_OutputReportSize
    // Size: 0x4
    // Offset: 0x2C
    int m_OutputReportSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_FeatureReportSize
    // Size: 0x4
    // Offset: 0x30
    int m_FeatureReportSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: HIDDeviceDescriptorBuilder
    constexpr HIDDeviceDescriptorBuilder(::UnityEngine::InputSystem::HID::HID::UsagePage usagePage_ = {}, int usage_ = {}, int m_CurrentReportId_ = {}, ::UnityEngine::InputSystem::HID::HID::HIDReportType m_CurrentReportType_ = {}, int m_CurrentReportOffsetInBits_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>* m_Elements_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>* m_Collections_ = {}, int m_InputReportSize_ = {}, int m_OutputReportSize_ = {}, int m_FeatureReportSize_ = {}) noexcept : usagePage{usagePage_}, usage{usage_}, m_CurrentReportId{m_CurrentReportId_}, m_CurrentReportType{m_CurrentReportType_}, m_CurrentReportOffsetInBits{m_CurrentReportOffsetInBits_}, m_Elements{m_Elements_}, m_Collections{m_Collections_}, m_InputReportSize{m_InputReportSize_}, m_OutputReportSize{m_OutputReportSize_}, m_FeatureReportSize{m_FeatureReportSize_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::UsagePage& dyn_usagePage();
    // Get instance field reference: public System.Int32 usage
    [[deprecated("Use field access instead!")]] int& dyn_usage();
    // Get instance field reference: private System.Int32 m_CurrentReportId
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentReportId();
    // Get instance field reference: private UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType m_CurrentReportType
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::HID::HID::HIDReportType& dyn_m_CurrentReportType();
    // Get instance field reference: private System.Int32 m_CurrentReportOffsetInBits
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentReportOffsetInBits();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDElementDescriptor> m_Elements
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDElementDescriptor>*& dyn_m_Elements();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDCollectionDescriptor> m_Collections
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::HID::HID::HIDCollectionDescriptor>*& dyn_m_Collections();
    // Get instance field reference: private System.Int32 m_InputReportSize
    [[deprecated("Use field access instead!")]] int& dyn_m_InputReportSize();
    // Get instance field reference: private System.Int32 m_OutputReportSize
    [[deprecated("Use field access instead!")]] int& dyn_m_OutputReportSize();
    // Get instance field reference: private System.Int32 m_FeatureReportSize
    [[deprecated("Use field access instead!")]] int& dyn_m_FeatureReportSize();
    // public System.Void .ctor(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage, System.Int32 usage)
    // Offset: 0xA44C10
    HIDDeviceDescriptorBuilder(::UnityEngine::InputSystem::HID::HID::UsagePage usagePage, int usage);
    // public System.Void .ctor(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.GenericDesktop usage)
    // Offset: 0xA44C28
    HIDDeviceDescriptorBuilder(::UnityEngine::InputSystem::HID::HID::GenericDesktop usage);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder StartReport(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDReportType reportType, System.Int32 reportId)
    // Offset: 0xA44C44
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder StartReport(::UnityEngine::InputSystem::HID::HID::HIDReportType reportType, int reportId);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder AddElement(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.UsagePage usagePage, System.Int32 usage, System.Int32 sizeInBits)
    // Offset: 0xA44C6C
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder AddElement(::UnityEngine::InputSystem::HID::HID::UsagePage usagePage, int usage, int sizeInBits);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder AddElement(UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.GenericDesktop usage, System.Int32 sizeInBits)
    // Offset: 0xA44C74
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder AddElement(::UnityEngine::InputSystem::HID::HID::GenericDesktop usage, int sizeInBits);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder WithPhysicalMinMax(System.Int32 min, System.Int32 max)
    // Offset: 0xA44C88
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder WithPhysicalMinMax(int min, int max);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder WithLogicalMinMax(System.Int32 min, System.Int32 max)
    // Offset: 0xA44C90
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder WithLogicalMinMax(int min, int max);
    // public UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptor Finish()
    // Offset: 0xA44C98
    ::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor Finish();
  }; // UnityEngine.InputSystem.HID.HID/UnityEngine.InputSystem.HID.HIDDeviceDescriptorBuilder
  #pragma pack(pop)
  static check_size<sizeof(HID::HIDDeviceDescriptorBuilder), 48 + sizeof(int)> __UnityEngine_InputSystem_HID_HID_HIDDeviceDescriptorBuilderSizeCheck;
  static_assert(sizeof(HID::HIDDeviceDescriptorBuilder) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::HIDDeviceDescriptorBuilder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::HIDDeviceDescriptorBuilder
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::StartReport
// Il2CppName: StartReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder (UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::*)(::UnityEngine::InputSystem::HID::HID::HIDReportType, int)>(&UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::StartReport)> {
  static const MethodInfo* get() {
    static auto* reportType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HID/HIDReportType")->byval_arg;
    static auto* reportId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder), "StartReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportType, reportId});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::AddElement
// Il2CppName: AddElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder (UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::*)(::UnityEngine::InputSystem::HID::HID::UsagePage, int, int)>(&UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::AddElement)> {
  static const MethodInfo* get() {
    static auto* usagePage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HID/UsagePage")->byval_arg;
    static auto* usage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sizeInBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder), "AddElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usagePage, usage, sizeInBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::AddElement
// Il2CppName: AddElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder (UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::*)(::UnityEngine::InputSystem::HID::HID::GenericDesktop, int)>(&UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::AddElement)> {
  static const MethodInfo* get() {
    static auto* usage = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.HID", "HID/GenericDesktop")->byval_arg;
    static auto* sizeInBits = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder), "AddElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usage, sizeInBits});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::WithPhysicalMinMax
// Il2CppName: WithPhysicalMinMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder (UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::*)(int, int)>(&UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::WithPhysicalMinMax)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder), "WithPhysicalMinMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::WithLogicalMinMax
// Il2CppName: WithLogicalMinMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder (UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::*)(int, int)>(&UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::WithLogicalMinMax)> {
  static const MethodInfo* get() {
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder), "WithLogicalMinMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{min, max});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::Finish
// Il2CppName: Finish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptor (UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::*)()>(&UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder::Finish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::HID::HID::HIDDeviceDescriptorBuilder), "Finish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
