// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionMap
#include "UnityEngine/InputSystem/InputActionMap.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputBinding
  struct InputBinding;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionMap::BindingJson, "UnityEngine.InputSystem", "InputActionMap/BindingJson");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x3A
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.BindingJson
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionMap::BindingJson/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String id
    // Size: 0x8
    // Offset: 0x8
    ::StringW id;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String path
    // Size: 0x8
    // Offset: 0x10
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String interactions
    // Size: 0x8
    // Offset: 0x18
    ::StringW interactions;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String processors
    // Size: 0x8
    // Offset: 0x20
    ::StringW processors;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String groups
    // Size: 0x8
    // Offset: 0x28
    ::StringW groups;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String action
    // Size: 0x8
    // Offset: 0x30
    ::StringW action;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean isComposite
    // Size: 0x1
    // Offset: 0x38
    bool isComposite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isPartOfComposite
    // Size: 0x1
    // Offset: 0x39
    bool isPartOfComposite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: BindingJson
    constexpr BindingJson(::StringW name_ = {}, ::StringW id_ = {}, ::StringW path_ = {}, ::StringW interactions_ = {}, ::StringW processors_ = {}, ::StringW groups_ = {}, ::StringW action_ = {}, bool isComposite_ = {}, bool isPartOfComposite_ = {}) noexcept : name{name_}, id{id_}, path{path_}, interactions{interactions_}, processors{processors_}, groups{groups_}, action{action_}, isComposite{isComposite_}, isPartOfComposite{isPartOfComposite_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String id
    [[deprecated("Use field access instead!")]] ::StringW& dyn_id();
    // Get instance field reference: public System.String path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
    // Get instance field reference: public System.String interactions
    [[deprecated("Use field access instead!")]] ::StringW& dyn_interactions();
    // Get instance field reference: public System.String processors
    [[deprecated("Use field access instead!")]] ::StringW& dyn_processors();
    // Get instance field reference: public System.String groups
    [[deprecated("Use field access instead!")]] ::StringW& dyn_groups();
    // Get instance field reference: public System.String action
    [[deprecated("Use field access instead!")]] ::StringW& dyn_action();
    // Get instance field reference: public System.Boolean isComposite
    [[deprecated("Use field access instead!")]] bool& dyn_isComposite();
    // Get instance field reference: public System.Boolean isPartOfComposite
    [[deprecated("Use field access instead!")]] bool& dyn_isPartOfComposite();
    // public UnityEngine.InputSystem.InputBinding ToBinding()
    // Offset: 0xA49CB0
    ::UnityEngine::InputSystem::InputBinding ToBinding();
    // static public UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.BindingJson FromBinding(ref UnityEngine.InputSystem.InputBinding binding)
    // Offset: 0xF43C9C
    static ::UnityEngine::InputSystem::InputActionMap::BindingJson FromBinding(ByRef<::UnityEngine::InputSystem::InputBinding> binding);
  }; // UnityEngine.InputSystem.InputActionMap/UnityEngine.InputSystem.BindingJson
  #pragma pack(pop)
  static check_size<sizeof(InputActionMap::BindingJson), 57 + sizeof(bool)> __UnityEngine_InputSystem_InputActionMap_BindingJsonSizeCheck;
  static_assert(sizeof(InputActionMap::BindingJson) == 0x3A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionMap::BindingJson::ToBinding
// Il2CppName: ToBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputBinding (UnityEngine::InputSystem::InputActionMap::BindingJson::*)()>(&UnityEngine::InputSystem::InputActionMap::BindingJson::ToBinding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionMap::BindingJson), "ToBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionMap::BindingJson::FromBinding
// Il2CppName: FromBinding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionMap::BindingJson (*)(ByRef<::UnityEngine::InputSystem::InputBinding>)>(&UnityEngine::InputSystem::InputActionMap::BindingJson::FromBinding)> {
  static const MethodInfo* get() {
    static auto* binding = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputBinding")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionMap::BindingJson), "FromBinding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{binding});
  }
};
