// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.TriggerState
#include "UnityEngine/InputSystem/InputActionState_TriggerState.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
  // Skipping declaration: InputActionState because it is already included!
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: InputActionPhase
  struct InputActionPhase;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputInteractionContext
  struct InputInteractionContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputInteractionContext, "UnityEngine.InputSystem", "InputInteractionContext");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputInteractionContext
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputInteractionContext/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputInteractionContext::Flags
    struct Flags;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Flags/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Flags
      constexpr Flags(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags TimerHasExpired
      static constexpr const int TimerHasExpired = 2;
      // Get static field: static public UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags TimerHasExpired
      static ::UnityEngine::InputSystem::InputInteractionContext::Flags _get_TimerHasExpired();
      // Set static field: static public UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags TimerHasExpired
      static void _set_TimerHasExpired(::UnityEngine::InputSystem::InputInteractionContext::Flags value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags
    #pragma pack(pop)
    static check_size<sizeof(InputInteractionContext::Flags), 0 + sizeof(int)> __UnityEngine_InputSystem_InputInteractionContext_FlagsSizeCheck;
    static_assert(sizeof(InputInteractionContext::Flags) == 0x4);
    public:
    // UnityEngine.InputSystem.InputActionState m_State
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputActionState* m_State;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionState*) == 0x8);
    // UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags m_Flags
    // Size: 0x4
    // Offset: 0x8
    ::UnityEngine::InputSystem::InputInteractionContext::Flags m_Flags;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputInteractionContext::Flags) == 0x4);
    // Padding between fields: m_Flags and: m_TriggerState
    char __padding1[0x4] = {};
    // UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.TriggerState m_TriggerState
    // Size: 0x24
    // Offset: 0x10
    ::UnityEngine::InputSystem::InputActionState::TriggerState m_TriggerState;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionState::TriggerState) == 0x24);
    public:
    // Creating value type constructor for type: InputInteractionContext
    constexpr InputInteractionContext(::UnityEngine::InputSystem::InputActionState* m_State_ = {}, ::UnityEngine::InputSystem::InputInteractionContext::Flags m_Flags_ = {}, ::UnityEngine::InputSystem::InputActionState::TriggerState m_TriggerState_ = {}) noexcept : m_State{m_State_}, m_Flags{m_Flags_}, m_TriggerState{m_TriggerState_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: UnityEngine.InputSystem.InputActionState m_State
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState*& dyn_m_State();
    // Get instance field reference: UnityEngine.InputSystem.InputInteractionContext/UnityEngine.InputSystem.Flags m_Flags
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputInteractionContext::Flags& dyn_m_Flags();
    // Get instance field reference: UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.TriggerState m_TriggerState
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState::TriggerState& dyn_m_TriggerState();
    // public UnityEngine.InputSystem.InputAction get_action()
    // Offset: 0xA41E10
    ::UnityEngine::InputSystem::InputAction* get_action();
    // public UnityEngine.InputSystem.InputControl get_control()
    // Offset: 0xA41E18
    ::UnityEngine::InputSystem::InputControl* get_control();
    // public UnityEngine.InputSystem.InputActionPhase get_phase()
    // Offset: 0xA41E20
    ::UnityEngine::InputSystem::InputActionPhase get_phase();
    // public System.Double get_time()
    // Offset: 0xA41E28
    double get_time();
    // public System.Double get_startTime()
    // Offset: 0xA41E30
    double get_startTime();
    // public System.Boolean get_timerHasExpired()
    // Offset: 0xA41E38
    bool get_timerHasExpired();
    // System.Void set_timerHasExpired(System.Boolean value)
    // Offset: 0xA41E44
    void set_timerHasExpired(bool value);
    // public System.Boolean get_isWaiting()
    // Offset: 0xA41E60
    bool get_isWaiting();
    // public System.Boolean get_isStarted()
    // Offset: 0xA41E70
    bool get_isStarted();
    // System.Int32 get_mapIndex()
    // Offset: 0xA41EC0
    int get_mapIndex();
    // System.Int32 get_controlIndex()
    // Offset: 0xA41EC8
    int get_controlIndex();
    // System.Int32 get_bindingIndex()
    // Offset: 0xA41ED4
    int get_bindingIndex();
    // System.Int32 get_interactionIndex()
    // Offset: 0xA41EDC
    int get_interactionIndex();
    // public System.Boolean ControlIsActuated(System.Single threshold)
    // Offset: 0xA41E80
    bool ControlIsActuated(float threshold);
    // public System.Void Started()
    // Offset: 0xA41E88
    void Started();
    // public System.Void Performed()
    // Offset: 0xA41E90
    void Performed();
    // public System.Void PerformedAndStayStarted()
    // Offset: 0xA41E98
    void PerformedAndStayStarted();
    // public System.Void PerformedAndStayPerformed()
    // Offset: 0xA41EA0
    void PerformedAndStayPerformed();
    // public System.Void Canceled()
    // Offset: 0xA41EA8
    void Canceled();
    // public System.Void Waiting()
    // Offset: 0xA41EB0
    void Waiting();
    // public System.Void SetTimeout(System.Single seconds)
    // Offset: 0xA41EB8
    void SetTimeout(float seconds);
    // public TValue ReadValue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    TValue ReadValue() {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputInteractionContext::ReadValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method);
    }
  }; // UnityEngine.InputSystem.InputInteractionContext
  #pragma pack(pop)
  static check_size<sizeof(InputInteractionContext), 16 + sizeof(::UnityEngine::InputSystem::InputActionState::TriggerState)> __UnityEngine_InputSystem_InputInteractionContextSizeCheck;
  static_assert(sizeof(InputInteractionContext) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputInteractionContext::Flags, "UnityEngine.InputSystem", "InputInteractionContext/Flags");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_action
// Il2CppName: get_action
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputAction* (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_action)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_action", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_control
// Il2CppName: get_control
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControl* (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_control)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_control", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_phase
// Il2CppName: get_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionPhase (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_phase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_startTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_timerHasExpired
// Il2CppName: get_timerHasExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_timerHasExpired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_timerHasExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::set_timerHasExpired
// Il2CppName: set_timerHasExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)(bool)>(&UnityEngine::InputSystem::InputInteractionContext::set_timerHasExpired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "set_timerHasExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_isWaiting
// Il2CppName: get_isWaiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_isWaiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_isWaiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_isStarted
// Il2CppName: get_isStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_isStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_isStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_mapIndex
// Il2CppName: get_mapIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_mapIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_mapIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_controlIndex
// Il2CppName: get_controlIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_controlIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_controlIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_bindingIndex
// Il2CppName: get_bindingIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_bindingIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_bindingIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::get_interactionIndex
// Il2CppName: get_interactionIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::get_interactionIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "get_interactionIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::ControlIsActuated
// Il2CppName: ControlIsActuated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputInteractionContext::*)(float)>(&UnityEngine::InputSystem::InputInteractionContext::ControlIsActuated)> {
  static const MethodInfo* get() {
    static auto* threshold = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "ControlIsActuated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{threshold});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::Started
// Il2CppName: Started
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::Started)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "Started", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::Performed
// Il2CppName: Performed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::Performed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "Performed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::PerformedAndStayStarted
// Il2CppName: PerformedAndStayStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::PerformedAndStayStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "PerformedAndStayStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::PerformedAndStayPerformed
// Il2CppName: PerformedAndStayPerformed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::PerformedAndStayPerformed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "PerformedAndStayPerformed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::Canceled
// Il2CppName: Canceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::Canceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "Canceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::Waiting
// Il2CppName: Waiting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)()>(&UnityEngine::InputSystem::InputInteractionContext::Waiting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "Waiting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::SetTimeout
// Il2CppName: SetTimeout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputInteractionContext::*)(float)>(&UnityEngine::InputSystem::InputInteractionContext::SetTimeout)> {
  static const MethodInfo* get() {
    static auto* seconds = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputInteractionContext), "SetTimeout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{seconds});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputInteractionContext::ReadValue
// Il2CppName: ReadValue
// Cannot write MetadataGetter for generic methods!
