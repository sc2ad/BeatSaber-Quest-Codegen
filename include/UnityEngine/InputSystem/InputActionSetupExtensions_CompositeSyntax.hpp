// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionSetupExtensions
#include "UnityEngine/InputSystem/InputActionSetupExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
  // Forward declaring type: InputActionMap
  class InputActionMap;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax, "UnityEngine.InputSystem", "InputActionSetupExtensions/CompositeSyntax");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.CompositeSyntax
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionSetupExtensions::CompositeSyntax/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly UnityEngine.InputSystem.InputAction m_Action
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputAction* m_Action;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputAction*) == 0x8);
    // private readonly UnityEngine.InputSystem.InputActionMap m_ActionMap
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::InputSystem::InputActionMap* m_ActionMap;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionMap*) == 0x8);
    // private System.Int32 m_CompositeIndex
    // Size: 0x4
    // Offset: 0x10
    int m_CompositeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: CompositeSyntax
    constexpr CompositeSyntax(::UnityEngine::InputSystem::InputAction* m_Action_ = {}, ::UnityEngine::InputSystem::InputActionMap* m_ActionMap_ = {}, int m_CompositeIndex_ = {}) noexcept : m_Action{m_Action_}, m_ActionMap{m_ActionMap_}, m_CompositeIndex{m_CompositeIndex_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.InputSystem.InputAction m_Action
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputAction*& dyn_m_Action();
    // Get instance field reference: private readonly UnityEngine.InputSystem.InputActionMap m_ActionMap
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionMap*& dyn_m_ActionMap();
    // Get instance field reference: private System.Int32 m_CompositeIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CompositeIndex();
    // System.Void .ctor(UnityEngine.InputSystem.InputActionMap map, UnityEngine.InputSystem.InputAction action, System.Int32 compositeIndex)
    // Offset: 0xA5B02C
    CompositeSyntax(::UnityEngine::InputSystem::InputActionMap* map, ::UnityEngine::InputSystem::InputAction* action, int compositeIndex);
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.CompositeSyntax With(System.String name, System.String binding, System.String groups)
    // Offset: 0xA5B038
    ::UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax With(::StringW name, ::StringW binding, ::StringW groups);
  }; // UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.CompositeSyntax
  #pragma pack(pop)
  static check_size<sizeof(InputActionSetupExtensions::CompositeSyntax), 16 + sizeof(int)> __UnityEngine_InputSystem_InputActionSetupExtensions_CompositeSyntaxSizeCheck;
  static_assert(sizeof(InputActionSetupExtensions::CompositeSyntax) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax::CompositeSyntax
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax::With
// Il2CppName: With
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax (UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax::*)(::StringW, ::StringW, ::StringW)>(&UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax::With)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* binding = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* groups = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::CompositeSyntax), "With", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, binding, groups});
  }
};
