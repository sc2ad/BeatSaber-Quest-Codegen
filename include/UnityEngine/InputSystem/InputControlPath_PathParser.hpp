// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControlPath
#include "UnityEngine/InputSystem/InputControlPath.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.ParsedPathComponent
#include "UnityEngine/InputSystem/InputControlPath_ParsedPathComponent.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Skipping declaration: Substring because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlPath::PathParser, "UnityEngine.InputSystem", "InputControlPath/PathParser");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathParser
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlPath::PathParser/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String path
    // Size: 0x8
    // Offset: 0x0
    ::StringW path;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 length
    // Size: 0x4
    // Offset: 0x8
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 leftIndexInPath
    // Size: 0x4
    // Offset: 0xC
    int leftIndexInPath;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 rightIndexInPath
    // Size: 0x4
    // Offset: 0x10
    int rightIndexInPath;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: rightIndexInPath and: current
    char __padding3[0x4] = {};
    // public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.ParsedPathComponent current
    // Size: 0x38
    // Offset: 0x18
    ::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent current;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent) == 0x38);
    public:
    // Creating value type constructor for type: PathParser
    constexpr PathParser(::StringW path_ = {}, int length_ = {}, int leftIndexInPath_ = {}, int rightIndexInPath_ = {}, ::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent current_ = {}) noexcept : path{path_}, length{length_}, leftIndexInPath{leftIndexInPath_}, rightIndexInPath{rightIndexInPath_}, current{current_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String path
    [[deprecated("Use field access instead!")]] ::StringW& dyn_path();
    // Get instance field reference: public System.Int32 length
    [[deprecated("Use field access instead!")]] int& dyn_length();
    // Get instance field reference: public System.Int32 leftIndexInPath
    [[deprecated("Use field access instead!")]] int& dyn_leftIndexInPath();
    // Get instance field reference: public System.Int32 rightIndexInPath
    [[deprecated("Use field access instead!")]] int& dyn_rightIndexInPath();
    // Get instance field reference: public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.ParsedPathComponent current
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent& dyn_current();
    // public System.Boolean get_isAtEnd()
    // Offset: 0xA4154C
    bool get_isAtEnd();
    // public System.Void .ctor(System.String path)
    // Offset: 0xA41560
    PathParser(::StringW path);
    // public System.Boolean MoveToNextComponent()
    // Offset: 0xA41594
    bool MoveToNextComponent();
    // private UnityEngine.InputSystem.Utilities.Substring ParseComponentPart(System.Char terminator)
    // Offset: 0xA4159C
    ::UnityEngine::InputSystem::Utilities::Substring ParseComponentPart(::Il2CppChar terminator);
  }; // UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathParser
  #pragma pack(pop)
  static check_size<sizeof(InputControlPath::PathParser), 24 + sizeof(::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent)> __UnityEngine_InputSystem_InputControlPath_PathParserSizeCheck;
  static_assert(sizeof(InputControlPath::PathParser) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::PathParser::get_isAtEnd
// Il2CppName: get_isAtEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlPath::PathParser::*)()>(&UnityEngine::InputSystem::InputControlPath::PathParser::get_isAtEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::PathParser), "get_isAtEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::PathParser::PathParser
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::PathParser::MoveToNextComponent
// Il2CppName: MoveToNextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlPath::PathParser::*)()>(&UnityEngine::InputSystem::InputControlPath::PathParser::MoveToNextComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::PathParser), "MoveToNextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::PathParser::ParseComponentPart
// Il2CppName: ParseComponentPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::Substring (UnityEngine::InputSystem::InputControlPath::PathParser::*)(::Il2CppChar)>(&UnityEngine::InputSystem::InputControlPath::PathParser::ParseComponentPart)> {
  static const MethodInfo* get() {
    static auto* terminator = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath::PathParser), "ParseComponentPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{terminator});
  }
};
