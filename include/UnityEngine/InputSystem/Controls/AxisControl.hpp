// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControl`1
#include "UnityEngine/InputSystem/InputControl_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.InputSystem.Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: AxisControl
  class AxisControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Controls::AxisControl);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Controls::AxisControl*, "UnityEngine.InputSystem.Controls", "AxisControl");
// Type namespace: UnityEngine.InputSystem.Controls
namespace UnityEngine::InputSystem::Controls {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Controls.AxisControl
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class AxisControl : public ::UnityEngine::InputSystem::InputControl_1<float> {
    public:
    // Nested type: ::UnityEngine::InputSystem::Controls::AxisControl::Clamp
    struct Clamp;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp
    // [TokenAttribute] Offset: FFFFFFFF
    struct Clamp/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Clamp
      constexpr Clamp(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp None
      static ::UnityEngine::InputSystem::Controls::AxisControl::Clamp _get_None();
      // Set static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp None
      static void _set_None(::UnityEngine::InputSystem::Controls::AxisControl::Clamp value);
      // static field const value: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp BeforeNormalize
      static constexpr const int BeforeNormalize = 1;
      // Get static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp BeforeNormalize
      static ::UnityEngine::InputSystem::Controls::AxisControl::Clamp _get_BeforeNormalize();
      // Set static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp BeforeNormalize
      static void _set_BeforeNormalize(::UnityEngine::InputSystem::Controls::AxisControl::Clamp value);
      // static field const value: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp AfterNormalize
      static constexpr const int AfterNormalize = 2;
      // Get static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp AfterNormalize
      static ::UnityEngine::InputSystem::Controls::AxisControl::Clamp _get_AfterNormalize();
      // Set static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp AfterNormalize
      static void _set_AfterNormalize(::UnityEngine::InputSystem::Controls::AxisControl::Clamp value);
      // static field const value: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp ToConstantBeforeNormalize
      static constexpr const int ToConstantBeforeNormalize = 3;
      // Get static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp ToConstantBeforeNormalize
      static ::UnityEngine::InputSystem::Controls::AxisControl::Clamp _get_ToConstantBeforeNormalize();
      // Set static field: static public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp ToConstantBeforeNormalize
      static void _set_ToConstantBeforeNormalize(::UnityEngine::InputSystem::Controls::AxisControl::Clamp value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp
    #pragma pack(pop)
    static check_size<sizeof(AxisControl::Clamp), 0 + sizeof(int)> __UnityEngine_InputSystem_Controls_AxisControl_ClampSizeCheck;
    static_assert(sizeof(AxisControl::Clamp) == 0x4);
    public:
    // public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp clamp
    // Size: 0x4
    // Offset: 0xF0
    ::UnityEngine::InputSystem::Controls::AxisControl::Clamp clamp;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::AxisControl::Clamp) == 0x4);
    // public System.Single clampMin
    // Size: 0x4
    // Offset: 0xF4
    float clampMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single clampMax
    // Size: 0x4
    // Offset: 0xF8
    float clampMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single clampConstant
    // Size: 0x4
    // Offset: 0xFC
    float clampConstant;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean invert
    // Size: 0x1
    // Offset: 0x100
    bool invert;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean normalize
    // Size: 0x1
    // Offset: 0x101
    bool normalize;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single normalizeMin
    // Size: 0x4
    // Offset: 0x104
    float normalizeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single normalizeMax
    // Size: 0x4
    // Offset: 0x108
    float normalizeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single normalizeZero
    // Size: 0x4
    // Offset: 0x10C
    float normalizeZero;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean scale
    // Size: 0x1
    // Offset: 0x110
    bool scale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Single scaleFactor
    // Size: 0x4
    // Offset: 0x114
    float scaleFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputProcessor_1<TValue>*>
    constexpr operator ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputProcessor_1<TValue>*>() const noexcept = delete;
    // Get instance field reference: public UnityEngine.InputSystem.Controls.AxisControl/UnityEngine.InputSystem.Controls.Clamp clamp
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::AxisControl::Clamp& dyn_clamp();
    // Get instance field reference: public System.Single clampMin
    [[deprecated("Use field access instead!")]] float& dyn_clampMin();
    // Get instance field reference: public System.Single clampMax
    [[deprecated("Use field access instead!")]] float& dyn_clampMax();
    // Get instance field reference: public System.Single clampConstant
    [[deprecated("Use field access instead!")]] float& dyn_clampConstant();
    // Get instance field reference: public System.Boolean invert
    [[deprecated("Use field access instead!")]] bool& dyn_invert();
    // Get instance field reference: public System.Boolean normalize
    [[deprecated("Use field access instead!")]] bool& dyn_normalize();
    // Get instance field reference: public System.Single normalizeMin
    [[deprecated("Use field access instead!")]] float& dyn_normalizeMin();
    // Get instance field reference: public System.Single normalizeMax
    [[deprecated("Use field access instead!")]] float& dyn_normalizeMax();
    // Get instance field reference: public System.Single normalizeZero
    [[deprecated("Use field access instead!")]] float& dyn_normalizeZero();
    // Get instance field reference: public System.Boolean scale
    [[deprecated("Use field access instead!")]] bool& dyn_scale();
    // Get instance field reference: public System.Single scaleFactor
    [[deprecated("Use field access instead!")]] float& dyn_scaleFactor();
    // protected System.Single Preprocess(System.Single value)
    // Offset: 0xE132F8
    float Preprocess(float value);
    // public System.Single ReadUnprocessedValueFromState(System.Void* statePtr)
    // Offset: 0xE1359C
    float ReadUnprocessedValueFromState(void* statePtr);
    // public System.Void WriteValueIntoState(System.Single value, System.Void* statePtr)
    // Offset: 0xE135DC
    void WriteValueIntoState(float value, void* statePtr);
    // public System.Void .ctor()
    // Offset: 0xE13448
    // Implemented from: UnityEngine.InputSystem.InputControl`1
    // Base method: System.Void InputControl_1::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AxisControl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Controls::AxisControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AxisControl*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0xE134CC
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Void InputControl::FinishSetup()
    void FinishSetup();
    // public override System.Boolean CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)
    // Offset: 0xE13608
    // Implemented from: UnityEngine.InputSystem.InputControl`1
    // Base method: System.Boolean InputControl_1::CompareValue(System.Void* firstStatePtr, System.Void* secondStatePtr)
    bool CompareValue(void* firstStatePtr, void* secondStatePtr);
    // public override System.Single EvaluateMagnitude(System.Void* statePtr)
    // Offset: 0xE136C8
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Single InputControl::EvaluateMagnitude(System.Void* statePtr)
    float EvaluateMagnitude(void* statePtr);
  }; // UnityEngine.InputSystem.Controls.AxisControl
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Controls::AxisControl::Clamp, "UnityEngine.InputSystem.Controls", "AxisControl/Clamp");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::Preprocess
// Il2CppName: Preprocess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Controls::AxisControl::*)(float)>(&UnityEngine::InputSystem::Controls::AxisControl::Preprocess)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::AxisControl*), "Preprocess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::ReadUnprocessedValueFromState
// Il2CppName: ReadUnprocessedValueFromState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Controls::AxisControl::*)(void*)>(&UnityEngine::InputSystem::Controls::AxisControl::ReadUnprocessedValueFromState)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::AxisControl*), "ReadUnprocessedValueFromState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::WriteValueIntoState
// Il2CppName: WriteValueIntoState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Controls::AxisControl::*)(float, void*)>(&UnityEngine::InputSystem::Controls::AxisControl::WriteValueIntoState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::AxisControl*), "WriteValueIntoState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Controls::AxisControl::*)()>(&UnityEngine::InputSystem::Controls::AxisControl::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::AxisControl*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::CompareValue
// Il2CppName: CompareValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Controls::AxisControl::*)(void*, void*)>(&UnityEngine::InputSystem::Controls::AxisControl::CompareValue)> {
  static const MethodInfo* get() {
    static auto* firstStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    static auto* secondStatePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::AxisControl*), "CompareValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstStatePtr, secondStatePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::AxisControl::EvaluateMagnitude
// Il2CppName: EvaluateMagnitude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Controls::AxisControl::*)(void*)>(&UnityEngine::InputSystem::Controls::AxisControl::EvaluateMagnitude)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::AxisControl*), "EvaluateMagnitude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr});
  }
};
