// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Controls.ButtonControl
#include "UnityEngine/InputSystem/Controls/ButtonControl.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine.InputSystem.Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: DiscreteButtonControl
  class DiscreteButtonControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Controls::DiscreteButtonControl);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Controls::DiscreteButtonControl*, "UnityEngine.InputSystem.Controls", "DiscreteButtonControl");
// Type namespace: UnityEngine.InputSystem.Controls
namespace UnityEngine::InputSystem::Controls {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Controls.DiscreteButtonControl
  // [TokenAttribute] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: FFFFFFFF
  class DiscreteButtonControl : public ::UnityEngine::InputSystem::Controls::ButtonControl {
    public:
    public:
    // public System.Int32 minValue
    // Size: 0x4
    // Offset: 0x11C
    int minValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxValue
    // Size: 0x4
    // Offset: 0x120
    int maxValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 wrapAtValue
    // Size: 0x4
    // Offset: 0x124
    int wrapAtValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 nullValue
    // Size: 0x4
    // Offset: 0x128
    int nullValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 minValue
    [[deprecated("Use field access instead!")]] int& dyn_minValue();
    // Get instance field reference: public System.Int32 maxValue
    [[deprecated("Use field access instead!")]] int& dyn_maxValue();
    // Get instance field reference: public System.Int32 wrapAtValue
    [[deprecated("Use field access instead!")]] int& dyn_wrapAtValue();
    // Get instance field reference: public System.Int32 nullValue
    [[deprecated("Use field access instead!")]] int& dyn_nullValue();
    // public System.Void .ctor()
    // Offset: 0xE13E00
    // Implemented from: UnityEngine.InputSystem.Controls.ButtonControl
    // Base method: System.Void ButtonControl::.ctor()
    // Base method: System.Void AxisControl::.ctor()
    // Base method: System.Void InputControl_1::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DiscreteButtonControl* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Controls::DiscreteButtonControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DiscreteButtonControl*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0xE13C1C
    // Implemented from: UnityEngine.InputSystem.Controls.AxisControl
    // Base method: System.Void AxisControl::FinishSetup()
    void FinishSetup();
    // public override System.Single ReadUnprocessedValueFromState(System.Void* statePtr)
    // Offset: 0xE13CF4
    // Implemented from: UnityEngine.InputSystem.Controls.AxisControl
    // Base method: System.Single AxisControl::ReadUnprocessedValueFromState(System.Void* statePtr)
    float ReadUnprocessedValueFromState(void* statePtr);
    // public override System.Void WriteValueIntoState(System.Single value, System.Void* statePtr)
    // Offset: 0xE13DA0
    // Implemented from: UnityEngine.InputSystem.Controls.AxisControl
    // Base method: System.Void AxisControl::WriteValueIntoState(System.Single value, System.Void* statePtr)
    void WriteValueIntoState(float value, void* statePtr);
  }; // UnityEngine.InputSystem.Controls.DiscreteButtonControl
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Controls::DiscreteButtonControl::*)()>(&UnityEngine::InputSystem::Controls::DiscreteButtonControl::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::DiscreteButtonControl*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::ReadUnprocessedValueFromState
// Il2CppName: ReadUnprocessedValueFromState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::Controls::DiscreteButtonControl::*)(void*)>(&UnityEngine::InputSystem::Controls::DiscreteButtonControl::ReadUnprocessedValueFromState)> {
  static const MethodInfo* get() {
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::DiscreteButtonControl*), "ReadUnprocessedValueFromState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statePtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteValueIntoState
// Il2CppName: WriteValueIntoState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Controls::DiscreteButtonControl::*)(float, void*)>(&UnityEngine::InputSystem::Controls::DiscreteButtonControl::WriteValueIntoState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* statePtr = &il2cpp_functions::Class_GetPtrClass(::il2cpp_utils::GetClassFromName("System", "Void"))->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Controls::DiscreteButtonControl*), "WriteValueIntoState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, statePtr});
  }
};
