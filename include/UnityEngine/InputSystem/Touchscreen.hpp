// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Pointer
#include "UnityEngine/InputSystem/Pointer.hpp"
// Including type: UnityEngine.InputSystem.Utilities.ReadOnlyArray`1
#include "UnityEngine/InputSystem/Utilities/ReadOnlyArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: TouchControl
  class TouchControl;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputEventPtr
  struct InputEventPtr;
  // Forward declaring type: TouchState
  struct TouchState;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Skipping declaration: InputControl because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: Touchscreen
  class Touchscreen;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Touchscreen);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Touchscreen*, "UnityEngine.InputSystem", "Touchscreen");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Touchscreen
  // [TokenAttribute] Offset: FFFFFFFF
  // [InputControlLayoutAttribute] Offset: 957F14
  // [PreserveAttribute] Offset: FFFFFFFF
  class Touchscreen : public ::UnityEngine::InputSystem::Pointer {
    public:
    public:
    // private UnityEngine.InputSystem.Controls.TouchControl <primaryTouch>k__BackingField
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::InputSystem::Controls::TouchControl* primaryTouch;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::TouchControl*) == 0x8);
    // private UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Controls.TouchControl> <touches>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x180
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Controls::TouchControl*> touches;
    public:
    // Get static field: static private UnityEngine.InputSystem.Touchscreen <current>k__BackingField
    static ::UnityEngine::InputSystem::Touchscreen* _get_$current$k__BackingField();
    // Set static field: static private UnityEngine.InputSystem.Touchscreen <current>k__BackingField
    static void _set_$current$k__BackingField(::UnityEngine::InputSystem::Touchscreen* value);
    // Get static field: static System.Single s_TapTime
    static float _get_s_TapTime();
    // Set static field: static System.Single s_TapTime
    static void _set_s_TapTime(float value);
    // Get static field: static System.Single s_TapDelayTime
    static float _get_s_TapDelayTime();
    // Set static field: static System.Single s_TapDelayTime
    static void _set_s_TapDelayTime(float value);
    // Get static field: static System.Single s_TapRadiusSquared
    static float _get_s_TapRadiusSquared();
    // Set static field: static System.Single s_TapRadiusSquared
    static void _set_s_TapRadiusSquared(float value);
    // Get instance field reference: private UnityEngine.InputSystem.Controls.TouchControl <primaryTouch>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::TouchControl*& dyn_$primaryTouch$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Controls.TouchControl> <touches>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Controls::TouchControl*>& dyn_$touches$k__BackingField();
    // public UnityEngine.InputSystem.Controls.TouchControl get_primaryTouch()
    // Offset: 0xCD44EC
    ::UnityEngine::InputSystem::Controls::TouchControl* get_primaryTouch();
    // private System.Void set_primaryTouch(UnityEngine.InputSystem.Controls.TouchControl value)
    // Offset: 0xCD44F4
    void set_primaryTouch(::UnityEngine::InputSystem::Controls::TouchControl* value);
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Controls.TouchControl> get_touches()
    // Offset: 0xCD44FC
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Controls::TouchControl*> get_touches();
    // private System.Void set_touches(UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Controls.TouchControl> value)
    // Offset: 0xCD4508
    void set_touches(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Controls::TouchControl*> value);
    // static public UnityEngine.InputSystem.Touchscreen get_current()
    // Offset: 0xCD4510
    static ::UnityEngine::InputSystem::Touchscreen* get_current();
    // static System.Void set_current(UnityEngine.InputSystem.Touchscreen value)
    // Offset: 0xCD4560
    static void set_current(::UnityEngine::InputSystem::Touchscreen* value);
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnNextUpdate()
    // Offset: 0xCD5720
    void UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_OnNextUpdate();
    // private System.Void UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xCD5724
    void UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_OnStateEvent(::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // private System.Boolean UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.GetStateOffsetForEvent(UnityEngine.InputSystem.InputControl control, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr, ref System.UInt32 offset)
    // Offset: 0xCD5728
    bool UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_GetStateOffsetForEvent(::UnityEngine::InputSystem::InputControl* control, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr, ByRef<uint> offset);
    // static private System.Void TriggerTap(UnityEngine.InputSystem.Controls.TouchControl control, ref UnityEngine.InputSystem.LowLevel.TouchState state, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xCD5618
    static void TriggerTap(::UnityEngine::InputSystem::Controls::TouchControl* control, ByRef<::UnityEngine::InputSystem::LowLevel::TouchState> state, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // public System.Void .ctor()
    // Offset: 0xCD5830
    // Implemented from: UnityEngine.InputSystem.Pointer
    // Base method: System.Void Pointer::.ctor()
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Touchscreen* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Touchscreen::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Touchscreen*, creationType>()));
    }
    // public override System.Void MakeCurrent()
    // Offset: 0xCD45B4
    // Implemented from: UnityEngine.InputSystem.Pointer
    // Base method: System.Void Pointer::MakeCurrent()
    void MakeCurrent();
    // protected override System.Void OnRemoved()
    // Offset: 0xCD460C
    // Implemented from: UnityEngine.InputSystem.Pointer
    // Base method: System.Void Pointer::OnRemoved()
    void OnRemoved();
    // protected override System.Void FinishSetup()
    // Offset: 0xCD469C
    // Implemented from: UnityEngine.InputSystem.Pointer
    // Base method: System.Void Pointer::FinishSetup()
    void FinishSetup();
    // protected System.Void OnNextUpdate()
    // Offset: 0xCD4C0C
    // Implemented from: UnityEngine.InputSystem.Pointer
    // Base method: System.Void Pointer::OnNextUpdate()
    // Base method: System.Void Pointer::UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnNextUpdate()
    void OnNextUpdate();
    // protected System.Void OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xCD4EF4
    // Implemented from: UnityEngine.InputSystem.Pointer
    // Base method: System.Void Pointer::OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Base method: System.Void Pointer::UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnStateEvent(UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    void OnStateEvent(::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
  }; // UnityEngine.InputSystem.Touchscreen
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::get_primaryTouch
// Il2CppName: get_primaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::TouchControl* (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::get_primaryTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "get_primaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::set_primaryTouch
// Il2CppName: set_primaryTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)(::UnityEngine::InputSystem::Controls::TouchControl*)>(&UnityEngine::InputSystem::Touchscreen::set_primaryTouch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "TouchControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "set_primaryTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::get_touches
// Il2CppName: get_touches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Controls::TouchControl*> (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::get_touches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "get_touches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::set_touches
// Il2CppName: set_touches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)(::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Controls::TouchControl*>)>(&UnityEngine::InputSystem::Touchscreen::set_touches)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "ReadOnlyArray`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "TouchControl")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "set_touches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::get_current
// Il2CppName: get_current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Touchscreen* (*)()>(&UnityEngine::InputSystem::Touchscreen::get_current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "get_current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::set_current
// Il2CppName: set_current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::Touchscreen*)>(&UnityEngine::InputSystem::Touchscreen::set_current)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Touchscreen")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "set_current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_OnNextUpdate
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnNextUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_OnNextUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnNextUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_OnStateEvent
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::Touchscreen::UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_OnStateEvent)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.OnStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_GetStateOffsetForEvent
// Il2CppName: UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.GetStateOffsetForEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Touchscreen::*)(::UnityEngine::InputSystem::InputControl*, ::UnityEngine::InputSystem::LowLevel::InputEventPtr, ByRef<uint>)>(&UnityEngine::InputSystem::Touchscreen::UnityEngine_InputSystem_LowLevel_IInputStateCallbackReceiver_GetStateOffsetForEvent)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "UnityEngine.InputSystem.LowLevel.IInputStateCallbackReceiver.GetStateOffsetForEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, eventPtr, offset});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::TriggerTap
// Il2CppName: TriggerTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::Controls::TouchControl*, ByRef<::UnityEngine::InputSystem::LowLevel::TouchState>, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::Touchscreen::TriggerTap)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "TouchControl")->byval_arg;
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "TouchState")->this_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "TriggerTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, state, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::MakeCurrent
// Il2CppName: MakeCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::MakeCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "MakeCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::OnRemoved
// Il2CppName: OnRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::OnRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "OnRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::OnNextUpdate
// Il2CppName: OnNextUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)()>(&UnityEngine::InputSystem::Touchscreen::OnNextUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "OnNextUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Touchscreen::OnStateEvent
// Il2CppName: OnStateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Touchscreen::*)(::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::Touchscreen::OnStateEvent)> {
  static const MethodInfo* get() {
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Touchscreen*), "OnStateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventPtr});
  }
};
