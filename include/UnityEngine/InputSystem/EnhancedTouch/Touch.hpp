// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record
#include "UnityEngine/InputSystem/LowLevel/InputStateHistory_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.TouchState
#include "UnityEngine/InputSystem/LowLevel/TouchState.hpp"
// Including type: UnityEngine.InputSystem.Utilities.InlinedArray`1
#include "UnityEngine/InputSystem/Utilities/InlinedArray_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: TouchPhase
  struct TouchPhase;
  // Forward declaring type: Touchscreen
  class Touchscreen;
}
// Forward declaring namespace: UnityEngine::InputSystem::EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: Finger
  class Finger;
  // Forward declaring type: TouchHistory
  struct TouchHistory;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerable`1 because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Skipping declaration: InputStateHistory`1 because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: Touch
  struct Touch;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::EnhancedTouch::Touch, "UnityEngine.InputSystem.EnhancedTouch", "Touch");
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.EnhancedTouch.Touch
  // [TokenAttribute] Offset: FFFFFFFF
  struct Touch/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::EnhancedTouch::Touch::FingerAndTouchState
    struct FingerAndTouchState;
    // Nested type: ::UnityEngine::InputSystem::EnhancedTouch::Touch::ExtraDataPerTouchState
    struct ExtraDataPerTouchState;
    // Size: 0x40
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.FingerAndTouchState
    // [TokenAttribute] Offset: FFFFFFFF
    struct FingerAndTouchState/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.InputSystem.LowLevel.InputUpdateType updateMask
      // Size: 0x4
      // Offset: 0x0
      ::UnityEngine::InputSystem::LowLevel::InputUpdateType updateMask;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputUpdateType) == 0x4);
      // public System.UInt32 updateStepCount
      // Size: 0x4
      // Offset: 0x4
      uint updateStepCount;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public UnityEngine.InputSystem.EnhancedTouch.Finger[] fingers
      // Size: 0x8
      // Offset: 0x8
      ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*> fingers;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*>) == 0x8);
      // public UnityEngine.InputSystem.EnhancedTouch.Finger[] activeFingers
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*> activeFingers;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*>) == 0x8);
      // public UnityEngine.InputSystem.EnhancedTouch.Touch[] activeTouches
      // Size: 0x8
      // Offset: 0x18
      ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Touch> activeTouches;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Touch>) == 0x8);
      // public System.Int32 activeFingerCount
      // Size: 0x4
      // Offset: 0x20
      int activeFingerCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 activeTouchCount
      // Size: 0x4
      // Offset: 0x24
      int activeTouchCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 totalFingerCount
      // Size: 0x4
      // Offset: 0x28
      int totalFingerCount;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.UInt32 lastId
      // Size: 0x4
      // Offset: 0x2C
      uint lastId;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.Boolean haveBuiltActiveTouches
      // Size: 0x1
      // Offset: 0x30
      bool haveBuiltActiveTouches;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: haveBuiltActiveTouches and: activeTouchState
      char __padding9[0x7] = {};
      // public UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> activeTouchState
      // Size: 0x8
      // Offset: 0x38
      ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>* activeTouchState;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*) == 0x8);
      public:
      // Creating value type constructor for type: FingerAndTouchState
      constexpr FingerAndTouchState(::UnityEngine::InputSystem::LowLevel::InputUpdateType updateMask_ = {}, uint updateStepCount_ = {}, ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*> fingers_ = ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*> activeFingers_ = ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*>(static_cast<void*>(nullptr)), ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Touch> activeTouches_ = ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Touch>(static_cast<void*>(nullptr)), int activeFingerCount_ = {}, int activeTouchCount_ = {}, int totalFingerCount_ = {}, uint lastId_ = {}, bool haveBuiltActiveTouches_ = {}, ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>* activeTouchState_ = {}) noexcept : updateMask{updateMask_}, updateStepCount{updateStepCount_}, fingers{fingers_}, activeFingers{activeFingers_}, activeTouches{activeTouches_}, activeFingerCount{activeFingerCount_}, activeTouchCount{activeTouchCount_}, totalFingerCount{totalFingerCount_}, lastId{lastId_}, haveBuiltActiveTouches{haveBuiltActiveTouches_}, activeTouchState{activeTouchState_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.InputSystem.LowLevel.InputUpdateType updateMask
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputUpdateType& dyn_updateMask();
      // Get instance field reference: public System.UInt32 updateStepCount
      [[deprecated("Use field access instead!")]] uint& dyn_updateStepCount();
      // Get instance field reference: public UnityEngine.InputSystem.EnhancedTouch.Finger[] fingers
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*>& dyn_fingers();
      // Get instance field reference: public UnityEngine.InputSystem.EnhancedTouch.Finger[] activeFingers
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Finger*>& dyn_activeFingers();
      // Get instance field reference: public UnityEngine.InputSystem.EnhancedTouch.Touch[] activeTouches
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::EnhancedTouch::Touch>& dyn_activeTouches();
      // Get instance field reference: public System.Int32 activeFingerCount
      [[deprecated("Use field access instead!")]] int& dyn_activeFingerCount();
      // Get instance field reference: public System.Int32 activeTouchCount
      [[deprecated("Use field access instead!")]] int& dyn_activeTouchCount();
      // Get instance field reference: public System.Int32 totalFingerCount
      [[deprecated("Use field access instead!")]] int& dyn_totalFingerCount();
      // Get instance field reference: public System.UInt32 lastId
      [[deprecated("Use field access instead!")]] uint& dyn_lastId();
      // Get instance field reference: public System.Boolean haveBuiltActiveTouches
      [[deprecated("Use field access instead!")]] bool& dyn_haveBuiltActiveTouches();
      // Get instance field reference: public UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> activeTouchState
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*& dyn_activeTouchState();
      // public System.Void AddFingers(UnityEngine.InputSystem.Touchscreen screen)
      // Offset: 0xA44AC8
      void AddFingers(::UnityEngine::InputSystem::Touchscreen* screen);
      // public System.Void RemoveFingers(UnityEngine.InputSystem.Touchscreen screen)
      // Offset: 0xA44AD0
      void RemoveFingers(::UnityEngine::InputSystem::Touchscreen* screen);
      // public System.Void Destroy()
      // Offset: 0xA44AD8
      void Destroy();
      // public System.Void UpdateActiveFingers()
      // Offset: 0xA44AE0
      void UpdateActiveFingers();
      // public System.Void UpdateActiveTouches()
      // Offset: 0xA44AE8
      void UpdateActiveTouches();
    }; // UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.FingerAndTouchState
    #pragma pack(pop)
    static check_size<sizeof(Touch::FingerAndTouchState), 56 + sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*)> __UnityEngine_InputSystem_EnhancedTouch_Touch_FingerAndTouchStateSizeCheck;
    static_assert(sizeof(Touch::FingerAndTouchState) == 0x40);
    public:
    // private readonly UnityEngine.InputSystem.EnhancedTouch.Finger m_Finger
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::EnhancedTouch::Finger* m_Finger;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::EnhancedTouch::Finger*) == 0x8);
    // UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<UnityEngine.InputSystem.LowLevel.TouchState> m_TouchRecord
    // Size: 0xFFFFFFFF
    // Offset: 0x8
    typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>::Record m_TouchRecord;
    public:
    // Creating value type constructor for type: Touch
    constexpr Touch(::UnityEngine::InputSystem::EnhancedTouch::Finger* m_Finger_ = {}, typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>::Record m_TouchRecord_ = {}) noexcept : m_Finger{m_Finger_}, m_TouchRecord{m_TouchRecord_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>*>(this);
    }
    // Get static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.Touchscreen> s_Touchscreens
    static ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::Touchscreen*> _get_s_Touchscreens();
    // Set static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.Touchscreen> s_Touchscreens
    static void _set_s_Touchscreens(::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::Touchscreen*> value);
    // Get static field: static System.Int32 s_HistoryLengthPerFinger
    static int _get_s_HistoryLengthPerFinger();
    // Set static field: static System.Int32 s_HistoryLengthPerFinger
    static void _set_s_HistoryLengthPerFinger(int value);
    // Get static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger>> s_OnFingerDown
    static ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*> _get_s_OnFingerDown();
    // Set static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger>> s_OnFingerDown
    static void _set_s_OnFingerDown(::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*> value);
    // Get static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger>> s_OnFingerMove
    static ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*> _get_s_OnFingerMove();
    // Set static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger>> s_OnFingerMove
    static void _set_s_OnFingerMove(::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*> value);
    // Get static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger>> s_OnFingerUp
    static ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*> _get_s_OnFingerUp();
    // Set static field: static UnityEngine.InputSystem.Utilities.InlinedArray`1<System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger>> s_OnFingerUp
    static void _set_s_OnFingerUp(::UnityEngine::InputSystem::Utilities::InlinedArray_1<::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*> value);
    // Get static field: static UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.FingerAndTouchState s_PlayerState
    static ::UnityEngine::InputSystem::EnhancedTouch::Touch::FingerAndTouchState _get_s_PlayerState();
    // Set static field: static UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.FingerAndTouchState s_PlayerState
    static void _set_s_PlayerState(::UnityEngine::InputSystem::EnhancedTouch::Touch::FingerAndTouchState value);
    // Get instance field reference: private readonly UnityEngine.InputSystem.EnhancedTouch.Finger m_Finger
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::EnhancedTouch::Finger*& dyn_m_Finger();
    // Get instance field reference: UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<UnityEngine.InputSystem.LowLevel.TouchState> m_TouchRecord
    [[deprecated("Use field access instead!")]] typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>::Record& dyn_m_TouchRecord();
    // public System.Boolean get_valid()
    // Offset: 0xA44860
    bool get_valid();
    // public UnityEngine.InputSystem.EnhancedTouch.Finger get_finger()
    // Offset: 0xA44868
    ::UnityEngine::InputSystem::EnhancedTouch::Finger* get_finger();
    // public UnityEngine.InputSystem.TouchPhase get_phase()
    // Offset: 0xA44870
    ::UnityEngine::InputSystem::TouchPhase get_phase();
    // public System.Int32 get_touchId()
    // Offset: 0xA4488C
    int get_touchId();
    // public System.Single get_pressure()
    // Offset: 0xA448A8
    float get_pressure();
    // public UnityEngine.Vector2 get_radius()
    // Offset: 0xA448C4
    ::UnityEngine::Vector2 get_radius();
    // public System.Double get_startTime()
    // Offset: 0xA448E0
    double get_startTime();
    // public System.Double get_time()
    // Offset: 0xA448FC
    double get_time();
    // public UnityEngine.InputSystem.Touchscreen get_screen()
    // Offset: 0xA44904
    ::UnityEngine::InputSystem::Touchscreen* get_screen();
    // public UnityEngine.Vector2 get_screenPosition()
    // Offset: 0xA44920
    ::UnityEngine::Vector2 get_screenPosition();
    // public UnityEngine.Vector2 get_startScreenPosition()
    // Offset: 0xA4493C
    ::UnityEngine::Vector2 get_startScreenPosition();
    // public UnityEngine.Vector2 get_delta()
    // Offset: 0xA44958
    ::UnityEngine::Vector2 get_delta();
    // public System.Int32 get_tapCount()
    // Offset: 0xA44974
    int get_tapCount();
    // public System.Boolean get_isTap()
    // Offset: 0xA44990
    bool get_isTap();
    // public System.Boolean get_isInProgress()
    // Offset: 0xA449AC
    bool get_isInProgress();
    // System.UInt32 get_updateStepCount()
    // Offset: 0xA449E0
    uint get_updateStepCount();
    // System.UInt32 get_uniqueId()
    // Offset: 0xA449FC
    uint get_uniqueId();
    // private UnityEngine.InputSystem.LowLevel.TouchState get_state()
    // Offset: 0xA44A18
    ::UnityEngine::InputSystem::LowLevel::TouchState get_state();
    // private UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.ExtraDataPerTouchState get_extraData()
    // Offset: 0xA44A20
    ::UnityEngine::InputSystem::EnhancedTouch::Touch::ExtraDataPerTouchState get_extraData();
    // public UnityEngine.InputSystem.EnhancedTouch.TouchHistory get_history()
    // Offset: 0xA44A28
    ::UnityEngine::InputSystem::EnhancedTouch::TouchHistory get_history();
    // static public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.EnhancedTouch.Touch> get_activeTouches()
    // Offset: 0xE17A94
    static ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::EnhancedTouch::Touch> get_activeTouches();
    // static public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.EnhancedTouch.Finger> get_fingers()
    // Offset: 0xE17E80
    static ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*> get_fingers();
    // static public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.EnhancedTouch.Finger> get_activeFingers()
    // Offset: 0xE17F14
    static ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*> get_activeFingers();
    // static public System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.Touchscreen> get_screens()
    // Offset: 0xE180BC
    static ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Touchscreen*>* get_screens();
    // static public System.Int32 get_maxHistoryLengthPerFinger()
    // Offset: 0xE186B0
    static int get_maxHistoryLengthPerFinger();
    // static public System.Void add_onFingerDown(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)
    // Offset: 0xE1814C
    static void add_onFingerDown(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>* value);
    // static public System.Void remove_onFingerDown(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)
    // Offset: 0xE1820C
    static void remove_onFingerDown(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>* value);
    // static public System.Void add_onFingerUp(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)
    // Offset: 0xE18318
    static void add_onFingerUp(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>* value);
    // static public System.Void remove_onFingerUp(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)
    // Offset: 0xE183D8
    static void remove_onFingerUp(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>* value);
    // static public System.Void add_onFingerMove(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)
    // Offset: 0xE184E4
    static void add_onFingerMove(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>* value);
    // static public System.Void remove_onFingerMove(System.Action`1<UnityEngine.InputSystem.EnhancedTouch.Finger> value)
    // Offset: 0xE185A4
    static void remove_onFingerMove(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>* value);
    // System.Void .ctor(UnityEngine.InputSystem.EnhancedTouch.Finger finger, UnityEngine.InputSystem.LowLevel.InputStateHistory`1/UnityEngine.InputSystem.LowLevel.Record<UnityEngine.InputSystem.LowLevel.TouchState> touchRecord)
    // Offset: 0xA44A30
    // ABORTED: conflicts with another method.  Touch(::UnityEngine::InputSystem::EnhancedTouch::Finger* finger, typename ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>::Record touchRecord);
    // static private System.Void .cctor()
    // Offset: 0xE18DC0
    static void _cctor();
    // public System.Boolean Equals(UnityEngine.InputSystem.EnhancedTouch.Touch other)
    // Offset: 0xA44A44
    bool Equals(::UnityEngine::InputSystem::EnhancedTouch::Touch other);
    // static System.Void AddTouchscreen(UnityEngine.InputSystem.Touchscreen screen)
    // Offset: 0xE16884
    static void AddTouchscreen(::UnityEngine::InputSystem::Touchscreen* screen);
    // static System.Void RemoveTouchscreen(UnityEngine.InputSystem.Touchscreen screen)
    // Offset: 0xE16914
    static void RemoveTouchscreen(::UnityEngine::InputSystem::Touchscreen* screen);
    // static System.Void BeginUpdate()
    // Offset: 0xE18D48
    static void BeginUpdate();
    // public override System.String ToString()
    // Offset: 0xA44A3C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA44A7C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA44A84
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.EnhancedTouch.Touch
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::EnhancedTouch::Touch::FingerAndTouchState, "UnityEngine.InputSystem.EnhancedTouch", "Touch/FingerAndTouchState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_valid
// Il2CppName: get_valid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_valid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_valid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_finger
// Il2CppName: get_finger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::Finger* (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_finger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_finger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_phase
// Il2CppName: get_phase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::TouchPhase (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_phase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_phase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_touchId
// Il2CppName: get_touchId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_touchId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_touchId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_pressure
// Il2CppName: get_pressure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_pressure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_pressure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_radius
// Il2CppName: get_radius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_radius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_radius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_startTime
// Il2CppName: get_startTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_startTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_startTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_time
// Il2CppName: get_time
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_time)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_time", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_screen
// Il2CppName: get_screen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Touchscreen* (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_screen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_screen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_screenPosition
// Il2CppName: get_screenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_screenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_screenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_startScreenPosition
// Il2CppName: get_startScreenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_startScreenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_startScreenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_delta
// Il2CppName: get_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_delta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_tapCount
// Il2CppName: get_tapCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_tapCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_tapCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_isTap
// Il2CppName: get_isTap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_isTap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_isTap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_isInProgress
// Il2CppName: get_isInProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_isInProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_isInProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_updateStepCount
// Il2CppName: get_updateStepCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_updateStepCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_updateStepCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_uniqueId
// Il2CppName: get_uniqueId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_uniqueId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_uniqueId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::TouchState (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_extraData
// Il2CppName: get_extraData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::Touch::ExtraDataPerTouchState (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_extraData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_extraData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_history
// Il2CppName: get_history
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::TouchHistory (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_history)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_history", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_activeTouches
// Il2CppName: get_activeTouches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::EnhancedTouch::Touch> (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_activeTouches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_activeTouches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_fingers
// Il2CppName: get_fingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*> (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_fingers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_fingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_activeFingers
// Il2CppName: get_activeFingers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*> (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_activeFingers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_activeFingers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_screens
// Il2CppName: get_screens
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Touchscreen*>* (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_screens)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_screens", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::get_maxHistoryLengthPerFinger
// Il2CppName: get_maxHistoryLengthPerFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::get_maxHistoryLengthPerFinger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "get_maxHistoryLengthPerFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::add_onFingerDown
// Il2CppName: add_onFingerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::add_onFingerDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Finger")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "add_onFingerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::remove_onFingerDown
// Il2CppName: remove_onFingerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::remove_onFingerDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Finger")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "remove_onFingerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::add_onFingerUp
// Il2CppName: add_onFingerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::add_onFingerUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Finger")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "add_onFingerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::remove_onFingerUp
// Il2CppName: remove_onFingerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::remove_onFingerUp)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Finger")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "remove_onFingerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::add_onFingerMove
// Il2CppName: add_onFingerMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::add_onFingerMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Finger")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "add_onFingerMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::remove_onFingerMove
// Il2CppName: remove_onFingerMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<::UnityEngine::InputSystem::EnhancedTouch::Finger*>*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::remove_onFingerMove)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Finger")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "remove_onFingerMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::Touch
// Il2CppName: .ctor
// Cannot write MetadataGetter for a method that has a nested type with a declaring generic type anywhere within it!
// Talk to sc2ad if this is something you want
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::EnhancedTouch::Touch::*)(::UnityEngine::InputSystem::EnhancedTouch::Touch)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Touch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::AddTouchscreen
// Il2CppName: AddTouchscreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::Touchscreen*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::AddTouchscreen)> {
  static const MethodInfo* get() {
    static auto* screen = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Touchscreen")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "AddTouchscreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screen});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::RemoveTouchscreen
// Il2CppName: RemoveTouchscreen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::Touchscreen*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::RemoveTouchscreen)> {
  static const MethodInfo* get() {
    static auto* screen = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Touchscreen")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "RemoveTouchscreen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screen});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::BeginUpdate
// Il2CppName: BeginUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::BeginUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "BeginUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::EnhancedTouch::Touch::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::EnhancedTouch::Touch::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Touch::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::EnhancedTouch::Touch::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Touch::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Touch), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
