// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.TouchState
#include "UnityEngine/InputSystem/LowLevel/TouchState.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputUpdateType
#include "UnityEngine/InputSystem/LowLevel/InputUpdateType.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputStateHistory
#include "UnityEngine/InputSystem/LowLevel/InputStateHistory.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: Touchscreen
  class Touchscreen;
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: InputStateHistory`1<TValue>
  template<typename TValue>
  class InputStateHistory_1;
  // Skipping declaration: InputEventPtr because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: Touch
  struct Touch;
  // Forward declaring type: TouchHistory
  struct TouchHistory;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: Finger
  class Finger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::EnhancedTouch::Finger);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::EnhancedTouch::Finger*, "UnityEngine.InputSystem.EnhancedTouch", "Finger");
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.EnhancedTouch.Finger
  // [TokenAttribute] Offset: FFFFFFFF
  class Finger : public ::Il2CppObject {
    public:
    public:
    // private readonly UnityEngine.InputSystem.Touchscreen <screen>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::InputSystem::Touchscreen* screen;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Touchscreen*) == 0x8);
    // private readonly System.Int32 <index>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: index and: m_StateHistory
    char __padding1[0x4] = {};
    // readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> m_StateHistory
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>* m_StateHistory;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*) == 0x8);
    public:
    // Get instance field reference: private readonly UnityEngine.InputSystem.Touchscreen <screen>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Touchscreen*& dyn_$screen$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <index>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$index$k__BackingField();
    // Get instance field reference: readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> m_StateHistory
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*& dyn_m_StateHistory();
    // public UnityEngine.InputSystem.Touchscreen get_screen()
    // Offset: 0xE16A88
    ::UnityEngine::InputSystem::Touchscreen* get_screen();
    // public System.Int32 get_index()
    // Offset: 0xE16A90
    int get_index();
    // public System.Boolean get_isActive()
    // Offset: 0xE16A98
    bool get_isActive();
    // public UnityEngine.Vector2 get_screenPosition()
    // Offset: 0xE16C10
    ::UnityEngine::Vector2 get_screenPosition();
    // public UnityEngine.InputSystem.EnhancedTouch.Touch get_lastTouch()
    // Offset: 0xE16C58
    ::UnityEngine::InputSystem::EnhancedTouch::Touch get_lastTouch();
    // public UnityEngine.InputSystem.EnhancedTouch.Touch get_currentTouch()
    // Offset: 0xE16ACC
    ::UnityEngine::InputSystem::EnhancedTouch::Touch get_currentTouch();
    // public UnityEngine.InputSystem.EnhancedTouch.TouchHistory get_touchHistory()
    // Offset: 0xE16D54
    ::UnityEngine::InputSystem::EnhancedTouch::TouchHistory get_touchHistory();
    // System.Void .ctor(UnityEngine.InputSystem.Touchscreen screen, System.Int32 index, UnityEngine.InputSystem.LowLevel.InputUpdateType updateMask)
    // Offset: 0xE16DC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Finger* New_ctor(::UnityEngine::InputSystem::Touchscreen* screen, int index, ::UnityEngine::InputSystem::LowLevel::InputUpdateType updateMask) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::EnhancedTouch::Finger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Finger*, creationType>(screen, index, updateMask)));
    }
    // static private System.Boolean ShouldRecordTouch(UnityEngine.InputSystem.InputControl control, System.Double time, UnityEngine.InputSystem.LowLevel.InputEventPtr eventPtr)
    // Offset: 0xE16FC0
    static bool ShouldRecordTouch(::UnityEngine::InputSystem::InputControl* control, double time, ::UnityEngine::InputSystem::LowLevel::InputEventPtr eventPtr);
    // private System.Void OnTouchRecorded(UnityEngine.InputSystem.LowLevel.InputStateHistory/UnityEngine.InputSystem.LowLevel.Record record)
    // Offset: 0xE170D4
    void OnTouchRecorded(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record record);
    // private UnityEngine.InputSystem.EnhancedTouch.Touch FindTouch(System.UInt32 uniqueId)
    // Offset: 0xE17328
    ::UnityEngine::InputSystem::EnhancedTouch::Touch FindTouch(uint uniqueId);
    // UnityEngine.InputSystem.EnhancedTouch.TouchHistory GetTouchHistory(UnityEngine.InputSystem.EnhancedTouch.Touch touch)
    // Offset: 0xE175F4
    ::UnityEngine::InputSystem::EnhancedTouch::TouchHistory GetTouchHistory(::UnityEngine::InputSystem::EnhancedTouch::Touch touch);
  }; // UnityEngine.InputSystem.EnhancedTouch.Finger
  #pragma pack(pop)
  static check_size<sizeof(Finger), 32 + sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*)> __UnityEngine_InputSystem_EnhancedTouch_FingerSizeCheck;
  static_assert(sizeof(Finger) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_screen
// Il2CppName: get_screen
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Touchscreen* (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_screen)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_screen", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_isActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_screenPosition
// Il2CppName: get_screenPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_screenPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_screenPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_lastTouch
// Il2CppName: get_lastTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::Touch (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_lastTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_lastTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_currentTouch
// Il2CppName: get_currentTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::Touch (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_currentTouch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_currentTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::get_touchHistory
// Il2CppName: get_touchHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::TouchHistory (UnityEngine::InputSystem::EnhancedTouch::Finger::*)()>(&UnityEngine::InputSystem::EnhancedTouch::Finger::get_touchHistory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "get_touchHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::ShouldRecordTouch
// Il2CppName: ShouldRecordTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::InputControl*, double, ::UnityEngine::InputSystem::LowLevel::InputEventPtr)>(&UnityEngine::InputSystem::EnhancedTouch::Finger::ShouldRecordTouch)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* eventPtr = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputEventPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "ShouldRecordTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, time, eventPtr});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::OnTouchRecorded
// Il2CppName: OnTouchRecorded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::Finger::*)(::UnityEngine::InputSystem::LowLevel::InputStateHistory::Record)>(&UnityEngine::InputSystem::EnhancedTouch::Finger::OnTouchRecorded)> {
  static const MethodInfo* get() {
    static auto* record = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "InputStateHistory/Record")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "OnTouchRecorded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{record});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::FindTouch
// Il2CppName: FindTouch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::Touch (UnityEngine::InputSystem::EnhancedTouch::Finger::*)(uint)>(&UnityEngine::InputSystem::EnhancedTouch::Finger::FindTouch)> {
  static const MethodInfo* get() {
    static auto* uniqueId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "FindTouch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uniqueId});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::Finger::GetTouchHistory
// Il2CppName: GetTouchHistory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::TouchHistory (UnityEngine::InputSystem::EnhancedTouch::Finger::*)(::UnityEngine::InputSystem::EnhancedTouch::Touch)>(&UnityEngine::InputSystem::EnhancedTouch::Finger::GetTouchHistory)> {
  static const MethodInfo* get() {
    static auto* touch = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.EnhancedTouch", "Touch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::Finger*), "GetTouchHistory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{touch});
  }
};
