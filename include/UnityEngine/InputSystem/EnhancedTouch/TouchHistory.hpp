// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: UnityEngine.InputSystem.EnhancedTouch.Touch
#include "UnityEngine/InputSystem/EnhancedTouch/Touch.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: Finger
  class Finger;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Skipping declaration: InputStateHistory`1 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Forward declaring type: TouchHistory
  struct TouchHistory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::EnhancedTouch::TouchHistory, "UnityEngine.InputSystem.EnhancedTouch", "TouchHistory");
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.EnhancedTouch.TouchHistory
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 95838C
  struct TouchHistory/*, public ::System::ValueType, public ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::EnhancedTouch::TouchHistory::Enumerator
    class Enumerator;
    public:
    // private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> m_History
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>* m_History;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*) == 0x8);
    // private readonly UnityEngine.InputSystem.EnhancedTouch.Finger m_Finger
    // Size: 0x8
    // Offset: 0x8
    ::UnityEngine::InputSystem::EnhancedTouch::Finger* m_Finger;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::EnhancedTouch::Finger*) == 0x8);
    // private readonly System.Int32 m_Count
    // Size: 0x4
    // Offset: 0x10
    int m_Count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 m_StartIndex
    // Size: 0x4
    // Offset: 0x14
    int m_StartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0x18
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: TouchHistory
    constexpr TouchHistory(::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>* m_History_ = {}, ::UnityEngine::InputSystem::EnhancedTouch::Finger* m_Finger_ = {}, int m_Count_ = {}, int m_StartIndex_ = {}, uint m_Version_ = {}) noexcept : m_History{m_History_}, m_Finger{m_Finger_}, m_Count{m_Count_}, m_StartIndex{m_StartIndex_}, m_Version{m_Version_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>
    operator ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> m_History
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>*& dyn_m_History();
    // Get instance field reference: private readonly UnityEngine.InputSystem.EnhancedTouch.Finger m_Finger
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::EnhancedTouch::Finger*& dyn_m_Finger();
    // Get instance field reference: private readonly System.Int32 m_Count
    [[deprecated("Use field access instead!")]] int& dyn_m_Count();
    // Get instance field reference: private readonly System.Int32 m_StartIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_StartIndex();
    // Get instance field reference: private readonly System.UInt32 m_Version
    [[deprecated("Use field access instead!")]] uint& dyn_m_Version();
    // public System.Int32 get_Count()
    // Offset: 0xA44B78
    int get_Count();
    // public UnityEngine.InputSystem.EnhancedTouch.Touch get_Item(System.Int32 index)
    // Offset: 0xA44B80
    ::UnityEngine::InputSystem::EnhancedTouch::Touch get_Item(int index);
    // System.Void .ctor(UnityEngine.InputSystem.EnhancedTouch.Finger finger, UnityEngine.InputSystem.LowLevel.InputStateHistory`1<UnityEngine.InputSystem.LowLevel.TouchState> history, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xA44B2C
    TouchHistory(::UnityEngine::InputSystem::EnhancedTouch::Finger* finger, ::UnityEngine::InputSystem::LowLevel::InputStateHistory_1<::UnityEngine::InputSystem::LowLevel::TouchState>* history, int startIndex, int count);
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.EnhancedTouch.Touch> GetEnumerator()
    // Offset: 0xA44B68
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xA44B70
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // System.Void CheckValid()
    // Offset: 0xA44B88
    void CheckValid();
  }; // UnityEngine.InputSystem.EnhancedTouch.TouchHistory
  #pragma pack(pop)
  static check_size<sizeof(TouchHistory), 24 + sizeof(uint)> __UnityEngine_InputSystem_EnhancedTouch_TouchHistorySizeCheck;
  static_assert(sizeof(TouchHistory) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchHistory::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::EnhancedTouch::TouchHistory::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchHistory::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchHistory), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchHistory::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::EnhancedTouch::Touch (UnityEngine::InputSystem::EnhancedTouch::TouchHistory::*)(int)>(&UnityEngine::InputSystem::EnhancedTouch::TouchHistory::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchHistory), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchHistory::TouchHistory
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchHistory::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::EnhancedTouch::Touch>* (UnityEngine::InputSystem::EnhancedTouch::TouchHistory::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchHistory::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchHistory), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchHistory::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::InputSystem::EnhancedTouch::TouchHistory::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchHistory::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchHistory), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::EnhancedTouch::TouchHistory::CheckValid
// Il2CppName: CheckValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::EnhancedTouch::TouchHistory::*)()>(&UnityEngine::InputSystem::EnhancedTouch::TouchHistory::CheckValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::EnhancedTouch::TouchHistory), "CheckValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
