// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.EnhancedTouch.Touch
#include "UnityEngine/InputSystem/EnhancedTouch/Touch.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::EnhancedTouch::Touch::ExtraDataPerTouchState, "UnityEngine.InputSystem.EnhancedTouch", "Touch/ExtraDataPerTouchState");
// Type namespace: UnityEngine.InputSystem.EnhancedTouch
namespace UnityEngine::InputSystem::EnhancedTouch {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.ExtraDataPerTouchState
  // [TokenAttribute] Offset: FFFFFFFF
  struct Touch::ExtraDataPerTouchState/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector2 accumulatedDelta
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 accumulatedDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public System.UInt32 updateStepCount
    // Size: 0x4
    // Offset: 0x8
    uint updateStepCount;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 uniqueId
    // Size: 0x4
    // Offset: 0xC
    uint uniqueId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: ExtraDataPerTouchState
    constexpr ExtraDataPerTouchState(::UnityEngine::Vector2 accumulatedDelta_ = {}, uint updateStepCount_ = {}, uint uniqueId_ = {}) noexcept : accumulatedDelta{accumulatedDelta_}, updateStepCount{updateStepCount_}, uniqueId{uniqueId_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector2 accumulatedDelta
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_accumulatedDelta();
    // Get instance field reference: public System.UInt32 updateStepCount
    [[deprecated("Use field access instead!")]] uint& dyn_updateStepCount();
    // Get instance field reference: public System.UInt32 uniqueId
    [[deprecated("Use field access instead!")]] uint& dyn_uniqueId();
  }; // UnityEngine.InputSystem.EnhancedTouch.Touch/UnityEngine.InputSystem.EnhancedTouch.ExtraDataPerTouchState
  #pragma pack(pop)
  static check_size<sizeof(Touch::ExtraDataPerTouchState), 12 + sizeof(uint)> __UnityEngine_InputSystem_EnhancedTouch_Touch_ExtraDataPerTouchStateSizeCheck;
  static_assert(sizeof(Touch::ExtraDataPerTouchState) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
