// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputDevice
#include "UnityEngine/InputSystem/InputDevice.hpp"
// Including type: UnityEngine.InputSystem.Haptics.IDualMotorRumble
#include "UnityEngine/InputSystem/Haptics/IDualMotorRumble.hpp"
// Including type: UnityEngine.InputSystem.Haptics.DualMotorRumble
#include "UnityEngine/InputSystem/Haptics/DualMotorRumble.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Controls
namespace UnityEngine::InputSystem::Controls {
  // Forward declaring type: ButtonControl
  class ButtonControl;
  // Forward declaring type: DpadControl
  class DpadControl;
  // Forward declaring type: StickControl
  class StickControl;
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: GamepadButton
  struct GamepadButton;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: Gamepad
  class Gamepad;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Gamepad);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Gamepad*, "UnityEngine.InputSystem", "Gamepad");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x1D0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Gamepad
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 9576E4
  // [InputControlLayoutAttribute] Offset: 9576E4
  // [PreserveAttribute] Offset: FFFFFFFF
  class Gamepad : public ::UnityEngine::InputSystem::InputDevice/*, public ::UnityEngine::InputSystem::Haptics::IDualMotorRumble*/ {
    public:
    public:
    // private UnityEngine.InputSystem.Controls.ButtonControl <buttonWest>k__BackingField
    // Size: 0x8
    // Offset: 0x150
    ::UnityEngine::InputSystem::Controls::ButtonControl* buttonWest;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <buttonNorth>k__BackingField
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::InputSystem::Controls::ButtonControl* buttonNorth;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <buttonSouth>k__BackingField
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::InputSystem::Controls::ButtonControl* buttonSouth;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <buttonEast>k__BackingField
    // Size: 0x8
    // Offset: 0x168
    ::UnityEngine::InputSystem::Controls::ButtonControl* buttonEast;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <leftStickButton>k__BackingField
    // Size: 0x8
    // Offset: 0x170
    ::UnityEngine::InputSystem::Controls::ButtonControl* leftStickButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <rightStickButton>k__BackingField
    // Size: 0x8
    // Offset: 0x178
    ::UnityEngine::InputSystem::Controls::ButtonControl* rightStickButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <startButton>k__BackingField
    // Size: 0x8
    // Offset: 0x180
    ::UnityEngine::InputSystem::Controls::ButtonControl* startButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <selectButton>k__BackingField
    // Size: 0x8
    // Offset: 0x188
    ::UnityEngine::InputSystem::Controls::ButtonControl* selectButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.DpadControl <dpad>k__BackingField
    // Size: 0x8
    // Offset: 0x190
    ::UnityEngine::InputSystem::Controls::DpadControl* dpad;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::DpadControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <leftShoulder>k__BackingField
    // Size: 0x8
    // Offset: 0x198
    ::UnityEngine::InputSystem::Controls::ButtonControl* leftShoulder;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <rightShoulder>k__BackingField
    // Size: 0x8
    // Offset: 0x1A0
    ::UnityEngine::InputSystem::Controls::ButtonControl* rightShoulder;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.StickControl <leftStick>k__BackingField
    // Size: 0x8
    // Offset: 0x1A8
    ::UnityEngine::InputSystem::Controls::StickControl* leftStick;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::StickControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.StickControl <rightStick>k__BackingField
    // Size: 0x8
    // Offset: 0x1B0
    ::UnityEngine::InputSystem::Controls::StickControl* rightStick;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::StickControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <leftTrigger>k__BackingField
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::InputSystem::Controls::ButtonControl* leftTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Controls.ButtonControl <rightTrigger>k__BackingField
    // Size: 0x8
    // Offset: 0x1C0
    ::UnityEngine::InputSystem::Controls::ButtonControl* rightTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Controls::ButtonControl*) == 0x8);
    // private UnityEngine.InputSystem.Haptics.DualMotorRumble m_Rumble
    // Size: 0x8
    // Offset: 0x1C8
    ::UnityEngine::InputSystem::Haptics::DualMotorRumble m_Rumble;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Haptics::DualMotorRumble) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::InputSystem::Haptics::IDualMotorRumble
    operator ::UnityEngine::InputSystem::Haptics::IDualMotorRumble() noexcept {
      return *reinterpret_cast<::UnityEngine::InputSystem::Haptics::IDualMotorRumble*>(this);
    }
    // Get static field: static private UnityEngine.InputSystem.Gamepad <current>k__BackingField
    static ::UnityEngine::InputSystem::Gamepad* _get_$current$k__BackingField();
    // Set static field: static private UnityEngine.InputSystem.Gamepad <current>k__BackingField
    static void _set_$current$k__BackingField(::UnityEngine::InputSystem::Gamepad* value);
    // Get static field: static private System.Int32 s_GamepadCount
    static int _get_s_GamepadCount();
    // Set static field: static private System.Int32 s_GamepadCount
    static void _set_s_GamepadCount(int value);
    // Get static field: static private UnityEngine.InputSystem.Gamepad[] s_Gamepads
    static ::ArrayW<::UnityEngine::InputSystem::Gamepad*> _get_s_Gamepads();
    // Set static field: static private UnityEngine.InputSystem.Gamepad[] s_Gamepads
    static void _set_s_Gamepads(::ArrayW<::UnityEngine::InputSystem::Gamepad*> value);
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <buttonWest>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$buttonWest$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <buttonNorth>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$buttonNorth$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <buttonSouth>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$buttonSouth$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <buttonEast>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$buttonEast$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <leftStickButton>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$leftStickButton$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <rightStickButton>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$rightStickButton$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <startButton>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$startButton$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <selectButton>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$selectButton$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.DpadControl <dpad>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::DpadControl*& dyn_$dpad$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <leftShoulder>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$leftShoulder$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <rightShoulder>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$rightShoulder$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.StickControl <leftStick>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::StickControl*& dyn_$leftStick$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.StickControl <rightStick>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::StickControl*& dyn_$rightStick$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <leftTrigger>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$leftTrigger$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Controls.ButtonControl <rightTrigger>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Controls::ButtonControl*& dyn_$rightTrigger$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Haptics.DualMotorRumble m_Rumble
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Haptics::DualMotorRumble& dyn_m_Rumble();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_buttonWest()
    // Offset: 0xE1AEF8
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_buttonWest();
    // private System.Void set_buttonWest(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF00
    void set_buttonWest(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_buttonNorth()
    // Offset: 0xE1AF08
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_buttonNorth();
    // private System.Void set_buttonNorth(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF10
    void set_buttonNorth(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_buttonSouth()
    // Offset: 0xE1AF18
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_buttonSouth();
    // private System.Void set_buttonSouth(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF20
    void set_buttonSouth(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_buttonEast()
    // Offset: 0xE1AF28
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_buttonEast();
    // private System.Void set_buttonEast(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF30
    void set_buttonEast(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_leftStickButton()
    // Offset: 0xE1AF38
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_leftStickButton();
    // private System.Void set_leftStickButton(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF40
    void set_leftStickButton(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_rightStickButton()
    // Offset: 0xE1AF48
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_rightStickButton();
    // private System.Void set_rightStickButton(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF50
    void set_rightStickButton(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_startButton()
    // Offset: 0xE1AF58
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_startButton();
    // private System.Void set_startButton(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF60
    void set_startButton(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_selectButton()
    // Offset: 0xE1AF68
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_selectButton();
    // private System.Void set_selectButton(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF70
    void set_selectButton(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.DpadControl get_dpad()
    // Offset: 0xE1AF78
    ::UnityEngine::InputSystem::Controls::DpadControl* get_dpad();
    // private System.Void set_dpad(UnityEngine.InputSystem.Controls.DpadControl value)
    // Offset: 0xE1AF80
    void set_dpad(::UnityEngine::InputSystem::Controls::DpadControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_leftShoulder()
    // Offset: 0xE1AF88
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_leftShoulder();
    // private System.Void set_leftShoulder(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AF90
    void set_leftShoulder(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_rightShoulder()
    // Offset: 0xE1AF98
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_rightShoulder();
    // private System.Void set_rightShoulder(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AFA0
    void set_rightShoulder(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.StickControl get_leftStick()
    // Offset: 0xE1AFA8
    ::UnityEngine::InputSystem::Controls::StickControl* get_leftStick();
    // private System.Void set_leftStick(UnityEngine.InputSystem.Controls.StickControl value)
    // Offset: 0xE1AFB0
    void set_leftStick(::UnityEngine::InputSystem::Controls::StickControl* value);
    // public UnityEngine.InputSystem.Controls.StickControl get_rightStick()
    // Offset: 0xE1AFB8
    ::UnityEngine::InputSystem::Controls::StickControl* get_rightStick();
    // private System.Void set_rightStick(UnityEngine.InputSystem.Controls.StickControl value)
    // Offset: 0xE1AFC0
    void set_rightStick(::UnityEngine::InputSystem::Controls::StickControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_leftTrigger()
    // Offset: 0xE1AFC8
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_leftTrigger();
    // private System.Void set_leftTrigger(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AFD0
    void set_leftTrigger(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_rightTrigger()
    // Offset: 0xE1AFD8
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_rightTrigger();
    // private System.Void set_rightTrigger(UnityEngine.InputSystem.Controls.ButtonControl value)
    // Offset: 0xE1AFE0
    void set_rightTrigger(::UnityEngine::InputSystem::Controls::ButtonControl* value);
    // public UnityEngine.InputSystem.Controls.ButtonControl get_aButton()
    // Offset: 0xE1AFE8
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_aButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_bButton()
    // Offset: 0xE1AFF0
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_bButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_xButton()
    // Offset: 0xE1AFF8
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_xButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_yButton()
    // Offset: 0xE1B000
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_yButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_triangleButton()
    // Offset: 0xE1B008
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_triangleButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_squareButton()
    // Offset: 0xE1B010
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_squareButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_circleButton()
    // Offset: 0xE1B018
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_circleButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_crossButton()
    // Offset: 0xE1B020
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_crossButton();
    // public UnityEngine.InputSystem.Controls.ButtonControl get_Item(UnityEngine.InputSystem.LowLevel.GamepadButton button)
    // Offset: 0xE1B028
    ::UnityEngine::InputSystem::Controls::ButtonControl* get_Item(::UnityEngine::InputSystem::LowLevel::GamepadButton button);
    // static public UnityEngine.InputSystem.Gamepad get_current()
    // Offset: 0xE1B1BC
    static ::UnityEngine::InputSystem::Gamepad* get_current();
    // static private System.Void set_current(UnityEngine.InputSystem.Gamepad value)
    // Offset: 0xE1B20C
    static void set_current(::UnityEngine::InputSystem::Gamepad* value);
    // static public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.Gamepad> get_all()
    // Offset: 0xE1B260
    static ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Gamepad*> get_all();
    // public System.Void PauseHaptics()
    // Offset: 0xE1B348
    void PauseHaptics();
    // public System.Void ResumeHaptics()
    // Offset: 0xE1B358
    void ResumeHaptics();
    // public System.Void ResetHaptics()
    // Offset: 0xE1B368
    void ResetHaptics();
    // public System.Void SetMotorSpeeds(System.Single lowFrequency, System.Single highFrequency)
    // Offset: 0xE1B378
    void SetMotorSpeeds(float lowFrequency, float highFrequency);
    // public System.Void .ctor()
    // Offset: 0xE10CF8
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Void InputDevice::.ctor()
    // Base method: System.Void InputControl::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Gamepad* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Gamepad::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Gamepad*, creationType>()));
    }
    // protected override System.Void FinishSetup()
    // Offset: 0xE159D8
    // Implemented from: UnityEngine.InputSystem.InputControl
    // Base method: System.Void InputControl::FinishSetup()
    void FinishSetup();
    // public override System.Void MakeCurrent()
    // Offset: 0xE15734
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Void InputDevice::MakeCurrent()
    void MakeCurrent();
    // protected override System.Void OnAdded()
    // Offset: 0xE1B2DC
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Void InputDevice::OnAdded()
    void OnAdded();
    // protected override System.Void OnRemoved()
    // Offset: 0xE15820
    // Implemented from: UnityEngine.InputSystem.InputDevice
    // Base method: System.Void InputDevice::OnRemoved()
    void OnRemoved();
  }; // UnityEngine.InputSystem.Gamepad
  #pragma pack(pop)
  static check_size<sizeof(Gamepad), 456 + sizeof(::UnityEngine::InputSystem::Haptics::DualMotorRumble)> __UnityEngine_InputSystem_GamepadSizeCheck;
  static_assert(sizeof(Gamepad) == 0x1D0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_buttonWest
// Il2CppName: get_buttonWest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_buttonWest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_buttonWest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_buttonWest
// Il2CppName: set_buttonWest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_buttonWest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_buttonWest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_buttonNorth
// Il2CppName: get_buttonNorth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_buttonNorth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_buttonNorth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_buttonNorth
// Il2CppName: set_buttonNorth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_buttonNorth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_buttonNorth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_buttonSouth
// Il2CppName: get_buttonSouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_buttonSouth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_buttonSouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_buttonSouth
// Il2CppName: set_buttonSouth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_buttonSouth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_buttonSouth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_buttonEast
// Il2CppName: get_buttonEast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_buttonEast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_buttonEast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_buttonEast
// Il2CppName: set_buttonEast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_buttonEast)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_buttonEast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_leftStickButton
// Il2CppName: get_leftStickButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_leftStickButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_leftStickButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_leftStickButton
// Il2CppName: set_leftStickButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_leftStickButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_leftStickButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_rightStickButton
// Il2CppName: get_rightStickButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_rightStickButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_rightStickButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_rightStickButton
// Il2CppName: set_rightStickButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_rightStickButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_rightStickButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_startButton
// Il2CppName: get_startButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_startButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_startButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_startButton
// Il2CppName: set_startButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_startButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_startButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_selectButton
// Il2CppName: get_selectButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_selectButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_selectButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_selectButton
// Il2CppName: set_selectButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_selectButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_selectButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_dpad
// Il2CppName: get_dpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::DpadControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_dpad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_dpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_dpad
// Il2CppName: set_dpad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::DpadControl*)>(&UnityEngine::InputSystem::Gamepad::set_dpad)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "DpadControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_dpad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_leftShoulder
// Il2CppName: get_leftShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_leftShoulder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_leftShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_leftShoulder
// Il2CppName: set_leftShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_leftShoulder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_leftShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_rightShoulder
// Il2CppName: get_rightShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_rightShoulder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_rightShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_rightShoulder
// Il2CppName: set_rightShoulder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_rightShoulder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_rightShoulder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_leftStick
// Il2CppName: get_leftStick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::StickControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_leftStick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_leftStick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_leftStick
// Il2CppName: set_leftStick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::StickControl*)>(&UnityEngine::InputSystem::Gamepad::set_leftStick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "StickControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_leftStick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_rightStick
// Il2CppName: get_rightStick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::StickControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_rightStick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_rightStick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_rightStick
// Il2CppName: set_rightStick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::StickControl*)>(&UnityEngine::InputSystem::Gamepad::set_rightStick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "StickControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_rightStick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_leftTrigger
// Il2CppName: get_leftTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_leftTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_leftTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_leftTrigger
// Il2CppName: set_leftTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_leftTrigger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_leftTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_rightTrigger
// Il2CppName: get_rightTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_rightTrigger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_rightTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_rightTrigger
// Il2CppName: set_rightTrigger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::Controls::ButtonControl*)>(&UnityEngine::InputSystem::Gamepad::set_rightTrigger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Controls", "ButtonControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_rightTrigger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_aButton
// Il2CppName: get_aButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_aButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_aButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_bButton
// Il2CppName: get_bButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_bButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_bButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_xButton
// Il2CppName: get_xButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_xButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_xButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_yButton
// Il2CppName: get_yButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_yButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_yButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_triangleButton
// Il2CppName: get_triangleButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_triangleButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_triangleButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_squareButton
// Il2CppName: get_squareButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_squareButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_squareButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_circleButton
// Il2CppName: get_circleButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_circleButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_circleButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_crossButton
// Il2CppName: get_crossButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::get_crossButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_crossButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Controls::ButtonControl* (UnityEngine::InputSystem::Gamepad::*)(::UnityEngine::InputSystem::LowLevel::GamepadButton)>(&UnityEngine::InputSystem::Gamepad::get_Item)> {
  static const MethodInfo* get() {
    static auto* button = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.LowLevel", "GamepadButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{button});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_current
// Il2CppName: get_current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Gamepad* (*)()>(&UnityEngine::InputSystem::Gamepad::get_current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::set_current
// Il2CppName: set_current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::InputSystem::Gamepad*)>(&UnityEngine::InputSystem::Gamepad::set_current)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "Gamepad")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "set_current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::get_all
// Il2CppName: get_all
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::Gamepad*> (*)()>(&UnityEngine::InputSystem::Gamepad::get_all)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "get_all", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::PauseHaptics
// Il2CppName: PauseHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::PauseHaptics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "PauseHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::ResumeHaptics
// Il2CppName: ResumeHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::ResumeHaptics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "ResumeHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::ResetHaptics
// Il2CppName: ResetHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::ResetHaptics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "ResetHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::SetMotorSpeeds
// Il2CppName: SetMotorSpeeds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)(float, float)>(&UnityEngine::InputSystem::Gamepad::SetMotorSpeeds)> {
  static const MethodInfo* get() {
    static auto* lowFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* highFrequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "SetMotorSpeeds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowFrequency, highFrequency});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::FinishSetup
// Il2CppName: FinishSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::FinishSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "FinishSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::MakeCurrent
// Il2CppName: MakeCurrent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::MakeCurrent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "MakeCurrent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::OnAdded
// Il2CppName: OnAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::OnAdded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "OnAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Gamepad::OnRemoved
// Il2CppName: OnRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Gamepad::*)()>(&UnityEngine::InputSystem::Gamepad::OnRemoved)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Gamepad*), "OnRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
