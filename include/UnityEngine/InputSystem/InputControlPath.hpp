// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Char
#include "System/Char.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputControlLayout
#include "UnityEngine/InputSystem/Layouts/InputControlLayout.hpp"
// Including type: UnityEngine.InputSystem.InputControlList`1
#include "UnityEngine/InputSystem/InputControlList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: Substring
  struct Substring;
  // Skipping declaration: InternedString because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControlPath
  class InputControlPath;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::InputControlPath);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlPath*, "UnityEngine.InputSystem", "InputControlPath");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputControlPath
  // [TokenAttribute] Offset: FFFFFFFF
  class InputControlPath : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions
    struct HumanReadableStringOptions;
    // Nested type: ::UnityEngine::InputSystem::InputControlPath::PathComponentType
    struct PathComponentType;
    // Nested type: ::UnityEngine::InputSystem::InputControlPath::ParsedPathComponent
    struct ParsedPathComponent;
    // Nested type: ::UnityEngine::InputSystem::InputControlPath::PathParser
    struct PathParser;
    // Nested type: ::UnityEngine::InputSystem::InputControlPath::$$c
    class $$c;
    // static field const value: static public System.String Wildcard
    static constexpr const char* Wildcard = "*";
    // Get static field: static public System.String Wildcard
    static ::StringW _get_Wildcard();
    // Set static field: static public System.String Wildcard
    static void _set_Wildcard(::StringW value);
    // static field const value: static public System.String DoubleWildcard
    static constexpr const char* DoubleWildcard = "**";
    // Get static field: static public System.String DoubleWildcard
    static ::StringW _get_DoubleWildcard();
    // Set static field: static public System.String DoubleWildcard
    static void _set_DoubleWildcard(::StringW value);
    // static field const value: static public System.Char Separator
    static constexpr const ::Il2CppChar Separator = u'/';
    // Get static field: static public System.Char Separator
    static ::Il2CppChar _get_Separator();
    // Set static field: static public System.Char Separator
    static void _set_Separator(::Il2CppChar value);
    // static public System.String Combine(UnityEngine.InputSystem.InputControl parent, System.String path)
    // Offset: 0x1377D48
    static ::StringW Combine(::UnityEngine::InputSystem::InputControl* parent, ::StringW path);
    // static public System.String ToHumanReadableString(System.String path, UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions options, UnityEngine.InputSystem.InputControl control)
    // Offset: 0x1379EA8
    static ::StringW ToHumanReadableString(::StringW path, ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions options, ::UnityEngine::InputSystem::InputControl* control);
    // static public System.String ToHumanReadableString(System.String path, out System.String deviceLayoutName, out System.String controlPath, UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions options, UnityEngine.InputSystem.InputControl control)
    // Offset: 0x1374A90
    static ::StringW ToHumanReadableString(::StringW path, ByRef<::StringW> deviceLayoutName, ByRef<::StringW> controlPath, ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions options, ::UnityEngine::InputSystem::InputControl* control);
    // static public System.String[] TryGetDeviceUsages(System.String path)
    // Offset: 0x1379FC8
    static ::ArrayW<::StringW> TryGetDeviceUsages(::StringW path);
    // static public System.String TryGetDeviceLayout(System.String path)
    // Offset: 0x137A150
    static ::StringW TryGetDeviceLayout(::StringW path);
    // static public System.String TryGetControlLayout(System.String path)
    // Offset: 0x137A248
    static ::StringW TryGetControlLayout(::StringW path);
    // static private System.String FindControlLayoutRecursive(ref UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathParser parser, System.String layoutName)
    // Offset: 0x137A438
    static ::StringW FindControlLayoutRecursive(ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser> parser, ::StringW layoutName);
    // static private System.String FindControlLayoutRecursive(ref UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathParser parser, UnityEngine.InputSystem.Layouts.InputControlLayout layout)
    // Offset: 0x137A590
    static ::StringW FindControlLayoutRecursive(ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser> parser, ::UnityEngine::InputSystem::Layouts::InputControlLayout* layout);
    // static private System.Boolean ControlLayoutMatchesPathComponent(ref UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItem controlItem, ref UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathParser parser)
    // Offset: 0x137A744
    static bool ControlLayoutMatchesPathComponent(ByRef<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItem> controlItem, ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser> parser);
    // static private System.Boolean StringMatches(UnityEngine.InputSystem.Utilities.Substring str, UnityEngine.InputSystem.Utilities.InternedString matchTo)
    // Offset: 0x137A8D4
    static bool StringMatches(::UnityEngine::InputSystem::Utilities::Substring str, ::UnityEngine::InputSystem::Utilities::InternedString matchTo);
    // static public UnityEngine.InputSystem.InputControl TryFindControl(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath)
    // Offset: 0x136ECCC
    static ::UnityEngine::InputSystem::InputControl* TryFindControl(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath);
    // static public UnityEngine.InputSystem.InputControl[] TryFindControls(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath)
    // Offset: 0x137AAB4
    static ::ArrayW<::UnityEngine::InputSystem::InputControl*> TryFindControls(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath);
    // static public System.Int32 TryFindControls(UnityEngine.InputSystem.InputControl control, System.String path, ref UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> matches, System.Int32 indexInPath)
    // Offset: 0x137ABC4
    static int TryFindControls(::UnityEngine::InputSystem::InputControl* control, ::StringW path, ByRef<::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>> matches, int indexInPath);
    // static public TControl TryFindControl(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static TControl TryFindControl(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlPath::TryFindControl");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlPath", "TryFindControl", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(indexInPath)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TControl, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, path, indexInPath);
    }
    // static public System.Int32 TryFindControls(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath, ref UnityEngine.InputSystem.InputControlList`1<TControl> matches)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static int TryFindControls(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath, ByRef<::UnityEngine::InputSystem::InputControlList_1<TControl>> matches) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlPath::TryFindControls");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlPath", "TryFindControls", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(indexInPath), ::il2cpp_utils::ExtractType(matches)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, path, indexInPath, byref(matches));
    }
    // static public UnityEngine.InputSystem.InputControl TryFindChild(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath)
    // Offset: 0x1378198
    static ::UnityEngine::InputSystem::InputControl* TryFindChild(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath);
    // static public TControl TryFindChild(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static TControl TryFindChild(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlPath::TryFindChild");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlPath", "TryFindChild", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(indexInPath)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TControl, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, path, indexInPath);
    }
    // static public System.Boolean Matches(System.String expected, UnityEngine.InputSystem.InputControl control)
    // Offset: 0x1379ED8
    static bool Matches(::StringW expected, ::UnityEngine::InputSystem::InputControl* control);
    // static public System.Boolean MatchesPrefix(System.String expected, UnityEngine.InputSystem.InputControl control)
    // Offset: 0x137ACA4
    static bool MatchesPrefix(::StringW expected, ::UnityEngine::InputSystem::InputControl* control);
    // static private System.Boolean MatchesRecursive(ref UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathParser parser, UnityEngine.InputSystem.InputControl currentControl)
    // Offset: 0x137AC3C
    static bool MatchesRecursive(ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser> parser, ::UnityEngine::InputSystem::InputControl* currentControl);
    // static private TControl MatchControlsRecursive(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath, ref UnityEngine.InputSystem.InputControlList`1<TControl> matches, System.Boolean matchMultiple)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static TControl MatchControlsRecursive(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath, ByRef<::UnityEngine::InputSystem::InputControlList_1<TControl>> matches, bool matchMultiple) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlPath::MatchControlsRecursive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlPath", "MatchControlsRecursive", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(indexInPath), ::il2cpp_utils::ExtractType(matches), ::il2cpp_utils::ExtractType(matchMultiple)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TControl, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, path, indexInPath, byref(matches), matchMultiple);
    }
    // static private TControl MatchByUsageAtDeviceRootRecursive(UnityEngine.InputSystem.InputDevice device, System.String path, System.Int32 indexInPath, ref UnityEngine.InputSystem.InputControlList`1<TControl> matches, System.Boolean matchMultiple)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static TControl MatchByUsageAtDeviceRootRecursive(::UnityEngine::InputSystem::InputDevice* device, ::StringW path, int indexInPath, ByRef<::UnityEngine::InputSystem::InputControlList_1<TControl>> matches, bool matchMultiple) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlPath::MatchByUsageAtDeviceRootRecursive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlPath", "MatchByUsageAtDeviceRootRecursive", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(device), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(indexInPath), ::il2cpp_utils::ExtractType(matches), ::il2cpp_utils::ExtractType(matchMultiple)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TControl, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, device, path, indexInPath, byref(matches), matchMultiple);
    }
    // static private TControl MatchChildrenRecursive(UnityEngine.InputSystem.InputControl control, System.String path, System.Int32 indexInPath, ref UnityEngine.InputSystem.InputControlList`1<TControl> matches, System.Boolean matchMultiple)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TControl>
    static TControl MatchChildrenRecursive(::UnityEngine::InputSystem::InputControl* control, ::StringW path, int indexInPath, ByRef<::UnityEngine::InputSystem::InputControlList_1<TControl>> matches, bool matchMultiple) {
      static_assert(std::is_convertible_v<TControl, ::UnityEngine::InputSystem::InputControl*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlPath::MatchChildrenRecursive");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlPath", "MatchChildrenRecursive", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(control), ::il2cpp_utils::ExtractType(path), ::il2cpp_utils::ExtractType(indexInPath), ::il2cpp_utils::ExtractType(matches), ::il2cpp_utils::ExtractType(matchMultiple)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TControl>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<TControl, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, control, path, indexInPath, byref(matches), matchMultiple);
    }
    // static private System.Boolean MatchPathComponent(System.String component, System.String path, ref System.Int32 indexInPath, UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.PathComponentType componentType, System.Int32 startIndexInComponent)
    // Offset: 0x137ADB8
    static bool MatchPathComponent(::StringW component, ::StringW path, ByRef<int> indexInPath, ::UnityEngine::InputSystem::InputControlPath::PathComponentType componentType, int startIndexInComponent);
    // static private System.Boolean PathComponentCanYieldMultipleMatches(System.String path, System.Int32 indexInPath)
    // Offset: 0x137B008
    static bool PathComponentCanYieldMultipleMatches(::StringW path, int indexInPath);
  }; // UnityEngine.InputSystem.InputControlPath
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::Combine
// Il2CppName: Combine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::UnityEngine::InputSystem::InputControl*, ::StringW)>(&UnityEngine::InputSystem::InputControlPath::Combine)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "Combine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, path});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ToHumanReadableString
// Il2CppName: ToHumanReadableString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlPath::ToHumanReadableString)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/HumanReadableStringOptions")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "ToHumanReadableString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, options, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ToHumanReadableString
// Il2CppName: ToHumanReadableString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, ByRef<::StringW>, ByRef<::StringW>, ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlPath::ToHumanReadableString)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* deviceLayoutName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/HumanReadableStringOptions")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "ToHumanReadableString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, deviceLayoutName, controlPath, options, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryGetDeviceUsages
// Il2CppName: TryGetDeviceUsages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::StringW)>(&UnityEngine::InputSystem::InputControlPath::TryGetDeviceUsages)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryGetDeviceUsages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryGetDeviceLayout
// Il2CppName: TryGetDeviceLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&UnityEngine::InputSystem::InputControlPath::TryGetDeviceLayout)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryGetDeviceLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryGetControlLayout
// Il2CppName: TryGetControlLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&UnityEngine::InputSystem::InputControlPath::TryGetControlLayout)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryGetControlLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::FindControlLayoutRecursive
// Il2CppName: FindControlLayoutRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser>, ::StringW)>(&UnityEngine::InputSystem::InputControlPath::FindControlLayoutRecursive)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/PathParser")->this_arg;
    static auto* layoutName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "FindControlLayoutRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser, layoutName});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::FindControlLayoutRecursive
// Il2CppName: FindControlLayoutRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser>, ::UnityEngine::InputSystem::Layouts::InputControlLayout*)>(&UnityEngine::InputSystem::InputControlPath::FindControlLayoutRecursive)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/PathParser")->this_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputControlLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "FindControlLayoutRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser, layout});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::ControlLayoutMatchesPathComponent
// Il2CppName: ControlLayoutMatchesPathComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItem>, ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser>)>(&UnityEngine::InputSystem::InputControlPath::ControlLayoutMatchesPathComponent)> {
  static const MethodInfo* get() {
    static auto* controlItem = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputControlLayout/ControlItem")->this_arg;
    static auto* parser = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/PathParser")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "ControlLayoutMatchesPathComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlItem, parser});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::StringMatches
// Il2CppName: StringMatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::InputSystem::Utilities::Substring, ::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::InputControlPath::StringMatches)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "Substring")->byval_arg;
    static auto* matchTo = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "StringMatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str, matchTo});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindControl
// Il2CppName: TryFindControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControl* (*)(::UnityEngine::InputSystem::InputControl*, ::StringW, int)>(&UnityEngine::InputSystem::InputControlPath::TryFindControl)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexInPath = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryFindControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, path, indexInPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindControls
// Il2CppName: TryFindControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::InputSystem::InputControl*> (*)(::UnityEngine::InputSystem::InputControl*, ::StringW, int)>(&UnityEngine::InputSystem::InputControlPath::TryFindControls)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexInPath = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryFindControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, path, indexInPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindControls
// Il2CppName: TryFindControls
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::InputSystem::InputControl*, ::StringW, ByRef<::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>>, int)>(&UnityEngine::InputSystem::InputControlPath::TryFindControls)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* matches = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")})->this_arg;
    static auto* indexInPath = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryFindControls", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, path, matches, indexInPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindControl
// Il2CppName: TryFindControl
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindControls
// Il2CppName: TryFindControls
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindChild
// Il2CppName: TryFindChild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControl* (*)(::UnityEngine::InputSystem::InputControl*, ::StringW, int)>(&UnityEngine::InputSystem::InputControlPath::TryFindChild)> {
  static const MethodInfo* get() {
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexInPath = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "TryFindChild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{control, path, indexInPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::TryFindChild
// Il2CppName: TryFindChild
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::Matches
// Il2CppName: Matches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlPath::Matches)> {
  static const MethodInfo* get() {
    static auto* expected = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "Matches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expected, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::MatchesPrefix
// Il2CppName: MatchesPrefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlPath::MatchesPrefix)> {
  static const MethodInfo* get() {
    static auto* expected = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* control = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "MatchesPrefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expected, control});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::MatchesRecursive
// Il2CppName: MatchesRecursive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::InputSystem::InputControlPath::PathParser>, ::UnityEngine::InputSystem::InputControl*)>(&UnityEngine::InputSystem::InputControlPath::MatchesRecursive)> {
  static const MethodInfo* get() {
    static auto* parser = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/PathParser")->this_arg;
    static auto* currentControl = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControl")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "MatchesRecursive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parser, currentControl});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::MatchControlsRecursive
// Il2CppName: MatchControlsRecursive
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::MatchByUsageAtDeviceRootRecursive
// Il2CppName: MatchByUsageAtDeviceRootRecursive
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::MatchChildrenRecursive
// Il2CppName: MatchChildrenRecursive
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::MatchPathComponent
// Il2CppName: MatchPathComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<int>, ::UnityEngine::InputSystem::InputControlPath::PathComponentType, int)>(&UnityEngine::InputSystem::InputControlPath::MatchPathComponent)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexInPath = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* componentType = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlPath/PathComponentType")->byval_arg;
    static auto* startIndexInComponent = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "MatchPathComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, path, indexInPath, componentType, startIndexInComponent});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlPath::PathComponentCanYieldMultipleMatches
// Il2CppName: PathComponentCanYieldMultipleMatches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int)>(&UnityEngine::InputSystem::InputControlPath::PathComponentCanYieldMultipleMatches)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* indexInPath = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlPath*), "PathComponentCanYieldMultipleMatches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, indexInPath});
  }
};
