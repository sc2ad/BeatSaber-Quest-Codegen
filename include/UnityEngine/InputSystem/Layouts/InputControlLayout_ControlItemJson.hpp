// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputControlLayout
#include "UnityEngine/InputSystem/Layouts/InputControlLayout.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Layouts
namespace UnityEngine::InputSystem::Layouts {
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*, "UnityEngine.InputSystem.Layouts", "InputControlLayout/ControlItemJson");
// Type namespace: UnityEngine.InputSystem.Layouts
namespace UnityEngine::InputSystem::Layouts {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItemJson
  // [TokenAttribute] Offset: FFFFFFFF
  class InputControlLayout::ControlItemJson : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::$$c
    class $$c;
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String layout
    // Size: 0x8
    // Offset: 0x18
    ::StringW layout;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String variants
    // Size: 0x8
    // Offset: 0x20
    ::StringW variants;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String usage
    // Size: 0x8
    // Offset: 0x28
    ::StringW usage;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String alias
    // Size: 0x8
    // Offset: 0x30
    ::StringW alias;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String useStateFrom
    // Size: 0x8
    // Offset: 0x38
    ::StringW useStateFrom;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt32 offset
    // Size: 0x4
    // Offset: 0x40
    uint offset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 bit
    // Size: 0x4
    // Offset: 0x44
    uint bit;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 sizeInBits
    // Size: 0x4
    // Offset: 0x48
    uint sizeInBits;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: sizeInBits and: format
    char __padding8[0x4] = {};
    // public System.String format
    // Size: 0x8
    // Offset: 0x50
    ::StringW format;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 arraySize
    // Size: 0x4
    // Offset: 0x58
    int arraySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: arraySize and: usages
    char __padding10[0x4] = {};
    // public System.String[] usages
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> usages;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] aliases
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::StringW> aliases;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String parameters
    // Size: 0x8
    // Offset: 0x70
    ::StringW parameters;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String processors
    // Size: 0x8
    // Offset: 0x78
    ::StringW processors;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x80
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String shortDisplayName
    // Size: 0x8
    // Offset: 0x88
    ::StringW shortDisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean noisy
    // Size: 0x1
    // Offset: 0x90
    bool noisy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean synthetic
    // Size: 0x1
    // Offset: 0x91
    bool synthetic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: synthetic and: defaultState
    char __padding18[0x6] = {};
    // public System.String defaultState
    // Size: 0x8
    // Offset: 0x98
    ::StringW defaultState;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String minValue
    // Size: 0x8
    // Offset: 0xA0
    ::StringW minValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String maxValue
    // Size: 0x8
    // Offset: 0xA8
    ::StringW maxValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String layout
    [[deprecated("Use field access instead!")]] ::StringW& dyn_layout();
    // Get instance field reference: public System.String variants
    [[deprecated("Use field access instead!")]] ::StringW& dyn_variants();
    // Get instance field reference: public System.String usage
    [[deprecated("Use field access instead!")]] ::StringW& dyn_usage();
    // Get instance field reference: public System.String alias
    [[deprecated("Use field access instead!")]] ::StringW& dyn_alias();
    // Get instance field reference: public System.String useStateFrom
    [[deprecated("Use field access instead!")]] ::StringW& dyn_useStateFrom();
    // Get instance field reference: public System.UInt32 offset
    [[deprecated("Use field access instead!")]] uint& dyn_offset();
    // Get instance field reference: public System.UInt32 bit
    [[deprecated("Use field access instead!")]] uint& dyn_bit();
    // Get instance field reference: public System.UInt32 sizeInBits
    [[deprecated("Use field access instead!")]] uint& dyn_sizeInBits();
    // Get instance field reference: public System.String format
    [[deprecated("Use field access instead!")]] ::StringW& dyn_format();
    // Get instance field reference: public System.Int32 arraySize
    [[deprecated("Use field access instead!")]] int& dyn_arraySize();
    // Get instance field reference: public System.String[] usages
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_usages();
    // Get instance field reference: public System.String[] aliases
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_aliases();
    // Get instance field reference: public System.String parameters
    [[deprecated("Use field access instead!")]] ::StringW& dyn_parameters();
    // Get instance field reference: public System.String processors
    [[deprecated("Use field access instead!")]] ::StringW& dyn_processors();
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public System.String shortDisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_shortDisplayName();
    // Get instance field reference: public System.Boolean noisy
    [[deprecated("Use field access instead!")]] bool& dyn_noisy();
    // Get instance field reference: public System.Boolean synthetic
    [[deprecated("Use field access instead!")]] bool& dyn_synthetic();
    // Get instance field reference: public System.String defaultState
    [[deprecated("Use field access instead!")]] ::StringW& dyn_defaultState();
    // Get instance field reference: public System.String minValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_minValue();
    // Get instance field reference: public System.String maxValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_maxValue();
    // public System.Void .ctor()
    // Offset: 0x11236C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputControlLayout::ControlItemJson* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputControlLayout::ControlItemJson*, creationType>()));
    }
    // public UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItem ToLayout()
    // Offset: 0x11236F4
    ::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItem ToLayout();
    // static public UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItemJson[] FromControlItems(UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItem[] items)
    // Offset: 0x1123C5C
    static ::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*> FromControlItems(::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItem> items);
  }; // UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItemJson
  #pragma pack(pop)
  static check_size<sizeof(InputControlLayout::ControlItemJson), 168 + sizeof(::StringW)> __UnityEngine_InputSystem_Layouts_InputControlLayout_ControlItemJsonSizeCheck;
  static_assert(sizeof(InputControlLayout::ControlItemJson) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::ToLayout
// Il2CppName: ToLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItem (UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::*)()>(&UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::ToLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*), "ToLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::FromControlItems
// Il2CppName: FromControlItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*> (*)(::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItem>)>(&UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson::FromControlItems)> {
  static const MethodInfo* get() {
    static auto* items = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputControlLayout/ControlItem"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*), "FromControlItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{items});
  }
};
