// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputControlLayout
#include "UnityEngine/InputSystem/Layouts/InputControlLayout.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Layouts::InputControlLayout::CacheRefInstance, "UnityEngine.InputSystem.Layouts", "InputControlLayout/CacheRefInstance");
// Type namespace: UnityEngine.InputSystem.Layouts
namespace UnityEngine::InputSystem::Layouts {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.CacheRefInstance
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlLayout::CacheRefInstance/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // public System.Boolean valid
    // Size: 0x1
    // Offset: 0x0
    bool valid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: CacheRefInstance
    constexpr CacheRefInstance(bool valid_ = {}) noexcept : valid{valid_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return valid;
    }
    // Get instance field reference: public System.Boolean valid
    [[deprecated("Use field access instead!")]] bool& dyn_valid();
    // public System.Void Dispose()
    // Offset: 0xA53380
    void Dispose();
  }; // UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.CacheRefInstance
  #pragma pack(pop)
  static check_size<sizeof(InputControlLayout::CacheRefInstance), 0 + sizeof(bool)> __UnityEngine_InputSystem_Layouts_InputControlLayout_CacheRefInstanceSizeCheck;
  static_assert(sizeof(InputControlLayout::CacheRefInstance) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Layouts::InputControlLayout::CacheRefInstance::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Layouts::InputControlLayout::CacheRefInstance::*)()>(&UnityEngine::InputSystem::Layouts::InputControlLayout::CacheRefInstance::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Layouts::InputControlLayout::CacheRefInstance), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
