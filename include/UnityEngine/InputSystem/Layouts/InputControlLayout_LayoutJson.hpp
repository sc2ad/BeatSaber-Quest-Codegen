// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Layouts.InputControlLayout
#include "UnityEngine/InputSystem/Layouts/InputControlLayout.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Layouts
namespace UnityEngine::InputSystem::Layouts {
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson, "UnityEngine.InputSystem.Layouts", "InputControlLayout/LayoutJson");
// Type namespace: UnityEngine.InputSystem.Layouts
namespace UnityEngine::InputSystem::Layouts {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.LayoutJson
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlLayout::LayoutJson/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson::$$c
    class $$c;
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String extend
    // Size: 0x8
    // Offset: 0x8
    ::StringW extend;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] extendMultiple
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::StringW> extendMultiple;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String format
    // Size: 0x8
    // Offset: 0x18
    ::StringW format;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String beforeRender
    // Size: 0x8
    // Offset: 0x20
    ::StringW beforeRender;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] commonUsages
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> commonUsages;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String displayName
    // Size: 0x8
    // Offset: 0x30
    ::StringW displayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String description
    // Size: 0x8
    // Offset: 0x38
    ::StringW description;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String type
    // Size: 0x8
    // Offset: 0x40
    ::StringW type;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String variant
    // Size: 0x8
    // Offset: 0x48
    ::StringW variant;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean isGenericTypeOfDevice
    // Size: 0x1
    // Offset: 0x50
    bool isGenericTypeOfDevice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean hideInUI
    // Size: 0x1
    // Offset: 0x51
    bool hideInUI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hideInUI and: controls
    char __padding11[0x6] = {};
    // public UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItemJson[] controls
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*> controls;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*>) == 0x8);
    public:
    // Creating value type constructor for type: LayoutJson
    constexpr LayoutJson(::StringW name_ = {}, ::StringW extend_ = {}, ::ArrayW<::StringW> extendMultiple_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), ::StringW format_ = {}, ::StringW beforeRender_ = {}, ::ArrayW<::StringW> commonUsages_ = ::ArrayW<::StringW>(static_cast<void*>(nullptr)), ::StringW displayName_ = {}, ::StringW description_ = {}, ::StringW type_ = {}, ::StringW variant_ = {}, bool isGenericTypeOfDevice_ = {}, bool hideInUI_ = {}, ::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*> controls_ = ::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*>(static_cast<void*>(nullptr))) noexcept : name{name_}, extend{extend_}, extendMultiple{extendMultiple_}, format{format_}, beforeRender{beforeRender_}, commonUsages{commonUsages_}, displayName{displayName_}, description{description_}, type{type_}, variant{variant_}, isGenericTypeOfDevice{isGenericTypeOfDevice_}, hideInUI{hideInUI_}, controls{controls_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.String extend
    [[deprecated("Use field access instead!")]] ::StringW& dyn_extend();
    // Get instance field reference: public System.String[] extendMultiple
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_extendMultiple();
    // Get instance field reference: public System.String format
    [[deprecated("Use field access instead!")]] ::StringW& dyn_format();
    // Get instance field reference: public System.String beforeRender
    [[deprecated("Use field access instead!")]] ::StringW& dyn_beforeRender();
    // Get instance field reference: public System.String[] commonUsages
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_commonUsages();
    // Get instance field reference: public System.String displayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_displayName();
    // Get instance field reference: public System.String description
    [[deprecated("Use field access instead!")]] ::StringW& dyn_description();
    // Get instance field reference: public System.String type
    [[deprecated("Use field access instead!")]] ::StringW& dyn_type();
    // Get instance field reference: public System.String variant
    [[deprecated("Use field access instead!")]] ::StringW& dyn_variant();
    // Get instance field reference: public System.Boolean isGenericTypeOfDevice
    [[deprecated("Use field access instead!")]] bool& dyn_isGenericTypeOfDevice();
    // Get instance field reference: public System.Boolean hideInUI
    [[deprecated("Use field access instead!")]] bool& dyn_hideInUI();
    // Get instance field reference: public UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.ControlItemJson[] controls
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*>& dyn_controls();
    // public UnityEngine.InputSystem.Layouts.InputControlLayout ToLayout()
    // Offset: 0xA53770
    ::UnityEngine::InputSystem::Layouts::InputControlLayout* ToLayout();
    // static public UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.LayoutJson FromLayout(UnityEngine.InputSystem.Layouts.InputControlLayout layout)
    // Offset: 0x111D5D0
    static ::UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson FromLayout(::UnityEngine::InputSystem::Layouts::InputControlLayout* layout);
  }; // UnityEngine.InputSystem.Layouts.InputControlLayout/UnityEngine.InputSystem.Layouts.LayoutJson
  #pragma pack(pop)
  static check_size<sizeof(InputControlLayout::LayoutJson), 88 + sizeof(::ArrayW<::UnityEngine::InputSystem::Layouts::InputControlLayout::ControlItemJson*>)> __UnityEngine_InputSystem_Layouts_InputControlLayout_LayoutJsonSizeCheck;
  static_assert(sizeof(InputControlLayout::LayoutJson) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson::ToLayout
// Il2CppName: ToLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Layouts::InputControlLayout* (UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson::*)()>(&UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson::ToLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson), "ToLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson::FromLayout
// Il2CppName: FromLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson (*)(::UnityEngine::InputSystem::Layouts::InputControlLayout*)>(&UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson::FromLayout)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Layouts", "InputControlLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Layouts::InputControlLayout::LayoutJson), "FromLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
