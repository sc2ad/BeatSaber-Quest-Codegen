// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionSetupExtensions
#include "UnityEngine/InputSystem/InputActionSetupExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.InputControlScheme
#include "UnityEngine/InputSystem/InputControlScheme.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputActionAsset
  class InputActionAsset;
  // Forward declaring type: InputDevice
  class InputDevice;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax, "UnityEngine.InputSystem", "InputActionSetupExtensions/ControlSchemeSyntax");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionSetupExtensions::ControlSchemeSyntax/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly UnityEngine.InputSystem.InputActionAsset m_Asset
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::InputSystem::InputActionAsset* m_Asset;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputActionAsset*) == 0x8);
    // private readonly System.Int32 m_ControlSchemeIndex
    // Size: 0x4
    // Offset: 0x8
    int m_ControlSchemeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_ControlSchemeIndex and: m_ControlScheme
    char __padding1[0x4] = {};
    // private UnityEngine.InputSystem.InputControlScheme m_ControlScheme
    // Size: 0x18
    // Offset: 0x10
    ::UnityEngine::InputSystem::InputControlScheme m_ControlScheme;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::InputControlScheme) == 0x18);
    public:
    // Creating value type constructor for type: ControlSchemeSyntax
    constexpr ControlSchemeSyntax(::UnityEngine::InputSystem::InputActionAsset* m_Asset_ = {}, int m_ControlSchemeIndex_ = {}, ::UnityEngine::InputSystem::InputControlScheme m_ControlScheme_ = {}) noexcept : m_Asset{m_Asset_}, m_ControlSchemeIndex{m_ControlSchemeIndex_}, m_ControlScheme{m_ControlScheme_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly UnityEngine.InputSystem.InputActionAsset m_Asset
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionAsset*& dyn_m_Asset();
    // Get instance field reference: private readonly System.Int32 m_ControlSchemeIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_ControlSchemeIndex();
    // Get instance field reference: private UnityEngine.InputSystem.InputControlScheme m_ControlScheme
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlScheme& dyn_m_ControlScheme();
    // System.Void .ctor(UnityEngine.InputSystem.InputActionAsset asset, System.Int32 index)
    // Offset: 0xA5B07C
    ControlSchemeSyntax(::UnityEngine::InputSystem::InputActionAsset* asset, int index);
    // System.Void .ctor(UnityEngine.InputSystem.InputControlScheme controlScheme)
    // Offset: 0xA5B090
    ControlSchemeSyntax(::UnityEngine::InputSystem::InputControlScheme controlScheme);
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax WithBindingGroup(System.String bindingGroup)
    // Offset: 0xA5B0C0
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax WithBindingGroup(::StringW bindingGroup);
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax WithRequiredDevice()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax WithRequiredDevice() {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithRequiredDevice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithRequiredDevice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax, false>(this, ___generic__method);
    }
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax WithOptionalDevice()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax WithOptionalDevice() {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithOptionalDevice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "WithOptionalDevice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax, false>(this, ___generic__method);
    }
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax OrWithRequiredDevice()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax OrWithRequiredDevice() {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithRequiredDevice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "OrWithRequiredDevice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax, false>(this, ___generic__method);
    }
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax OrWithOptionalDevice()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax OrWithOptionalDevice() {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithOptionalDevice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "OrWithOptionalDevice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax, false>(this, ___generic__method);
    }
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax WithRequiredDevice(System.String controlPath)
    // Offset: 0xA5B0C8
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax WithRequiredDevice(::StringW controlPath);
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax WithOptionalDevice(System.String controlPath)
    // Offset: 0xA5B104
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax WithOptionalDevice(::StringW controlPath);
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax OrWithRequiredDevice(System.String controlPath)
    // Offset: 0xA5B140
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax OrWithRequiredDevice(::StringW controlPath);
    // public UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax OrWithOptionalDevice(System.String controlPath)
    // Offset: 0xA5B17C
    ::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax OrWithOptionalDevice(::StringW controlPath);
    // private System.String DeviceTypeToControlPath()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevice>
    ::StringW DeviceTypeToControlPath() {
      static_assert(std::is_convertible_v<TDevice, ::UnityEngine::InputSystem::InputDevice*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::DeviceTypeToControlPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "DeviceTypeToControlPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevice>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___generic__method);
    }
    // public UnityEngine.InputSystem.InputControlScheme Done()
    // Offset: 0xA5B1B8
    ::UnityEngine::InputSystem::InputControlScheme Done();
    // private System.Void AddDeviceEntry(System.String controlPath, UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags flags)
    // Offset: 0xA5B1C0
    void AddDeviceEntry(::StringW controlPath, ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags flags);
  }; // UnityEngine.InputSystem.InputActionSetupExtensions/UnityEngine.InputSystem.ControlSchemeSyntax
  #pragma pack(pop)
  static check_size<sizeof(InputActionSetupExtensions::ControlSchemeSyntax), 16 + sizeof(::UnityEngine::InputSystem::InputControlScheme)> __UnityEngine_InputSystem_InputActionSetupExtensions_ControlSchemeSyntaxSizeCheck;
  static_assert(sizeof(InputActionSetupExtensions::ControlSchemeSyntax) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::ControlSchemeSyntax
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::ControlSchemeSyntax
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithBindingGroup
// Il2CppName: WithBindingGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)(::StringW)>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithBindingGroup)> {
  static const MethodInfo* get() {
    static auto* bindingGroup = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "WithBindingGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bindingGroup});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithRequiredDevice
// Il2CppName: WithRequiredDevice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithOptionalDevice
// Il2CppName: WithOptionalDevice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithRequiredDevice
// Il2CppName: OrWithRequiredDevice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithOptionalDevice
// Il2CppName: OrWithOptionalDevice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithRequiredDevice
// Il2CppName: WithRequiredDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)(::StringW)>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithRequiredDevice)> {
  static const MethodInfo* get() {
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "WithRequiredDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithOptionalDevice
// Il2CppName: WithOptionalDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)(::StringW)>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::WithOptionalDevice)> {
  static const MethodInfo* get() {
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "WithOptionalDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithRequiredDevice
// Il2CppName: OrWithRequiredDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)(::StringW)>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithRequiredDevice)> {
  static const MethodInfo* get() {
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "OrWithRequiredDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithOptionalDevice
// Il2CppName: OrWithOptionalDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)(::StringW)>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::OrWithOptionalDevice)> {
  static const MethodInfo* get() {
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "OrWithOptionalDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPath});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::DeviceTypeToControlPath
// Il2CppName: DeviceTypeToControlPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::InputControlScheme (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)()>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::Done)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::AddDeviceEntry
// Il2CppName: AddDeviceEntry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::*)(::StringW, ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags)>(&UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax::AddDeviceEntry)> {
  static const MethodInfo* get() {
    static auto* controlPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlScheme/DeviceRequirement/Flags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputActionSetupExtensions::ControlSchemeSyntax), "AddDeviceEntry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controlPath, flags});
  }
};
