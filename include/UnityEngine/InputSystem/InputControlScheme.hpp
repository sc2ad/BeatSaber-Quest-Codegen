// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.InputSystem.InputControlList`1
#include "UnityEngine/InputSystem/InputControlList_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ReadOnlyArray`1<TValue>
  template<typename TValue>
  struct ReadOnlyArray_1;
}
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputDevice
  class InputDevice;
  // Forward declaring type: InputControl
  class InputControl;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IReadOnlyList`1 because it is already included!
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputControlScheme
  struct InputControlScheme;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme, "UnityEngine.InputSystem", "InputControlScheme");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputControlScheme
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputControlScheme/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::InputControlScheme::MatchResult
    struct MatchResult;
    // Nested type: ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement
    struct DeviceRequirement;
    // Nested type: ::UnityEngine::InputSystem::InputControlScheme::SchemeJson
    struct SchemeJson;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult
    // [TokenAttribute] Offset: FFFFFFFF
    // [DefaultMemberAttribute] Offset: 9595B8
    struct MatchResult/*, public ::System::ValueType, public ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match>, public ::System::IDisposable*/ {
      public:
      // Nested type: ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result
      struct Result;
      // Nested type: ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match
      struct Match;
      // Nested type: ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Enumerator
      struct Enumerator;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result
      // [TokenAttribute] Offset: FFFFFFFF
      struct Result/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: Result
        constexpr Result(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result AllSatisfied
        static constexpr const int AllSatisfied = 0;
        // Get static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result AllSatisfied
        static ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result _get_AllSatisfied();
        // Set static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result AllSatisfied
        static void _set_AllSatisfied(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result value);
        // static field const value: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result MissingRequired
        static constexpr const int MissingRequired = 1;
        // Get static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result MissingRequired
        static ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result _get_MissingRequired();
        // Set static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result MissingRequired
        static void _set_MissingRequired(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result value);
        // static field const value: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result MissingOptional
        static constexpr const int MissingOptional = 2;
        // Get static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result MissingOptional
        static ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result _get_MissingOptional();
        // Set static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result MissingOptional
        static void _set_MissingOptional(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result
      #pragma pack(pop)
      static check_size<sizeof(InputControlScheme::MatchResult::Result), 0 + sizeof(int)> __UnityEngine_InputSystem_InputControlScheme_MatchResult_ResultSizeCheck;
      static_assert(sizeof(InputControlScheme::MatchResult::Result) == 0x4);
      // WARNING Size may be invalid!
      // WARNING Layout: Sequential may not be correctly taken into account!
      // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Match
      // [TokenAttribute] Offset: FFFFFFFF
      struct Match/*, public ::System::ValueType*/ {
        public:
        public:
        // System.Int32 m_RequirementIndex
        // Size: 0x4
        // Offset: 0x0
        int m_RequirementIndex;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement[] m_Requirements
        // Size: 0x8
        // Offset: 0x8
        ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> m_Requirements;
        // Field size check
        static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>) == 0x8);
        // UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> m_Controls
        // Size: 0xFFFFFFFF
        // Offset: 0x10
        ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*> m_Controls;
        public:
        // Creating value type constructor for type: Match
        constexpr Match(int m_RequirementIndex_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> m_Requirements_ = ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>(static_cast<void*>(nullptr)), ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*> m_Controls_ = {}) noexcept : m_RequirementIndex{m_RequirementIndex_}, m_Requirements{m_Requirements_}, m_Controls{m_Controls_} {}
        // Creating interface conversion operator: operator ::System::ValueType
        operator ::System::ValueType() noexcept {
          return *reinterpret_cast<::System::ValueType*>(this);
        }
        // Get instance field reference: System.Int32 m_RequirementIndex
        [[deprecated("Use field access instead!")]] int& dyn_m_RequirementIndex();
        // Get instance field reference: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement[] m_Requirements
        [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>& dyn_m_Requirements();
        // Get instance field reference: UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> m_Controls
        [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>& dyn_m_Controls();
        // public UnityEngine.InputSystem.InputControl get_control()
        // Offset: 0xA41AB4
        ::UnityEngine::InputSystem::InputControl* get_control();
        // public UnityEngine.InputSystem.InputDevice get_device()
        // Offset: 0xA41ABC
        ::UnityEngine::InputSystem::InputDevice* get_device();
        // public System.Int32 get_requirementIndex()
        // Offset: 0xA41ADC
        int get_requirementIndex();
        // public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement get_requirement()
        // Offset: 0xA41AE4
        ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement get_requirement();
        // public System.Boolean get_isOptional()
        // Offset: 0xA41AEC
        bool get_isOptional();
      }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Match
      // WARNING Not writing size check since size may be invalid!
      public:
      // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result m_Result
      // Size: 0x4
      // Offset: 0x0
      ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result m_Result;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result) == 0x4);
      // System.Single m_Score
      // Size: 0x4
      // Offset: 0x4
      float m_Score;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputDevice> m_Devices
      // Size: 0xFFFFFFFF
      // Offset: 0x8
      ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputDevice*> m_Devices;
      // UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> m_Controls
      // Size: 0xFFFFFFFF
      // Offset: 0x28
      ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*> m_Controls;
      // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement[] m_Requirements
      // Size: 0x8
      // Offset: 0x48
      ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> m_Requirements;
      // Field size check
      static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>) == 0x8);
      public:
      // Creating value type constructor for type: MatchResult
      constexpr MatchResult(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result m_Result_ = {}, float m_Score_ = {}, ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputDevice*> m_Devices_ = {}, ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*> m_Controls_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> m_Requirements_ = ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>(static_cast<void*>(nullptr))) noexcept : m_Result{m_Result_}, m_Score{m_Score_}, m_Devices{m_Devices_}, m_Controls{m_Controls_}, m_Requirements{m_Requirements_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match>
      operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match>*>(this);
      }
      // Creating interface conversion operator: operator ::System::IDisposable
      operator ::System::IDisposable() noexcept {
        return *reinterpret_cast<::System::IDisposable*>(this);
      }
      // Get instance field reference: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Result m_Result
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result& dyn_m_Result();
      // Get instance field reference: System.Single m_Score
      [[deprecated("Use field access instead!")]] float& dyn_m_Score();
      // Get instance field reference: UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputDevice> m_Devices
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputDevice*>& dyn_m_Devices();
      // Get instance field reference: UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputControl> m_Controls
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputControl*>& dyn_m_Controls();
      // Get instance field reference: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement[] m_Requirements
      [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>& dyn_m_Requirements();
      // public System.Single get_score()
      // Offset: 0xA41990
      float get_score();
      // public System.Boolean get_isSuccessfulMatch()
      // Offset: 0xA41998
      bool get_isSuccessfulMatch();
      // public System.Boolean get_hasMissingRequiredDevices()
      // Offset: 0xA419A8
      bool get_hasMissingRequiredDevices();
      // public System.Boolean get_hasMissingOptionalDevices()
      // Offset: 0xA419B8
      bool get_hasMissingOptionalDevices();
      // public UnityEngine.InputSystem.InputControlList`1<UnityEngine.InputSystem.InputDevice> get_devices()
      // Offset: 0xA419C8
      ::UnityEngine::InputSystem::InputControlList_1<::UnityEngine::InputSystem::InputDevice*> get_devices();
      // public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Match get_Item(System.Int32 index)
      // Offset: 0xA419D0
      ::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match get_Item(int index);
      // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult/UnityEngine.InputSystem.Match> GetEnumerator()
      // Offset: 0xA419D8
      ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match>* GetEnumerator();
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xA419E0
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
      // public System.Void Dispose()
      // Offset: 0xA419E8
      void Dispose();
    }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult
    // WARNING Not writing size check since size may be invalid!
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement
    // [TokenAttribute] Offset: FFFFFFFF
    struct DeviceRequirement/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>*/ {
      public:
      // Nested type: ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags
      struct Flags;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags
      // [TokenAttribute] Offset: FFFFFFFF
      // [FlagsAttribute] Offset: FFFFFFFF
      struct Flags/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: Flags
        constexpr Flags(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags None
        static constexpr const int None = 0;
        // Get static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags None
        static ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags _get_None();
        // Set static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags None
        static void _set_None(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags value);
        // static field const value: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags Optional
        static constexpr const int Optional = 1;
        // Get static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags Optional
        static ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags _get_Optional();
        // Set static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags Optional
        static void _set_Optional(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags value);
        // static field const value: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags Or
        static constexpr const int Or = 2;
        // Get static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags Or
        static ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags _get_Or();
        // Set static field: static public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags Or
        static void _set_Or(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags
      #pragma pack(pop)
      static check_size<sizeof(InputControlScheme::DeviceRequirement::Flags), 0 + sizeof(int)> __UnityEngine_InputSystem_InputControlScheme_DeviceRequirement_FlagsSizeCheck;
      static_assert(sizeof(InputControlScheme::DeviceRequirement::Flags) == 0x4);
      public:
      // System.String m_ControlPath
      // Size: 0x8
      // Offset: 0x0
      ::StringW m_ControlPath;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags m_Flags
      // Size: 0x4
      // Offset: 0x8
      ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags m_Flags;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags) == 0x4);
      public:
      // Creating value type constructor for type: DeviceRequirement
      constexpr DeviceRequirement(::StringW m_ControlPath_ = {}, ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags m_Flags_ = {}) noexcept : m_ControlPath{m_ControlPath_}, m_Flags{m_Flags_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>
      operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>() noexcept {
        return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>*>(this);
      }
      // Get instance field reference: System.String m_ControlPath
      [[deprecated("Use field access instead!")]] ::StringW& dyn_m_ControlPath();
      // Get instance field reference: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement/UnityEngine.InputSystem.Flags m_Flags
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags& dyn_m_Flags();
      // public System.String get_controlPath()
      // Offset: 0xA418A8
      ::StringW get_controlPath();
      // public System.Void set_controlPath(System.String value)
      // Offset: 0xA418B0
      void set_controlPath(::StringW value);
      // public System.Boolean get_isOptional()
      // Offset: 0xA418B8
      bool get_isOptional();
      // public System.Void set_isOptional(System.Boolean value)
      // Offset: 0xA418C4
      void set_isOptional(bool value);
      // public System.Boolean get_isAND()
      // Offset: 0xA418E0
      bool get_isAND();
      // public System.Void set_isAND(System.Boolean value)
      // Offset: 0xA418F0
      void set_isAND(bool value);
      // public System.Boolean get_isOR()
      // Offset: 0xA4190C
      bool get_isOR();
      // public System.Void set_isOR(System.Boolean value)
      // Offset: 0xA41918
      void set_isOR(bool value);
      // public System.Boolean Equals(UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement other)
      // Offset: 0xA4193C
      bool Equals(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement other);
      // public override System.String ToString()
      // Offset: 0xA41934
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
      // public override System.Boolean Equals(System.Object obj)
      // Offset: 0xA41944
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object obj)
      bool Equals(::Il2CppObject* obj);
      // public override System.Int32 GetHashCode()
      // Offset: 0xA4194C
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
    }; // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement
    #pragma pack(pop)
    static check_size<sizeof(InputControlScheme::DeviceRequirement), 8 + sizeof(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags)> __UnityEngine_InputSystem_InputControlScheme_DeviceRequirementSizeCheck;
    static_assert(sizeof(InputControlScheme::DeviceRequirement) == 0xC);
    public:
    // System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // System.String m_BindingGroup
    // Size: 0x8
    // Offset: 0x8
    ::StringW m_BindingGroup;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement[] m_DeviceRequirements
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> m_DeviceRequirements;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>) == 0x8);
    public:
    // Creating value type constructor for type: InputControlScheme
    constexpr InputControlScheme(::StringW m_Name_ = {}, ::StringW m_BindingGroup_ = {}, ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> m_DeviceRequirements_ = ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>(static_cast<void*>(nullptr))) noexcept : m_Name{m_Name_}, m_BindingGroup{m_BindingGroup_}, m_DeviceRequirements{m_DeviceRequirements_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::InputControlScheme>*>(this);
    }
    // Get instance field reference: System.String m_Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Name();
    // Get instance field reference: System.String m_BindingGroup
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_BindingGroup();
    // Get instance field reference: UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement[] m_DeviceRequirements
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>& dyn_m_DeviceRequirements();
    // public System.String get_name()
    // Offset: 0xA41820
    ::StringW get_name();
    // public System.String get_bindingGroup()
    // Offset: 0xA41828
    ::StringW get_bindingGroup();
    // public System.Void set_bindingGroup(System.String value)
    // Offset: 0xA41830
    void set_bindingGroup(::StringW value);
    // public UnityEngine.InputSystem.Utilities.ReadOnlyArray`1<UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement> get_deviceRequirements()
    // Offset: 0xA41838
    ::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> get_deviceRequirements();
    // public System.Void .ctor(System.String name, System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement> devices, System.String bindingGroup)
    // Offset: 0xA41840
    InputControlScheme(::StringW name, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>* devices, ::StringW bindingGroup);
    // System.Void SetNameAndBindingGroup(System.String name, System.String bindingGroup)
    // Offset: 0xA41848
    void SetNameAndBindingGroup(::StringW name, ::StringW bindingGroup);
    // static public System.Nullable`1<UnityEngine.InputSystem.InputControlScheme> FindControlSchemeForDevices(TDevices devices, TSchemes schemes, UnityEngine.InputSystem.InputDevice mustIncludeDevice, System.Boolean allowUnsuccesfulMatch)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevices, class TSchemes>
    static ::System::Nullable_1<::UnityEngine::InputSystem::InputControlScheme> FindControlSchemeForDevices(TDevices devices, TSchemes schemes, ::UnityEngine::InputSystem::InputDevice* mustIncludeDevice, bool allowUnsuccesfulMatch) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TDevices>, ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::InputDevice*>>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TSchemes>, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlScheme::FindControlSchemeForDevices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlScheme", "FindControlSchemeForDevices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevices>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSchemes>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(devices), ::il2cpp_utils::ExtractType(schemes), ::il2cpp_utils::ExtractType(mustIncludeDevice), ::il2cpp_utils::ExtractType(allowUnsuccesfulMatch)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevices>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSchemes>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::UnityEngine::InputSystem::InputControlScheme>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, devices, schemes, mustIncludeDevice, allowUnsuccesfulMatch);
    }
    // static public System.Boolean FindControlSchemeForDevices(TDevices devices, TSchemes schemes, out UnityEngine.InputSystem.InputControlScheme controlScheme, out UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult matchResult, UnityEngine.InputSystem.InputDevice mustIncludeDevice, System.Boolean allowUnsuccessfulMatch)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevices, class TSchemes>
    static bool FindControlSchemeForDevices(TDevices devices, TSchemes schemes, ByRef<::UnityEngine::InputSystem::InputControlScheme> controlScheme, ByRef<::UnityEngine::InputSystem::InputControlScheme::MatchResult> matchResult, ::UnityEngine::InputSystem::InputDevice* mustIncludeDevice, bool allowUnsuccessfulMatch) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TDevices>, ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::InputDevice*>>);
      static_assert(std::is_convertible_v<std::remove_pointer_t<TSchemes>, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlScheme::FindControlSchemeForDevices");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlScheme", "FindControlSchemeForDevices", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevices>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSchemes>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(devices), ::il2cpp_utils::ExtractType(schemes), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::InputSystem::InputControlScheme&>(), ::il2cpp_utils::ExtractIndependentType<::UnityEngine::InputSystem::InputControlScheme::MatchResult&>(), ::il2cpp_utils::ExtractType(mustIncludeDevice), ::il2cpp_utils::ExtractType(allowUnsuccessfulMatch)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevices>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSchemes>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, devices, schemes, byref(controlScheme), byref(matchResult), mustIncludeDevice, allowUnsuccessfulMatch);
    }
    // static public System.Nullable`1<UnityEngine.InputSystem.InputControlScheme> FindControlSchemeForDevice(UnityEngine.InputSystem.InputDevice device, TSchemes schemes)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TSchemes>
    static ::System::Nullable_1<::UnityEngine::InputSystem::InputControlScheme> FindControlSchemeForDevice(::UnityEngine::InputSystem::InputDevice* device, TSchemes schemes) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TSchemes>, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::InputControlScheme>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlScheme::FindControlSchemeForDevice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem", "InputControlScheme", "FindControlSchemeForDevice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSchemes>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(device), ::il2cpp_utils::ExtractType(schemes)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSchemes>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Nullable_1<::UnityEngine::InputSystem::InputControlScheme>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, device, schemes);
    }
    // public System.Boolean SupportsDevice(UnityEngine.InputSystem.InputDevice device)
    // Offset: 0xA41850
    bool SupportsDevice(::UnityEngine::InputSystem::InputDevice* device);
    // public UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.MatchResult PickDevicesFrom(TDevices devices, UnityEngine.InputSystem.InputDevice favorDevice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TDevices>
    ::UnityEngine::InputSystem::InputControlScheme::MatchResult PickDevicesFrom(TDevices devices, ::UnityEngine::InputSystem::InputDevice* favorDevice) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TDevices>, ::System::Collections::Generic::IReadOnlyList_1<::UnityEngine::InputSystem::InputDevice*>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::InputControlScheme::PickDevicesFrom");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "PickDevicesFrom", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevices>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(devices), ::il2cpp_utils::ExtractType(favorDevice)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TDevices>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::InputControlScheme::MatchResult, false>(this, ___generic__method, devices, favorDevice);
    }
    // public System.Boolean Equals(UnityEngine.InputSystem.InputControlScheme other)
    // Offset: 0xA41858
    bool Equals(::UnityEngine::InputSystem::InputControlScheme other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA41890
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA41898
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0xA418A0
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.InputSystem.InputControlScheme
  #pragma pack(pop)
  static check_size<sizeof(InputControlScheme), 16 + sizeof(::ArrayW<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement>)> __UnityEngine_InputSystem_InputControlSchemeSizeCheck;
  static_assert(sizeof(InputControlScheme) == 0x18);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.InputControlScheme left, UnityEngine.InputSystem.InputControlScheme right)
  // Offset: 0xD88D80
  bool operator ==(const ::UnityEngine::InputSystem::InputControlScheme& left, const ::UnityEngine::InputSystem::InputControlScheme& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.InputControlScheme left, UnityEngine.InputSystem.InputControlScheme right)
  // Offset: 0xD88DB4
  bool operator !=(const ::UnityEngine::InputSystem::InputControlScheme& left, const ::UnityEngine::InputSystem::InputControlScheme& right);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement left, UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement right)
  // Offset: 0xD88A94
  bool operator ==(const ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement& left, const ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement left, UnityEngine.InputSystem.InputControlScheme/UnityEngine.InputSystem.DeviceRequirement right)
  // Offset: 0xD890F0
  bool operator !=(const ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement& left, const ::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement, "UnityEngine.InputSystem", "InputControlScheme/DeviceRequirement");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement::Flags, "UnityEngine.InputSystem", "InputControlScheme/DeviceRequirement/Flags");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::MatchResult, "UnityEngine.InputSystem", "InputControlScheme/MatchResult");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Match, "UnityEngine.InputSystem", "InputControlScheme/MatchResult/Match");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlScheme::MatchResult::Result, "UnityEngine.InputSystem", "InputControlScheme/MatchResult/Result");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputControlScheme::*)()>(&UnityEngine::InputSystem::InputControlScheme::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::get_bindingGroup
// Il2CppName: get_bindingGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputControlScheme::*)()>(&UnityEngine::InputSystem::InputControlScheme::get_bindingGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "get_bindingGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::set_bindingGroup
// Il2CppName: set_bindingGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputControlScheme::*)(::StringW)>(&UnityEngine::InputSystem::InputControlScheme::set_bindingGroup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "set_bindingGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::get_deviceRequirements
// Il2CppName: get_deviceRequirements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::ReadOnlyArray_1<::UnityEngine::InputSystem::InputControlScheme::DeviceRequirement> (UnityEngine::InputSystem::InputControlScheme::*)()>(&UnityEngine::InputSystem::InputControlScheme::get_deviceRequirements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "get_deviceRequirements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::InputControlScheme
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::SetNameAndBindingGroup
// Il2CppName: SetNameAndBindingGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::InputControlScheme::*)(::StringW, ::StringW)>(&UnityEngine::InputSystem::InputControlScheme::SetNameAndBindingGroup)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bindingGroup = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "SetNameAndBindingGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, bindingGroup});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::FindControlSchemeForDevices
// Il2CppName: FindControlSchemeForDevices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::FindControlSchemeForDevices
// Il2CppName: FindControlSchemeForDevices
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::FindControlSchemeForDevice
// Il2CppName: FindControlSchemeForDevice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::SupportsDevice
// Il2CppName: SupportsDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlScheme::*)(::UnityEngine::InputSystem::InputDevice*)>(&UnityEngine::InputSystem::InputControlScheme::SupportsDevice)> {
  static const MethodInfo* get() {
    static auto* device = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "SupportsDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{device});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::PickDevicesFrom
// Il2CppName: PickDevicesFrom
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlScheme::*)(::UnityEngine::InputSystem::InputControlScheme)>(&UnityEngine::InputSystem::InputControlScheme::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputControlScheme")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::InputControlScheme::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::InputControlScheme::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::InputControlScheme::*)()>(&UnityEngine::InputSystem::InputControlScheme::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::InputControlScheme::*)()>(&UnityEngine::InputSystem::InputControlScheme::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::InputControlScheme), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::InputControlScheme::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
