// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.Utilities.InlinedArray`1
#include "UnityEngine/InputSystem/Utilities/InlinedArray_1.hpp"
// Completed includes
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: DynamicBitfield
  struct DynamicBitfield;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::DynamicBitfield, "UnityEngine.InputSystem", "DynamicBitfield");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.DynamicBitfield
  // [TokenAttribute] Offset: FFFFFFFF
  struct DynamicBitfield/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.InputSystem.Utilities.InlinedArray`1<System.UInt64> array
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<uint64_t> array;
    // public System.Int32 length
    // Size: 0x4
    // Offset: 0x18
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DynamicBitfield
    constexpr DynamicBitfield(::UnityEngine::InputSystem::Utilities::InlinedArray_1<uint64_t> array_ = {}, int length_ = {}) noexcept : array{array_}, length{length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.InlinedArray`1<System.UInt64> array
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<uint64_t>& dyn_array();
    // Get instance field reference: public System.Int32 length
    [[deprecated("Use field access instead!")]] int& dyn_length();
    // public System.Void SetLength(System.Int32 newLength)
    // Offset: 0xA44804
    void SetLength(int newLength);
    // public System.Void SetBit(System.Int32 bitIndex)
    // Offset: 0xA4480C
    void SetBit(int bitIndex);
    // public System.Boolean TestBit(System.Int32 bitIndex)
    // Offset: 0xA44814
    bool TestBit(int bitIndex);
    // public System.Void ClearBit(System.Int32 bitIndex)
    // Offset: 0xA4481C
    void ClearBit(int bitIndex);
    // static private System.Int32 BitCountToULongCount(System.Int32 bitCount)
    // Offset: 0xE15CE8
    static int BitCountToULongCount(int bitCount);
  }; // UnityEngine.InputSystem.DynamicBitfield
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::DynamicBitfield::SetLength
// Il2CppName: SetLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::DynamicBitfield::*)(int)>(&UnityEngine::InputSystem::DynamicBitfield::SetLength)> {
  static const MethodInfo* get() {
    static auto* newLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::DynamicBitfield), "SetLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newLength});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::DynamicBitfield::SetBit
// Il2CppName: SetBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::DynamicBitfield::*)(int)>(&UnityEngine::InputSystem::DynamicBitfield::SetBit)> {
  static const MethodInfo* get() {
    static auto* bitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::DynamicBitfield), "SetBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::DynamicBitfield::TestBit
// Il2CppName: TestBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::DynamicBitfield::*)(int)>(&UnityEngine::InputSystem::DynamicBitfield::TestBit)> {
  static const MethodInfo* get() {
    static auto* bitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::DynamicBitfield), "TestBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::DynamicBitfield::ClearBit
// Il2CppName: ClearBit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::DynamicBitfield::*)(int)>(&UnityEngine::InputSystem::DynamicBitfield::ClearBit)> {
  static const MethodInfo* get() {
    static auto* bitIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::DynamicBitfield), "ClearBit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitIndex});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::DynamicBitfield::BitCountToULongCount
// Il2CppName: BitCountToULongCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&UnityEngine::InputSystem::DynamicBitfield::BitCountToULongCount)> {
  static const MethodInfo* get() {
    static auto* bitCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::DynamicBitfield), "BitCountToULongCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitCount});
  }
};
