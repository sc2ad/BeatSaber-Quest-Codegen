// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputActionState
#include "UnityEngine/InputSystem/InputActionState.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputActionState::ActionMapIndices, "UnityEngine.InputSystem", "InputActionState/ActionMapIndices");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.ActionMapIndices
  // [TokenAttribute] Offset: FFFFFFFF
  struct InputActionState::ActionMapIndices/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 actionStartIndex
    // Size: 0x4
    // Offset: 0x0
    int actionStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 actionCount
    // Size: 0x4
    // Offset: 0x4
    int actionCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 controlStartIndex
    // Size: 0x4
    // Offset: 0x8
    int controlStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 controlCount
    // Size: 0x4
    // Offset: 0xC
    int controlCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bindingStartIndex
    // Size: 0x4
    // Offset: 0x10
    int bindingStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bindingCount
    // Size: 0x4
    // Offset: 0x14
    int bindingCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 interactionStartIndex
    // Size: 0x4
    // Offset: 0x18
    int interactionStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 interactionCount
    // Size: 0x4
    // Offset: 0x1C
    int interactionCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 processorStartIndex
    // Size: 0x4
    // Offset: 0x20
    int processorStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 processorCount
    // Size: 0x4
    // Offset: 0x24
    int processorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 compositeStartIndex
    // Size: 0x4
    // Offset: 0x28
    int compositeStartIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 compositeCount
    // Size: 0x4
    // Offset: 0x2C
    int compositeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ActionMapIndices
    constexpr ActionMapIndices(int actionStartIndex_ = {}, int actionCount_ = {}, int controlStartIndex_ = {}, int controlCount_ = {}, int bindingStartIndex_ = {}, int bindingCount_ = {}, int interactionStartIndex_ = {}, int interactionCount_ = {}, int processorStartIndex_ = {}, int processorCount_ = {}, int compositeStartIndex_ = {}, int compositeCount_ = {}) noexcept : actionStartIndex{actionStartIndex_}, actionCount{actionCount_}, controlStartIndex{controlStartIndex_}, controlCount{controlCount_}, bindingStartIndex{bindingStartIndex_}, bindingCount{bindingCount_}, interactionStartIndex{interactionStartIndex_}, interactionCount{interactionCount_}, processorStartIndex{processorStartIndex_}, processorCount{processorCount_}, compositeStartIndex{compositeStartIndex_}, compositeCount{compositeCount_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 actionStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_actionStartIndex();
    // Get instance field reference: public System.Int32 actionCount
    [[deprecated("Use field access instead!")]] int& dyn_actionCount();
    // Get instance field reference: public System.Int32 controlStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_controlStartIndex();
    // Get instance field reference: public System.Int32 controlCount
    [[deprecated("Use field access instead!")]] int& dyn_controlCount();
    // Get instance field reference: public System.Int32 bindingStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_bindingStartIndex();
    // Get instance field reference: public System.Int32 bindingCount
    [[deprecated("Use field access instead!")]] int& dyn_bindingCount();
    // Get instance field reference: public System.Int32 interactionStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_interactionStartIndex();
    // Get instance field reference: public System.Int32 interactionCount
    [[deprecated("Use field access instead!")]] int& dyn_interactionCount();
    // Get instance field reference: public System.Int32 processorStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_processorStartIndex();
    // Get instance field reference: public System.Int32 processorCount
    [[deprecated("Use field access instead!")]] int& dyn_processorCount();
    // Get instance field reference: public System.Int32 compositeStartIndex
    [[deprecated("Use field access instead!")]] int& dyn_compositeStartIndex();
    // Get instance field reference: public System.Int32 compositeCount
    [[deprecated("Use field access instead!")]] int& dyn_compositeCount();
  }; // UnityEngine.InputSystem.InputActionState/UnityEngine.InputSystem.ActionMapIndices
  #pragma pack(pop)
  static check_size<sizeof(InputActionState::ActionMapIndices), 44 + sizeof(int)> __UnityEngine_InputSystem_InputActionState_ActionMapIndicesSizeCheck;
  static_assert(sizeof(InputActionState::ActionMapIndices) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
