// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IReadOnlyList`1
#include "System/Collections/Generic/IReadOnlyList_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Skipping declaration: Enumerator because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: OneOrMore`2<TValue, TList>
  template<typename TValue, typename TList>
  struct OneOrMore_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::InputSystem::Utilities::OneOrMore_2, "UnityEngine.InputSystem.Utilities", "OneOrMore`2");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.OneOrMore`2
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 959310
  template<typename TValue, typename TList>
  struct OneOrMore_2/*, public ::System::ValueType, public ::System::Collections::Generic::IReadOnlyList_1<TValue>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator<TValue, TList>
    class Enumerator;
    // WARNING Size may be invalid!
    // Autogenerated type: UnityEngine.InputSystem.Utilities.OneOrMore`2/UnityEngine.InputSystem.Utilities.Enumerator
    // [TokenAttribute] Offset: FFFFFFFF
    class Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerator_1<TValue>*/ {
      public:
      using declaring_type = OneOrMore_2<TValue, TList>;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // System.Int32 m_Index
      // Size: 0x4
      // Offset: 0x0
      int m_Index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // UnityEngine.InputSystem.Utilities.OneOrMore`2<TValue,TList> m_List
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList> m_List;
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<TValue>
      operator ::System::Collections::Generic::IEnumerator_1<TValue>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<TValue>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: System.Int32 m_Index
      [[deprecated("Use field access instead!")]] int& dyn_m_Index() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::dyn_m_Index");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Index"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: UnityEngine.InputSystem.Utilities.OneOrMore`2<TValue,TList> m_List
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>& dyn_m_List() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::dyn_m_List");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_List"))->offset;
        return *reinterpret_cast<::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // public TValue get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      TValue get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>::Enumerator*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>::Enumerator*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename OneOrMore_2<TValue, TList>::Enumerator* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename OneOrMore_2<TValue, TList>::Enumerator*, creationType>()));
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::MoveNext");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>::Enumerator*), -1)));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // public System.Void Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::Reset");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>::Enumerator*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::Enumerator::Dispose");
        auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>::Enumerator*), -1)));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
    }; // UnityEngine.InputSystem.Utilities.OneOrMore`2/UnityEngine.InputSystem.Utilities.Enumerator
    // Could not write size check! Type: UnityEngine.InputSystem.Utilities.OneOrMore`2/UnityEngine.InputSystem.Utilities.Enumerator is generic, or has no fields that are valid for size checks!
    public:
    // private readonly System.Boolean m_IsSingle
    // Size: 0x1
    // Offset: 0x0
    bool m_IsSingle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly TValue m_Single
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TValue m_Single;
    // private readonly TList m_Multiple
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TList m_Multiple;
    public:
    // Creating value type constructor for type: OneOrMore_2
    constexpr OneOrMore_2(bool m_IsSingle_ = {}, TValue m_Single_ = {}, TList m_Multiple_ = {}) noexcept : m_IsSingle{m_IsSingle_}, m_Single{m_Single_}, m_Multiple{m_Multiple_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<TValue>
    operator ::System::Collections::Generic::IReadOnlyList_1<TValue>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IReadOnlyList_1<TValue>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean m_IsSingle
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsSingle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::dyn_m_IsSingle");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_IsSingle"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly TValue m_Single
    [[deprecated("Use field access instead!")]] TValue& dyn_m_Single() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::dyn_m_Single");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Single"))->offset;
      return *reinterpret_cast<TValue*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly TList m_Multiple
    [[deprecated("Use field access instead!")]] TList& dyn_m_Multiple() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::dyn_m_Multiple");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Multiple"))->offset;
      return *reinterpret_cast<TList*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::get_Count");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public TValue get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TValue get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::get_Item");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___internal__method, index);
    }
    // public System.Void .ctor(TValue single)
    // Offset: 0xFFFFFFFFFFFFFFFF
    OneOrMore_2(TValue single) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(single)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, single);
    }
    // public System.Void .ctor(TList multiple)
    // Offset: 0xFFFFFFFFFFFFFFFF
    OneOrMore_2(TList multiple) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(multiple)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, multiple);
    }
    // public System.Collections.Generic.IEnumerator`1<TValue> GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerator_1<TValue>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<TValue>*, false>(this, ___internal__method);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::OneOrMore_2::System.Collections.IEnumerable.GetEnumerator");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::InputSystem::Utilities::OneOrMore_2<TValue, TList>), -1)));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // UnityEngine.InputSystem.Utilities.OneOrMore`2
  // Could not write size check! Type: UnityEngine.InputSystem.Utilities.OneOrMore`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
