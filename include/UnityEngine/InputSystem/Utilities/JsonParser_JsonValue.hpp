// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Utilities.JsonParser
#include "UnityEngine/InputSystem/Utilities/JsonParser.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValueType
#include "UnityEngine/InputSystem/Utilities/JsonParser_JsonValueType.hpp"
// Including type: UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString
#include "UnityEngine/InputSystem/Utilities/JsonParser_JsonString.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Enum because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue, "UnityEngine.InputSystem.Utilities", "JsonParser/JsonValue");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue
  // [TokenAttribute] Offset: FFFFFFFF
  struct JsonParser::JsonValue/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::$$c
    class $$c;
    public:
    // public UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValueType type
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValueType type;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::JsonParser::JsonValueType) == 0x4);
    // public System.Boolean boolValue
    // Size: 0x1
    // Offset: 0x4
    bool boolValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: boolValue and: realValue
    char __padding1[0x3] = {};
    // public System.Double realValue
    // Size: 0x8
    // Offset: 0x8
    double realValue;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Int64 integerValue
    // Size: 0x8
    // Offset: 0x10
    int64_t integerValue;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString stringValue
    // Size: 0x11
    // Offset: 0x18
    ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString stringValue;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::JsonParser::JsonString) == 0x11);
    // Padding between fields: stringValue and: arrayValue
    char __padding4[0x7] = {};
    // public System.Collections.Generic.List`1<UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue> arrayValue
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>* arrayValue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue> objectValue
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>* objectValue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>*) == 0x8);
    // public System.Object anyValue
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* anyValue;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating value type constructor for type: JsonValue
    constexpr JsonValue(::UnityEngine::InputSystem::Utilities::JsonParser::JsonValueType type_ = {}, bool boolValue_ = {}, double realValue_ = {}, int64_t integerValue_ = {}, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString stringValue_ = {}, ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>* arrayValue_ = {}, ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>* objectValue_ = {}, ::Il2CppObject* anyValue_ = {}) noexcept : type{type_}, boolValue{boolValue_}, realValue{realValue_}, integerValue{integerValue_}, stringValue{stringValue_}, arrayValue{arrayValue_}, objectValue{objectValue_}, anyValue{anyValue_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>*>(this);
    }
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValueType type
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValueType& dyn_type();
    // Get instance field reference: public System.Boolean boolValue
    [[deprecated("Use field access instead!")]] bool& dyn_boolValue();
    // Get instance field reference: public System.Double realValue
    [[deprecated("Use field access instead!")]] double& dyn_realValue();
    // Get instance field reference: public System.Int64 integerValue
    [[deprecated("Use field access instead!")]] int64_t& dyn_integerValue();
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString stringValue
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString& dyn_stringValue();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue> arrayValue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>*& dyn_arrayValue();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue> objectValue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue>*& dyn_objectValue();
    // Get instance field reference: public System.Object anyValue
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_anyValue();
    // public System.Boolean ToBoolean()
    // Offset: 0xA4F9AC
    bool ToBoolean();
    // public System.Int64 ToInteger()
    // Offset: 0xA4F9B4
    int64_t ToInteger();
    // public System.Double ToDouble()
    // Offset: 0xA4F9BC
    double ToDouble();
    // public System.Boolean Equals(UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue other)
    // Offset: 0xA4F9CC
    bool Equals(::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue other);
    // static private System.Boolean Equals(System.Object obj, UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue value)
    // Offset: 0x10140EC
    static bool Equals(::Il2CppObject* obj, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue value);
    // public override System.String ToString()
    // Offset: 0xA4F9C4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA4FA0C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA4FA14
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue
  #pragma pack(pop)
  static check_size<sizeof(JsonParser::JsonValue), 64 + sizeof(::Il2CppObject*)> __UnityEngine_InputSystem_Utilities_JsonParser_JsonValueSizeCheck;
  static_assert(sizeof(JsonParser::JsonValue) == 0x48);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue left, UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue right)
  // Offset: 0x1012608
  bool operator ==(const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue& left, const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue left, UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonValue right)
  // Offset: 0x1014A0C
  bool operator !=(const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue& left, const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToBoolean
// Il2CppName: ToBoolean
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToBoolean)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "ToBoolean", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToInteger
// Il2CppName: ToInteger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToInteger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "ToInteger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToDouble
// Il2CppName: ToDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "ToDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)(::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue)>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "JsonParser/JsonValue")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppObject*, ::UnityEngine::InputSystem::Utilities::JsonParser::JsonValue)>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "JsonParser/JsonValue")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonValue), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonValue::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
