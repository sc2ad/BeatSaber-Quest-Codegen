// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: UnityEngine.InputSystem.Utilities.InlinedArray`1
#include "UnityEngine/InputSystem/Utilities/InlinedArray_1.hpp"
// Including type: UnityEngine.InputSystem.LowLevel.InputEventBuffer
#include "UnityEngine/InputSystem/LowLevel/InputEventBuffer.hpp"
// Including type: UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext
#include "UnityEngine/InputSystem/InputAction_CallbackContext.hpp"
// Including type: UnityEngine.InputSystem.InputActionChange
#include "UnityEngine/InputSystem/InputActionChange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem
namespace UnityEngine::InputSystem {
  // Forward declaring type: InputAction
  class InputAction;
  // Forward declaring type: InputActionMap
  class InputActionMap;
  // Forward declaring type: InputActionState
  class InputActionState;
  // Forward declaring type: InputActionPhase
  struct InputActionPhase;
  // Forward declaring type: InputControl
  class InputControl;
  // Forward declaring type: IInputInteraction
  class IInputInteraction;
}
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerator`1 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Forward declaring namespace: UnityEngine::InputSystem::LowLevel
namespace UnityEngine::InputSystem::LowLevel {
  // Forward declaring type: ActionEvent
  struct ActionEvent;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: InputActionTrace
  class InputActionTrace;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Utilities::InputActionTrace);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::InputActionTrace*, "UnityEngine.InputSystem.Utilities", "InputActionTrace");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.InputActionTrace
  // [TokenAttribute] Offset: FFFFFFFF
  class InputActionTrace : public ::Il2CppObject/*, public ::System::IDisposable, public ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr>*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr
    struct ActionEventPtr;
    // Nested type: ::UnityEngine::InputSystem::Utilities::InputActionTrace::Enumerator
    struct Enumerator;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: UnityEngine.InputSystem.Utilities.InputActionTrace/UnityEngine.InputSystem.Utilities.ActionEventPtr
    // [TokenAttribute] Offset: FFFFFFFF
    struct ActionEventPtr/*, public ::System::ValueType*/ {
      public:
      public:
      // UnityEngine.InputSystem.InputActionState m_State
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::InputSystem::InputActionState* m_State;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::InputActionState*) == 0x8);
      // UnityEngine.InputSystem.LowLevel.ActionEvent* m_Ptr
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::InputSystem::LowLevel::ActionEvent* m_Ptr;
      // Field size check
      static_assert(sizeof(::UnityEngine::InputSystem::LowLevel::ActionEvent*) == 0x8);
      public:
      // Creating value type constructor for type: ActionEventPtr
      constexpr ActionEventPtr(::UnityEngine::InputSystem::InputActionState* m_State_ = {}, ::UnityEngine::InputSystem::LowLevel::ActionEvent* m_Ptr_ = {}) noexcept : m_State{m_State_}, m_Ptr{m_Ptr_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: UnityEngine.InputSystem.InputActionState m_State
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::InputActionState*& dyn_m_State();
      // Get instance field reference: UnityEngine.InputSystem.LowLevel.ActionEvent* m_Ptr
      [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::ActionEvent*& dyn_m_Ptr();
      // public UnityEngine.InputSystem.InputAction get_action()
      // Offset: 0xA4F414
      ::UnityEngine::InputSystem::InputAction* get_action();
      // public UnityEngine.InputSystem.InputActionPhase get_phase()
      // Offset: 0xA4F41C
      ::UnityEngine::InputSystem::InputActionPhase get_phase();
      // public UnityEngine.InputSystem.InputControl get_control()
      // Offset: 0xA4F428
      ::UnityEngine::InputSystem::InputControl* get_control();
      // public UnityEngine.InputSystem.IInputInteraction get_interaction()
      // Offset: 0xA4F430
      ::UnityEngine::InputSystem::IInputInteraction* get_interaction();
      // public System.Double get_time()
      // Offset: 0xA4F438
      double get_time();
      // public System.Double get_startTime()
      // Offset: 0xA4F454
      double get_startTime();
      // public System.Double get_duration()
      // Offset: 0xA4F460
      double get_duration();
      // public System.Int32 get_valueSizeInBytes()
      // Offset: 0xA4F468
      int get_valueSizeInBytes();
      // public System.Object ReadValueAsObject()
      // Offset: 0xA4F474
      ::Il2CppObject* ReadValueAsObject();
      // public System.Void ReadValue(System.Void* buffer, System.Int32 bufferSize)
      // Offset: 0xA4F47C
      void ReadValue(void* buffer, int bufferSize);
      // public TValue ReadValue()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<class TValue>
      TValue ReadValue() {
        static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
        static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr::ReadValue");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "ReadValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{})));
        static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
        return ::il2cpp_utils::RunMethodRethrow<TValue, false>(this, ___generic__method);
      }
      // public override System.String ToString()
      // Offset: 0xA4F484
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // UnityEngine.InputSystem.Utilities.InputActionTrace/UnityEngine.InputSystem.Utilities.ActionEventPtr
    #pragma pack(pop)
    static check_size<sizeof(InputActionTrace::ActionEventPtr), 8 + sizeof(::UnityEngine::InputSystem::LowLevel::ActionEvent*)> __UnityEngine_InputSystem_Utilities_InputActionTrace_ActionEventPtrSizeCheck;
    static_assert(sizeof(InputActionTrace::ActionEventPtr) == 0x10);
    public:
    // private System.Boolean m_SubscribedToAll
    // Size: 0x1
    // Offset: 0x10
    bool m_SubscribedToAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_OnActionChangeHooked
    // Size: 0x1
    // Offset: 0x11
    bool m_OnActionChangeHooked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputAction> m_SubscribedActions
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputAction*> m_SubscribedActions;
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputActionMap> m_SubscribedActionMaps
    // Size: 0xFFFFFFFF
    // Offset: 0x30
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputActionMap*> m_SubscribedActionMaps;
    // private UnityEngine.InputSystem.LowLevel.InputEventBuffer m_EventBuffer
    // Size: 0xFFFFFFFF
    // Offset: 0x48
    ::UnityEngine::InputSystem::LowLevel::InputEventBuffer m_EventBuffer;
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputActionState> m_ActionMapStates
    // Size: 0xFFFFFFFF
    // Offset: 0x68
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputActionState*> m_ActionMapStates;
    // private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputActionState> m_ActionMapStateClones
    // Size: 0xFFFFFFFF
    // Offset: 0x80
    ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputActionState*> m_ActionMapStateClones;
    // private System.Action`1<UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext> m_CallbackDelegate
    // Size: 0x8
    // Offset: 0x98
    ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>* m_CallbackDelegate;
    // Field size check
    static_assert(sizeof(::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*) == 0x8);
    // private System.Action`2<System.Object,UnityEngine.InputSystem.InputActionChange> m_ActionChangeDelegate
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action_2<::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange>* m_ActionChangeDelegate;
    // Field size check
    static_assert(sizeof(::System::Action_2<::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr>
    operator ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr>*>(this);
    }
    // Get instance field reference: private System.Boolean m_SubscribedToAll
    [[deprecated("Use field access instead!")]] bool& dyn_m_SubscribedToAll();
    // Get instance field reference: private System.Boolean m_OnActionChangeHooked
    [[deprecated("Use field access instead!")]] bool& dyn_m_OnActionChangeHooked();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputAction> m_SubscribedActions
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputAction*>& dyn_m_SubscribedActions();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputActionMap> m_SubscribedActionMaps
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputActionMap*>& dyn_m_SubscribedActionMaps();
    // Get instance field reference: private UnityEngine.InputSystem.LowLevel.InputEventBuffer m_EventBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::LowLevel::InputEventBuffer& dyn_m_EventBuffer();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputActionState> m_ActionMapStates
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputActionState*>& dyn_m_ActionMapStates();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.InlinedArray`1<UnityEngine.InputSystem.InputActionState> m_ActionMapStateClones
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::InlinedArray_1<::UnityEngine::InputSystem::InputActionState*>& dyn_m_ActionMapStateClones();
    // Get instance field reference: private System.Action`1<UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext> m_CallbackDelegate
    [[deprecated("Use field access instead!")]] ::System::Action_1<::UnityEngine::InputSystem::InputAction_CallbackContext>*& dyn_m_CallbackDelegate();
    // Get instance field reference: private System.Action`2<System.Object,UnityEngine.InputSystem.InputActionChange> m_ActionChangeDelegate
    [[deprecated("Use field access instead!")]] ::System::Action_2<::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange>*& dyn_m_ActionChangeDelegate();
    // public UnityEngine.InputSystem.LowLevel.InputEventBuffer get_buffer()
    // Offset: 0x100FDA0
    ::UnityEngine::InputSystem::LowLevel::InputEventBuffer get_buffer();
    // public System.Int32 get_count()
    // Offset: 0x100FDB0
    int get_count();
    // public System.Void .ctor()
    // Offset: 0x100FDB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputActionTrace* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::InputActionTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputActionTrace*, creationType>()));
    }
    // public System.Void .ctor(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x100FDC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputActionTrace* New_ctor(::UnityEngine::InputSystem::InputAction* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::InputActionTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputActionTrace*, creationType>(action)));
    }
    // public System.Void .ctor(UnityEngine.InputSystem.InputActionMap actionMap)
    // Offset: 0x100FF74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InputActionTrace* New_ctor(::UnityEngine::InputSystem::InputActionMap* actionMap) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::InputActionTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InputActionTrace*, creationType>(actionMap)));
    }
    // public System.Void SubscribeToAll()
    // Offset: 0x1010108
    void SubscribeToAll();
    // public System.Void UnsubscribeFromAll()
    // Offset: 0x10104A4
    void UnsubscribeFromAll();
    // public System.Void SubscribeTo(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x100FE60
    void SubscribeTo(::UnityEngine::InputSystem::InputAction* action);
    // public System.Void SubscribeTo(UnityEngine.InputSystem.InputActionMap actionMap)
    // Offset: 0x1010014
    void SubscribeTo(::UnityEngine::InputSystem::InputActionMap* actionMap);
    // public System.Void UnsubscribeFrom(UnityEngine.InputSystem.InputAction action)
    // Offset: 0x10102A4
    void UnsubscribeFrom(::UnityEngine::InputSystem::InputAction* action);
    // public System.Void UnsubscribeFrom(UnityEngine.InputSystem.InputActionMap actionMap)
    // Offset: 0x10103B4
    void UnsubscribeFrom(::UnityEngine::InputSystem::InputActionMap* actionMap);
    // public System.Void RecordAction(UnityEngine.InputSystem.InputAction/UnityEngine.InputSystem.CallbackContext context)
    // Offset: 0x10105FC
    void RecordAction(::UnityEngine::InputSystem::InputAction_CallbackContext context);
    // public System.Void Clear()
    // Offset: 0x10107C4
    void Clear();
    // public System.Void Dispose()
    // Offset: 0x1010F7C
    void Dispose();
    // private System.Void DisposeInternal()
    // Offset: 0x1010888
    void DisposeInternal();
    // public System.Collections.Generic.IEnumerator`1<UnityEngine.InputSystem.Utilities.InputActionTrace/UnityEngine.InputSystem.Utilities.ActionEventPtr> GetEnumerator()
    // Offset: 0x1010C34
    ::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr>* GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1010FEC
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Void HookOnActionChange()
    // Offset: 0x10101E8
    void HookOnActionChange();
    // private System.Void UnhookOnActionChange()
    // Offset: 0x1010580
    void UnhookOnActionChange();
    // private System.Void OnActionChange(System.Object actionOrMap, UnityEngine.InputSystem.InputActionChange change)
    // Offset: 0x1010FF0
    void OnActionChange(::Il2CppObject* actionOrMap, ::UnityEngine::InputSystem::InputActionChange change);
    // protected override System.Void Finalize()
    // Offset: 0x1010820
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public override System.String ToString()
    // Offset: 0x1010980
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.InputSystem.Utilities.InputActionTrace
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr, "UnityEngine.InputSystem.Utilities", "InputActionTrace/ActionEventPtr");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::get_buffer
// Il2CppName: get_buffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::LowLevel::InputEventBuffer (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::get_buffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "get_buffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::get_count
// Il2CppName: get_count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::get_count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "get_count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::SubscribeToAll
// Il2CppName: SubscribeToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::SubscribeToAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "SubscribeToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::UnsubscribeFromAll
// Il2CppName: UnsubscribeFromAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::UnsubscribeFromAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "UnsubscribeFromAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::SubscribeTo
// Il2CppName: SubscribeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::Utilities::InputActionTrace::SubscribeTo)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "SubscribeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::SubscribeTo
// Il2CppName: SubscribeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::Utilities::InputActionTrace::SubscribeTo)> {
  static const MethodInfo* get() {
    static auto* actionMap = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "SubscribeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::UnsubscribeFrom
// Il2CppName: UnsubscribeFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)(::UnityEngine::InputSystem::InputAction*)>(&UnityEngine::InputSystem::Utilities::InputActionTrace::UnsubscribeFrom)> {
  static const MethodInfo* get() {
    static auto* action = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "UnsubscribeFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{action});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::UnsubscribeFrom
// Il2CppName: UnsubscribeFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)(::UnityEngine::InputSystem::InputActionMap*)>(&UnityEngine::InputSystem::Utilities::InputActionTrace::UnsubscribeFrom)> {
  static const MethodInfo* get() {
    static auto* actionMap = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionMap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "UnsubscribeFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionMap});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::RecordAction
// Il2CppName: RecordAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)(::UnityEngine::InputSystem::InputAction_CallbackContext)>(&UnityEngine::InputSystem::Utilities::InputActionTrace::RecordAction)> {
  static const MethodInfo* get() {
    static auto* context = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputAction/CallbackContext")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "RecordAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{context});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::DisposeInternal
// Il2CppName: DisposeInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::DisposeInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "DisposeInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::UnityEngine::InputSystem::Utilities::InputActionTrace::ActionEventPtr>* (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::HookOnActionChange
// Il2CppName: HookOnActionChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::HookOnActionChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "HookOnActionChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::UnhookOnActionChange
// Il2CppName: UnhookOnActionChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::UnhookOnActionChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "UnhookOnActionChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::OnActionChange
// Il2CppName: OnActionChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)(::Il2CppObject*, ::UnityEngine::InputSystem::InputActionChange)>(&UnityEngine::InputSystem::Utilities::InputActionTrace::OnActionChange)> {
  static const MethodInfo* get() {
    static auto* actionOrMap = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* change = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem", "InputActionChange")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "OnActionChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actionOrMap, change});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::InputActionTrace::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::InputActionTrace::*)()>(&UnityEngine::InputSystem::Utilities::InputActionTrace::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::InputActionTrace*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
