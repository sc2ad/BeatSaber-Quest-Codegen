// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.InputSystem.Utilities.InternedString
#include "UnityEngine/InputSystem/Utilities/InternedString.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: TypeTable
  struct TypeTable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::TypeTable, "UnityEngine.InputSystem.Utilities", "TypeTable");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.TypeTable
  // [TokenAttribute] Offset: FFFFFFFF
  struct TypeTable/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::TypeTable::$$c
    class $$c;
    public:
    // public System.Collections.Generic.Dictionary`2<UnityEngine.InputSystem.Utilities.InternedString,System.Type> table
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>* table;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>*) == 0x8);
    public:
    // Creating value type constructor for type: TypeTable
    constexpr TypeTable(::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>* table_ = {}) noexcept : table{table_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>*() const noexcept {
      return table;
    }
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<UnityEngine.InputSystem.Utilities.InternedString,System.Type> table
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>*& dyn_table();
    // public System.Collections.Generic.IEnumerable`1<System.String> get_names()
    // Offset: 0xA787F0
    ::System::Collections::Generic::IEnumerable_1<::StringW>* get_names();
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.InputSystem.Utilities.InternedString> get_internedNames()
    // Offset: 0xA787F8
    ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::InternedString>* get_internedNames();
    // public System.Void Initialize()
    // Offset: 0xA78800
    void Initialize();
    // public UnityEngine.InputSystem.Utilities.InternedString FindNameForType(System.Type type)
    // Offset: 0xA78808
    ::UnityEngine::InputSystem::Utilities::InternedString FindNameForType(::System::Type* type);
    // public System.Void AddTypeRegistration(System.String name, System.Type type)
    // Offset: 0xA78810
    void AddTypeRegistration(::StringW name, ::System::Type* type);
    // public System.Type LookupTypeRegistration(System.String name)
    // Offset: 0xA78818
    ::System::Type* LookupTypeRegistration(::StringW name);
  }; // UnityEngine.InputSystem.Utilities.TypeTable
  #pragma pack(pop)
  static check_size<sizeof(TypeTable), 0 + sizeof(::System::Collections::Generic::Dictionary_2<::UnityEngine::InputSystem::Utilities::InternedString, ::System::Type*>*)> __UnityEngine_InputSystem_Utilities_TypeTableSizeCheck;
  static_assert(sizeof(TypeTable) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::TypeTable::get_names
// Il2CppName: get_names
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (UnityEngine::InputSystem::Utilities::TypeTable::*)()>(&UnityEngine::InputSystem::Utilities::TypeTable::get_names)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::TypeTable), "get_names", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::TypeTable::get_internedNames
// Il2CppName: get_internedNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::InternedString>* (UnityEngine::InputSystem::Utilities::TypeTable::*)()>(&UnityEngine::InputSystem::Utilities::TypeTable::get_internedNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::TypeTable), "get_internedNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::TypeTable::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::TypeTable::*)()>(&UnityEngine::InputSystem::Utilities::TypeTable::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::TypeTable), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::TypeTable::FindNameForType
// Il2CppName: FindNameForType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::InternedString (UnityEngine::InputSystem::Utilities::TypeTable::*)(::System::Type*)>(&UnityEngine::InputSystem::Utilities::TypeTable::FindNameForType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::TypeTable), "FindNameForType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::TypeTable::AddTypeRegistration
// Il2CppName: AddTypeRegistration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::TypeTable::*)(::StringW, ::System::Type*)>(&UnityEngine::InputSystem::Utilities::TypeTable::AddTypeRegistration)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::TypeTable), "AddTypeRegistration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, type});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::TypeTable::LookupTypeRegistration
// Il2CppName: LookupTypeRegistration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (UnityEngine::InputSystem::Utilities::TypeTable::*)(::StringW)>(&UnityEngine::InputSystem::Utilities::TypeTable::LookupTypeRegistration)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::TypeTable), "LookupTypeRegistration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
