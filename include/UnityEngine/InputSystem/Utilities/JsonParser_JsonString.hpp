// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Utilities.JsonParser
#include "UnityEngine/InputSystem/Utilities/JsonParser.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.InputSystem.Utilities.Substring
#include "UnityEngine/InputSystem/Utilities/Substring.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::JsonParser::JsonString, "UnityEngine.InputSystem.Utilities", "JsonParser/JsonString");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString
  // [TokenAttribute] Offset: FFFFFFFF
  struct JsonParser::JsonString/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonString>*/ {
    public:
    public:
    // public UnityEngine.InputSystem.Utilities.Substring text
    // Size: 0x10
    // Offset: 0x0
    ::UnityEngine::InputSystem::Utilities::Substring text;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::Substring) == 0x10);
    // public System.Boolean hasEscapes
    // Size: 0x1
    // Offset: 0x10
    bool hasEscapes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: JsonString
    constexpr JsonString(::UnityEngine::InputSystem::Utilities::Substring text_ = {}, bool hasEscapes_ = {}) noexcept : text{text_}, hasEscapes{hasEscapes_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonString>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonString>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::JsonParser::JsonString>*>(this);
    }
    // Get instance field reference: public UnityEngine.InputSystem.Utilities.Substring text
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::Substring& dyn_text();
    // Get instance field reference: public System.Boolean hasEscapes
    [[deprecated("Use field access instead!")]] bool& dyn_hasEscapes();
    // public System.Boolean Equals(UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString other)
    // Offset: 0xA4F8EC
    bool Equals(::UnityEngine::InputSystem::Utilities::JsonParser::JsonString other);
    // public override System.String ToString()
    // Offset: 0xA4F8E4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA4F924
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA4F92C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString
  #pragma pack(pop)
  static check_size<sizeof(JsonParser::JsonString), 16 + sizeof(bool)> __UnityEngine_InputSystem_Utilities_JsonParser_JsonStringSizeCheck;
  static_assert(sizeof(JsonParser::JsonString) == 0x11);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString left, UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString right)
  // Offset: 0x10136F0
  bool operator ==(const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString& left, const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString left, UnityEngine.InputSystem.Utilities.JsonParser/UnityEngine.InputSystem.Utilities.JsonString right)
  // Offset: 0x1013724
  bool operator !=(const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString& left, const ::UnityEngine::InputSystem::Utilities::JsonParser::JsonString& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonString::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::JsonParser::JsonString::*)(::UnityEngine::InputSystem::Utilities::JsonParser::JsonString)>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonString::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "JsonParser/JsonString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonString), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonString::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::JsonParser::JsonString::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonString::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonString), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonString::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::JsonParser::JsonString::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonString::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonString), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonString::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::JsonParser::JsonString::*)()>(&UnityEngine::InputSystem::Utilities::JsonParser::JsonString::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::JsonParser::JsonString), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonString::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::JsonParser::JsonString::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
