// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.Utilities.MemoryHelpers
#include "UnityEngine/InputSystem/Utilities/MemoryHelpers.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion, "UnityEngine.InputSystem.Utilities", "MemoryHelpers/BitRegion");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.MemoryHelpers/UnityEngine.InputSystem.Utilities.BitRegion
  // [TokenAttribute] Offset: FFFFFFFF
  struct MemoryHelpers::BitRegion/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.UInt32 bitOffset
    // Size: 0x4
    // Offset: 0x0
    uint bitOffset;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 sizeInBits
    // Size: 0x4
    // Offset: 0x4
    uint sizeInBits;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    public:
    // Creating value type constructor for type: BitRegion
    constexpr BitRegion(uint bitOffset_ = {}, uint sizeInBits_ = {}) noexcept : bitOffset{bitOffset_}, sizeInBits{sizeInBits_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.UInt32 bitOffset
    [[deprecated("Use field access instead!")]] uint& dyn_bitOffset();
    // Get instance field reference: public System.UInt32 sizeInBits
    [[deprecated("Use field access instead!")]] uint& dyn_sizeInBits();
    // public System.Boolean get_isEmpty()
    // Offset: 0xA4FA1C
    bool get_isEmpty();
    // public System.Void .ctor(System.UInt32 bitOffset, System.UInt32 sizeInBits)
    // Offset: 0xA4FA2C
    // ABORTED: conflicts with another method.  BitRegion(uint bitOffset, uint sizeInBits);
    // public System.Void .ctor(System.UInt32 byteOffset, System.UInt32 bitOffset, System.UInt32 sizeInBits)
    // Offset: 0xA4FA34
    BitRegion(uint byteOffset, uint bitOffset, uint sizeInBits);
    // public UnityEngine.InputSystem.Utilities.MemoryHelpers/UnityEngine.InputSystem.Utilities.BitRegion Overlap(UnityEngine.InputSystem.Utilities.MemoryHelpers/UnityEngine.InputSystem.Utilities.BitRegion other)
    // Offset: 0xA4FA40
    ::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion Overlap(::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion other);
  }; // UnityEngine.InputSystem.Utilities.MemoryHelpers/UnityEngine.InputSystem.Utilities.BitRegion
  #pragma pack(pop)
  static check_size<sizeof(MemoryHelpers::BitRegion), 4 + sizeof(uint)> __UnityEngine_InputSystem_Utilities_MemoryHelpers_BitRegionSizeCheck;
  static_assert(sizeof(MemoryHelpers::BitRegion) == 0x8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::*)()>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::BitRegion
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::BitRegion
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::Overlap
// Il2CppName: Overlap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion (UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::*)(::UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion)>(&UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion::Overlap)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "MemoryHelpers/BitRegion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::MemoryHelpers::BitRegion), "Overlap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
