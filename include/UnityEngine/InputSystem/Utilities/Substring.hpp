// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: InternedString
  struct InternedString;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: StringComparison
  struct StringComparison;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: Substring
  struct Substring;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::Substring, "UnityEngine.InputSystem.Utilities", "Substring");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.Substring
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 9593A0
  struct Substring/*, public ::System::ValueType, public ::System::IComparable_1<::UnityEngine::InputSystem::Utilities::Substring>, public ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::Substring>*/ {
    public:
    public:
    // private readonly System.String m_String
    // Size: 0x8
    // Offset: 0x0
    ::StringW m_String;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x8
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 m_Length
    // Size: 0x4
    // Offset: 0xC
    int m_Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Substring
    constexpr Substring(::StringW m_String_ = {}, int m_Index_ = {}, int m_Length_ = {}) noexcept : m_String{m_String_}, m_Index{m_Index_}, m_Length{m_Length_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable_1<::UnityEngine::InputSystem::Utilities::Substring>
    operator ::System::IComparable_1<::UnityEngine::InputSystem::Utilities::Substring>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::UnityEngine::InputSystem::Utilities::Substring>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::Substring>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::Substring>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::Substring>*>(this);
    }
    // Get instance field reference: private readonly System.String m_String
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_String();
    // Get instance field reference: private readonly System.Int32 m_Index
    [[deprecated("Use field access instead!")]] int& dyn_m_Index();
    // Get instance field reference: private readonly System.Int32 m_Length
    [[deprecated("Use field access instead!")]] int& dyn_m_Length();
    // public System.Boolean get_isEmpty()
    // Offset: 0xA786B0
    bool get_isEmpty();
    // public System.Int32 get_length()
    // Offset: 0xA7879C
    int get_length();
    // public System.Int32 get_index()
    // Offset: 0xA787A4
    int get_index();
    // public System.Char get_Item(System.Int32 index)
    // Offset: 0xA787AC
    ::Il2CppChar get_Item(int index);
    // public System.Void .ctor(System.String str)
    // Offset: 0xA786C0
    Substring(::StringW str);
    // public System.Void .ctor(System.String str, System.Int32 index, System.Int32 length)
    // Offset: 0xA786E0
    // ABORTED: conflicts with another method.  Substring(::StringW str, int index, int length);
    // public System.Void .ctor(System.String str, System.Int32 index)
    // Offset: 0xA786EC
    Substring(::StringW str, int index);
    // public System.Boolean Equals(System.String other)
    // Offset: 0xA7871C
    bool Equals(::StringW other);
    // public System.Boolean Equals(UnityEngine.InputSystem.Utilities.Substring other)
    // Offset: 0xA78724
    bool Equals(::UnityEngine::InputSystem::Utilities::Substring other);
    // public System.Boolean Equals(UnityEngine.InputSystem.Utilities.InternedString other)
    // Offset: 0xA78758
    bool Equals(::UnityEngine::InputSystem::Utilities::InternedString other);
    // public System.Int32 CompareTo(UnityEngine.InputSystem.Utilities.Substring other)
    // Offset: 0xA78760
    int CompareTo(::UnityEngine::InputSystem::Utilities::Substring other);
    // static public System.Int32 Compare(UnityEngine.InputSystem.Utilities.Substring left, UnityEngine.InputSystem.Utilities.Substring right, System.StringComparison comparison)
    // Offset: 0x1B569DC
    static int Compare(::UnityEngine::InputSystem::Utilities::Substring left, ::UnityEngine::InputSystem::Utilities::Substring right, ::System::StringComparison comparison);
    // public System.Boolean StartsWith(System.String str)
    // Offset: 0xA7877C
    bool StartsWith(::StringW str);
    // public System.String Substr(System.Int32 index, System.Int32 length)
    // Offset: 0xA78784
    ::StringW Substr(int index, int length);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA78714
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.String ToString()
    // Offset: 0xA7878C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0xA78794
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.Utilities.Substring
  #pragma pack(pop)
  static check_size<sizeof(Substring), 12 + sizeof(int)> __UnityEngine_InputSystem_Utilities_SubstringSizeCheck;
  static_assert(sizeof(Substring) == 0x10);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Utilities.Substring a, UnityEngine.InputSystem.Utilities.Substring b)
  // Offset: 0x1B56B98
  bool operator ==(const ::UnityEngine::InputSystem::Utilities::Substring& a, const ::UnityEngine::InputSystem::Utilities::Substring& b);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Utilities.Substring a, UnityEngine.InputSystem.Utilities.Substring b)
  // Offset: 0x1B56BB8
  bool operator !=(const ::UnityEngine::InputSystem::Utilities::Substring& a, const ::UnityEngine::InputSystem::Utilities::Substring& b);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Utilities.Substring a, UnityEngine.InputSystem.Utilities.InternedString b)
  // Offset: 0x1B56BD8
  bool operator ==(const ::UnityEngine::InputSystem::Utilities::Substring& a, const ::UnityEngine::InputSystem::Utilities::InternedString& b);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Utilities.Substring a, UnityEngine.InputSystem.Utilities.InternedString b)
  // Offset: 0x1B56C08
  bool operator !=(const ::UnityEngine::InputSystem::Utilities::Substring& a, const ::UnityEngine::InputSystem::Utilities::InternedString& b);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Utilities.InternedString a, UnityEngine.InputSystem.Utilities.Substring b)
  // Offset: 0x1B56C3C
  bool operator ==(const ::UnityEngine::InputSystem::Utilities::InternedString& a, const ::UnityEngine::InputSystem::Utilities::Substring& b);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Utilities.InternedString a, UnityEngine.InputSystem.Utilities.Substring b)
  // Offset: 0x1B56C70
  bool operator !=(const ::UnityEngine::InputSystem::Utilities::InternedString& a, const ::UnityEngine::InputSystem::Utilities::Substring& b);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::Substring::*)()>(&UnityEngine::InputSystem::Utilities::Substring::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::get_length
// Il2CppName: get_length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::Substring::*)()>(&UnityEngine::InputSystem::Utilities::Substring::get_length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "get_length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::get_index
// Il2CppName: get_index
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::Substring::*)()>(&UnityEngine::InputSystem::Utilities::Substring::get_index)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "get_index", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (UnityEngine::InputSystem::Utilities::Substring::*)(int)>(&UnityEngine::InputSystem::Utilities::Substring::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Substring
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Substring
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Substring
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::Substring::*)(::StringW)>(&UnityEngine::InputSystem::Utilities::Substring::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::Substring::*)(::UnityEngine::InputSystem::Utilities::Substring)>(&UnityEngine::InputSystem::Utilities::Substring::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "Substring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::Substring::*)(::UnityEngine::InputSystem::Utilities::InternedString)>(&UnityEngine::InputSystem::Utilities::Substring::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "InternedString")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::Substring::*)(::UnityEngine::InputSystem::Utilities::Substring)>(&UnityEngine::InputSystem::Utilities::Substring::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "Substring")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Compare
// Il2CppName: Compare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::InputSystem::Utilities::Substring, ::UnityEngine::InputSystem::Utilities::Substring, ::System::StringComparison)>(&UnityEngine::InputSystem::Utilities::Substring::Compare)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "Substring")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "Substring")->byval_arg;
    static auto* comparison = &::il2cpp_utils::GetClassFromName("System", "StringComparison")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "Compare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, comparison});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::StartsWith
// Il2CppName: StartsWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::Substring::*)(::StringW)>(&UnityEngine::InputSystem::Utilities::Substring::StartsWith)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "StartsWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Substr
// Il2CppName: Substr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::Substring::*)(int, int)>(&UnityEngine::InputSystem::Utilities::Substring::Substr)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "Substr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, length});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::Substring::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::Utilities::Substring::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::Substring::*)()>(&UnityEngine::InputSystem::Utilities::Substring::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::Substring::*)()>(&UnityEngine::InputSystem::Utilities::Substring::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::Substring), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::Substring::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
