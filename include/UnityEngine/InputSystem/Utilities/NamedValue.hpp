// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.InputSystem.Utilities.PrimitiveValue
#include "UnityEngine/InputSystem/Utilities/PrimitiveValue.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Skipping declaration: TypeCode because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: NamedValue
  struct NamedValue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::NamedValue, "UnityEngine.InputSystem.Utilities", "NamedValue");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.InputSystem.Utilities.NamedValue
  // [TokenAttribute] Offset: FFFFFFFF
  struct NamedValue/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::NamedValue>*/ {
    public:
    public:
    // private System.String <name>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.InputSystem.Utilities.PrimitiveValue <value>k__BackingField
    // Size: 0xC
    // Offset: 0x8
    ::UnityEngine::InputSystem::Utilities::PrimitiveValue value;
    // Field size check
    static_assert(sizeof(::UnityEngine::InputSystem::Utilities::PrimitiveValue) == 0xC);
    public:
    // Creating value type constructor for type: NamedValue
    constexpr NamedValue(::StringW name_ = {}, ::UnityEngine::InputSystem::Utilities::PrimitiveValue value_ = {}) noexcept : name{name_}, value{value_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::NamedValue>
    operator ::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::NamedValue>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::InputSystem::Utilities::NamedValue>*>(this);
    }
    // static field const value: static public System.String Separator
    static constexpr const char* Separator = ",";
    // Get static field: static public System.String Separator
    static ::StringW _get_Separator();
    // Set static field: static public System.String Separator
    static void _set_Separator(::StringW value);
    // Get instance field reference: private System.String <name>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$name$k__BackingField();
    // Get instance field reference: private UnityEngine.InputSystem.Utilities.PrimitiveValue <value>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::InputSystem::Utilities::PrimitiveValue& dyn_$value$k__BackingField();
    // public System.String get_name()
    // Offset: 0xA4FC58
    ::StringW get_name();
    // public System.Void set_name(System.String value)
    // Offset: 0xA4FC60
    void set_name(::StringW value);
    // public UnityEngine.InputSystem.Utilities.PrimitiveValue get_value()
    // Offset: 0xA4FC68
    ::UnityEngine::InputSystem::Utilities::PrimitiveValue get_value();
    // public System.Void set_value(UnityEngine.InputSystem.Utilities.PrimitiveValue value)
    // Offset: 0xA4FC74
    void set_value(::UnityEngine::InputSystem::Utilities::PrimitiveValue value);
    // public System.TypeCode get_type()
    // Offset: 0xA4FC7C
    ::System::TypeCode get_type();
    // public UnityEngine.InputSystem.Utilities.NamedValue ConvertTo(System.TypeCode type)
    // Offset: 0xA4FC84
    ::UnityEngine::InputSystem::Utilities::NamedValue ConvertTo(::System::TypeCode type);
    // static public UnityEngine.InputSystem.Utilities.NamedValue From(System.String name, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::UnityEngine::InputSystem::Utilities::NamedValue From(::StringW name, TValue value) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::NamedValue::From");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "NamedValue", "From", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(name), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::InputSystem::Utilities::NamedValue, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, name, value);
    }
    // public System.Boolean Equals(UnityEngine.InputSystem.Utilities.NamedValue other)
    // Offset: 0xA4FCCC
    bool Equals(::UnityEngine::InputSystem::Utilities::NamedValue other);
    // static public UnityEngine.InputSystem.Utilities.NamedValue[] ParseMultiple(System.String parameterString)
    // Offset: 0x1015D24
    static ::ArrayW<::UnityEngine::InputSystem::Utilities::NamedValue> ParseMultiple(::StringW parameterString);
    // static public UnityEngine.InputSystem.Utilities.NamedValue Parse(System.String str)
    // Offset: 0x1016840
    static ::UnityEngine::InputSystem::Utilities::NamedValue Parse(::StringW str);
    // static private UnityEngine.InputSystem.Utilities.NamedValue ParseParameter(System.String parameterString, ref System.Int32 index)
    // Offset: 0x1016498
    static ::UnityEngine::InputSystem::Utilities::NamedValue ParseParameter(::StringW parameterString, ByRef<int> index);
    // public System.Void ApplyToObject(System.Object instance)
    // Offset: 0xA4FD14
    void ApplyToObject(::Il2CppObject* instance);
    // static public System.Void ApplyAllToObject(System.Object instance, TParameterList parameters)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TParameterList>
    static void ApplyAllToObject(::Il2CppObject* instance, TParameterList parameters) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TParameterList>, ::System::Collections::Generic::IEnumerable_1<::UnityEngine::InputSystem::Utilities::NamedValue>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::NamedValue::ApplyAllToObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "NamedValue", "ApplyAllToObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParameterList>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(instance), ::il2cpp_utils::ExtractType(parameters)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParameterList>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, instance, parameters);
    }
    // public override System.String ToString()
    // Offset: 0xA4FCC4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA4FD04
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA4FD0C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // UnityEngine.InputSystem.Utilities.NamedValue
  #pragma pack(pop)
  static check_size<sizeof(NamedValue), 8 + sizeof(::UnityEngine::InputSystem::Utilities::PrimitiveValue)> __UnityEngine_InputSystem_Utilities_NamedValueSizeCheck;
  static_assert(sizeof(NamedValue) == 0x14);
  // static public System.Boolean op_Equality(UnityEngine.InputSystem.Utilities.NamedValue left, UnityEngine.InputSystem.Utilities.NamedValue right)
  // Offset: 0x101642C
  bool operator ==(const ::UnityEngine::InputSystem::Utilities::NamedValue& left, const ::UnityEngine::InputSystem::Utilities::NamedValue& right);
  // static public System.Boolean op_Inequality(UnityEngine.InputSystem.Utilities.NamedValue left, UnityEngine.InputSystem.Utilities.NamedValue right)
  // Offset: 0x1016460
  bool operator !=(const ::UnityEngine::InputSystem::Utilities::NamedValue& left, const ::UnityEngine::InputSystem::Utilities::NamedValue& right);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::get_name
// Il2CppName: get_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::NamedValue::*)()>(&UnityEngine::InputSystem::Utilities::NamedValue::get_name)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "get_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::set_name
// Il2CppName: set_name
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::NamedValue::*)(::StringW)>(&UnityEngine::InputSystem::Utilities::NamedValue::set_name)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "set_name", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::get_value
// Il2CppName: get_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::PrimitiveValue (UnityEngine::InputSystem::Utilities::NamedValue::*)()>(&UnityEngine::InputSystem::Utilities::NamedValue::get_value)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "get_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::set_value
// Il2CppName: set_value
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::NamedValue::*)(::UnityEngine::InputSystem::Utilities::PrimitiveValue)>(&UnityEngine::InputSystem::Utilities::NamedValue::set_value)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "PrimitiveValue")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "set_value", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::TypeCode (UnityEngine::InputSystem::Utilities::NamedValue::*)()>(&UnityEngine::InputSystem::Utilities::NamedValue::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::ConvertTo
// Il2CppName: ConvertTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::NamedValue (UnityEngine::InputSystem::Utilities::NamedValue::*)(::System::TypeCode)>(&UnityEngine::InputSystem::Utilities::NamedValue::ConvertTo)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "TypeCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "ConvertTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::From
// Il2CppName: From
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::NamedValue::*)(::UnityEngine::InputSystem::Utilities::NamedValue)>(&UnityEngine::InputSystem::Utilities::NamedValue::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.InputSystem.Utilities", "NamedValue")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::ParseMultiple
// Il2CppName: ParseMultiple
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::InputSystem::Utilities::NamedValue> (*)(::StringW)>(&UnityEngine::InputSystem::Utilities::NamedValue::ParseMultiple)> {
  static const MethodInfo* get() {
    static auto* parameterString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "ParseMultiple", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterString});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::Parse
// Il2CppName: Parse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::NamedValue (*)(::StringW)>(&UnityEngine::InputSystem::Utilities::NamedValue::Parse)> {
  static const MethodInfo* get() {
    static auto* str = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "Parse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{str});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::ParseParameter
// Il2CppName: ParseParameter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::InputSystem::Utilities::NamedValue (*)(::StringW, ByRef<int>)>(&UnityEngine::InputSystem::Utilities::NamedValue::ParseParameter)> {
  static const MethodInfo* get() {
    static auto* parameterString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "ParseParameter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parameterString, index});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::ApplyToObject
// Il2CppName: ApplyToObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::InputSystem::Utilities::NamedValue::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::Utilities::NamedValue::ApplyToObject)> {
  static const MethodInfo* get() {
    static auto* instance = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "ApplyToObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instance});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::ApplyAllToObject
// Il2CppName: ApplyAllToObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::InputSystem::Utilities::NamedValue::*)()>(&UnityEngine::InputSystem::Utilities::NamedValue::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::InputSystem::Utilities::NamedValue::*)(::Il2CppObject*)>(&UnityEngine::InputSystem::Utilities::NamedValue::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::InputSystem::Utilities::NamedValue::*)()>(&UnityEngine::InputSystem::Utilities::NamedValue::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::InputSystem::Utilities::NamedValue), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::NamedValue::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
