// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::InputSystem::Utilities
namespace UnityEngine::InputSystem::Utilities {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Skipping declaration: IEquatable`1 because it is already included!
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: ICloneable
  class ICloneable;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: IEnumerable`1 because it is already included!
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Completed forward declares
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Forward declaring type: ArrayHelpers
  class ArrayHelpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::InputSystem::Utilities::ArrayHelpers);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::Utilities::ArrayHelpers*, "UnityEngine.InputSystem.Utilities", "ArrayHelpers");
// Type namespace: UnityEngine.InputSystem.Utilities
namespace UnityEngine::InputSystem::Utilities {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.Utilities.ArrayHelpers
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class ArrayHelpers : public ::Il2CppObject {
    public:
    // Nested type: ::UnityEngine::InputSystem::Utilities::ArrayHelpers::$$c__DisplayClass30_0_1<TValue>
    template<typename TValue>
    class $$c__DisplayClass30_0_1;
    // Nested type: ::UnityEngine::InputSystem::Utilities::ArrayHelpers::$$c__DisplayClass31_0_1<TValue>
    template<typename TValue>
    class $$c__DisplayClass31_0_1;
    // Nested type: ::UnityEngine::InputSystem::Utilities::ArrayHelpers::$$c__DisplayClass31_1_1<TValue>
    template<typename TValue>
    class $$c__DisplayClass31_1_1;
    // static public System.Int32 LengthSafe(TValue[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int LengthSafe(::ArrayW<TValue> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::LengthSafe");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "LengthSafe", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Clear(TValue[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void Clear(::ArrayW<TValue> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Clear", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Clear(TValue[] array, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void Clear(::ArrayW<TValue> array, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Clear", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, count);
    }
    // static public System.Void Clear(TValue[] array, ref System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void Clear_(::ArrayW<TValue> array, ByRef<int> count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Clear");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Clear", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, byref(count));
    }
    // static public System.Void EnsureCapacity(ref TValue[] array, System.Int32 count, System.Int32 capacity, System.Int32 capacityIncrement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void EnsureCapacity(ByRef<::ArrayW<TValue>> array, int count, int capacity, int capacityIncrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::EnsureCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "EnsureCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(capacityIncrement)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), count, capacity, capacityIncrement);
    }
    // static public System.Void DuplicateWithCapacity(ref TValue[] array, System.Int32 count, System.Int32 capacity, System.Int32 capacityIncrement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void DuplicateWithCapacity(ByRef<::ArrayW<TValue>> array, int count, int capacity, int capacityIncrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::DuplicateWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "DuplicateWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(capacity), ::il2cpp_utils::ExtractType(capacityIncrement)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), count, capacity, capacityIncrement);
    }
    // static public System.Boolean Contains(TValue[] array, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool Contains(::ArrayW<TValue> array, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Contains", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Boolean ContainsReference(TValue[] array, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool ContainsReference(::ArrayW<TValue> array, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::ContainsReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "ContainsReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Boolean ContainsReference(TValue[] array, System.Int32 count, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool ContainsReference(::ArrayW<TValue> array, int count, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::ContainsReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "ContainsReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, count, value);
    }
    // static public System.Boolean HaveEqualElements(TValue[] first, TValue[] second, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool HaveEqualElements(::ArrayW<TValue> first, ::ArrayW<TValue> second, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::HaveEqualElements");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "HaveEqualElements", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, first, second, count);
    }
    // static public System.Int32 IndexOf(TValue[] array, TValue value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int IndexOf(::ArrayW<TValue> array, TValue value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Int32 IndexOf(TValue[] array, System.Predicate`1<TValue> predicate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int IndexOf(::ArrayW<TValue> array, ::System::Predicate_1<TValue>* predicate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "IndexOf", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(predicate)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, predicate);
    }
    // static public System.Int32 IndexOfReference(TValue[] array, TValue value, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int IndexOfReference(::ArrayW<TValue> array, TValue value, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOfReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "IndexOfReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, count);
    }
    // static public System.Int32 IndexOfReference(TValue[] array, TValue value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int IndexOfReference(::ArrayW<TValue> array, TValue value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOfReference");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "IndexOfReference", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Int32 IndexOfValue(TValue[] array, TValue value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int IndexOfValue(::ArrayW<TValue> array, TValue value, int startIndex, int count) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TValue>, ::System::IEquatable_1<TValue>> && std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOfValue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "IndexOfValue", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(startIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Void Resize(ref Unity.Collections.NativeArray`1<TValue> array, System.Int32 newSize, Unity.Collections.Allocator allocator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void Resize(ByRef<::Unity::Collections::NativeArray_1<TValue>> array, int newSize, ::Unity::Collections::Allocator allocator) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Resize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Resize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(newSize), ::il2cpp_utils::ExtractType(allocator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), newSize, allocator);
    }
    // static public System.Int32 Append(ref TValue[] array, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int Append(ByRef<::ArrayW<TValue>> array, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Append");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Append", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), value);
    }
    // static public System.Int32 Append(ref TValue[] array, System.Collections.Generic.IEnumerable`1<TValue> values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int Append(ByRef<::ArrayW<TValue>> array, ::System::Collections::Generic::IEnumerable_1<TValue>* values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Append");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Append", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), values);
    }
    // static public System.Int32 AppendToImmutable(ref TValue[] array, TValue[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int AppendToImmutable(ByRef<::ArrayW<TValue>> array, ::ArrayW<TValue> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendToImmutable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "AppendToImmutable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), values);
    }
    // static public System.Int32 AppendWithCapacity(ref TValue[] array, ref System.Int32 count, TValue value, System.Int32 capacityIncrement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int AppendWithCapacity(ByRef<::ArrayW<TValue>> array, ByRef<int> count, TValue value, int capacityIncrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "AppendWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(capacityIncrement)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(count), value, capacityIncrement);
    }
    // static public System.Int32 AppendListWithCapacity(ref TValue[] array, ref System.Int32 length, TValues values, System.Int32 capacityIncrement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue, class TValues>
    static int AppendListWithCapacity(ByRef<::ArrayW<TValue>> array, ByRef<int> length, TValues values, int capacityIncrement) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TValues>, ::System::Collections::Generic::IReadOnlyList_1<TValue>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendListWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "AppendListWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValues>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(values), ::il2cpp_utils::ExtractType(capacityIncrement)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValues>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(length), values, capacityIncrement);
    }
    // static public System.Int32 AppendWithCapacity(ref Unity.Collections.NativeArray`1<TValue> array, ref System.Int32 count, TValue value, System.Int32 capacityIncrement, Unity.Collections.Allocator allocator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int AppendWithCapacity(ByRef<::Unity::Collections::NativeArray_1<TValue>> array, ByRef<int> count, TValue value, int capacityIncrement, ::Unity::Collections::Allocator allocator) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "AppendWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(capacityIncrement), ::il2cpp_utils::ExtractType(allocator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(count), value, capacityIncrement, allocator);
    }
    // static public System.Void InsertAt(ref TValue[] array, System.Int32 index, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void InsertAt(ByRef<::ArrayW<TValue>> array, int index, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::InsertAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "InsertAt", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), index, value);
    }
    // static public System.Void InsertAtWithCapacity(ref TValue[] array, ref System.Int32 count, System.Int32 index, TValue value, System.Int32 capacityIncrement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void InsertAtWithCapacity(ByRef<::ArrayW<TValue>> array, ByRef<int> count, int index, TValue value, int capacityIncrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::InsertAtWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "InsertAtWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(capacityIncrement)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(count), index, value, capacityIncrement);
    }
    // static public System.Void PutAtIfNotSet(ref TValue[] array, System.Int32 index, System.Func`1<TValue> valueFn)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void PutAtIfNotSet(ByRef<::ArrayW<TValue>> array, int index, ::System::Func_1<TValue>* valueFn) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::PutAtIfNotSet");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "PutAtIfNotSet", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(valueFn)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), index, valueFn);
    }
    // static public System.Int32 GrowBy(ref TValue[] array, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int GrowBy(ByRef<::ArrayW<TValue>> array, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowBy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "GrowBy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), count);
    }
    // static public System.Int32 GrowBy(ref Unity.Collections.NativeArray`1<TValue> array, System.Int32 count, Unity.Collections.Allocator allocator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int GrowBy(ByRef<::Unity::Collections::NativeArray_1<TValue>> array, int count, ::Unity::Collections::Allocator allocator) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowBy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "GrowBy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(allocator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), count, allocator);
    }
    // static public System.Int32 GrowWithCapacity(ref TValue[] array, ref System.Int32 count, System.Int32 growBy, System.Int32 capacityIncrement)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int GrowWithCapacity(ByRef<::ArrayW<TValue>> array, ByRef<int> count, int growBy, int capacityIncrement) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "GrowWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(growBy), ::il2cpp_utils::ExtractType(capacityIncrement)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(count), growBy, capacityIncrement);
    }
    // static public System.Int32 GrowWithCapacity(ref Unity.Collections.NativeArray`1<TValue> array, ref System.Int32 count, System.Int32 growBy, System.Int32 capacityIncrement, Unity.Collections.Allocator allocator)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static int GrowWithCapacity(ByRef<::Unity::Collections::NativeArray_1<TValue>> array, ByRef<int> count, int growBy, int capacityIncrement, ::Unity::Collections::Allocator allocator) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "GrowWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(growBy), ::il2cpp_utils::ExtractType(capacityIncrement), ::il2cpp_utils::ExtractType(allocator)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(count), growBy, capacityIncrement, allocator);
    }
    // static public TValue[] Join(TValue value, params TValue[] values)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::ArrayW<TValue> Join(TValue value, ::ArrayW<TValue> values) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Join");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Join", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value), ::il2cpp_utils::ExtractType(values)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TValue>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, value, values);
    }
    // static public TValue[] Merge(TValue[] first, TValue[] second)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::ArrayW<TValue> Merge(::ArrayW<TValue> first, ::ArrayW<TValue> second) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TValue>, ::System::IEquatable_1<TValue>>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Merge");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Merge", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TValue>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, first, second);
    }
    // static public TValue[] Merge(TValue[] first, TValue[] second, System.Collections.Generic.IEqualityComparer`1<TValue> comparer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::ArrayW<TValue> Merge(::ArrayW<TValue> first, ::ArrayW<TValue> second, ::System::Collections::Generic::IEqualityComparer_1<TValue>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Merge");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Merge", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second), ::il2cpp_utils::ExtractType(comparer)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TValue>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, first, second, comparer);
    }
    // static public System.Void EraseAt(ref TValue[] array, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void EraseAt(ByRef<::ArrayW<TValue>> array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAt");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "EraseAt", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), index);
    }
    // static public System.Void EraseAtWithCapacity(TValue[] array, ref System.Int32 count, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void EraseAtWithCapacity(::ArrayW<TValue> array, ByRef<int> count, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAtWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "EraseAtWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, byref(count), index);
    }
    // static public System.Void EraseAtWithCapacity(Unity.Collections.NativeArray`1<TValue> array, ref System.Int32 count, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void EraseAtWithCapacity(::Unity::Collections::NativeArray_1<TValue> array, ByRef<int> count, int index) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAtWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "EraseAtWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, byref(count), index);
    }
    // static public System.Boolean Erase(ref TValue[] array, TValue value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static bool Erase(ByRef<::ArrayW<TValue>> array, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Erase");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Erase", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(value)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), value);
    }
    // static public System.Void EraseAtByMovingTail(TValue[] array, ref System.Int32 count, System.Int32 index)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void EraseAtByMovingTail(::ArrayW<TValue> array, ByRef<int> count, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAtByMovingTail");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "EraseAtByMovingTail", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(count), ::il2cpp_utils::ExtractType(index)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, byref(count), index);
    }
    // static public TValue[] Copy(TValue[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::ArrayW<TValue> Copy(::ArrayW<TValue> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Copy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Copy", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TValue>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public TValue[] Clone(TValue[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static ::ArrayW<TValue> Clone(::ArrayW<TValue> array) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<TValue>, ::System::ICloneable>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Clone");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Clone", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TValue>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array);
    }
    // static public TNew[] Select(TOld[] array, System.Func`2<TOld,TNew> converter)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TOld, class TNew>
    static ::ArrayW<TNew> Select(::ArrayW<TOld> array, ::System::Func_2<TOld, TNew>* converter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Select");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Select", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOld>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TNew>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(converter)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOld>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TNew>::get()})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<TNew>, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, converter);
    }
    // static private System.Void Swap(ref TValue first, ref TValue second)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void Swap(ByRef<TValue> first, ByRef<TValue> second) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::Swap");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "Swap", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(first), ::il2cpp_utils::ExtractType(second)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(first), byref(second));
    }
    // static public System.Void SwapSlice(TValue[] array, System.Int32 sourceIndex, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void SwapSlice(::ArrayW<TValue> array, int sourceIndex, int destinationIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::SwapSlice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "SwapSlice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(sourceIndex), ::il2cpp_utils::ExtractType(destinationIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, sourceIndex, destinationIndex, count);
    }
    // static public System.Void MoveSlice(TValue[] array, System.Int32 sourceIndex, System.Int32 destinationIndex, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void MoveSlice(::ArrayW<TValue> array, int sourceIndex, int destinationIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::MoveSlice");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "MoveSlice", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(sourceIndex), ::il2cpp_utils::ExtractType(destinationIndex), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, sourceIndex, destinationIndex, count);
    }
    // static public System.Void EraseSliceWithCapacity(ref TValue[] array, ref System.Int32 length, System.Int32 index, System.Int32 count)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void EraseSliceWithCapacity(ByRef<::ArrayW<TValue>> array, ByRef<int> length, int index, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseSliceWithCapacity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "EraseSliceWithCapacity", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(length), ::il2cpp_utils::ExtractType(index), ::il2cpp_utils::ExtractType(count)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(array), byref(length), index, count);
    }
    // static public System.Void SwapElements(TValue[] array, System.Int32 index1, System.Int32 index2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void SwapElements(::ArrayW<TValue> array, int index1, int index2) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::SwapElements");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "SwapElements", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index1), ::il2cpp_utils::ExtractType(index2)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index1, index2);
    }
    // static public System.Void SwapElements(Unity.Collections.NativeArray`1<TValue> array, System.Int32 index1, System.Int32 index2)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class TValue>
    static void SwapElements(::Unity::Collections::NativeArray_1<TValue> array, int index1, int index2) {
      static_assert(std::is_convertible_v<TValue, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::InputSystem::Utilities::ArrayHelpers::SwapElements");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("UnityEngine.InputSystem.Utilities", "ArrayHelpers", "SwapElements", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array), ::il2cpp_utils::ExtractType(index1), ::il2cpp_utils::ExtractType(index2)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, array, index1, index2);
    }
  }; // UnityEngine.InputSystem.Utilities.ArrayHelpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::LengthSafe
// Il2CppName: LengthSafe
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Clear
// Il2CppName: Clear
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Clear
// Il2CppName: Clear
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Clear_
// Il2CppName: Clear
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::EnsureCapacity
// Il2CppName: EnsureCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::DuplicateWithCapacity
// Il2CppName: DuplicateWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Contains
// Il2CppName: Contains
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::ContainsReference
// Il2CppName: ContainsReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::ContainsReference
// Il2CppName: ContainsReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::HaveEqualElements
// Il2CppName: HaveEqualElements
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOf
// Il2CppName: IndexOf
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOfReference
// Il2CppName: IndexOfReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOfReference
// Il2CppName: IndexOfReference
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::IndexOfValue
// Il2CppName: IndexOfValue
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Resize
// Il2CppName: Resize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Append
// Il2CppName: Append
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Append
// Il2CppName: Append
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendToImmutable
// Il2CppName: AppendToImmutable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendWithCapacity
// Il2CppName: AppendWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendListWithCapacity
// Il2CppName: AppendListWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::AppendWithCapacity
// Il2CppName: AppendWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::InsertAt
// Il2CppName: InsertAt
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::InsertAtWithCapacity
// Il2CppName: InsertAtWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::PutAtIfNotSet
// Il2CppName: PutAtIfNotSet
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowBy
// Il2CppName: GrowBy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowBy
// Il2CppName: GrowBy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowWithCapacity
// Il2CppName: GrowWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::GrowWithCapacity
// Il2CppName: GrowWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Join
// Il2CppName: Join
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Merge
// Il2CppName: Merge
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Merge
// Il2CppName: Merge
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAt
// Il2CppName: EraseAt
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAtWithCapacity
// Il2CppName: EraseAtWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAtWithCapacity
// Il2CppName: EraseAtWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Erase
// Il2CppName: Erase
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseAtByMovingTail
// Il2CppName: EraseAtByMovingTail
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Copy
// Il2CppName: Copy
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Clone
// Il2CppName: Clone
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Select
// Il2CppName: Select
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::Swap
// Il2CppName: Swap
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::SwapSlice
// Il2CppName: SwapSlice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::MoveSlice
// Il2CppName: MoveSlice
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::EraseSliceWithCapacity
// Il2CppName: EraseSliceWithCapacity
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::SwapElements
// Il2CppName: SwapElements
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::InputSystem::Utilities::ArrayHelpers::SwapElements
// Il2CppName: SwapElements
// Cannot write MetadataGetter for generic methods!
