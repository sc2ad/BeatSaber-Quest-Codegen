// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.InputSystem.InputControlPath
#include "UnityEngine/InputSystem/InputControlPath.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions, "UnityEngine.InputSystem", "InputControlPath/HumanReadableStringOptions");
// Type namespace: UnityEngine.InputSystem
namespace UnityEngine::InputSystem {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct InputControlPath::HumanReadableStringOptions/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: HumanReadableStringOptions
    constexpr HumanReadableStringOptions(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions None
    static constexpr const int None = 0;
    // Get static field: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions None
    static ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions _get_None();
    // Set static field: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions None
    static void _set_None(::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions value);
    // static field const value: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions OmitDevice
    static constexpr const int OmitDevice = 2;
    // Get static field: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions OmitDevice
    static ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions _get_OmitDevice();
    // Set static field: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions OmitDevice
    static void _set_OmitDevice(::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions value);
    // static field const value: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions UseShortNames
    static constexpr const int UseShortNames = 4;
    // Get static field: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions UseShortNames
    static ::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions _get_UseShortNames();
    // Set static field: static public UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions UseShortNames
    static void _set_UseShortNames(::UnityEngine::InputSystem::InputControlPath::HumanReadableStringOptions value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.InputSystem.InputControlPath/UnityEngine.InputSystem.HumanReadableStringOptions
  #pragma pack(pop)
  static check_size<sizeof(InputControlPath::HumanReadableStringOptions), 0 + sizeof(int)> __UnityEngine_InputSystem_InputControlPath_HumanReadableStringOptionsSizeCheck;
  static_assert(sizeof(InputControlPath::HumanReadableStringOptions) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
