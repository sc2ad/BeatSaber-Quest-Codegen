// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.ICanvasRaycastFilter
#include "UnityEngine/ICanvasRaycastFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Vector4 because it is already included!
  // Skipping declaration: Color32 because it is already included!
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Texture
  class Texture;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Skipping declaration: Type because it is already included!
  // Skipping declaration: FillMethod because it is already included!
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Forward declaring namespace: UnityEngine::U2D
namespace UnityEngine::U2D {
  // Forward declaring type: SpriteAtlas
  class SpriteAtlas;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UI::Image);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::Image*, "UnityEngine.UI", "Image");
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Image
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 10C7560
  class Image : public ::UnityEngine::UI::MaskableGraphic/*, public ::UnityEngine::ISerializationCallbackReceiver, public ::UnityEngine::UI::ILayoutElement, public ::UnityEngine::ICanvasRaycastFilter*/ {
    public:
    // Nested type: ::UnityEngine::UI::Image::Type
    struct Type;
    // Nested type: ::UnityEngine::UI::Image::FillMethod
    struct FillMethod;
    // Nested type: ::UnityEngine::UI::Image::OriginHorizontal
    struct OriginHorizontal;
    // Nested type: ::UnityEngine::UI::Image::OriginVertical
    struct OriginVertical;
    // Nested type: ::UnityEngine::UI::Image::Origin90
    struct Origin90;
    // Nested type: ::UnityEngine::UI::Image::Origin180
    struct Origin180;
    // Nested type: ::UnityEngine::UI::Image::Origin360
    struct Origin360;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Image/UnityEngine.UI.Type
    // [TokenAttribute] Offset: FFFFFFFF
    struct Type/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.Type Simple
      static constexpr const int Simple = 0;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Simple
      static ::UnityEngine::UI::Image::Type _get_Simple();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Simple
      static void _set_Simple(::UnityEngine::UI::Image::Type value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.Type Sliced
      static constexpr const int Sliced = 1;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Sliced
      static ::UnityEngine::UI::Image::Type _get_Sliced();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Sliced
      static void _set_Sliced(::UnityEngine::UI::Image::Type value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.Type Tiled
      static constexpr const int Tiled = 2;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Tiled
      static ::UnityEngine::UI::Image::Type _get_Tiled();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Tiled
      static void _set_Tiled(::UnityEngine::UI::Image::Type value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.Type Filled
      static constexpr const int Filled = 3;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Filled
      static ::UnityEngine::UI::Image::Type _get_Filled();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.Type Filled
      static void _set_Filled(::UnityEngine::UI::Image::Type value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.UI.Image/UnityEngine.UI.Type
    #pragma pack(pop)
    static check_size<sizeof(Image::Type), 0 + sizeof(int)> __UnityEngine_UI_Image_TypeSizeCheck;
    static_assert(sizeof(Image::Type) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Image/UnityEngine.UI.FillMethod
    // [TokenAttribute] Offset: FFFFFFFF
    struct FillMethod/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: FillMethod
      constexpr FillMethod(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Horizontal
      static ::UnityEngine::UI::Image::FillMethod _get_Horizontal();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Horizontal
      static void _set_Horizontal(::UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Vertical
      static ::UnityEngine::UI::Image::FillMethod _get_Vertical();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Vertical
      static void _set_Vertical(::UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial90
      static constexpr const int Radial90 = 2;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial90
      static ::UnityEngine::UI::Image::FillMethod _get_Radial90();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial90
      static void _set_Radial90(::UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial180
      static constexpr const int Radial180 = 3;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial180
      static ::UnityEngine::UI::Image::FillMethod _get_Radial180();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial180
      static void _set_Radial180(::UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial360
      static constexpr const int Radial360 = 4;
      // Get static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial360
      static ::UnityEngine::UI::Image::FillMethod _get_Radial360();
      // Set static field: static public UnityEngine.UI.Image/UnityEngine.UI.FillMethod Radial360
      static void _set_Radial360(::UnityEngine::UI::Image::FillMethod value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.UI.Image/UnityEngine.UI.FillMethod
    #pragma pack(pop)
    static check_size<sizeof(Image::FillMethod), 0 + sizeof(int)> __UnityEngine_UI_Image_FillMethodSizeCheck;
    static_assert(sizeof(Image::FillMethod) == 0x4);
    public:
    // [FormerlySerializedAsAttribute] Offset: 0x10C8C14
    // private UnityEngine.Sprite m_Sprite
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Sprite* m_Sprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite m_OverrideSprite
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::Sprite* m_OverrideSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.UI.Image/UnityEngine.UI.Type m_Type
    // Size: 0x4
    // Offset: 0xD0
    ::UnityEngine::UI::Image::Type m_Type;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image::Type) == 0x4);
    // private System.Boolean m_PreserveAspect
    // Size: 0x1
    // Offset: 0xD4
    bool m_PreserveAspect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_FillCenter
    // Size: 0x1
    // Offset: 0xD5
    bool m_FillCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FillCenter and: m_FillMethod
    char __padding4[0x2] = {};
    // private UnityEngine.UI.Image/UnityEngine.UI.FillMethod m_FillMethod
    // Size: 0x4
    // Offset: 0xD8
    ::UnityEngine::UI::Image::FillMethod m_FillMethod;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image::FillMethod) == 0x4);
    // [RangeAttribute] Offset: 0x10C8CA0
    // private System.Single m_FillAmount
    // Size: 0x4
    // Offset: 0xDC
    float m_FillAmount;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_FillClockwise
    // Size: 0x1
    // Offset: 0xE0
    bool m_FillClockwise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_FillClockwise and: m_FillOrigin
    char __padding7[0x3] = {};
    // private System.Int32 m_FillOrigin
    // Size: 0x4
    // Offset: 0xE4
    int m_FillOrigin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_AlphaHitTestMinimumThreshold
    // Size: 0x4
    // Offset: 0xE8
    float m_AlphaHitTestMinimumThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_Tracked
    // Size: 0x1
    // Offset: 0xEC
    bool m_Tracked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UseSpriteMesh
    // Size: 0x1
    // Offset: 0xED
    bool m_UseSpriteMesh;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_UseSpriteMesh and: m_PixelsPerUnitMultiplier
    char __padding11[0x2] = {};
    // private System.Single m_PixelsPerUnitMultiplier
    // Size: 0x4
    // Offset: 0xF0
    float m_PixelsPerUnitMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_CachedReferencePixelsPerUnit
    // Size: 0x4
    // Offset: 0xF4
    float m_CachedReferencePixelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: i_ISerializationCallbackReceiver
    inline ::UnityEngine::ISerializationCallbackReceiver* i_ISerializationCallbackReceiver() noexcept {
      return reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UI::ILayoutElement
    operator ::UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: i_ILayoutElement
    inline ::UnityEngine::UI::ILayoutElement* i_ILayoutElement() noexcept {
      return reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ICanvasRaycastFilter
    operator ::UnityEngine::ICanvasRaycastFilter() noexcept {
      return *reinterpret_cast<::UnityEngine::ICanvasRaycastFilter*>(this);
    }
    // Creating interface conversion operator: i_ICanvasRaycastFilter
    inline ::UnityEngine::ICanvasRaycastFilter* i_ICanvasRaycastFilter() noexcept {
      return reinterpret_cast<::UnityEngine::ICanvasRaycastFilter*>(this);
    }
    // Get static field: static protected UnityEngine.Material s_ETC1DefaultUI
    static ::UnityEngine::Material* _get_s_ETC1DefaultUI();
    // Set static field: static protected UnityEngine.Material s_ETC1DefaultUI
    static void _set_s_ETC1DefaultUI(::UnityEngine::Material* value);
    // Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_VertScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static void _set_s_VertScratch(::ArrayW<::UnityEngine::Vector2> value);
    // Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static ::ArrayW<::UnityEngine::Vector2> _get_s_UVScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static void _set_s_UVScratch(::ArrayW<::UnityEngine::Vector2> value);
    // Get static field: static private readonly UnityEngine.Vector3[] s_Xy
    static ::ArrayW<::UnityEngine::Vector3> _get_s_Xy();
    // Set static field: static private readonly UnityEngine.Vector3[] s_Xy
    static void _set_s_Xy(::ArrayW<::UnityEngine::Vector3> value);
    // Get static field: static private readonly UnityEngine.Vector3[] s_Uv
    static ::ArrayW<::UnityEngine::Vector3> _get_s_Uv();
    // Set static field: static private readonly UnityEngine.Vector3[] s_Uv
    static void _set_s_Uv(::ArrayW<::UnityEngine::Vector3> value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.UI.Image> m_TrackedTexturelessImages
    static ::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>* _get_m_TrackedTexturelessImages();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.UI.Image> m_TrackedTexturelessImages
    static void _set_m_TrackedTexturelessImages(::System::Collections::Generic::List_1<::UnityEngine::UI::Image*>* value);
    // Get static field: static private System.Boolean s_Initialized
    static bool _get_s_Initialized();
    // Set static field: static private System.Boolean s_Initialized
    static void _set_s_Initialized(bool value);
    // Get instance field reference: private UnityEngine.Sprite m_Sprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_m_Sprite();
    // Get instance field reference: private UnityEngine.Sprite m_OverrideSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_m_OverrideSprite();
    // Get instance field reference: private UnityEngine.UI.Image/UnityEngine.UI.Type m_Type
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image::Type& dyn_m_Type();
    // Get instance field reference: private System.Boolean m_PreserveAspect
    [[deprecated("Use field access instead!")]] bool& dyn_m_PreserveAspect();
    // Get instance field reference: private System.Boolean m_FillCenter
    [[deprecated("Use field access instead!")]] bool& dyn_m_FillCenter();
    // Get instance field reference: private UnityEngine.UI.Image/UnityEngine.UI.FillMethod m_FillMethod
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image::FillMethod& dyn_m_FillMethod();
    // Get instance field reference: private System.Single m_FillAmount
    [[deprecated("Use field access instead!")]] float& dyn_m_FillAmount();
    // Get instance field reference: private System.Boolean m_FillClockwise
    [[deprecated("Use field access instead!")]] bool& dyn_m_FillClockwise();
    // Get instance field reference: private System.Int32 m_FillOrigin
    [[deprecated("Use field access instead!")]] int& dyn_m_FillOrigin();
    // Get instance field reference: private System.Single m_AlphaHitTestMinimumThreshold
    [[deprecated("Use field access instead!")]] float& dyn_m_AlphaHitTestMinimumThreshold();
    // Get instance field reference: private System.Boolean m_Tracked
    [[deprecated("Use field access instead!")]] bool& dyn_m_Tracked();
    // Get instance field reference: private System.Boolean m_UseSpriteMesh
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseSpriteMesh();
    // Get instance field reference: private System.Single m_PixelsPerUnitMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_m_PixelsPerUnitMultiplier();
    // Get instance field reference: private System.Single m_CachedReferencePixelsPerUnit
    [[deprecated("Use field access instead!")]] float& dyn_m_CachedReferencePixelsPerUnit();
    // public UnityEngine.Sprite get_sprite()
    // Offset: 0x1EF4748
    ::UnityEngine::Sprite* get_sprite();
    // public System.Void set_sprite(UnityEngine.Sprite value)
    // Offset: 0x1EF4750
    void set_sprite(::UnityEngine::Sprite* value);
    // public UnityEngine.Sprite get_overrideSprite()
    // Offset: 0x1EF4B70
    ::UnityEngine::Sprite* get_overrideSprite();
    // public System.Void set_overrideSprite(UnityEngine.Sprite value)
    // Offset: 0x1EF4BFC
    void set_overrideSprite(::UnityEngine::Sprite* value);
    // private UnityEngine.Sprite get_activeSprite()
    // Offset: 0x1EF4B74
    ::UnityEngine::Sprite* get_activeSprite();
    // public UnityEngine.UI.Image/UnityEngine.UI.Type get_type()
    // Offset: 0x1EF4C8C
    ::UnityEngine::UI::Image::Type get_type();
    // public System.Void set_type(UnityEngine.UI.Image/UnityEngine.UI.Type value)
    // Offset: 0x1EF4C94
    void set_type(::UnityEngine::UI::Image::Type value);
    // public System.Boolean get_preserveAspect()
    // Offset: 0x1EF4D1C
    bool get_preserveAspect();
    // public System.Void set_preserveAspect(System.Boolean value)
    // Offset: 0x1EF4D24
    void set_preserveAspect(bool value);
    // public System.Boolean get_fillCenter()
    // Offset: 0x1EF4DAC
    bool get_fillCenter();
    // public System.Void set_fillCenter(System.Boolean value)
    // Offset: 0x1EF4DB4
    void set_fillCenter(bool value);
    // public UnityEngine.UI.Image/UnityEngine.UI.FillMethod get_fillMethod()
    // Offset: 0x1EF4E3C
    ::UnityEngine::UI::Image::FillMethod get_fillMethod();
    // public System.Void set_fillMethod(UnityEngine.UI.Image/UnityEngine.UI.FillMethod value)
    // Offset: 0x1EF4E44
    void set_fillMethod(::UnityEngine::UI::Image::FillMethod value);
    // public System.Single get_fillAmount()
    // Offset: 0x1EF4EC4
    float get_fillAmount();
    // public System.Void set_fillAmount(System.Single value)
    // Offset: 0x1EF4ECC
    void set_fillAmount(float value);
    // public System.Boolean get_fillClockwise()
    // Offset: 0x1EF4F80
    bool get_fillClockwise();
    // public System.Void set_fillClockwise(System.Boolean value)
    // Offset: 0x1EF4F88
    void set_fillClockwise(bool value);
    // public System.Int32 get_fillOrigin()
    // Offset: 0x1EF5010
    int get_fillOrigin();
    // public System.Void set_fillOrigin(System.Int32 value)
    // Offset: 0x1EF5018
    void set_fillOrigin(int value);
    // public System.Single get_eventAlphaThreshold()
    // Offset: 0x1EF50A0
    float get_eventAlphaThreshold();
    // public System.Void set_eventAlphaThreshold(System.Single value)
    // Offset: 0x1EF50B0
    void set_eventAlphaThreshold(float value);
    // public System.Single get_alphaHitTestMinimumThreshold()
    // Offset: 0x1EF50C0
    float get_alphaHitTestMinimumThreshold();
    // public System.Void set_alphaHitTestMinimumThreshold(System.Single value)
    // Offset: 0x1EF50C8
    void set_alphaHitTestMinimumThreshold(float value);
    // public System.Boolean get_useSpriteMesh()
    // Offset: 0x1EF50D0
    bool get_useSpriteMesh();
    // public System.Void set_useSpriteMesh(System.Boolean value)
    // Offset: 0x1EF50D8
    void set_useSpriteMesh(bool value);
    // static public UnityEngine.Material get_defaultETC1GraphicMaterial()
    // Offset: 0x1EF51AC
    static ::UnityEngine::Material* get_defaultETC1GraphicMaterial();
    // public System.Boolean get_hasBorder()
    // Offset: 0x1EF5440
    bool get_hasBorder();
    // public System.Single get_pixelsPerUnitMultiplier()
    // Offset: 0x1EF550C
    float get_pixelsPerUnitMultiplier();
    // public System.Void set_pixelsPerUnitMultiplier(System.Single value)
    // Offset: 0x1EF5514
    void set_pixelsPerUnitMultiplier(float value);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0x1EF5598
    float get_pixelsPerUnit();
    // protected System.Single get_multipliedPixelsPerUnit()
    // Offset: 0x1EF56AC
    float get_multipliedPixelsPerUnit();
    // public System.Single get_minWidth()
    // Offset: 0x1EFA3E8
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0x1EFA3F0
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0x1EFA4E4
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0x1EFA4EC
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0x1EFA4F4
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0x1EFA5E8
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x1EFA5F0
    int get_layoutPriority();
    // public System.Void DisableSpriteOptimizations()
    // Offset: 0x1EF4B68
    void DisableSpriteOptimizations();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x1EF5830
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x1EF5834
    void OnAfterDeserialize();
    // private System.Void PreserveSpriteAspectRatio(ref UnityEngine.Rect rect, UnityEngine.Vector2 spriteSize)
    // Offset: 0x1EF58E8
    void PreserveSpriteAspectRatio(ByRef<::UnityEngine::Rect> rect, ::UnityEngine::Vector2 spriteSize);
    // private UnityEngine.Vector4 GetDrawingDimensions(System.Boolean shouldPreserveAspect)
    // Offset: 0x1EF5A44
    ::UnityEngine::Vector4 GetDrawingDimensions(bool shouldPreserveAspect);
    // private System.Void TrackSprite()
    // Offset: 0x1EF4A60
    void TrackSprite();
    // private System.Void GenerateSimpleSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect)
    // Offset: 0x1EF609C
    void GenerateSimpleSprite(::UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect);
    // private System.Void GenerateSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect)
    // Offset: 0x1EF63E4
    void GenerateSprite(::UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect);
    // private System.Void GenerateSlicedSprite(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1EF6820
    void GenerateSlicedSprite(::UnityEngine::UI::VertexHelper* toFill);
    // private System.Void GenerateTiledSprite(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1EF6F74
    void GenerateTiledSprite(::UnityEngine::UI::VertexHelper* toFill);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector3[] quadPositions, UnityEngine.Color32 color, UnityEngine.Vector3[] quadUVs)
    // Offset: 0x1EF9B74
    static void AddQuad(::UnityEngine::UI::VertexHelper* vertexHelper, ::ArrayW<::UnityEngine::Vector3> quadPositions, ::UnityEngine::Color32 color, ::ArrayW<::UnityEngine::Vector3> quadUVs);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color, UnityEngine.Vector2 uvMin, UnityEngine.Vector2 uvMax)
    // Offset: 0x1EF9968
    static void AddQuad(::UnityEngine::UI::VertexHelper* vertexHelper, ::UnityEngine::Vector2 posMin, ::UnityEngine::Vector2 posMax, ::UnityEngine::Color32 color, ::UnityEngine::Vector2 uvMin, ::UnityEngine::Vector2 uvMax);
    // private UnityEngine.Vector4 GetAdjustedBorders(UnityEngine.Vector4 border, UnityEngine.Rect adjustedRect)
    // Offset: 0x1EF976C
    ::UnityEngine::Vector4 GetAdjustedBorders(::UnityEngine::Vector4 border, ::UnityEngine::Rect adjustedRect);
    // private System.Void GenerateFilledSprite(UnityEngine.UI.VertexHelper toFill, System.Boolean preserveAspect)
    // Offset: 0x1EF84A0
    void GenerateFilledSprite(::UnityEngine::UI::VertexHelper* toFill, bool preserveAspect);
    // static private System.Boolean RadialCut(UnityEngine.Vector3[] xy, UnityEngine.Vector3[] uv, System.Single fill, System.Boolean invert, System.Int32 corner)
    // Offset: 0x1EF9CFC
    static bool RadialCut(::ArrayW<::UnityEngine::Vector3> xy, ::ArrayW<::UnityEngine::Vector3> uv, float fill, bool invert, int corner);
    // static private System.Void RadialCut(UnityEngine.Vector3[] xy, System.Single cos, System.Single sin, System.Boolean invert, System.Int32 corner)
    // Offset: 0x1EF9E68
    static void RadialCut(::ArrayW<::UnityEngine::Vector3> xy, float cos, float sin, bool invert, int corner);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x1EFA3E0
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x1EFA3E4
    void CalculateLayoutInputVertical();
    // public System.Boolean IsRaycastLocationValid(UnityEngine.Vector2 screenPoint, UnityEngine.Camera eventCamera)
    // Offset: 0x1EFA5F8
    bool IsRaycastLocationValid(::UnityEngine::Vector2 screenPoint, ::UnityEngine::Camera* eventCamera);
    // private UnityEngine.Vector2 MapCoordinate(UnityEngine.Vector2 local, UnityEngine.Rect rect)
    // Offset: 0x1EFA990
    ::UnityEngine::Vector2 MapCoordinate(::UnityEngine::Vector2 local, ::UnityEngine::Rect rect);
    // static private System.Void RebuildImage(UnityEngine.U2D.SpriteAtlas spriteAtlas)
    // Offset: 0x1EFAE80
    static void RebuildImage(::UnityEngine::U2D::SpriteAtlas* spriteAtlas);
    // static private System.Void TrackImage(UnityEngine.UI.Image g)
    // Offset: 0x1EF92D4
    static void TrackImage(::UnityEngine::UI::Image* g);
    // static private System.Void UnTrackImage(UnityEngine.UI.Image g)
    // Offset: 0x1EF94B8
    static void UnTrackImage(::UnityEngine::UI::Image* g);
    // public override UnityEngine.Texture get_mainTexture()
    // Offset: 0x1EF52A4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Texture Graphic::get_mainTexture()
    ::UnityEngine::Texture* get_mainTexture();
    // public override UnityEngine.Material get_material()
    // Offset: 0x1EF56D4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Material Graphic::get_material()
    ::UnityEngine::Material* get_material();
    // public override System.Void set_material(UnityEngine.Material value)
    // Offset: 0x1EF582C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::set_material(UnityEngine.Material value)
    void set_material(::UnityEngine::Material* value);
    // protected System.Void .ctor()
    // Offset: 0x1EF5160
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Image* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UI::Image::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Image*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1EFB068
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::.cctor()
    static void _cctor();
    // public override System.Void SetNativeSize()
    // Offset: 0x1EF5DB4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetNativeSize()
    void SetNativeSize();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1EF5F4C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    void OnPopulateMesh(::UnityEngine::UI::VertexHelper* toFill);
    // protected override System.Void OnEnable()
    // Offset: 0x1EF940C
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1EF9434
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateMaterial()
    // Offset: 0x1EF953C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::UpdateMaterial()
    void UpdateMaterial();
    // protected override System.Void OnCanvasHierarchyChanged()
    // Offset: 0x1EF9654
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnCanvasHierarchyChanged()
    void OnCanvasHierarchyChanged();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x1EFB02C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
  }; // UnityEngine.UI.Image
  #pragma pack(pop)
  static check_size<sizeof(Image), 244 + sizeof(float)> __UnityEngine_UI_ImageSizeCheck;
  static_assert(sizeof(Image) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::Image::FillMethod, "UnityEngine.UI", "Image/FillMethod");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::Image::Type, "UnityEngine.UI", "Image/Type");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_sprite
// Il2CppName: get_sprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_sprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_sprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_sprite
// Il2CppName: set_sprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::Sprite*)>(&UnityEngine::UI::Image::set_sprite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_sprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_overrideSprite
// Il2CppName: get_overrideSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_overrideSprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_overrideSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_overrideSprite
// Il2CppName: set_overrideSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::Sprite*)>(&UnityEngine::UI::Image::set_overrideSprite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_overrideSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_activeSprite
// Il2CppName: get_activeSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_activeSprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_activeSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_type
// Il2CppName: get_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Image::Type (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_type)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_type
// Il2CppName: set_type
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::Image::Type)>(&UnityEngine::UI::Image::set_type)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image/Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_type", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_preserveAspect
// Il2CppName: get_preserveAspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_preserveAspect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_preserveAspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_preserveAspect
// Il2CppName: set_preserveAspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(bool)>(&UnityEngine::UI::Image::set_preserveAspect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_preserveAspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_fillCenter
// Il2CppName: get_fillCenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_fillCenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_fillCenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_fillCenter
// Il2CppName: set_fillCenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(bool)>(&UnityEngine::UI::Image::set_fillCenter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_fillCenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_fillMethod
// Il2CppName: get_fillMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Image::FillMethod (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_fillMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_fillMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_fillMethod
// Il2CppName: set_fillMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::Image::FillMethod)>(&UnityEngine::UI::Image::set_fillMethod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image/FillMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_fillMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_fillAmount
// Il2CppName: get_fillAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_fillAmount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_fillAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_fillAmount
// Il2CppName: set_fillAmount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(float)>(&UnityEngine::UI::Image::set_fillAmount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_fillAmount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_fillClockwise
// Il2CppName: get_fillClockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_fillClockwise)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_fillClockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_fillClockwise
// Il2CppName: set_fillClockwise
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(bool)>(&UnityEngine::UI::Image::set_fillClockwise)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_fillClockwise", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_fillOrigin
// Il2CppName: get_fillOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_fillOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_fillOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_fillOrigin
// Il2CppName: set_fillOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(int)>(&UnityEngine::UI::Image::set_fillOrigin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_fillOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_eventAlphaThreshold
// Il2CppName: get_eventAlphaThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_eventAlphaThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_eventAlphaThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_eventAlphaThreshold
// Il2CppName: set_eventAlphaThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(float)>(&UnityEngine::UI::Image::set_eventAlphaThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_eventAlphaThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_alphaHitTestMinimumThreshold
// Il2CppName: get_alphaHitTestMinimumThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_alphaHitTestMinimumThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_alphaHitTestMinimumThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_alphaHitTestMinimumThreshold
// Il2CppName: set_alphaHitTestMinimumThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(float)>(&UnityEngine::UI::Image::set_alphaHitTestMinimumThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_alphaHitTestMinimumThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_useSpriteMesh
// Il2CppName: get_useSpriteMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_useSpriteMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_useSpriteMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_useSpriteMesh
// Il2CppName: set_useSpriteMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(bool)>(&UnityEngine::UI::Image::set_useSpriteMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_useSpriteMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_defaultETC1GraphicMaterial
// Il2CppName: get_defaultETC1GraphicMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)()>(&UnityEngine::UI::Image::get_defaultETC1GraphicMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_defaultETC1GraphicMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_hasBorder
// Il2CppName: get_hasBorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_hasBorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_hasBorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_pixelsPerUnitMultiplier
// Il2CppName: get_pixelsPerUnitMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_pixelsPerUnitMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_pixelsPerUnitMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_pixelsPerUnitMultiplier
// Il2CppName: set_pixelsPerUnitMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(float)>(&UnityEngine::UI::Image::set_pixelsPerUnitMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_pixelsPerUnitMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_pixelsPerUnit
// Il2CppName: get_pixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_pixelsPerUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_pixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_multipliedPixelsPerUnit
// Il2CppName: get_multipliedPixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_multipliedPixelsPerUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_multipliedPixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_minWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_preferredWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_flexibleWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_minHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_preferredHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_flexibleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_layoutPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::DisableSpriteOptimizations
// Il2CppName: DisableSpriteOptimizations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::DisableSpriteOptimizations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "DisableSpriteOptimizations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::PreserveSpriteAspectRatio
// Il2CppName: PreserveSpriteAspectRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(ByRef<::UnityEngine::Rect>, ::UnityEngine::Vector2)>(&UnityEngine::UI::Image::PreserveSpriteAspectRatio)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->this_arg;
    static auto* spriteSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "PreserveSpriteAspectRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, spriteSize});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GetDrawingDimensions
// Il2CppName: GetDrawingDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::UI::Image::*)(bool)>(&UnityEngine::UI::Image::GetDrawingDimensions)> {
  static const MethodInfo* get() {
    static auto* shouldPreserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GetDrawingDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shouldPreserveAspect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::TrackSprite
// Il2CppName: TrackSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::TrackSprite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "TrackSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GenerateSimpleSprite
// Il2CppName: GenerateSimpleSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::VertexHelper*, bool)>(&UnityEngine::UI::Image::GenerateSimpleSprite)> {
  static const MethodInfo* get() {
    static auto* vh = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* lPreserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GenerateSimpleSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vh, lPreserveAspect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GenerateSprite
// Il2CppName: GenerateSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::VertexHelper*, bool)>(&UnityEngine::UI::Image::GenerateSprite)> {
  static const MethodInfo* get() {
    static auto* vh = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* lPreserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GenerateSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vh, lPreserveAspect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GenerateSlicedSprite
// Il2CppName: GenerateSlicedSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::VertexHelper*)>(&UnityEngine::UI::Image::GenerateSlicedSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GenerateSlicedSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GenerateTiledSprite
// Il2CppName: GenerateTiledSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::VertexHelper*)>(&UnityEngine::UI::Image::GenerateTiledSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GenerateTiledSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::ArrayW<::UnityEngine::Vector3>, ::UnityEngine::Color32, ::ArrayW<::UnityEngine::Vector3>)>(&UnityEngine::UI::Image::AddQuad)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* quadPositions = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* quadUVs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, quadPositions, color, quadUVs});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::AddQuad
// Il2CppName: AddQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Color32, ::UnityEngine::Vector2, ::UnityEngine::Vector2)>(&UnityEngine::UI::Image::AddQuad)> {
  static const MethodInfo* get() {
    static auto* vertexHelper = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* posMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* posMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    static auto* uvMin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* uvMax = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "AddQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexHelper, posMin, posMax, color, uvMin, uvMax});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GetAdjustedBorders
// Il2CppName: GetAdjustedBorders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (UnityEngine::UI::Image::*)(::UnityEngine::Vector4, ::UnityEngine::Rect)>(&UnityEngine::UI::Image::GetAdjustedBorders)> {
  static const MethodInfo* get() {
    static auto* border = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* adjustedRect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GetAdjustedBorders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{border, adjustedRect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::GenerateFilledSprite
// Il2CppName: GenerateFilledSprite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::VertexHelper*, bool)>(&UnityEngine::UI::Image::GenerateFilledSprite)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* preserveAspect = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "GenerateFilledSprite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill, preserveAspect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::RadialCut
// Il2CppName: RadialCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::UnityEngine::Vector3>, ::ArrayW<::UnityEngine::Vector3>, float, bool, int)>(&UnityEngine::UI::Image::RadialCut)> {
  static const MethodInfo* get() {
    static auto* xy = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* uv = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* fill = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* invert = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* corner = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "RadialCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, uv, fill, invert, corner});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::RadialCut
// Il2CppName: RadialCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::ArrayW<::UnityEngine::Vector3>, float, float, bool, int)>(&UnityEngine::UI::Image::RadialCut)> {
  static const MethodInfo* get() {
    static auto* xy = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    static auto* cos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* invert = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* corner = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "RadialCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{xy, cos, sin, invert, corner});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::CalculateLayoutInputHorizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::CalculateLayoutInputVertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::IsRaycastLocationValid
// Il2CppName: IsRaycastLocationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Image::*)(::UnityEngine::Vector2, ::UnityEngine::Camera*)>(&UnityEngine::UI::Image::IsRaycastLocationValid)> {
  static const MethodInfo* get() {
    static auto* screenPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* eventCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "IsRaycastLocationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenPoint, eventCamera});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::MapCoordinate
// Il2CppName: MapCoordinate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UI::Image::*)(::UnityEngine::Vector2, ::UnityEngine::Rect)>(&UnityEngine::UI::Image::MapCoordinate)> {
  static const MethodInfo* get() {
    static auto* local = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "MapCoordinate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{local, rect});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::RebuildImage
// Il2CppName: RebuildImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::U2D::SpriteAtlas*)>(&UnityEngine::UI::Image::RebuildImage)> {
  static const MethodInfo* get() {
    static auto* spriteAtlas = &::il2cpp_utils::GetClassFromName("UnityEngine.U2D", "SpriteAtlas")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "RebuildImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spriteAtlas});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::TrackImage
// Il2CppName: TrackImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::Image*)>(&UnityEngine::UI::Image::TrackImage)> {
  static const MethodInfo* get() {
    static auto* g = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "TrackImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::UnTrackImage
// Il2CppName: UnTrackImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UI::Image*)>(&UnityEngine::UI::Image::UnTrackImage)> {
  static const MethodInfo* get() {
    static auto* g = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "UnTrackImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{g});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_mainTexture
// Il2CppName: get_mainTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture* (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_mainTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_mainTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::get_material
// Il2CppName: get_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::get_material)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "get_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::set_material
// Il2CppName: set_material
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::Material*)>(&UnityEngine::UI::Image::set_material)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "set_material", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UI::Image::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UI::Image::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::SetNativeSize
// Il2CppName: SetNativeSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::SetNativeSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "SetNativeSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnPopulateMesh
// Il2CppName: OnPopulateMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)(::UnityEngine::UI::VertexHelper*)>(&UnityEngine::UI::Image::OnPopulateMesh)> {
  static const MethodInfo* get() {
    static auto* toFill = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnPopulateMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toFill});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::UpdateMaterial
// Il2CppName: UpdateMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::UpdateMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "UpdateMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnCanvasHierarchyChanged
// Il2CppName: OnCanvasHierarchyChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::OnCanvasHierarchyChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnCanvasHierarchyChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Image::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Image::*)()>(&UnityEngine::UI::Image::OnDidApplyAnimationProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Image*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
