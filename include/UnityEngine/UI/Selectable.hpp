// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.EventSystems.IPointerEnterHandler
#include "UnityEngine/EventSystems/IPointerEnterHandler.hpp"
// Including type: UnityEngine.EventSystems.IMoveHandler
#include "UnityEngine/EventSystems/IMoveHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerDownHandler
#include "UnityEngine/EventSystems/IPointerDownHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerUpHandler
#include "UnityEngine/EventSystems/IPointerUpHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerExitHandler
#include "UnityEngine/EventSystems/IPointerExitHandler.hpp"
// Including type: UnityEngine.EventSystems.ISelectHandler
#include "UnityEngine/EventSystems/ISelectHandler.hpp"
// Including type: UnityEngine.EventSystems.IDeselectHandler
#include "UnityEngine/EventSystems/IDeselectHandler.hpp"
// Including type: UnityEngine.UI.Navigation
#include "UnityEngine/UI/Navigation.hpp"
// Including type: UnityEngine.UI.ColorBlock
#include "UnityEngine/UI/ColorBlock.hpp"
// Including type: UnityEngine.UI.SpriteState
#include "UnityEngine/UI/SpriteState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: AnimationTriggers
  class AnimationTriggers;
  // Forward declaring type: Graphic
  class Graphic;
  // Skipping declaration: Transition because it is already included!
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: Animator
  class Animator;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Vector2
  struct Vector2;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: AxisEventData
  class AxisEventData;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Forward declaring type: Selectable
  class Selectable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UI::Selectable);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::Selectable*, "UnityEngine.UI", "Selectable");
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Selectable
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 108A74C
  // [ExecuteAlways] Offset: FFFFFFFF
  // [SelectionBaseAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class Selectable : public ::UnityEngine::EventSystems::UIBehaviour/*, public ::UnityEngine::EventSystems::IPointerEnterHandler, public ::UnityEngine::EventSystems::IMoveHandler, public ::UnityEngine::EventSystems::IPointerDownHandler, public ::UnityEngine::EventSystems::IPointerUpHandler, public ::UnityEngine::EventSystems::IPointerExitHandler, public ::UnityEngine::EventSystems::ISelectHandler, public ::UnityEngine::EventSystems::IDeselectHandler*/ {
    public:
    // Nested type: ::UnityEngine::UI::Selectable::Transition
    struct Transition;
    // Nested type: ::UnityEngine::UI::Selectable::SelectionState
    struct SelectionState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Selectable/UnityEngine.UI.Transition
    // [TokenAttribute] Offset: FFFFFFFF
    struct Transition/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Transition
      constexpr Transition(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition None
      static ::UnityEngine::UI::Selectable::Transition _get_None();
      // Set static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition None
      static void _set_None(::UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition ColorTint
      static constexpr const int ColorTint = 1;
      // Get static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition ColorTint
      static ::UnityEngine::UI::Selectable::Transition _get_ColorTint();
      // Set static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition ColorTint
      static void _set_ColorTint(::UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition SpriteSwap
      static constexpr const int SpriteSwap = 2;
      // Get static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition SpriteSwap
      static ::UnityEngine::UI::Selectable::Transition _get_SpriteSwap();
      // Set static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition SpriteSwap
      static void _set_SpriteSwap(::UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition Animation
      static constexpr const int Animation = 3;
      // Get static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition Animation
      static ::UnityEngine::UI::Selectable::Transition _get_Animation();
      // Set static field: static public UnityEngine.UI.Selectable/UnityEngine.UI.Transition Animation
      static void _set_Animation(::UnityEngine::UI::Selectable::Transition value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.UI.Selectable/UnityEngine.UI.Transition
    #pragma pack(pop)
    static check_size<sizeof(Selectable::Transition), 0 + sizeof(int)> __UnityEngine_UI_Selectable_TransitionSizeCheck;
    static_assert(sizeof(Selectable::Transition) == 0x4);
    public:
    // private System.Boolean m_EnableCalled
    // Size: 0x1
    // Offset: 0x18
    bool m_EnableCalled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_EnableCalled and: m_Navigation
    char __padding0[0x7] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x108C53C
    // private UnityEngine.UI.Navigation m_Navigation
    // Size: 0x28
    // Offset: 0x20
    ::UnityEngine::UI::Navigation m_Navigation;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Navigation) == 0x28);
    // [FormerlySerializedAsAttribute] Offset: 0x108C588
    // private UnityEngine.UI.Selectable/UnityEngine.UI.Transition m_Transition
    // Size: 0x4
    // Offset: 0x48
    ::UnityEngine::UI::Selectable::Transition m_Transition;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Selectable::Transition) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0x108C5D4
    // private UnityEngine.UI.ColorBlock m_Colors
    // Size: 0x58
    // Offset: 0x4C
    ::UnityEngine::UI::ColorBlock m_Colors;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::ColorBlock) == 0x58);
    // Padding between fields: m_Colors and: m_SpriteState
    char __padding3[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x108C620
    // private UnityEngine.UI.SpriteState m_SpriteState
    // Size: 0x20
    // Offset: 0xA8
    ::UnityEngine::UI::SpriteState m_SpriteState;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::SpriteState) == 0x20);
    // [FormerlySerializedAsAttribute] Offset: 0x108C66C
    // private UnityEngine.UI.AnimationTriggers m_AnimationTriggers
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::UI::AnimationTriggers* m_AnimationTriggers;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::AnimationTriggers*) == 0x8);
    // [TooltipAttribute] Offset: 0x108C6B8
    // private System.Boolean m_Interactable
    // Size: 0x1
    // Offset: 0xD0
    bool m_Interactable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Interactable and: m_TargetGraphic
    char __padding6[0x7] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x108C704
    // [FormerlySerializedAsAttribute] Offset: 0x108C704
    // private UnityEngine.UI.Graphic m_TargetGraphic
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::UI::Graphic* m_TargetGraphic;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
    // private System.Boolean m_GroupsAllowInteraction
    // Size: 0x1
    // Offset: 0xE0
    bool m_GroupsAllowInteraction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_GroupsAllowInteraction and: m_CurrentIndex
    char __padding8[0x3] = {};
    // protected System.Int32 m_CurrentIndex
    // Size: 0x4
    // Offset: 0xE4
    int m_CurrentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <isPointerInside>k__BackingField
    // Size: 0x1
    // Offset: 0xE8
    bool isPointerInside;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isPointerDown>k__BackingField
    // Size: 0x1
    // Offset: 0xE9
    bool isPointerDown;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <hasSelection>k__BackingField
    // Size: 0x1
    // Offset: 0xEA
    bool hasSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasSelection and: m_CanvasGroupCache
    char __padding12[0x5] = {};
    // private readonly System.Collections.Generic.List`1<UnityEngine.CanvasGroup> m_CanvasGroupCache
    // Size: 0x8
    // Offset: 0xF0
    ::System::Collections::Generic::List_1<::UnityEngine::CanvasGroup*>* m_CanvasGroupCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::CanvasGroup*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerEnterHandler
    operator ::UnityEngine::EventSystems::IPointerEnterHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerEnterHandler*>(this);
    }
    // Creating interface conversion operator: i_IPointerEnterHandler
    inline ::UnityEngine::EventSystems::IPointerEnterHandler* i_IPointerEnterHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IPointerEnterHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IMoveHandler
    operator ::UnityEngine::EventSystems::IMoveHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IMoveHandler*>(this);
    }
    // Creating interface conversion operator: i_IMoveHandler
    inline ::UnityEngine::EventSystems::IMoveHandler* i_IMoveHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IMoveHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerDownHandler
    operator ::UnityEngine::EventSystems::IPointerDownHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerDownHandler*>(this);
    }
    // Creating interface conversion operator: i_IPointerDownHandler
    inline ::UnityEngine::EventSystems::IPointerDownHandler* i_IPointerDownHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IPointerDownHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerUpHandler
    operator ::UnityEngine::EventSystems::IPointerUpHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerUpHandler*>(this);
    }
    // Creating interface conversion operator: i_IPointerUpHandler
    inline ::UnityEngine::EventSystems::IPointerUpHandler* i_IPointerUpHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IPointerUpHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerExitHandler
    operator ::UnityEngine::EventSystems::IPointerExitHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerExitHandler*>(this);
    }
    // Creating interface conversion operator: i_IPointerExitHandler
    inline ::UnityEngine::EventSystems::IPointerExitHandler* i_IPointerExitHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IPointerExitHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::ISelectHandler
    operator ::UnityEngine::EventSystems::ISelectHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::ISelectHandler*>(this);
    }
    // Creating interface conversion operator: i_ISelectHandler
    inline ::UnityEngine::EventSystems::ISelectHandler* i_ISelectHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::ISelectHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IDeselectHandler
    operator ::UnityEngine::EventSystems::IDeselectHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IDeselectHandler*>(this);
    }
    // Creating interface conversion operator: i_IDeselectHandler
    inline ::UnityEngine::EventSystems::IDeselectHandler* i_IDeselectHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IDeselectHandler*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static protected UnityEngine.UI.Selectable[] s_Selectables
    static ::ArrayW<::UnityEngine::UI::Selectable*> _get_s_Selectables();
    // Set static field: static protected UnityEngine.UI.Selectable[] s_Selectables
    static void _set_s_Selectables(::ArrayW<::UnityEngine::UI::Selectable*> value);
    // Get static field: static protected System.Int32 s_SelectableCount
    static int _get_s_SelectableCount();
    // Set static field: static protected System.Int32 s_SelectableCount
    static void _set_s_SelectableCount(int value);
    // Get instance field reference: private System.Boolean m_EnableCalled
    [[deprecated("Use field access instead!")]] bool& dyn_m_EnableCalled();
    // Get instance field reference: private UnityEngine.UI.Navigation m_Navigation
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Navigation& dyn_m_Navigation();
    // Get instance field reference: private UnityEngine.UI.Selectable/UnityEngine.UI.Transition m_Transition
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Selectable::Transition& dyn_m_Transition();
    // Get instance field reference: private UnityEngine.UI.ColorBlock m_Colors
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::ColorBlock& dyn_m_Colors();
    // Get instance field reference: private UnityEngine.UI.SpriteState m_SpriteState
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::SpriteState& dyn_m_SpriteState();
    // Get instance field reference: private UnityEngine.UI.AnimationTriggers m_AnimationTriggers
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::AnimationTriggers*& dyn_m_AnimationTriggers();
    // Get instance field reference: private System.Boolean m_Interactable
    [[deprecated("Use field access instead!")]] bool& dyn_m_Interactable();
    // Get instance field reference: private UnityEngine.UI.Graphic m_TargetGraphic
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn_m_TargetGraphic();
    // Get instance field reference: private System.Boolean m_GroupsAllowInteraction
    [[deprecated("Use field access instead!")]] bool& dyn_m_GroupsAllowInteraction();
    // Get instance field reference: protected System.Int32 m_CurrentIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_CurrentIndex();
    // Get instance field reference: private System.Boolean <isPointerInside>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isPointerInside$k__BackingField();
    // Get instance field reference: private System.Boolean <isPointerDown>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isPointerDown$k__BackingField();
    // Get instance field reference: private System.Boolean <hasSelection>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hasSelection$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<UnityEngine.CanvasGroup> m_CanvasGroupCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::CanvasGroup*>*& dyn_m_CanvasGroupCache();
    // static public UnityEngine.UI.Selectable[] get_allSelectablesArray()
    // Offset: 0x1EE0BD0
    static ::ArrayW<::UnityEngine::UI::Selectable*> get_allSelectablesArray();
    // static public System.Int32 get_allSelectableCount()
    // Offset: 0x1EE0C70
    static int get_allSelectableCount();
    // static public System.Collections.Generic.List`1<UnityEngine.UI.Selectable> get_allSelectables()
    // Offset: 0x1EE0CD8
    static ::System::Collections::Generic::List_1<::UnityEngine::UI::Selectable*>* get_allSelectables();
    // public UnityEngine.UI.Navigation get_navigation()
    // Offset: 0x1EE0E50
    ::UnityEngine::UI::Navigation get_navigation();
    // public System.Void set_navigation(UnityEngine.UI.Navigation value)
    // Offset: 0x1EE0E64
    void set_navigation(::UnityEngine::UI::Navigation value);
    // public UnityEngine.UI.Selectable/UnityEngine.UI.Transition get_transition()
    // Offset: 0x1EE0F68
    ::UnityEngine::UI::Selectable::Transition get_transition();
    // public System.Void set_transition(UnityEngine.UI.Selectable/UnityEngine.UI.Transition value)
    // Offset: 0x1EE0F70
    void set_transition(::UnityEngine::UI::Selectable::Transition value);
    // public UnityEngine.UI.ColorBlock get_colors()
    // Offset: 0x1EE0FEC
    ::UnityEngine::UI::ColorBlock get_colors();
    // public System.Void set_colors(UnityEngine.UI.ColorBlock value)
    // Offset: 0x1EE0FFC
    void set_colors(::UnityEngine::UI::ColorBlock value);
    // public UnityEngine.UI.SpriteState get_spriteState()
    // Offset: 0x1EE109C
    ::UnityEngine::UI::SpriteState get_spriteState();
    // public System.Void set_spriteState(UnityEngine.UI.SpriteState value)
    // Offset: 0x1EE10AC
    void set_spriteState(::UnityEngine::UI::SpriteState value);
    // public UnityEngine.UI.AnimationTriggers get_animationTriggers()
    // Offset: 0x1EE1134
    ::UnityEngine::UI::AnimationTriggers* get_animationTriggers();
    // public System.Void set_animationTriggers(UnityEngine.UI.AnimationTriggers value)
    // Offset: 0x1EE113C
    void set_animationTriggers(::UnityEngine::UI::AnimationTriggers* value);
    // public UnityEngine.UI.Graphic get_targetGraphic()
    // Offset: 0x1EE11B8
    ::UnityEngine::UI::Graphic* get_targetGraphic();
    // public System.Void set_targetGraphic(UnityEngine.UI.Graphic value)
    // Offset: 0x1EE11C0
    void set_targetGraphic(::UnityEngine::UI::Graphic* value);
    // public System.Boolean get_interactable()
    // Offset: 0x1EE123C
    bool get_interactable();
    // public System.Void set_interactable(System.Boolean value)
    // Offset: 0x1EE1244
    void set_interactable(bool value);
    // private System.Boolean get_isPointerInside()
    // Offset: 0x1EE13CC
    bool get_isPointerInside();
    // private System.Void set_isPointerInside(System.Boolean value)
    // Offset: 0x1EE13D4
    void set_isPointerInside(bool value);
    // private System.Boolean get_isPointerDown()
    // Offset: 0x1EE13E0
    bool get_isPointerDown();
    // private System.Void set_isPointerDown(System.Boolean value)
    // Offset: 0x1EE13E8
    void set_isPointerDown(bool value);
    // private System.Boolean get_hasSelection()
    // Offset: 0x1EE13F4
    bool get_hasSelection();
    // private System.Void set_hasSelection(System.Boolean value)
    // Offset: 0x1EE13FC
    void set_hasSelection(bool value);
    // public UnityEngine.UI.Image get_image()
    // Offset: 0x1EE1408
    ::UnityEngine::UI::Image* get_image();
    // public System.Void set_image(UnityEngine.UI.Image value)
    // Offset: 0x1EE148C
    void set_image(::UnityEngine::UI::Image* value);
    // public UnityEngine.Animator get_animator()
    // Offset: 0x1EE1494
    ::UnityEngine::Animator* get_animator();
    // protected UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState get_currentSelectionState()
    // Offset: 0x1EE174C
    ::UnityEngine::UI::Selectable::SelectionState get_currentSelectionState();
    // static private System.Void .cctor()
    // Offset: 0x1EE27A0
    static void _cctor();
    // static public System.Int32 AllSelectablesNoAlloc(UnityEngine.UI.Selectable[] selectables)
    // Offset: 0x1EE0D6C
    static int AllSelectablesNoAlloc(::ArrayW<::UnityEngine::UI::Selectable*> selectables);
    // public System.Boolean IsInteractable()
    // Offset: 0x1EE1728
    bool IsInteractable();
    // private System.Void OnSetProperty()
    // Offset: 0x1EE0EF8
    void OnSetProperty();
    // protected System.Void InstantClearState()
    // Offset: 0x1EE17DC
    void InstantClearState();
    // protected System.Void DoStateTransition(UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState state, System.Boolean instant)
    // Offset: 0x1EE1BC0
    void DoStateTransition(::UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public UnityEngine.UI.Selectable FindSelectable(UnityEngine.Vector3 dir)
    // Offset: 0x1EE1D64
    ::UnityEngine::UI::Selectable* FindSelectable(::UnityEngine::Vector3 dir);
    // static private UnityEngine.Vector3 GetPointOnRectEdge(UnityEngine.RectTransform rect, UnityEngine.Vector2 dir)
    // Offset: 0x1EE21E8
    static ::UnityEngine::Vector3 GetPointOnRectEdge(::UnityEngine::RectTransform* rect, ::UnityEngine::Vector2 dir);
    // private System.Void Navigate(UnityEngine.EventSystems.AxisEventData eventData, UnityEngine.UI.Selectable sel)
    // Offset: 0x1EE241C
    void Navigate(::UnityEngine::EventSystems::AxisEventData* eventData, ::UnityEngine::UI::Selectable* sel);
    // public UnityEngine.UI.Selectable FindSelectableOnLeft()
    // Offset: 0x1EE0298
    ::UnityEngine::UI::Selectable* FindSelectableOnLeft();
    // public UnityEngine.UI.Selectable FindSelectableOnRight()
    // Offset: 0x1EE03FC
    ::UnityEngine::UI::Selectable* FindSelectableOnRight();
    // public UnityEngine.UI.Selectable FindSelectableOnUp()
    // Offset: 0x1EE0560
    ::UnityEngine::UI::Selectable* FindSelectableOnUp();
    // public UnityEngine.UI.Selectable FindSelectableOnDown()
    // Offset: 0x1EE06C4
    ::UnityEngine::UI::Selectable* FindSelectableOnDown();
    // public System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    // Offset: 0x1EE01DC
    void OnMove(::UnityEngine::EventSystems::AxisEventData* eventData);
    // private System.Void StartColorTween(UnityEngine.Color targetColor, System.Boolean instant)
    // Offset: 0x1EE186C
    void StartColorTween(::UnityEngine::Color targetColor, bool instant);
    // private System.Void DoSpriteSwap(UnityEngine.Sprite newSprite)
    // Offset: 0x1EE1964
    void DoSpriteSwap(::UnityEngine::Sprite* newSprite);
    // private System.Void TriggerAnimation(System.String triggername)
    // Offset: 0x1EE1A1C
    void TriggerAnimation(::StringW triggername);
    // protected System.Boolean IsHighlighted()
    // Offset: 0x1EE24E4
    bool IsHighlighted();
    // protected System.Boolean IsPressed()
    // Offset: 0x1EE254C
    bool IsPressed();
    // private System.Void EvaluateAndTransitionToSelectionState()
    // Offset: 0x1EE25A4
    void EvaluateAndTransitionToSelectionState();
    // public System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1EDFCB0
    void OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1EDFF24
    void OnPointerUp(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1EE264C
    void OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1EE2658
    void OnPointerExit(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x1EE2660
    void OnSelect(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x1EE266C
    void OnDeselect(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void Select()
    // Offset: 0x1EE2674
    void Select();
    // protected System.Void .ctor()
    // Offset: 0x1EDED04
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Selectable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UI::Selectable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Selectable*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x1EE14E4
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void OnCanvasGroupChanged()
    // Offset: 0x1EE1574
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnCanvasGroupChanged()
    void OnCanvasGroupChanged();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x1EE1748
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnEnable()
    // Offset: 0x1EDF0F0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable()
    void OnEnable();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x1EE17A8
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnTransformParentChanged()
    void OnTransformParentChanged();
    // protected override System.Void OnDisable()
    // Offset: 0x1EDF31C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable()
    void OnDisable();
  }; // UnityEngine.UI.Selectable
  #pragma pack(pop)
  static check_size<sizeof(Selectable), 240 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::CanvasGroup*>*)> __UnityEngine_UI_SelectableSizeCheck;
  static_assert(sizeof(Selectable) == 0xF8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::Selectable::Transition, "UnityEngine.UI", "Selectable/Transition");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_allSelectablesArray
// Il2CppName: get_allSelectablesArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::UI::Selectable*> (*)()>(&UnityEngine::UI::Selectable::get_allSelectablesArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_allSelectablesArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_allSelectableCount
// Il2CppName: get_allSelectableCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&UnityEngine::UI::Selectable::get_allSelectableCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_allSelectableCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_allSelectables
// Il2CppName: get_allSelectables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::UI::Selectable*>* (*)()>(&UnityEngine::UI::Selectable::get_allSelectables)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_allSelectables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_navigation
// Il2CppName: get_navigation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Navigation (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_navigation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_navigation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_navigation
// Il2CppName: set_navigation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::Navigation)>(&UnityEngine::UI::Selectable::set_navigation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Navigation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_navigation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_transition
// Il2CppName: get_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable::Transition (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_transition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_transition
// Il2CppName: set_transition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::Selectable::Transition)>(&UnityEngine::UI::Selectable::set_transition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Selectable/Transition")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_transition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_colors
// Il2CppName: get_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::ColorBlock (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_colors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_colors
// Il2CppName: set_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::ColorBlock)>(&UnityEngine::UI::Selectable::set_colors)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "ColorBlock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_spriteState
// Il2CppName: get_spriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::SpriteState (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_spriteState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_spriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_spriteState
// Il2CppName: set_spriteState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::SpriteState)>(&UnityEngine::UI::Selectable::set_spriteState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "SpriteState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_spriteState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_animationTriggers
// Il2CppName: get_animationTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::AnimationTriggers* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_animationTriggers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_animationTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_animationTriggers
// Il2CppName: set_animationTriggers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::AnimationTriggers*)>(&UnityEngine::UI::Selectable::set_animationTriggers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "AnimationTriggers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_animationTriggers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_targetGraphic
// Il2CppName: get_targetGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Graphic* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_targetGraphic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_targetGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_targetGraphic
// Il2CppName: set_targetGraphic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::Graphic*)>(&UnityEngine::UI::Selectable::set_targetGraphic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Graphic")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_targetGraphic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_interactable
// Il2CppName: get_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_interactable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_interactable
// Il2CppName: set_interactable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(bool)>(&UnityEngine::UI::Selectable::set_interactable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_interactable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_isPointerInside
// Il2CppName: get_isPointerInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_isPointerInside)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_isPointerInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_isPointerInside
// Il2CppName: set_isPointerInside
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(bool)>(&UnityEngine::UI::Selectable::set_isPointerInside)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_isPointerInside", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_isPointerDown
// Il2CppName: get_isPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_isPointerDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_isPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_isPointerDown
// Il2CppName: set_isPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(bool)>(&UnityEngine::UI::Selectable::set_isPointerDown)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_isPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_hasSelection
// Il2CppName: get_hasSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_hasSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_hasSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_hasSelection
// Il2CppName: set_hasSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(bool)>(&UnityEngine::UI::Selectable::set_hasSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_hasSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_image
// Il2CppName: get_image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Image* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_image)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::set_image
// Il2CppName: set_image
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::Image*)>(&UnityEngine::UI::Selectable::set_image)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "set_image", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_animator
// Il2CppName: get_animator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Animator* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_animator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_animator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::get_currentSelectionState
// Il2CppName: get_currentSelectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable::SelectionState (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::get_currentSelectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "get_currentSelectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UI::Selectable::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::AllSelectablesNoAlloc
// Il2CppName: AllSelectablesNoAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::ArrayW<::UnityEngine::UI::Selectable*>)>(&UnityEngine::UI::Selectable::AllSelectablesNoAlloc)> {
  static const MethodInfo* get() {
    static auto* selectables = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Selectable"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "AllSelectablesNoAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{selectables});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::IsInteractable
// Il2CppName: IsInteractable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::IsInteractable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "IsInteractable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnSetProperty
// Il2CppName: OnSetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::OnSetProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnSetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::InstantClearState
// Il2CppName: InstantClearState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::InstantClearState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "InstantClearState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::DoStateTransition
// Il2CppName: DoStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::UI::Selectable::SelectionState, bool)>(&UnityEngine::UI::Selectable::DoStateTransition)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Selectable/SelectionState")->byval_arg;
    static auto* instant = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "DoStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, instant});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::FindSelectable
// Il2CppName: FindSelectable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable* (UnityEngine::UI::Selectable::*)(::UnityEngine::Vector3)>(&UnityEngine::UI::Selectable::FindSelectable)> {
  static const MethodInfo* get() {
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "FindSelectable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dir});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::GetPointOnRectEdge
// Il2CppName: GetPointOnRectEdge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::RectTransform*, ::UnityEngine::Vector2)>(&UnityEngine::UI::Selectable::GetPointOnRectEdge)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* dir = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "GetPointOnRectEdge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, dir});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::Navigate
// Il2CppName: Navigate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::AxisEventData*, ::UnityEngine::UI::Selectable*)>(&UnityEngine::UI::Selectable::Navigate)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "AxisEventData")->byval_arg;
    static auto* sel = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Selectable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "Navigate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, sel});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::FindSelectableOnLeft
// Il2CppName: FindSelectableOnLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::FindSelectableOnLeft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "FindSelectableOnLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::FindSelectableOnRight
// Il2CppName: FindSelectableOnRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::FindSelectableOnRight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "FindSelectableOnRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::FindSelectableOnUp
// Il2CppName: FindSelectableOnUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::FindSelectableOnUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "FindSelectableOnUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::FindSelectableOnDown
// Il2CppName: FindSelectableOnDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Selectable* (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::FindSelectableOnDown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "FindSelectableOnDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnMove
// Il2CppName: OnMove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::AxisEventData*)>(&UnityEngine::UI::Selectable::OnMove)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "AxisEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnMove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::StartColorTween
// Il2CppName: StartColorTween
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::Color, bool)>(&UnityEngine::UI::Selectable::StartColorTween)> {
  static const MethodInfo* get() {
    static auto* targetColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* instant = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "StartColorTween", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetColor, instant});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::DoSpriteSwap
// Il2CppName: DoSpriteSwap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::Sprite*)>(&UnityEngine::UI::Selectable::DoSpriteSwap)> {
  static const MethodInfo* get() {
    static auto* newSprite = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "DoSpriteSwap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newSprite});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::TriggerAnimation
// Il2CppName: TriggerAnimation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::StringW)>(&UnityEngine::UI::Selectable::TriggerAnimation)> {
  static const MethodInfo* get() {
    static auto* triggername = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "TriggerAnimation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggername});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::IsHighlighted
// Il2CppName: IsHighlighted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::IsHighlighted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "IsHighlighted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::IsPressed
// Il2CppName: IsPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::IsPressed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "IsPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::EvaluateAndTransitionToSelectionState
// Il2CppName: EvaluateAndTransitionToSelectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::EvaluateAndTransitionToSelectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "EvaluateAndTransitionToSelectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnPointerDown
// Il2CppName: OnPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::UI::Selectable::OnPointerDown)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnPointerUp
// Il2CppName: OnPointerUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::UI::Selectable::OnPointerUp)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnPointerUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnPointerEnter
// Il2CppName: OnPointerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::UI::Selectable::OnPointerEnter)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnPointerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnPointerExit
// Il2CppName: OnPointerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::UI::Selectable::OnPointerExit)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnPointerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnSelect
// Il2CppName: OnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::BaseEventData*)>(&UnityEngine::UI::Selectable::OnSelect)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnDeselect
// Il2CppName: OnDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)(::UnityEngine::EventSystems::BaseEventData*)>(&UnityEngine::UI::Selectable::OnDeselect)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::Select
// Il2CppName: Select
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::Select)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "Select", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnCanvasGroupChanged
// Il2CppName: OnCanvasGroupChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::OnCanvasGroupChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnCanvasGroupChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::OnDidApplyAnimationProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnTransformParentChanged
// Il2CppName: OnTransformParentChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::OnTransformParentChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnTransformParentChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::Selectable::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::Selectable::*)()>(&UnityEngine::UI::Selectable::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::Selectable*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
