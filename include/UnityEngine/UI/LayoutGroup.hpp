// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.UI.ILayoutGroup
#include "UnityEngine/UI/ILayoutGroup.hpp"
// Including type: UnityEngine.TextAnchor
#include "UnityEngine/TextAnchor.hpp"
// Including type: UnityEngine.DrivenRectTransformTracker
#include "UnityEngine/DrivenRectTransformTracker.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectOffset
  class RectOffset;
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Forward declaring type: LayoutGroup
  class LayoutGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UI::LayoutGroup);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::LayoutGroup*, "UnityEngine.UI", "LayoutGroup");
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.LayoutGroup
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  // [RequireComponent] Offset: 10C78F0
  class LayoutGroup : public ::UnityEngine::EventSystems::UIBehaviour/*, public ::UnityEngine::UI::ILayoutElement, public ::UnityEngine::UI::ILayoutGroup*/ {
    public:
    // Nested type: ::UnityEngine::UI::LayoutGroup::$DelayedSetDirty$d__56
    class $DelayedSetDirty$d__56;
    public:
    // protected UnityEngine.RectOffset m_Padding
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectOffset* m_Padding;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectOffset*) == 0x8);
    // protected UnityEngine.TextAnchor m_ChildAlignment
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::TextAnchor m_ChildAlignment;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextAnchor) == 0x4);
    // Padding between fields: m_ChildAlignment and: m_Rect
    char __padding1[0x4] = {};
    // private UnityEngine.RectTransform m_Rect
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RectTransform* m_Rect;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // protected UnityEngine.DrivenRectTransformTracker m_Tracker
    // Size: 0x1
    // Offset: 0x30
    ::UnityEngine::DrivenRectTransformTracker m_Tracker;
    // Field size check
    static_assert(sizeof(::UnityEngine::DrivenRectTransformTracker) == 0x1);
    // Padding between fields: m_Tracker and: m_TotalMinSize
    char __padding3[0x3] = {};
    // private UnityEngine.Vector2 m_TotalMinSize
    // Size: 0x8
    // Offset: 0x34
    ::UnityEngine::Vector2 m_TotalMinSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_TotalPreferredSize
    // Size: 0x8
    // Offset: 0x3C
    ::UnityEngine::Vector2 m_TotalPreferredSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_TotalFlexibleSize
    // Size: 0x8
    // Offset: 0x44
    ::UnityEngine::Vector2 m_TotalFlexibleSize;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: m_TotalFlexibleSize and: m_RectChildren
    char __padding6[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.RectTransform> m_RectChildren
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>* m_RectChildren;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UI::ILayoutElement
    operator ::UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: i_ILayoutElement
    inline ::UnityEngine::UI::ILayoutElement* i_ILayoutElement() noexcept {
      return reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UI::ILayoutGroup
    operator ::UnityEngine::UI::ILayoutGroup() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ILayoutGroup*>(this);
    }
    // Creating interface conversion operator: i_ILayoutGroup
    inline ::UnityEngine::UI::ILayoutGroup* i_ILayoutGroup() noexcept {
      return reinterpret_cast<::UnityEngine::UI::ILayoutGroup*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected UnityEngine.RectOffset m_Padding
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectOffset*& dyn_m_Padding();
    // Get instance field reference: protected UnityEngine.TextAnchor m_ChildAlignment
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextAnchor& dyn_m_ChildAlignment();
    // Get instance field reference: private UnityEngine.RectTransform m_Rect
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_Rect();
    // Get instance field reference: protected UnityEngine.DrivenRectTransformTracker m_Tracker
    [[deprecated("Use field access instead!")]] ::UnityEngine::DrivenRectTransformTracker& dyn_m_Tracker();
    // Get instance field reference: private UnityEngine.Vector2 m_TotalMinSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_TotalMinSize();
    // Get instance field reference: private UnityEngine.Vector2 m_TotalPreferredSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_TotalPreferredSize();
    // Get instance field reference: private UnityEngine.Vector2 m_TotalFlexibleSize
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_TotalFlexibleSize();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.RectTransform> m_RectChildren
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>*& dyn_m_RectChildren();
    // public UnityEngine.RectOffset get_padding()
    // Offset: 0x1F59BBC
    ::UnityEngine::RectOffset* get_padding();
    // public System.Void set_padding(UnityEngine.RectOffset value)
    // Offset: 0x1F59BC4
    void set_padding(::UnityEngine::RectOffset* value);
    // public UnityEngine.TextAnchor get_childAlignment()
    // Offset: 0x1F59C28
    ::UnityEngine::TextAnchor get_childAlignment();
    // public System.Void set_childAlignment(UnityEngine.TextAnchor value)
    // Offset: 0x1F59C30
    void set_childAlignment(::UnityEngine::TextAnchor value);
    // protected UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x1F59C94
    ::UnityEngine::RectTransform* get_rectTransform();
    // protected System.Collections.Generic.List`1<UnityEngine.RectTransform> get_rectChildren()
    // Offset: 0x1F59D2C
    ::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>* get_rectChildren();
    // public System.Single get_minWidth()
    // Offset: 0x1F5A044
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0x1F5A060
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0x1F5A07C
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0x1F5A098
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0x1F5A0A8
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0x1F5A0B8
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x1F5A0C8
    int get_layoutPriority();
    // private System.Boolean get_isRootLayoutGroup()
    // Offset: 0x1F5AA54
    bool get_isRootLayoutGroup();
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x1F59D34
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void CalculateLayoutInputVertical();
    // public System.Void SetLayoutHorizontal()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetLayoutHorizontal();
    // public System.Void SetLayoutVertical()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetLayoutVertical();
    // protected System.Single GetTotalMinSize(System.Int32 axis)
    // Offset: 0x1F5A054
    float GetTotalMinSize(int axis);
    // protected System.Single GetTotalPreferredSize(System.Int32 axis)
    // Offset: 0x1F5A070
    float GetTotalPreferredSize(int axis);
    // protected System.Single GetTotalFlexibleSize(System.Int32 axis)
    // Offset: 0x1F5A08C
    float GetTotalFlexibleSize(int axis);
    // protected System.Single GetStartOffset(System.Int32 axis, System.Single requiredSpaceWithoutPadding)
    // Offset: 0x1F5A378
    float GetStartOffset(int axis, float requiredSpaceWithoutPadding);
    // protected System.Single GetAlignmentOnAxis(System.Int32 axis)
    // Offset: 0x1F5A49C
    float GetAlignmentOnAxis(int axis);
    // protected System.Void SetLayoutInputForAxis(System.Single totalMin, System.Single totalPreferred, System.Single totalFlexible, System.Int32 axis)
    // Offset: 0x1F5A4E8
    void SetLayoutInputForAxis(float totalMin, float totalPreferred, float totalFlexible, int axis);
    // protected System.Void SetChildAlongAxis(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos)
    // Offset: 0x1F5A548
    void SetChildAlongAxis(::UnityEngine::RectTransform* rect, int axis, float pos);
    // protected System.Void SetChildAlongAxisWithScale(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos, System.Single scaleFactor)
    // Offset: 0x1F5A600
    void SetChildAlongAxisWithScale(::UnityEngine::RectTransform* rect, int axis, float pos, float scaleFactor);
    // protected System.Void SetChildAlongAxis(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos, System.Single size)
    // Offset: 0x1F5A7C0
    void SetChildAlongAxis(::UnityEngine::RectTransform* rect, int axis, float pos, float size);
    // protected System.Void SetChildAlongAxisWithScale(UnityEngine.RectTransform rect, System.Int32 axis, System.Single pos, System.Single size, System.Single scaleFactor)
    // Offset: 0x1F5A880
    void SetChildAlongAxisWithScale(::UnityEngine::RectTransform* rect, int axis, float pos, float size, float scaleFactor);
    // protected System.Void OnTransformChildrenChanged()
    // Offset: 0x1F5ABE0
    void OnTransformChildrenChanged();
    // protected System.Void SetProperty(ref T currentValue, T newValue)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void SetProperty(ByRef<T> currentValue, T newValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UI::LayoutGroup::SetProperty");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SetProperty", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(currentValue), ::il2cpp_utils::ExtractType(newValue)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(currentValue), newValue);
    }
    // protected System.Void SetDirty()
    // Offset: 0x1F5A1F8
    void SetDirty();
    // private System.Collections.IEnumerator DelayedSetDirty(UnityEngine.RectTransform rectTransform)
    // Offset: 0x1F5ABE4
    ::System::Collections::IEnumerator* DelayedSetDirty(::UnityEngine::RectTransform* rectTransform);
    // protected System.Void .ctor()
    // Offset: 0x1F5A0D0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LayoutGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UI::LayoutGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LayoutGroup*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x1F5A1D0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1F5A2E8
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable()
    void OnDisable();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x1F5A374
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x1F5ABA0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
  }; // UnityEngine.UI.LayoutGroup
  #pragma pack(pop)
  static check_size<sizeof(LayoutGroup), 80 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>*)> __UnityEngine_UI_LayoutGroupSizeCheck;
  static_assert(sizeof(LayoutGroup) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_padding
// Il2CppName: get_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectOffset* (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_padding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::set_padding
// Il2CppName: set_padding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::RectOffset*)>(&UnityEngine::UI::LayoutGroup::set_padding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectOffset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "set_padding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_childAlignment
// Il2CppName: get_childAlignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextAnchor (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_childAlignment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_childAlignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::set_childAlignment
// Il2CppName: set_childAlignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::TextAnchor)>(&UnityEngine::UI::LayoutGroup::set_childAlignment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TextAnchor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "set_childAlignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_rectTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_rectChildren
// Il2CppName: get_rectChildren
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>* (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_rectChildren)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_rectChildren", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_minWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_preferredWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_flexibleWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_minHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_preferredHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_flexibleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_layoutPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::get_isRootLayoutGroup
// Il2CppName: get_isRootLayoutGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::get_isRootLayoutGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "get_isRootLayoutGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::CalculateLayoutInputHorizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::CalculateLayoutInputVertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetLayoutHorizontal
// Il2CppName: SetLayoutHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::SetLayoutHorizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetLayoutHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetLayoutVertical
// Il2CppName: SetLayoutVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::SetLayoutVertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetLayoutVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::GetTotalMinSize
// Il2CppName: GetTotalMinSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)(int)>(&UnityEngine::UI::LayoutGroup::GetTotalMinSize)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "GetTotalMinSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::GetTotalPreferredSize
// Il2CppName: GetTotalPreferredSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)(int)>(&UnityEngine::UI::LayoutGroup::GetTotalPreferredSize)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "GetTotalPreferredSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::GetTotalFlexibleSize
// Il2CppName: GetTotalFlexibleSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)(int)>(&UnityEngine::UI::LayoutGroup::GetTotalFlexibleSize)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "GetTotalFlexibleSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::GetStartOffset
// Il2CppName: GetStartOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)(int, float)>(&UnityEngine::UI::LayoutGroup::GetStartOffset)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* requiredSpaceWithoutPadding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "GetStartOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, requiredSpaceWithoutPadding});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::GetAlignmentOnAxis
// Il2CppName: GetAlignmentOnAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::LayoutGroup::*)(int)>(&UnityEngine::UI::LayoutGroup::GetAlignmentOnAxis)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "GetAlignmentOnAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetLayoutInputForAxis
// Il2CppName: SetLayoutInputForAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(float, float, float, int)>(&UnityEngine::UI::LayoutGroup::SetLayoutInputForAxis)> {
  static const MethodInfo* get() {
    static auto* totalMin = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* totalPreferred = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* totalFlexible = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetLayoutInputForAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{totalMin, totalPreferred, totalFlexible, axis});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetChildAlongAxis
// Il2CppName: SetChildAlongAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::RectTransform*, int, float)>(&UnityEngine::UI::LayoutGroup::SetChildAlongAxis)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetChildAlongAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, axis, pos});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetChildAlongAxisWithScale
// Il2CppName: SetChildAlongAxisWithScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::RectTransform*, int, float, float)>(&UnityEngine::UI::LayoutGroup::SetChildAlongAxisWithScale)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* scaleFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetChildAlongAxisWithScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, axis, pos, scaleFactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetChildAlongAxis
// Il2CppName: SetChildAlongAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::RectTransform*, int, float, float)>(&UnityEngine::UI::LayoutGroup::SetChildAlongAxis)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetChildAlongAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, axis, pos, size});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetChildAlongAxisWithScale
// Il2CppName: SetChildAlongAxisWithScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::RectTransform*, int, float, float, float)>(&UnityEngine::UI::LayoutGroup::SetChildAlongAxisWithScale)> {
  static const MethodInfo* get() {
    static auto* rect = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* scaleFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetChildAlongAxisWithScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rect, axis, pos, size, scaleFactor});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::OnTransformChildrenChanged
// Il2CppName: OnTransformChildrenChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::OnTransformChildrenChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "OnTransformChildrenChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetProperty
// Il2CppName: SetProperty
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::SetDirty
// Il2CppName: SetDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::SetDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "SetDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::DelayedSetDirty
// Il2CppName: DelayedSetDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (UnityEngine::UI::LayoutGroup::*)(::UnityEngine::RectTransform*)>(&UnityEngine::UI::LayoutGroup::DelayedSetDirty)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "DelayedSetDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::OnDidApplyAnimationProperties
// Il2CppName: OnDidApplyAnimationProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::OnDidApplyAnimationProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "OnDidApplyAnimationProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::LayoutGroup::OnRectTransformDimensionsChange
// Il2CppName: OnRectTransformDimensionsChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::LayoutGroup::*)()>(&UnityEngine::UI::LayoutGroup::OnRectTransformDimensionsChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::LayoutGroup*), "OnRectTransformDimensionsChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
