// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.LayoutGroup
#include "UnityEngine/UI/LayoutGroup.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Forward declaring type: HorizontalOrVerticalLayoutGroup
  class HorizontalOrVerticalLayoutGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UI::HorizontalOrVerticalLayoutGroup);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UI::HorizontalOrVerticalLayoutGroup*, "UnityEngine.UI", "HorizontalOrVerticalLayoutGroup");
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x62
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.HorizontalOrVerticalLayoutGroup
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class HorizontalOrVerticalLayoutGroup : public ::UnityEngine::UI::LayoutGroup {
    public:
    public:
    // protected System.Single m_Spacing
    // Size: 0x4
    // Offset: 0x58
    float m_Spacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_ChildForceExpandWidth
    // Size: 0x1
    // Offset: 0x5C
    bool m_ChildForceExpandWidth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ChildForceExpandHeight
    // Size: 0x1
    // Offset: 0x5D
    bool m_ChildForceExpandHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ChildControlWidth
    // Size: 0x1
    // Offset: 0x5E
    bool m_ChildControlWidth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ChildControlHeight
    // Size: 0x1
    // Offset: 0x5F
    bool m_ChildControlHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ChildScaleWidth
    // Size: 0x1
    // Offset: 0x60
    bool m_ChildScaleWidth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ChildScaleHeight
    // Size: 0x1
    // Offset: 0x61
    bool m_ChildScaleHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: protected System.Single m_Spacing
    [[deprecated("Use field access instead!")]] float& dyn_m_Spacing();
    // Get instance field reference: protected System.Boolean m_ChildForceExpandWidth
    [[deprecated("Use field access instead!")]] bool& dyn_m_ChildForceExpandWidth();
    // Get instance field reference: protected System.Boolean m_ChildForceExpandHeight
    [[deprecated("Use field access instead!")]] bool& dyn_m_ChildForceExpandHeight();
    // Get instance field reference: protected System.Boolean m_ChildControlWidth
    [[deprecated("Use field access instead!")]] bool& dyn_m_ChildControlWidth();
    // Get instance field reference: protected System.Boolean m_ChildControlHeight
    [[deprecated("Use field access instead!")]] bool& dyn_m_ChildControlHeight();
    // Get instance field reference: protected System.Boolean m_ChildScaleWidth
    [[deprecated("Use field access instead!")]] bool& dyn_m_ChildScaleWidth();
    // Get instance field reference: protected System.Boolean m_ChildScaleHeight
    [[deprecated("Use field access instead!")]] bool& dyn_m_ChildScaleHeight();
    // public System.Single get_spacing()
    // Offset: 0x1E6714C
    float get_spacing();
    // public System.Void set_spacing(System.Single value)
    // Offset: 0x1E67154
    void set_spacing(float value);
    // public System.Boolean get_childForceExpandWidth()
    // Offset: 0x1E671B8
    bool get_childForceExpandWidth();
    // public System.Void set_childForceExpandWidth(System.Boolean value)
    // Offset: 0x1E671C0
    void set_childForceExpandWidth(bool value);
    // public System.Boolean get_childForceExpandHeight()
    // Offset: 0x1E67224
    bool get_childForceExpandHeight();
    // public System.Void set_childForceExpandHeight(System.Boolean value)
    // Offset: 0x1E6722C
    void set_childForceExpandHeight(bool value);
    // public System.Boolean get_childControlWidth()
    // Offset: 0x1E67290
    bool get_childControlWidth();
    // public System.Void set_childControlWidth(System.Boolean value)
    // Offset: 0x1E67298
    void set_childControlWidth(bool value);
    // public System.Boolean get_childControlHeight()
    // Offset: 0x1E672FC
    bool get_childControlHeight();
    // public System.Void set_childControlHeight(System.Boolean value)
    // Offset: 0x1E67304
    void set_childControlHeight(bool value);
    // public System.Boolean get_childScaleWidth()
    // Offset: 0x1E67368
    bool get_childScaleWidth();
    // public System.Void set_childScaleWidth(System.Boolean value)
    // Offset: 0x1E67370
    void set_childScaleWidth(bool value);
    // public System.Boolean get_childScaleHeight()
    // Offset: 0x1E673D4
    bool get_childScaleHeight();
    // public System.Void set_childScaleHeight(System.Boolean value)
    // Offset: 0x1E673DC
    void set_childScaleHeight(bool value);
    // protected System.Void CalcAlongAxis(System.Int32 axis, System.Boolean isVertical)
    // Offset: 0x1E668C4
    void CalcAlongAxis(int axis, bool isVertical);
    // protected System.Void SetChildrenAlongAxis(System.Int32 axis, System.Boolean isVertical)
    // Offset: 0x1E66B74
    void SetChildrenAlongAxis(int axis, bool isVertical);
    // private System.Void GetChildSizes(UnityEngine.RectTransform child, System.Int32 axis, System.Boolean controlSize, System.Boolean childForceExpand, out System.Single min, out System.Single preferred, out System.Single flexible)
    // Offset: 0x1E67440
    void GetChildSizes(::UnityEngine::RectTransform* child, int axis, bool controlSize, bool childForceExpand, ByRef<float> min, ByRef<float> preferred, ByRef<float> flexible);
    // protected System.Void .ctor()
    // Offset: 0x1E66884
    // Implemented from: UnityEngine.UI.LayoutGroup
    // Base method: System.Void LayoutGroup::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HorizontalOrVerticalLayoutGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UI::HorizontalOrVerticalLayoutGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HorizontalOrVerticalLayoutGroup*, creationType>()));
    }
  }; // UnityEngine.UI.HorizontalOrVerticalLayoutGroup
  #pragma pack(pop)
  static check_size<sizeof(HorizontalOrVerticalLayoutGroup), 97 + sizeof(bool)> __UnityEngine_UI_HorizontalOrVerticalLayoutGroupSizeCheck;
  static_assert(sizeof(HorizontalOrVerticalLayoutGroup) == 0x62);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_spacing
// Il2CppName: get_spacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_spacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_spacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_spacing
// Il2CppName: set_spacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(float)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_spacing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_spacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childForceExpandWidth
// Il2CppName: get_childForceExpandWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childForceExpandWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_childForceExpandWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childForceExpandWidth
// Il2CppName: set_childForceExpandWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childForceExpandWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_childForceExpandWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childForceExpandHeight
// Il2CppName: get_childForceExpandHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childForceExpandHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_childForceExpandHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childForceExpandHeight
// Il2CppName: set_childForceExpandHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childForceExpandHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_childForceExpandHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childControlWidth
// Il2CppName: get_childControlWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childControlWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_childControlWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childControlWidth
// Il2CppName: set_childControlWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childControlWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_childControlWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childControlHeight
// Il2CppName: get_childControlHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childControlHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_childControlHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childControlHeight
// Il2CppName: set_childControlHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childControlHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_childControlHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childScaleWidth
// Il2CppName: get_childScaleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childScaleWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_childScaleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childScaleWidth
// Il2CppName: set_childScaleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childScaleWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_childScaleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childScaleHeight
// Il2CppName: get_childScaleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)()>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::get_childScaleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "get_childScaleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childScaleHeight
// Il2CppName: set_childScaleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::set_childScaleHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "set_childScaleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::CalcAlongAxis
// Il2CppName: CalcAlongAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(int, bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::CalcAlongAxis)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isVertical = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "CalcAlongAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, isVertical});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::SetChildrenAlongAxis
// Il2CppName: SetChildrenAlongAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(int, bool)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::SetChildrenAlongAxis)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isVertical = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "SetChildrenAlongAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis, isVertical});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::GetChildSizes
// Il2CppName: GetChildSizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UI::HorizontalOrVerticalLayoutGroup::*)(::UnityEngine::RectTransform*, int, bool, bool, ByRef<float>, ByRef<float>, ByRef<float>)>(&UnityEngine::UI::HorizontalOrVerticalLayoutGroup::GetChildSizes)> {
  static const MethodInfo* get() {
    static auto* child = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* axis = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* controlSize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* childForceExpand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* preferred = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* flexible = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UI::HorizontalOrVerticalLayoutGroup*), "GetChildSizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{child, axis, controlSize, childForceExpand, min, preferred, flexible});
  }
};
// Writing MetadataGetter for method: UnityEngine::UI::HorizontalOrVerticalLayoutGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
