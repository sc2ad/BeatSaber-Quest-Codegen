// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Forward declaring type: DirectorUpdateMode
  struct DirectorUpdateMode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Playables::DirectorUpdateMode, "UnityEngine.Playables", "DirectorUpdateMode");
// Type namespace: UnityEngine.Playables
namespace UnityEngine::Playables {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Playables.DirectorUpdateMode
  // [TokenAttribute] Offset: FFFFFFFF
  struct DirectorUpdateMode/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: DirectorUpdateMode
    constexpr DirectorUpdateMode(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public UnityEngine.Playables.DirectorUpdateMode DSPClock
    static constexpr const int DSPClock = 0;
    // Get static field: static public UnityEngine.Playables.DirectorUpdateMode DSPClock
    static ::UnityEngine::Playables::DirectorUpdateMode _get_DSPClock();
    // Set static field: static public UnityEngine.Playables.DirectorUpdateMode DSPClock
    static void _set_DSPClock(::UnityEngine::Playables::DirectorUpdateMode value);
    // static field const value: static public UnityEngine.Playables.DirectorUpdateMode GameTime
    static constexpr const int GameTime = 1;
    // Get static field: static public UnityEngine.Playables.DirectorUpdateMode GameTime
    static ::UnityEngine::Playables::DirectorUpdateMode _get_GameTime();
    // Set static field: static public UnityEngine.Playables.DirectorUpdateMode GameTime
    static void _set_GameTime(::UnityEngine::Playables::DirectorUpdateMode value);
    // static field const value: static public UnityEngine.Playables.DirectorUpdateMode UnscaledGameTime
    static constexpr const int UnscaledGameTime = 2;
    // Get static field: static public UnityEngine.Playables.DirectorUpdateMode UnscaledGameTime
    static ::UnityEngine::Playables::DirectorUpdateMode _get_UnscaledGameTime();
    // Set static field: static public UnityEngine.Playables.DirectorUpdateMode UnscaledGameTime
    static void _set_UnscaledGameTime(::UnityEngine::Playables::DirectorUpdateMode value);
    // static field const value: static public UnityEngine.Playables.DirectorUpdateMode Manual
    static constexpr const int Manual = 3;
    // Get static field: static public UnityEngine.Playables.DirectorUpdateMode Manual
    static ::UnityEngine::Playables::DirectorUpdateMode _get_Manual();
    // Set static field: static public UnityEngine.Playables.DirectorUpdateMode Manual
    static void _set_Manual(::UnityEngine::Playables::DirectorUpdateMode value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // UnityEngine.Playables.DirectorUpdateMode
  #pragma pack(pop)
  static check_size<sizeof(DirectorUpdateMode), 0 + sizeof(int)> __UnityEngine_Playables_DirectorUpdateModeSizeCheck;
  static_assert(sizeof(DirectorUpdateMode) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
