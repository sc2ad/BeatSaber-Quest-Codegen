// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.PropertyAttribute
#include "UnityEngine/PropertyAttribute.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TextAreaAttribute
  class TextAreaAttribute;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TextAreaAttribute);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TextAreaAttribute*, "UnityEngine", "TextAreaAttribute");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TextAreaAttribute
  // [TokenAttribute] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: 1050E08
  class TextAreaAttribute : public ::UnityEngine::PropertyAttribute {
    public:
    public:
    // public readonly System.Int32 minLines
    // Size: 0x4
    // Offset: 0x10
    int minLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 maxLines
    // Size: 0x4
    // Offset: 0x14
    int maxLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly System.Int32 minLines
    [[deprecated("Use field access instead!")]] int& dyn_minLines();
    // Get instance field reference: public readonly System.Int32 maxLines
    [[deprecated("Use field access instead!")]] int& dyn_maxLines();
    // public System.Void .ctor(System.Int32 minLines, System.Int32 maxLines)
    // Offset: 0x27CB948
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextAreaAttribute* New_ctor(int minLines, int maxLines) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TextAreaAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextAreaAttribute*, creationType>(minLines, maxLines)));
    }
  }; // UnityEngine.TextAreaAttribute
  #pragma pack(pop)
  static check_size<sizeof(TextAreaAttribute), 20 + sizeof(int)> __UnityEngine_TextAreaAttributeSizeCheck;
  static_assert(sizeof(TextAreaAttribute) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TextAreaAttribute::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
