// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Cache
  struct Cache;
  // Forward declaring type: Hash128
  struct Hash128;
  // Forward declaring type: CachedAssetBundle
  struct CachedAssetBundle;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Caching
  class Caching;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Caching);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Caching*, "UnityEngine", "Caching");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Caching
  // [TokenAttribute] Offset: FFFFFFFF
  // [StaticAccessorAttribute] Offset: 104F038
  // [NativeHeaderAttribute] Offset: 104F038
  class Caching : public ::Il2CppObject {
    public:
    // static public System.Void set_compressionEnabled(System.Boolean value)
    // Offset: 0x1F931A0
    static void set_compressionEnabled(bool value);
    // static public System.Boolean get_ready()
    // Offset: 0x1F931E0
    static bool get_ready();
    // static public UnityEngine.Cache get_defaultCache()
    // Offset: 0x1F93A94
    static ::UnityEngine::Cache get_defaultCache();
    // static public UnityEngine.Cache get_currentCacheForWriting()
    // Offset: 0x1F93B1C
    static ::UnityEngine::Cache get_currentCacheForWriting();
    // static public System.Void set_currentCacheForWriting(UnityEngine.Cache value)
    // Offset: 0x1F93BA4
    static void set_currentCacheForWriting(::UnityEngine::Cache value);
    // static public System.Boolean ClearCachedVersion(System.String assetBundleName, UnityEngine.Hash128 hash)
    // Offset: 0x1F93214
    static bool ClearCachedVersion(::StringW assetBundleName, ::UnityEngine::Hash128 hash);
    // static System.Boolean ClearCachedVersionInternal(System.String assetBundleName, UnityEngine.Hash128 hash)
    // Offset: 0x1F932BC
    static bool ClearCachedVersionInternal(::StringW assetBundleName, ::UnityEngine::Hash128 hash);
    // static public System.Boolean ClearOtherCachedVersions(System.String assetBundleName, UnityEngine.Hash128 hash)
    // Offset: 0x1F93364
    static bool ClearOtherCachedVersions(::StringW assetBundleName, ::UnityEngine::Hash128 hash);
    // static public System.Boolean ClearAllCachedVersions(System.String assetBundleName)
    // Offset: 0x1F93478
    static bool ClearAllCachedVersions(::StringW assetBundleName);
    // static System.Boolean ClearCachedVersions(System.String assetBundleName, UnityEngine.Hash128 hash, System.Boolean keepInputVersion)
    // Offset: 0x1F93410
    static bool ClearCachedVersions(::StringW assetBundleName, ::UnityEngine::Hash128 hash, bool keepInputVersion);
    // static public System.Boolean IsVersionCached(UnityEngine.CachedAssetBundle cachedBundle)
    // Offset: 0x1F9356C
    static bool IsVersionCached(::UnityEngine::CachedAssetBundle cachedBundle);
    // static System.Boolean IsVersionCached(System.String url, System.String assetBundleName, UnityEngine.Hash128 hash)
    // Offset: 0x1F9360C
    static bool IsVersionCached(::StringW url, ::StringW assetBundleName, ::UnityEngine::Hash128 hash);
    // static public UnityEngine.Cache AddCache(System.String cachePath)
    // Offset: 0x1F936CC
    static ::UnityEngine::Cache AddCache(::StringW cachePath);
    // static UnityEngine.Cache AddCache(System.String cachePath, System.Boolean isReadonly)
    // Offset: 0x1F9398C
    static ::UnityEngine::Cache AddCache(::StringW cachePath, bool isReadonly);
    // static public UnityEngine.Cache GetCacheByPath(System.String cachePath)
    // Offset: 0x1F93934
    static ::UnityEngine::Cache GetCacheByPath(::StringW cachePath);
    // static private System.Boolean ClearCachedVersionInternal_Injected(System.String assetBundleName, ref UnityEngine.Hash128 hash)
    // Offset: 0x1F93314
    static bool ClearCachedVersionInternal_Injected(::StringW assetBundleName, ByRef<::UnityEngine::Hash128> hash);
    // static private System.Boolean ClearCachedVersions_Injected(System.String assetBundleName, ref UnityEngine.Hash128 hash, System.Boolean keepInputVersion)
    // Offset: 0x1F93514
    static bool ClearCachedVersions_Injected(::StringW assetBundleName, ByRef<::UnityEngine::Hash128> hash, bool keepInputVersion);
    // static private System.Boolean IsVersionCached_Injected(System.String url, System.String assetBundleName, ref UnityEngine.Hash128 hash)
    // Offset: 0x1F93674
    static bool IsVersionCached_Injected(::StringW url, ::StringW assetBundleName, ByRef<::UnityEngine::Hash128> hash);
    // static private System.Void AddCache_Injected(System.String cachePath, System.Boolean isReadonly, out UnityEngine.Cache ret)
    // Offset: 0x1F939EC
    static void AddCache_Injected(::StringW cachePath, bool isReadonly, ByRef<::UnityEngine::Cache> ret);
    // static private System.Void GetCacheByPath_Injected(System.String cachePath, out UnityEngine.Cache ret)
    // Offset: 0x1F93A44
    static void GetCacheByPath_Injected(::StringW cachePath, ByRef<::UnityEngine::Cache> ret);
    // static private System.Void get_defaultCache_Injected(out UnityEngine.Cache ret)
    // Offset: 0x1F93ADC
    static void get_defaultCache_Injected(ByRef<::UnityEngine::Cache> ret);
    // static private System.Void get_currentCacheForWriting_Injected(out UnityEngine.Cache ret)
    // Offset: 0x1F93B64
    static void get_currentCacheForWriting_Injected(ByRef<::UnityEngine::Cache> ret);
    // static private System.Void set_currentCacheForWriting_Injected(ref UnityEngine.Cache value)
    // Offset: 0x1F93BE8
    static void set_currentCacheForWriting_Injected(ByRef<::UnityEngine::Cache> value);
  }; // UnityEngine.Caching
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Caching::set_compressionEnabled
// Il2CppName: set_compressionEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&UnityEngine::Caching::set_compressionEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "set_compressionEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::get_ready
// Il2CppName: get_ready
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&UnityEngine::Caching::get_ready)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "get_ready", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::get_defaultCache
// Il2CppName: get_defaultCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Cache (*)()>(&UnityEngine::Caching::get_defaultCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "get_defaultCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::get_currentCacheForWriting
// Il2CppName: get_currentCacheForWriting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Cache (*)()>(&UnityEngine::Caching::get_currentCacheForWriting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "get_currentCacheForWriting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::set_currentCacheForWriting
// Il2CppName: set_currentCacheForWriting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Cache)>(&UnityEngine::Caching::set_currentCacheForWriting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Cache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "set_currentCacheForWriting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearCachedVersion
// Il2CppName: ClearCachedVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::UnityEngine::Hash128)>(&UnityEngine::Caching::ClearCachedVersion)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearCachedVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearCachedVersionInternal
// Il2CppName: ClearCachedVersionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::UnityEngine::Hash128)>(&UnityEngine::Caching::ClearCachedVersionInternal)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearCachedVersionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearOtherCachedVersions
// Il2CppName: ClearOtherCachedVersions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::UnityEngine::Hash128)>(&UnityEngine::Caching::ClearOtherCachedVersions)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearOtherCachedVersions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearAllCachedVersions
// Il2CppName: ClearAllCachedVersions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&UnityEngine::Caching::ClearAllCachedVersions)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearAllCachedVersions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearCachedVersions
// Il2CppName: ClearCachedVersions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::UnityEngine::Hash128, bool)>(&UnityEngine::Caching::ClearCachedVersions)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->byval_arg;
    static auto* keepInputVersion = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearCachedVersions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName, hash, keepInputVersion});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::IsVersionCached
// Il2CppName: IsVersionCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::CachedAssetBundle)>(&UnityEngine::Caching::IsVersionCached)> {
  static const MethodInfo* get() {
    static auto* cachedBundle = &::il2cpp_utils::GetClassFromName("UnityEngine", "CachedAssetBundle")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "IsVersionCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachedBundle});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::IsVersionCached
// Il2CppName: IsVersionCached
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::UnityEngine::Hash128)>(&UnityEngine::Caching::IsVersionCached)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "IsVersionCached", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, assetBundleName, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::AddCache
// Il2CppName: AddCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Cache (*)(::StringW)>(&UnityEngine::Caching::AddCache)> {
  static const MethodInfo* get() {
    static auto* cachePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "AddCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachePath});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::AddCache
// Il2CppName: AddCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Cache (*)(::StringW, bool)>(&UnityEngine::Caching::AddCache)> {
  static const MethodInfo* get() {
    static auto* cachePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isReadonly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "AddCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachePath, isReadonly});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::GetCacheByPath
// Il2CppName: GetCacheByPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Cache (*)(::StringW)>(&UnityEngine::Caching::GetCacheByPath)> {
  static const MethodInfo* get() {
    static auto* cachePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "GetCacheByPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachePath});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearCachedVersionInternal_Injected
// Il2CppName: ClearCachedVersionInternal_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::UnityEngine::Hash128>)>(&UnityEngine::Caching::ClearCachedVersionInternal_Injected)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearCachedVersionInternal_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::ClearCachedVersions_Injected
// Il2CppName: ClearCachedVersions_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::UnityEngine::Hash128>, bool)>(&UnityEngine::Caching::ClearCachedVersions_Injected)> {
  static const MethodInfo* get() {
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    static auto* keepInputVersion = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "ClearCachedVersions_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleName, hash, keepInputVersion});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::IsVersionCached_Injected
// Il2CppName: IsVersionCached_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<::UnityEngine::Hash128>)>(&UnityEngine::Caching::IsVersionCached_Injected)> {
  static const MethodInfo* get() {
    static auto* url = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetBundleName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("UnityEngine", "Hash128")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "IsVersionCached_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{url, assetBundleName, hash});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::AddCache_Injected
// Il2CppName: AddCache_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, bool, ByRef<::UnityEngine::Cache>)>(&UnityEngine::Caching::AddCache_Injected)> {
  static const MethodInfo* get() {
    static auto* cachePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isReadonly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Cache")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "AddCache_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachePath, isReadonly, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::GetCacheByPath_Injected
// Il2CppName: GetCacheByPath_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<::UnityEngine::Cache>)>(&UnityEngine::Caching::GetCacheByPath_Injected)> {
  static const MethodInfo* get() {
    static auto* cachePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Cache")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "GetCacheByPath_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachePath, ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::get_defaultCache_Injected
// Il2CppName: get_defaultCache_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Cache>)>(&UnityEngine::Caching::get_defaultCache_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Cache")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "get_defaultCache_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::get_currentCacheForWriting_Injected
// Il2CppName: get_currentCacheForWriting_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Cache>)>(&UnityEngine::Caching::get_currentCacheForWriting_Injected)> {
  static const MethodInfo* get() {
    static auto* ret = &::il2cpp_utils::GetClassFromName("UnityEngine", "Cache")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "get_currentCacheForWriting_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ret});
  }
};
// Writing MetadataGetter for method: UnityEngine::Caching::set_currentCacheForWriting_Injected
// Il2CppName: set_currentCacheForWriting_Injected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::Cache>)>(&UnityEngine::Caching::set_currentCacheForWriting_Injected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Cache")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Caching*), "set_currentCacheForWriting_Injected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
