// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.Scripting.APIUpdating
namespace UnityEngine::Scripting::APIUpdating {
  // Forward declaring type: MovedFromAttributeData
  struct MovedFromAttributeData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Scripting::APIUpdating::MovedFromAttributeData, "UnityEngine.Scripting.APIUpdating", "MovedFromAttributeData");
// Type namespace: UnityEngine.Scripting.APIUpdating
namespace UnityEngine::Scripting::APIUpdating {
  // Size: 0x1C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Scripting.APIUpdating.MovedFromAttributeData
  // [TokenAttribute] Offset: FFFFFFFF
  struct MovedFromAttributeData/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String className
    // Size: 0x8
    // Offset: 0x0
    ::StringW className;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String nameSpace
    // Size: 0x8
    // Offset: 0x8
    ::StringW nameSpace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String assembly
    // Size: 0x8
    // Offset: 0x10
    ::StringW assembly;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean classHasChanged
    // Size: 0x1
    // Offset: 0x18
    bool classHasChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean nameSpaceHasChanged
    // Size: 0x1
    // Offset: 0x19
    bool nameSpaceHasChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean assemblyHasChanged
    // Size: 0x1
    // Offset: 0x1A
    bool assemblyHasChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean autoUdpateAPI
    // Size: 0x1
    // Offset: 0x1B
    bool autoUdpateAPI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: MovedFromAttributeData
    constexpr MovedFromAttributeData(::StringW className_ = {}, ::StringW nameSpace_ = {}, ::StringW assembly_ = {}, bool classHasChanged_ = {}, bool nameSpaceHasChanged_ = {}, bool assemblyHasChanged_ = {}, bool autoUdpateAPI_ = {}) noexcept : className{className_}, nameSpace{nameSpace_}, assembly{assembly_}, classHasChanged{classHasChanged_}, nameSpaceHasChanged{nameSpaceHasChanged_}, assemblyHasChanged{assemblyHasChanged_}, autoUdpateAPI{autoUdpateAPI_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String className
    [[deprecated("Use field access instead!")]] ::StringW& dyn_className();
    // Get instance field reference: public System.String nameSpace
    [[deprecated("Use field access instead!")]] ::StringW& dyn_nameSpace();
    // Get instance field reference: public System.String assembly
    [[deprecated("Use field access instead!")]] ::StringW& dyn_assembly();
    // Get instance field reference: public System.Boolean classHasChanged
    [[deprecated("Use field access instead!")]] bool& dyn_classHasChanged();
    // Get instance field reference: public System.Boolean nameSpaceHasChanged
    [[deprecated("Use field access instead!")]] bool& dyn_nameSpaceHasChanged();
    // Get instance field reference: public System.Boolean assemblyHasChanged
    [[deprecated("Use field access instead!")]] bool& dyn_assemblyHasChanged();
    // Get instance field reference: public System.Boolean autoUdpateAPI
    [[deprecated("Use field access instead!")]] bool& dyn_autoUdpateAPI();
    // public System.Void Set(System.Boolean autoUpdateAPI, System.String sourceNamespace, System.String sourceAssembly, System.String sourceClassName)
    // Offset: 0x21209FC
    void Set(bool autoUpdateAPI, ::StringW sourceNamespace, ::StringW sourceAssembly, ::StringW sourceClassName);
  }; // UnityEngine.Scripting.APIUpdating.MovedFromAttributeData
  #pragma pack(pop)
  static check_size<sizeof(MovedFromAttributeData), 27 + sizeof(bool)> __UnityEngine_Scripting_APIUpdating_MovedFromAttributeDataSizeCheck;
  static_assert(sizeof(MovedFromAttributeData) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Scripting::APIUpdating::MovedFromAttributeData::Set
// Il2CppName: Set
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Scripting::APIUpdating::MovedFromAttributeData::*)(bool, ::StringW, ::StringW, ::StringW)>(&UnityEngine::Scripting::APIUpdating::MovedFromAttributeData::Set)> {
  static const MethodInfo* get() {
    static auto* autoUpdateAPI = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* sourceNamespace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceAssembly = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceClassName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Scripting::APIUpdating::MovedFromAttributeData), "Set", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{autoUpdateAPI, sourceNamespace, sourceAssembly, sourceClassName});
  }
};
