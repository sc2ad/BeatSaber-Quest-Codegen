// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.PointerInputModule
#include "UnityEngine/EventSystems/PointerInputModule.hpp"
// Including type: OVRInput/Button
#include "GlobalNamespace/OVRInput_Button.hpp"
// Including type: UnityEngine.KeyCode
#include "UnityEngine/KeyCode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: OVRPointerEventData
  class OVRPointerEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCursor
  class OVRCursor;
  // Forward declaring type: OVRRaycaster
  class OVRRaycaster;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: OVRInputModule
  class OVRInputModule;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::EventSystems::OVRInputModule);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::EventSystems::OVRInputModule*, "UnityEngine.EventSystems", "OVRInputModule");
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Size: 0xE8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.EventSystems.OVRInputModule
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRInputModule : public ::UnityEngine::EventSystems::PointerInputModule {
    public:
    // Nested type: ::UnityEngine::EventSystems::OVRInputModule::InputMode
    struct InputMode;
    public:
    // [TooltipAttribute] Offset: 0x109622C
    // public UnityEngine.Transform rayTransform
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Transform* rayTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public OVRCursor m_Cursor
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::OVRCursor* m_Cursor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCursor*) == 0x8);
    // [TooltipAttribute] Offset: 0x1096264
    // public OVRInput/Button joyPadClickButton
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::OVRInput::Button joyPadClickButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Button) == 0x4);
    // [TooltipAttribute] Offset: 0x109629C
    // public UnityEngine.KeyCode gazeClickKey
    // Size: 0x4
    // Offset: 0x6C
    ::UnityEngine::KeyCode gazeClickKey;
    // Field size check
    static_assert(sizeof(::UnityEngine::KeyCode) == 0x4);
    // [HeaderAttribute] Offset: 0x10962D4
    // [TooltipAttribute] Offset: 0x10962D4
    // public System.Boolean performSphereCastForGazepointer
    // Size: 0x1
    // Offset: 0x70
    bool performSphereCastForGazepointer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0x1096334
    // [TooltipAttribute] Offset: 0x1096334
    // public System.Boolean useRightStickScroll
    // Size: 0x1
    // Offset: 0x71
    bool useRightStickScroll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useRightStickScroll and: rightStickDeadZone
    char __padding5[0x2] = {};
    // [TooltipAttribute] Offset: 0x1096394
    // public System.Single rightStickDeadZone
    // Size: 0x4
    // Offset: 0x74
    float rightStickDeadZone;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x10963CC
    // [TooltipAttribute] Offset: 0x10963CC
    // public System.Boolean useSwipeScroll
    // Size: 0x1
    // Offset: 0x78
    bool useSwipeScroll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useSwipeScroll and: swipeDragThreshold
    char __padding7[0x3] = {};
    // [TooltipAttribute] Offset: 0x109642C
    // public System.Single swipeDragThreshold
    // Size: 0x4
    // Offset: 0x7C
    float swipeDragThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x1096464
    // public System.Single swipeDragScale
    // Size: 0x4
    // Offset: 0x80
    float swipeDragScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x109649C
    // public System.Boolean InvertSwipeXAxis
    // Size: 0x1
    // Offset: 0x84
    bool InvertSwipeXAxis;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: InvertSwipeXAxis and: activeGraphicRaycaster
    char __padding10[0x3] = {};
    // public OVRRaycaster activeGraphicRaycaster
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::OVRRaycaster* activeGraphicRaycaster;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRRaycaster*) == 0x8);
    // [HeaderAttribute] Offset: 0x10964D4
    // [TooltipAttribute] Offset: 0x10964D4
    // public System.Single angleDragThreshold
    // Size: 0x4
    // Offset: 0x90
    float angleDragThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_SpherecastRadius
    // Size: 0x4
    // Offset: 0x94
    float m_SpherecastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_NextAction
    // Size: 0x4
    // Offset: 0x98
    float m_NextAction;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 m_LastMousePosition
    // Size: 0x8
    // Offset: 0x9C
    ::UnityEngine::Vector2 m_LastMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 m_MousePosition
    // Size: 0x8
    // Offset: 0xA4
    ::UnityEngine::Vector2 m_MousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // Padding between fields: m_MousePosition and: m_HorizontalAxis
    char __padding16[0x4] = {};
    // [HeaderAttribute] Offset: 0x1096544
    // private System.String m_HorizontalAxis
    // Size: 0x8
    // Offset: 0xB0
    ::StringW m_HorizontalAxis;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_VerticalAxis
    // Size: 0x8
    // Offset: 0xB8
    ::StringW m_VerticalAxis;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_SubmitButton
    // Size: 0x8
    // Offset: 0xC0
    ::StringW m_SubmitButton;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String m_CancelButton
    // Size: 0x8
    // Offset: 0xC8
    ::StringW m_CancelButton;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single m_InputActionsPerSecond
    // Size: 0x4
    // Offset: 0xD0
    float m_InputActionsPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean m_AllowActivationOnMobileDevice
    // Size: 0x1
    // Offset: 0xD4
    bool m_AllowActivationOnMobileDevice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_AllowActivationOnMobileDevice and: m_VRRayPointerData
    char __padding22[0x3] = {};
    // protected System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.EventSystems.OVRPointerEventData> m_VRRayPointerData
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::EventSystems::OVRPointerEventData*>* m_VRRayPointerData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::EventSystems::OVRPointerEventData*>*) == 0x8);
    // private readonly UnityEngine.EventSystems.PointerInputModule/UnityEngine.EventSystems.MouseState m_MouseState
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::EventSystems::PointerInputModule::MouseState* m_MouseState;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::PointerInputModule::MouseState*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform rayTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rayTransform();
    // Get instance field reference: public OVRCursor m_Cursor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCursor*& dyn_m_Cursor();
    // Get instance field reference: public OVRInput/Button joyPadClickButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Button& dyn_joyPadClickButton();
    // Get instance field reference: public UnityEngine.KeyCode gazeClickKey
    [[deprecated("Use field access instead!")]] ::UnityEngine::KeyCode& dyn_gazeClickKey();
    // Get instance field reference: public System.Boolean performSphereCastForGazepointer
    [[deprecated("Use field access instead!")]] bool& dyn_performSphereCastForGazepointer();
    // Get instance field reference: public System.Boolean useRightStickScroll
    [[deprecated("Use field access instead!")]] bool& dyn_useRightStickScroll();
    // Get instance field reference: public System.Single rightStickDeadZone
    [[deprecated("Use field access instead!")]] float& dyn_rightStickDeadZone();
    // Get instance field reference: public System.Boolean useSwipeScroll
    [[deprecated("Use field access instead!")]] bool& dyn_useSwipeScroll();
    // Get instance field reference: public System.Single swipeDragThreshold
    [[deprecated("Use field access instead!")]] float& dyn_swipeDragThreshold();
    // Get instance field reference: public System.Single swipeDragScale
    [[deprecated("Use field access instead!")]] float& dyn_swipeDragScale();
    // Get instance field reference: public System.Boolean InvertSwipeXAxis
    [[deprecated("Use field access instead!")]] bool& dyn_InvertSwipeXAxis();
    // Get instance field reference: public OVRRaycaster activeGraphicRaycaster
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRRaycaster*& dyn_activeGraphicRaycaster();
    // Get instance field reference: public System.Single angleDragThreshold
    [[deprecated("Use field access instead!")]] float& dyn_angleDragThreshold();
    // Get instance field reference: private System.Single m_SpherecastRadius
    [[deprecated("Use field access instead!")]] float& dyn_m_SpherecastRadius();
    // Get instance field reference: private System.Single m_NextAction
    [[deprecated("Use field access instead!")]] float& dyn_m_NextAction();
    // Get instance field reference: private UnityEngine.Vector2 m_LastMousePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_LastMousePosition();
    // Get instance field reference: private UnityEngine.Vector2 m_MousePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_MousePosition();
    // Get instance field reference: private System.String m_HorizontalAxis
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_HorizontalAxis();
    // Get instance field reference: private System.String m_VerticalAxis
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_VerticalAxis();
    // Get instance field reference: private System.String m_SubmitButton
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_SubmitButton();
    // Get instance field reference: private System.String m_CancelButton
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_CancelButton();
    // Get instance field reference: private System.Single m_InputActionsPerSecond
    [[deprecated("Use field access instead!")]] float& dyn_m_InputActionsPerSecond();
    // Get instance field reference: private System.Boolean m_AllowActivationOnMobileDevice
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowActivationOnMobileDevice();
    // Get instance field reference: protected System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.EventSystems.OVRPointerEventData> m_VRRayPointerData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::EventSystems::OVRPointerEventData*>*& dyn_m_VRRayPointerData();
    // Get instance field reference: private readonly UnityEngine.EventSystems.PointerInputModule/UnityEngine.EventSystems.MouseState m_MouseState
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerInputModule::MouseState*& dyn_m_MouseState();
    // public UnityEngine.EventSystems.OVRInputModule/UnityEngine.EventSystems.InputMode get_inputMode()
    // Offset: 0x24B2448
    ::UnityEngine::EventSystems::OVRInputModule::InputMode get_inputMode();
    // public System.Boolean get_allowActivationOnMobileDevice()
    // Offset: 0x24B2450
    bool get_allowActivationOnMobileDevice();
    // public System.Void set_allowActivationOnMobileDevice(System.Boolean value)
    // Offset: 0x24B2458
    void set_allowActivationOnMobileDevice(bool value);
    // public System.Single get_inputActionsPerSecond()
    // Offset: 0x24B2464
    float get_inputActionsPerSecond();
    // public System.Void set_inputActionsPerSecond(System.Single value)
    // Offset: 0x24B246C
    void set_inputActionsPerSecond(float value);
    // public System.String get_horizontalAxis()
    // Offset: 0x24B2474
    ::StringW get_horizontalAxis();
    // public System.Void set_horizontalAxis(System.String value)
    // Offset: 0x24B247C
    void set_horizontalAxis(::StringW value);
    // public System.String get_verticalAxis()
    // Offset: 0x24B2484
    ::StringW get_verticalAxis();
    // public System.Void set_verticalAxis(System.String value)
    // Offset: 0x24B248C
    void set_verticalAxis(::StringW value);
    // public System.String get_submitButton()
    // Offset: 0x24B2494
    ::StringW get_submitButton();
    // public System.Void set_submitButton(System.String value)
    // Offset: 0x24B249C
    void set_submitButton(::StringW value);
    // public System.String get_cancelButton()
    // Offset: 0x24B24A4
    ::StringW get_cancelButton();
    // public System.Void set_cancelButton(System.String value)
    // Offset: 0x24B24AC
    void set_cancelButton(::StringW value);
    // protected System.Void .ctor()
    // Offset: 0x24B2338
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRInputModule* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::EventSystems::OVRInputModule::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRInputModule*, creationType>()));
    }
    // private System.Boolean SendSubmitEventToSelectedObject()
    // Offset: 0x24B2A74
    bool SendSubmitEventToSelectedObject();
    // private System.Boolean AllowMoveEventProcessing(System.Single time)
    // Offset: 0x24B2C84
    bool AllowMoveEventProcessing(float time);
    // private UnityEngine.Vector2 GetRawMoveVector()
    // Offset: 0x24B2CE4
    ::UnityEngine::Vector2 GetRawMoveVector();
    // private System.Boolean SendMoveEventToSelectedObject()
    // Offset: 0x24B2DCC
    bool SendMoveEventToSelectedObject();
    // private System.Boolean SendUpdateEventToSelectedObject()
    // Offset: 0x24B2FC4
    bool SendUpdateEventToSelectedObject();
    // private System.Void ProcessMousePress(UnityEngine.EventSystems.PointerInputModule/UnityEngine.EventSystems.MouseButtonEventData data)
    // Offset: 0x24B3118
    void ProcessMousePress(::UnityEngine::EventSystems::PointerInputModule::MouseButtonEventData* data);
    // private System.Void ProcessMouseEvent(UnityEngine.EventSystems.PointerInputModule/UnityEngine.EventSystems.MouseState mouseData)
    // Offset: 0x24B3934
    void ProcessMouseEvent(::UnityEngine::EventSystems::PointerInputModule::MouseState* mouseData);
    // static private System.Boolean UseMouse(System.Boolean pressed, System.Boolean released, UnityEngine.EventSystems.PointerEventData pointerData)
    // Offset: 0x24B3BD4
    static bool UseMouse(bool pressed, bool released, ::UnityEngine::EventSystems::PointerEventData* pointerData);
    // protected System.Void CopyFromTo(UnityEngine.EventSystems.OVRPointerEventData from, UnityEngine.EventSystems.OVRPointerEventData to)
    // Offset: 0x24B3CD8
    void CopyFromTo(::UnityEngine::EventSystems::OVRPointerEventData* from, ::UnityEngine::EventSystems::OVRPointerEventData* to);
    // protected System.Void CopyFromTo(UnityEngine.EventSystems.PointerEventData from, UnityEngine.EventSystems.PointerEventData to)
    // Offset: 0x24B3D44
    void CopyFromTo(::UnityEngine::EventSystems::PointerEventData* from, ::UnityEngine::EventSystems::PointerEventData* to);
    // protected System.Boolean GetPointerData(System.Int32 id, out UnityEngine.EventSystems.OVRPointerEventData data, System.Boolean create)
    // Offset: 0x24B3DA0
    bool GetPointerData(int id, ByRef<::UnityEngine::EventSystems::OVRPointerEventData*> data, bool create);
    // protected System.Void ClearSelection()
    // Offset: 0x24B2868
    void ClearSelection();
    // static private UnityEngine.Vector3 GetRectTransformNormal(UnityEngine.RectTransform rectTransform)
    // Offset: 0x24B3E8C
    static ::UnityEngine::Vector3 GetRectTransformNormal(::UnityEngine::RectTransform* rectTransform);
    // protected UnityEngine.EventSystems.PointerInputModule/UnityEngine.EventSystems.MouseState GetGazePointerData()
    // Offset: 0x24B400C
    ::UnityEngine::EventSystems::PointerInputModule::MouseState* GetGazePointerData();
    // protected UnityEngine.EventSystems.PointerInputModule/UnityEngine.EventSystems.MouseState GetCanvasPointerData()
    // Offset: 0x24B4B68
    ::UnityEngine::EventSystems::PointerInputModule::MouseState* GetCanvasPointerData();
    // private System.Boolean ShouldStartDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x24B4F48
    bool ShouldStartDrag(::UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // static private System.Boolean IsPointerMoving(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x24B3C94
    static bool IsPointerMoving(::UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // protected UnityEngine.Vector2 SwipeAdjustedPosition(UnityEngine.Vector2 originalPosition, UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x24B52CC
    ::UnityEngine::Vector2 SwipeAdjustedPosition(::UnityEngine::Vector2 originalPosition, ::UnityEngine::EventSystems::PointerEventData* pointerEvent);
    // protected UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.FramePressState GetGazeButtonState()
    // Offset: 0x24B5758
    ::UnityEngine::EventSystems::PointerEventData::FramePressState GetGazeButtonState();
    // protected UnityEngine.Vector2 GetExtraScrollDelta()
    // Offset: 0x24B4610
    ::UnityEngine::Vector2 GetExtraScrollDelta();
    // public override System.Void UpdateModule()
    // Offset: 0x24B24B4
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::UpdateModule()
    void UpdateModule();
    // public override System.Boolean IsModuleSupported()
    // Offset: 0x24B2558
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Boolean BaseInputModule::IsModuleSupported()
    bool IsModuleSupported();
    // public override System.Boolean ShouldActivateModule()
    // Offset: 0x24B2570
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Boolean BaseInputModule::ShouldActivateModule()
    bool ShouldActivateModule();
    // public override System.Void ActivateModule()
    // Offset: 0x24B2704
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::ActivateModule()
    void ActivateModule();
    // public override System.Void DeactivateModule()
    // Offset: 0x24B2840
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::DeactivateModule()
    void DeactivateModule();
    // public override System.Void Process()
    // Offset: 0x24B3C24
    // Implemented from: UnityEngine.EventSystems.BaseInputModule
    // Base method: System.Void BaseInputModule::Process()
    void Process();
    // protected override System.Void ProcessDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    // Offset: 0x24B541C
    // Implemented from: UnityEngine.EventSystems.PointerInputModule
    // Base method: System.Void PointerInputModule::ProcessDrag(UnityEngine.EventSystems.PointerEventData pointerEvent)
    void ProcessDrag(::UnityEngine::EventSystems::PointerEventData* pointerEvent);
  }; // UnityEngine.EventSystems.OVRInputModule
  #pragma pack(pop)
  static check_size<sizeof(OVRInputModule), 224 + sizeof(::UnityEngine::EventSystems::PointerInputModule::MouseState*)> __UnityEngine_EventSystems_OVRInputModuleSizeCheck;
  static_assert(sizeof(OVRInputModule) == 0xE8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_inputMode
// Il2CppName: get_inputMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::OVRInputModule::InputMode (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_inputMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_inputMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_allowActivationOnMobileDevice
// Il2CppName: get_allowActivationOnMobileDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_allowActivationOnMobileDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_allowActivationOnMobileDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::set_allowActivationOnMobileDevice
// Il2CppName: set_allowActivationOnMobileDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(bool)>(&UnityEngine::EventSystems::OVRInputModule::set_allowActivationOnMobileDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "set_allowActivationOnMobileDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_inputActionsPerSecond
// Il2CppName: get_inputActionsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_inputActionsPerSecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_inputActionsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::set_inputActionsPerSecond
// Il2CppName: set_inputActionsPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(float)>(&UnityEngine::EventSystems::OVRInputModule::set_inputActionsPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "set_inputActionsPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_horizontalAxis
// Il2CppName: get_horizontalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_horizontalAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_horizontalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::set_horizontalAxis
// Il2CppName: set_horizontalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::StringW)>(&UnityEngine::EventSystems::OVRInputModule::set_horizontalAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "set_horizontalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_verticalAxis
// Il2CppName: get_verticalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_verticalAxis)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_verticalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::set_verticalAxis
// Il2CppName: set_verticalAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::StringW)>(&UnityEngine::EventSystems::OVRInputModule::set_verticalAxis)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "set_verticalAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_submitButton
// Il2CppName: get_submitButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_submitButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_submitButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::set_submitButton
// Il2CppName: set_submitButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::StringW)>(&UnityEngine::EventSystems::OVRInputModule::set_submitButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "set_submitButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::get_cancelButton
// Il2CppName: get_cancelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::get_cancelButton)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "get_cancelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::set_cancelButton
// Il2CppName: set_cancelButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::StringW)>(&UnityEngine::EventSystems::OVRInputModule::set_cancelButton)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "set_cancelButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::SendSubmitEventToSelectedObject
// Il2CppName: SendSubmitEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::SendSubmitEventToSelectedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "SendSubmitEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::AllowMoveEventProcessing
// Il2CppName: AllowMoveEventProcessing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)(float)>(&UnityEngine::EventSystems::OVRInputModule::AllowMoveEventProcessing)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "AllowMoveEventProcessing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetRawMoveVector
// Il2CppName: GetRawMoveVector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::GetRawMoveVector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetRawMoveVector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::SendMoveEventToSelectedObject
// Il2CppName: SendMoveEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::SendMoveEventToSelectedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "SendMoveEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::SendUpdateEventToSelectedObject
// Il2CppName: SendUpdateEventToSelectedObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::SendUpdateEventToSelectedObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "SendUpdateEventToSelectedObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ProcessMousePress
// Il2CppName: ProcessMousePress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::EventSystems::PointerInputModule::MouseButtonEventData*)>(&UnityEngine::EventSystems::OVRInputModule::ProcessMousePress)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerInputModule/MouseButtonEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ProcessMousePress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ProcessMouseEvent
// Il2CppName: ProcessMouseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::EventSystems::PointerInputModule::MouseState*)>(&UnityEngine::EventSystems::OVRInputModule::ProcessMouseEvent)> {
  static const MethodInfo* get() {
    static auto* mouseData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerInputModule/MouseState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ProcessMouseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mouseData});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::UseMouse
// Il2CppName: UseMouse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool, ::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::UseMouse)> {
  static const MethodInfo* get() {
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* released = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pointerData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "UseMouse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressed, released, pointerData});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::CopyFromTo
// Il2CppName: CopyFromTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::EventSystems::OVRPointerEventData*, ::UnityEngine::EventSystems::OVRPointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::CopyFromTo)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "OVRPointerEventData")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "OVRPointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "CopyFromTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::CopyFromTo
// Il2CppName: CopyFromTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::EventSystems::PointerEventData*, ::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::CopyFromTo)> {
  static const MethodInfo* get() {
    static auto* from = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "CopyFromTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{from, to});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetPointerData
// Il2CppName: GetPointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)(int, ByRef<::UnityEngine::EventSystems::OVRPointerEventData*>, bool)>(&UnityEngine::EventSystems::OVRInputModule::GetPointerData)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* data = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "OVRPointerEventData")->this_arg;
    static auto* create = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetPointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, data, create});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::ClearSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetRectTransformNormal
// Il2CppName: GetRectTransformNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::RectTransform*)>(&UnityEngine::EventSystems::OVRInputModule::GetRectTransformNormal)> {
  static const MethodInfo* get() {
    static auto* rectTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetRectTransformNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rectTransform});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetGazePointerData
// Il2CppName: GetGazePointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::PointerInputModule::MouseState* (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::GetGazePointerData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetGazePointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetCanvasPointerData
// Il2CppName: GetCanvasPointerData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::PointerInputModule::MouseState* (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::GetCanvasPointerData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetCanvasPointerData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ShouldStartDrag
// Il2CppName: ShouldStartDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::ShouldStartDrag)> {
  static const MethodInfo* get() {
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ShouldStartDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::IsPointerMoving
// Il2CppName: IsPointerMoving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::IsPointerMoving)> {
  static const MethodInfo* get() {
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "IsPointerMoving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::SwipeAdjustedPosition
// Il2CppName: SwipeAdjustedPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::Vector2, ::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::SwipeAdjustedPosition)> {
  static const MethodInfo* get() {
    static auto* originalPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "SwipeAdjustedPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalPosition, pointerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetGazeButtonState
// Il2CppName: GetGazeButtonState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::PointerEventData::FramePressState (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::GetGazeButtonState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetGazeButtonState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::GetExtraScrollDelta
// Il2CppName: GetExtraScrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::GetExtraScrollDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "GetExtraScrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::UpdateModule
// Il2CppName: UpdateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::UpdateModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "UpdateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::IsModuleSupported
// Il2CppName: IsModuleSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::IsModuleSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "IsModuleSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ShouldActivateModule
// Il2CppName: ShouldActivateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::ShouldActivateModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ShouldActivateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ActivateModule
// Il2CppName: ActivateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::ActivateModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ActivateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::DeactivateModule
// Il2CppName: DeactivateModule
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::DeactivateModule)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "DeactivateModule", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)()>(&UnityEngine::EventSystems::OVRInputModule::Process)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::OVRInputModule::ProcessDrag
// Il2CppName: ProcessDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::OVRInputModule::*)(::UnityEngine::EventSystems::PointerEventData*)>(&UnityEngine::EventSystems::OVRInputModule::ProcessDrag)> {
  static const MethodInfo* get() {
    static auto* pointerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::OVRInputModule*), "ProcessDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerEvent});
  }
};
