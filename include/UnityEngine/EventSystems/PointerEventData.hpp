// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.EventSystems.BaseEventData
#include "UnityEngine/EventSystems/BaseEventData.hpp"
// Including type: UnityEngine.EventSystems.RaycastResult
#include "UnityEngine/EventSystems/RaycastResult.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Skipping declaration: InputButton because it is already included!
  // Forward declaring type: EventSystem
  class EventSystem;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::EventSystems::PointerEventData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::EventSystems::PointerEventData*, "UnityEngine.EventSystems", "PointerEventData");
// Type namespace: UnityEngine.EventSystems
namespace UnityEngine::EventSystems {
  // Size: 0x130
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.EventSystems.PointerEventData
  // [TokenAttribute] Offset: FFFFFFFF
  class PointerEventData : public ::UnityEngine::EventSystems::BaseEventData {
    public:
    // Nested type: ::UnityEngine::EventSystems::PointerEventData::InputButton
    struct InputButton;
    // Nested type: ::UnityEngine::EventSystems::PointerEventData::FramePressState
    struct FramePressState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputButton/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputButton
      constexpr InputButton(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Left
      static constexpr const int Left = 0;
      // Get static field: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Left
      static ::UnityEngine::EventSystems::PointerEventData::InputButton _get_Left();
      // Set static field: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Left
      static void _set_Left(::UnityEngine::EventSystems::PointerEventData::InputButton value);
      // static field const value: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Right
      static constexpr const int Right = 1;
      // Get static field: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Right
      static ::UnityEngine::EventSystems::PointerEventData::InputButton _get_Right();
      // Set static field: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Right
      static void _set_Right(::UnityEngine::EventSystems::PointerEventData::InputButton value);
      // static field const value: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Middle
      static constexpr const int Middle = 2;
      // Get static field: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Middle
      static ::UnityEngine::EventSystems::PointerEventData::InputButton _get_Middle();
      // Set static field: static public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton Middle
      static void _set_Middle(::UnityEngine::EventSystems::PointerEventData::InputButton value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton
    #pragma pack(pop)
    static check_size<sizeof(PointerEventData::InputButton), 0 + sizeof(int)> __UnityEngine_EventSystems_PointerEventData_InputButtonSizeCheck;
    static_assert(sizeof(PointerEventData::InputButton) == 0x4);
    public:
    // private UnityEngine.GameObject <pointerEnter>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* pointerEnter;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject m_PointerPress
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* m_PointerPress;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject <lastPress>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* lastPress;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject <rawPointerPress>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* rawPointerPress;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject <pointerDrag>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* pointerDrag;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.EventSystems.RaycastResult <pointerCurrentRaycast>k__BackingField
    // Size: 0x48
    // Offset: 0x48
    ::UnityEngine::EventSystems::RaycastResult pointerCurrentRaycast;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x48);
    // private UnityEngine.EventSystems.RaycastResult <pointerPressRaycast>k__BackingField
    // Size: 0x48
    // Offset: 0x90
    ::UnityEngine::EventSystems::RaycastResult pointerPressRaycast;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::RaycastResult) == 0x48);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> hovered
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* hovered;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Boolean <eligibleForClick>k__BackingField
    // Size: 0x1
    // Offset: 0xE0
    bool eligibleForClick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: eligibleForClick and: pointerId
    char __padding8[0x3] = {};
    // private System.Int32 <pointerId>k__BackingField
    // Size: 0x4
    // Offset: 0xE4
    int pointerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector2 <position>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Vector2 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 <delta>k__BackingField
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Vector2 delta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 <pressPosition>k__BackingField
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Vector2 pressPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector3 <worldPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x100
    ::UnityEngine::Vector3 worldPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 <worldNormal>k__BackingField
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 worldNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <clickTime>k__BackingField
    // Size: 0x4
    // Offset: 0x118
    float clickTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <clickCount>k__BackingField
    // Size: 0x4
    // Offset: 0x11C
    int clickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector2 <scrollDelta>k__BackingField
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::Vector2 scrollDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Boolean <useDragThreshold>k__BackingField
    // Size: 0x1
    // Offset: 0x128
    bool useDragThreshold;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <dragging>k__BackingField
    // Size: 0x1
    // Offset: 0x129
    bool dragging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dragging and: button
    char __padding19[0x2] = {};
    // private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton <button>k__BackingField
    // Size: 0x4
    // Offset: 0x12C
    ::UnityEngine::EventSystems::PointerEventData::InputButton button;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::PointerEventData::InputButton) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.GameObject <pointerEnter>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pointerEnter$k__BackingField();
    // Get instance field reference: private UnityEngine.GameObject m_PointerPress
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_PointerPress();
    // Get instance field reference: private UnityEngine.GameObject <lastPress>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$lastPress$k__BackingField();
    // Get instance field reference: private UnityEngine.GameObject <rawPointerPress>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$rawPointerPress$k__BackingField();
    // Get instance field reference: private UnityEngine.GameObject <pointerDrag>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_$pointerDrag$k__BackingField();
    // Get instance field reference: private UnityEngine.EventSystems.RaycastResult <pointerCurrentRaycast>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_$pointerCurrentRaycast$k__BackingField();
    // Get instance field reference: private UnityEngine.EventSystems.RaycastResult <pointerPressRaycast>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::RaycastResult& dyn_$pointerPressRaycast$k__BackingField();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.GameObject> hovered
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_hovered();
    // Get instance field reference: private System.Boolean <eligibleForClick>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$eligibleForClick$k__BackingField();
    // Get instance field reference: private System.Int32 <pointerId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pointerId$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <position>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$position$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <delta>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$delta$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <pressPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$pressPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <worldPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$worldPosition$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 <worldNormal>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$worldNormal$k__BackingField();
    // Get instance field reference: private System.Single <clickTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$clickTime$k__BackingField();
    // Get instance field reference: private System.Int32 <clickCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$clickCount$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <scrollDelta>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$scrollDelta$k__BackingField();
    // Get instance field reference: private System.Boolean <useDragThreshold>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useDragThreshold$k__BackingField();
    // Get instance field reference: private System.Boolean <dragging>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$dragging$k__BackingField();
    // Get instance field reference: private UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton <button>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::PointerEventData::InputButton& dyn_$button$k__BackingField();
    // public UnityEngine.GameObject get_pointerEnter()
    // Offset: 0x193655C
    ::UnityEngine::GameObject* get_pointerEnter();
    // public System.Void set_pointerEnter(UnityEngine.GameObject value)
    // Offset: 0x1936564
    void set_pointerEnter(::UnityEngine::GameObject* value);
    // public UnityEngine.GameObject get_lastPress()
    // Offset: 0x193656C
    ::UnityEngine::GameObject* get_lastPress();
    // private System.Void set_lastPress(UnityEngine.GameObject value)
    // Offset: 0x1936574
    void set_lastPress(::UnityEngine::GameObject* value);
    // public UnityEngine.GameObject get_rawPointerPress()
    // Offset: 0x193657C
    ::UnityEngine::GameObject* get_rawPointerPress();
    // public System.Void set_rawPointerPress(UnityEngine.GameObject value)
    // Offset: 0x1936584
    void set_rawPointerPress(::UnityEngine::GameObject* value);
    // public UnityEngine.GameObject get_pointerDrag()
    // Offset: 0x193658C
    ::UnityEngine::GameObject* get_pointerDrag();
    // public System.Void set_pointerDrag(UnityEngine.GameObject value)
    // Offset: 0x1936594
    void set_pointerDrag(::UnityEngine::GameObject* value);
    // public UnityEngine.EventSystems.RaycastResult get_pointerCurrentRaycast()
    // Offset: 0x193659C
    ::UnityEngine::EventSystems::RaycastResult get_pointerCurrentRaycast();
    // public System.Void set_pointerCurrentRaycast(UnityEngine.EventSystems.RaycastResult value)
    // Offset: 0x19365AC
    void set_pointerCurrentRaycast(::UnityEngine::EventSystems::RaycastResult value);
    // public UnityEngine.EventSystems.RaycastResult get_pointerPressRaycast()
    // Offset: 0x19365C8
    ::UnityEngine::EventSystems::RaycastResult get_pointerPressRaycast();
    // public System.Void set_pointerPressRaycast(UnityEngine.EventSystems.RaycastResult value)
    // Offset: 0x19365D8
    void set_pointerPressRaycast(::UnityEngine::EventSystems::RaycastResult value);
    // public System.Boolean get_eligibleForClick()
    // Offset: 0x19365F4
    bool get_eligibleForClick();
    // public System.Void set_eligibleForClick(System.Boolean value)
    // Offset: 0x19365FC
    void set_eligibleForClick(bool value);
    // public System.Int32 get_pointerId()
    // Offset: 0x1936608
    int get_pointerId();
    // public System.Void set_pointerId(System.Int32 value)
    // Offset: 0x1936610
    void set_pointerId(int value);
    // public UnityEngine.Vector2 get_position()
    // Offset: 0x1936618
    ::UnityEngine::Vector2 get_position();
    // public System.Void set_position(UnityEngine.Vector2 value)
    // Offset: 0x1936620
    void set_position(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_delta()
    // Offset: 0x1936628
    ::UnityEngine::Vector2 get_delta();
    // public System.Void set_delta(UnityEngine.Vector2 value)
    // Offset: 0x1936630
    void set_delta(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector2 get_pressPosition()
    // Offset: 0x1936638
    ::UnityEngine::Vector2 get_pressPosition();
    // public System.Void set_pressPosition(UnityEngine.Vector2 value)
    // Offset: 0x1936640
    void set_pressPosition(::UnityEngine::Vector2 value);
    // public UnityEngine.Vector3 get_worldPosition()
    // Offset: 0x1936648
    ::UnityEngine::Vector3 get_worldPosition();
    // public System.Void set_worldPosition(UnityEngine.Vector3 value)
    // Offset: 0x1936658
    void set_worldPosition(::UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_worldNormal()
    // Offset: 0x1936668
    ::UnityEngine::Vector3 get_worldNormal();
    // public System.Void set_worldNormal(UnityEngine.Vector3 value)
    // Offset: 0x1936678
    void set_worldNormal(::UnityEngine::Vector3 value);
    // public System.Single get_clickTime()
    // Offset: 0x1936688
    float get_clickTime();
    // public System.Void set_clickTime(System.Single value)
    // Offset: 0x1936690
    void set_clickTime(float value);
    // public System.Int32 get_clickCount()
    // Offset: 0x1936698
    int get_clickCount();
    // public System.Void set_clickCount(System.Int32 value)
    // Offset: 0x19366A0
    void set_clickCount(int value);
    // public UnityEngine.Vector2 get_scrollDelta()
    // Offset: 0x19366A8
    ::UnityEngine::Vector2 get_scrollDelta();
    // public System.Void set_scrollDelta(UnityEngine.Vector2 value)
    // Offset: 0x19366B4
    void set_scrollDelta(::UnityEngine::Vector2 value);
    // public System.Boolean get_useDragThreshold()
    // Offset: 0x19366C0
    bool get_useDragThreshold();
    // public System.Void set_useDragThreshold(System.Boolean value)
    // Offset: 0x19366C8
    void set_useDragThreshold(bool value);
    // public System.Boolean get_dragging()
    // Offset: 0x19366D4
    bool get_dragging();
    // public System.Void set_dragging(System.Boolean value)
    // Offset: 0x19366DC
    void set_dragging(bool value);
    // public UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton get_button()
    // Offset: 0x19366E8
    ::UnityEngine::EventSystems::PointerEventData::InputButton get_button();
    // public System.Void set_button(UnityEngine.EventSystems.PointerEventData/UnityEngine.EventSystems.InputButton value)
    // Offset: 0x19366F0
    void set_button(::UnityEngine::EventSystems::PointerEventData::InputButton value);
    // public UnityEngine.Camera get_enterEventCamera()
    // Offset: 0x1936854
    ::UnityEngine::Camera* get_enterEventCamera();
    // public UnityEngine.Camera get_pressEventCamera()
    // Offset: 0x19368F4
    ::UnityEngine::Camera* get_pressEventCamera();
    // public UnityEngine.GameObject get_pointerPress()
    // Offset: 0x1936994
    ::UnityEngine::GameObject* get_pointerPress();
    // public System.Void set_pointerPress(UnityEngine.GameObject value)
    // Offset: 0x193699C
    void set_pointerPress(::UnityEngine::GameObject* value);
    // public System.Boolean IsPointerMoving()
    // Offset: 0x19367EC
    bool IsPointerMoving();
    // public System.Boolean IsScrolling()
    // Offset: 0x1936820
    bool IsScrolling();
    // public System.Void .ctor(UnityEngine.EventSystems.EventSystem eventSystem)
    // Offset: 0x19366F8
    // Implemented from: UnityEngine.EventSystems.BaseEventData
    // Base method: System.Void BaseEventData::.ctor(UnityEngine.EventSystems.EventSystem eventSystem)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointerEventData* New_ctor(::UnityEngine::EventSystems::EventSystem* eventSystem) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::EventSystems::PointerEventData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointerEventData*, creationType>(eventSystem)));
    }
    // public override System.String ToString()
    // Offset: 0x1936A28
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.EventSystems.PointerEventData
  #pragma pack(pop)
  static check_size<sizeof(PointerEventData), 300 + sizeof(::UnityEngine::EventSystems::PointerEventData::InputButton)> __UnityEngine_EventSystems_PointerEventDataSizeCheck;
  static_assert(sizeof(PointerEventData) == 0x130);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::EventSystems::PointerEventData::InputButton, "UnityEngine.EventSystems", "PointerEventData/InputButton");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pointerEnter
// Il2CppName: get_pointerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pointerEnter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pointerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pointerEnter
// Il2CppName: set_pointerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::GameObject*)>(&UnityEngine::EventSystems::PointerEventData::set_pointerEnter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pointerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_lastPress
// Il2CppName: get_lastPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_lastPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_lastPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_lastPress
// Il2CppName: set_lastPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::GameObject*)>(&UnityEngine::EventSystems::PointerEventData::set_lastPress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_lastPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_rawPointerPress
// Il2CppName: get_rawPointerPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_rawPointerPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_rawPointerPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_rawPointerPress
// Il2CppName: set_rawPointerPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::GameObject*)>(&UnityEngine::EventSystems::PointerEventData::set_rawPointerPress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_rawPointerPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pointerDrag
// Il2CppName: get_pointerDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pointerDrag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pointerDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pointerDrag
// Il2CppName: set_pointerDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::GameObject*)>(&UnityEngine::EventSystems::PointerEventData::set_pointerDrag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pointerDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pointerCurrentRaycast
// Il2CppName: get_pointerCurrentRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::RaycastResult (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pointerCurrentRaycast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pointerCurrentRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pointerCurrentRaycast
// Il2CppName: set_pointerCurrentRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::EventSystems::RaycastResult)>(&UnityEngine::EventSystems::PointerEventData::set_pointerCurrentRaycast)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pointerCurrentRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pointerPressRaycast
// Il2CppName: get_pointerPressRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::RaycastResult (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pointerPressRaycast)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pointerPressRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pointerPressRaycast
// Il2CppName: set_pointerPressRaycast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::EventSystems::RaycastResult)>(&UnityEngine::EventSystems::PointerEventData::set_pointerPressRaycast)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "RaycastResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pointerPressRaycast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_eligibleForClick
// Il2CppName: get_eligibleForClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_eligibleForClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_eligibleForClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_eligibleForClick
// Il2CppName: set_eligibleForClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(bool)>(&UnityEngine::EventSystems::PointerEventData::set_eligibleForClick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_eligibleForClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pointerId
// Il2CppName: get_pointerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pointerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pointerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pointerId
// Il2CppName: set_pointerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(int)>(&UnityEngine::EventSystems::PointerEventData::set_pointerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pointerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::Vector2)>(&UnityEngine::EventSystems::PointerEventData::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_delta
// Il2CppName: get_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_delta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_delta
// Il2CppName: set_delta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::Vector2)>(&UnityEngine::EventSystems::PointerEventData::set_delta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_delta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pressPosition
// Il2CppName: get_pressPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pressPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pressPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pressPosition
// Il2CppName: set_pressPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::Vector2)>(&UnityEngine::EventSystems::PointerEventData::set_pressPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pressPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_worldPosition
// Il2CppName: get_worldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_worldPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_worldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_worldPosition
// Il2CppName: set_worldPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::Vector3)>(&UnityEngine::EventSystems::PointerEventData::set_worldPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_worldPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_worldNormal
// Il2CppName: get_worldNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_worldNormal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_worldNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_worldNormal
// Il2CppName: set_worldNormal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::Vector3)>(&UnityEngine::EventSystems::PointerEventData::set_worldNormal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_worldNormal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_clickTime
// Il2CppName: get_clickTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_clickTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_clickTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_clickTime
// Il2CppName: set_clickTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(float)>(&UnityEngine::EventSystems::PointerEventData::set_clickTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_clickTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_clickCount
// Il2CppName: get_clickCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_clickCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_clickCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_clickCount
// Il2CppName: set_clickCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(int)>(&UnityEngine::EventSystems::PointerEventData::set_clickCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_clickCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_scrollDelta
// Il2CppName: get_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_scrollDelta)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_scrollDelta
// Il2CppName: set_scrollDelta
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::Vector2)>(&UnityEngine::EventSystems::PointerEventData::set_scrollDelta)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_scrollDelta", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_useDragThreshold
// Il2CppName: get_useDragThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_useDragThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_useDragThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_useDragThreshold
// Il2CppName: set_useDragThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(bool)>(&UnityEngine::EventSystems::PointerEventData::set_useDragThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_useDragThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_dragging
// Il2CppName: get_dragging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_dragging)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_dragging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_dragging
// Il2CppName: set_dragging
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(bool)>(&UnityEngine::EventSystems::PointerEventData::set_dragging)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_dragging", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_button
// Il2CppName: get_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::PointerEventData::InputButton (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_button)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_button
// Il2CppName: set_button
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::EventSystems::PointerEventData::InputButton)>(&UnityEngine::EventSystems::PointerEventData::set_button)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData/InputButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_button", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_enterEventCamera
// Il2CppName: get_enterEventCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_enterEventCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_enterEventCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pressEventCamera
// Il2CppName: get_pressEventCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pressEventCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pressEventCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::get_pointerPress
// Il2CppName: get_pointerPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::get_pointerPress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "get_pointerPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::set_pointerPress
// Il2CppName: set_pointerPress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::EventSystems::PointerEventData::*)(::UnityEngine::GameObject*)>(&UnityEngine::EventSystems::PointerEventData::set_pointerPress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "set_pointerPress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::IsPointerMoving
// Il2CppName: IsPointerMoving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::IsPointerMoving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "IsPointerMoving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::IsScrolling
// Il2CppName: IsScrolling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::IsScrolling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "IsScrolling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::EventSystems::PointerEventData::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::EventSystems::PointerEventData::*)()>(&UnityEngine::EventSystems::PointerEventData::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::EventSystems::PointerEventData*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
