// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TestTools.EnumerableTestMethodCommand
#include "UnityEngine/TestTools/EnumerableTestMethodCommand.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Internal
namespace NUnit::Framework::Internal {
  // Forward declaring type: ITestExecutionContext
  class ITestExecutionContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext*, "UnityEngine.TestTools", "EnumerableTestMethodCommand/EnumeratorContext");
// Type namespace: UnityEngine.TestTools
namespace UnityEngine::TestTools {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TestTools.EnumerableTestMethodCommand/UnityEngine.TestTools.EnumeratorContext
  // [TokenAttribute] Offset: FFFFFFFF
  class EnumerableTestMethodCommand::EnumeratorContext : public ::Il2CppObject {
    public:
    public:
    // private readonly NUnit.Framework.Internal.ITestExecutionContext m_Context
    // Size: 0x8
    // Offset: 0x10
    ::NUnit::Framework::Internal::ITestExecutionContext* m_Context;
    // Field size check
    static_assert(sizeof(::NUnit::Framework::Internal::ITestExecutionContext*) == 0x8);
    // private System.Boolean <ExceptionWasRecorded>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool ExceptionWasRecorded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly NUnit.Framework.Internal.ITestExecutionContext m_Context
    [[deprecated("Use field access instead!")]] ::NUnit::Framework::Internal::ITestExecutionContext*& dyn_m_Context();
    // Get instance field reference: private System.Boolean <ExceptionWasRecorded>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$ExceptionWasRecorded$k__BackingField();
    // public System.Boolean get_ExceptionWasRecorded()
    // Offset: 0x19AE698
    bool get_ExceptionWasRecorded();
    // private System.Void set_ExceptionWasRecorded(System.Boolean value)
    // Offset: 0x19AE6A0
    void set_ExceptionWasRecorded(bool value);
    // public System.Void .ctor(NUnit.Framework.Internal.ITestExecutionContext context)
    // Offset: 0x19AE164
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnumerableTestMethodCommand::EnumeratorContext* New_ctor(::NUnit::Framework::Internal::ITestExecutionContext* context) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnumerableTestMethodCommand::EnumeratorContext*, creationType>(context)));
    }
    // public System.Void RecordExceptionWithHint(System.Exception ex)
    // Offset: 0x19AE548
    void RecordExceptionWithHint(::System::Exception* ex);
  }; // UnityEngine.TestTools.EnumerableTestMethodCommand/UnityEngine.TestTools.EnumeratorContext
  #pragma pack(pop)
  static check_size<sizeof(EnumerableTestMethodCommand::EnumeratorContext), 24 + sizeof(bool)> __UnityEngine_TestTools_EnumerableTestMethodCommand_EnumeratorContextSizeCheck;
  static_assert(sizeof(EnumerableTestMethodCommand::EnumeratorContext) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::get_ExceptionWasRecorded
// Il2CppName: get_ExceptionWasRecorded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::*)()>(&UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::get_ExceptionWasRecorded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext*), "get_ExceptionWasRecorded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::set_ExceptionWasRecorded
// Il2CppName: set_ExceptionWasRecorded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::*)(bool)>(&UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::set_ExceptionWasRecorded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext*), "set_ExceptionWasRecorded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::RecordExceptionWithHint
// Il2CppName: RecordExceptionWithHint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::*)(::System::Exception*)>(&UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext::RecordExceptionWithHint)> {
  static const MethodInfo* get() {
    static auto* ex = &::il2cpp_utils::GetClassFromName("System", "Exception")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::EnumerableTestMethodCommand::EnumeratorContext*), "RecordExceptionWithHint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ex});
  }
};
