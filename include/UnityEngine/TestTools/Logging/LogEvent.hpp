// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.LogType
#include "UnityEngine/LogType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: UnityEngine.TestTools.Logging
namespace UnityEngine::TestTools::Logging {
  // Forward declaring type: LogEvent
  class LogEvent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TestTools::Logging::LogEvent);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TestTools::Logging::LogEvent*, "UnityEngine.TestTools.Logging", "LogEvent");
// Type namespace: UnityEngine.TestTools.Logging
namespace UnityEngine::TestTools::Logging {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TestTools.Logging.LogEvent
  // [TokenAttribute] Offset: FFFFFFFF
  class LogEvent : public ::Il2CppObject {
    public:
    public:
    // private System.String <Message>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <StackTrace>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW StackTrace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.LogType <LogType>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::UnityEngine::LogType LogType;
    // Field size check
    static_assert(sizeof(::UnityEngine::LogType) == 0x4);
    // private System.Boolean <IsHandled>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    bool IsHandled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.String <Message>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Message$k__BackingField();
    // Get instance field reference: private System.String <StackTrace>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$StackTrace$k__BackingField();
    // Get instance field reference: private UnityEngine.LogType <LogType>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::LogType& dyn_$LogType$k__BackingField();
    // Get instance field reference: private System.Boolean <IsHandled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsHandled$k__BackingField();
    // public System.String get_Message()
    // Offset: 0x19AEA94
    ::StringW get_Message();
    // public System.Void set_Message(System.String value)
    // Offset: 0x19AEA9C
    void set_Message(::StringW value);
    // public System.String get_StackTrace()
    // Offset: 0x19AEAA4
    ::StringW get_StackTrace();
    // public System.Void set_StackTrace(System.String value)
    // Offset: 0x19AEAAC
    void set_StackTrace(::StringW value);
    // public UnityEngine.LogType get_LogType()
    // Offset: 0x19AEAB4
    ::UnityEngine::LogType get_LogType();
    // public System.Void set_LogType(UnityEngine.LogType value)
    // Offset: 0x19AEABC
    void set_LogType(::UnityEngine::LogType value);
    // public System.Boolean get_IsHandled()
    // Offset: 0x19AEAC4
    bool get_IsHandled();
    // public System.Void set_IsHandled(System.Boolean value)
    // Offset: 0x19AEACC
    void set_IsHandled(bool value);
    // public System.Void .ctor()
    // Offset: 0x19AEB5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LogEvent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TestTools::Logging::LogEvent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LogEvent*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x19AEAD8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.TestTools.Logging.LogEvent
  #pragma pack(pop)
  static check_size<sizeof(LogEvent), 36 + sizeof(bool)> __UnityEngine_TestTools_Logging_LogEventSizeCheck;
  static_assert(sizeof(LogEvent) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::get_Message
// Il2CppName: get_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::TestTools::Logging::LogEvent::*)()>(&UnityEngine::TestTools::Logging::LogEvent::get_Message)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "get_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::set_Message
// Il2CppName: set_Message
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TestTools::Logging::LogEvent::*)(::StringW)>(&UnityEngine::TestTools::Logging::LogEvent::set_Message)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "set_Message", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::get_StackTrace
// Il2CppName: get_StackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::TestTools::Logging::LogEvent::*)()>(&UnityEngine::TestTools::Logging::LogEvent::get_StackTrace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "get_StackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::set_StackTrace
// Il2CppName: set_StackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TestTools::Logging::LogEvent::*)(::StringW)>(&UnityEngine::TestTools::Logging::LogEvent::set_StackTrace)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "set_StackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::get_LogType
// Il2CppName: get_LogType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LogType (UnityEngine::TestTools::Logging::LogEvent::*)()>(&UnityEngine::TestTools::Logging::LogEvent::get_LogType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "get_LogType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::set_LogType
// Il2CppName: set_LogType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TestTools::Logging::LogEvent::*)(::UnityEngine::LogType)>(&UnityEngine::TestTools::Logging::LogEvent::set_LogType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "set_LogType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::get_IsHandled
// Il2CppName: get_IsHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::TestTools::Logging::LogEvent::*)()>(&UnityEngine::TestTools::Logging::LogEvent::get_IsHandled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "get_IsHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::set_IsHandled
// Il2CppName: set_IsHandled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::TestTools::Logging::LogEvent::*)(bool)>(&UnityEngine::TestTools::Logging::LogEvent::set_IsHandled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "set_IsHandled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TestTools::Logging::LogEvent::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::TestTools::Logging::LogEvent::*)()>(&UnityEngine::TestTools::Logging::LogEvent::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestTools::Logging::LogEvent*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
