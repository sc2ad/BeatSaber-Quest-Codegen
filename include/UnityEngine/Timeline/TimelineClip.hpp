// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Timeline.ICurvesOwner
#include "UnityEngine/Timeline/ICurvesOwner.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Timeline.ClipCaps
#include "UnityEngine/Timeline/ClipCaps.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Skipping declaration: BlendCurveMode because it is already included!
  // Forward declaring type: TrackAsset
  class TrackAsset;
  // Skipping declaration: ClipExtrapolation because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: TimelineClip
  class TimelineClip;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::Timeline::TimelineClip);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Timeline::TimelineClip*, "UnityEngine.Timeline", "TimelineClip");
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.TimelineClip
  // [TokenAttribute] Offset: FFFFFFFF
  class TimelineClip : public ::Il2CppObject/*, public ::UnityEngine::ISerializationCallbackReceiver, public ::UnityEngine::Timeline::ICurvesOwner*/ {
    public:
    // Nested type: ::UnityEngine::Timeline::TimelineClip::Versions
    struct Versions;
    // Nested type: ::UnityEngine::Timeline::TimelineClip::TimelineClipUpgrade
    class TimelineClipUpgrade;
    // Nested type: ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation
    struct ClipExtrapolation;
    // Nested type: ::UnityEngine::Timeline::TimelineClip::BlendCurveMode
    struct BlendCurveMode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation
    // [TokenAttribute] Offset: FFFFFFFF
    struct ClipExtrapolation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ClipExtrapolation
      constexpr ClipExtrapolation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation None
      static ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_None();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation None
      static void _set_None(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Hold
      static constexpr const int Hold = 1;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Hold
      static ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_Hold();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Hold
      static void _set_Hold(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Loop
      static constexpr const int Loop = 2;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Loop
      static ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_Loop();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Loop
      static void _set_Loop(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation PingPong
      static constexpr const int PingPong = 3;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation PingPong
      static ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_PingPong();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation PingPong
      static void _set_PingPong(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Continue
      static constexpr const int Continue = 4;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Continue
      static ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation _get_Continue();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation Continue
      static void _set_Continue(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation
    #pragma pack(pop)
    static check_size<sizeof(TimelineClip::ClipExtrapolation), 0 + sizeof(int)> __UnityEngine_Timeline_TimelineClip_ClipExtrapolationSizeCheck;
    static_assert(sizeof(TimelineClip::ClipExtrapolation) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct BlendCurveMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BlendCurveMode
      constexpr BlendCurveMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode Auto
      static constexpr const int Auto = 0;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode Auto
      static ::UnityEngine::Timeline::TimelineClip::BlendCurveMode _get_Auto();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode Auto
      static void _set_Auto(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
      // static field const value: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode Manual
      static constexpr const int Manual = 1;
      // Get static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode Manual
      static ::UnityEngine::Timeline::TimelineClip::BlendCurveMode _get_Manual();
      // Set static field: static public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode Manual
      static void _set_Manual(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode
    #pragma pack(pop)
    static check_size<sizeof(TimelineClip::BlendCurveMode), 0 + sizeof(int)> __UnityEngine_Timeline_TimelineClip_BlendCurveModeSizeCheck;
    static_assert(sizeof(TimelineClip::BlendCurveMode) == 0x4);
    public:
    // private System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x10
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Version and: m_Start
    char __padding0[0x4] = {};
    // private System.Double m_Start
    // Size: 0x8
    // Offset: 0x18
    double m_Start;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_ClipIn
    // Size: 0x8
    // Offset: 0x20
    double m_ClipIn;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Object m_Asset
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Object* m_Asset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x109CFC4
    // private System.Double m_Duration
    // Size: 0x8
    // Offset: 0x30
    double m_Duration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_TimeScale
    // Size: 0x8
    // Offset: 0x38
    double m_TimeScale;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.Timeline.TrackAsset m_ParentTrack
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Timeline::TrackAsset* m_ParentTrack;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::TrackAsset*) == 0x8);
    // private System.Double m_EaseInDuration
    // Size: 0x8
    // Offset: 0x48
    double m_EaseInDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_EaseOutDuration
    // Size: 0x8
    // Offset: 0x50
    double m_EaseOutDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_BlendInDuration
    // Size: 0x8
    // Offset: 0x58
    double m_BlendInDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_BlendOutDuration
    // Size: 0x8
    // Offset: 0x60
    double m_BlendOutDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private UnityEngine.AnimationCurve m_MixInCurve
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* m_MixInCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve m_MixOutCurve
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AnimationCurve* m_MixOutCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode m_BlendInCurveMode
    // Size: 0x4
    // Offset: 0x78
    ::UnityEngine::Timeline::TimelineClip::BlendCurveMode m_BlendInCurveMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::TimelineClip::BlendCurveMode) == 0x4);
    // private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode m_BlendOutCurveMode
    // Size: 0x4
    // Offset: 0x7C
    ::UnityEngine::Timeline::TimelineClip::BlendCurveMode m_BlendOutCurveMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::TimelineClip::BlendCurveMode) == 0x4);
    // private System.Collections.Generic.List`1<System.String> m_ExposedParameterNames
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::StringW>* m_ExposedParameterNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private UnityEngine.AnimationClip m_AnimationCurves
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AnimationClip* m_AnimationCurves;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationClip*) == 0x8);
    // private System.Boolean m_Recordable
    // Size: 0x1
    // Offset: 0x90
    bool m_Recordable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_Recordable and: m_PostExtrapolationMode
    char __padding17[0x3] = {};
    // private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation m_PostExtrapolationMode
    // Size: 0x4
    // Offset: 0x94
    ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_PostExtrapolationMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation m_PreExtrapolationMode
    // Size: 0x4
    // Offset: 0x98
    ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_PreExtrapolationMode;
    // Field size check
    static_assert(sizeof(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // Padding between fields: m_PreExtrapolationMode and: m_PostExtrapolationTime
    char __padding19[0x4] = {};
    // private System.Double m_PostExtrapolationTime
    // Size: 0x8
    // Offset: 0xA0
    double m_PostExtrapolationTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Double m_PreExtrapolationTime
    // Size: 0x8
    // Offset: 0xA8
    double m_PreExtrapolationTime;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.String m_DisplayName
    // Size: 0x8
    // Offset: 0xB0
    ::StringW m_DisplayName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: i_ISerializationCallbackReceiver
    inline ::UnityEngine::ISerializationCallbackReceiver* i_ISerializationCallbackReceiver() noexcept {
      return reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::Timeline::ICurvesOwner
    operator ::UnityEngine::Timeline::ICurvesOwner() noexcept {
      return *reinterpret_cast<::UnityEngine::Timeline::ICurvesOwner*>(this);
    }
    // Creating interface conversion operator: i_ICurvesOwner
    inline ::UnityEngine::Timeline::ICurvesOwner* i_ICurvesOwner() noexcept {
      return reinterpret_cast<::UnityEngine::Timeline::ICurvesOwner*>(this);
    }
    // static field const value: static private System.Int32 k_LatestVersion
    static constexpr const int k_LatestVersion = 1;
    // Get static field: static private System.Int32 k_LatestVersion
    static int _get_k_LatestVersion();
    // Set static field: static private System.Int32 k_LatestVersion
    static void _set_k_LatestVersion(int value);
    // Get static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
    static ::UnityEngine::Timeline::ClipCaps _get_kDefaultClipCaps();
    // Set static field: static public readonly UnityEngine.Timeline.ClipCaps kDefaultClipCaps
    static void _set_kDefaultClipCaps(::UnityEngine::Timeline::ClipCaps value);
    // Get static field: static public readonly System.Single kDefaultClipDurationInSeconds
    static float _get_kDefaultClipDurationInSeconds();
    // Set static field: static public readonly System.Single kDefaultClipDurationInSeconds
    static void _set_kDefaultClipDurationInSeconds(float value);
    // Get static field: static public readonly System.Double kTimeScaleMin
    static double _get_kTimeScaleMin();
    // Set static field: static public readonly System.Double kTimeScaleMin
    static void _set_kTimeScaleMin(double value);
    // Get static field: static public readonly System.Double kTimeScaleMax
    static double _get_kTimeScaleMax();
    // Set static field: static public readonly System.Double kTimeScaleMax
    static void _set_kTimeScaleMax(double value);
    // Get static field: static readonly System.String kDefaultCurvesName
    static ::StringW _get_kDefaultCurvesName();
    // Set static field: static readonly System.String kDefaultCurvesName
    static void _set_kDefaultCurvesName(::StringW value);
    // Get static field: static readonly System.Double kMinDuration
    static double _get_kMinDuration();
    // Set static field: static readonly System.Double kMinDuration
    static void _set_kMinDuration(double value);
    // Get static field: static readonly System.Double kMaxTimeValue
    static double _get_kMaxTimeValue();
    // Set static field: static readonly System.Double kMaxTimeValue
    static void _set_kMaxTimeValue(double value);
    // Get instance field reference: private System.Int32 m_Version
    [[deprecated("Use field access instead!")]] int& dyn_m_Version();
    // Get instance field reference: private System.Double m_Start
    [[deprecated("Use field access instead!")]] double& dyn_m_Start();
    // Get instance field reference: private System.Double m_ClipIn
    [[deprecated("Use field access instead!")]] double& dyn_m_ClipIn();
    // Get instance field reference: private UnityEngine.Object m_Asset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_m_Asset();
    // Get instance field reference: private System.Double m_Duration
    [[deprecated("Use field access instead!")]] double& dyn_m_Duration();
    // Get instance field reference: private System.Double m_TimeScale
    [[deprecated("Use field access instead!")]] double& dyn_m_TimeScale();
    // Get instance field reference: private UnityEngine.Timeline.TrackAsset m_ParentTrack
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TrackAsset*& dyn_m_ParentTrack();
    // Get instance field reference: private System.Double m_EaseInDuration
    [[deprecated("Use field access instead!")]] double& dyn_m_EaseInDuration();
    // Get instance field reference: private System.Double m_EaseOutDuration
    [[deprecated("Use field access instead!")]] double& dyn_m_EaseOutDuration();
    // Get instance field reference: private System.Double m_BlendInDuration
    [[deprecated("Use field access instead!")]] double& dyn_m_BlendInDuration();
    // Get instance field reference: private System.Double m_BlendOutDuration
    [[deprecated("Use field access instead!")]] double& dyn_m_BlendOutDuration();
    // Get instance field reference: private UnityEngine.AnimationCurve m_MixInCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_MixInCurve();
    // Get instance field reference: private UnityEngine.AnimationCurve m_MixOutCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_m_MixOutCurve();
    // Get instance field reference: private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode m_BlendInCurveMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::BlendCurveMode& dyn_m_BlendInCurveMode();
    // Get instance field reference: private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode m_BlendOutCurveMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::BlendCurveMode& dyn_m_BlendOutCurveMode();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> m_ExposedParameterNames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_m_ExposedParameterNames();
    // Get instance field reference: private UnityEngine.AnimationClip m_AnimationCurves
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationClip*& dyn_m_AnimationCurves();
    // Get instance field reference: private System.Boolean m_Recordable
    [[deprecated("Use field access instead!")]] bool& dyn_m_Recordable();
    // Get instance field reference: private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation m_PostExtrapolationMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation& dyn_m_PostExtrapolationMode();
    // Get instance field reference: private UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation m_PreExtrapolationMode
    [[deprecated("Use field access instead!")]] ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation& dyn_m_PreExtrapolationMode();
    // Get instance field reference: private System.Double m_PostExtrapolationTime
    [[deprecated("Use field access instead!")]] double& dyn_m_PostExtrapolationTime();
    // Get instance field reference: private System.Double m_PreExtrapolationTime
    [[deprecated("Use field access instead!")]] double& dyn_m_PreExtrapolationTime();
    // Get instance field reference: private System.String m_DisplayName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_DisplayName();
    // public System.Boolean get_hasPreExtrapolation()
    // Offset: 0x2A2AB74
    bool get_hasPreExtrapolation();
    // public System.Boolean get_hasPostExtrapolation()
    // Offset: 0x2A2AB94
    bool get_hasPostExtrapolation();
    // public System.Double get_timeScale()
    // Offset: 0x2A2ABB4
    double get_timeScale();
    // public System.Void set_timeScale(System.Double value)
    // Offset: 0x2A2AD94
    void set_timeScale(double value);
    // public System.Double get_start()
    // Offset: 0x2A2AE80
    double get_start();
    // public System.Void set_start(System.Double value)
    // Offset: 0x2A2AE88
    void set_start(double value);
    // public System.Double get_duration()
    // Offset: 0x2A2B0FC
    double get_duration();
    // public System.Void set_duration(System.Double value)
    // Offset: 0x2A2B104
    void set_duration(double value);
    // public System.Double get_end()
    // Offset: 0x2A2B1BC
    double get_end();
    // public System.Double get_clipIn()
    // Offset: 0x2A2B1CC
    double get_clipIn();
    // public System.Void set_clipIn(System.Double value)
    // Offset: 0x2A2B1F8
    void set_clipIn(double value);
    // public System.String get_displayName()
    // Offset: 0x2A2B2DC
    ::StringW get_displayName();
    // public System.Void set_displayName(System.String value)
    // Offset: 0x2A2B2E4
    void set_displayName(::StringW value);
    // public System.Double get_clipAssetDuration()
    // Offset: 0x2A2B2EC
    double get_clipAssetDuration();
    // public UnityEngine.AnimationClip get_curves()
    // Offset: 0x2A2B3BC
    ::UnityEngine::AnimationClip* get_curves();
    // System.Void set_curves(UnityEngine.AnimationClip value)
    // Offset: 0x2A2B3C4
    void set_curves(::UnityEngine::AnimationClip* value);
    // private System.String UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName()
    // Offset: 0x2A2B3CC
    ::StringW UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName();
    // public System.Boolean get_hasCurves()
    // Offset: 0x2A2B434
    bool get_hasCurves();
    // public UnityEngine.Object get_asset()
    // Offset: 0x2A2B4D0
    ::UnityEngine::Object* get_asset();
    // public System.Void set_asset(UnityEngine.Object value)
    // Offset: 0x2A2B4D8
    void set_asset(::UnityEngine::Object* value);
    // private UnityEngine.Object UnityEngine.Timeline.ICurvesOwner.get_assetOwner()
    // Offset: 0x2A2B4E0
    ::UnityEngine::Object* UnityEngine_Timeline_ICurvesOwner_get_assetOwner();
    // private UnityEngine.Timeline.TrackAsset UnityEngine.Timeline.ICurvesOwner.get_targetTrack()
    // Offset: 0x2A2B4E8
    ::UnityEngine::Timeline::TrackAsset* UnityEngine_Timeline_ICurvesOwner_get_targetTrack();
    // public UnityEngine.Object get_underlyingAsset()
    // Offset: 0x2A2B4F0
    ::UnityEngine::Object* get_underlyingAsset();
    // public System.Void set_underlyingAsset(UnityEngine.Object value)
    // Offset: 0x2A2B4F8
    void set_underlyingAsset(::UnityEngine::Object* value);
    // public UnityEngine.Timeline.TrackAsset get_parentTrack()
    // Offset: 0x2A2B4FC
    ::UnityEngine::Timeline::TrackAsset* get_parentTrack();
    // public System.Void set_parentTrack(UnityEngine.Timeline.TrackAsset value)
    // Offset: 0x2A2B504
    void set_parentTrack(::UnityEngine::Timeline::TrackAsset* value);
    // public System.Double get_easeInDuration()
    // Offset: 0x2A2B610
    double get_easeInDuration();
    // public System.Void set_easeInDuration(System.Double value)
    // Offset: 0x2A2B714
    void set_easeInDuration(double value);
    // public System.Double get_easeOutDuration()
    // Offset: 0x2A2B818
    double get_easeOutDuration();
    // public System.Void set_easeOutDuration(System.Double value)
    // Offset: 0x2A2B91C
    void set_easeOutDuration(double value);
    // public System.Double get_eastOutTime()
    // Offset: 0x2A2BA20
    double get_eastOutTime();
    // public System.Double get_easeOutTime()
    // Offset: 0x2A2BA58
    double get_easeOutTime();
    // public System.Double get_blendInDuration()
    // Offset: 0x2A2BA90
    double get_blendInDuration();
    // public System.Void set_blendInDuration(System.Double value)
    // Offset: 0x2A2BABC
    void set_blendInDuration(double value);
    // public System.Double get_blendOutDuration()
    // Offset: 0x2A2BB54
    double get_blendOutDuration();
    // public System.Void set_blendOutDuration(System.Double value)
    // Offset: 0x2A2BB80
    void set_blendOutDuration(double value);
    // public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode get_blendInCurveMode()
    // Offset: 0x2A2BC18
    ::UnityEngine::Timeline::TimelineClip::BlendCurveMode get_blendInCurveMode();
    // public System.Void set_blendInCurveMode(UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode value)
    // Offset: 0x2A2BC20
    void set_blendInCurveMode(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
    // public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode get_blendOutCurveMode()
    // Offset: 0x2A2BC28
    ::UnityEngine::Timeline::TimelineClip::BlendCurveMode get_blendOutCurveMode();
    // public System.Void set_blendOutCurveMode(UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.BlendCurveMode value)
    // Offset: 0x2A2BC30
    void set_blendOutCurveMode(::UnityEngine::Timeline::TimelineClip::BlendCurveMode value);
    // public System.Boolean get_hasBlendIn()
    // Offset: 0x2A2B8E4
    bool get_hasBlendIn();
    // public System.Boolean get_hasBlendOut()
    // Offset: 0x2A2B6DC
    bool get_hasBlendOut();
    // public UnityEngine.AnimationCurve get_mixInCurve()
    // Offset: 0x2A2BC38
    ::UnityEngine::AnimationCurve* get_mixInCurve();
    // public System.Void set_mixInCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x2A2BCEC
    void set_mixInCurve(::UnityEngine::AnimationCurve* value);
    // public System.Single get_mixInPercentage()
    // Offset: 0x2A2BCF4
    float get_mixInPercentage();
    // public System.Double get_mixInDuration()
    // Offset: 0x2A2BD20
    double get_mixInDuration();
    // public UnityEngine.AnimationCurve get_mixOutCurve()
    // Offset: 0x2A2BD74
    ::UnityEngine::AnimationCurve* get_mixOutCurve();
    // public System.Void set_mixOutCurve(UnityEngine.AnimationCurve value)
    // Offset: 0x2A2BE28
    void set_mixOutCurve(::UnityEngine::AnimationCurve* value);
    // public System.Double get_mixOutTime()
    // Offset: 0x2A2BE30
    double get_mixOutTime();
    // public System.Double get_mixOutDuration()
    // Offset: 0x2A2BE68
    double get_mixOutDuration();
    // public System.Single get_mixOutPercentage()
    // Offset: 0x2A2BEBC
    float get_mixOutPercentage();
    // public System.Boolean get_recordable()
    // Offset: 0x2A2BEE8
    bool get_recordable();
    // System.Void set_recordable(System.Boolean value)
    // Offset: 0x2A2BEF0
    void set_recordable(bool value);
    // public System.Collections.Generic.List`1<System.String> get_exposedParameters()
    // Offset: 0x2A2BEFC
    ::System::Collections::Generic::List_1<::StringW>* get_exposedParameters();
    // public UnityEngine.Timeline.ClipCaps get_clipCaps()
    // Offset: 0x2A2AC98
    ::UnityEngine::Timeline::ClipCaps get_clipCaps();
    // public UnityEngine.AnimationClip get_animationClip()
    // Offset: 0x2A2C61C
    ::UnityEngine::AnimationClip* get_animationClip();
    // public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation get_postExtrapolationMode()
    // Offset: 0x2A2C728
    ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_postExtrapolationMode();
    // System.Void set_postExtrapolationMode(UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation value)
    // Offset: 0x2A2C758
    void set_postExtrapolationMode(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation get_preExtrapolationMode()
    // Offset: 0x2A2C790
    ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_preExtrapolationMode();
    // System.Void set_preExtrapolationMode(UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation value)
    // Offset: 0x2A2C7C0
    void set_preExtrapolationMode(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public System.Double get_extrapolatedStart()
    // Offset: 0x2A2C854
    double get_extrapolatedStart();
    // public System.Double get_extrapolatedDuration()
    // Offset: 0x2A2C86C
    double get_extrapolatedDuration();
    // System.Void .ctor(UnityEngine.Timeline.TrackAsset parent)
    // Offset: 0x2A2AA20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelineClip* New_ctor(::UnityEngine::Timeline::TrackAsset* parent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::Timeline::TimelineClip::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelineClip*, creationType>(parent)));
    }
    // static private System.Void .cctor()
    // Offset: 0x2A2CF70
    static void _cctor();
    // private System.Void UpgradeToLatestVersion()
    // Offset: 0x2A2A9AC
    void UpgradeToLatestVersion();
    // public UnityEngine.Timeline.TrackAsset GetParentTrack()
    // Offset: 0x2A2B508
    ::UnityEngine::Timeline::TrackAsset* GetParentTrack();
    // System.Void SetParentTrack_Internal(UnityEngine.Timeline.TrackAsset newParentTrack)
    // Offset: 0x2A2AA60
    void SetParentTrack_Internal(::UnityEngine::Timeline::TrackAsset* newParentTrack);
    // System.Int32 Hash()
    // Offset: 0x2A2BF70
    int Hash();
    // public System.Single EvaluateMixOut(System.Double time)
    // Offset: 0x2A2C030
    float EvaluateMixOut(double time);
    // public System.Single EvaluateMixIn(System.Double time)
    // Offset: 0x2A2C16C
    float EvaluateMixIn(double time);
    // static private UnityEngine.AnimationCurve GetDefaultMixInCurve()
    // Offset: 0x2A2BCD4
    static ::UnityEngine::AnimationCurve* GetDefaultMixInCurve();
    // static private UnityEngine.AnimationCurve GetDefaultMixOutCurve()
    // Offset: 0x2A2BE10
    static ::UnityEngine::AnimationCurve* GetDefaultMixOutCurve();
    // public System.Double ToLocalTime(System.Double time)
    // Offset: 0x2A2C284
    double ToLocalTime(double time);
    // public System.Double ToLocalTimeUnbound(System.Double time)
    // Offset: 0x2A2C570
    double ToLocalTimeUnbound(double time);
    // System.Double FromLocalTimeUnbound(System.Double time)
    // Offset: 0x2A2C5CC
    double FromLocalTimeUnbound(double time);
    // static private System.Double SanitizeTimeValue(System.Double value, System.Double defaultValue)
    // Offset: 0x2A2AF94
    static double SanitizeTimeValue(double value, double defaultValue);
    // System.Void SetPostExtrapolationTime(System.Double time)
    // Offset: 0x2A2C7F8
    void SetPostExtrapolationTime(double time);
    // System.Void SetPreExtrapolationTime(System.Double time)
    // Offset: 0x2A2C800
    void SetPreExtrapolationTime(double time);
    // public System.Boolean IsExtrapolatedTime(System.Double sequenceTime)
    // Offset: 0x2A2C808
    bool IsExtrapolatedTime(double sequenceTime);
    // public System.Boolean IsPreExtrapolatedTime(System.Double sequenceTime)
    // Offset: 0x2A2C384
    bool IsPreExtrapolatedTime(double sequenceTime);
    // public System.Boolean IsPostExtrapolatedTime(System.Double sequenceTime)
    // Offset: 0x2A2C50C
    bool IsPostExtrapolatedTime(double sequenceTime);
    // static private System.Double GetExtrapolatedTime(System.Double time, UnityEngine.Timeline.TimelineClip/UnityEngine.Timeline.ClipExtrapolation mode, System.Double duration)
    // Offset: 0x2A2C3E0
    static double GetExtrapolatedTime(double time, ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation mode, double duration);
    // public System.Void CreateCurves(System.String curvesClipName)
    // Offset: 0x2A2C944
    void CreateCurves(::StringW curvesClipName);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x2A2CBE0
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x2A2CBEC
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public System.Void ConformEaseValues()
    // Offset: 0x2A2CDF8
    void ConformEaseValues();
    // static private System.Double CalculateEasingRatio(System.Double easeIn, System.Double easeOut)
    // Offset: 0x2A2CE98
    static double CalculateEasingRatio(double easeIn, double easeOut);
    // private System.Void UpdateDirty(System.Double oldValue, System.Double newValue)
    // Offset: 0x2A2AE7C
    void UpdateDirty(double oldValue, double newValue);
    // public override System.String ToString()
    // Offset: 0x2A2CC24
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // UnityEngine.Timeline.TimelineClip
  #pragma pack(pop)
  static check_size<sizeof(TimelineClip), 176 + sizeof(::StringW)> __UnityEngine_Timeline_TimelineClipSizeCheck;
  static_assert(sizeof(TimelineClip) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Timeline::TimelineClip::BlendCurveMode, "UnityEngine.Timeline", "TimelineClip/BlendCurveMode");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, "UnityEngine.Timeline", "TimelineClip/ClipExtrapolation");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_hasPreExtrapolation
// Il2CppName: get_hasPreExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_hasPreExtrapolation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_hasPreExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_hasPostExtrapolation
// Il2CppName: get_hasPostExtrapolation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_hasPostExtrapolation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_hasPostExtrapolation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_timeScale
// Il2CppName: get_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_timeScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_timeScale
// Il2CppName: set_timeScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_timeScale)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_timeScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_start
// Il2CppName: get_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_start
// Il2CppName: set_start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_start)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_duration
// Il2CppName: set_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_duration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_end
// Il2CppName: get_end
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_end)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_end", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_clipIn
// Il2CppName: get_clipIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_clipIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_clipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_clipIn
// Il2CppName: set_clipIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_clipIn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_clipIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_displayName
// Il2CppName: get_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_displayName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_displayName
// Il2CppName: set_displayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::StringW)>(&UnityEngine::Timeline::TimelineClip::set_displayName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_displayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_clipAssetDuration
// Il2CppName: get_clipAssetDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_clipAssetDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_clipAssetDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_curves
// Il2CppName: get_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_curves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_curves
// Il2CppName: set_curves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::AnimationClip*)>(&UnityEngine::Timeline::TimelineClip::set_curves)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_curves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_defaultCurvesName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_defaultCurvesName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_hasCurves
// Il2CppName: get_hasCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_hasCurves)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_hasCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_asset
// Il2CppName: get_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_asset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_asset
// Il2CppName: set_asset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Object*)>(&UnityEngine::Timeline::TimelineClip::set_asset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_asset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_assetOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_assetOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_assetOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack
// Il2CppName: UnityEngine.Timeline.ICurvesOwner.get_targetTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TrackAsset* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::UnityEngine_Timeline_ICurvesOwner_get_targetTrack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UnityEngine.Timeline.ICurvesOwner.get_targetTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_underlyingAsset
// Il2CppName: get_underlyingAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Object* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_underlyingAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_underlyingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_underlyingAsset
// Il2CppName: set_underlyingAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Object*)>(&UnityEngine::Timeline::TimelineClip::set_underlyingAsset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_underlyingAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_parentTrack
// Il2CppName: get_parentTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TrackAsset* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_parentTrack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_parentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_parentTrack
// Il2CppName: set_parentTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Timeline::TrackAsset*)>(&UnityEngine::Timeline::TimelineClip::set_parentTrack)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TrackAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_parentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_easeInDuration
// Il2CppName: get_easeInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_easeInDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_easeInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_easeInDuration
// Il2CppName: set_easeInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_easeInDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_easeInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_easeOutDuration
// Il2CppName: get_easeOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_easeOutDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_easeOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_easeOutDuration
// Il2CppName: set_easeOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_easeOutDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_easeOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_eastOutTime
// Il2CppName: get_eastOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_eastOutTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_eastOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_easeOutTime
// Il2CppName: get_easeOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_easeOutTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_easeOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_blendInDuration
// Il2CppName: get_blendInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_blendInDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_blendInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_blendInDuration
// Il2CppName: set_blendInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_blendInDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_blendInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_blendOutDuration
// Il2CppName: get_blendOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_blendOutDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_blendOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_blendOutDuration
// Il2CppName: set_blendOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::set_blendOutDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_blendOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_blendInCurveMode
// Il2CppName: get_blendInCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip::BlendCurveMode (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_blendInCurveMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_blendInCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_blendInCurveMode
// Il2CppName: set_blendInCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Timeline::TimelineClip::BlendCurveMode)>(&UnityEngine::Timeline::TimelineClip::set_blendInCurveMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip/BlendCurveMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_blendInCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_blendOutCurveMode
// Il2CppName: get_blendOutCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip::BlendCurveMode (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_blendOutCurveMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_blendOutCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_blendOutCurveMode
// Il2CppName: set_blendOutCurveMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Timeline::TimelineClip::BlendCurveMode)>(&UnityEngine::Timeline::TimelineClip::set_blendOutCurveMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip/BlendCurveMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_blendOutCurveMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_hasBlendIn
// Il2CppName: get_hasBlendIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_hasBlendIn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_hasBlendIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_hasBlendOut
// Il2CppName: get_hasBlendOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_hasBlendOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_hasBlendOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixInCurve
// Il2CppName: get_mixInCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixInCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_mixInCurve
// Il2CppName: set_mixInCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::AnimationCurve*)>(&UnityEngine::Timeline::TimelineClip::set_mixInCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_mixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixInPercentage
// Il2CppName: get_mixInPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixInPercentage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixInPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixInDuration
// Il2CppName: get_mixInDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixInDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixInDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixOutCurve
// Il2CppName: get_mixOutCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixOutCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_mixOutCurve
// Il2CppName: set_mixOutCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::AnimationCurve*)>(&UnityEngine::Timeline::TimelineClip::set_mixOutCurve)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_mixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixOutTime
// Il2CppName: get_mixOutTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixOutTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixOutTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixOutDuration
// Il2CppName: get_mixOutDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixOutDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixOutDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_mixOutPercentage
// Il2CppName: get_mixOutPercentage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_mixOutPercentage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_mixOutPercentage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_recordable
// Il2CppName: get_recordable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_recordable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_recordable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_recordable
// Il2CppName: set_recordable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(bool)>(&UnityEngine::Timeline::TimelineClip::set_recordable)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_recordable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_exposedParameters
// Il2CppName: get_exposedParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_exposedParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_exposedParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_clipCaps
// Il2CppName: get_clipCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::ClipCaps (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_clipCaps)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_clipCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_animationClip
// Il2CppName: get_animationClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationClip* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_animationClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_animationClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_postExtrapolationMode
// Il2CppName: get_postExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_postExtrapolationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_postExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_postExtrapolationMode
// Il2CppName: set_postExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&UnityEngine::Timeline::TimelineClip::set_postExtrapolationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_postExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_preExtrapolationMode
// Il2CppName: get_preExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TimelineClip::ClipExtrapolation (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_preExtrapolationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_preExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::set_preExtrapolationMode
// Il2CppName: set_preExtrapolationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Timeline::TimelineClip::ClipExtrapolation)>(&UnityEngine::Timeline::TimelineClip::set_preExtrapolationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "set_preExtrapolationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_extrapolatedStart
// Il2CppName: get_extrapolatedStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_extrapolatedStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_extrapolatedStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::get_extrapolatedDuration
// Il2CppName: get_extrapolatedDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::get_extrapolatedDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "get_extrapolatedDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Timeline::TimelineClip::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UpgradeToLatestVersion
// Il2CppName: UpgradeToLatestVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::UpgradeToLatestVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UpgradeToLatestVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::GetParentTrack
// Il2CppName: GetParentTrack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Timeline::TrackAsset* (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::GetParentTrack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "GetParentTrack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::SetParentTrack_Internal
// Il2CppName: SetParentTrack_Internal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::UnityEngine::Timeline::TrackAsset*)>(&UnityEngine::Timeline::TimelineClip::SetParentTrack_Internal)> {
  static const MethodInfo* get() {
    static auto* newParentTrack = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TrackAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "SetParentTrack_Internal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newParentTrack});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::Hash
// Il2CppName: Hash
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::Hash)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "Hash", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::EvaluateMixOut
// Il2CppName: EvaluateMixOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::EvaluateMixOut)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "EvaluateMixOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::EvaluateMixIn
// Il2CppName: EvaluateMixIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::EvaluateMixIn)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "EvaluateMixIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::GetDefaultMixInCurve
// Il2CppName: GetDefaultMixInCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (*)()>(&UnityEngine::Timeline::TimelineClip::GetDefaultMixInCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "GetDefaultMixInCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::GetDefaultMixOutCurve
// Il2CppName: GetDefaultMixOutCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AnimationCurve* (*)()>(&UnityEngine::Timeline::TimelineClip::GetDefaultMixOutCurve)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "GetDefaultMixOutCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::ToLocalTime
// Il2CppName: ToLocalTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::ToLocalTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "ToLocalTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::ToLocalTimeUnbound
// Il2CppName: ToLocalTimeUnbound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::ToLocalTimeUnbound)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "ToLocalTimeUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::FromLocalTimeUnbound
// Il2CppName: FromLocalTimeUnbound
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::FromLocalTimeUnbound)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "FromLocalTimeUnbound", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::SanitizeTimeValue
// Il2CppName: SanitizeTimeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&UnityEngine::Timeline::TimelineClip::SanitizeTimeValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "SanitizeTimeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, defaultValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::SetPostExtrapolationTime
// Il2CppName: SetPostExtrapolationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::SetPostExtrapolationTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "SetPostExtrapolationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::SetPreExtrapolationTime
// Il2CppName: SetPreExtrapolationTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::SetPreExtrapolationTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "SetPreExtrapolationTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::IsExtrapolatedTime
// Il2CppName: IsExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::IsExtrapolatedTime)> {
  static const MethodInfo* get() {
    static auto* sequenceTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "IsExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequenceTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::IsPreExtrapolatedTime
// Il2CppName: IsPreExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::IsPreExtrapolatedTime)> {
  static const MethodInfo* get() {
    static auto* sequenceTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "IsPreExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequenceTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::IsPostExtrapolatedTime
// Il2CppName: IsPostExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Timeline::TimelineClip::*)(double)>(&UnityEngine::Timeline::TimelineClip::IsPostExtrapolatedTime)> {
  static const MethodInfo* get() {
    static auto* sequenceTime = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "IsPostExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sequenceTime});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::GetExtrapolatedTime
// Il2CppName: GetExtrapolatedTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, ::UnityEngine::Timeline::TimelineClip::ClipExtrapolation, double)>(&UnityEngine::Timeline::TimelineClip::GetExtrapolatedTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* mode = &::il2cpp_utils::GetClassFromName("UnityEngine.Timeline", "TimelineClip/ClipExtrapolation")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "GetExtrapolatedTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, mode, duration});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::CreateCurves
// Il2CppName: CreateCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(::StringW)>(&UnityEngine::Timeline::TimelineClip::CreateCurves)> {
  static const MethodInfo* get() {
    static auto* curvesClipName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "CreateCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curvesClipName});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
// Il2CppName: UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::ConformEaseValues
// Il2CppName: ConformEaseValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::ConformEaseValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "ConformEaseValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::CalculateEasingRatio
// Il2CppName: CalculateEasingRatio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)(double, double)>(&UnityEngine::Timeline::TimelineClip::CalculateEasingRatio)> {
  static const MethodInfo* get() {
    static auto* easeIn = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* easeOut = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "CalculateEasingRatio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{easeIn, easeOut});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::UpdateDirty
// Il2CppName: UpdateDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Timeline::TimelineClip::*)(double, double)>(&UnityEngine::Timeline::TimelineClip::UpdateDirty)> {
  static const MethodInfo* get() {
    static auto* oldValue = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "UpdateDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldValue, newValue});
  }
};
// Writing MetadataGetter for method: UnityEngine::Timeline::TimelineClip::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Timeline::TimelineClip::*)()>(&UnityEngine::Timeline::TimelineClip::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Timeline::TimelineClip*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
