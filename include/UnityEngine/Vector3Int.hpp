// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3Int
  struct Vector3Int;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Vector3Int, "UnityEngine", "Vector3Int");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Vector3Int
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: 1050AB4
  // [UsedByNativeCodeAttribute] Offset: 1050AB4
  struct Vector3Int/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Vector3Int>*/ {
    public:
    public:
    // private System.Int32 m_X
    // Size: 0x4
    // Offset: 0x0
    int m_X;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Y
    // Size: 0x4
    // Offset: 0x4
    int m_Y;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_Z
    // Size: 0x4
    // Offset: 0x8
    int m_Z;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Vector3Int
    constexpr Vector3Int(int m_X_ = {}, int m_Y_ = {}, int m_Z_ = {}) noexcept : m_X{m_X_}, m_Y{m_Y_}, m_Z{m_Z_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Vector3Int>
    operator ::System::IEquatable_1<::UnityEngine::Vector3Int>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Vector3Int>*>(this);
    }
    // Creating interface conversion operator: i_Vector3Int
    inline ::System::IEquatable_1<::UnityEngine::Vector3Int>* i_Vector3Int() noexcept {
      return reinterpret_cast<::System::IEquatable_1<::UnityEngine::Vector3Int>*>(this);
    }
    // Get static field: static private readonly UnityEngine.Vector3Int s_Zero
    static ::UnityEngine::Vector3Int _get_s_Zero();
    // Set static field: static private readonly UnityEngine.Vector3Int s_Zero
    static void _set_s_Zero(::UnityEngine::Vector3Int value);
    // Get static field: static private readonly UnityEngine.Vector3Int s_One
    static ::UnityEngine::Vector3Int _get_s_One();
    // Set static field: static private readonly UnityEngine.Vector3Int s_One
    static void _set_s_One(::UnityEngine::Vector3Int value);
    // Get static field: static private readonly UnityEngine.Vector3Int s_Up
    static ::UnityEngine::Vector3Int _get_s_Up();
    // Set static field: static private readonly UnityEngine.Vector3Int s_Up
    static void _set_s_Up(::UnityEngine::Vector3Int value);
    // Get static field: static private readonly UnityEngine.Vector3Int s_Down
    static ::UnityEngine::Vector3Int _get_s_Down();
    // Set static field: static private readonly UnityEngine.Vector3Int s_Down
    static void _set_s_Down(::UnityEngine::Vector3Int value);
    // Get static field: static private readonly UnityEngine.Vector3Int s_Left
    static ::UnityEngine::Vector3Int _get_s_Left();
    // Set static field: static private readonly UnityEngine.Vector3Int s_Left
    static void _set_s_Left(::UnityEngine::Vector3Int value);
    // Get static field: static private readonly UnityEngine.Vector3Int s_Right
    static ::UnityEngine::Vector3Int _get_s_Right();
    // Set static field: static private readonly UnityEngine.Vector3Int s_Right
    static void _set_s_Right(::UnityEngine::Vector3Int value);
    // Get instance field reference: private System.Int32 m_X
    [[deprecated("Use field access instead!")]] int& dyn_m_X();
    // Get instance field reference: private System.Int32 m_Y
    [[deprecated("Use field access instead!")]] int& dyn_m_Y();
    // Get instance field reference: private System.Int32 m_Z
    [[deprecated("Use field access instead!")]] int& dyn_m_Z();
    // public System.Int32 get_x()
    // Offset: 0x27D7D84
    int get_x();
    // public System.Void set_x(System.Int32 value)
    // Offset: 0x27D7D8C
    void set_x(int value);
    // public System.Int32 get_y()
    // Offset: 0x27D7D94
    int get_y();
    // public System.Void set_y(System.Int32 value)
    // Offset: 0x27D7D9C
    void set_y(int value);
    // public System.Int32 get_z()
    // Offset: 0x27D7DA4
    int get_z();
    // public System.Void set_z(System.Int32 value)
    // Offset: 0x27D7DAC
    void set_z(int value);
    // public System.Int32 get_Item(System.Int32 index)
    // Offset: 0x27D7DC0
    int get_Item(int index);
    // static public UnityEngine.Vector3Int get_one()
    // Offset: 0x27D83F8
    static ::UnityEngine::Vector3Int get_one();
    // public System.Void .ctor(System.Int32 x, System.Int32 y, System.Int32 z)
    // Offset: 0x27D7DB4
    // ABORTED: conflicts with another method.  Vector3Int(int x, int y, int z);
    // static private System.Void .cctor()
    // Offset: 0x27D8464
    static void _cctor();
    // static public UnityEngine.Vector3Int Min(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs)
    // Offset: 0x27D7EDC
    static ::UnityEngine::Vector3Int Min(::UnityEngine::Vector3Int lhs, ::UnityEngine::Vector3Int rhs);
    // static public UnityEngine.Vector3Int Max(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs)
    // Offset: 0x27D7FB0
    static ::UnityEngine::Vector3Int Max(::UnityEngine::Vector3Int lhs, ::UnityEngine::Vector3Int rhs);
    // public System.Boolean Equals(UnityEngine.Vector3Int other)
    // Offset: 0x27D8174
    bool Equals(::UnityEngine::Vector3Int other);
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0x27D80E4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
    // public override System.Int32 GetHashCode()
    // Offset: 0x27D8218
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x27D8294
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // UnityEngine.Vector3Int
  #pragma pack(pop)
  static check_size<sizeof(Vector3Int), 8 + sizeof(int)> __UnityEngine_Vector3IntSizeCheck;
  static_assert(sizeof(Vector3Int) == 0xC);
  // static public UnityEngine.Vector3Int op_Addition(UnityEngine.Vector3Int a, UnityEngine.Vector3Int b)
  // Offset: 0x27D8098
  ::UnityEngine::Vector3Int operator+(const ::UnityEngine::Vector3Int& a, const ::UnityEngine::Vector3Int& b);
  // static public System.Boolean op_Equality(UnityEngine.Vector3Int lhs, UnityEngine.Vector3Int rhs)
  // Offset: 0x27D80B4
  bool operator ==(const ::UnityEngine::Vector3Int& lhs, const ::UnityEngine::Vector3Int& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Vector3Int::get_x
// Il2CppName: get_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Vector3Int::*)()>(&UnityEngine::Vector3Int::get_x)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "get_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::set_x
// Il2CppName: set_x
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Vector3Int::*)(int)>(&UnityEngine::Vector3Int::set_x)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "set_x", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::get_y
// Il2CppName: get_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Vector3Int::*)()>(&UnityEngine::Vector3Int::get_y)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "get_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::set_y
// Il2CppName: set_y
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Vector3Int::*)(int)>(&UnityEngine::Vector3Int::set_y)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "set_y", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::get_z
// Il2CppName: get_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Vector3Int::*)()>(&UnityEngine::Vector3Int::get_z)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "get_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::set_z
// Il2CppName: set_z
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::Vector3Int::*)(int)>(&UnityEngine::Vector3Int::set_z)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "set_z", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Vector3Int::*)(int)>(&UnityEngine::Vector3Int::get_Item)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::get_one
// Il2CppName: get_one
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3Int (*)()>(&UnityEngine::Vector3Int::get_one)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "get_one", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::Vector3Int
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::Vector3Int::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::Vector3Int::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::Min
// Il2CppName: Min
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3Int (*)(::UnityEngine::Vector3Int, ::UnityEngine::Vector3Int)>(&UnityEngine::Vector3Int::Min)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "Min", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::Max
// Il2CppName: Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3Int (*)(::UnityEngine::Vector3Int, ::UnityEngine::Vector3Int)>(&UnityEngine::Vector3Int::Max)> {
  static const MethodInfo* get() {
    static auto* lhs = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    static auto* rhs = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lhs, rhs});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Vector3Int::*)(::UnityEngine::Vector3Int)>(&UnityEngine::Vector3Int::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3Int")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Vector3Int::*)(::Il2CppObject*)>(&UnityEngine::Vector3Int::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Vector3Int::*)()>(&UnityEngine::Vector3Int::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (UnityEngine::Vector3Int::*)()>(&UnityEngine::Vector3Int::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Vector3Int), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Vector3Int::operator+
// Il2CppName: op_Addition
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: UnityEngine::Vector3Int::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
