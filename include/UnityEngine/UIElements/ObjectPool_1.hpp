// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ObjectPool`1<T>
  template<typename T>
  class ObjectPool_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::ObjectPool_1, "UnityEngine.UIElements", "ObjectPool`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.ObjectPool`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class ObjectPool_1 : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.Stack`1<T> m_Stack
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Stack_1<T>* m_Stack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Stack_1<T>*) == 0x8);
    // private System.Int32 m_MaxSize
    // Size: 0x4
    // Offset: 0x0
    int m_MaxSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Collections.Generic.Stack`1<T> m_Stack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Stack_1<T>*& dyn_m_Stack() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::dyn_m_Stack");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Stack"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Stack_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_MaxSize
    [[deprecated("Use field access instead!")]] int& dyn_m_MaxSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::dyn_m_MaxSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_MaxSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_maxSize()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_maxSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::get_maxSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_maxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void set_maxSize(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_maxSize(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::set_maxSize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_maxSize", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Int32 maxSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObjectPool_1<T>* New_ctor(int maxSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObjectPool_1<T>*, creationType>(maxSize)));
    }
    // public System.Int32 Size()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Size() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::Size");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Size", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public T Get()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T Get() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // public System.Void Release(T element)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Release(T element) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::ObjectPool_1::Release");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Release", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(element)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, element);
    }
  }; // UnityEngine.UIElements.ObjectPool`1
  // Could not write size check! Type: UnityEngine.UIElements.ObjectPool`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
