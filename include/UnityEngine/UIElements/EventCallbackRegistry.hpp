// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventCallbackList
  class EventCallbackList;
  // Forward declaring type: EventCallbackListPool
  class EventCallbackListPool;
  // Forward declaring type: EventBase
  class EventBase;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventCallbackRegistry
  class EventCallbackRegistry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::EventCallbackRegistry);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::EventCallbackRegistry*, "UnityEngine.UIElements", "EventCallbackRegistry");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.EventCallbackRegistry
  // [TokenAttribute] Offset: FFFFFFFF
  class EventCallbackRegistry : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.EventCallbackList m_Callbacks
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::UIElements::EventCallbackList* m_Callbacks;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallbackList*) == 0x8);
    // private UnityEngine.UIElements.EventCallbackList m_TemporaryCallbacks
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UIElements::EventCallbackList* m_TemporaryCallbacks;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventCallbackList*) == 0x8);
    // private System.Int32 m_IsInvoking
    // Size: 0x4
    // Offset: 0x20
    int m_IsInvoking;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static private readonly UnityEngine.UIElements.EventCallbackListPool s_ListPool
    static ::UnityEngine::UIElements::EventCallbackListPool* _get_s_ListPool();
    // Set static field: static private readonly UnityEngine.UIElements.EventCallbackListPool s_ListPool
    static void _set_s_ListPool(::UnityEngine::UIElements::EventCallbackListPool* value);
    // Get instance field reference: private UnityEngine.UIElements.EventCallbackList m_Callbacks
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallbackList*& dyn_m_Callbacks();
    // Get instance field reference: private UnityEngine.UIElements.EventCallbackList m_TemporaryCallbacks
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventCallbackList*& dyn_m_TemporaryCallbacks();
    // Get instance field reference: private System.Int32 m_IsInvoking
    [[deprecated("Use field access instead!")]] int& dyn_m_IsInvoking();
    // static private System.Void .cctor()
    // Offset: 0xDA1544
    static void _cctor();
    // static private UnityEngine.UIElements.EventCallbackList GetCallbackList(UnityEngine.UIElements.EventCallbackList initializer)
    // Offset: 0xDA1454
    static ::UnityEngine::UIElements::EventCallbackList* GetCallbackList(::UnityEngine::UIElements::EventCallbackList* initializer);
    // static private System.Void ReleaseCallbackList(UnityEngine.UIElements.EventCallbackList toRelease)
    // Offset: 0xDA14CC
    static void ReleaseCallbackList(::UnityEngine::UIElements::EventCallbackList* toRelease);
    // public System.Void InvokeCallbacks(UnityEngine.UIElements.EventBase evt)
    // Offset: 0xD9D88C
    void InvokeCallbacks(::UnityEngine::UIElements::EventBase* evt);
    // public System.Boolean HasTrickleDownHandlers()
    // Offset: 0xD9D9D8
    bool HasTrickleDownHandlers();
    // public System.Boolean HasBubbleHandlers()
    // Offset: 0xD9DA20
    bool HasBubbleHandlers();
  }; // UnityEngine.UIElements.EventCallbackRegistry
  #pragma pack(pop)
  static check_size<sizeof(EventCallbackRegistry), 32 + sizeof(int)> __UnityEngine_UIElements_EventCallbackRegistrySizeCheck;
  static_assert(sizeof(EventCallbackRegistry) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::EventCallbackRegistry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::EventCallbackRegistry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EventCallbackRegistry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EventCallbackRegistry::GetCallbackList
// Il2CppName: GetCallbackList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::EventCallbackList* (*)(::UnityEngine::UIElements::EventCallbackList*)>(&UnityEngine::UIElements::EventCallbackRegistry::GetCallbackList)> {
  static const MethodInfo* get() {
    static auto* initializer = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventCallbackList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EventCallbackRegistry*), "GetCallbackList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initializer});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EventCallbackRegistry::ReleaseCallbackList
// Il2CppName: ReleaseCallbackList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::UIElements::EventCallbackList*)>(&UnityEngine::UIElements::EventCallbackRegistry::ReleaseCallbackList)> {
  static const MethodInfo* get() {
    static auto* toRelease = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventCallbackList")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EventCallbackRegistry*), "ReleaseCallbackList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toRelease});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EventCallbackRegistry::InvokeCallbacks
// Il2CppName: InvokeCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::EventCallbackRegistry::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::EventCallbackRegistry::InvokeCallbacks)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EventCallbackRegistry*), "InvokeCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EventCallbackRegistry::HasTrickleDownHandlers
// Il2CppName: HasTrickleDownHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::EventCallbackRegistry::*)()>(&UnityEngine::UIElements::EventCallbackRegistry::HasTrickleDownHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EventCallbackRegistry*), "HasTrickleDownHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::EventCallbackRegistry::HasBubbleHandlers
// Il2CppName: HasBubbleHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::EventCallbackRegistry::*)()>(&UnityEngine::UIElements::EventCallbackRegistry::HasBubbleHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::EventCallbackRegistry*), "HasBubbleHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
