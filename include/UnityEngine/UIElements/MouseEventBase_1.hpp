// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.EventBase`1
#include "UnityEngine/UIElements/EventBase_1.hpp"
// Including type: UnityEngine.UIElements.IMouseEvent
#include "UnityEngine/UIElements/IMouseEvent.hpp"
// Including type: UnityEngine.UIElements.IMouseEventInternal
#include "UnityEngine/UIElements/IMouseEventInternal.hpp"
// Including type: UnityEngine.EventModifiers
#include "UnityEngine/EventModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IPointerEvent
  class IPointerEvent;
  // Forward declaring type: IEventHandler
  class IEventHandler;
  // Forward declaring type: IPanel
  class IPanel;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Event
  class Event;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MouseEventBase`1<T>
  template<typename T>
  class MouseEventBase_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::MouseEventBase_1, "UnityEngine.UIElements", "MouseEventBase`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.MouseEventBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class MouseEventBase_1 : public ::UnityEngine::UIElements::EventBase_1<T>/*, public ::UnityEngine::UIElements::IMouseEvent, public ::UnityEngine::UIElements::IMouseEventInternal*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x940DE8
    // private UnityEngine.EventModifiers <modifiers>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::EventModifiers modifiers;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventModifiers) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x940E24
    // private UnityEngine.Vector2 <mousePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 mousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x940E60
    // private UnityEngine.Vector2 <localMousePosition>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 localMousePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x940E9C
    // private UnityEngine.Vector2 <mouseDelta>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 mouseDelta;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x940ED8
    // private System.Int32 <clickCount>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int clickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x940F14
    // private System.Int32 <button>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int button;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x940F50
    // private System.Int32 <pressedButtons>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int pressedButtons;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x940F8C
    // private System.Boolean <UnityEngine.UIElements.IMouseEventInternal.triggeredByOS>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool triggeredByOS;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0x940FC8
    // private System.Boolean <UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool recomputeTopElementUnderMouse;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0x941004
    // private UnityEngine.UIElements.IPointerEvent <UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::UIElements::IPointerEvent* sourcePointerEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IPointerEvent*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IMouseEvent
    operator ::UnityEngine::UIElements::IMouseEvent() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IMouseEvent*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IMouseEventInternal
    operator ::UnityEngine::UIElements::IMouseEventInternal() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IMouseEventInternal*>(this);
    }
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.EventModifiers <modifiers>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventModifiers& dyn_$modifiers$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$modifiers$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<modifiers>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::EventModifiers*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector2 <mousePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$mousePosition$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$mousePosition$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<mousePosition>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector2 <localMousePosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$localMousePosition$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$localMousePosition$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<localMousePosition>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector2 <mouseDelta>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$mouseDelta$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$mouseDelta$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<mouseDelta>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <clickCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$clickCount$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$clickCount$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<clickCount>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <button>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$button$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$button$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<button>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <pressedButtons>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pressedButtons$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$pressedButtons$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pressedButtons>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <UnityEngine.UIElements.IMouseEventInternal.triggeredByOS>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UnityEngine_UIElements_IMouseEventInternal_triggeredByOS$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$UnityEngine_UIElements_IMouseEventInternal_triggeredByOS$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UnityEngine.UIElements.IMouseEventInternal.triggeredByOS>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UnityEngine_UIElements_IMouseEventInternal_recomputeTopElementUnderMouse$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$UnityEngine_UIElements_IMouseEventInternal_recomputeTopElementUnderMouse$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UnityEngine.UIElements.IMouseEventInternal.recomputeTopElementUnderMouse>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.IPointerEvent <UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IPointerEvent*& dyn_$UnityEngine_UIElements_IMouseEventInternal_sourcePointerEvent$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::dyn_$UnityEngine_UIElements_IMouseEventInternal_sourcePointerEvent$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UnityEngine.UIElements.IMouseEventInternal.sourcePointerEvent>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::IPointerEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public UnityEngine.EventModifiers get_modifiers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::EventModifiers get_modifiers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_modifiers");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::EventModifiers, false>(this, ___internal__method);
    }
    // protected System.Void set_modifiers(UnityEngine.EventModifiers value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_modifiers(::UnityEngine::EventModifiers value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_modifiers");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector2 get_mousePosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 get_mousePosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_mousePosition");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
    }
    // protected System.Void set_mousePosition(UnityEngine.Vector2 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_mousePosition(::UnityEngine::Vector2 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_mousePosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mousePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // System.Void set_localMousePosition(UnityEngine.Vector2 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_localMousePosition(::UnityEngine::Vector2 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_localMousePosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localMousePosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector2 get_mouseDelta()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 get_mouseDelta() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_mouseDelta");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
    }
    // protected System.Void set_mouseDelta(UnityEngine.Vector2 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_mouseDelta(::UnityEngine::Vector2 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_mouseDelta");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_mouseDelta", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_clickCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_clickCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_clickCount");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_clickCount(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_clickCount(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_clickCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clickCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_button()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_button() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_button");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_button(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_button(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_button");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_pressedButtons()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_pressedButtons() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_pressedButtons");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_pressedButtons(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_pressedButtons(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_pressedButtons");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pressedButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Boolean UnityEngine.UIElements.IMouseEventInternal.get_triggeredByOS()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool UnityEngine_UIElements_IMouseEventInternal_get_triggeredByOS() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::UnityEngine.UIElements.IMouseEventInternal.get_triggeredByOS");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.IMouseEventInternal.set_triggeredByOS(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IMouseEventInternal_set_triggeredByOS(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::UnityEngine.UIElements.IMouseEventInternal.set_triggeredByOS");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Boolean UnityEngine.UIElements.IMouseEventInternal.get_recomputeTopElementUnderMouse()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool UnityEngine_UIElements_IMouseEventInternal_get_recomputeTopElementUnderMouse() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::UnityEngine.UIElements.IMouseEventInternal.get_recomputeTopElementUnderMouse");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.IMouseEventInternal.set_recomputeTopElementUnderMouse(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IMouseEventInternal_set_recomputeTopElementUnderMouse(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::UnityEngine.UIElements.IMouseEventInternal.set_recomputeTopElementUnderMouse");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private UnityEngine.UIElements.IPointerEvent UnityEngine.UIElements.IMouseEventInternal.get_sourcePointerEvent()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::IPointerEvent* UnityEngine_UIElements_IMouseEventInternal_get_sourcePointerEvent() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::UnityEngine.UIElements.IMouseEventInternal.get_sourcePointerEvent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::IPointerEvent*, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.IMouseEventInternal.set_sourcePointerEvent(UnityEngine.UIElements.IPointerEvent value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IMouseEventInternal_set_sourcePointerEvent(::UnityEngine::UIElements::IPointerEvent* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::UnityEngine.UIElements.IMouseEventInternal.set_sourcePointerEvent");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::MouseEventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // static public T GetPooled(UnityEngine.Event systemEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::Event* systemEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<MouseEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(systemEvent)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, systemEvent);
    }
    // static T GetPooled(UnityEngine.UIElements.IMouseEvent triggerEvent, UnityEngine.Vector2 mousePosition, System.Boolean recomputeTopElementUnderMouse)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::IMouseEvent* triggerEvent, ::UnityEngine::Vector2 mousePosition, bool recomputeTopElementUnderMouse) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<MouseEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triggerEvent), ::il2cpp_utils::ExtractType(mousePosition), ::il2cpp_utils::ExtractType(recomputeTopElementUnderMouse)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, triggerEvent, mousePosition, recomputeTopElementUnderMouse);
    }
    // static public T GetPooled(UnityEngine.UIElements.IMouseEvent triggerEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::IMouseEvent* triggerEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<MouseEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triggerEvent)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, triggerEvent);
    }
    // static protected T GetPooled(UnityEngine.UIElements.IPointerEvent pointerEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::IPointerEvent* pointerEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<MouseEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(pointerEvent)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, pointerEvent);
    }
    // public override UnityEngine.UIElements.IEventHandler get_currentTarget()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: UnityEngine.UIElements.IEventHandler EventBase::get_currentTarget()
    ::UnityEngine::UIElements::IEventHandler* get_currentTarget() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::get_currentTarget");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::IEventHandler*, false>(this, ___internal__method);
    }
    // override System.Void set_currentTarget(UnityEngine.UIElements.IEventHandler value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::set_currentTarget(UnityEngine.UIElements.IEventHandler value)
    void set_currentTarget(::UnityEngine::UIElements::IEventHandler* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::set_currentTarget");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::.ctor()
    // Base method: System.Void EventBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseEventBase_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseEventBase_1<T>*, creationType>()));
    }
    // protected override System.Void Init()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::Init()
    void Init() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::Init");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void LocalInit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::LocalInit()
    void LocalInit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::LocalInit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected internal override System.Void PreDispatch(UnityEngine.UIElements.IPanel panel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::PreDispatch(UnityEngine.UIElements.IPanel panel)
    void PreDispatch(::UnityEngine::UIElements::IPanel* panel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::PreDispatch");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, panel);
    }
    // protected internal override System.Void PostDispatch(UnityEngine.UIElements.IPanel panel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::PostDispatch(UnityEngine.UIElements.IPanel panel)
    void PostDispatch(::UnityEngine::UIElements::IPanel* panel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseEventBase_1::PostDispatch");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, panel);
    }
  }; // UnityEngine.UIElements.MouseEventBase`1
  // Could not write size check! Type: UnityEngine.UIElements.MouseEventBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
