// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IEventHandler
  class IEventHandler;
  // Forward declaring type: IPointerEvent
  class IPointerEvent;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: PointerDispatchState
  class PointerDispatchState;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::PointerDispatchState);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::PointerDispatchState*, "UnityEngine.UIElements", "PointerDispatchState");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.PointerDispatchState
  // [TokenAttribute] Offset: FFFFFFFF
  class PointerDispatchState : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.IEventHandler[] m_PendingPointerCapture
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::UIElements::IEventHandler*> m_PendingPointerCapture;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::IEventHandler*>) == 0x8);
    // private UnityEngine.UIElements.IEventHandler[] m_PointerCapture
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::UIElements::IEventHandler*> m_PointerCapture;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::IEventHandler*>) == 0x8);
    // private System.Boolean[] m_ShouldSendCompatibilityMouseEvents
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<bool> m_ShouldSendCompatibilityMouseEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.IEventHandler[] m_PendingPointerCapture
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::IEventHandler*>& dyn_m_PendingPointerCapture();
    // Get instance field reference: private UnityEngine.UIElements.IEventHandler[] m_PointerCapture
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::IEventHandler*>& dyn_m_PointerCapture();
    // Get instance field reference: private System.Boolean[] m_ShouldSendCompatibilityMouseEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_ShouldSendCompatibilityMouseEvents();
    // public System.Void .ctor()
    // Offset: 0xDA1A28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointerDispatchState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerDispatchState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointerDispatchState*, creationType>()));
    }
    // System.Void Reset()
    // Offset: 0xDAA4C4
    void Reset();
    // public UnityEngine.UIElements.IEventHandler GetCapturingElement(System.Int32 pointerId)
    // Offset: 0xDA9514
    ::UnityEngine::UIElements::IEventHandler* GetCapturingElement(int pointerId);
    // public System.Boolean HasPointerCapture(UnityEngine.UIElements.IEventHandler handler, System.Int32 pointerId)
    // Offset: 0xDA932C
    bool HasPointerCapture(::UnityEngine::UIElements::IEventHandler* handler, int pointerId);
    // public System.Void CapturePointer(UnityEngine.UIElements.IEventHandler handler, System.Int32 pointerId)
    // Offset: 0xDA9370
    void CapturePointer(::UnityEngine::UIElements::IEventHandler* handler, int pointerId);
    // public System.Void ReleasePointer(System.Int32 pointerId)
    // Offset: 0xDA9550
    void ReleasePointer(int pointerId);
    // public System.Void ReleasePointer(UnityEngine.UIElements.IEventHandler handler, System.Int32 pointerId)
    // Offset: 0xDA94CC
    void ReleasePointer(::UnityEngine::UIElements::IEventHandler* handler, int pointerId);
    // public System.Void ProcessPointerCapture(System.Int32 pointerId)
    // Offset: 0xDA9924
    void ProcessPointerCapture(int pointerId);
    // public System.Void ActivateCompatibilityMouseEvents(System.Int32 pointerId)
    // Offset: 0xDA966C
    void ActivateCompatibilityMouseEvents(int pointerId);
    // public System.Void PreventCompatibilityMouseEvents(System.Int32 pointerId)
    // Offset: 0xDA978C
    void PreventCompatibilityMouseEvents(int pointerId);
    // public System.Boolean ShouldSendCompatibilityMouseEvents(UnityEngine.UIElements.IPointerEvent evt)
    // Offset: 0xDA97C8
    bool ShouldSendCompatibilityMouseEvents(::UnityEngine::UIElements::IPointerEvent* evt);
  }; // UnityEngine.UIElements.PointerDispatchState
  #pragma pack(pop)
  static check_size<sizeof(PointerDispatchState), 32 + sizeof(::ArrayW<bool>)> __UnityEngine_UIElements_PointerDispatchStateSizeCheck;
  static_assert(sizeof(PointerDispatchState) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)()>(&UnityEngine::UIElements::PointerDispatchState::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::GetCapturingElement
// Il2CppName: GetCapturingElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IEventHandler* (UnityEngine::UIElements::PointerDispatchState::*)(int)>(&UnityEngine::UIElements::PointerDispatchState::GetCapturingElement)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "GetCapturingElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::HasPointerCapture
// Il2CppName: HasPointerCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::PointerDispatchState::*)(::UnityEngine::UIElements::IEventHandler*, int)>(&UnityEngine::UIElements::PointerDispatchState::HasPointerCapture)> {
  static const MethodInfo* get() {
    static auto* handler = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IEventHandler")->byval_arg;
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "HasPointerCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handler, pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::CapturePointer
// Il2CppName: CapturePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)(::UnityEngine::UIElements::IEventHandler*, int)>(&UnityEngine::UIElements::PointerDispatchState::CapturePointer)> {
  static const MethodInfo* get() {
    static auto* handler = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IEventHandler")->byval_arg;
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "CapturePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handler, pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::ReleasePointer
// Il2CppName: ReleasePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)(int)>(&UnityEngine::UIElements::PointerDispatchState::ReleasePointer)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "ReleasePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::ReleasePointer
// Il2CppName: ReleasePointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)(::UnityEngine::UIElements::IEventHandler*, int)>(&UnityEngine::UIElements::PointerDispatchState::ReleasePointer)> {
  static const MethodInfo* get() {
    static auto* handler = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IEventHandler")->byval_arg;
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "ReleasePointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handler, pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::ProcessPointerCapture
// Il2CppName: ProcessPointerCapture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)(int)>(&UnityEngine::UIElements::PointerDispatchState::ProcessPointerCapture)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "ProcessPointerCapture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::ActivateCompatibilityMouseEvents
// Il2CppName: ActivateCompatibilityMouseEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)(int)>(&UnityEngine::UIElements::PointerDispatchState::ActivateCompatibilityMouseEvents)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "ActivateCompatibilityMouseEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::PreventCompatibilityMouseEvents
// Il2CppName: PreventCompatibilityMouseEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::PointerDispatchState::*)(int)>(&UnityEngine::UIElements::PointerDispatchState::PreventCompatibilityMouseEvents)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "PreventCompatibilityMouseEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::PointerDispatchState::ShouldSendCompatibilityMouseEvents
// Il2CppName: ShouldSendCompatibilityMouseEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::PointerDispatchState::*)(::UnityEngine::UIElements::IPointerEvent*)>(&UnityEngine::UIElements::PointerDispatchState::ShouldSendCompatibilityMouseEvents)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IPointerEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::PointerDispatchState*), "ShouldSendCompatibilityMouseEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
