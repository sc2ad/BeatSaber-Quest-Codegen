// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.IEventDispatchingStrategy
#include "UnityEngine/UIElements/IEventDispatchingStrategy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: IPanel
  class IPanel;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: MouseCaptureDispatchingStrategy
  class MouseCaptureDispatchingStrategy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::MouseCaptureDispatchingStrategy);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::MouseCaptureDispatchingStrategy*, "UnityEngine.UIElements", "MouseCaptureDispatchingStrategy");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.MouseCaptureDispatchingStrategy
  // [TokenAttribute] Offset: FFFFFFFF
  class MouseCaptureDispatchingStrategy : public ::Il2CppObject/*, public ::UnityEngine::UIElements::IEventDispatchingStrategy*/ {
    public:
    // Nested type: ::UnityEngine::UIElements::MouseCaptureDispatchingStrategy::EventBehavior
    struct EventBehavior;
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IEventDispatchingStrategy
    operator ::UnityEngine::UIElements::IEventDispatchingStrategy() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IEventDispatchingStrategy*>(this);
    }
    // public System.Void .ctor()
    // Offset: 0xDA1B00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseCaptureDispatchingStrategy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::MouseCaptureDispatchingStrategy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseCaptureDispatchingStrategy*, creationType>()));
    }
    // public System.Boolean CanDispatchEvent(UnityEngine.UIElements.EventBase evt)
    // Offset: 0xDA615C
    bool CanDispatchEvent(::UnityEngine::UIElements::EventBase* evt);
    // public System.Void DispatchEvent(UnityEngine.UIElements.EventBase evt, UnityEngine.UIElements.IPanel panel)
    // Offset: 0xDA61E0
    void DispatchEvent(::UnityEngine::UIElements::EventBase* evt, ::UnityEngine::UIElements::IPanel* panel);
  }; // UnityEngine.UIElements.MouseCaptureDispatchingStrategy
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseCaptureDispatchingStrategy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseCaptureDispatchingStrategy::CanDispatchEvent
// Il2CppName: CanDispatchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::UIElements::MouseCaptureDispatchingStrategy::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::MouseCaptureDispatchingStrategy::CanDispatchEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseCaptureDispatchingStrategy*), "CanDispatchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::MouseCaptureDispatchingStrategy::DispatchEvent
// Il2CppName: DispatchEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::MouseCaptureDispatchingStrategy::*)(::UnityEngine::UIElements::EventBase*, ::UnityEngine::UIElements::IPanel*)>(&UnityEngine::UIElements::MouseCaptureDispatchingStrategy::DispatchEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* panel = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "IPanel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::MouseCaptureDispatchingStrategy*), "DispatchEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt, panel});
  }
};
