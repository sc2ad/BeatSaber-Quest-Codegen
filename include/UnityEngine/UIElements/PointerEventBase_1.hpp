// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.EventBase`1
#include "UnityEngine/UIElements/EventBase_1.hpp"
// Including type: UnityEngine.UIElements.IPointerEvent
#include "UnityEngine/UIElements/IPointerEvent.hpp"
// Including type: UnityEngine.UIElements.IPointerEventInternal
#include "UnityEngine/UIElements/IPointerEventInternal.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.EventModifiers
#include "UnityEngine/EventModifiers.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Event
  class Event;
}
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: IEventHandler
  class IEventHandler;
  // Forward declaring type: IPanel
  class IPanel;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: PointerEventBase`1<T>
  template<typename T>
  class PointerEventBase_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::UnityEngine::UIElements::PointerEventBase_1, "UnityEngine.UIElements", "PointerEventBase`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.UIElements.PointerEventBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class PointerEventBase_1 : public ::UnityEngine::UIElements::EventBase_1<T>/*, public ::UnityEngine::UIElements::IPointerEvent, public ::UnityEngine::UIElements::IPointerEventInternal*/ {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x94107C
    // private System.Int32 <pointerId>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int pointerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x9410B8
    // private System.String <pointerType>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW pointerType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x9410F4
    // private System.Boolean <isPrimary>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool isPrimary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0x941130
    // private System.Int32 <button>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int button;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x94116C
    // private System.Int32 <pressedButtons>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int pressedButtons;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x9411A8
    // private UnityEngine.Vector3 <position>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [DebuggerBrowsableAttribute] Offset: 0x9411E4
    // private UnityEngine.Vector3 <localPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [DebuggerBrowsableAttribute] Offset: 0x941220
    // private UnityEngine.Vector3 <deltaPosition>k__BackingField
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 deltaPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [DebuggerBrowsableAttribute] Offset: 0x94125C
    // private System.Single <deltaTime>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x941298
    // private System.Int32 <clickCount>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int clickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x9412D4
    // private System.Single <pressure>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float pressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x941310
    // private System.Single <tangentialPressure>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float tangentialPressure;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x94134C
    // private System.Single <altitudeAngle>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float altitudeAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x941388
    // private System.Single <azimuthAngle>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float azimuthAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x9413C4
    // private System.Single <twist>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    float twist;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x941400
    // private UnityEngine.Vector2 <radius>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 radius;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x94143C
    // private UnityEngine.Vector2 <radiusVariance>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::UnityEngine::Vector2 radiusVariance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x941478
    // private UnityEngine.EventModifiers <modifiers>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::EventModifiers modifiers;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventModifiers) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x9414B4
    // private System.Boolean <UnityEngine.UIElements.IPointerEventInternal.triggeredByOS>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool triggeredByOS;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [DebuggerBrowsableAttribute] Offset: 0x9414F0
    // private System.Boolean <UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool recomputeTopElementUnderPointer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IPointerEvent
    operator ::UnityEngine::UIElements::IPointerEvent() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IPointerEvent*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IPointerEventInternal
    operator ::UnityEngine::UIElements::IPointerEventInternal() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IPointerEventInternal*>(this);
    }
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <pointerId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pointerId$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$pointerId$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pointerId>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String <pointerType>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$pointerType$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$pointerType$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pointerType>k__BackingField"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <isPrimary>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isPrimary$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$isPrimary$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<isPrimary>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <button>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$button$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$button$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<button>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <pressedButtons>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$pressedButtons$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$pressedButtons$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pressedButtons>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector3 <position>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$position$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$position$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<position>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector3 <localPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$localPosition$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$localPosition$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<localPosition>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector3 <deltaPosition>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$deltaPosition$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$deltaPosition$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<deltaPosition>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector3*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <deltaTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$deltaTime$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$deltaTime$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<deltaTime>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 <clickCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$clickCount$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$clickCount$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<clickCount>k__BackingField"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <pressure>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$pressure$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$pressure$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<pressure>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <tangentialPressure>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$tangentialPressure$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$tangentialPressure$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<tangentialPressure>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <altitudeAngle>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$altitudeAngle$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$altitudeAngle$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<altitudeAngle>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <azimuthAngle>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$azimuthAngle$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$azimuthAngle$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<azimuthAngle>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Single <twist>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$twist$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$twist$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<twist>k__BackingField"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector2 <radius>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$radius$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$radius$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<radius>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.Vector2 <radiusVariance>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$radiusVariance$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$radiusVariance$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<radiusVariance>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::Vector2*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.EventModifiers <modifiers>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventModifiers& dyn_$modifiers$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$modifiers$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<modifiers>k__BackingField"))->offset;
      return *reinterpret_cast<::UnityEngine::EventModifiers*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <UnityEngine.UIElements.IPointerEventInternal.triggeredByOS>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UnityEngine_UIElements_IPointerEventInternal_triggeredByOS$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$UnityEngine_UIElements_IPointerEventInternal_triggeredByOS$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UnityEngine.UIElements.IPointerEventInternal.triggeredByOS>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UnityEngine_UIElements_IPointerEventInternal_recomputeTopElementUnderPointer$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::dyn_$UnityEngine_UIElements_IPointerEventInternal_recomputeTopElementUnderPointer$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UnityEngine.UIElements.IPointerEventInternal.recomputeTopElementUnderPointer>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_pointerId()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_pointerId() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_pointerId");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_pointerId(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_pointerId(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_pointerId");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pointerId", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.String get_pointerType()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_pointerType() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_pointerType");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // protected System.Void set_pointerType(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_pointerType(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_pointerType");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pointerType", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_isPrimary()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isPrimary() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_isPrimary");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // protected System.Void set_isPrimary(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_isPrimary(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_isPrimary");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_isPrimary", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_button()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_button() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_button");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_button(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_button(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_button");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_button", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_pressedButtons()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_pressedButtons() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_pressedButtons");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_pressedButtons(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_pressedButtons(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_pressedButtons");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pressedButtons", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector3 get_position()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 get_position() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_position");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
    }
    // protected System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_position(::UnityEngine::Vector3 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_position");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_position", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector3 get_localPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 get_localPosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_localPosition");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
    }
    // protected System.Void set_localPosition(UnityEngine.Vector3 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_localPosition(::UnityEngine::Vector3 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_localPosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_localPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector3 get_deltaPosition()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector3 get_deltaPosition() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_deltaPosition");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector3, false>(this, ___internal__method);
    }
    // protected System.Void set_deltaPosition(UnityEngine.Vector3 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_deltaPosition(::UnityEngine::Vector3 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_deltaPosition");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_deltaPosition", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_deltaTime()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_deltaTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_deltaTime");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_deltaTime(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_deltaTime(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_deltaTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_deltaTime", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_clickCount()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_clickCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_clickCount");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // protected System.Void set_clickCount(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_clickCount(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_clickCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_clickCount", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_pressure()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_pressure() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_pressure");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_pressure(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_pressure(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_pressure");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_pressure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_tangentialPressure()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_tangentialPressure() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_tangentialPressure");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_tangentialPressure(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_tangentialPressure(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_tangentialPressure");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_tangentialPressure", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_altitudeAngle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_altitudeAngle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_altitudeAngle");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_altitudeAngle(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_altitudeAngle(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_altitudeAngle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_altitudeAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_azimuthAngle()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_azimuthAngle() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_azimuthAngle");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_azimuthAngle(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_azimuthAngle(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_azimuthAngle");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_azimuthAngle", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_twist()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_twist() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_twist");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_twist(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_twist(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_twist");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_twist", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector2 get_radius()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 get_radius() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_radius");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
    }
    // protected System.Void set_radius(UnityEngine.Vector2 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_radius(::UnityEngine::Vector2 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_radius");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_radius", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.Vector2 get_radiusVariance()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::Vector2 get_radiusVariance() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_radiusVariance");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::Vector2, false>(this, ___internal__method);
    }
    // protected System.Void set_radiusVariance(UnityEngine.Vector2 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_radiusVariance(::UnityEngine::Vector2 value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_radiusVariance");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_radiusVariance", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.EventModifiers get_modifiers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::EventModifiers get_modifiers() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_modifiers");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::EventModifiers, false>(this, ___internal__method);
    }
    // protected System.Void set_modifiers(UnityEngine.EventModifiers value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_modifiers(::UnityEngine::EventModifiers value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_modifiers");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_modifiers", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Boolean UnityEngine.UIElements.IPointerEventInternal.get_triggeredByOS()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool UnityEngine_UIElements_IPointerEventInternal_get_triggeredByOS() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::UnityEngine.UIElements.IPointerEventInternal.get_triggeredByOS");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.IPointerEventInternal.set_triggeredByOS(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IPointerEventInternal_set_triggeredByOS(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::UnityEngine.UIElements.IPointerEventInternal.set_triggeredByOS");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // private System.Boolean UnityEngine.UIElements.IPointerEventInternal.get_recomputeTopElementUnderPointer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool UnityEngine_UIElements_IPointerEventInternal_get_recomputeTopElementUnderPointer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::UnityEngine.UIElements.IPointerEventInternal.get_recomputeTopElementUnderPointer");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void UnityEngine.UIElements.IPointerEventInternal.set_recomputeTopElementUnderPointer(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void UnityEngine_UIElements_IPointerEventInternal_set_recomputeTopElementUnderPointer(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::UnityEngine.UIElements.IPointerEventInternal.set_recomputeTopElementUnderPointer");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::PointerEventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // static private System.Boolean IsMouse(UnityEngine.Event systemEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static bool IsMouse(::UnityEngine::Event* systemEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::IsMouse");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PointerEventBase_1<T>*>::get(), "IsMouse", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(systemEvent)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, systemEvent);
    }
    // static public T GetPooled(UnityEngine.Event systemEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::Event* systemEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PointerEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(systemEvent)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, systemEvent);
    }
    // static T GetPooled(UnityEngine.UIElements.IPointerEvent triggerEvent, UnityEngine.Vector2 position, System.Int32 pointerId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::IPointerEvent* triggerEvent, ::UnityEngine::Vector2 position, int pointerId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PointerEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triggerEvent), ::il2cpp_utils::ExtractType(position), ::il2cpp_utils::ExtractType(pointerId)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, triggerEvent, position, pointerId);
    }
    // static public T GetPooled(UnityEngine.UIElements.IPointerEvent triggerEvent)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static T GetPooled(::UnityEngine::UIElements::IPointerEvent* triggerEvent) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::GetPooled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PointerEventBase_1<T>*>::get(), "GetPooled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(triggerEvent)})));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, triggerEvent);
    }
    // public override UnityEngine.UIElements.IEventHandler get_currentTarget()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: UnityEngine.UIElements.IEventHandler EventBase::get_currentTarget()
    ::UnityEngine::UIElements::IEventHandler* get_currentTarget() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::get_currentTarget");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::IEventHandler*, false>(this, ___internal__method);
    }
    // override System.Void set_currentTarget(UnityEngine.UIElements.IEventHandler value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::set_currentTarget(UnityEngine.UIElements.IEventHandler value)
    void set_currentTarget(::UnityEngine::UIElements::IEventHandler* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::set_currentTarget");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::.ctor()
    // Base method: System.Void EventBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PointerEventBase_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PointerEventBase_1<T>*, creationType>()));
    }
    // protected override System.Void Init()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase`1
    // Base method: System.Void EventBase_1::Init()
    void Init() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::Init");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void LocalInit()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::LocalInit()
    void LocalInit() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::LocalInit");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "LocalInit", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // protected internal override System.Void PreDispatch(UnityEngine.UIElements.IPanel panel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::PreDispatch(UnityEngine.UIElements.IPanel panel)
    void PreDispatch(::UnityEngine::UIElements::IPanel* panel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::PreDispatch");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, panel);
    }
    // protected internal override System.Void PostDispatch(UnityEngine.UIElements.IPanel panel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: UnityEngine.UIElements.EventBase
    // Base method: System.Void EventBase::PostDispatch(UnityEngine.UIElements.IPanel panel)
    void PostDispatch(::UnityEngine::UIElements::IPanel* panel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::PointerEventBase_1::PostDispatch");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::UnityEngine::UIElements::EventBase*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, panel);
    }
  }; // UnityEngine.UIElements.PointerEventBase`1
  // Could not write size check! Type: UnityEngine.UIElements.PointerEventBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
