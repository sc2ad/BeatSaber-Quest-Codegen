// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.BaseVisualElementPanel
#include "UnityEngine/UIElements/BaseVisualElementPanel.hpp"
// Including type: Unity.Profiling.ProfilerMarker
#include "Unity/Profiling/ProfilerMarker.hpp"
// Including type: UnityEngine.UIElements.ContextType
#include "UnityEngine/UIElements/ContextType.hpp"
// Including type: UnityEngine.EventInterests
#include "UnityEngine/EventInterests.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: VisualTreeUpdater
  class VisualTreeUpdater;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
  // Forward declaring type: FocusController
  class FocusController;
  // Forward declaring type: IMGUIContainer
  class IMGUIContainer;
  // Forward declaring type: VersionChangeType
  struct VersionChangeType;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ScriptableObject
  class ScriptableObject;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Event
  class Event;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: Panel
  class Panel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::Panel);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::Panel*, "UnityEngine.UIElements", "Panel");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x81
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.Panel
  // [TokenAttribute] Offset: FFFFFFFF
  class Panel : public ::UnityEngine::UIElements::BaseVisualElementPanel {
    public:
    public:
    // private UnityEngine.UIElements.VisualElement m_RootContainer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UIElements::VisualElement* m_RootContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualElement*) == 0x8);
    // private UnityEngine.UIElements.VisualTreeUpdater m_VisualTreeUpdater
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UIElements::VisualTreeUpdater* m_VisualTreeUpdater;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::VisualTreeUpdater*) == 0x8);
    // private System.UInt32 m_Version
    // Size: 0x4
    // Offset: 0x40
    uint m_Version;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 m_RepaintVersion
    // Size: 0x4
    // Offset: 0x44
    uint m_RepaintVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private Unity.Profiling.ProfilerMarker m_MarkerUpdate
    // Size: 0x8
    // Offset: 0x48
    ::Unity::Profiling::ProfilerMarker m_MarkerUpdate;
    // Field size check
    static_assert(sizeof(::Unity::Profiling::ProfilerMarker) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x940578
    // private UnityEngine.UIElements.EventDispatcher <dispatcher>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UIElements::EventDispatcher* dispatcher;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::EventDispatcher*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x9405B4
    // private UnityEngine.ScriptableObject <ownerObject>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::ScriptableObject* ownerObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::ScriptableObject*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x9405F0
    // private UnityEngine.UIElements.ContextType <contextType>k__BackingField
    // Size: 0x4
    // Offset: 0x60
    ::UnityEngine::UIElements::ContextType contextType;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::ContextType) == 0x4);
    // Padding between fields: contextType and: focusController
    char __padding7[0x4] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x94062C
    // private UnityEngine.UIElements.FocusController <focusController>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UIElements::FocusController* focusController;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::FocusController*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0x940668
    // private UnityEngine.EventInterests <IMGUIEventInterests>k__BackingField
    // Size: 0x2
    // Offset: 0x70
    ::UnityEngine::EventInterests IMGUIEventInterests;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventInterests) == 0x2);
    // Padding between fields: IMGUIEventInterests and: IMGUIContainersCount
    char __padding9[0x2] = {};
    // [DebuggerBrowsableAttribute] Offset: 0x9406A4
    // private System.Int32 <IMGUIContainersCount>k__BackingField
    // Size: 0x4
    // Offset: 0x74
    int IMGUIContainersCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0x9406E0
    // private UnityEngine.UIElements.IMGUIContainer <rootIMGUIContainer>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UIElements::IMGUIContainer* rootIMGUIContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::IMGUIContainer*) == 0x8);
    // private System.Boolean m_ValidatingLayout
    // Size: 0x1
    // Offset: 0x80
    bool m_ValidatingLayout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private Unity.Profiling.ProfilerMarker s_MarkerPickAll
    static ::Unity::Profiling::ProfilerMarker _get_s_MarkerPickAll();
    // Set static field: static private Unity.Profiling.ProfilerMarker s_MarkerPickAll
    static void _set_s_MarkerPickAll(::Unity::Profiling::ProfilerMarker value);
    // Get instance field reference: private UnityEngine.UIElements.VisualElement m_RootContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualElement*& dyn_m_RootContainer();
    // Get instance field reference: private UnityEngine.UIElements.VisualTreeUpdater m_VisualTreeUpdater
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::VisualTreeUpdater*& dyn_m_VisualTreeUpdater();
    // Get instance field reference: private System.UInt32 m_Version
    [[deprecated("Use field access instead!")]] uint& dyn_m_Version();
    // Get instance field reference: private System.UInt32 m_RepaintVersion
    [[deprecated("Use field access instead!")]] uint& dyn_m_RepaintVersion();
    // Get instance field reference: private Unity.Profiling.ProfilerMarker m_MarkerUpdate
    [[deprecated("Use field access instead!")]] ::Unity::Profiling::ProfilerMarker& dyn_m_MarkerUpdate();
    // Get instance field reference: private UnityEngine.UIElements.EventDispatcher <dispatcher>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::EventDispatcher*& dyn_$dispatcher$k__BackingField();
    // Get instance field reference: private UnityEngine.ScriptableObject <ownerObject>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::ScriptableObject*& dyn_$ownerObject$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.ContextType <contextType>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::ContextType& dyn_$contextType$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.FocusController <focusController>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::FocusController*& dyn_$focusController$k__BackingField();
    // Get instance field reference: private UnityEngine.EventInterests <IMGUIEventInterests>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventInterests& dyn_$IMGUIEventInterests$k__BackingField();
    // Get instance field reference: private System.Int32 <IMGUIContainersCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$IMGUIContainersCount$k__BackingField();
    // Get instance field reference: private UnityEngine.UIElements.IMGUIContainer <rootIMGUIContainer>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::IMGUIContainer*& dyn_$rootIMGUIContainer$k__BackingField();
    // Get instance field reference: private System.Boolean m_ValidatingLayout
    [[deprecated("Use field access instead!")]] bool& dyn_m_ValidatingLayout();
    // static private System.Void .cctor()
    // Offset: 0xDA86F0
    static void _cctor();
    // static private UnityEngine.UIElements.VisualElement PickAll(UnityEngine.UIElements.VisualElement root, UnityEngine.Vector2 point, System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> picked)
    // Offset: 0xDA7E00
    static ::UnityEngine::UIElements::VisualElement* PickAll(::UnityEngine::UIElements::VisualElement* root, ::UnityEngine::Vector2 point, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* picked);
    // static private UnityEngine.UIElements.VisualElement PerformPick(UnityEngine.UIElements.VisualElement root, UnityEngine.Vector2 point, System.Collections.Generic.List`1<UnityEngine.UIElements.VisualElement> picked)
    // Offset: 0xDA7E8C
    static ::UnityEngine::UIElements::VisualElement* PerformPick(::UnityEngine::UIElements::VisualElement* root, ::UnityEngine::Vector2 point, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>* picked);
    // private System.Void UpdateForRepaint()
    // Offset: 0xDA84C8
    void UpdateForRepaint();
    // public override UnityEngine.UIElements.VisualElement get_visualTree()
    // Offset: 0xDA7DB8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.VisualElement BaseVisualElementPanel::get_visualTree()
    ::UnityEngine::UIElements::VisualElement* get_visualTree();
    // public override UnityEngine.UIElements.EventDispatcher get_dispatcher()
    // Offset: 0xDA7DC0
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.EventDispatcher BaseVisualElementPanel::get_dispatcher()
    ::UnityEngine::UIElements::EventDispatcher* get_dispatcher();
    // public override UnityEngine.ScriptableObject get_ownerObject()
    // Offset: 0xDA7DC8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.ScriptableObject BaseVisualElementPanel::get_ownerObject()
    ::UnityEngine::ScriptableObject* get_ownerObject();
    // public override UnityEngine.UIElements.ContextType get_contextType()
    // Offset: 0xDA7DD0
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.ContextType BaseVisualElementPanel::get_contextType()
    ::UnityEngine::UIElements::ContextType get_contextType();
    // public override UnityEngine.UIElements.FocusController get_focusController()
    // Offset: 0xDA7DD8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.FocusController BaseVisualElementPanel::get_focusController()
    ::UnityEngine::UIElements::FocusController* get_focusController();
    // public override UnityEngine.EventInterests get_IMGUIEventInterests()
    // Offset: 0xDA7DE0
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.EventInterests BaseVisualElementPanel::get_IMGUIEventInterests()
    ::UnityEngine::EventInterests get_IMGUIEventInterests();
    // public override System.Int32 get_IMGUIContainersCount()
    // Offset: 0xDA7DE8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Int32 BaseVisualElementPanel::get_IMGUIContainersCount()
    int get_IMGUIContainersCount();
    // public override UnityEngine.UIElements.IMGUIContainer get_rootIMGUIContainer()
    // Offset: 0xDA7DF0
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.IMGUIContainer BaseVisualElementPanel::get_rootIMGUIContainer()
    ::UnityEngine::UIElements::IMGUIContainer* get_rootIMGUIContainer();
    // override System.UInt32 get_version()
    // Offset: 0xDA7DF8
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.UInt32 BaseVisualElementPanel::get_version()
    uint get_version();
    // public override UnityEngine.UIElements.VisualElement Pick(UnityEngine.Vector2 point)
    // Offset: 0xDA82CC
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: UnityEngine.UIElements.VisualElement BaseVisualElementPanel::Pick(UnityEngine.Vector2 point)
    ::UnityEngine::UIElements::VisualElement* Pick(::UnityEngine::Vector2 point);
    // public override System.Void ValidateLayout()
    // Offset: 0xDA8458
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::ValidateLayout()
    void ValidateLayout();
    // public override System.Void Repaint(UnityEngine.Event e)
    // Offset: 0xDA8548
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::Repaint(UnityEngine.Event e)
    void Repaint(::UnityEngine::Event* e);
    // override System.Void OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    // Offset: 0xDA86C4
    // Implemented from: UnityEngine.UIElements.BaseVisualElementPanel
    // Base method: System.Void BaseVisualElementPanel::OnVersionChanged(UnityEngine.UIElements.VisualElement ve, UnityEngine.UIElements.VersionChangeType versionChangeType)
    void OnVersionChanged(::UnityEngine::UIElements::VisualElement* ve, ::UnityEngine::UIElements::VersionChangeType versionChangeType);
  }; // UnityEngine.UIElements.Panel
  #pragma pack(pop)
  static check_size<sizeof(Panel), 128 + sizeof(bool)> __UnityEngine_UIElements_PanelSizeCheck;
  static_assert(sizeof(Panel) == 0x81);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::Panel::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::PickAll
// Il2CppName: PickAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::Vector2, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*)>(&UnityEngine::UIElements::Panel::PickAll)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* picked = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "PickAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, point, picked});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::PerformPick
// Il2CppName: PerformPick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::Vector2, ::System::Collections::Generic::List_1<::UnityEngine::UIElements::VisualElement*>*)>(&UnityEngine::UIElements::Panel::PerformPick)> {
  static const MethodInfo* get() {
    static auto* root = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* picked = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "PerformPick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{root, point, picked});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::UpdateForRepaint
// Il2CppName: UpdateForRepaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::UpdateForRepaint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "UpdateForRepaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_visualTree
// Il2CppName: get_visualTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_visualTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_visualTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_dispatcher
// Il2CppName: get_dispatcher
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::EventDispatcher* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_dispatcher)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_dispatcher", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_ownerObject
// Il2CppName: get_ownerObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::ScriptableObject* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_ownerObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_ownerObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_contextType
// Il2CppName: get_contextType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::ContextType (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_contextType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_contextType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_focusController
// Il2CppName: get_focusController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::FocusController* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_focusController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_focusController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_IMGUIEventInterests
// Il2CppName: get_IMGUIEventInterests
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventInterests (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_IMGUIEventInterests)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_IMGUIEventInterests", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_IMGUIContainersCount
// Il2CppName: get_IMGUIContainersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_IMGUIContainersCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_IMGUIContainersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_rootIMGUIContainer
// Il2CppName: get_rootIMGUIContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::IMGUIContainer* (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_rootIMGUIContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_rootIMGUIContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Pick
// Il2CppName: Pick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::Panel::*)(::UnityEngine::Vector2)>(&UnityEngine::UIElements::Panel::Pick)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Pick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::ValidateLayout
// Il2CppName: ValidateLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)()>(&UnityEngine::UIElements::Panel::ValidateLayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "ValidateLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::Repaint
// Il2CppName: Repaint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::Event*)>(&UnityEngine::UIElements::Panel::Repaint)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine", "Event")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "Repaint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::Panel::OnVersionChanged
// Il2CppName: OnVersionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::Panel::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::VersionChangeType)>(&UnityEngine::UIElements::Panel::OnVersionChanged)> {
  static const MethodInfo* get() {
    static auto* ve = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* versionChangeType = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VersionChangeType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::Panel*), "OnVersionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ve, versionChangeType});
  }
};
