// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.UIElements.IStyleValue`1
#include "UnityEngine/UIElements/IStyleValue_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IConvertible because it is already included!
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: StyleEnum`1<T>
  template<typename T>
  struct StyleEnum_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(::UnityEngine::UIElements::StyleEnum_1, "UnityEngine.UIElements", "StyleEnum`1");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.UIElements.StyleEnum`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  struct StyleEnum_1/*, public ::System::ValueType, public ::UnityEngine::UIElements::IStyleValue_1<T>, public ::System::IEquatable_1<::UnityEngine::UIElements::StyleEnum_1<T>>*/ {
    public:
    public:
    // private UnityEngine.UIElements.StyleKeyword m_Keyword
    // Size: 0x4
    // Offset: 0x0
    ::UnityEngine::UIElements::StyleKeyword m_Keyword;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleKeyword) == 0x4);
    // private T m_Value
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T m_Value;
    // private System.Int32 m_Specificity
    // Size: 0x4
    // Offset: 0x0
    int m_Specificity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: StyleEnum_1
    constexpr StyleEnum_1(::UnityEngine::UIElements::StyleKeyword m_Keyword_ = {}, T m_Value_ = {}, int m_Specificity_ = {}) noexcept : m_Keyword{m_Keyword_}, m_Value{m_Value_}, m_Specificity{m_Specificity_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UIElements::IStyleValue_1<T>
    operator ::UnityEngine::UIElements::IStyleValue_1<T>() noexcept {
      return *reinterpret_cast<::UnityEngine::UIElements::IStyleValue_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::UIElements::StyleEnum_1<T>>
    operator ::System::IEquatable_1<::UnityEngine::UIElements::StyleEnum_1<T>>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::UIElements::StyleEnum_1<T>>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private UnityEngine.UIElements.StyleKeyword m_Keyword
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleKeyword& dyn_m_Keyword() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::dyn_m_Keyword");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Keyword"))->offset;
      return *reinterpret_cast<::UnityEngine::UIElements::StyleKeyword*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T m_Value
    [[deprecated("Use field access instead!")]] T& dyn_m_Value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::dyn_m_Value");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Value"))->offset;
      return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 m_Specificity
    [[deprecated("Use field access instead!")]] int& dyn_m_Specificity() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::dyn_m_Specificity");
      auto ___internal__instance = *this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "m_Specificity"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T get_value()
    // Offset: 0xFFFFFFFFFFFFFFFF
    T get_value() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::get_value");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::StyleEnum_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___internal__method);
    }
    // System.Void set_specificity(System.Int32 value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_specificity(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::set_specificity");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, "set_specificity", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public UnityEngine.UIElements.StyleKeyword get_keyword()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::UnityEngine::UIElements::StyleKeyword get_keyword() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::get_keyword");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::StyleEnum_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<::UnityEngine::UIElements::StyleKeyword, false>(this, ___internal__method);
    }
    // System.Void .ctor(T v, UnityEngine.UIElements.StyleKeyword keyword)
    // Offset: 0xFFFFFFFFFFFFFFFF
    StyleEnum_1(T v, ::UnityEngine::UIElements::StyleKeyword keyword) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(v), ::il2cpp_utils::ExtractType(keyword)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, v, keyword);
    }
    // public System.Boolean Equals(UnityEngine.UIElements.StyleEnum`1<T> other)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Equals(::UnityEngine::UIElements::StyleEnum_1<T> other) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::UnityEngine::UIElements::StyleEnum_1<T>), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, other);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, obj);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(*this, classof(::System::ValueType*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // UnityEngine.UIElements.StyleEnum`1
  // Could not write size check! Type: UnityEngine.UIElements.StyleEnum`1 is generic, or has no fields that are valid for size checks!
  // static public System.Boolean op_Equality(UnityEngine.UIElements.StyleEnum`1<T> lhs, UnityEngine.UIElements.StyleEnum`1<T> rhs)
  // Offset: 0xFFFFFFFFFFFFFFFF
  inline bool operator ==(const ::UnityEngine::UIElements::StyleEnum_1<T>& lhs, const ::UnityEngine::UIElements::StyleEnum_1<T>& rhs) {
    static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleEnum_1::op_Equality");
    static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<StyleEnum_1<T>>::get(), "op_Equality", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(lhs), ::il2cpp_utils::ExtractType(rhs)})));
    return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, lhs, rhs);
  }
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
