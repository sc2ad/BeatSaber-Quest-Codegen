// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: VisualElement
  class VisualElement;
  // Forward declaring type: IPointerEvent
  class IPointerEvent;
  // Forward declaring type: IMouseEvent
  class IMouseEvent;
  // Forward declaring type: EventBase
  class EventBase;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Forward declaring type: ElementUnderPointer
  class ElementUnderPointer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::ElementUnderPointer);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::ElementUnderPointer*, "UnityEngine.UIElements", "ElementUnderPointer");
// Type namespace: UnityEngine.UIElements
namespace UnityEngine::UIElements {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.ElementUnderPointer
  // [TokenAttribute] Offset: FFFFFFFF
  class ElementUnderPointer : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.UIElements.VisualElement[] m_PendingTopElementUnderPointer
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::UIElements::VisualElement*> m_PendingTopElementUnderPointer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::VisualElement*>) == 0x8);
    // private UnityEngine.UIElements.VisualElement[] m_TopElementUnderPointer
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::UIElements::VisualElement*> m_TopElementUnderPointer;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::VisualElement*>) == 0x8);
    // private UnityEngine.UIElements.IPointerEvent[] m_TriggerPointerEvent
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::UIElements::IPointerEvent*> m_TriggerPointerEvent;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::IPointerEvent*>) == 0x8);
    // private UnityEngine.UIElements.IMouseEvent[] m_TriggerMouseEvent
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::UIElements::IMouseEvent*> m_TriggerMouseEvent;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIElements::IMouseEvent*>) == 0x8);
    // private UnityEngine.Vector2[] m_PickingPointerPositions
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector2> m_PickingPointerPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Boolean[] m_IsPickingPointerTemporaries
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<bool> m_IsPickingPointerTemporaries;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UIElements.VisualElement[] m_PendingTopElementUnderPointer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::VisualElement*>& dyn_m_PendingTopElementUnderPointer();
    // Get instance field reference: private UnityEngine.UIElements.VisualElement[] m_TopElementUnderPointer
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::VisualElement*>& dyn_m_TopElementUnderPointer();
    // Get instance field reference: private UnityEngine.UIElements.IPointerEvent[] m_TriggerPointerEvent
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::IPointerEvent*>& dyn_m_TriggerPointerEvent();
    // Get instance field reference: private UnityEngine.UIElements.IMouseEvent[] m_TriggerMouseEvent
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIElements::IMouseEvent*>& dyn_m_TriggerMouseEvent();
    // Get instance field reference: private UnityEngine.Vector2[] m_PickingPointerPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_m_PickingPointerPositions();
    // Get instance field reference: private System.Boolean[] m_IsPickingPointerTemporaries
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_m_IsPickingPointerTemporaries();
    // UnityEngine.UIElements.VisualElement GetTopElementUnderPointer(System.Int32 pointerId, out UnityEngine.Vector2 pickPosition, out System.Boolean isTemporary)
    // Offset: 0xD9F690
    ::UnityEngine::UIElements::VisualElement* GetTopElementUnderPointer(int pointerId, ByRef<::UnityEngine::Vector2> pickPosition, ByRef<bool> isTemporary);
    // UnityEngine.UIElements.VisualElement GetTopElementUnderPointer(System.Int32 pointerId)
    // Offset: 0xD9C708
    ::UnityEngine::UIElements::VisualElement* GetTopElementUnderPointer(int pointerId);
    // private UnityEngine.Vector2 GetEventPointerPosition(UnityEngine.UIElements.EventBase triggerEvent)
    // Offset: 0xD9F710
    ::UnityEngine::Vector2 GetEventPointerPosition(::UnityEngine::UIElements::EventBase* triggerEvent);
    // System.Void SetTemporaryElementUnderPointer(UnityEngine.UIElements.VisualElement newElementUnderPointer, UnityEngine.UIElements.EventBase triggerEvent)
    // Offset: 0xD9C78C
    void SetTemporaryElementUnderPointer(::UnityEngine::UIElements::VisualElement* newElementUnderPointer, ::UnityEngine::UIElements::EventBase* triggerEvent);
    // System.Void SetElementUnderPointer(UnityEngine.UIElements.VisualElement newElementUnderPointer, UnityEngine.UIElements.EventBase triggerEvent)
    // Offset: 0xD9C760
    void SetElementUnderPointer(::UnityEngine::UIElements::VisualElement* newElementUnderPointer, ::UnityEngine::UIElements::EventBase* triggerEvent);
    // private System.Void SetElementUnderPointer(UnityEngine.UIElements.VisualElement newElementUnderPointer, UnityEngine.UIElements.EventBase triggerEvent, System.Boolean temporary)
    // Offset: 0xD9F904
    void SetElementUnderPointer(::UnityEngine::UIElements::VisualElement* newElementUnderPointer, ::UnityEngine::UIElements::EventBase* triggerEvent, bool temporary);
    // System.Void CommitElementUnderPointers(UnityEngine.UIElements.EventDispatcher dispatcher)
    // Offset: 0xD9C7D0
    void CommitElementUnderPointers(::UnityEngine::UIElements::EventDispatcher* dispatcher);
  }; // UnityEngine.UIElements.ElementUnderPointer
  #pragma pack(pop)
  static check_size<sizeof(ElementUnderPointer), 56 + sizeof(::ArrayW<bool>)> __UnityEngine_UIElements_ElementUnderPointerSizeCheck;
  static_assert(sizeof(ElementUnderPointer) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::GetTopElementUnderPointer
// Il2CppName: GetTopElementUnderPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::ElementUnderPointer::*)(int, ByRef<::UnityEngine::Vector2>, ByRef<bool>)>(&UnityEngine::UIElements::ElementUnderPointer::GetTopElementUnderPointer)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pickPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    static auto* isTemporary = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "GetTopElementUnderPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId, pickPosition, isTemporary});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::GetTopElementUnderPointer
// Il2CppName: GetTopElementUnderPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UIElements::VisualElement* (UnityEngine::UIElements::ElementUnderPointer::*)(int)>(&UnityEngine::UIElements::ElementUnderPointer::GetTopElementUnderPointer)> {
  static const MethodInfo* get() {
    static auto* pointerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "GetTopElementUnderPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointerId});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::GetEventPointerPosition
// Il2CppName: GetEventPointerPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (UnityEngine::UIElements::ElementUnderPointer::*)(::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ElementUnderPointer::GetEventPointerPosition)> {
  static const MethodInfo* get() {
    static auto* triggerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "GetEventPointerPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{triggerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::SetTemporaryElementUnderPointer
// Il2CppName: SetTemporaryElementUnderPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ElementUnderPointer::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ElementUnderPointer::SetTemporaryElementUnderPointer)> {
  static const MethodInfo* get() {
    static auto* newElementUnderPointer = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* triggerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "SetTemporaryElementUnderPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newElementUnderPointer, triggerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::SetElementUnderPointer
// Il2CppName: SetElementUnderPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ElementUnderPointer::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::EventBase*)>(&UnityEngine::UIElements::ElementUnderPointer::SetElementUnderPointer)> {
  static const MethodInfo* get() {
    static auto* newElementUnderPointer = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* triggerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "SetElementUnderPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newElementUnderPointer, triggerEvent});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::SetElementUnderPointer
// Il2CppName: SetElementUnderPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ElementUnderPointer::*)(::UnityEngine::UIElements::VisualElement*, ::UnityEngine::UIElements::EventBase*, bool)>(&UnityEngine::UIElements::ElementUnderPointer::SetElementUnderPointer)> {
  static const MethodInfo* get() {
    static auto* newElementUnderPointer = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "VisualElement")->byval_arg;
    static auto* triggerEvent = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventBase")->byval_arg;
    static auto* temporary = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "SetElementUnderPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newElementUnderPointer, triggerEvent, temporary});
  }
};
// Writing MetadataGetter for method: UnityEngine::UIElements::ElementUnderPointer::CommitElementUnderPointers
// Il2CppName: CommitElementUnderPointers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::UIElements::ElementUnderPointer::*)(::UnityEngine::UIElements::EventDispatcher*)>(&UnityEngine::UIElements::ElementUnderPointer::CommitElementUnderPointers)> {
  static const MethodInfo* get() {
    static auto* dispatcher = &::il2cpp_utils::GetClassFromName("UnityEngine.UIElements", "EventDispatcher")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::ElementUnderPointer*), "CommitElementUnderPointers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dispatcher});
  }
};
