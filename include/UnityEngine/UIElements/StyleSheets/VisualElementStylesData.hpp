// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UIElements.StyleLength
#include "UnityEngine/UIElements/StyleLength.hpp"
// Including type: UnityEngine.UIElements.StyleFloat
#include "UnityEngine/UIElements/StyleFloat.hpp"
// Including type: UnityEngine.UIElements.StyleInt
#include "UnityEngine/UIElements/StyleInt.hpp"
// Including type: UnityEngine.UIElements.StyleColor
#include "UnityEngine/UIElements/StyleColor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UIElements::StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Forward declaring type: StyleValuePropertyReader
  class StyleValuePropertyReader;
}
// Completed forward declares
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Forward declaring type: VisualElementStylesData
  class VisualElementStylesData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::UIElements::StyleSheets::VisualElementStylesData);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::UIElements::StyleSheets::VisualElementStylesData*, "UnityEngine.UIElements.StyleSheets", "VisualElementStylesData");
// Type namespace: UnityEngine.UIElements.StyleSheets
namespace UnityEngine::UIElements::StyleSheets {
  // Size: 0x1C4
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UIElements.StyleSheets.VisualElementStylesData
  // [TokenAttribute] Offset: FFFFFFFF
  class VisualElementStylesData : public ::Il2CppObject {
    public:
    public:
    // readonly System.Boolean isShared
    // Size: 0x1
    // Offset: 0x10
    bool isShared;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isShared and: width
    char __padding0[0x3] = {};
    // UnityEngine.UIElements.StyleLength width
    // Size: 0x10
    // Offset: 0x14
    ::UnityEngine::UIElements::StyleLength width;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength height
    // Size: 0x10
    // Offset: 0x24
    ::UnityEngine::UIElements::StyleLength height;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength maxWidth
    // Size: 0x10
    // Offset: 0x34
    ::UnityEngine::UIElements::StyleLength maxWidth;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength maxHeight
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::UIElements::StyleLength maxHeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength minWidth
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::UIElements::StyleLength minWidth;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength minHeight
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::UIElements::StyleLength minHeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength flexBasis
    // Size: 0x10
    // Offset: 0x74
    ::UnityEngine::UIElements::StyleLength flexBasis;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleFloat flexShrink
    // Size: 0xC
    // Offset: 0x84
    ::UnityEngine::UIElements::StyleFloat flexShrink;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleFloat) == 0xC);
    // UnityEngine.UIElements.StyleFloat flexGrow
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::UIElements::StyleFloat flexGrow;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleFloat) == 0xC);
    // UnityEngine.UIElements.StyleInt overflow
    // Size: 0xC
    // Offset: 0x9C
    ::UnityEngine::UIElements::StyleInt overflow;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleInt) == 0xC);
    // UnityEngine.UIElements.StyleLength left
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::UIElements::StyleLength left;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength top
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::UIElements::StyleLength top;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength right
    // Size: 0x10
    // Offset: 0xC8
    ::UnityEngine::UIElements::StyleLength right;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleLength bottom
    // Size: 0x10
    // Offset: 0xD8
    ::UnityEngine::UIElements::StyleLength bottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleLength) == 0x10);
    // UnityEngine.UIElements.StyleInt alignSelf
    // Size: 0xC
    // Offset: 0xE8
    ::UnityEngine::UIElements::StyleInt alignSelf;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleInt) == 0xC);
    // UnityEngine.UIElements.StyleColor color
    // Size: 0x18
    // Offset: 0xF4
    ::UnityEngine::UIElements::StyleColor color;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleColor) == 0x18);
    // UnityEngine.UIElements.StyleColor unityBackgroundImageTintColor
    // Size: 0x18
    // Offset: 0x10C
    ::UnityEngine::UIElements::StyleColor unityBackgroundImageTintColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleColor) == 0x18);
    // UnityEngine.UIElements.StyleInt alignItems
    // Size: 0xC
    // Offset: 0x124
    ::UnityEngine::UIElements::StyleInt alignItems;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleInt) == 0xC);
    // UnityEngine.UIElements.StyleInt alignContent
    // Size: 0xC
    // Offset: 0x130
    ::UnityEngine::UIElements::StyleInt alignContent;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleInt) == 0xC);
    // UnityEngine.UIElements.StyleColor borderLeftColor
    // Size: 0x18
    // Offset: 0x13C
    ::UnityEngine::UIElements::StyleColor borderLeftColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleColor) == 0x18);
    // UnityEngine.UIElements.StyleColor borderTopColor
    // Size: 0x18
    // Offset: 0x154
    ::UnityEngine::UIElements::StyleColor borderTopColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleColor) == 0x18);
    // UnityEngine.UIElements.StyleColor borderRightColor
    // Size: 0x18
    // Offset: 0x16C
    ::UnityEngine::UIElements::StyleColor borderRightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleColor) == 0x18);
    // UnityEngine.UIElements.StyleColor borderBottomColor
    // Size: 0x18
    // Offset: 0x184
    ::UnityEngine::UIElements::StyleColor borderBottomColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleColor) == 0x18);
    // UnityEngine.UIElements.StyleFloat opacity
    // Size: 0xC
    // Offset: 0x19C
    ::UnityEngine::UIElements::StyleFloat opacity;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleFloat) == 0xC);
    // UnityEngine.UIElements.StyleInt visibility
    // Size: 0xC
    // Offset: 0x1A8
    ::UnityEngine::UIElements::StyleInt visibility;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleInt) == 0xC);
    // UnityEngine.UIElements.StyleInt display
    // Size: 0xC
    // Offset: 0x1B4
    ::UnityEngine::UIElements::StyleInt display;
    // Field size check
    static_assert(sizeof(::UnityEngine::UIElements::StyleInt) == 0xC);
    // System.Single dpiScaling
    // Size: 0x4
    // Offset: 0x1C0
    float dpiScaling;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get static field: static private UnityEngine.UIElements.StyleSheets.StyleValuePropertyReader s_StyleValuePropertyReader
    static ::UnityEngine::UIElements::StyleSheets::StyleValuePropertyReader* _get_s_StyleValuePropertyReader();
    // Set static field: static private UnityEngine.UIElements.StyleSheets.StyleValuePropertyReader s_StyleValuePropertyReader
    static void _set_s_StyleValuePropertyReader(::UnityEngine::UIElements::StyleSheets::StyleValuePropertyReader* value);
    // Get static field: static public readonly UnityEngine.UIElements.StyleSheets.VisualElementStylesData none
    static ::UnityEngine::UIElements::StyleSheets::VisualElementStylesData* _get_none();
    // Set static field: static public readonly UnityEngine.UIElements.StyleSheets.VisualElementStylesData none
    static void _set_none(::UnityEngine::UIElements::StyleSheets::VisualElementStylesData* value);
    // Get instance field reference: readonly System.Boolean isShared
    [[deprecated("Use field access instead!")]] bool& dyn_isShared();
    // Get instance field reference: UnityEngine.UIElements.StyleLength width
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_width();
    // Get instance field reference: UnityEngine.UIElements.StyleLength height
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_height();
    // Get instance field reference: UnityEngine.UIElements.StyleLength maxWidth
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_maxWidth();
    // Get instance field reference: UnityEngine.UIElements.StyleLength maxHeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_maxHeight();
    // Get instance field reference: UnityEngine.UIElements.StyleLength minWidth
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_minWidth();
    // Get instance field reference: UnityEngine.UIElements.StyleLength minHeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_minHeight();
    // Get instance field reference: UnityEngine.UIElements.StyleLength flexBasis
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_flexBasis();
    // Get instance field reference: UnityEngine.UIElements.StyleFloat flexShrink
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleFloat& dyn_flexShrink();
    // Get instance field reference: UnityEngine.UIElements.StyleFloat flexGrow
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleFloat& dyn_flexGrow();
    // Get instance field reference: UnityEngine.UIElements.StyleInt overflow
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleInt& dyn_overflow();
    // Get instance field reference: UnityEngine.UIElements.StyleLength left
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_left();
    // Get instance field reference: UnityEngine.UIElements.StyleLength top
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_top();
    // Get instance field reference: UnityEngine.UIElements.StyleLength right
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_right();
    // Get instance field reference: UnityEngine.UIElements.StyleLength bottom
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleLength& dyn_bottom();
    // Get instance field reference: UnityEngine.UIElements.StyleInt alignSelf
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleInt& dyn_alignSelf();
    // Get instance field reference: UnityEngine.UIElements.StyleColor color
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleColor& dyn_color();
    // Get instance field reference: UnityEngine.UIElements.StyleColor unityBackgroundImageTintColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleColor& dyn_unityBackgroundImageTintColor();
    // Get instance field reference: UnityEngine.UIElements.StyleInt alignItems
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleInt& dyn_alignItems();
    // Get instance field reference: UnityEngine.UIElements.StyleInt alignContent
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleInt& dyn_alignContent();
    // Get instance field reference: UnityEngine.UIElements.StyleColor borderLeftColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleColor& dyn_borderLeftColor();
    // Get instance field reference: UnityEngine.UIElements.StyleColor borderTopColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleColor& dyn_borderTopColor();
    // Get instance field reference: UnityEngine.UIElements.StyleColor borderRightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleColor& dyn_borderRightColor();
    // Get instance field reference: UnityEngine.UIElements.StyleColor borderBottomColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleColor& dyn_borderBottomColor();
    // Get instance field reference: UnityEngine.UIElements.StyleFloat opacity
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleFloat& dyn_opacity();
    // Get instance field reference: UnityEngine.UIElements.StyleInt visibility
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleInt& dyn_visibility();
    // Get instance field reference: UnityEngine.UIElements.StyleInt display
    [[deprecated("Use field access instead!")]] ::UnityEngine::UIElements::StyleInt& dyn_display();
    // Get instance field reference: System.Single dpiScaling
    [[deprecated("Use field access instead!")]] float& dyn_dpiScaling();
    // public System.Void .ctor(System.Boolean isShared)
    // Offset: 0xDAEBA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisualElementStylesData* New_ctor(bool isShared) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::UIElements::StyleSheets::VisualElementStylesData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisualElementStylesData*, creationType>(isShared)));
    }
    // static private System.Void .cctor()
    // Offset: 0xDAEEC0
    static void _cctor();
  }; // UnityEngine.UIElements.StyleSheets.VisualElementStylesData
  #pragma pack(pop)
  static check_size<sizeof(VisualElementStylesData), 448 + sizeof(float)> __UnityEngine_UIElements_StyleSheets_VisualElementStylesDataSizeCheck;
  static_assert(sizeof(VisualElementStylesData) == 0x1C4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::VisualElementStylesData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::UIElements::StyleSheets::VisualElementStylesData::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&UnityEngine::UIElements::StyleSheets::VisualElementStylesData::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::UIElements::StyleSheets::VisualElementStylesData*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
