// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TestRunner.NUnitExtensions.Runner.UnityWorkItem
#include "UnityEngine/TestRunner/NUnitExtensions/Runner/UnityWorkItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::TestRunner::NUnitExtensions::Runner
namespace UnityEngine::TestRunner::NUnitExtensions::Runner {
}
// Forward declaring namespace: NUnit::Framework::Internal::Commands
namespace NUnit::Framework::Internal::Commands {
  // Forward declaring type: TestCommand
  class TestCommand;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MonoBehaviour
  class MonoBehaviour;
}
// Forward declaring namespace: NUnit::Framework::Internal
namespace NUnit::Framework::Internal {
  // Forward declaring type: TestMethod
  class TestMethod;
}
// Forward declaring namespace: NUnit::Framework::Interfaces
namespace NUnit::Framework::Interfaces {
  // Forward declaring type: ITestFilter
  class ITestFilter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerable
  class IEnumerable;
}
// Completed forward declares
// Type namespace: UnityEngine.TestRunner.NUnitExtensions.Runner
namespace UnityEngine::TestRunner::NUnitExtensions::Runner {
  // Forward declaring type: CoroutineTestWorkItem
  class CoroutineTestWorkItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem);
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem*, "UnityEngine.TestRunner.NUnitExtensions.Runner", "CoroutineTestWorkItem");
// Type namespace: UnityEngine.TestRunner.NUnitExtensions.Runner
namespace UnityEngine::TestRunner::NUnitExtensions::Runner {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TestRunner.NUnitExtensions.Runner.CoroutineTestWorkItem
  // [TokenAttribute] Offset: FFFFFFFF
  class CoroutineTestWorkItem : public ::UnityEngine::TestRunner::NUnitExtensions::Runner::UnityWorkItem {
    public:
    // Nested type: ::UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::$PerformWork$d__6
    class $PerformWork$d__6;
    public:
    // private NUnit.Framework.Internal.Commands.TestCommand m_Command
    // Size: 0x8
    // Offset: 0x58
    ::NUnit::Framework::Internal::Commands::TestCommand* m_Command;
    // Field size check
    static_assert(sizeof(::NUnit::Framework::Internal::Commands::TestCommand*) == 0x8);
    public:
    // Creating conversion operator: operator ::NUnit::Framework::Internal::Commands::TestCommand*
    constexpr operator ::NUnit::Framework::Internal::Commands::TestCommand*() const noexcept {
      return m_Command;
    }
    // Get static field: static private UnityEngine.MonoBehaviour m_MonoBehaviourCoroutineRunner
    static ::UnityEngine::MonoBehaviour* _get_m_MonoBehaviourCoroutineRunner();
    // Set static field: static private UnityEngine.MonoBehaviour m_MonoBehaviourCoroutineRunner
    static void _set_m_MonoBehaviourCoroutineRunner(::UnityEngine::MonoBehaviour* value);
    // Get instance field reference: private NUnit.Framework.Internal.Commands.TestCommand m_Command
    [[deprecated("Use field access instead!")]] ::NUnit::Framework::Internal::Commands::TestCommand*& dyn_m_Command();
    // static public UnityEngine.MonoBehaviour get_monoBehaviourCoroutineRunner()
    // Offset: 0x19A0FDC
    static ::UnityEngine::MonoBehaviour* get_monoBehaviourCoroutineRunner();
    // static public System.Void set_monoBehaviourCoroutineRunner(UnityEngine.MonoBehaviour value)
    // Offset: 0x19A10A8
    static void set_monoBehaviourCoroutineRunner(::UnityEngine::MonoBehaviour* value);
    // public System.Void .ctor(NUnit.Framework.Internal.TestMethod test, NUnit.Framework.Interfaces.ITestFilter filter)
    // Offset: 0x19A10FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CoroutineTestWorkItem* New_ctor(::NUnit::Framework::Internal::TestMethod* test, ::NUnit::Framework::Interfaces::ITestFilter* filter) {
      static auto ___internal__logger = ::Logger::get().WithContext("::UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CoroutineTestWorkItem*, creationType>(test, filter)));
    }
    // protected override System.Collections.IEnumerable PerformWork()
    // Offset: 0x19A1978
    // Implemented from: UnityEngine.TestRunner.NUnitExtensions.Runner.UnityWorkItem
    // Base method: System.Collections.IEnumerable UnityWorkItem::PerformWork()
    ::System::Collections::IEnumerable* PerformWork();
  }; // UnityEngine.TestRunner.NUnitExtensions.Runner.CoroutineTestWorkItem
  #pragma pack(pop)
  static check_size<sizeof(CoroutineTestWorkItem), 88 + sizeof(::NUnit::Framework::Internal::Commands::TestCommand*)> __UnityEngine_TestRunner_NUnitExtensions_Runner_CoroutineTestWorkItemSizeCheck;
  static_assert(sizeof(CoroutineTestWorkItem) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::get_monoBehaviourCoroutineRunner
// Il2CppName: get_monoBehaviourCoroutineRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MonoBehaviour* (*)()>(&UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::get_monoBehaviourCoroutineRunner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem*), "get_monoBehaviourCoroutineRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::set_monoBehaviourCoroutineRunner
// Il2CppName: set_monoBehaviourCoroutineRunner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MonoBehaviour*)>(&UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::set_monoBehaviourCoroutineRunner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem*), "set_monoBehaviourCoroutineRunner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::PerformWork
// Il2CppName: PerformWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerable* (UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::*)()>(&UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem::PerformWork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::TestRunner::NUnitExtensions::Runner::CoroutineTestWorkItem*), "PerformWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
