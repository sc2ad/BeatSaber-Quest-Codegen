// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.GUIClip
#include "UnityEngine/GUIClip.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Rect
  struct Rect;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::GUIClip::ParentClipScope, "UnityEngine", "GUIClip/ParentClipScope");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x1
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.GUIClip/UnityEngine.ParentClipScope
  // [TokenAttribute] Offset: FFFFFFFF
  // [VisibleToOtherModulesAttribute] Offset: FFFFFFFF
  struct GUIClip::ParentClipScope/*, public ::System::ValueType, public ::System::IDisposable*/ {
    public:
    public:
    // private System.Boolean m_Disposed
    // Size: 0x1
    // Offset: 0x0
    bool m_Disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: ParentClipScope
    constexpr ParentClipScope(bool m_Disposed_ = {}) noexcept : m_Disposed{m_Disposed_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return m_Disposed;
    }
    // Get instance field reference: private System.Boolean m_Disposed
    [[deprecated("Use field access instead!")]] bool& dyn_m_Disposed();
    // public System.Void .ctor(UnityEngine.Matrix4x4 objectTransform, UnityEngine.Rect clipRect)
    // Offset: 0xA78334
    ParentClipScope(::UnityEngine::Matrix4x4 objectTransform, ::UnityEngine::Rect clipRect);
    // public System.Void Dispose()
    // Offset: 0xA78378
    void Dispose();
  }; // UnityEngine.GUIClip/UnityEngine.ParentClipScope
  #pragma pack(pop)
  static check_size<sizeof(GUIClip::ParentClipScope), 0 + sizeof(bool)> __UnityEngine_GUIClip_ParentClipScopeSizeCheck;
  static_assert(sizeof(GUIClip::ParentClipScope) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::GUIClip::ParentClipScope::ParentClipScope
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: UnityEngine::GUIClip::ParentClipScope::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (UnityEngine::GUIClip::ParentClipScope::*)()>(&UnityEngine::GUIClip::ParentClipScope::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::GUIClip::ParentClipScope), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
