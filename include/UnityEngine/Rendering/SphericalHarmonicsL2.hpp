// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: SphericalHarmonicsL2
  struct SphericalHarmonicsL2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::Rendering::SphericalHarmonicsL2, "UnityEngine.Rendering", "SphericalHarmonicsL2");
// Type namespace: UnityEngine.Rendering
namespace UnityEngine::Rendering {
  // Size: 0x6C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Rendering.SphericalHarmonicsL2
  // [TokenAttribute] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: 90C268
  // [DefaultMemberAttribute] Offset: 90C268
  // [UsedByNativeCodeAttribute] Offset: 90C268
  struct SphericalHarmonicsL2/*, public ::System::ValueType, public ::System::IEquatable_1<::UnityEngine::Rendering::SphericalHarmonicsL2>*/ {
    public:
    public:
    // private System.Single shr0
    // Size: 0x4
    // Offset: 0x0
    float shr0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr1
    // Size: 0x4
    // Offset: 0x4
    float shr1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr2
    // Size: 0x4
    // Offset: 0x8
    float shr2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr3
    // Size: 0x4
    // Offset: 0xC
    float shr3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr4
    // Size: 0x4
    // Offset: 0x10
    float shr4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr5
    // Size: 0x4
    // Offset: 0x14
    float shr5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr6
    // Size: 0x4
    // Offset: 0x18
    float shr6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr7
    // Size: 0x4
    // Offset: 0x1C
    float shr7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shr8
    // Size: 0x4
    // Offset: 0x20
    float shr8;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg0
    // Size: 0x4
    // Offset: 0x24
    float shg0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg1
    // Size: 0x4
    // Offset: 0x28
    float shg1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg2
    // Size: 0x4
    // Offset: 0x2C
    float shg2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg3
    // Size: 0x4
    // Offset: 0x30
    float shg3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg4
    // Size: 0x4
    // Offset: 0x34
    float shg4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg5
    // Size: 0x4
    // Offset: 0x38
    float shg5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg6
    // Size: 0x4
    // Offset: 0x3C
    float shg6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg7
    // Size: 0x4
    // Offset: 0x40
    float shg7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shg8
    // Size: 0x4
    // Offset: 0x44
    float shg8;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb0
    // Size: 0x4
    // Offset: 0x48
    float shb0;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb1
    // Size: 0x4
    // Offset: 0x4C
    float shb1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb2
    // Size: 0x4
    // Offset: 0x50
    float shb2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb3
    // Size: 0x4
    // Offset: 0x54
    float shb3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb4
    // Size: 0x4
    // Offset: 0x58
    float shb4;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb5
    // Size: 0x4
    // Offset: 0x5C
    float shb5;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb6
    // Size: 0x4
    // Offset: 0x60
    float shb6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb7
    // Size: 0x4
    // Offset: 0x64
    float shb7;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single shb8
    // Size: 0x4
    // Offset: 0x68
    float shb8;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SphericalHarmonicsL2
    constexpr SphericalHarmonicsL2(float shr0_ = {}, float shr1_ = {}, float shr2_ = {}, float shr3_ = {}, float shr4_ = {}, float shr5_ = {}, float shr6_ = {}, float shr7_ = {}, float shr8_ = {}, float shg0_ = {}, float shg1_ = {}, float shg2_ = {}, float shg3_ = {}, float shg4_ = {}, float shg5_ = {}, float shg6_ = {}, float shg7_ = {}, float shg8_ = {}, float shb0_ = {}, float shb1_ = {}, float shb2_ = {}, float shb3_ = {}, float shb4_ = {}, float shb5_ = {}, float shb6_ = {}, float shb7_ = {}, float shb8_ = {}) noexcept : shr0{shr0_}, shr1{shr1_}, shr2{shr2_}, shr3{shr3_}, shr4{shr4_}, shr5{shr5_}, shr6{shr6_}, shr7{shr7_}, shr8{shr8_}, shg0{shg0_}, shg1{shg1_}, shg2{shg2_}, shg3{shg3_}, shg4{shg4_}, shg5{shg5_}, shg6{shg6_}, shg7{shg7_}, shg8{shg8_}, shb0{shb0_}, shb1{shb1_}, shb2{shb2_}, shb3{shb3_}, shb4{shb4_}, shb5{shb5_}, shb6{shb6_}, shb7{shb7_}, shb8{shb8_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::UnityEngine::Rendering::SphericalHarmonicsL2>
    operator ::System::IEquatable_1<::UnityEngine::Rendering::SphericalHarmonicsL2>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::UnityEngine::Rendering::SphericalHarmonicsL2>*>(this);
    }
    // Get instance field reference: private System.Single shr0
    [[deprecated("Use field access instead!")]] float& dyn_shr0();
    // Get instance field reference: private System.Single shr1
    [[deprecated("Use field access instead!")]] float& dyn_shr1();
    // Get instance field reference: private System.Single shr2
    [[deprecated("Use field access instead!")]] float& dyn_shr2();
    // Get instance field reference: private System.Single shr3
    [[deprecated("Use field access instead!")]] float& dyn_shr3();
    // Get instance field reference: private System.Single shr4
    [[deprecated("Use field access instead!")]] float& dyn_shr4();
    // Get instance field reference: private System.Single shr5
    [[deprecated("Use field access instead!")]] float& dyn_shr5();
    // Get instance field reference: private System.Single shr6
    [[deprecated("Use field access instead!")]] float& dyn_shr6();
    // Get instance field reference: private System.Single shr7
    [[deprecated("Use field access instead!")]] float& dyn_shr7();
    // Get instance field reference: private System.Single shr8
    [[deprecated("Use field access instead!")]] float& dyn_shr8();
    // Get instance field reference: private System.Single shg0
    [[deprecated("Use field access instead!")]] float& dyn_shg0();
    // Get instance field reference: private System.Single shg1
    [[deprecated("Use field access instead!")]] float& dyn_shg1();
    // Get instance field reference: private System.Single shg2
    [[deprecated("Use field access instead!")]] float& dyn_shg2();
    // Get instance field reference: private System.Single shg3
    [[deprecated("Use field access instead!")]] float& dyn_shg3();
    // Get instance field reference: private System.Single shg4
    [[deprecated("Use field access instead!")]] float& dyn_shg4();
    // Get instance field reference: private System.Single shg5
    [[deprecated("Use field access instead!")]] float& dyn_shg5();
    // Get instance field reference: private System.Single shg6
    [[deprecated("Use field access instead!")]] float& dyn_shg6();
    // Get instance field reference: private System.Single shg7
    [[deprecated("Use field access instead!")]] float& dyn_shg7();
    // Get instance field reference: private System.Single shg8
    [[deprecated("Use field access instead!")]] float& dyn_shg8();
    // Get instance field reference: private System.Single shb0
    [[deprecated("Use field access instead!")]] float& dyn_shb0();
    // Get instance field reference: private System.Single shb1
    [[deprecated("Use field access instead!")]] float& dyn_shb1();
    // Get instance field reference: private System.Single shb2
    [[deprecated("Use field access instead!")]] float& dyn_shb2();
    // Get instance field reference: private System.Single shb3
    [[deprecated("Use field access instead!")]] float& dyn_shb3();
    // Get instance field reference: private System.Single shb4
    [[deprecated("Use field access instead!")]] float& dyn_shb4();
    // Get instance field reference: private System.Single shb5
    [[deprecated("Use field access instead!")]] float& dyn_shb5();
    // Get instance field reference: private System.Single shb6
    [[deprecated("Use field access instead!")]] float& dyn_shb6();
    // Get instance field reference: private System.Single shb7
    [[deprecated("Use field access instead!")]] float& dyn_shb7();
    // Get instance field reference: private System.Single shb8
    [[deprecated("Use field access instead!")]] float& dyn_shb8();
    // public System.Single get_Item(System.Int32 rgb, System.Int32 coefficient)
    // Offset: 0xA68DE4
    float get_Item(int rgb, int coefficient);
    // public System.Boolean Equals(UnityEngine.Rendering.SphericalHarmonicsL2 other)
    // Offset: 0xA68DFC
    bool Equals(::UnityEngine::Rendering::SphericalHarmonicsL2 other);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA68DEC
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object other)
    // Offset: 0xA68DF4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object other)
    bool Equals(::Il2CppObject* other);
  }; // UnityEngine.Rendering.SphericalHarmonicsL2
  #pragma pack(pop)
  static check_size<sizeof(SphericalHarmonicsL2), 104 + sizeof(float)> __UnityEngine_Rendering_SphericalHarmonicsL2SizeCheck;
  static_assert(sizeof(SphericalHarmonicsL2) == 0x6C);
  // static public System.Boolean op_Equality(UnityEngine.Rendering.SphericalHarmonicsL2 lhs, UnityEngine.Rendering.SphericalHarmonicsL2 rhs)
  // Offset: 0x16753D0
  bool operator ==(const ::UnityEngine::Rendering::SphericalHarmonicsL2& lhs, const ::UnityEngine::Rendering::SphericalHarmonicsL2& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::Rendering::SphericalHarmonicsL2::get_Item
// Il2CppName: get_Item
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (UnityEngine::Rendering::SphericalHarmonicsL2::*)(int, int)>(&UnityEngine::Rendering::SphericalHarmonicsL2::get_Item)> {
  static const MethodInfo* get() {
    static auto* rgb = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* coefficient = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::SphericalHarmonicsL2), "get_Item", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rgb, coefficient});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::SphericalHarmonicsL2::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::SphericalHarmonicsL2::*)(::UnityEngine::Rendering::SphericalHarmonicsL2)>(&UnityEngine::Rendering::SphericalHarmonicsL2::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "SphericalHarmonicsL2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::SphericalHarmonicsL2), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::SphericalHarmonicsL2::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (UnityEngine::Rendering::SphericalHarmonicsL2::*)()>(&UnityEngine::Rendering::SphericalHarmonicsL2::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::SphericalHarmonicsL2), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::SphericalHarmonicsL2::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (UnityEngine::Rendering::SphericalHarmonicsL2::*)(::Il2CppObject*)>(&UnityEngine::Rendering::SphericalHarmonicsL2::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(UnityEngine::Rendering::SphericalHarmonicsL2), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: UnityEngine::Rendering::SphericalHarmonicsL2::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
