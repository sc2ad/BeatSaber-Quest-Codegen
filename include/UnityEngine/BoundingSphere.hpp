// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoundingSphere
  struct BoundingSphere;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::UnityEngine::BoundingSphere, "UnityEngine", "BoundingSphere");
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.BoundingSphere
  // [TokenAttribute] Offset: FFFFFFFF
  struct BoundingSphere/*, public ::System::ValueType*/ {
    public:
    public:
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x0
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Single radius
    // Size: 0x4
    // Offset: 0xC
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: BoundingSphere
    constexpr BoundingSphere(::UnityEngine::Vector3 position_ = {}, float radius_ = {}) noexcept : position{position_}, radius{radius_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // public System.Void .ctor(UnityEngine.Vector3 pos, System.Single rad)
    // Offset: 0xA67FEC
    // ABORTED: conflicts with another method.  BoundingSphere(::UnityEngine::Vector3 pos, float rad);
  }; // UnityEngine.BoundingSphere
  #pragma pack(pop)
  static check_size<sizeof(BoundingSphere), 12 + sizeof(float)> __UnityEngine_BoundingSphereSizeCheck;
  static_assert(sizeof(BoundingSphere) == 0x10);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: UnityEngine::BoundingSphere::BoundingSphere
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
