// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Constraints
namespace NUnit::Framework::Constraints {
}
// Completed forward declares
// Type namespace: NUnit.Framework.Constraints
namespace NUnit::Framework::Constraints {
  // Forward declaring type: FloatingPointNumerics
  class FloatingPointNumerics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NUnit::Framework::Constraints::FloatingPointNumerics);
DEFINE_IL2CPP_ARG_TYPE(::NUnit::Framework::Constraints::FloatingPointNumerics*, "NUnit.Framework.Constraints", "FloatingPointNumerics");
// Type namespace: NUnit.Framework.Constraints
namespace NUnit::Framework::Constraints {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Constraints.FloatingPointNumerics
  // [TokenAttribute] Offset: FFFFFFFF
  class FloatingPointNumerics : public ::Il2CppObject {
    public:
    // Nested type: ::NUnit::Framework::Constraints::FloatingPointNumerics::FloatIntUnion
    struct FloatIntUnion;
    // Nested type: ::NUnit::Framework::Constraints::FloatingPointNumerics::DoubleLongUnion
    struct DoubleLongUnion;
    // static public System.Boolean AreAlmostEqualUlps(System.Single left, System.Single right, System.Int32 maxUlps)
    // Offset: 0x1D52C0C
    static bool AreAlmostEqualUlps(float left, float right, int maxUlps);
    // static public System.Boolean AreAlmostEqualUlps(System.Double left, System.Double right, System.Int64 maxUlps)
    // Offset: 0x1D52D2C
    static bool AreAlmostEqualUlps(double left, double right, int64_t maxUlps);
  }; // NUnit.Framework.Constraints.FloatingPointNumerics
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps
// Il2CppName: AreAlmostEqualUlps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(float, float, int)>(&NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxUlps = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Constraints::FloatingPointNumerics*), "AreAlmostEqualUlps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, maxUlps});
  }
};
// Writing MetadataGetter for method: NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps
// Il2CppName: AreAlmostEqualUlps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double, double, int64_t)>(&NUnit::Framework::Constraints::FloatingPointNumerics::AreAlmostEqualUlps)> {
  static const MethodInfo* get() {
    static auto* left = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* right = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* maxUlps = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Constraints::FloatingPointNumerics*), "AreAlmostEqualUlps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{left, right, maxUlps});
  }
};
