// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Internal
namespace NUnit::Framework::Internal {
  // Forward declaring type: TestMethod
  class TestMethod;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: NUnit.Framework.Internal
namespace NUnit::Framework::Internal {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Internal.TestNameGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  class TestNameGenerator : public ::Il2CppObject {
    public:
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::NameFragment
    class NameFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::TestIDFragment
    class TestIDFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::FixedTextFragment
    class FixedTextFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::MethodNameFragment
    class MethodNameFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::NamespaceFragment
    class NamespaceFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::MethodFullNameFragment
    class MethodFullNameFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::ClassNameFragment
    class ClassNameFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::ClassFullNameFragment
    class ClassFullNameFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::ArgListFragment
    class ArgListFragment;
    // Nested type: NUnit::Framework::Internal::TestNameGenerator::ArgumentFragment
    class ArgumentFragment;
    // private System.String _pattern
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* pattern;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Collections.Generic.List`1<NUnit.Framework.Internal.TestNameGenerator/NameFragment> _fragments
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>* fragments;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>*) == 0x8);
    // Creating value type constructor for type: TestNameGenerator
    TestNameGenerator(::Il2CppString* pattern_ = {}, System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>* fragments_ = {}) noexcept : pattern{pattern_}, fragments{fragments_} {}
    // Get static field: static public System.String DefaultTestNamePattern
    static ::Il2CppString* _get_DefaultTestNamePattern();
    // Set static field: static public System.String DefaultTestNamePattern
    static void _set_DefaultTestNamePattern(::Il2CppString* value);
    // Get instance field reference: private System.String _pattern
    ::Il2CppString*& dyn__pattern();
    // Get instance field reference: private System.Collections.Generic.List`1<NUnit.Framework.Internal.TestNameGenerator/NameFragment> _fragments
    System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>*& dyn__fragments();
    // public System.Void .ctor(System.String pattern)
    // Offset: 0x24A2D04
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestNameGenerator* New_ctor(::Il2CppString* pattern) {
      static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::TestNameGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestNameGenerator*, creationType>(pattern)));
    }
    // public System.String GetDisplayName(NUnit.Framework.Internal.TestMethod testMethod, System.Object[] args)
    // Offset: 0x24A2D30
    ::Il2CppString* GetDisplayName(NUnit::Framework::Internal::TestMethod* testMethod, ::Array<::Il2CppObject*>* args);
    // static private System.Collections.Generic.List`1<NUnit.Framework.Internal.TestNameGenerator/NameFragment> BuildFragmentList(System.String pattern)
    // Offset: 0x24A2EC8
    static System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>* BuildFragmentList(::Il2CppString* pattern);
    // static private System.Void .cctor()
    // Offset: 0x24A36A8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x24A2C88
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestNameGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Internal::TestNameGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestNameGenerator*, creationType>()));
    }
  }; // NUnit.Framework.Internal.TestNameGenerator
  #pragma pack(pop)
  static check_size<sizeof(TestNameGenerator), 24 + sizeof(System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>*)> __NUnit_Framework_Internal_TestNameGeneratorSizeCheck;
  static_assert(sizeof(TestNameGenerator) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Internal::TestNameGenerator*, "NUnit.Framework.Internal", "TestNameGenerator");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NUnit::Framework::Internal::TestNameGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NUnit::Framework::Internal::TestNameGenerator::GetDisplayName
// Il2CppName: GetDisplayName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (NUnit::Framework::Internal::TestNameGenerator::*)(NUnit::Framework::Internal::TestMethod*, ::Array<::Il2CppObject*>*)>(&NUnit::Framework::Internal::TestNameGenerator::GetDisplayName)> {
  static const MethodInfo* get() {
    static auto* testMethod = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Internal", "TestMethod")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Internal::TestNameGenerator*), "GetDisplayName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{testMethod, args});
  }
};
// Writing MetadataGetter for method: NUnit::Framework::Internal::TestNameGenerator::BuildFragmentList
// Il2CppName: BuildFragmentList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<NUnit::Framework::Internal::TestNameGenerator::NameFragment*>* (*)(::Il2CppString*)>(&NUnit::Framework::Internal::TestNameGenerator::BuildFragmentList)> {
  static const MethodInfo* get() {
    static auto* pattern = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Internal::TestNameGenerator*), "BuildFragmentList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pattern});
  }
};
// Writing MetadataGetter for method: NUnit::Framework::Internal::TestNameGenerator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&NUnit::Framework::Internal::TestNameGenerator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Internal::TestNameGenerator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: NUnit::Framework::Internal::TestNameGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
