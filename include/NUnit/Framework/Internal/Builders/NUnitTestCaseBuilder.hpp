// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Internal
namespace NUnit::Framework::Internal {
  // Forward declaring type: Randomizer
  class Randomizer;
  // Forward declaring type: TestNameGenerator
  class TestNameGenerator;
  // Forward declaring type: TestMethod
  class TestMethod;
  // Forward declaring type: Test
  class Test;
  // Forward declaring type: TestCaseParameters
  class TestCaseParameters;
}
// Forward declaring namespace: NUnit::Framework::Interfaces
namespace NUnit::Framework::Interfaces {
  // Forward declaring type: IMethodInfo
  class IMethodInfo;
}
// Completed forward declares
// Type namespace: NUnit.Framework.Internal.Builders
namespace NUnit::Framework::Internal::Builders {
  // Forward declaring type: NUnitTestCaseBuilder
  class NUnitTestCaseBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder);
DEFINE_IL2CPP_ARG_TYPE(::NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder*, "NUnit.Framework.Internal.Builders", "NUnitTestCaseBuilder");
// Type namespace: NUnit.Framework.Internal.Builders
namespace NUnit::Framework::Internal::Builders {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class NUnitTestCaseBuilder : public ::Il2CppObject {
    public:
    public:
    // private readonly NUnit.Framework.Internal.Randomizer _randomizer
    // Size: 0x8
    // Offset: 0x10
    ::NUnit::Framework::Internal::Randomizer* randomizer;
    // Field size check
    static_assert(sizeof(::NUnit::Framework::Internal::Randomizer*) == 0x8);
    // private readonly NUnit.Framework.Internal.TestNameGenerator _nameGenerator
    // Size: 0x8
    // Offset: 0x18
    ::NUnit::Framework::Internal::TestNameGenerator* nameGenerator;
    // Field size check
    static_assert(sizeof(::NUnit::Framework::Internal::TestNameGenerator*) == 0x8);
    public:
    // Get instance field reference: private readonly NUnit.Framework.Internal.Randomizer _randomizer
    [[deprecated("Use field access instead!")]] ::NUnit::Framework::Internal::Randomizer*& dyn__randomizer();
    // Get instance field reference: private readonly NUnit.Framework.Internal.TestNameGenerator _nameGenerator
    [[deprecated("Use field access instead!")]] ::NUnit::Framework::Internal::TestNameGenerator*& dyn__nameGenerator();
    // public System.Void .ctor()
    // Offset: 0x1D4DE6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NUnitTestCaseBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NUnitTestCaseBuilder*, creationType>()));
    }
    // public NUnit.Framework.Internal.TestMethod BuildTestMethod(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test parentSuite, NUnit.Framework.Internal.TestCaseParameters parms)
    // Offset: 0x1D4E5A0
    ::NUnit::Framework::Internal::TestMethod* BuildTestMethod(::NUnit::Framework::Interfaces::IMethodInfo* method, ::NUnit::Framework::Internal::Test* parentSuite, ::NUnit::Framework::Internal::TestCaseParameters* parms);
    // static private System.Boolean CheckTestMethodSignature(NUnit.Framework.Internal.TestMethod testMethod, NUnit.Framework.Internal.TestCaseParameters parms)
    // Offset: 0x1D5E258
    static bool CheckTestMethodSignature(::NUnit::Framework::Internal::TestMethod* testMethod, ::NUnit::Framework::Internal::TestCaseParameters* parms);
    // static private System.Boolean MarkAsNotRunnable(NUnit.Framework.Internal.TestMethod testMethod, System.String reason)
    // Offset: 0x1D5EA64
    static bool MarkAsNotRunnable(::NUnit::Framework::Internal::TestMethod* testMethod, ::StringW reason);
  }; // NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder
  #pragma pack(pop)
  static check_size<sizeof(NUnitTestCaseBuilder), 24 + sizeof(::NUnit::Framework::Internal::TestNameGenerator*)> __NUnit_Framework_Internal_Builders_NUnitTestCaseBuilderSizeCheck;
  static_assert(sizeof(NUnitTestCaseBuilder) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::BuildTestMethod
// Il2CppName: BuildTestMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::NUnit::Framework::Internal::TestMethod* (NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::*)(::NUnit::Framework::Interfaces::IMethodInfo*, ::NUnit::Framework::Internal::Test*, ::NUnit::Framework::Internal::TestCaseParameters*)>(&NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::BuildTestMethod)> {
  static const MethodInfo* get() {
    static auto* method = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Interfaces", "IMethodInfo")->byval_arg;
    static auto* parentSuite = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Internal", "Test")->byval_arg;
    static auto* parms = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Internal", "TestCaseParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder*), "BuildTestMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{method, parentSuite, parms});
  }
};
// Writing MetadataGetter for method: NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::CheckTestMethodSignature
// Il2CppName: CheckTestMethodSignature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::NUnit::Framework::Internal::TestMethod*, ::NUnit::Framework::Internal::TestCaseParameters*)>(&NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::CheckTestMethodSignature)> {
  static const MethodInfo* get() {
    static auto* testMethod = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Internal", "TestMethod")->byval_arg;
    static auto* parms = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Internal", "TestCaseParameters")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder*), "CheckTestMethodSignature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{testMethod, parms});
  }
};
// Writing MetadataGetter for method: NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::MarkAsNotRunnable
// Il2CppName: MarkAsNotRunnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::NUnit::Framework::Internal::TestMethod*, ::StringW)>(&NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder::MarkAsNotRunnable)> {
  static const MethodInfo* get() {
    static auto* testMethod = &::il2cpp_utils::GetClassFromName("NUnit.Framework.Internal", "TestMethod")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(NUnit::Framework::Internal::Builders::NUnitTestCaseBuilder*), "MarkAsNotRunnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{testMethod, reason});
  }
};
