// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.TransitionType
#include "BeatmapSaveDataVersion3/BeatmapSaveData_TransitionType.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EnvironmentColorType
#include "BeatmapSaveDataVersion3/BeatmapSaveData_EnvironmentColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData);
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData*, "BeatmapSaveDataVersion3", "BeatmapSaveData/LightColorBaseData");
// Type namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightColorBaseData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapSaveData::LightColorBaseData : public ::Il2CppObject {
    public:
    public:
    // private System.Single b
    // Size: 0x4
    // Offset: 0x10
    float b;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.TransitionType i
    // Size: 0x4
    // Offset: 0x14
    ::BeatmapSaveDataVersion3::BeatmapSaveData::TransitionType i;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::TransitionType) == 0x4);
    // private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EnvironmentColorType c
    // Size: 0x4
    // Offset: 0x18
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EnvironmentColorType c;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::EnvironmentColorType) == 0x4);
    // private System.Single s
    // Size: 0x4
    // Offset: 0x1C
    float s;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 f
    // Size: 0x4
    // Offset: 0x20
    int f;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Single b
    [[deprecated("Use field access instead!")]] float& dyn_b();
    // Get instance field reference: private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.TransitionType i
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::TransitionType& dyn_i();
    // Get instance field reference: private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EnvironmentColorType c
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::EnvironmentColorType& dyn_c();
    // Get instance field reference: private System.Single s
    [[deprecated("Use field access instead!")]] float& dyn_s();
    // Get instance field reference: private System.Int32 f
    [[deprecated("Use field access instead!")]] int& dyn_f();
    // public System.Single get_beat()
    // Offset: 0x283D4C8
    float get_beat();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.TransitionType get_transitionType()
    // Offset: 0x283D4D0
    ::BeatmapSaveDataVersion3::BeatmapSaveData::TransitionType get_transitionType();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EnvironmentColorType get_colorType()
    // Offset: 0x283D4D8
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EnvironmentColorType get_colorType();
    // public System.Single get_brightness()
    // Offset: 0x283D4E0
    float get_brightness();
    // public System.Int32 get_strobeBeatFrequency()
    // Offset: 0x283D4E8
    int get_strobeBeatFrequency();
    // public System.Void .ctor(System.Single beat, BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.TransitionType transitionType, BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EnvironmentColorType colorType, System.Single brightness, System.Int32 strobeFrequency)
    // Offset: 0x283D4F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapSaveData::LightColorBaseData* New_ctor(float beat, ::BeatmapSaveDataVersion3::BeatmapSaveData::TransitionType transitionType, ::BeatmapSaveDataVersion3::BeatmapSaveData::EnvironmentColorType colorType, float brightness, int strobeFrequency) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapSaveData::LightColorBaseData*, creationType>(beat, transitionType, colorType, brightness, strobeFrequency)));
    }
  }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightColorBaseData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapSaveData::LightColorBaseData), 32 + sizeof(int)> __BeatmapSaveDataVersion3_BeatmapSaveData_LightColorBaseDataSizeCheck;
  static_assert(sizeof(BeatmapSaveData::LightColorBaseData) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_beat
// Il2CppName: get_beat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_beat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData*), "get_beat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_transitionType
// Il2CppName: get_transitionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::TransitionType (BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_transitionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData*), "get_transitionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_colorType
// Il2CppName: get_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::EnvironmentColorType (BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_colorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData*), "get_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_brightness
// Il2CppName: get_brightness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_brightness)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData*), "get_brightness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_strobeBeatFrequency
// Il2CppName: get_strobeBeatFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::get_strobeBeatFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData*), "get_strobeBeatFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightColorBaseData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
