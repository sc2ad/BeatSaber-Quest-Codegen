// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem);
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*, "BeatmapSaveDataVersion3", "BeatmapSaveData/BeatmapSaveDataItem");
// Type namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.BeatmapSaveDataItem
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapSaveData::BeatmapSaveDataItem : public ::Il2CppObject/*, public ::System::IComparable_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*>*/ {
    public:
    public:
    // private System.Single b
    // Size: 0x4
    // Offset: 0x10
    float b;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IComparable_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*>
    operator ::System::IComparable_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*>*>(this);
    }
    // Creating interface conversion operator: i_BeatmapSaveDataItem
    inline ::System::IComparable_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*>* i_BeatmapSaveDataItem() noexcept {
      return reinterpret_cast<::System::IComparable_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*>*>(this);
    }
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return b;
    }
    // Get instance field reference: private System.Single b
    [[deprecated("Use field access instead!")]] float& dyn_b();
    // public System.Single get_beat()
    // Offset: 0x26B4C64
    float get_beat();
    // protected System.Void .ctor(System.Single beat)
    // Offset: 0x26B4C00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapSaveData::BeatmapSaveDataItem* New_ctor(float beat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapSaveData::BeatmapSaveDataItem*, creationType>(beat)));
    }
    // public System.Int32 CompareTo(BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.BeatmapSaveDataItem other)
    // Offset: 0x26B4C6C
    int CompareTo(::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem* other);
  }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.BeatmapSaveDataItem
  #pragma pack(pop)
  static check_size<sizeof(BeatmapSaveData::BeatmapSaveDataItem), 16 + sizeof(float)> __BeatmapSaveDataVersion3_BeatmapSaveData_BeatmapSaveDataItemSizeCheck;
  static_assert(sizeof(BeatmapSaveData::BeatmapSaveDataItem) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::get_beat
// Il2CppName: get_beat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::get_beat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*), "get_beat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::*)(::BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*)>(&BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("BeatmapSaveDataVersion3", "BeatmapSaveData/BeatmapSaveDataItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::BeatmapSaveDataItem*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
