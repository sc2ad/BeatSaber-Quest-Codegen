// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType
#include "BeatmapSaveDataVersion3/BeatmapSaveData_EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Skipping declaration: RotationDirection because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData);
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*, "BeatmapSaveDataVersion3", "BeatmapSaveData/LightRotationBaseData");
// Type namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapSaveData::LightRotationBaseData : public ::Il2CppObject {
    public:
    // Nested type: ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection
    struct RotationDirection;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct RotationDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RotationDirection
      constexpr RotationDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Automatic
      static constexpr const int Automatic = 0;
      // Get static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Automatic
      static ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection _get_Automatic();
      // Set static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Automatic
      static void _set_Automatic(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection value);
      // static field const value: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Clockwise
      static constexpr const int Clockwise = 1;
      // Get static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Clockwise
      static ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection _get_Clockwise();
      // Set static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Clockwise
      static void _set_Clockwise(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection value);
      // static field const value: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Counterclockwise
      static constexpr const int Counterclockwise = 2;
      // Get static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Counterclockwise
      static ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection _get_Counterclockwise();
      // Set static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection Counterclockwise
      static void _set_Counterclockwise(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection
    #pragma pack(pop)
    static check_size<sizeof(BeatmapSaveData::LightRotationBaseData::RotationDirection), 0 + sizeof(int)> __BeatmapSaveDataVersion3_BeatmapSaveData_LightRotationBaseData_RotationDirectionSizeCheck;
    static_assert(sizeof(BeatmapSaveData::LightRotationBaseData::RotationDirection) == 0x4);
    public:
    // private System.Single b
    // Size: 0x4
    // Offset: 0x10
    float b;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 p
    // Size: 0x4
    // Offset: 0x14
    int p;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType e
    // Size: 0x4
    // Offset: 0x18
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType e;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType) == 0x4);
    // private System.Int32 l
    // Size: 0x4
    // Offset: 0x1C
    int l;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single r
    // Size: 0x4
    // Offset: 0x20
    float r;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection o
    // Size: 0x4
    // Offset: 0x24
    ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection o;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection) == 0x4);
    public:
    // Get instance field reference: private System.Single b
    [[deprecated("Use field access instead!")]] float& dyn_b();
    // Get instance field reference: private System.Int32 p
    [[deprecated("Use field access instead!")]] int& dyn_p();
    // Get instance field reference: private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType e
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType& dyn_e();
    // Get instance field reference: private System.Int32 l
    [[deprecated("Use field access instead!")]] int& dyn_l();
    // Get instance field reference: private System.Single r
    [[deprecated("Use field access instead!")]] float& dyn_r();
    // Get instance field reference: private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection o
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection& dyn_o();
    // public System.Single get_beat()
    // Offset: 0x283D70C
    float get_beat();
    // public System.Boolean get_usePreviousEventRotationValue()
    // Offset: 0x283D714
    bool get_usePreviousEventRotationValue();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType get_easeType()
    // Offset: 0x283D724
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType get_easeType();
    // public System.Int32 get_loopsCount()
    // Offset: 0x283D72C
    int get_loopsCount();
    // public System.Single get_rotation()
    // Offset: 0x283D734
    float get_rotation();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection get_rotationDirection()
    // Offset: 0x283D73C
    ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection get_rotationDirection();
    // public System.Void .ctor(System.Single beat, System.Boolean usePreviousEventRotationValue, BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType easeType, System.Int32 loopsCount, System.Single rotation, BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData/BeatmapSaveDataVersion3.RotationDirection rotationDirection)
    // Offset: 0x283D744
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapSaveData::LightRotationBaseData* New_ctor(float beat, bool usePreviousEventRotationValue, ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType easeType, int loopsCount, float rotation, ::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection rotationDirection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapSaveData::LightRotationBaseData*, creationType>(beat, usePreviousEventRotationValue, easeType, loopsCount, rotation, rotationDirection)));
    }
  }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightRotationBaseData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapSaveData::LightRotationBaseData), 36 + sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection)> __BeatmapSaveDataVersion3_BeatmapSaveData_LightRotationBaseDataSizeCheck;
  static_assert(sizeof(BeatmapSaveData::LightRotationBaseData) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection, "BeatmapSaveDataVersion3", "BeatmapSaveData/LightRotationBaseData/RotationDirection");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_beat
// Il2CppName: get_beat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_beat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*), "get_beat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_usePreviousEventRotationValue
// Il2CppName: get_usePreviousEventRotationValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_usePreviousEventRotationValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*), "get_usePreviousEventRotationValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_easeType
// Il2CppName: get_easeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType (BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_easeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*), "get_easeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_loopsCount
// Il2CppName: get_loopsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_loopsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*), "get_loopsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_rotationDirection
// Il2CppName: get_rotationDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::RotationDirection (BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::get_rotationDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData*), "get_rotationDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightRotationBaseData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
