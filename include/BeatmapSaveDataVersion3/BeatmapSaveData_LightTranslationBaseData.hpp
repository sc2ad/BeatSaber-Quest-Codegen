// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType
#include "BeatmapSaveDataVersion3/BeatmapSaveData_EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData);
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData*, "BeatmapSaveDataVersion3", "BeatmapSaveData/LightTranslationBaseData");
// Type namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightTranslationBaseData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapSaveData::LightTranslationBaseData : public ::Il2CppObject {
    public:
    public:
    // private System.Single b
    // Size: 0x4
    // Offset: 0x10
    float b;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 p
    // Size: 0x4
    // Offset: 0x14
    int p;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType e
    // Size: 0x4
    // Offset: 0x18
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType e;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType) == 0x4);
    // private System.Single t
    // Size: 0x4
    // Offset: 0x1C
    float t;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single b
    [[deprecated("Use field access instead!")]] float& dyn_b();
    // Get instance field reference: private System.Int32 p
    [[deprecated("Use field access instead!")]] int& dyn_p();
    // Get instance field reference: private BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType e
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType& dyn_e();
    // Get instance field reference: private System.Single t
    [[deprecated("Use field access instead!")]] float& dyn_t();
    // public System.Single get_beat()
    // Offset: 0x26B563C
    float get_beat();
    // public System.Boolean get_usePreviousEventTranslationValue()
    // Offset: 0x26B5644
    bool get_usePreviousEventTranslationValue();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType get_easeType()
    // Offset: 0x26B5654
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType get_easeType();
    // public System.Single get_translation()
    // Offset: 0x26B565C
    float get_translation();
    // public System.Void .ctor(System.Single beat, System.Boolean usePreviousEventTranslationValue, BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EaseType easeType, System.Single translation)
    // Offset: 0x26B5664
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapSaveData::LightTranslationBaseData* New_ctor(float beat, bool usePreviousEventTranslationValue, ::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType easeType, float translation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapSaveData::LightTranslationBaseData*, creationType>(beat, usePreviousEventTranslationValue, easeType, translation)));
    }
  }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.LightTranslationBaseData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapSaveData::LightTranslationBaseData), 28 + sizeof(float)> __BeatmapSaveDataVersion3_BeatmapSaveData_LightTranslationBaseDataSizeCheck;
  static_assert(sizeof(BeatmapSaveData::LightTranslationBaseData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_beat
// Il2CppName: get_beat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_beat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData*), "get_beat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_usePreviousEventTranslationValue
// Il2CppName: get_usePreviousEventTranslationValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_usePreviousEventTranslationValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData*), "get_usePreviousEventTranslationValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_easeType
// Il2CppName: get_easeType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::EaseType (BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_easeType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData*), "get_easeType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_translation
// Il2CppName: get_translation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::get_translation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData*), "get_translation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::LightTranslationBaseData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
