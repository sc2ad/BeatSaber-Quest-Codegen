// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Skipping declaration: DistributionParamType because it is already included!
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox);
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox*, "BeatmapSaveDataVersion3", "BeatmapSaveData/EventBox");
// Type namespace: BeatmapSaveDataVersion3
namespace BeatmapSaveDataVersion3 {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapSaveData::EventBox : public ::Il2CppObject {
    public:
    // Nested type: ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType
    struct DistributionParamType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DistributionParamType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DistributionParamType
      constexpr DistributionParamType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType Wave
      static constexpr const int Wave = 1;
      // Get static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType Wave
      static ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType _get_Wave();
      // Set static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType Wave
      static void _set_Wave(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType value);
      // static field const value: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType Step
      static constexpr const int Step = 2;
      // Get static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType Step
      static ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType _get_Step();
      // Set static field: static public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType Step
      static void _set_Step(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType
    #pragma pack(pop)
    static check_size<sizeof(BeatmapSaveData::EventBox::DistributionParamType), 0 + sizeof(int)> __BeatmapSaveDataVersion3_BeatmapSaveData_EventBox_DistributionParamTypeSizeCheck;
    static_assert(sizeof(BeatmapSaveData::EventBox::DistributionParamType) == 0x4);
    public:
    // protected BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.IndexFilter f
    // Size: 0x8
    // Offset: 0x10
    ::BeatmapSaveDataVersion3::BeatmapSaveData::IndexFilter* f;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::IndexFilter*) == 0x8);
    // protected System.Single w
    // Size: 0x4
    // Offset: 0x18
    float w;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType d
    // Size: 0x4
    // Offset: 0x1C
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType d;
    // Field size check
    static_assert(sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType) == 0x4);
    public:
    // Get instance field reference: protected BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.IndexFilter f
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::IndexFilter*& dyn_f();
    // Get instance field reference: protected System.Single w
    [[deprecated("Use field access instead!")]] float& dyn_w();
    // Get instance field reference: protected BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType d
    [[deprecated("Use field access instead!")]] ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType& dyn_d();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.IndexFilter get_indexFilter()
    // Offset: 0x283D1C0
    ::BeatmapSaveDataVersion3::BeatmapSaveData::IndexFilter* get_indexFilter();
    // public System.Single get_beatDistributionParam()
    // Offset: 0x283D1C8
    float get_beatDistributionParam();
    // public BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType get_beatDistributionParamType()
    // Offset: 0x283D1D0
    ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType get_beatDistributionParamType();
    // protected System.Void .ctor(BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.IndexFilter indexFilter, System.Single beatDistributionParam, BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox/BeatmapSaveDataVersion3.DistributionParamType beatDistributionParamType)
    // Offset: 0x283D1D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapSaveData::EventBox* New_ctor(::BeatmapSaveDataVersion3::BeatmapSaveData::IndexFilter* indexFilter, float beatDistributionParam, ::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType beatDistributionParamType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapSaveData::EventBox*, creationType>(indexFilter, beatDistributionParam, beatDistributionParamType)));
    }
  }; // BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.EventBox
  #pragma pack(pop)
  static check_size<sizeof(BeatmapSaveData::EventBox), 28 + sizeof(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType)> __BeatmapSaveDataVersion3_BeatmapSaveData_EventBoxSizeCheck;
  static_assert(sizeof(BeatmapSaveData::EventBox) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType, "BeatmapSaveDataVersion3", "BeatmapSaveData/EventBox/DistributionParamType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::get_indexFilter
// Il2CppName: get_indexFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::IndexFilter* (BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::get_indexFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::EventBox*), "get_indexFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::get_beatDistributionParam
// Il2CppName: get_beatDistributionParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::get_beatDistributionParam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::EventBox*), "get_beatDistributionParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::get_beatDistributionParamType
// Il2CppName: get_beatDistributionParamType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::DistributionParamType (BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::*)()>(&BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::get_beatDistributionParamType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(BeatmapSaveDataVersion3::BeatmapSaveData::EventBox*), "get_beatDistributionParamType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: BeatmapSaveDataVersion3::BeatmapSaveData::EventBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
