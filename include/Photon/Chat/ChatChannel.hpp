// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Forward declaring type: ChatChannel
  class ChatChannel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Chat::ChatChannel);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Chat::ChatChannel*, "Photon.Chat", "ChatChannel");
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Chat.ChatChannel
  // [TokenAttribute] Offset: FFFFFFFF
  class ChatChannel : public ::Il2CppObject {
    public:
    public:
    // public readonly System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.Collections.Generic.List`1<System.String> Senders
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::StringW>* Senders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public readonly System.Collections.Generic.List`1<System.Object> Messages
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::Il2CppObject*>* Messages;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // public System.Int32 MessageLimit
    // Size: 0x4
    // Offset: 0x28
    int MessageLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 ChannelID
    // Size: 0x4
    // Offset: 0x2C
    int ChannelID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <IsPrivate>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool IsPrivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsPrivate and: LastMsgId
    char __padding5[0x3] = {};
    // private System.Int32 <LastMsgId>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    int LastMsgId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.Dictionary`2<System.Object,System.Object> properties
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>* properties;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*) == 0x8);
    // private System.Boolean <PublishSubscribers>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool PublishSubscribers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PublishSubscribers and: MaxSubscribers
    char __padding8[0x3] = {};
    // private System.Int32 <MaxSubscribers>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    int MaxSubscribers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Collections.Generic.HashSet`1<System.String> Subscribers
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::HashSet_1<::StringW>* Subscribers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Get instance field reference: public readonly System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public readonly System.Collections.Generic.List`1<System.String> Senders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_Senders();
    // Get instance field reference: public readonly System.Collections.Generic.List`1<System.Object> Messages
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_Messages();
    // Get instance field reference: public System.Int32 MessageLimit
    [[deprecated("Use field access instead!")]] int& dyn_MessageLimit();
    // Get instance field reference: public System.Int32 ChannelID
    [[deprecated("Use field access instead!")]] int& dyn_ChannelID();
    // Get instance field reference: private System.Boolean <IsPrivate>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsPrivate$k__BackingField();
    // Get instance field reference: private System.Int32 <LastMsgId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$LastMsgId$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Object,System.Object> properties
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*& dyn_properties();
    // Get instance field reference: private System.Boolean <PublishSubscribers>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PublishSubscribers$k__BackingField();
    // Get instance field reference: private System.Int32 <MaxSubscribers>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaxSubscribers$k__BackingField();
    // Get instance field reference: public readonly System.Collections.Generic.HashSet`1<System.String> Subscribers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_Subscribers();
    // public System.Boolean get_IsPrivate()
    // Offset: 0x1BC4BE4
    bool get_IsPrivate();
    // protected internal System.Void set_IsPrivate(System.Boolean value)
    // Offset: 0x1BC4BEC
    void set_IsPrivate(bool value);
    // public System.Int32 get_MessageCount()
    // Offset: 0x1BC4BF8
    int get_MessageCount();
    // public System.Int32 get_LastMsgId()
    // Offset: 0x1BC4C48
    int get_LastMsgId();
    // protected System.Void set_LastMsgId(System.Int32 value)
    // Offset: 0x1BC4C50
    void set_LastMsgId(int value);
    // public System.Boolean get_PublishSubscribers()
    // Offset: 0x1BC4C58
    bool get_PublishSubscribers();
    // protected System.Void set_PublishSubscribers(System.Boolean value)
    // Offset: 0x1BC4C60
    void set_PublishSubscribers(bool value);
    // public System.Int32 get_MaxSubscribers()
    // Offset: 0x1BC4C6C
    int get_MaxSubscribers();
    // protected System.Void set_MaxSubscribers(System.Int32 value)
    // Offset: 0x1BC4C74
    void set_MaxSubscribers(int value);
    // public System.Void .ctor(System.String name)
    // Offset: 0x1BC4C7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChatChannel* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Chat::ChatChannel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChatChannel*, creationType>(name)));
    }
    // public System.Void Add(System.String sender, System.Object message, System.Int32 msgId)
    // Offset: 0x1BC4D50
    void Add(::StringW sender, ::Il2CppObject* message, int msgId);
    // public System.Void Add(System.String[] senders, System.Object[] messages, System.Int32 lastMsgId)
    // Offset: 0x1BC4E9C
    void Add(::ArrayW<::StringW> senders, ::ArrayW<::Il2CppObject*> messages, int lastMsgId);
    // public System.Void TruncateMessages()
    // Offset: 0x1BC4DF0
    void TruncateMessages();
    // public System.Void ClearMessages()
    // Offset: 0x1BC4F3C
    void ClearMessages();
    // public System.String ToStringMessages()
    // Offset: 0x1BC4FAC
    ::StringW ToStringMessages();
    // System.Void ReadChannelProperties(System.Collections.Generic.Dictionary`2<System.Object,System.Object> newProperties)
    // Offset: 0x1BC50D4
    void ReadChannelProperties(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>* newProperties);
    // System.Void AddSubscribers(System.String[] users)
    // Offset: 0x1BC5370
    void AddSubscribers(::ArrayW<::StringW> users);
  }; // Photon.Chat.ChatChannel
  #pragma pack(pop)
  static check_size<sizeof(ChatChannel), 72 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __Photon_Chat_ChatChannelSizeCheck;
  static_assert(sizeof(ChatChannel) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::get_IsPrivate
// Il2CppName: get_IsPrivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::get_IsPrivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "get_IsPrivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::set_IsPrivate
// Il2CppName: set_IsPrivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(bool)>(&Photon::Chat::ChatChannel::set_IsPrivate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "set_IsPrivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::get_MessageCount
// Il2CppName: get_MessageCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::get_MessageCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "get_MessageCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::get_LastMsgId
// Il2CppName: get_LastMsgId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::get_LastMsgId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "get_LastMsgId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::set_LastMsgId
// Il2CppName: set_LastMsgId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(int)>(&Photon::Chat::ChatChannel::set_LastMsgId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "set_LastMsgId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::get_PublishSubscribers
// Il2CppName: get_PublishSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::get_PublishSubscribers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "get_PublishSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::set_PublishSubscribers
// Il2CppName: set_PublishSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(bool)>(&Photon::Chat::ChatChannel::set_PublishSubscribers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "set_PublishSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::get_MaxSubscribers
// Il2CppName: get_MaxSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::get_MaxSubscribers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "get_MaxSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::set_MaxSubscribers
// Il2CppName: set_MaxSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(int)>(&Photon::Chat::ChatChannel::set_MaxSubscribers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "set_MaxSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(::StringW, ::Il2CppObject*, int)>(&Photon::Chat::ChatChannel::Add)> {
  static const MethodInfo* get() {
    static auto* sender = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* msgId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sender, message, msgId});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(::ArrayW<::StringW>, ::ArrayW<::Il2CppObject*>, int)>(&Photon::Chat::ChatChannel::Add)> {
  static const MethodInfo* get() {
    static auto* senders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* messages = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    static auto* lastMsgId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{senders, messages, lastMsgId});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::TruncateMessages
// Il2CppName: TruncateMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::TruncateMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "TruncateMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::ClearMessages
// Il2CppName: ClearMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::ClearMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "ClearMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::ToStringMessages
// Il2CppName: ToStringMessages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatChannel::*)()>(&Photon::Chat::ChatChannel::ToStringMessages)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "ToStringMessages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::ReadChannelProperties
// Il2CppName: ReadChannelProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(::System::Collections::Generic::Dictionary_2<::Il2CppObject*, ::Il2CppObject*>*)>(&Photon::Chat::ChatChannel::ReadChannelProperties)> {
  static const MethodInfo* get() {
    static auto* newProperties = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "ReadChannelProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newProperties});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatChannel::AddSubscribers
// Il2CppName: AddSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatChannel::*)(::ArrayW<::StringW>)>(&Photon::Chat::ChatChannel::AddSubscribers)> {
  static const MethodInfo* get() {
    static auto* users = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatChannel*), "AddSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{users});
  }
};
