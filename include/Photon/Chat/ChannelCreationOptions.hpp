// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Forward declaring type: ChannelCreationOptions
  class ChannelCreationOptions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Chat::ChannelCreationOptions);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Chat::ChannelCreationOptions*, "Photon.Chat", "ChannelCreationOptions");
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Chat.ChannelCreationOptions
  // [TokenAttribute] Offset: FFFFFFFF
  class ChannelCreationOptions : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean <PublishSubscribers>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool PublishSubscribers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: PublishSubscribers and: MaxSubscribers
    char __padding0[0x3] = {};
    // private System.Int32 <MaxSubscribers>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int MaxSubscribers;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get static field: static public Photon.Chat.ChannelCreationOptions Default
    static ::Photon::Chat::ChannelCreationOptions* _get_Default();
    // Set static field: static public Photon.Chat.ChannelCreationOptions Default
    static void _set_Default(::Photon::Chat::ChannelCreationOptions* value);
    // Get instance field reference: private System.Boolean <PublishSubscribers>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PublishSubscribers$k__BackingField();
    // Get instance field reference: private System.Int32 <MaxSubscribers>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$MaxSubscribers$k__BackingField();
    // public System.Boolean get_PublishSubscribers()
    // Offset: 0x1BC4B20
    bool get_PublishSubscribers();
    // public System.Void set_PublishSubscribers(System.Boolean value)
    // Offset: 0x1BC4B28
    void set_PublishSubscribers(bool value);
    // public System.Int32 get_MaxSubscribers()
    // Offset: 0x1BC4B34
    int get_MaxSubscribers();
    // public System.Void set_MaxSubscribers(System.Int32 value)
    // Offset: 0x1BC4B3C
    void set_MaxSubscribers(int value);
    // public System.Void .ctor()
    // Offset: 0x1BC4B44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChannelCreationOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Chat::ChannelCreationOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChannelCreationOptions*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BC4B4C
    static void _cctor();
  }; // Photon.Chat.ChannelCreationOptions
  #pragma pack(pop)
  static check_size<sizeof(ChannelCreationOptions), 20 + sizeof(int)> __Photon_Chat_ChannelCreationOptionsSizeCheck;
  static_assert(sizeof(ChannelCreationOptions) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Chat::ChannelCreationOptions::get_PublishSubscribers
// Il2CppName: get_PublishSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChannelCreationOptions::*)()>(&Photon::Chat::ChannelCreationOptions::get_PublishSubscribers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChannelCreationOptions*), "get_PublishSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChannelCreationOptions::set_PublishSubscribers
// Il2CppName: set_PublishSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChannelCreationOptions::*)(bool)>(&Photon::Chat::ChannelCreationOptions::set_PublishSubscribers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChannelCreationOptions*), "set_PublishSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChannelCreationOptions::get_MaxSubscribers
// Il2CppName: get_MaxSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Chat::ChannelCreationOptions::*)()>(&Photon::Chat::ChannelCreationOptions::get_MaxSubscribers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChannelCreationOptions*), "get_MaxSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChannelCreationOptions::set_MaxSubscribers
// Il2CppName: set_MaxSubscribers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChannelCreationOptions::*)(int)>(&Photon::Chat::ChannelCreationOptions::set_MaxSubscribers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChannelCreationOptions*), "set_MaxSubscribers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChannelCreationOptions::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Chat::ChannelCreationOptions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Chat::ChannelCreationOptions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChannelCreationOptions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
