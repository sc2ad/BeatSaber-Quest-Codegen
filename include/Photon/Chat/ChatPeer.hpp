// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.PhotonPeer
#include "ExitGames/Client/Photon/PhotonPeer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: IPhotonPeerListener
  class IPhotonPeerListener;
}
// Forward declaring namespace: Photon::Chat
namespace Photon::Chat {
  // Forward declaring type: AuthenticationValues
  class AuthenticationValues;
}
// Completed forward declares
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Forward declaring type: ChatPeer
  class ChatPeer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Chat::ChatPeer);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Chat::ChatPeer*, "Photon.Chat", "ChatPeer");
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Size: 0x122
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Chat.ChatPeer
  // [TokenAttribute] Offset: FFFFFFFF
  class ChatPeer : public ::ExitGames::Client::Photon::PhotonPeer {
    public:
    public:
    // public System.String NameServerHost
    // Size: 0x8
    // Offset: 0x118
    ::StringW NameServerHost;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt16 NameServerPortOverride
    // Size: 0x2
    // Offset: 0x120
    uint16_t NameServerPortOverride;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    public:
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Int32> ProtocolToNameServerPort
    static ::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, int>* _get_ProtocolToNameServerPort();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Int32> ProtocolToNameServerPort
    static void _set_ProtocolToNameServerPort(::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, int>* value);
    // Get instance field reference: public System.String NameServerHost
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NameServerHost();
    // Get instance field reference: public System.UInt16 NameServerPortOverride
    [[deprecated("Use field access instead!")]] uint16_t& dyn_NameServerPortOverride();
    // public System.String get_NameServerAddress()
    // Offset: 0x1BC5CD4
    ::StringW get_NameServerAddress();
    // System.Boolean get_IsProtocolSecure()
    // Offset: 0x1BCAEB0
    bool get_IsProtocolSecure();
    // public System.Void .ctor(ExitGames.Client.Photon.IPhotonPeerListener listener, ExitGames.Client.Photon.ConnectionProtocol protocol)
    // Offset: 0x1BC5920
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChatPeer* New_ctor(::ExitGames::Client::Photon::IPhotonPeerListener* listener, ::ExitGames::Client::Photon::ConnectionProtocol protocol) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Chat::ChatPeer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChatPeer*, creationType>(listener, protocol)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BCB0D4
    static void _cctor();
    // private System.Void ConfigUnitySockets()
    // Offset: 0x1BCAED4
    void ConfigUnitySockets();
    // private System.String GetNameServerAddress()
    // Offset: 0x1BCAC74
    ::StringW GetNameServerAddress();
    // public System.Boolean Connect()
    // Offset: 0x1BC5CD8
    bool Connect();
    // public System.Boolean AuthenticateOnNameServer(System.String appId, System.String appVersion, System.String region, Photon.Chat.AuthenticationValues authValues)
    // Offset: 0x1BCA384
    bool AuthenticateOnNameServer(::StringW appId, ::StringW appVersion, ::StringW region, ::Photon::Chat::AuthenticationValues* authValues);
  }; // Photon.Chat.ChatPeer
  #pragma pack(pop)
  static check_size<sizeof(ChatPeer), 288 + sizeof(uint16_t)> __Photon_Chat_ChatPeerSizeCheck;
  static_assert(sizeof(ChatPeer) == 0x122);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::get_NameServerAddress
// Il2CppName: get_NameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatPeer::*)()>(&Photon::Chat::ChatPeer::get_NameServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), "get_NameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::get_IsProtocolSecure
// Il2CppName: get_IsProtocolSecure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatPeer::*)()>(&Photon::Chat::ChatPeer::get_IsProtocolSecure)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), "get_IsProtocolSecure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Chat::ChatPeer::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::ConfigUnitySockets
// Il2CppName: ConfigUnitySockets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatPeer::*)()>(&Photon::Chat::ChatPeer::ConfigUnitySockets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), "ConfigUnitySockets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::GetNameServerAddress
// Il2CppName: GetNameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatPeer::*)()>(&Photon::Chat::ChatPeer::GetNameServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), "GetNameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatPeer::*)()>(&Photon::Chat::ChatPeer::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatPeer::AuthenticateOnNameServer
// Il2CppName: AuthenticateOnNameServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatPeer::*)(::StringW, ::StringW, ::StringW, ::Photon::Chat::AuthenticationValues*)>(&Photon::Chat::ChatPeer::AuthenticateOnNameServer)> {
  static const MethodInfo* get() {
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appVersion = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* region = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* authValues = &::il2cpp_utils::GetClassFromName("Photon.Chat", "AuthenticationValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatPeer*), "AuthenticateOnNameServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appId, appVersion, region, authValues});
  }
};
