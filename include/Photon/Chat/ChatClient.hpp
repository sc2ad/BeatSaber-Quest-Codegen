// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.IPhotonPeerListener
#include "ExitGames/Client/Photon/IPhotonPeerListener.hpp"
// Including type: Photon.Chat.ChatState
#include "Photon/Chat/ChatState.hpp"
// Including type: Photon.Chat.ChatDisconnectCause
#include "Photon/Chat/ChatDisconnectCause.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: ExitGames.Client.Photon.ConnectionProtocol
#include "ExitGames/Client/Photon/ConnectionProtocol.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Chat
namespace Photon::Chat {
  // Forward declaring type: AuthenticationValues
  class AuthenticationValues;
  // Forward declaring type: ChatChannel
  class ChatChannel;
  // Forward declaring type: IChatClientListener
  class IChatClientListener;
  // Forward declaring type: ChatPeer
  class ChatPeer;
  // Forward declaring type: ChatAppSettings
  class ChatAppSettings;
  // Forward declaring type: ChannelCreationOptions
  class ChannelCreationOptions;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: DebugLevel
  struct DebugLevel;
  // Forward declaring type: EventData
  class EventData;
  // Forward declaring type: OperationResponse
  class OperationResponse;
  // Forward declaring type: StatusCode
  struct StatusCode;
}
// Completed forward declares
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // Forward declaring type: ChatClient
  class ChatClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Chat::ChatClient);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Chat::ChatClient*, "Photon.Chat", "ChatClient");
// Type namespace: Photon.Chat
namespace Photon::Chat {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Chat.ChatClient
  // [TokenAttribute] Offset: FFFFFFFF
  class ChatClient : public ::Il2CppObject/*, public ::ExitGames::Client::Photon::IPhotonPeerListener*/ {
    public:
    public:
    // private System.Boolean <EnableProtocolFallback>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool EnableProtocolFallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String <NameServerAddress>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW NameServerAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <FrontendAddress>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW FrontendAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String chatRegion
    // Size: 0x8
    // Offset: 0x28
    ::StringW chatRegion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Chat.ChatState <State>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::Photon::Chat::ChatState State;
    // Field size check
    static_assert(sizeof(::Photon::Chat::ChatState) == 0x4);
    // private Photon.Chat.ChatDisconnectCause <DisconnectedCause>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    ::Photon::Chat::ChatDisconnectCause DisconnectedCause;
    // Field size check
    static_assert(sizeof(::Photon::Chat::ChatDisconnectCause) == 0x4);
    // private System.String <AppVersion>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW AppVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <AppId>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::StringW AppId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Chat.AuthenticationValues <AuthValues>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Chat::AuthenticationValues* AuthValues;
    // Field size check
    static_assert(sizeof(::Photon::Chat::AuthenticationValues*) == 0x8);
    // public System.Int32 MessageLimit
    // Size: 0x4
    // Offset: 0x50
    int MessageLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PrivateChatHistoryLength
    // Size: 0x4
    // Offset: 0x54
    int PrivateChatHistoryLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Collections.Generic.Dictionary`2<System.String,Photon.Chat.ChatChannel> PublicChannels
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Photon::Chat::ChatChannel*>* PublicChannels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Photon::Chat::ChatChannel*>*) == 0x8);
    // public readonly System.Collections.Generic.Dictionary`2<System.String,Photon.Chat.ChatChannel> PrivateChannels
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::StringW, ::Photon::Chat::ChatChannel*>* PrivateChannels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::Photon::Chat::ChatChannel*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> PublicChannelsUnsubscribing
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::HashSet_1<::StringW>* PublicChannelsUnsubscribing;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private readonly Photon.Chat.IChatClientListener listener
    // Size: 0x8
    // Offset: 0x70
    ::Photon::Chat::IChatClientListener* listener;
    // Field size check
    static_assert(sizeof(::Photon::Chat::IChatClientListener*) == 0x8);
    // public Photon.Chat.ChatPeer chatPeer
    // Size: 0x8
    // Offset: 0x78
    ::Photon::Chat::ChatPeer* chatPeer;
    // Field size check
    static_assert(sizeof(::Photon::Chat::ChatPeer*) == 0x8);
    // private System.Boolean didAuthenticate
    // Size: 0x1
    // Offset: 0x80
    bool didAuthenticate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Nullable`1<System.Int32> statusToSetWhenConnected
    // Size: 0xFFFFFFFF
    // Offset: 0x84
    ::System::Nullable_1<int> statusToSetWhenConnected;
    // private System.Object messageToSetWhenConnected
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* messageToSetWhenConnected;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 msDeltaForServiceCalls
    // Size: 0x4
    // Offset: 0x98
    int msDeltaForServiceCalls;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 msTimestampOfLastServiceCall
    // Size: 0x4
    // Offset: 0x9C
    int msTimestampOfLastServiceCall;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <UseBackgroundWorkerForSending>k__BackingField
    // Size: 0x1
    // Offset: 0xA0
    bool UseBackgroundWorkerForSending;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::ExitGames::Client::Photon::IPhotonPeerListener
    operator ::ExitGames::Client::Photon::IPhotonPeerListener() noexcept {
      return *reinterpret_cast<::ExitGames::Client::Photon::IPhotonPeerListener*>(this);
    }
    // static field const value: static private System.Int32 FriendRequestListMax
    static constexpr const int FriendRequestListMax = 1024;
    // Get static field: static private System.Int32 FriendRequestListMax
    static int _get_FriendRequestListMax();
    // Set static field: static private System.Int32 FriendRequestListMax
    static void _set_FriendRequestListMax(int value);
    // static field const value: static public System.Int32 DefaultMaxSubscribers
    static constexpr const int DefaultMaxSubscribers = 100;
    // Get static field: static public System.Int32 DefaultMaxSubscribers
    static int _get_DefaultMaxSubscribers();
    // Set static field: static public System.Int32 DefaultMaxSubscribers
    static void _set_DefaultMaxSubscribers(int value);
    // static field const value: static private System.Byte HttpForwardWebFlag
    static constexpr const uint8_t HttpForwardWebFlag = 1u;
    // Get static field: static private System.Byte HttpForwardWebFlag
    static uint8_t _get_HttpForwardWebFlag();
    // Set static field: static private System.Byte HttpForwardWebFlag
    static void _set_HttpForwardWebFlag(uint8_t value);
    // static field const value: static private System.String ChatAppName
    static constexpr const char* ChatAppName = "chat";
    // Get static field: static private System.String ChatAppName
    static ::StringW _get_ChatAppName();
    // Set static field: static private System.String ChatAppName
    static void _set_ChatAppName(::StringW value);
    // Get instance field reference: private System.Boolean <EnableProtocolFallback>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EnableProtocolFallback$k__BackingField();
    // Get instance field reference: private System.String <NameServerAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$NameServerAddress$k__BackingField();
    // Get instance field reference: private System.String <FrontendAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$FrontendAddress$k__BackingField();
    // Get instance field reference: private System.String chatRegion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_chatRegion();
    // Get instance field reference: private Photon.Chat.ChatState <State>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Chat::ChatState& dyn_$State$k__BackingField();
    // Get instance field reference: private Photon.Chat.ChatDisconnectCause <DisconnectedCause>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Chat::ChatDisconnectCause& dyn_$DisconnectedCause$k__BackingField();
    // Get instance field reference: private System.String <AppVersion>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$AppVersion$k__BackingField();
    // Get instance field reference: private System.String <AppId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$AppId$k__BackingField();
    // Get instance field reference: private Photon.Chat.AuthenticationValues <AuthValues>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Chat::AuthenticationValues*& dyn_$AuthValues$k__BackingField();
    // Get instance field reference: public System.Int32 MessageLimit
    [[deprecated("Use field access instead!")]] int& dyn_MessageLimit();
    // Get instance field reference: public System.Int32 PrivateChatHistoryLength
    [[deprecated("Use field access instead!")]] int& dyn_PrivateChatHistoryLength();
    // Get instance field reference: public readonly System.Collections.Generic.Dictionary`2<System.String,Photon.Chat.ChatChannel> PublicChannels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Photon::Chat::ChatChannel*>*& dyn_PublicChannels();
    // Get instance field reference: public readonly System.Collections.Generic.Dictionary`2<System.String,Photon.Chat.ChatChannel> PrivateChannels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::Photon::Chat::ChatChannel*>*& dyn_PrivateChannels();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> PublicChannelsUnsubscribing
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_PublicChannelsUnsubscribing();
    // Get instance field reference: private readonly Photon.Chat.IChatClientListener listener
    [[deprecated("Use field access instead!")]] ::Photon::Chat::IChatClientListener*& dyn_listener();
    // Get instance field reference: public Photon.Chat.ChatPeer chatPeer
    [[deprecated("Use field access instead!")]] ::Photon::Chat::ChatPeer*& dyn_chatPeer();
    // Get instance field reference: private System.Boolean didAuthenticate
    [[deprecated("Use field access instead!")]] bool& dyn_didAuthenticate();
    // Get instance field reference: private System.Nullable`1<System.Int32> statusToSetWhenConnected
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<int>& dyn_statusToSetWhenConnected();
    // Get instance field reference: private System.Object messageToSetWhenConnected
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_messageToSetWhenConnected();
    // Get instance field reference: private System.Int32 msDeltaForServiceCalls
    [[deprecated("Use field access instead!")]] int& dyn_msDeltaForServiceCalls();
    // Get instance field reference: private System.Int32 msTimestampOfLastServiceCall
    [[deprecated("Use field access instead!")]] int& dyn_msTimestampOfLastServiceCall();
    // Get instance field reference: private System.Boolean <UseBackgroundWorkerForSending>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseBackgroundWorkerForSending$k__BackingField();
    // public System.Boolean get_EnableProtocolFallback()
    // Offset: 0x1BC5424
    bool get_EnableProtocolFallback();
    // public System.Void set_EnableProtocolFallback(System.Boolean value)
    // Offset: 0x1BC542C
    void set_EnableProtocolFallback(bool value);
    // public System.String get_NameServerAddress()
    // Offset: 0x1BC5438
    ::StringW get_NameServerAddress();
    // private System.Void set_NameServerAddress(System.String value)
    // Offset: 0x1BC5440
    void set_NameServerAddress(::StringW value);
    // public System.String get_FrontendAddress()
    // Offset: 0x1BC5448
    ::StringW get_FrontendAddress();
    // private System.Void set_FrontendAddress(System.String value)
    // Offset: 0x1BC5450
    void set_FrontendAddress(::StringW value);
    // public System.String get_ChatRegion()
    // Offset: 0x1BC5458
    ::StringW get_ChatRegion();
    // public System.Void set_ChatRegion(System.String value)
    // Offset: 0x1BC5460
    void set_ChatRegion(::StringW value);
    // public Photon.Chat.ChatState get_State()
    // Offset: 0x1BC5468
    ::Photon::Chat::ChatState get_State();
    // private System.Void set_State(Photon.Chat.ChatState value)
    // Offset: 0x1BC5470
    void set_State(::Photon::Chat::ChatState value);
    // public Photon.Chat.ChatDisconnectCause get_DisconnectedCause()
    // Offset: 0x1BC5478
    ::Photon::Chat::ChatDisconnectCause get_DisconnectedCause();
    // private System.Void set_DisconnectedCause(Photon.Chat.ChatDisconnectCause value)
    // Offset: 0x1BC5480
    void set_DisconnectedCause(::Photon::Chat::ChatDisconnectCause value);
    // public System.Boolean get_CanChat()
    // Offset: 0x1BC5488
    bool get_CanChat();
    // private System.Boolean get_HasPeer()
    // Offset: 0x1BC54AC
    bool get_HasPeer();
    // public System.String get_AppVersion()
    // Offset: 0x1BC556C
    ::StringW get_AppVersion();
    // private System.Void set_AppVersion(System.String value)
    // Offset: 0x1BC5574
    void set_AppVersion(::StringW value);
    // public System.String get_AppId()
    // Offset: 0x1BC557C
    ::StringW get_AppId();
    // private System.Void set_AppId(System.String value)
    // Offset: 0x1BC5584
    void set_AppId(::StringW value);
    // public Photon.Chat.AuthenticationValues get_AuthValues()
    // Offset: 0x1BC558C
    ::Photon::Chat::AuthenticationValues* get_AuthValues();
    // public System.Void set_AuthValues(Photon.Chat.AuthenticationValues value)
    // Offset: 0x1BC5594
    void set_AuthValues(::Photon::Chat::AuthenticationValues* value);
    // public System.String get_UserId()
    // Offset: 0x1BC559C
    ::StringW get_UserId();
    // private System.Void set_UserId(System.String value)
    // Offset: 0x1BC55B4
    void set_UserId(::StringW value);
    // public System.Boolean get_UseBackgroundWorkerForSending()
    // Offset: 0x1BC563C
    bool get_UseBackgroundWorkerForSending();
    // public System.Void set_UseBackgroundWorkerForSending(System.Boolean value)
    // Offset: 0x1BC5644
    void set_UseBackgroundWorkerForSending(bool value);
    // public ExitGames.Client.Photon.ConnectionProtocol get_TransportProtocol()
    // Offset: 0x1BC5650
    ::ExitGames::Client::Photon::ConnectionProtocol get_TransportProtocol();
    // public System.Void set_TransportProtocol(ExitGames.Client.Photon.ConnectionProtocol value)
    // Offset: 0x1BC566C
    void set_TransportProtocol(::ExitGames::Client::Photon::ConnectionProtocol value);
    // public System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Type> get_SocketImplementationConfig()
    // Offset: 0x1BC57E4
    ::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, ::System::Type*>* get_SocketImplementationConfig();
    // public ExitGames.Client.Photon.DebugLevel get_DebugOut()
    // Offset: 0x1BC6580
    ::ExitGames::Client::Photon::DebugLevel get_DebugOut();
    // public System.Void set_DebugOut(ExitGames.Client.Photon.DebugLevel value)
    // Offset: 0x1BC5B1C
    void set_DebugOut(::ExitGames::Client::Photon::DebugLevel value);
    // public System.Void .ctor(Photon.Chat.IChatClientListener listener, ExitGames.Client.Photon.ConnectionProtocol protocol)
    // Offset: 0x1BC5800
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChatClient* New_ctor(::Photon::Chat::IChatClientListener* listener, ::ExitGames::Client::Photon::ConnectionProtocol protocol) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Chat::ChatClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChatClient*, creationType>(listener, protocol)));
    }
    // public System.Boolean CanChatInChannel(System.String channelName)
    // Offset: 0x1BC54BC
    bool CanChatInChannel(::StringW channelName);
    // public System.Boolean ConnectUsingSettings(Photon.Chat.ChatAppSettings appSettings)
    // Offset: 0x1BC59B8
    bool ConnectUsingSettings(::Photon::Chat::ChatAppSettings* appSettings);
    // public System.Boolean Connect(System.String appId, System.String appVersion, Photon.Chat.AuthenticationValues authValues)
    // Offset: 0x1BC5B38
    bool Connect(::StringW appId, ::StringW appVersion, ::Photon::Chat::AuthenticationValues* authValues);
    // public System.Boolean ConnectAndSetStatus(System.String appId, System.String appVersion, Photon.Chat.AuthenticationValues authValues, System.Int32 status, System.Object message)
    // Offset: 0x1BC5DFC
    bool ConnectAndSetStatus(::StringW appId, ::StringW appVersion, ::Photon::Chat::AuthenticationValues* authValues, int status, ::Il2CppObject* message);
    // public System.Void Service()
    // Offset: 0x1BC5EA8
    void Service();
    // private System.Boolean SendOutgoingInBackground()
    // Offset: 0x1BC5F2C
    bool SendOutgoingInBackground();
    // public System.Void SendAcksOnly()
    // Offset: 0x1BC5F6C
    void SendAcksOnly();
    // public System.Void Disconnect(Photon.Chat.ChatDisconnectCause cause)
    // Offset: 0x1BC5F88
    void Disconnect(::Photon::Chat::ChatDisconnectCause cause);
    // public System.Void StopThread()
    // Offset: 0x1BC5FE8
    void StopThread();
    // public System.Boolean Subscribe(System.String[] channels)
    // Offset: 0x1BC6000
    bool Subscribe(::ArrayW<::StringW> channels);
    // public System.Boolean Subscribe(System.String[] channels, System.Int32[] lastMsgIds)
    // Offset: 0x1BC61B8
    bool Subscribe(::ArrayW<::StringW> channels, ::ArrayW<int> lastMsgIds);
    // public System.Boolean Subscribe(System.String[] channels, System.Int32 messagesFromHistory)
    // Offset: 0x1BC6008
    bool Subscribe(::ArrayW<::StringW> channels, int messagesFromHistory);
    // public System.Boolean Unsubscribe(System.String[] channels)
    // Offset: 0x1BC66CC
    bool Unsubscribe(::ArrayW<::StringW> channels);
    // public System.Boolean PublishMessage(System.String channelName, System.Object message, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC68D4
    bool PublishMessage(::StringW channelName, ::Il2CppObject* message, bool forwardAsWebhook);
    // System.Boolean PublishMessageUnreliable(System.String channelName, System.Object message, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC6B74
    bool PublishMessageUnreliable(::StringW channelName, ::Il2CppObject* message, bool forwardAsWebhook);
    // private System.Boolean publishMessage(System.String channelName, System.Object message, System.Boolean reliable, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC68E0
    bool publishMessage(::StringW channelName, ::Il2CppObject* message, bool reliable, bool forwardAsWebhook);
    // public System.Boolean SendPrivateMessage(System.String target, System.Object message, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC6B80
    bool SendPrivateMessage(::StringW target, ::Il2CppObject* message, bool forwardAsWebhook);
    // public System.Boolean SendPrivateMessage(System.String target, System.Object message, System.Boolean encrypt, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC6B90
    bool SendPrivateMessage(::StringW target, ::Il2CppObject* message, bool encrypt, bool forwardAsWebhook);
    // System.Boolean SendPrivateMessageUnreliable(System.String target, System.Object message, System.Boolean encrypt, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC6E40
    bool SendPrivateMessageUnreliable(::StringW target, ::Il2CppObject* message, bool encrypt, bool forwardAsWebhook);
    // private System.Boolean sendPrivateMessage(System.String target, System.Object message, System.Boolean encrypt, System.Boolean reliable, System.Boolean forwardAsWebhook)
    // Offset: 0x1BC6BA0
    bool sendPrivateMessage(::StringW target, ::Il2CppObject* message, bool encrypt, bool reliable, bool forwardAsWebhook);
    // private System.Boolean SetOnlineStatus(System.Int32 status, System.Object message, System.Boolean skipMessage)
    // Offset: 0x1BC6E50
    bool SetOnlineStatus(int status, ::Il2CppObject* message, bool skipMessage);
    // public System.Boolean SetOnlineStatus(System.Int32 status)
    // Offset: 0x1BC7060
    bool SetOnlineStatus(int status);
    // public System.Boolean SetOnlineStatus(System.Int32 status, System.Object message)
    // Offset: 0x1BC706C
    bool SetOnlineStatus(int status, ::Il2CppObject* message);
    // public System.Boolean AddFriends(System.String[] friends)
    // Offset: 0x1BC7074
    bool AddFriends(::ArrayW<::StringW> friends);
    // public System.Boolean RemoveFriends(System.String[] friends)
    // Offset: 0x1BC743C
    bool RemoveFriends(::ArrayW<::StringW> friends);
    // public System.String GetPrivateChannelNameByUser(System.String userName)
    // Offset: 0x1BC7804
    ::StringW GetPrivateChannelNameByUser(::StringW userName);
    // public System.Boolean TryGetChannel(System.String channelName, System.Boolean isPrivate, out Photon.Chat.ChatChannel channel)
    // Offset: 0x1BC7878
    bool TryGetChannel(::StringW channelName, bool isPrivate, ByRef<::Photon::Chat::ChatChannel*> channel);
    // public System.Boolean TryGetChannel(System.String channelName, out Photon.Chat.ChatChannel channel)
    // Offset: 0x1BC7900
    bool TryGetChannel(::StringW channelName, ByRef<::Photon::Chat::ChatChannel*> channel);
    // public System.Boolean TryGetPrivateChannelByUser(System.String userId, out Photon.Chat.ChatChannel channel)
    // Offset: 0x1BC79A0
    bool TryGetPrivateChannelByUser(::StringW userId, ByRef<::Photon::Chat::ChatChannel*> channel);
    // private System.Void ExitGames.Client.Photon.IPhotonPeerListener.DebugReturn(ExitGames.Client.Photon.DebugLevel level, System.String message)
    // Offset: 0x1BC7A10
    void ExitGames_Client_Photon_IPhotonPeerListener_DebugReturn(::ExitGames::Client::Photon::DebugLevel level, ::StringW message);
    // private System.Void ExitGames.Client.Photon.IPhotonPeerListener.OnEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC7AD8
    void ExitGames_Client_Photon_IPhotonPeerListener_OnEvent(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Void ExitGames.Client.Photon.IPhotonPeerListener.OnOperationResponse(ExitGames.Client.Photon.OperationResponse operationResponse)
    // Offset: 0x1BC8EF4
    void ExitGames_Client_Photon_IPhotonPeerListener_OnOperationResponse(::ExitGames::Client::Photon::OperationResponse* operationResponse);
    // private System.Void ExitGames.Client.Photon.IPhotonPeerListener.OnStatusChanged(ExitGames.Client.Photon.StatusCode statusCode)
    // Offset: 0x1BC97E0
    void ExitGames_Client_Photon_IPhotonPeerListener_OnStatusChanged(::ExitGames::Client::Photon::StatusCode statusCode);
    // private System.Void TryAuthenticateOnNameServer()
    // Offset: 0x1BC9E24
    void TryAuthenticateOnNameServer();
    // private System.Boolean SendChannelOperation(System.String[] channels, System.Byte operation, System.Int32 historyLength)
    // Offset: 0x1BC659C
    bool SendChannelOperation(::ArrayW<::StringW> channels, uint8_t operation, int historyLength);
    // private System.Void HandlePrivateMessageEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC7E14
    void HandlePrivateMessageEvent(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Void HandleChatMessagesEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC7B28
    void HandleChatMessagesEvent(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Void HandleSubscribeEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC8228
    void HandleSubscribeEvent(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Void HandleUnsubscribeEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC8574
    void HandleUnsubscribeEvent(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Void HandleAuthResponse(ExitGames.Client.Photon.OperationResponse operationResponse)
    // Offset: 0x1BC90F4
    void HandleAuthResponse(::ExitGames::Client::Photon::OperationResponse* operationResponse);
    // private System.Void HandleStatusUpdate(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC8094
    void HandleStatusUpdate(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Boolean ConnectToFrontEnd()
    // Offset: 0x1BCA19C
    bool ConnectToFrontEnd();
    // private System.Boolean AuthenticateOnFrontEnd()
    // Offset: 0x1BC9F60
    bool AuthenticateOnFrontEnd();
    // private System.Void HandleUserUnsubscribedEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC8B74
    void HandleUserUnsubscribedEvent(::ExitGames::Client::Photon::EventData* eventData);
    // private System.Void HandleUserSubscribedEvent(ExitGames.Client.Photon.EventData eventData)
    // Offset: 0x1BC8704
    void HandleUserSubscribedEvent(::ExitGames::Client::Photon::EventData* eventData);
    // public System.Boolean Subscribe(System.String channel, System.Int32 lastMsgId, System.Int32 messagesFromHistory, Photon.Chat.ChannelCreationOptions creationOptions)
    // Offset: 0x1BCA5F4
    bool Subscribe(::StringW channel, int lastMsgId, int messagesFromHistory, ::Photon::Chat::ChannelCreationOptions* creationOptions);
  }; // Photon.Chat.ChatClient
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_EnableProtocolFallback
// Il2CppName: get_EnableProtocolFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_EnableProtocolFallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_EnableProtocolFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_EnableProtocolFallback
// Il2CppName: set_EnableProtocolFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(bool)>(&Photon::Chat::ChatClient::set_EnableProtocolFallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_EnableProtocolFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_NameServerAddress
// Il2CppName: get_NameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_NameServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_NameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_NameServerAddress
// Il2CppName: set_NameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::set_NameServerAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_NameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_FrontendAddress
// Il2CppName: get_FrontendAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_FrontendAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_FrontendAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_FrontendAddress
// Il2CppName: set_FrontendAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::set_FrontendAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_FrontendAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_ChatRegion
// Il2CppName: get_ChatRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_ChatRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_ChatRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_ChatRegion
// Il2CppName: set_ChatRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::set_ChatRegion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_ChatRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Chat::ChatState (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::Photon::Chat::ChatState)>(&Photon::Chat::ChatClient::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_DisconnectedCause
// Il2CppName: get_DisconnectedCause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Chat::ChatDisconnectCause (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_DisconnectedCause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_DisconnectedCause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_DisconnectedCause
// Il2CppName: set_DisconnectedCause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::Photon::Chat::ChatDisconnectCause)>(&Photon::Chat::ChatClient::set_DisconnectedCause)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatDisconnectCause")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_DisconnectedCause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_CanChat
// Il2CppName: get_CanChat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_CanChat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_CanChat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_HasPeer
// Il2CppName: get_HasPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_HasPeer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_HasPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_AppVersion
// Il2CppName: get_AppVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_AppVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_AppVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_AppVersion
// Il2CppName: set_AppVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::set_AppVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_AppVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_AppId
// Il2CppName: get_AppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_AppId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_AppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_AppId
// Il2CppName: set_AppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::set_AppId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_AppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_AuthValues
// Il2CppName: get_AuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Chat::AuthenticationValues* (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_AuthValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_AuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_AuthValues
// Il2CppName: set_AuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::Photon::Chat::AuthenticationValues*)>(&Photon::Chat::ChatClient::set_AuthValues)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Chat", "AuthenticationValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_AuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_UserId
// Il2CppName: get_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_UserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_UserId
// Il2CppName: set_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::set_UserId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_UseBackgroundWorkerForSending
// Il2CppName: get_UseBackgroundWorkerForSending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_UseBackgroundWorkerForSending)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_UseBackgroundWorkerForSending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_UseBackgroundWorkerForSending
// Il2CppName: set_UseBackgroundWorkerForSending
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(bool)>(&Photon::Chat::ChatClient::set_UseBackgroundWorkerForSending)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_UseBackgroundWorkerForSending", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_TransportProtocol
// Il2CppName: get_TransportProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::ConnectionProtocol (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_TransportProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_TransportProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_TransportProtocol
// Il2CppName: set_TransportProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::ConnectionProtocol)>(&Photon::Chat::ChatClient::set_TransportProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ConnectionProtocol")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_TransportProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_SocketImplementationConfig
// Il2CppName: get_SocketImplementationConfig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, ::System::Type*>* (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_SocketImplementationConfig)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_SocketImplementationConfig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::get_DebugOut
// Il2CppName: get_DebugOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::get_DebugOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "get_DebugOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::set_DebugOut
// Il2CppName: set_DebugOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::DebugLevel)>(&Photon::Chat::ChatClient::set_DebugOut)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "set_DebugOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Chat::ChatClient::CanChatInChannel
// Il2CppName: CanChatInChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::CanChatInChannel)> {
  static const MethodInfo* get() {
    static auto* channelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "CanChatInChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelName});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ConnectUsingSettings
// Il2CppName: ConnectUsingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::Photon::Chat::ChatAppSettings*)>(&Photon::Chat::ChatClient::ConnectUsingSettings)> {
  static const MethodInfo* get() {
    static auto* appSettings = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatAppSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ConnectUsingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appSettings});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::StringW, ::Photon::Chat::AuthenticationValues*)>(&Photon::Chat::ChatClient::Connect)> {
  static const MethodInfo* get() {
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appVersion = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* authValues = &::il2cpp_utils::GetClassFromName("Photon.Chat", "AuthenticationValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appId, appVersion, authValues});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ConnectAndSetStatus
// Il2CppName: ConnectAndSetStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::StringW, ::Photon::Chat::AuthenticationValues*, int, ::Il2CppObject*)>(&Photon::Chat::ChatClient::ConnectAndSetStatus)> {
  static const MethodInfo* get() {
    static auto* appId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appVersion = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* authValues = &::il2cpp_utils::GetClassFromName("Photon.Chat", "AuthenticationValues")->byval_arg;
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ConnectAndSetStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appId, appVersion, authValues, status, message});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SendOutgoingInBackground
// Il2CppName: SendOutgoingInBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::SendOutgoingInBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SendOutgoingInBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SendAcksOnly
// Il2CppName: SendAcksOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::SendAcksOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SendAcksOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::Photon::Chat::ChatDisconnectCause)>(&Photon::Chat::ChatClient::Disconnect)> {
  static const MethodInfo* get() {
    static auto* cause = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatDisconnectCause")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cause});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::StopThread
// Il2CppName: StopThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::StopThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "StopThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>)>(&Photon::Chat::ChatClient::Subscribe)> {
  static const MethodInfo* get() {
    static auto* channels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>, ::ArrayW<int>)>(&Photon::Chat::ChatClient::Subscribe)> {
  static const MethodInfo* get() {
    static auto* channels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* lastMsgIds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, lastMsgIds});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>, int)>(&Photon::Chat::ChatClient::Subscribe)> {
  static const MethodInfo* get() {
    static auto* channels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* messagesFromHistory = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, messagesFromHistory});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Unsubscribe
// Il2CppName: Unsubscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>)>(&Photon::Chat::ChatClient::Unsubscribe)> {
  static const MethodInfo* get() {
    static auto* channels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Unsubscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::PublishMessage
// Il2CppName: PublishMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool)>(&Photon::Chat::ChatClient::PublishMessage)> {
  static const MethodInfo* get() {
    static auto* channelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "PublishMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelName, message, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::PublishMessageUnreliable
// Il2CppName: PublishMessageUnreliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool)>(&Photon::Chat::ChatClient::PublishMessageUnreliable)> {
  static const MethodInfo* get() {
    static auto* channelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "PublishMessageUnreliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelName, message, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::publishMessage
// Il2CppName: publishMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool, bool)>(&Photon::Chat::ChatClient::publishMessage)> {
  static const MethodInfo* get() {
    static auto* channelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "publishMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelName, message, reliable, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SendPrivateMessage
// Il2CppName: SendPrivateMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool)>(&Photon::Chat::ChatClient::SendPrivateMessage)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SendPrivateMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, message, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SendPrivateMessage
// Il2CppName: SendPrivateMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool, bool)>(&Photon::Chat::ChatClient::SendPrivateMessage)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SendPrivateMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, message, encrypt, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SendPrivateMessageUnreliable
// Il2CppName: SendPrivateMessageUnreliable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool, bool)>(&Photon::Chat::ChatClient::SendPrivateMessageUnreliable)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SendPrivateMessageUnreliable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, message, encrypt, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::sendPrivateMessage
// Il2CppName: sendPrivateMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ::Il2CppObject*, bool, bool, bool)>(&Photon::Chat::ChatClient::sendPrivateMessage)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* forwardAsWebhook = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "sendPrivateMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, message, encrypt, reliable, forwardAsWebhook});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SetOnlineStatus
// Il2CppName: SetOnlineStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(int, ::Il2CppObject*, bool)>(&Photon::Chat::ChatClient::SetOnlineStatus)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* skipMessage = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SetOnlineStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, message, skipMessage});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SetOnlineStatus
// Il2CppName: SetOnlineStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(int)>(&Photon::Chat::ChatClient::SetOnlineStatus)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SetOnlineStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SetOnlineStatus
// Il2CppName: SetOnlineStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(int, ::Il2CppObject*)>(&Photon::Chat::ChatClient::SetOnlineStatus)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SetOnlineStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, message});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::AddFriends
// Il2CppName: AddFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>)>(&Photon::Chat::ChatClient::AddFriends)> {
  static const MethodInfo* get() {
    static auto* friends = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "AddFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friends});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::RemoveFriends
// Il2CppName: RemoveFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>)>(&Photon::Chat::ChatClient::RemoveFriends)> {
  static const MethodInfo* get() {
    static auto* friends = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "RemoveFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friends});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::GetPrivateChannelNameByUser
// Il2CppName: GetPrivateChannelNameByUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Chat::ChatClient::*)(::StringW)>(&Photon::Chat::ChatClient::GetPrivateChannelNameByUser)> {
  static const MethodInfo* get() {
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "GetPrivateChannelNameByUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userName});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::TryGetChannel
// Il2CppName: TryGetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, bool, ByRef<::Photon::Chat::ChatChannel*>)>(&Photon::Chat::ChatClient::TryGetChannel)> {
  static const MethodInfo* get() {
    static auto* channelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isPrivate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatChannel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "TryGetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelName, isPrivate, channel});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::TryGetChannel
// Il2CppName: TryGetChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ByRef<::Photon::Chat::ChatChannel*>)>(&Photon::Chat::ChatClient::TryGetChannel)> {
  static const MethodInfo* get() {
    static auto* channelName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatChannel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "TryGetChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelName, channel});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::TryGetPrivateChannelByUser
// Il2CppName: TryGetPrivateChannelByUser
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, ByRef<::Photon::Chat::ChatChannel*>)>(&Photon::Chat::ChatClient::TryGetPrivateChannelByUser)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* channel = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChatChannel")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "TryGetPrivateChannelByUser", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, channel});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_DebugReturn
// Il2CppName: ExitGames.Client.Photon.IPhotonPeerListener.DebugReturn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::DebugLevel, ::StringW)>(&Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_DebugReturn)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ExitGames.Client.Photon.IPhotonPeerListener.DebugReturn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, message});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_OnEvent
// Il2CppName: ExitGames.Client.Photon.IPhotonPeerListener.OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_OnEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ExitGames.Client.Photon.IPhotonPeerListener.OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_OnOperationResponse
// Il2CppName: ExitGames.Client.Photon.IPhotonPeerListener.OnOperationResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::OperationResponse*)>(&Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_OnOperationResponse)> {
  static const MethodInfo* get() {
    static auto* operationResponse = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ExitGames.Client.Photon.IPhotonPeerListener.OnOperationResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationResponse});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_OnStatusChanged
// Il2CppName: ExitGames.Client.Photon.IPhotonPeerListener.OnStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::StatusCode)>(&Photon::Chat::ChatClient::ExitGames_Client_Photon_IPhotonPeerListener_OnStatusChanged)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ExitGames.Client.Photon.IPhotonPeerListener.OnStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::TryAuthenticateOnNameServer
// Il2CppName: TryAuthenticateOnNameServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::TryAuthenticateOnNameServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "TryAuthenticateOnNameServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::SendChannelOperation
// Il2CppName: SendChannelOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::ArrayW<::StringW>, uint8_t, int)>(&Photon::Chat::ChatClient::SendChannelOperation)> {
  static const MethodInfo* get() {
    static auto* channels = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* operation = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* historyLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "SendChannelOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channels, operation, historyLength});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandlePrivateMessageEvent
// Il2CppName: HandlePrivateMessageEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandlePrivateMessageEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandlePrivateMessageEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleChatMessagesEvent
// Il2CppName: HandleChatMessagesEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandleChatMessagesEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleChatMessagesEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleSubscribeEvent
// Il2CppName: HandleSubscribeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandleSubscribeEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleSubscribeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleUnsubscribeEvent
// Il2CppName: HandleUnsubscribeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandleUnsubscribeEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleUnsubscribeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleAuthResponse
// Il2CppName: HandleAuthResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::OperationResponse*)>(&Photon::Chat::ChatClient::HandleAuthResponse)> {
  static const MethodInfo* get() {
    static auto* operationResponse = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleAuthResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationResponse});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleStatusUpdate
// Il2CppName: HandleStatusUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandleStatusUpdate)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleStatusUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::ConnectToFrontEnd
// Il2CppName: ConnectToFrontEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::ConnectToFrontEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "ConnectToFrontEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::AuthenticateOnFrontEnd
// Il2CppName: AuthenticateOnFrontEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)()>(&Photon::Chat::ChatClient::AuthenticateOnFrontEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "AuthenticateOnFrontEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleUserUnsubscribedEvent
// Il2CppName: HandleUserUnsubscribedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandleUserUnsubscribedEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleUserUnsubscribedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::HandleUserSubscribedEvent
// Il2CppName: HandleUserSubscribedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Chat::ChatClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Chat::ChatClient::HandleUserSubscribedEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "HandleUserSubscribedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Chat::ChatClient::Subscribe
// Il2CppName: Subscribe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Chat::ChatClient::*)(::StringW, int, int, ::Photon::Chat::ChannelCreationOptions*)>(&Photon::Chat::ChatClient::Subscribe)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* lastMsgId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* messagesFromHistory = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* creationOptions = &::il2cpp_utils::GetClassFromName("Photon.Chat", "ChannelCreationOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Chat::ChatClient*), "Subscribe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel, lastMsgId, messagesFromHistory, creationOptions});
  }
};
