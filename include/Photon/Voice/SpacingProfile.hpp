// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: SpacingProfile
  class SpacingProfile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::SpacingProfile);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::SpacingProfile*, "Photon.Voice", "SpacingProfile");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.SpacingProfile
  // [TokenAttribute] Offset: FFFFFFFF
  class SpacingProfile : public ::Il2CppObject {
    public:
    // Nested type: ::Photon::Voice::SpacingProfile::$$c
    class $$c;
    public:
    // private System.Int16[] buf
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<int16_t> buf;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    // private System.Boolean[] info
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<bool> info;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Int32 capacity
    // Size: 0x4
    // Offset: 0x20
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 ptr
    // Size: 0x4
    // Offset: 0x24
    int ptr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Diagnostics.Stopwatch watch
    // Size: 0x8
    // Offset: 0x28
    ::System::Diagnostics::Stopwatch* watch;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    // private System.Int64 watchLast
    // Size: 0x8
    // Offset: 0x30
    int64_t watchLast;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean flushed
    // Size: 0x1
    // Offset: 0x38
    bool flushed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Int16[] buf
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_buf();
    // Get instance field reference: private System.Boolean[] info
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_info();
    // Get instance field reference: private System.Int32 capacity
    [[deprecated("Use field access instead!")]] int& dyn_capacity();
    // Get instance field reference: private System.Int32 ptr
    [[deprecated("Use field access instead!")]] int& dyn_ptr();
    // Get instance field reference: private System.Diagnostics.Stopwatch watch
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_watch();
    // Get instance field reference: private System.Int64 watchLast
    [[deprecated("Use field access instead!")]] int64_t& dyn_watchLast();
    // Get instance field reference: private System.Boolean flushed
    [[deprecated("Use field access instead!")]] bool& dyn_flushed();
    // public System.String get_Dump()
    // Offset: 0x1165430
    ::StringW get_Dump();
    // public System.Int32 get_Max()
    // Offset: 0x11656E0
    int get_Max();
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x11658B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpacingProfile* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::SpacingProfile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpacingProfile*, creationType>(capacity)));
    }
    // public System.Void Start()
    // Offset: 0x1165374
    void Start();
    // public System.Void Update(System.Boolean lost, System.Boolean flush)
    // Offset: 0x11669C8
    void Update(bool lost, bool flush);
    // private System.String <get_Dump>b__11_0(System.Int16 v, System.Int32 i)
    // Offset: 0x116BE5C
    ::StringW $get_Dump$b__11_0(int16_t v, int i);
  }; // Photon.Voice.SpacingProfile
  #pragma pack(pop)
  static check_size<sizeof(SpacingProfile), 56 + sizeof(bool)> __Photon_Voice_SpacingProfileSizeCheck;
  static_assert(sizeof(SpacingProfile) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::SpacingProfile::get_Dump
// Il2CppName: get_Dump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::SpacingProfile::*)()>(&Photon::Voice::SpacingProfile::get_Dump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::SpacingProfile*), "get_Dump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::SpacingProfile::get_Max
// Il2CppName: get_Max
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::SpacingProfile::*)()>(&Photon::Voice::SpacingProfile::get_Max)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::SpacingProfile*), "get_Max", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::SpacingProfile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::SpacingProfile::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::SpacingProfile::*)()>(&Photon::Voice::SpacingProfile::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::SpacingProfile*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::SpacingProfile::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::SpacingProfile::*)(bool, bool)>(&Photon::Voice::SpacingProfile::Update)> {
  static const MethodInfo* get() {
    static auto* lost = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* flush = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::SpacingProfile*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lost, flush});
  }
};
// Writing MetadataGetter for method: Photon::Voice::SpacingProfile::$get_Dump$b__11_0
// Il2CppName: <get_Dump>b__11_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::SpacingProfile::*)(int16_t, int)>(&Photon::Voice::SpacingProfile::$get_Dump$b__11_0)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::SpacingProfile*), "<get_Dump>b__11_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v, i});
  }
};
