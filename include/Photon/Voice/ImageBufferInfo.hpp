// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.ImageFormat
#include "Photon/Voice/ImageFormat.hpp"
// Including type: Photon.Voice.Rotation
#include "Photon/Voice/Rotation.hpp"
// Including type: Photon.Voice.Flip
#include "Photon/Voice/Flip.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferInfo
  class ImageBufferInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::ImageBufferInfo);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferInfo*, "Photon.Voice", "ImageBufferInfo");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.ImageBufferInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageBufferInfo : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 <Width>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <Height>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32[] <Stride>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int> Stride;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private readonly Photon.Voice.ImageFormat <Format>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::Photon::Voice::ImageFormat Format;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageFormat) == 0x4);
    // private Photon.Voice.Rotation <Rotation>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::Photon::Voice::Rotation Rotation;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Rotation) == 0x4);
    // private Photon.Voice.Flip <Flip>k__BackingField
    // Size: 0x2
    // Offset: 0x28
    ::Photon::Voice::Flip Flip;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Flip) == 0x2);
    public:
    // Get instance field reference: private readonly System.Int32 <Width>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Width$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <Height>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Height$k__BackingField();
    // Get instance field reference: private readonly System.Int32[] <Stride>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_$Stride$k__BackingField();
    // Get instance field reference: private readonly Photon.Voice.ImageFormat <Format>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageFormat& dyn_$Format$k__BackingField();
    // Get instance field reference: private Photon.Voice.Rotation <Rotation>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Rotation& dyn_$Rotation$k__BackingField();
    // Get instance field reference: private Photon.Voice.Flip <Flip>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Flip& dyn_$Flip$k__BackingField();
    // public System.Int32 get_Width()
    // Offset: 0x1160B48
    int get_Width();
    // public System.Int32 get_Height()
    // Offset: 0x1160B50
    int get_Height();
    // public System.Int32[] get_Stride()
    // Offset: 0x1160B58
    ::ArrayW<int> get_Stride();
    // public Photon.Voice.ImageFormat get_Format()
    // Offset: 0x1160B60
    ::Photon::Voice::ImageFormat get_Format();
    // public Photon.Voice.Rotation get_Rotation()
    // Offset: 0x1160B68
    ::Photon::Voice::Rotation get_Rotation();
    // public System.Void set_Rotation(Photon.Voice.Rotation value)
    // Offset: 0x1160B70
    void set_Rotation(::Photon::Voice::Rotation value);
    // public Photon.Voice.Flip get_Flip()
    // Offset: 0x1160B78
    ::Photon::Voice::Flip get_Flip();
    // public System.Void set_Flip(Photon.Voice.Flip value)
    // Offset: 0x1160B80
    void set_Flip(::Photon::Voice::Flip value);
    // public System.Void .ctor(System.Int32 width, System.Int32 height, System.Int32[] stride, Photon.Voice.ImageFormat format)
    // Offset: 0x1160B88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageBufferInfo* New_ctor(int width, int height, ::ArrayW<int> stride, ::Photon::Voice::ImageFormat format) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ImageBufferInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageBufferInfo*, creationType>(width, height, stride, format)));
    }
  }; // Photon.Voice.ImageBufferInfo
  #pragma pack(pop)
  static check_size<sizeof(ImageBufferInfo), 40 + sizeof(::Photon::Voice::Flip)> __Photon_Voice_ImageBufferInfoSizeCheck;
  static_assert(sizeof(ImageBufferInfo) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Stride
// Il2CppName: get_Stride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Stride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "get_Stride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Format
// Il2CppName: get_Format
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::ImageFormat (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Format)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "get_Format", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Rotation
// Il2CppName: get_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Rotation (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "get_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::set_Rotation
// Il2CppName: set_Rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferInfo::*)(::Photon::Voice::Rotation)>(&Photon::Voice::ImageBufferInfo::set_Rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Rotation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "set_Rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::get_Flip
// Il2CppName: get_Flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Flip (Photon::Voice::ImageBufferInfo::*)()>(&Photon::Voice::ImageBufferInfo::get_Flip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "get_Flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::set_Flip
// Il2CppName: set_Flip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferInfo::*)(::Photon::Voice::Flip)>(&Photon::Voice::ImageBufferInfo::set_Flip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Flip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferInfo*), "set_Flip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
