// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: VoiceInfo
  struct VoiceInfo;
  // Forward declaring type: FrameBuffer
  struct FrameBuffer;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: IDecoder
  class IDecoder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::IDecoder);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::IDecoder*, "Photon.Voice", "IDecoder");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.IDecoder
  // [TokenAttribute] Offset: FFFFFFFF
  class IDecoder/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public System.String get_Error()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Error();
    // public System.Void Open(Photon.Voice.VoiceInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Open(::Photon::Voice::VoiceInfo info);
    // public System.Void Input(ref Photon.Voice.FrameBuffer buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Input(ByRef<::Photon::Voice::FrameBuffer> buf);
  }; // Photon.Voice.IDecoder
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::IDecoder::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::IDecoder::*)()>(&Photon::Voice::IDecoder::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IDecoder*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IDecoder::Open
// Il2CppName: Open
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::IDecoder::*)(::Photon::Voice::VoiceInfo)>(&Photon::Voice::IDecoder::Open)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IDecoder*), "Open", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IDecoder::Input
// Il2CppName: Input
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::IDecoder::*)(ByRef<::Photon::Voice::FrameBuffer>)>(&Photon::Voice::IDecoder::Input)> {
  static const MethodInfo* get() {
    static auto* buf = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IDecoder*), "Input", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
