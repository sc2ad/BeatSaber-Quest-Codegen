// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IDeviceEnumerator
#include "Photon/Voice/IDeviceEnumerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: DeviceEnumeratorBase
  class DeviceEnumeratorBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::DeviceEnumeratorBase);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::DeviceEnumeratorBase*, "Photon.Voice", "DeviceEnumeratorBase");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.DeviceEnumeratorBase
  // [TokenAttribute] Offset: FFFFFFFF
  class DeviceEnumeratorBase : public ::Il2CppObject/*, public ::Photon::Voice::IDeviceEnumerator*/ {
    public:
    public:
    // protected System.Collections.Generic.List`1<Photon.Voice.DeviceInfo> devices
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::Photon::Voice::DeviceInfo>* devices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Voice::DeviceInfo>*) == 0x8);
    // protected Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private System.String <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IDeviceEnumerator
    operator ::Photon::Voice::IDeviceEnumerator() noexcept {
      return *reinterpret_cast<::Photon::Voice::IDeviceEnumerator*>(this);
    }
    // Get instance field reference: protected System.Collections.Generic.List`1<Photon.Voice.DeviceInfo> devices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Voice::DeviceInfo>*& dyn_devices();
    // Get instance field reference: protected Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger();
    // Get instance field reference: private System.String <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Error$k__BackingField();
    // public System.Boolean get_IsSupported()
    // Offset: 0x115FDDC
    bool get_IsSupported();
    // public System.String get_Error()
    // Offset: 0x115FDE4
    ::StringW get_Error();
    // protected System.Void set_Error(System.String value)
    // Offset: 0x115FDEC
    void set_Error(::StringW value);
    // public System.Void .ctor(Photon.Voice.ILogger logger)
    // Offset: 0x115FD58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeviceEnumeratorBase* New_ctor(::Photon::Voice::ILogger* logger) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::DeviceEnumeratorBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeviceEnumeratorBase*, creationType>(logger)));
    }
    // public System.Collections.Generic.IEnumerator`1<Photon.Voice.DeviceInfo> GetEnumerator()
    // Offset: 0x115FDF4
    ::System::Collections::Generic::IEnumerator_1<::Photon::Voice::DeviceInfo>* GetEnumerator();
    // public System.Void Refresh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Refresh();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x115FE80
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose();
  }; // Photon.Voice.DeviceEnumeratorBase
  #pragma pack(pop)
  static check_size<sizeof(DeviceEnumeratorBase), 32 + sizeof(::StringW)> __Photon_Voice_DeviceEnumeratorBaseSizeCheck;
  static_assert(sizeof(DeviceEnumeratorBase) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::get_IsSupported
// Il2CppName: get_IsSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::DeviceEnumeratorBase::*)()>(&Photon::Voice::DeviceEnumeratorBase::get_IsSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "get_IsSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::DeviceEnumeratorBase::*)()>(&Photon::Voice::DeviceEnumeratorBase::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::set_Error
// Il2CppName: set_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::DeviceEnumeratorBase::*)(::StringW)>(&Photon::Voice::DeviceEnumeratorBase::set_Error)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "set_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<::Photon::Voice::DeviceInfo>* (Photon::Voice::DeviceEnumeratorBase::*)()>(&Photon::Voice::DeviceEnumeratorBase::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::DeviceEnumeratorBase::*)()>(&Photon::Voice::DeviceEnumeratorBase::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (Photon::Voice::DeviceEnumeratorBase::*)()>(&Photon::Voice::DeviceEnumeratorBase::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorBase::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::DeviceEnumeratorBase::*)()>(&Photon::Voice::DeviceEnumeratorBase::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorBase*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
