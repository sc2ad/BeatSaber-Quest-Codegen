// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::AudioUtil::TempoUp_1, "Photon.Voice", "AudioUtil/TempoUp`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioUtil/Photon.Voice.TempoUp`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AudioUtil::TempoUp_1 : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Int32 sizeofT
    // Size: 0x4
    // Offset: 0x0
    int sizeofT;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 channels
    // Size: 0x4
    // Offset: 0x0
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 skipGroup
    // Size: 0x4
    // Offset: 0x0
    int skipGroup;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 skipFactor
    // Size: 0x4
    // Offset: 0x0
    int skipFactor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 sign
    // Size: 0x4
    // Offset: 0x0
    int sign;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 waveCnt
    // Size: 0x4
    // Offset: 0x0
    int waveCnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean skipping
    // Size: 0x1
    // Offset: 0x0
    bool skipping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 sizeofT
    [[deprecated("Use field access instead!")]] int& dyn_sizeofT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_sizeofT");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeofT"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_channels");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channels"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 skipGroup
    [[deprecated("Use field access instead!")]] int& dyn_skipGroup() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_skipGroup");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skipGroup"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 skipFactor
    [[deprecated("Use field access instead!")]] int& dyn_skipFactor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_skipFactor");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skipFactor"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 sign
    [[deprecated("Use field access instead!")]] int& dyn_sign() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_sign");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sign"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 waveCnt
    [[deprecated("Use field access instead!")]] int& dyn_waveCnt() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_waveCnt");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "waveCnt"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean skipping
    [[deprecated("Use field access instead!")]] bool& dyn_skipping() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::dyn_skipping");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "skipping"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioUtil::TempoUp_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioUtil::TempoUp_1<T>*, creationType>()));
    }
    // public System.Void Begin(System.Int32 channels, System.Int32 changePerc, System.Int32 skipGroup)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Begin(int channels, int changePerc, int skipGroup) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::Begin");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Begin", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(channels), ::il2cpp_utils::ExtractType(changePerc), ::il2cpp_utils::ExtractType(skipGroup)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, channels, changePerc, skipGroup);
    }
    // public System.Int32 Process(T[] s, T[] d)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Process(::ArrayW<T> s, ::ArrayW<T> d) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::Process");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Process", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(d)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, d);
    }
    // public System.Int32 End(T[] s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int End(::ArrayW<T> s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::End");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "End", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
    }
    // private System.Int32 processFloat(System.Single[] s, System.Single[] d)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int processFloat(::ArrayW<float> s, ::ArrayW<float> d) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::processFloat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "processFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(d)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, d);
    }
    // public System.Int32 endFloat(System.Single[] s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int endFloat(::ArrayW<float> s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::endFloat");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "endFloat", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
    }
    // private System.Int32 processShort(System.Int16[] s, System.Int16[] d)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int processShort(::ArrayW<int16_t> s, ::ArrayW<int16_t> d) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::processShort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "processShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s), ::il2cpp_utils::ExtractType(d)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s, d);
    }
    // public System.Int32 endShort(System.Int16[] s)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int endShort(::ArrayW<int16_t> s) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::TempoUp_1::endShort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "endShort", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(s)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, s);
    }
  }; // Photon.Voice.AudioUtil/Photon.Voice.TempoUp`1
  // Could not write size check! Type: Photon.Voice.AudioUtil/Photon.Voice.TempoUp`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
