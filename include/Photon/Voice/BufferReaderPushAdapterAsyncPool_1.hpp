// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.BufferReaderPushAdapterBase`1
#include "Photon/Voice/BufferReaderPushAdapterBase_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoice
  class LocalVoice;
  // Forward declaring type: IDataReader`1<T>
  template<typename T>
  class IDataReader_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: BufferReaderPushAdapterAsyncPool`1<T>
  template<typename T>
  class BufferReaderPushAdapterAsyncPool_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::BufferReaderPushAdapterAsyncPool_1, "Photon.Voice", "BufferReaderPushAdapterAsyncPool`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.BufferReaderPushAdapterAsyncPool`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class BufferReaderPushAdapterAsyncPool_1 : public ::Photon::Voice::BufferReaderPushAdapterBase_1<T> {
    public:
    // public System.Void .ctor(Photon.Voice.LocalVoice localVoice, Photon.Voice.IDataReader`1<T> reader)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BufferReaderPushAdapterAsyncPool_1<T>* New_ctor(::Photon::Voice::LocalVoice* localVoice, ::Photon::Voice::IDataReader_1<T>* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterAsyncPool_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BufferReaderPushAdapterAsyncPool_1<T>*, creationType>(localVoice, reader)));
    }
    // public override System.Void Service(Photon.Voice.LocalVoice localVoice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Photon.Voice.BufferReaderPushAdapterBase`1
    // Base method: System.Void BufferReaderPushAdapterBase_1::Service(Photon.Voice.LocalVoice localVoice)
    void Service(::Photon::Voice::LocalVoice* localVoice) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterAsyncPool_1::Service");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::BufferReaderPushAdapterBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localVoice);
    }
  }; // Photon.Voice.BufferReaderPushAdapterAsyncPool`1
  // Could not write size check! Type: Photon.Voice.BufferReaderPushAdapterAsyncPool`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
