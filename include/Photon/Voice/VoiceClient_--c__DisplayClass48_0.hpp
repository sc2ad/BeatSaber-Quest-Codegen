// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.VoiceClient
#include "Photon/Voice/VoiceClient.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IEncoder
  class IEncoder;
  // Forward declaring type: LocalVoice
  class LocalVoice;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::VoiceClient::$$c__DisplayClass48_0);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::VoiceClient::$$c__DisplayClass48_0*, "Photon.Voice", "VoiceClient/<>c__DisplayClass48_0");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.VoiceClient/Photon.Voice.<>c__DisplayClass48_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class VoiceClient::$$c__DisplayClass48_0 : public ::Il2CppObject {
    public:
    public:
    // public Photon.Voice.VoiceClient <>4__this
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Voice::VoiceClient* $$4__this;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceClient*) == 0x8);
    // public Photon.Voice.IEncoder encoder
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Voice::IEncoder* encoder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IEncoder*) == 0x8);
    // public Photon.Voice.VoiceInfo voiceInfo
    // Size: 0x30
    // Offset: 0x20
    ::Photon::Voice::VoiceInfo voiceInfo;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceInfo) == 0x30);
    public:
    // Get instance field reference: public Photon.Voice.VoiceClient <>4__this
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceClient*& dyn_$$4__this();
    // Get instance field reference: public Photon.Voice.IEncoder encoder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IEncoder*& dyn_encoder();
    // Get instance field reference: public Photon.Voice.VoiceInfo voiceInfo
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceInfo& dyn_voiceInfo();
    // public System.Void .ctor()
    // Offset: 0x11749B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceClient::$$c__DisplayClass48_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass48_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceClient::$$c__DisplayClass48_0*, creationType>()));
    }
    // Photon.Voice.LocalVoice <CreateLocalVoice>b__0(System.Byte vId, System.Int32 chId)
    // Offset: 0x11766FC
    ::Photon::Voice::LocalVoice* $CreateLocalVoice$b__0(uint8_t vId, int chId);
  }; // Photon.Voice.VoiceClient/Photon.Voice.<>c__DisplayClass48_0
  #pragma pack(pop)
  static check_size<sizeof(VoiceClient::$$c__DisplayClass48_0), 32 + sizeof(::Photon::Voice::VoiceInfo)> __Photon_Voice_VoiceClient_$$c__DisplayClass48_0SizeCheck;
  static_assert(sizeof(VoiceClient::$$c__DisplayClass48_0) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::$$c__DisplayClass48_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::$$c__DisplayClass48_0::$CreateLocalVoice$b__0
// Il2CppName: <CreateLocalVoice>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::LocalVoice* (Photon::Voice::VoiceClient::$$c__DisplayClass48_0::*)(uint8_t, int)>(&Photon::Voice::VoiceClient::$$c__DisplayClass48_0::$CreateLocalVoice$b__0)> {
  static const MethodInfo* get() {
    static auto* vId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* chId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient::$$c__DisplayClass48_0*), "<CreateLocalVoice>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vId, chId});
  }
};
