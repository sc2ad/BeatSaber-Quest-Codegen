// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
// Including type: Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1
#include "Photon/Voice/AudioUtil_LevelMeter_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::AudioUtil::LevelMeterShort);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::AudioUtil::LevelMeterShort*, "Photon.Voice", "AudioUtil/LevelMeterShort");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioUtil/Photon.Voice.LevelMeterShort
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioUtil::LevelMeterShort : public ::Photon::Voice::AudioUtil::LevelMeter_1<int16_t> {
    public:
    // public System.Int16[] Process(System.Int16[] buf)
    // Offset: 0x115F428
    ::ArrayW<int16_t> Process(::ArrayW<int16_t> buf);
    // public System.Void .ctor(System.Int32 samplingRate, System.Int32 numChannels)
    // Offset: 0x115F3B0
    // Implemented from: Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1
    // Base method: System.Void LevelMeter_1::.ctor(System.Int32 samplingRate, System.Int32 numChannels)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioUtil::LevelMeterShort* New_ctor(int samplingRate, int numChannels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeterShort::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioUtil::LevelMeterShort*, creationType>(samplingRate, numChannels)));
    }
  }; // Photon.Voice.AudioUtil/Photon.Voice.LevelMeterShort
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::AudioUtil::LevelMeterShort::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int16_t> (Photon::Voice::AudioUtil::LevelMeterShort::*)(::ArrayW<int16_t>)>(&Photon::Voice::AudioUtil::LevelMeterShort::Process)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioUtil::LevelMeterShort*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioUtil::LevelMeterShort::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
