// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: AudioSampleType
  struct AudioSampleType;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::AudioSampleType, "Photon.Voice", "AudioSampleType");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.AudioSampleType
  // [TokenAttribute] Offset: FFFFFFFF
  struct AudioSampleType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: AudioSampleType
    constexpr AudioSampleType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Photon.Voice.AudioSampleType Source
    static constexpr const int Source = 0;
    // Get static field: static public Photon.Voice.AudioSampleType Source
    static ::Photon::Voice::AudioSampleType _get_Source();
    // Set static field: static public Photon.Voice.AudioSampleType Source
    static void _set_Source(::Photon::Voice::AudioSampleType value);
    // static field const value: static public Photon.Voice.AudioSampleType Short
    static constexpr const int Short = 1;
    // Get static field: static public Photon.Voice.AudioSampleType Short
    static ::Photon::Voice::AudioSampleType _get_Short();
    // Set static field: static public Photon.Voice.AudioSampleType Short
    static void _set_Short(::Photon::Voice::AudioSampleType value);
    // static field const value: static public Photon.Voice.AudioSampleType Float
    static constexpr const int Float = 2;
    // Get static field: static public Photon.Voice.AudioSampleType Float
    static ::Photon::Voice::AudioSampleType _get_Float();
    // Set static field: static public Photon.Voice.AudioSampleType Float
    static void _set_Float(::Photon::Voice::AudioSampleType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Photon.Voice.AudioSampleType
  #pragma pack(pop)
  static check_size<sizeof(AudioSampleType), 0 + sizeof(int)> __Photon_Voice_AudioSampleTypeSizeCheck;
  static_assert(sizeof(AudioSampleType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
