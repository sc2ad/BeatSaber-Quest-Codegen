// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.DeviceEnumeratorBase
#include "Photon/Voice/DeviceEnumeratorBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: DeviceEnumeratorNotSupported
  class DeviceEnumeratorNotSupported;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::DeviceEnumeratorNotSupported);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::DeviceEnumeratorNotSupported*, "Photon.Voice", "DeviceEnumeratorNotSupported");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.DeviceEnumeratorNotSupported
  // [TokenAttribute] Offset: FFFFFFFF
  class DeviceEnumeratorNotSupported : public ::Photon::Voice::DeviceEnumeratorBase {
    public:
    public:
    // private System.String message
    // Size: 0x8
    // Offset: 0x28
    ::StringW message;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return message;
    }
    // Get instance field reference: private System.String message
    [[deprecated("Use field access instead!")]] ::StringW& dyn_message();
    // public System.Void .ctor(Photon.Voice.ILogger logger, System.String message)
    // Offset: 0x115EC0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DeviceEnumeratorNotSupported* New_ctor(::Photon::Voice::ILogger* logger, ::StringW message) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::DeviceEnumeratorNotSupported::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DeviceEnumeratorNotSupported*, creationType>(logger, message)));
    }
    // public override System.Boolean get_IsSupported()
    // Offset: 0x115FE84
    // Implemented from: Photon.Voice.DeviceEnumeratorBase
    // Base method: System.Boolean DeviceEnumeratorBase::get_IsSupported()
    bool get_IsSupported();
    // public override System.String get_Error()
    // Offset: 0x115FE90
    // Implemented from: Photon.Voice.DeviceEnumeratorBase
    // Base method: System.String DeviceEnumeratorBase::get_Error()
    ::StringW get_Error();
    // public override System.Void Refresh()
    // Offset: 0x115FE8C
    // Implemented from: Photon.Voice.DeviceEnumeratorBase
    // Base method: System.Void DeviceEnumeratorBase::Refresh()
    void Refresh();
    // public override System.Void Dispose()
    // Offset: 0x115FE98
    // Implemented from: Photon.Voice.DeviceEnumeratorBase
    // Base method: System.Void DeviceEnumeratorBase::Dispose()
    void Dispose();
  }; // Photon.Voice.DeviceEnumeratorNotSupported
  #pragma pack(pop)
  static check_size<sizeof(DeviceEnumeratorNotSupported), 40 + sizeof(::StringW)> __Photon_Voice_DeviceEnumeratorNotSupportedSizeCheck;
  static_assert(sizeof(DeviceEnumeratorNotSupported) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorNotSupported::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorNotSupported::get_IsSupported
// Il2CppName: get_IsSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::DeviceEnumeratorNotSupported::*)()>(&Photon::Voice::DeviceEnumeratorNotSupported::get_IsSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorNotSupported*), "get_IsSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorNotSupported::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::DeviceEnumeratorNotSupported::*)()>(&Photon::Voice::DeviceEnumeratorNotSupported::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorNotSupported*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorNotSupported::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::DeviceEnumeratorNotSupported::*)()>(&Photon::Voice::DeviceEnumeratorNotSupported::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorNotSupported*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::DeviceEnumeratorNotSupported::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::DeviceEnumeratorNotSupported::*)()>(&Photon::Voice::DeviceEnumeratorNotSupported::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::DeviceEnumeratorNotSupported*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
