// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ILocalVoiceAudio
  class ILocalVoiceAudio;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::ILocalVoiceAudio);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ILocalVoiceAudio*, "Photon.Voice", "ILocalVoiceAudio");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.ILocalVoiceAudio
  // [TokenAttribute] Offset: FFFFFFFF
  class ILocalVoiceAudio {
    public:
    // public Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector get_VoiceDetector()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::AudioUtil::IVoiceDetector* get_VoiceDetector();
    // public Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter get_LevelMeter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::AudioUtil::ILevelMeter* get_LevelMeter();
    // public System.Boolean get_VoiceDetectorCalibrating()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_VoiceDetectorCalibrating();
    // public System.Void VoiceDetectorCalibrate(System.Int32 durationMs, System.Action`1<System.Single> onCalibrated)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void VoiceDetectorCalibrate(int durationMs, ::System::Action_1<float>* onCalibrated);
  }; // Photon.Voice.ILocalVoiceAudio
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::ILocalVoiceAudio::get_VoiceDetector
// Il2CppName: get_VoiceDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::AudioUtil::IVoiceDetector* (Photon::Voice::ILocalVoiceAudio::*)()>(&Photon::Voice::ILocalVoiceAudio::get_VoiceDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ILocalVoiceAudio*), "get_VoiceDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ILocalVoiceAudio::get_LevelMeter
// Il2CppName: get_LevelMeter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::AudioUtil::ILevelMeter* (Photon::Voice::ILocalVoiceAudio::*)()>(&Photon::Voice::ILocalVoiceAudio::get_LevelMeter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ILocalVoiceAudio*), "get_LevelMeter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ILocalVoiceAudio::get_VoiceDetectorCalibrating
// Il2CppName: get_VoiceDetectorCalibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::ILocalVoiceAudio::*)()>(&Photon::Voice::ILocalVoiceAudio::get_VoiceDetectorCalibrating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ILocalVoiceAudio*), "get_VoiceDetectorCalibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ILocalVoiceAudio::VoiceDetectorCalibrate
// Il2CppName: VoiceDetectorCalibrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ILocalVoiceAudio::*)(int, ::System::Action_1<float>*)>(&Photon::Voice::ILocalVoiceAudio::VoiceDetectorCalibrate)> {
  static const MethodInfo* get() {
    static auto* durationMs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onCalibrated = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ILocalVoiceAudio*), "VoiceDetectorCalibrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{durationMs, onCalibrated});
  }
};
