// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Skipping declaration: <Frame>d__5 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: Framer`1<T>
  template<typename T>
  class Framer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::Framer_1, "Photon.Voice", "Framer`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.Framer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class Framer_1 : public ::Il2CppObject {
    public:
    // Nested type: ::Photon::Voice::Framer_1::$Frame$d__5<T>
    class $Frame$d__5;
    // WARNING Size may be invalid!
    // Autogenerated type: Photon.Voice.Framer`1/Photon.Voice.<Frame>d__5
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $Frame$d__5 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public ::System::Collections::Generic::IEnumerable_1<::ArrayW<T>>, public ::System::Collections::Generic::IEnumerator_1<::ArrayW<T>>*/ {
      public:
      using declaring_type = Framer_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<Frame>d__5";
      static constexpr bool IS_VALUE_TYPE = false;
      public:
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T[] <>2__current
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<T> $$2__current;
      // Field size check
      static_assert(sizeof(::ArrayW<T>) == 0x8);
      // private System.Int32 <>l__initialThreadId
      // Size: 0x4
      // Offset: 0x0
      int $$l__initialThreadId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public Photon.Voice.Framer`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      ::Photon::Voice::Framer_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(::Photon::Voice::Framer_1<T>*) == 0x8);
      // private T[] buf
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<T> buf;
      // Field size check
      static_assert(sizeof(::ArrayW<T>) == 0x8);
      // public T[] <>3__buf
      // Size: 0x8
      // Offset: 0x0
      ::ArrayW<T> $$3__buf;
      // Field size check
      static_assert(sizeof(::ArrayW<T>) == 0x8);
      // private System.Int32 <bufPos>5__2
      // Size: 0x4
      // Offset: 0x0
      int $bufPos$5__2;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerable_1<::ArrayW<T>>
      operator ::System::Collections::Generic::IEnumerable_1<::ArrayW<T>>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerable_1<::ArrayW<T>>*>(this);
      }
      // Creating interface conversion operator: operator ::System::Collections::Generic::IEnumerator_1<::ArrayW<T>>
      operator ::System::Collections::Generic::IEnumerator_1<::ArrayW<T>>() noexcept {
        return *reinterpret_cast<::System::Collections::Generic::IEnumerator_1<::ArrayW<T>>*>(this);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>1__state
      [[deprecated("Use field access instead!")]] int& dyn_$$1__state() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_$$1__state");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>1__state"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private T[] <>2__current
      [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_$$2__current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_$$2__current");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>2__current"))->offset;
        return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <>l__initialThreadId
      [[deprecated("Use field access instead!")]] int& dyn_$$l__initialThreadId() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_$$l__initialThreadId");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>l__initialThreadId"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public Photon.Voice.Framer`1<T> <>4__this
      [[deprecated("Use field access instead!")]] ::Photon::Voice::Framer_1<T>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<::Photon::Voice::Framer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private T[] buf
      [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_buf() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_buf");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "buf"))->offset;
        return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public T[] <>3__buf
      [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_$$3__buf() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_$$3__buf");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>3__buf"))->offset;
        return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: private System.Int32 <bufPos>5__2
      [[deprecated("Use field access instead!")]] int& dyn_$bufPos$5__2() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::dyn_$bufPos$5__2");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<bufPos>5__2"))->offset;
        return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // private T[] System.Collections.Generic.IEnumerator<T[]>.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::ArrayW<T> System_Collections_Generic_IEnumerator$T$$$_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::System.Collections.Generic.IEnumerator<T[]>.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::System.Collections.IEnumerator.get_Current");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::Il2CppObject*, false>(this, ___internal__method);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Framer_1<T>::$Frame$d__5* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Framer_1<T>::$Frame$d__5*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::System.IDisposable.Dispose");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFFFFFFFFFF
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::MoveNext");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFFFFFFFFFF
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::System.Collections.IEnumerator.Reset");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
      }
      // private System.Collections.Generic.IEnumerator`1<T[]> System.Collections.Generic.IEnumerable<T[]>.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::Generic::IEnumerator_1<::ArrayW<T>>* System_Collections_Generic_IEnumerable$T$$$_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::System.Collections.Generic.IEnumerable<T[]>.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerator_1<::ArrayW<T>>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFFFFFFFFFF
      ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::$Frame$d__5::System.Collections.IEnumerable.GetEnumerator");
        auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(typename ::Photon::Voice::Framer_1<T>::$Frame$d__5*), -1));
        return ::il2cpp_utils::RunMethodRethrow<::System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
    }; // Photon.Voice.Framer`1/Photon.Voice.<Frame>d__5
    // Could not write size check! Type: Photon.Voice.Framer`1/Photon.Voice.<Frame>d__5 is generic, or has no fields that are valid for size checks!
    public:
    // private T[] frame
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> frame;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Int32 sizeofT
    // Size: 0x4
    // Offset: 0x0
    int sizeofT;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 framePos
    // Size: 0x4
    // Offset: 0x0
    int framePos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: private T[] frame
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_frame() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::dyn_frame");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frame"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 sizeofT
    [[deprecated("Use field access instead!")]] int& dyn_sizeofT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::dyn_sizeofT");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeofT"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 framePos
    [[deprecated("Use field access instead!")]] int& dyn_framePos() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::dyn_framePos");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framePos"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(System.Int32 frameSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Framer_1<T>* New_ctor(int frameSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Framer_1<T>*, creationType>(frameSize)));
    }
    // public System.Int32 Count(System.Int32 bufLen)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int Count(int bufLen) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::Count");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Count", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(bufLen)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, bufLen);
    }
    // public System.Collections.Generic.IEnumerable`1<T[]> Frame(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::IEnumerable_1<::ArrayW<T>>* Frame(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Framer_1::Frame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Frame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf)})));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<::ArrayW<T>>*, false>(this, ___internal__method, buf);
    }
  }; // Photon.Voice.Framer`1
  // Could not write size check! Type: Photon.Voice.Framer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
