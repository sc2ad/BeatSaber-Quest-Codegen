// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.BufferReaderPushAdapterBase`1
#include "Photon/Voice/BufferReaderPushAdapterBase_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoice
  class LocalVoice;
  // Forward declaring type: IDataReader`1<T>
  template<typename T>
  class IDataReader_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: BufferReaderPushAdapterAsyncPoolShortToFloat
  class BufferReaderPushAdapterAsyncPoolShortToFloat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat*, "Photon.Voice", "BufferReaderPushAdapterAsyncPoolShortToFloat");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.BufferReaderPushAdapterAsyncPoolShortToFloat
  // [TokenAttribute] Offset: FFFFFFFF
  class BufferReaderPushAdapterAsyncPoolShortToFloat : public ::Photon::Voice::BufferReaderPushAdapterBase_1<int16_t> {
    public:
    public:
    // private System.Int16[] buffer
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<int16_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<int16_t>) == 0x8);
    public:
    // Deleting conversion operator: operator ::Photon::Voice::IDataReader_1<T>*
    // Cannot delete conversion operator because it seems to have a generic type in the definition! This may not be defined!
    // Get instance field reference: private System.Int16[] buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<int16_t>& dyn_buffer();
    // public System.Void .ctor(Photon.Voice.LocalVoice localVoice, Photon.Voice.IDataReader`1<System.Int16> reader)
    // Offset: 0x115FAF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BufferReaderPushAdapterAsyncPoolShortToFloat* New_ctor(::Photon::Voice::LocalVoice* localVoice, ::Photon::Voice::IDataReader_1<int16_t>* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BufferReaderPushAdapterAsyncPoolShortToFloat*, creationType>(localVoice, reader)));
    }
    // public override System.Void Service(Photon.Voice.LocalVoice localVoice)
    // Offset: 0x115FBB8
    // Implemented from: Photon.Voice.BufferReaderPushAdapterBase`1
    // Base method: System.Void BufferReaderPushAdapterBase_1::Service(Photon.Voice.LocalVoice localVoice)
    void Service(::Photon::Voice::LocalVoice* localVoice);
  }; // Photon.Voice.BufferReaderPushAdapterAsyncPoolShortToFloat
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat::*)(::Photon::Voice::LocalVoice*)>(&Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat::Service)> {
  static const MethodInfo* get() {
    static auto* localVoice = &::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::BufferReaderPushAdapterAsyncPoolShortToFloat*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localVoice});
  }
};
