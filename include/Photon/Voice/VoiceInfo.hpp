// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Photon.Voice.Codec
#include "Photon/Voice/Codec.hpp"
// Including type: Photon.Voice.OpusCodec
#include "Photon/Voice/OpusCodec.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: POpusCodec::Enums
namespace POpusCodec::Enums {
  // Forward declaring type: SamplingRate
  struct SamplingRate;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: VoiceInfo
  struct VoiceInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::VoiceInfo, "Photon.Voice", "VoiceInfo");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x30
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.VoiceInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct VoiceInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private Photon.Voice.Codec <Codec>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    ::Photon::Voice::Codec Codec;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Codec) == 0x4);
    // private System.Int32 <SamplingRate>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int SamplingRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Channels>k__BackingField
    // Size: 0x4
    // Offset: 0x8
    int Channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <FrameDurationUs>k__BackingField
    // Size: 0x4
    // Offset: 0xC
    int FrameDurationUs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Bitrate>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int Bitrate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Width>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Height>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <FPS>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int FPS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <KeyFrameInt>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int KeyFrameInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: KeyFrameInt and: UserData
    char __padding8[0x4] = {};
    // private System.Object <UserData>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* UserData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    public:
    // Creating value type constructor for type: VoiceInfo
    constexpr VoiceInfo(::Photon::Voice::Codec Codec_ = {}, int SamplingRate_ = {}, int Channels_ = {}, int FrameDurationUs_ = {}, int Bitrate_ = {}, int Width_ = {}, int Height_ = {}, int FPS_ = {}, int KeyFrameInt_ = {}, ::Il2CppObject* UserData_ = {}) noexcept : Codec{Codec_}, SamplingRate{SamplingRate_}, Channels{Channels_}, FrameDurationUs{FrameDurationUs_}, Bitrate{Bitrate_}, Width{Width_}, Height{Height_}, FPS{FPS_}, KeyFrameInt{KeyFrameInt_}, UserData{UserData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private Photon.Voice.Codec <Codec>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Codec& dyn_$Codec$k__BackingField();
    // Get instance field reference: private System.Int32 <SamplingRate>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SamplingRate$k__BackingField();
    // Get instance field reference: private System.Int32 <Channels>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Channels$k__BackingField();
    // Get instance field reference: private System.Int32 <FrameDurationUs>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$FrameDurationUs$k__BackingField();
    // Get instance field reference: private System.Int32 <Bitrate>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Bitrate$k__BackingField();
    // Get instance field reference: private System.Int32 <Width>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Width$k__BackingField();
    // Get instance field reference: private System.Int32 <Height>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Height$k__BackingField();
    // Get instance field reference: private System.Int32 <FPS>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$FPS$k__BackingField();
    // Get instance field reference: private System.Int32 <KeyFrameInt>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$KeyFrameInt$k__BackingField();
    // Get instance field reference: private System.Object <UserData>k__BackingField
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_$UserData$k__BackingField();
    // public Photon.Voice.Codec get_Codec()
    // Offset: 0xA7BC58
    ::Photon::Voice::Codec get_Codec();
    // public System.Void set_Codec(Photon.Voice.Codec value)
    // Offset: 0xA7BC60
    void set_Codec(::Photon::Voice::Codec value);
    // public System.Int32 get_SamplingRate()
    // Offset: 0xA7BC68
    int get_SamplingRate();
    // public System.Void set_SamplingRate(System.Int32 value)
    // Offset: 0xA7BC70
    void set_SamplingRate(int value);
    // public System.Int32 get_Channels()
    // Offset: 0xA7BC78
    int get_Channels();
    // public System.Void set_Channels(System.Int32 value)
    // Offset: 0xA7BC80
    void set_Channels(int value);
    // public System.Int32 get_FrameDurationUs()
    // Offset: 0xA7BC88
    int get_FrameDurationUs();
    // public System.Void set_FrameDurationUs(System.Int32 value)
    // Offset: 0xA7BC90
    void set_FrameDurationUs(int value);
    // public System.Int32 get_Bitrate()
    // Offset: 0xA7BC98
    int get_Bitrate();
    // public System.Void set_Bitrate(System.Int32 value)
    // Offset: 0xA7BCA0
    void set_Bitrate(int value);
    // public System.Int32 get_Width()
    // Offset: 0xA7BCA8
    int get_Width();
    // public System.Void set_Width(System.Int32 value)
    // Offset: 0xA7BCB0
    void set_Width(int value);
    // public System.Int32 get_Height()
    // Offset: 0xA7BCB8
    int get_Height();
    // public System.Void set_Height(System.Int32 value)
    // Offset: 0xA7BCC0
    void set_Height(int value);
    // public System.Int32 get_FPS()
    // Offset: 0xA7BCC8
    int get_FPS();
    // public System.Void set_FPS(System.Int32 value)
    // Offset: 0xA7BCD0
    void set_FPS(int value);
    // public System.Int32 get_KeyFrameInt()
    // Offset: 0xA7BCD8
    int get_KeyFrameInt();
    // public System.Void set_KeyFrameInt(System.Int32 value)
    // Offset: 0xA7BCE0
    void set_KeyFrameInt(int value);
    // public System.Object get_UserData()
    // Offset: 0xA7BCE8
    ::Il2CppObject* get_UserData();
    // public System.Void set_UserData(System.Object value)
    // Offset: 0xA7BCF0
    void set_UserData(::Il2CppObject* value);
    // public System.Int32 get_FrameDurationSamples()
    // Offset: 0xA7BCF8
    int get_FrameDurationSamples();
    // public System.Int32 get_FrameSize()
    // Offset: 0xA7BD28
    int get_FrameSize();
    // static public Photon.Voice.VoiceInfo CreateAudioOpus(POpusCodec.Enums.SamplingRate samplingRate, System.Int32 channels, Photon.Voice.OpusCodec/Photon.Voice.FrameDuration frameDurationUs, System.Int32 bitrate, System.Object userdata)
    // Offset: 0x1BDE000
    static ::Photon::Voice::VoiceInfo CreateAudioOpus(::POpusCodec::Enums::SamplingRate samplingRate, int channels, ::Photon::Voice::OpusCodec::FrameDuration frameDurationUs, int bitrate, ::Il2CppObject* userdata);
    // static public Photon.Voice.VoiceInfo CreateAudio(Photon.Voice.Codec codec, System.Int32 samplingRate, System.Int32 channels, System.Int32 frameDurationUs, System.Object userdata)
    // Offset: 0x1BDE024
    static ::Photon::Voice::VoiceInfo CreateAudio(::Photon::Voice::Codec codec, int samplingRate, int channels, int frameDurationUs, ::Il2CppObject* userdata);
    // public override System.String ToString()
    // Offset: 0xA7BC50
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Photon.Voice.VoiceInfo
  #pragma pack(pop)
  static check_size<sizeof(VoiceInfo), 40 + sizeof(::Il2CppObject*)> __Photon_Voice_VoiceInfoSizeCheck;
  static_assert(sizeof(VoiceInfo) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_Codec
// Il2CppName: get_Codec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Codec (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_Codec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_Codec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_Codec
// Il2CppName: set_Codec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(::Photon::Voice::Codec)>(&Photon::Voice::VoiceInfo::set_Codec)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Codec")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_Codec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_SamplingRate
// Il2CppName: get_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_SamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_SamplingRate
// Il2CppName: set_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_SamplingRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_Channels
// Il2CppName: set_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_Channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_FrameDurationUs
// Il2CppName: get_FrameDurationUs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_FrameDurationUs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_FrameDurationUs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_FrameDurationUs
// Il2CppName: set_FrameDurationUs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_FrameDurationUs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_FrameDurationUs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_Bitrate
// Il2CppName: get_Bitrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_Bitrate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_Bitrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_Bitrate
// Il2CppName: set_Bitrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_Bitrate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_Bitrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_Width
// Il2CppName: get_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_Width)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_Width
// Il2CppName: set_Width
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_Width)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_Width", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_Height
// Il2CppName: get_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_Height)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_Height
// Il2CppName: set_Height
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_Height)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_Height", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_FPS
// Il2CppName: get_FPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_FPS)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_FPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_FPS
// Il2CppName: set_FPS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_FPS)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_FPS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_KeyFrameInt
// Il2CppName: get_KeyFrameInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_KeyFrameInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_KeyFrameInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_KeyFrameInt
// Il2CppName: set_KeyFrameInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(int)>(&Photon::Voice::VoiceInfo::set_KeyFrameInt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_KeyFrameInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_UserData
// Il2CppName: get_UserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_UserData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_UserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::set_UserData
// Il2CppName: set_UserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceInfo::*)(::Il2CppObject*)>(&Photon::Voice::VoiceInfo::set_UserData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "set_UserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_FrameDurationSamples
// Il2CppName: get_FrameDurationSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_FrameDurationSamples)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_FrameDurationSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::get_FrameSize
// Il2CppName: get_FrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::get_FrameSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "get_FrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::CreateAudioOpus
// Il2CppName: CreateAudioOpus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::VoiceInfo (*)(::POpusCodec::Enums::SamplingRate, int, ::Photon::Voice::OpusCodec::FrameDuration, int, ::Il2CppObject*)>(&Photon::Voice::VoiceInfo::CreateAudioOpus)> {
  static const MethodInfo* get() {
    static auto* samplingRate = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameDurationUs = &::il2cpp_utils::GetClassFromName("Photon.Voice", "OpusCodec/FrameDuration")->byval_arg;
    static auto* bitrate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "CreateAudioOpus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplingRate, channels, frameDurationUs, bitrate, userdata});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::CreateAudio
// Il2CppName: CreateAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::VoiceInfo (*)(::Photon::Voice::Codec, int, int, int, ::Il2CppObject*)>(&Photon::Voice::VoiceInfo::CreateAudio)> {
  static const MethodInfo* get() {
    static auto* codec = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Codec")->byval_arg;
    static auto* samplingRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameDurationUs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* userdata = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "CreateAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codec, samplingRate, channels, frameDurationUs, userdata});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::VoiceInfo::*)()>(&Photon::Voice::VoiceInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceInfo), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
