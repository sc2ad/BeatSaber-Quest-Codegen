// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IAudioOut`1
#include "Photon/Voice/IAudioOut_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: PrimitiveArrayPool`1<T>
  template<typename T>
  class PrimitiveArrayPool_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: AudioSyncBuffer`1<T>
  template<typename T>
  class AudioSyncBuffer_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::AudioSyncBuffer_1, "Photon.Voice", "AudioSyncBuffer`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioSyncBuffer`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AudioSyncBuffer_1 : public ::Il2CppObject/*, public ::Photon::Voice::IAudioOut_1<T>*/ {
    public:
    public:
    // private System.Int32 curPlayingFrameSamplePos
    // Size: 0x4
    // Offset: 0x0
    int curPlayingFrameSamplePos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 sampleRate
    // Size: 0x4
    // Offset: 0x0
    int sampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 channels
    // Size: 0x4
    // Offset: 0x0
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 frameSamples
    // Size: 0x4
    // Offset: 0x0
    int frameSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 frameSize
    // Size: 0x4
    // Offset: 0x0
    int frameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean started
    // Size: 0x1
    // Offset: 0x0
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 maxDevPlayDelaySamples
    // Size: 0x4
    // Offset: 0x0
    int maxDevPlayDelaySamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 targetPlayDelaySamples
    // Size: 0x4
    // Offset: 0x0
    int targetPlayDelaySamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playDelayMs
    // Size: 0x4
    // Offset: 0x0
    int playDelayMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private readonly System.String logPrefix
    // Size: 0x8
    // Offset: 0x0
    ::StringW logPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Boolean debugInfo
    // Size: 0x1
    // Offset: 0x0
    bool debugInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Int32 elementSize
    // Size: 0x4
    // Offset: 0x0
    int elementSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T[] emptyFrame
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> emptyFrame;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Collections.Generic.Queue`1<T[]> frameQueue
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Queue_1<::ArrayW<T>>* frameQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::ArrayW<T>>*) == 0x8);
    // private Photon.Voice.PrimitiveArrayPool`1<T> framePool
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::PrimitiveArrayPool_1<T>* framePool;
    // Field size check
    static_assert(sizeof(::Photon::Voice::PrimitiveArrayPool_1<T>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioOut_1<T>
    operator ::Photon::Voice::IAudioOut_1<T>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioOut_1<T>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static public System.Int32 FRAME_POOL_CAPACITY
    static int _get_FRAME_POOL_CAPACITY() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::_get_FRAME_POOL_CAPACITY");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioSyncBuffer_1<T>*>::get(), "FRAME_POOL_CAPACITY"));
    }
    // Autogenerated static field setter
    // Set static field: static public System.Int32 FRAME_POOL_CAPACITY
    static void _set_FRAME_POOL_CAPACITY(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::_set_FRAME_POOL_CAPACITY");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioSyncBuffer_1<T>*>::get(), "FRAME_POOL_CAPACITY", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 curPlayingFrameSamplePos
    [[deprecated("Use field access instead!")]] int& dyn_curPlayingFrameSamplePos() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_curPlayingFrameSamplePos");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "curPlayingFrameSamplePos"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 sampleRate
    [[deprecated("Use field access instead!")]] int& dyn_sampleRate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_sampleRate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sampleRate"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_channels");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channels"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 frameSamples
    [[deprecated("Use field access instead!")]] int& dyn_frameSamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_frameSamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameSamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 frameSize
    [[deprecated("Use field access instead!")]] int& dyn_frameSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_frameSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean started
    [[deprecated("Use field access instead!")]] bool& dyn_started() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_started");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "started"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 maxDevPlayDelaySamples
    [[deprecated("Use field access instead!")]] int& dyn_maxDevPlayDelaySamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_maxDevPlayDelaySamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDevPlayDelaySamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 targetPlayDelaySamples
    [[deprecated("Use field access instead!")]] int& dyn_targetPlayDelaySamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_targetPlayDelaySamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetPlayDelaySamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 playDelayMs
    [[deprecated("Use field access instead!")]] int& dyn_playDelayMs() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_playDelayMs");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playDelayMs"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_logger");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logger"))->offset;
      return *reinterpret_cast<::Photon::Voice::ILogger**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.String logPrefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_logPrefix() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_logPrefix");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logPrefix"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean debugInfo
    [[deprecated("Use field access instead!")]] bool& dyn_debugInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_debugInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugInfo"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 elementSize
    [[deprecated("Use field access instead!")]] int& dyn_elementSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_elementSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "elementSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] emptyFrame
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_emptyFrame() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_emptyFrame");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "emptyFrame"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Queue`1<T[]> frameQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ArrayW<T>>*& dyn_frameQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_frameQueue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameQueue"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ArrayW<T>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.PrimitiveArrayPool`1<T> framePool
    [[deprecated("Use field access instead!")]] ::Photon::Voice::PrimitiveArrayPool_1<T>*& dyn_framePool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dyn_framePool");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framePool"))->offset;
      return *reinterpret_cast<::Photon::Voice::PrimitiveArrayPool_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Lag()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Lag() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::get_Lag");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsPlaying()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsPlaying() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::get_IsPlaying");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Int32 playDelayMs, Photon.Voice.ILogger logger, System.String logPrefix, System.Boolean debugInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioSyncBuffer_1<T>* New_ctor(int playDelayMs, ::Photon::Voice::ILogger* logger, ::StringW logPrefix, bool debugInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioSyncBuffer_1<T>*, creationType>(playDelayMs, logger, logPrefix, debugInfo)));
    }
    // public System.Void Start(System.Int32 sampleRate, System.Int32 channels, System.Int32 frameSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start(int sampleRate, int channels, int frameSamples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::Start");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, sampleRate, channels, frameSamples);
    }
    // public System.Void Service()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Service() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::Service");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Read(T[] outBuf, System.Int32 outChannels, System.Int32 outSampleRate)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Read(::ArrayW<T> outBuf, int outChannels, int outSampleRate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::Read");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Read", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(outBuf), ::il2cpp_utils::ExtractType(outChannels), ::il2cpp_utils::ExtractType(outSampleRate)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, outBuf, outChannels, outSampleRate);
    }
    // public System.Void Push(T[] frame)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Push(::ArrayW<T> frame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::Push");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frame);
    }
    // public System.Void Flush()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Flush() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::Flush");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Stop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Stop() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::Stop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioSyncBuffer_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void dequeueFrameQueue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void dequeueFrameQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::dequeueFrameQueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "dequeueFrameQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Void syncFrameQueue()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void syncFrameQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioSyncBuffer_1::syncFrameQueue");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "syncFrameQueue", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.AudioSyncBuffer`1
  // Could not write size check! Type: Photon.Voice.AudioSyncBuffer`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
