// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IAudioDesc
#include "Photon/Voice/IAudioDesc.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ObjectFactory`2<TType, TInfo>
  template<typename TType, typename TInfo>
  class ObjectFactory_2;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: IAudioPusher`1<T>
  template<typename T>
  class IAudioPusher_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::IAudioPusher_1, "Photon.Voice", "IAudioPusher`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.IAudioPusher`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IAudioPusher_1/*, public ::Photon::Voice::IAudioDesc*/ {
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioDesc
    operator ::Photon::Voice::IAudioDesc() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioDesc*>(this);
    }
    // public System.Void SetCallback(System.Action`1<T[]> callback, Photon.Voice.ObjectFactory`2<T[],System.Int32> bufferFactory)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SetCallback(::System::Action_1<::ArrayW<T>>* callback, ::Photon::Voice::ObjectFactory_2<::ArrayW<T>, int>* bufferFactory) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioPusher_1::SetCallback");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioPusher_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, callback, bufferFactory);
    }
  }; // Photon.Voice.IAudioPusher`1
  // Could not write size check! Type: Photon.Voice.IAudioPusher`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
