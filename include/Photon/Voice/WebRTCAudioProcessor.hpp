// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.WebRTCAudioLib
#include "Photon/Voice/WebRTCAudioLib.hpp"
// Including type: Photon.Voice.IProcessor`1
#include "Photon/Voice/IProcessor_1.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: FactoryPrimitiveArrayPool`1<T>
  template<typename T>
  class FactoryPrimitiveArrayPool_1;
  // Forward declaring type: Framer`1<T>
  template<typename T>
  class Framer_1;
  // Forward declaring type: ILogger
  class ILogger;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: WebRTCAudioProcessor
  class WebRTCAudioProcessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::WebRTCAudioProcessor);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::WebRTCAudioProcessor*, "Photon.Voice", "WebRTCAudioProcessor");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x8C
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.WebRTCAudioProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class WebRTCAudioProcessor : public ::Photon::Voice::WebRTCAudioLib/*, public ::Photon::Voice::IProcessor_1<int16_t>*/ {
    public:
    public:
    // private System.Int32 reverseStreamDelayMs
    // Size: 0x4
    // Offset: 0x10
    int reverseStreamDelayMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean aec
    // Size: 0x1
    // Offset: 0x14
    bool aec;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean aecHighPass
    // Size: 0x1
    // Offset: 0x15
    bool aecHighPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean aecm
    // Size: 0x1
    // Offset: 0x16
    bool aecm;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean highPass
    // Size: 0x1
    // Offset: 0x17
    bool highPass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean ns
    // Size: 0x1
    // Offset: 0x18
    bool ns;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean agc
    // Size: 0x1
    // Offset: 0x19
    bool agc;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: agc and: agcCompressionGain
    char __padding6[0x2] = {};
    // private System.Int32 agcCompressionGain
    // Size: 0x4
    // Offset: 0x1C
    int agcCompressionGain;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 agcTargetLevel
    // Size: 0x4
    // Offset: 0x20
    int agcTargetLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean agc2
    // Size: 0x1
    // Offset: 0x24
    bool agc2;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean vad
    // Size: 0x1
    // Offset: 0x25
    bool vad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean reverseStreamThreadRunning
    // Size: 0x1
    // Offset: 0x26
    bool reverseStreamThreadRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reverseStreamThreadRunning and: reverseStreamQueue
    char __padding11[0x1] = {};
    // private System.Collections.Generic.Queue`1<System.Int16[]> reverseStreamQueue
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Queue_1<::ArrayW<int16_t>>* reverseStreamQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::ArrayW<int16_t>>*) == 0x8);
    // private System.Threading.AutoResetEvent reverseStreamQueueReady
    // Size: 0x8
    // Offset: 0x30
    ::System::Threading::AutoResetEvent* reverseStreamQueueReady;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private Photon.Voice.FactoryPrimitiveArrayPool`1<System.Int16> reverseBufferFactory
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::FactoryPrimitiveArrayPool_1<int16_t>* reverseBufferFactory;
    // Field size check
    static_assert(sizeof(::Photon::Voice::FactoryPrimitiveArrayPool_1<int16_t>*) == 0x8);
    // private System.Boolean bypass
    // Size: 0x1
    // Offset: 0x40
    bool bypass;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: bypass and: inFrameSize
    char __padding15[0x3] = {};
    // private System.Int32 inFrameSize
    // Size: 0x4
    // Offset: 0x44
    int inFrameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 processFrameSize
    // Size: 0x4
    // Offset: 0x48
    int processFrameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 samplingRate
    // Size: 0x4
    // Offset: 0x4C
    int samplingRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 channels
    // Size: 0x4
    // Offset: 0x50
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: channels and: proc
    char __padding19[0x4] = {};
    // private System.IntPtr proc
    // Size: 0x8
    // Offset: 0x58
    ::System::IntPtr proc;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x60
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: reverseFramer
    char __padding21[0x7] = {};
    // private Photon.Voice.Framer`1<System.Single> reverseFramer
    // Size: 0x8
    // Offset: 0x68
    ::Photon::Voice::Framer_1<float>* reverseFramer;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Framer_1<float>*) == 0x8);
    // private System.Int32 reverseSamplingRate
    // Size: 0x4
    // Offset: 0x70
    int reverseSamplingRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 reverseChannels
    // Size: 0x4
    // Offset: 0x74
    int reverseChannels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x78
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private System.Boolean aecInited
    // Size: 0x1
    // Offset: 0x80
    bool aecInited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: aecInited and: lastProcessErr
    char __padding26[0x3] = {};
    // private System.Int32 lastProcessErr
    // Size: 0x4
    // Offset: 0x84
    int lastProcessErr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastProcessReverseErr
    // Size: 0x4
    // Offset: 0x88
    int lastProcessReverseErr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IProcessor_1<int16_t>
    operator ::Photon::Voice::IProcessor_1<int16_t>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IProcessor_1<int16_t>*>(this);
    }
    // static field const value: static private System.Int32 REVERSE_BUFFER_POOL_CAPACITY
    static constexpr const int REVERSE_BUFFER_POOL_CAPACITY = 50;
    // Get static field: static private System.Int32 REVERSE_BUFFER_POOL_CAPACITY
    static int _get_REVERSE_BUFFER_POOL_CAPACITY();
    // Set static field: static private System.Int32 REVERSE_BUFFER_POOL_CAPACITY
    static void _set_REVERSE_BUFFER_POOL_CAPACITY(int value);
    // static field const value: static private System.Int32 supportedFrameLenMs
    static constexpr const int supportedFrameLenMs = 10;
    // Get static field: static private System.Int32 supportedFrameLenMs
    static int _get_supportedFrameLenMs();
    // Set static field: static private System.Int32 supportedFrameLenMs
    static void _set_supportedFrameLenMs(int value);
    // Get static field: static public readonly System.Int32[] SupportedSamplingRates
    static ::ArrayW<int> _get_SupportedSamplingRates();
    // Set static field: static public readonly System.Int32[] SupportedSamplingRates
    static void _set_SupportedSamplingRates(::ArrayW<int> value);
    // Get instance field reference: private System.Int32 reverseStreamDelayMs
    [[deprecated("Use field access instead!")]] int& dyn_reverseStreamDelayMs();
    // Get instance field reference: private System.Boolean aec
    [[deprecated("Use field access instead!")]] bool& dyn_aec();
    // Get instance field reference: private System.Boolean aecHighPass
    [[deprecated("Use field access instead!")]] bool& dyn_aecHighPass();
    // Get instance field reference: private System.Boolean aecm
    [[deprecated("Use field access instead!")]] bool& dyn_aecm();
    // Get instance field reference: private System.Boolean highPass
    [[deprecated("Use field access instead!")]] bool& dyn_highPass();
    // Get instance field reference: private System.Boolean ns
    [[deprecated("Use field access instead!")]] bool& dyn_ns();
    // Get instance field reference: private System.Boolean agc
    [[deprecated("Use field access instead!")]] bool& dyn_agc();
    // Get instance field reference: private System.Int32 agcCompressionGain
    [[deprecated("Use field access instead!")]] int& dyn_agcCompressionGain();
    // Get instance field reference: private System.Int32 agcTargetLevel
    [[deprecated("Use field access instead!")]] int& dyn_agcTargetLevel();
    // Get instance field reference: private System.Boolean agc2
    [[deprecated("Use field access instead!")]] bool& dyn_agc2();
    // Get instance field reference: private System.Boolean vad
    [[deprecated("Use field access instead!")]] bool& dyn_vad();
    // Get instance field reference: private System.Boolean reverseStreamThreadRunning
    [[deprecated("Use field access instead!")]] bool& dyn_reverseStreamThreadRunning();
    // Get instance field reference: private System.Collections.Generic.Queue`1<System.Int16[]> reverseStreamQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ArrayW<int16_t>>*& dyn_reverseStreamQueue();
    // Get instance field reference: private System.Threading.AutoResetEvent reverseStreamQueueReady
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn_reverseStreamQueueReady();
    // Get instance field reference: private Photon.Voice.FactoryPrimitiveArrayPool`1<System.Int16> reverseBufferFactory
    [[deprecated("Use field access instead!")]] ::Photon::Voice::FactoryPrimitiveArrayPool_1<int16_t>*& dyn_reverseBufferFactory();
    // Get instance field reference: private System.Boolean bypass
    [[deprecated("Use field access instead!")]] bool& dyn_bypass();
    // Get instance field reference: private System.Int32 inFrameSize
    [[deprecated("Use field access instead!")]] int& dyn_inFrameSize();
    // Get instance field reference: private System.Int32 processFrameSize
    [[deprecated("Use field access instead!")]] int& dyn_processFrameSize();
    // Get instance field reference: private System.Int32 samplingRate
    [[deprecated("Use field access instead!")]] int& dyn_samplingRate();
    // Get instance field reference: private System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels();
    // Get instance field reference: private System.IntPtr proc
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_proc();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private Photon.Voice.Framer`1<System.Single> reverseFramer
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Framer_1<float>*& dyn_reverseFramer();
    // Get instance field reference: private System.Int32 reverseSamplingRate
    [[deprecated("Use field access instead!")]] int& dyn_reverseSamplingRate();
    // Get instance field reference: private System.Int32 reverseChannels
    [[deprecated("Use field access instead!")]] int& dyn_reverseChannels();
    // Get instance field reference: private Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger();
    // Get instance field reference: private System.Boolean aecInited
    [[deprecated("Use field access instead!")]] bool& dyn_aecInited();
    // Get instance field reference: private System.Int32 lastProcessErr
    [[deprecated("Use field access instead!")]] int& dyn_lastProcessErr();
    // Get instance field reference: private System.Int32 lastProcessReverseErr
    [[deprecated("Use field access instead!")]] int& dyn_lastProcessReverseErr();
    // public System.Void set_AECStreamDelayMs(System.Int32 value)
    // Offset: 0x1BDEAB8
    void set_AECStreamDelayMs(int value);
    // public System.Void set_AEC(System.Boolean value)
    // Offset: 0x1BDEDF0
    void set_AEC(bool value);
    // public System.Void set_AECHighPass(System.Boolean value)
    // Offset: 0x1BDF3D8
    void set_AECHighPass(bool value);
    // public System.Void set_AECMobile(System.Boolean value)
    // Offset: 0x1BDF470
    void set_AECMobile(bool value);
    // public System.Void set_HighPass(System.Boolean value)
    // Offset: 0x1BDF51C
    void set_HighPass(bool value);
    // public System.Void set_NoiseSuppression(System.Boolean value)
    // Offset: 0x1BDF5B4
    void set_NoiseSuppression(bool value);
    // public System.Void set_AGC(System.Boolean value)
    // Offset: 0x1BDF64C
    void set_AGC(bool value);
    // public System.Void set_AGCCompressionGain(System.Int32 value)
    // Offset: 0x1BDF6E4
    void set_AGCCompressionGain(int value);
    // public System.Void set_AGCTargetLevel(System.Int32 value)
    // Offset: 0x1BDF874
    void set_AGCTargetLevel(int value);
    // public System.Void set_AGC2(System.Boolean value)
    // Offset: 0x1BDFA04
    void set_AGC2(bool value);
    // public System.Void set_VAD(System.Boolean value)
    // Offset: 0x1BDFA9C
    void set_VAD(bool value);
    // private System.Boolean get_Bypass()
    // Offset: 0x1BDFCD8
    bool get_Bypass();
    // public System.Void set_Bypass(System.Boolean value)
    // Offset: 0x1BDFB34
    void set_Bypass(bool value);
    // public System.Void .ctor(Photon.Voice.ILogger logger, System.Int32 frameSize, System.Int32 samplingRate, System.Int32 channels, System.Int32 reverseSamplingRate, System.Int32 reverseChannels)
    // Offset: 0x1BDFCE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebRTCAudioProcessor* New_ctor(::Photon::Voice::ILogger* logger, int frameSize, int samplingRate, int channels, int reverseSamplingRate, int reverseChannels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::WebRTCAudioProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebRTCAudioProcessor*, creationType>(logger, frameSize, samplingRate, channels, reverseSamplingRate, reverseChannels)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BE15F8
    static void _cctor();
    // private System.Void InitReverseStream()
    // Offset: 0x1BDEE9C
    void InitReverseStream();
    // public System.Int16[] Process(System.Int16[] buf)
    // Offset: 0x1BE02C0
    ::ArrayW<int16_t> Process(::ArrayW<int16_t> buf);
    // public System.Void OnAudioOutFrameFloat(System.Single[] data)
    // Offset: 0x1BE05B8
    void OnAudioOutFrameFloat(::ArrayW<float> data);
    // private System.Void ReverseStreamThread()
    // Offset: 0x1BE0B7C
    void ReverseStreamThread();
    // private System.Int32 setParam(Photon.Voice.WebRTCAudioLib/Photon.Voice.Param param, System.Int32 v)
    // Offset: 0x1BDEB44
    int setParam(::Photon::Voice::WebRTCAudioLib::Param param, int v);
    // public System.Void Dispose()
    // Offset: 0x1BE12A8
    void Dispose();
  }; // Photon.Voice.WebRTCAudioProcessor
  #pragma pack(pop)
  static check_size<sizeof(WebRTCAudioProcessor), 136 + sizeof(int)> __Photon_Voice_WebRTCAudioProcessorSizeCheck;
  static_assert(sizeof(WebRTCAudioProcessor) == 0x8C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AECStreamDelayMs
// Il2CppName: set_AECStreamDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(int)>(&Photon::Voice::WebRTCAudioProcessor::set_AECStreamDelayMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AECStreamDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AEC
// Il2CppName: set_AEC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_AEC)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AEC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AECHighPass
// Il2CppName: set_AECHighPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_AECHighPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AECHighPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AECMobile
// Il2CppName: set_AECMobile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_AECMobile)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AECMobile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_HighPass
// Il2CppName: set_HighPass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_HighPass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_HighPass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_NoiseSuppression
// Il2CppName: set_NoiseSuppression
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_NoiseSuppression)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_NoiseSuppression", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AGC
// Il2CppName: set_AGC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_AGC)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AGC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AGCCompressionGain
// Il2CppName: set_AGCCompressionGain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(int)>(&Photon::Voice::WebRTCAudioProcessor::set_AGCCompressionGain)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AGCCompressionGain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AGCTargetLevel
// Il2CppName: set_AGCTargetLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(int)>(&Photon::Voice::WebRTCAudioProcessor::set_AGCTargetLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AGCTargetLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_AGC2
// Il2CppName: set_AGC2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_AGC2)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_AGC2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_VAD
// Il2CppName: set_VAD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_VAD)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_VAD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::get_Bypass
// Il2CppName: get_Bypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::WebRTCAudioProcessor::*)()>(&Photon::Voice::WebRTCAudioProcessor::get_Bypass)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "get_Bypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::set_Bypass
// Il2CppName: set_Bypass
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(bool)>(&Photon::Voice::WebRTCAudioProcessor::set_Bypass)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "set_Bypass", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::WebRTCAudioProcessor::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::InitReverseStream
// Il2CppName: InitReverseStream
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)()>(&Photon::Voice::WebRTCAudioProcessor::InitReverseStream)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "InitReverseStream", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int16_t> (Photon::Voice::WebRTCAudioProcessor::*)(::ArrayW<int16_t>)>(&Photon::Voice::WebRTCAudioProcessor::Process)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::OnAudioOutFrameFloat
// Il2CppName: OnAudioOutFrameFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)(::ArrayW<float>)>(&Photon::Voice::WebRTCAudioProcessor::OnAudioOutFrameFloat)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "OnAudioOutFrameFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::ReverseStreamThread
// Il2CppName: ReverseStreamThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)()>(&Photon::Voice::WebRTCAudioProcessor::ReverseStreamThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "ReverseStreamThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::setParam
// Il2CppName: setParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::WebRTCAudioProcessor::*)(::Photon::Voice::WebRTCAudioLib::Param, int)>(&Photon::Voice::WebRTCAudioProcessor::setParam)> {
  static const MethodInfo* get() {
    static auto* param = &::il2cpp_utils::GetClassFromName("Photon.Voice", "WebRTCAudioLib/Param")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "setParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{param, v});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioProcessor::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::WebRTCAudioProcessor::*)()>(&Photon::Voice::WebRTCAudioProcessor::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioProcessor*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
