// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: FrameOut`1<T>
  template<typename T>
  class FrameOut_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::FrameOut_1, "Photon.Voice", "FrameOut`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.FrameOut`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class FrameOut_1 : public ::Il2CppObject {
    public:
    public:
    // private T[] <Buf>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> Buf;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private System.Boolean <EndOfStream>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool EndOfStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Autogenerated instance field getter
    // Get instance field: private T[] <Buf>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_$Buf$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::dyn_$Buf$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Buf>k__BackingField"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean <EndOfStream>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EndOfStream$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::dyn_$EndOfStream$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<EndOfStream>k__BackingField"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public T[] get_Buf()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> get_Buf() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::get_Buf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Buf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method);
    }
    // private System.Void set_Buf(T[] value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Buf(::ArrayW<T> value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::set_Buf");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Buf", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Boolean get_EndOfStream()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_EndOfStream() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::get_EndOfStream");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_EndOfStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // private System.Void set_EndOfStream(System.Boolean value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_EndOfStream(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::set_EndOfStream");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_EndOfStream", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(T[] buf, System.Boolean endOfStream)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FrameOut_1<T>* New_ctor(::ArrayW<T> buf, bool endOfStream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FrameOut_1<T>*, creationType>(buf, endOfStream)));
    }
    // public Photon.Voice.FrameOut`1<T> Set(T[] buf, System.Boolean endOfStream)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::FrameOut_1<T>* Set(::ArrayW<T> buf, bool endOfStream) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::FrameOut_1::Set");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Set", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf), ::il2cpp_utils::ExtractType(endOfStream)})));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::FrameOut_1<T>*, false>(this, ___internal__method, buf, endOfStream);
    }
  }; // Photon.Voice.FrameOut`1
  // Could not write size check! Type: Photon.Voice.FrameOut`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
