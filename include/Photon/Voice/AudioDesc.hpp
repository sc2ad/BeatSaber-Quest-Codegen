// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IAudioDesc
#include "Photon/Voice/IAudioDesc.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: AudioDesc
  class AudioDesc;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::AudioDesc);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::AudioDesc*, "Photon.Voice", "AudioDesc");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.AudioDesc
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioDesc : public ::Il2CppObject/*, public ::Photon::Voice::IAudioDesc*/ {
    public:
    public:
    // private System.Int32 <SamplingRate>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int SamplingRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <Channels>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int Channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioDesc
    operator ::Photon::Voice::IAudioDesc() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioDesc*>(this);
    }
    // Get instance field reference: private System.Int32 <SamplingRate>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$SamplingRate$k__BackingField();
    // Get instance field reference: private System.Int32 <Channels>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$Channels$k__BackingField();
    // Get instance field reference: private System.String <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Error$k__BackingField();
    // public System.Int32 get_SamplingRate()
    // Offset: 0x115EB14
    int get_SamplingRate();
    // private System.Void set_SamplingRate(System.Int32 value)
    // Offset: 0x115EB1C
    void set_SamplingRate(int value);
    // public System.Int32 get_Channels()
    // Offset: 0x115EB24
    int get_Channels();
    // private System.Void set_Channels(System.Int32 value)
    // Offset: 0x115EB2C
    void set_Channels(int value);
    // public System.String get_Error()
    // Offset: 0x115EB34
    ::StringW get_Error();
    // private System.Void set_Error(System.String value)
    // Offset: 0x115EB3C
    void set_Error(::StringW value);
    // public System.Void .ctor(System.Int32 samplingRate, System.Int32 channels, System.String error)
    // Offset: 0x115EAD4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioDesc* New_ctor(int samplingRate, int channels, ::StringW error) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioDesc::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioDesc*, creationType>(samplingRate, channels, error)));
    }
    // public System.Void Dispose()
    // Offset: 0x115EB44
    void Dispose();
  }; // Photon.Voice.AudioDesc
  #pragma pack(pop)
  static check_size<sizeof(AudioDesc), 24 + sizeof(::StringW)> __Photon_Voice_AudioDescSizeCheck;
  static_assert(sizeof(AudioDesc) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::get_SamplingRate
// Il2CppName: get_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::AudioDesc::*)()>(&Photon::Voice::AudioDesc::get_SamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "get_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::set_SamplingRate
// Il2CppName: set_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::AudioDesc::*)(int)>(&Photon::Voice::AudioDesc::set_SamplingRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "set_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::AudioDesc::*)()>(&Photon::Voice::AudioDesc::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::set_Channels
// Il2CppName: set_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::AudioDesc::*)(int)>(&Photon::Voice::AudioDesc::set_Channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "set_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::AudioDesc::*)()>(&Photon::Voice::AudioDesc::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::set_Error
// Il2CppName: set_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::AudioDesc::*)(::StringW)>(&Photon::Voice::AudioDesc::set_Error)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "set_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::AudioDesc::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::AudioDesc::*)()>(&Photon::Voice::AudioDesc::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::AudioDesc*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
