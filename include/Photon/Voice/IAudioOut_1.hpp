// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: IAudioOut`1<T>
  template<typename T>
  class IAudioOut_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::IAudioOut_1, "Photon.Voice", "IAudioOut`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.IAudioOut`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class IAudioOut_1 {
    public:
    // public System.Boolean get_IsPlaying()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsPlaying() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::get_IsPlaying");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Int32 get_Lag()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Lag() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::get_Lag");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Void Start(System.Int32 frequency, System.Int32 channels, System.Int32 frameSamplesPerChannel)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start(int frequency, int channels, int frameSamplesPerChannel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::Start");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frequency, channels, frameSamplesPerChannel);
    }
    // public System.Void Flush()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Flush() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::Flush");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Stop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Stop() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::Stop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Push(T[] frame)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Push(::ArrayW<T> frame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::Push");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frame);
    }
    // public System.Void Service()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Service() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IAudioOut_1::Service");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IAudioOut_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.IAudioOut`1
  // Could not write size check! Type: Photon.Voice.IAudioOut`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
