// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IDecoder
#include "Photon/Voice/IDecoder.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: IDecoderDirect`1<B>
  template<typename B>
  class IDecoderDirect_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::IDecoderDirect_1, "Photon.Voice", "IDecoderDirect`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.IDecoderDirect`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename B>
  class IDecoderDirect_1/*, public ::Photon::Voice::IDecoder*/ {
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IDecoder
    operator ::Photon::Voice::IDecoder() noexcept {
      return *reinterpret_cast<::Photon::Voice::IDecoder*>(this);
    }
    // public System.Action`1<B> get_Output()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Action_1<B>* get_Output() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IDecoderDirect_1::get_Output");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IDecoderDirect_1<B>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::System::Action_1<B>*, false>(this, ___internal__method);
    }
    // public System.Void set_Output(System.Action`1<B> value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Output(::System::Action_1<B>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::IDecoderDirect_1::set_Output");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::IDecoderDirect_1<B>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
  }; // Photon.Voice.IDecoderDirect`1
  // Could not write size check! Type: Photon.Voice.IDecoderDirect`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
