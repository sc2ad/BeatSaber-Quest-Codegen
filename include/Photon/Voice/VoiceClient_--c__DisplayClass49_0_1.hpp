// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.VoiceClient
#include "Photon/Voice/VoiceClient.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IEncoder
  class IEncoder;
  // Forward declaring type: LocalVoice
  class LocalVoice;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1, "Photon.Voice", "VoiceClient/<>c__DisplayClass49_0`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.VoiceClient/Photon.Voice.<>c__DisplayClass49_0`1
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename T>
  class VoiceClient::$$c__DisplayClass49_0_1 : public ::Il2CppObject {
    public:
    public:
    // public Photon.Voice.VoiceClient <>4__this
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::VoiceClient* $$4__this;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceClient*) == 0x8);
    // public Photon.Voice.IEncoder encoder
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::IEncoder* encoder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IEncoder*) == 0x8);
    // public Photon.Voice.VoiceInfo voiceInfo
    // Size: 0x30
    // Offset: 0x0
    ::Photon::Voice::VoiceInfo voiceInfo;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceInfo) == 0x30);
    // public System.Int32 frameSize
    // Size: 0x4
    // Offset: 0x0
    int frameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Autogenerated instance field getter
    // Get instance field: public Photon.Voice.VoiceClient <>4__this
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceClient*& dyn_$$4__this() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1::dyn_$$4__this");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
      return *reinterpret_cast<::Photon::Voice::VoiceClient**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public Photon.Voice.IEncoder encoder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IEncoder*& dyn_encoder() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1::dyn_encoder");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "encoder"))->offset;
      return *reinterpret_cast<::Photon::Voice::IEncoder**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public Photon.Voice.VoiceInfo voiceInfo
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceInfo& dyn_voiceInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1::dyn_voiceInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voiceInfo"))->offset;
      return *reinterpret_cast<::Photon::Voice::VoiceInfo*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: public System.Int32 frameSize
    [[deprecated("Use field access instead!")]] int& dyn_frameSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1::dyn_frameSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceClient::$$c__DisplayClass49_0_1<T>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceClient::$$c__DisplayClass49_0_1<T>*, creationType>()));
    }
    // Photon.Voice.LocalVoice <CreateLocalVoiceFramed>b__0(System.Byte vId, System.Int32 chId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::LocalVoice* $CreateLocalVoiceFramed$b__0(uint8_t vId, int chId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1::<CreateLocalVoiceFramed>b__0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<CreateLocalVoiceFramed>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(vId), ::il2cpp_utils::ExtractType(chId)})));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::LocalVoice*, false>(this, ___internal__method, vId, chId);
    }
  }; // Photon.Voice.VoiceClient/Photon.Voice.<>c__DisplayClass49_0`1
  // Could not write size check! Type: Photon.Voice.VoiceClient/Photon.Voice.<>c__DisplayClass49_0`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
