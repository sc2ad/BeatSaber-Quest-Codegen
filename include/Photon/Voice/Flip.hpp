// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: Flip
  struct Flip;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Flip, "Photon.Voice", "Flip");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x2
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.Flip
  // [TokenAttribute] Offset: FFFFFFFF
  struct Flip/*, public ::System::ValueType*/ {
    public:
    public:
    // private System.Boolean <IsVertical>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool IsVertical;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsHorizontal>k__BackingField
    // Size: 0x1
    // Offset: 0x1
    bool IsHorizontal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating value type constructor for type: Flip
    constexpr Flip(bool IsVertical_ = {}, bool IsHorizontal_ = {}) noexcept : IsVertical{IsVertical_}, IsHorizontal{IsHorizontal_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static public Photon.Voice.Flip None
    static ::Photon::Voice::Flip _get_None();
    // Set static field: static public Photon.Voice.Flip None
    static void _set_None(::Photon::Voice::Flip value);
    // Get static field: static public Photon.Voice.Flip Vertical
    static ::Photon::Voice::Flip _get_Vertical();
    // Set static field: static public Photon.Voice.Flip Vertical
    static void _set_Vertical(::Photon::Voice::Flip value);
    // Get static field: static public Photon.Voice.Flip Horizontal
    static ::Photon::Voice::Flip _get_Horizontal();
    // Set static field: static public Photon.Voice.Flip Horizontal
    static void _set_Horizontal(::Photon::Voice::Flip value);
    // Get static field: static public Photon.Voice.Flip Both
    static ::Photon::Voice::Flip _get_Both();
    // Set static field: static public Photon.Voice.Flip Both
    static void _set_Both(::Photon::Voice::Flip value);
    // Get instance field reference: private System.Boolean <IsVertical>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsVertical$k__BackingField();
    // Get instance field reference: private System.Boolean <IsHorizontal>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsHorizontal$k__BackingField();
    // public System.Boolean get_IsVertical()
    // Offset: 0xA54C08
    bool get_IsVertical();
    // private System.Void set_IsVertical(System.Boolean value)
    // Offset: 0xA54C10
    void set_IsVertical(bool value);
    // public System.Boolean get_IsHorizontal()
    // Offset: 0xA54C1C
    bool get_IsHorizontal();
    // private System.Void set_IsHorizontal(System.Boolean value)
    // Offset: 0xA54C24
    void set_IsHorizontal(bool value);
    // static private System.Void .cctor()
    // Offset: 0x116053C
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xA54C30
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xA54C38
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Photon.Voice.Flip
  #pragma pack(pop)
  static check_size<sizeof(Flip), 1 + sizeof(bool)> __Photon_Voice_FlipSizeCheck;
  static_assert(sizeof(Flip) == 0x2);
  // static public System.Boolean op_Equality(Photon.Voice.Flip f1, Photon.Voice.Flip f2)
  // Offset: 0x11603A8
  bool operator ==(const ::Photon::Voice::Flip& f1, const ::Photon::Voice::Flip& f2);
  // static public System.Boolean op_Inequality(Photon.Voice.Flip f1, Photon.Voice.Flip f2)
  // Offset: 0x11603E0
  bool operator !=(const ::Photon::Voice::Flip& f1, const ::Photon::Voice::Flip& f2);
  // static public Photon.Voice.Flip op_Multiply(Photon.Voice.Flip f1, Photon.Voice.Flip f2)
  // Offset: 0x116050C
  ::Photon::Voice::Flip operator*(const ::Photon::Voice::Flip& f1, const ::Photon::Voice::Flip& f2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Flip::get_IsVertical
// Il2CppName: get_IsVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Flip::*)()>(&Photon::Voice::Flip::get_IsVertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), "get_IsVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::set_IsVertical
// Il2CppName: set_IsVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Flip::*)(bool)>(&Photon::Voice::Flip::set_IsVertical)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), "set_IsVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::get_IsHorizontal
// Il2CppName: get_IsHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Flip::*)()>(&Photon::Voice::Flip::get_IsHorizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), "get_IsHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::set_IsHorizontal
// Il2CppName: set_IsHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Flip::*)(bool)>(&Photon::Voice::Flip::set_IsHorizontal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), "set_IsHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::Flip::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Flip::*)(::Il2CppObject*)>(&Photon::Voice::Flip::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Flip::*)()>(&Photon::Voice::Flip::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Flip), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Flip::operator ==
// Il2CppName: op_Equality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Photon::Voice::Flip::operator !=
// Il2CppName: op_Inequality
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: Photon::Voice::Flip::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
