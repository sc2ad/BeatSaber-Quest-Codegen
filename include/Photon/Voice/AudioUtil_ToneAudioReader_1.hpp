// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
// Including type: Photon.Voice.IAudioReader`1
#include "Photon/Voice/IAudioReader_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Skipping declaration: <>c because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::AudioUtil::ToneAudioReader_1, "Photon.Voice", "AudioUtil/ToneAudioReader`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AudioUtil::ToneAudioReader_1 : public ::Il2CppObject/*, public ::Photon::Voice::IAudioReader_1<T>*/ {
    public:
    // Nested type: ::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c<T>
    class $$c;
    // WARNING Size may be invalid!
    // Autogenerated type: Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1/Photon.Voice.<>c
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: FFFFFFFF
    class $$c : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = AudioUtil::ToneAudioReader_1<T>*;
      static constexpr std::string_view NESTED_NAME = "<>c";
      static constexpr bool IS_VALUE_TYPE = false;
      // Autogenerated static field getter
      // Get static field: static public readonly Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1/Photon.Voice.<>c<T> <>9
      static typename ::Photon::Voice::AudioUtil::ToneAudioReader_1<T>::$$c* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename ::Photon::Voice::AudioUtil::ToneAudioReader_1<T>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename AudioUtil::ToneAudioReader_1<T>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1/Photon.Voice.<>c<T> <>9
      static void _set_$$9(typename ::Photon::Voice::AudioUtil::ToneAudioReader_1<T>::$$c* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename AudioUtil::ToneAudioReader_1<T>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`1<System.Double> <>9__0_0
      static ::System::Func_1<double>* _get_$$9__0_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::_get_$$9__0_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<::System::Func_1<double>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename AudioUtil::ToneAudioReader_1<T>::$$c*>::get(), "<>9__0_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`1<System.Double> <>9__0_0
      static void _set_$$9__0_0(::System::Func_1<double>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::_set_$$9__0_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename AudioUtil::ToneAudioReader_1<T>::$$c*>::get(), "<>9__0_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename AudioUtil::ToneAudioReader_1<T>::$$c*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        ::il2cpp_utils::RunMethodRethrow<void, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFFFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename AudioUtil::ToneAudioReader_1<T>::$$c* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename AudioUtil::ToneAudioReader_1<T>::$$c*, creationType>()));
      }
      // System.Double <.ctor>b__0_0()
      // Offset: 0xFFFFFFFFFFFFFFFF
      double $_ctor$b__0_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::$$c::<.ctor>b__0_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<.ctor>b__0_0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        return ::il2cpp_utils::RunMethodRethrow<double, false>(this, ___internal__method);
      }
    }; // Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1/Photon.Voice.<>c
    // Could not write size check! Type: Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1/Photon.Voice.<>c is generic, or has no fields that are valid for size checks!
    public:
    // private System.String <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Double k
    // Size: 0x8
    // Offset: 0x0
    double k;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int64 timeSamples
    // Size: 0x8
    // Offset: 0x0
    int64_t timeSamples;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Func`1<System.Double> clockSec
    // Size: 0x8
    // Offset: 0x0
    ::System::Func_1<double>* clockSec;
    // Field size check
    static_assert(sizeof(::System::Func_1<double>*) == 0x8);
    // private System.Int32 samplingRate
    // Size: 0x4
    // Offset: 0x0
    int samplingRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 channels
    // Size: 0x4
    // Offset: 0x0
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioReader_1<T>
    operator ::Photon::Voice::IAudioReader_1<T>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioReader_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.String <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Error$k__BackingField() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::dyn_$Error$k__BackingField");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Error>k__BackingField"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Double k
    [[deprecated("Use field access instead!")]] double& dyn_k() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::dyn_k");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "k"))->offset;
      return *reinterpret_cast<double*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int64 timeSamples
    [[deprecated("Use field access instead!")]] int64_t& dyn_timeSamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::dyn_timeSamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "timeSamples"))->offset;
      return *reinterpret_cast<int64_t*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Func`1<System.Double> clockSec
    [[deprecated("Use field access instead!")]] ::System::Func_1<double>*& dyn_clockSec() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::dyn_clockSec");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clockSec"))->offset;
      return *reinterpret_cast<::System::Func_1<double>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 samplingRate
    [[deprecated("Use field access instead!")]] int& dyn_samplingRate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::dyn_samplingRate");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "samplingRate"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::dyn_channels");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channels"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_Channels()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Channels() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::get_Channels");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::ToneAudioReader_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_SamplingRate()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_SamplingRate() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::get_SamplingRate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::ToneAudioReader_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.String get_Error()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW get_Error() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::get_Error");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::ToneAudioReader_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
    // private System.Void set_Error(System.String value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_Error(::StringW value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::set_Error");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_Error", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor(System.Func`1<System.Double> clockSec, System.Double frequency, System.Int32 samplingRate, System.Int32 channels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioUtil::ToneAudioReader_1<T>* New_ctor(::System::Func_1<double>* clockSec, double frequency, int samplingRate, int channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioUtil::ToneAudioReader_1<T>*, creationType>(clockSec, frequency, samplingRate, channels)));
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::ToneAudioReader_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Read(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool Read(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::ToneAudioReader_1::Read");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::ToneAudioReader_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, buf);
    }
  }; // Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1
  // Could not write size check! Type: Photon.Voice.AudioUtil/Photon.Voice.ToneAudioReader`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
