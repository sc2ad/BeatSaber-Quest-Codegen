// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
// Including type: Photon.Voice.IProcessor`1
#include "Photon/Voice/IProcessor_1.hpp"
// Including type: Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter
#include "Photon/Voice/AudioUtil_ILevelMeter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::AudioUtil::LevelMeter_1, "Photon.Voice", "AudioUtil/LevelMeter`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AudioUtil::LevelMeter_1 : public ::Il2CppObject/*, public ::Photon::Voice::IProcessor_1<T>, public ::Photon::Voice::AudioUtil::ILevelMeter*/ {
    public:
    public:
    // protected System.Single ampSum
    // Size: 0x4
    // Offset: 0x0
    float ampSum;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single ampPeak
    // Size: 0x4
    // Offset: 0x0
    float ampPeak;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Int32 bufferSize
    // Size: 0x4
    // Offset: 0x0
    int bufferSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single[] prevValues
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> prevValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // protected System.Int32 prevValuesHead
    // Size: 0x4
    // Offset: 0x0
    int prevValuesHead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single accumAvgPeakAmpSum
    // Size: 0x4
    // Offset: 0x0
    float accumAvgPeakAmpSum;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Int32 accumAvgPeakAmpCount
    // Size: 0x4
    // Offset: 0x0
    int accumAvgPeakAmpCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single currentPeakAmp
    // Size: 0x4
    // Offset: 0x0
    float currentPeakAmp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single norm
    // Size: 0x4
    // Offset: 0x0
    float norm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IProcessor_1<T>
    operator ::Photon::Voice::IProcessor_1<T>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IProcessor_1<T>*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Voice::AudioUtil::ILevelMeter
    operator ::Photon::Voice::AudioUtil::ILevelMeter() noexcept {
      return *reinterpret_cast<::Photon::Voice::AudioUtil::ILevelMeter*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single ampSum
    [[deprecated("Use field access instead!")]] float& dyn_ampSum() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_ampSum");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ampSum"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single ampPeak
    [[deprecated("Use field access instead!")]] float& dyn_ampPeak() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_ampPeak");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "ampPeak"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 bufferSize
    [[deprecated("Use field access instead!")]] int& dyn_bufferSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_bufferSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bufferSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single[] prevValues
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_prevValues() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_prevValues");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevValues"))->offset;
      return *reinterpret_cast<::ArrayW<float>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 prevValuesHead
    [[deprecated("Use field access instead!")]] int& dyn_prevValuesHead() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_prevValuesHead");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "prevValuesHead"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single accumAvgPeakAmpSum
    [[deprecated("Use field access instead!")]] float& dyn_accumAvgPeakAmpSum() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_accumAvgPeakAmpSum");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accumAvgPeakAmpSum"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 accumAvgPeakAmpCount
    [[deprecated("Use field access instead!")]] int& dyn_accumAvgPeakAmpCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_accumAvgPeakAmpCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "accumAvgPeakAmpCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single currentPeakAmp
    [[deprecated("Use field access instead!")]] float& dyn_currentPeakAmp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_currentPeakAmp");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "currentPeakAmp"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Single norm
    [[deprecated("Use field access instead!")]] float& dyn_norm() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::dyn_norm");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "norm"))->offset;
      return *reinterpret_cast<float*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Single get_CurrentAvgAmp()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_CurrentAvgAmp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::get_CurrentAvgAmp");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // public System.Single get_CurrentPeakAmp()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_CurrentPeakAmp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::get_CurrentPeakAmp");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // protected System.Void set_CurrentPeakAmp(System.Single value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void set_CurrentPeakAmp(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::set_CurrentPeakAmp");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "set_CurrentPeakAmp", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, value);
    }
    // public System.Single get_AccumAvgPeakAmp()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_AccumAvgPeakAmp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::get_AccumAvgPeakAmp");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<float, false>(this, ___internal__method);
    }
    // System.Void .ctor(System.Int32 samplingRate, System.Int32 numChannels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioUtil::LevelMeter_1<T>* New_ctor(int samplingRate, int numChannels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioUtil::LevelMeter_1<T>*, creationType>(samplingRate, numChannels)));
    }
    // public System.Void ResetAccumAvgPeakAmp()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ResetAccumAvgPeakAmp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::ResetAccumAvgPeakAmp");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public T[] Process(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> Process(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::Process");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method, buf);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::LevelMeter_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1
  // Could not write size check! Type: Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
