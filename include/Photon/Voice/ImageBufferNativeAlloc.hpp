// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.ImageBufferNative
#include "Photon/Voice/ImageBufferNative.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferNativePool`1<T>
  template<typename T>
  class ImageBufferNativePool_1;
  // Forward declaring type: ImageBufferInfo
  class ImageBufferInfo;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferNativeAlloc
  class ImageBufferNativeAlloc;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::ImageBufferNativeAlloc);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferNativeAlloc*, "Photon.Voice", "ImageBufferNativeAlloc");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.ImageBufferNativeAlloc
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageBufferNativeAlloc : public ::Photon::Voice::ImageBufferNative/*, public ::System::IDisposable*/ {
    public:
    public:
    // private Photon.Voice.ImageBufferNativePool`1<Photon.Voice.ImageBufferNativeAlloc> pool
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>* pool;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating conversion operator: operator ::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>*
    constexpr operator ::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>*() const noexcept {
      return pool;
    }
    // Get instance field reference: private Photon.Voice.ImageBufferNativePool`1<Photon.Voice.ImageBufferNativeAlloc> pool
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>*& dyn_pool();
    // public System.Void .ctor(Photon.Voice.ImageBufferNativePool`1<Photon.Voice.ImageBufferNativeAlloc> pool, Photon.Voice.ImageBufferInfo info)
    // Offset: 0x1160C7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageBufferNativeAlloc* New_ctor(::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>* pool, ::Photon::Voice::ImageBufferInfo* info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ImageBufferNativeAlloc::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageBufferNativeAlloc*, creationType>(pool, info)));
    }
    // public override System.Void Release()
    // Offset: 0x1160D80
    // Implemented from: Photon.Voice.ImageBufferNative
    // Base method: System.Void ImageBufferNative::Release()
    void Release();
    // public override System.Void Dispose()
    // Offset: 0x1160D9C
    // Implemented from: Photon.Voice.ImageBufferNative
    // Base method: System.Void ImageBufferNative::Dispose()
    void Dispose();
  }; // Photon.Voice.ImageBufferNativeAlloc
  #pragma pack(pop)
  static check_size<sizeof(ImageBufferNativeAlloc), 32 + sizeof(::Photon::Voice::ImageBufferNativePool_1<::Photon::Voice::ImageBufferNativeAlloc*>*)> __Photon_Voice_ImageBufferNativeAllocSizeCheck;
  static_assert(sizeof(ImageBufferNativeAlloc) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNativeAlloc::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNativeAlloc::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNativeAlloc::*)()>(&Photon::Voice::ImageBufferNativeAlloc::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNativeAlloc*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNativeAlloc::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNativeAlloc::*)()>(&Photon::Voice::ImageBufferNativeAlloc::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNativeAlloc*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
