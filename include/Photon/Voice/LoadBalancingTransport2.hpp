// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.LoadBalancingTransport
#include "Photon/Voice/LoadBalancingTransport.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Skipping declaration: ILogger because it is already included!
  // Forward declaring type: FrameFlags
  struct FrameFlags;
  // Forward declaring type: LocalVoice
  class LocalVoice;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EventData
  class EventData;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: LoadBalancingTransport2
  class LoadBalancingTransport2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::LoadBalancingTransport2);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::LoadBalancingTransport2*, "Photon.Voice", "LoadBalancingTransport2");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.LoadBalancingTransport2
  // [TokenAttribute] Offset: FFFFFFFF
  class LoadBalancingTransport2 : public ::Photon::Voice::LoadBalancingTransport {
    public:
    // static field const value: static private System.Int32 DATA_OFFSET
    static constexpr const int DATA_OFFSET = 4;
    // Get static field: static private System.Int32 DATA_OFFSET
    static int _get_DATA_OFFSET();
    // Set static field: static private System.Int32 DATA_OFFSET
    static void _set_DATA_OFFSET(int value);
    // System.Void onVoiceFrameEvent(System.Object content0, System.Int32 channelId, System.Int32 playerId, System.Int32 localPlayerId)
    // Offset: 0x1163FC8
    void onVoiceFrameEvent(::Il2CppObject* content0, int channelId, int playerId, int localPlayerId);
    // public System.Void .ctor(Photon.Voice.ILogger logger, ExitGames.Client.Photon.ConnectionProtocol connectionProtocol)
    // Offset: 0x1163CA0
    // Implemented from: Photon.Voice.LoadBalancingTransport
    // Base method: System.Void LoadBalancingTransport::.ctor(Photon.Voice.ILogger logger, ExitGames.Client.Photon.ConnectionProtocol connectionProtocol)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoadBalancingTransport2* New_ctor(::Photon::Voice::ILogger* logger, ::ExitGames::Client::Photon::ConnectionProtocol connectionProtocol) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LoadBalancingTransport2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoadBalancingTransport2*, creationType>(logger, connectionProtocol)));
    }
    // public override System.Void SendFrame(System.ArraySegment`1<System.Byte> data, Photon.Voice.FrameFlags flags, System.Byte evNumber, System.Byte voiceId, System.Int32 channelId, System.Int32 targetPlayerId, System.Boolean reliable, Photon.Voice.LocalVoice localVoice)
    // Offset: 0x1163CE8
    // Implemented from: Photon.Voice.LoadBalancingTransport
    // Base method: System.Void LoadBalancingTransport::SendFrame(System.ArraySegment`1<System.Byte> data, Photon.Voice.FrameFlags flags, System.Byte evNumber, System.Byte voiceId, System.Int32 channelId, System.Int32 targetPlayerId, System.Boolean reliable, Photon.Voice.LocalVoice localVoice)
    void SendFrame(::System::ArraySegment_1<uint8_t> data, ::Photon::Voice::FrameFlags flags, uint8_t evNumber, uint8_t voiceId, int channelId, int targetPlayerId, bool reliable, ::Photon::Voice::LocalVoice* localVoice);
    // protected override System.Void onEventActionVoiceClient(ExitGames.Client.Photon.EventData ev)
    // Offset: 0x1163F38
    // Implemented from: Photon.Voice.LoadBalancingTransport
    // Base method: System.Void LoadBalancingTransport::onEventActionVoiceClient(ExitGames.Client.Photon.EventData ev)
    void onEventActionVoiceClient(::ExitGames::Client::Photon::EventData* ev);
  }; // Photon.Voice.LoadBalancingTransport2
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::LoadBalancingTransport2::onVoiceFrameEvent
// Il2CppName: onVoiceFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::LoadBalancingTransport2::*)(::Il2CppObject*, int, int, int)>(&Photon::Voice::LoadBalancingTransport2::onVoiceFrameEvent)> {
  static const MethodInfo* get() {
    static auto* content0 = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* localPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LoadBalancingTransport2*), "onVoiceFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{content0, channelId, playerId, localPlayerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LoadBalancingTransport2::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::LoadBalancingTransport2::SendFrame
// Il2CppName: SendFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::LoadBalancingTransport2::*)(::System::ArraySegment_1<uint8_t>, ::Photon::Voice::FrameFlags, uint8_t, uint8_t, int, int, bool, ::Photon::Voice::LocalVoice*)>(&Photon::Voice::LoadBalancingTransport2::SendFrame)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameFlags")->byval_arg;
    static auto* evNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localVoice = &::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LoadBalancingTransport2*), "SendFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, flags, evNumber, voiceId, channelId, targetPlayerId, reliable, localVoice});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LoadBalancingTransport2::onEventActionVoiceClient
// Il2CppName: onEventActionVoiceClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::LoadBalancingTransport2::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Voice::LoadBalancingTransport2::onEventActionVoiceClient)> {
  static const MethodInfo* get() {
    static auto* ev = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LoadBalancingTransport2*), "onEventActionVoiceClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ev});
  }
};
