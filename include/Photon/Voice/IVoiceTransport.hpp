// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoice
  class LocalVoice;
  // Forward declaring type: FrameFlags
  struct FrameFlags;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: IVoiceTransport
  class IVoiceTransport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::IVoiceTransport);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::IVoiceTransport*, "Photon.Voice", "IVoiceTransport");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.IVoiceTransport
  // [TokenAttribute] Offset: FFFFFFFF
  class IVoiceTransport {
    public:
    // public System.Boolean IsChannelJoined(System.Int32 channelId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool IsChannelJoined(int channelId);
    // public System.Void SendVoicesInfo(System.Collections.Generic.IEnumerable`1<Photon.Voice.LocalVoice> voices, System.Int32 channelId, System.Int32 targetPlayerId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendVoicesInfo(::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>* voices, int channelId, int targetPlayerId);
    // public System.Void SendVoiceRemove(Photon.Voice.LocalVoice voice, System.Int32 channelId, System.Int32 targetPlayerId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendVoiceRemove(::Photon::Voice::LocalVoice* voice, int channelId, int targetPlayerId);
    // public System.Void SendFrame(System.ArraySegment`1<System.Byte> data, Photon.Voice.FrameFlags flags, System.Byte evNumber, System.Byte voiceId, System.Int32 channelId, System.Int32 targetPlayerId, System.Boolean reliable, Photon.Voice.LocalVoice localVoice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void SendFrame(::System::ArraySegment_1<uint8_t> data, ::Photon::Voice::FrameFlags flags, uint8_t evNumber, uint8_t voiceId, int channelId, int targetPlayerId, bool reliable, ::Photon::Voice::LocalVoice* localVoice);
    // public System.String ChannelIdStr(System.Int32 channelId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW ChannelIdStr(int channelId);
    // public System.String PlayerIdStr(System.Int32 playerId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::StringW PlayerIdStr(int playerId);
  }; // Photon.Voice.IVoiceTransport
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::IVoiceTransport::IsChannelJoined
// Il2CppName: IsChannelJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::IVoiceTransport::*)(int)>(&Photon::Voice::IVoiceTransport::IsChannelJoined)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IVoiceTransport*), "IsChannelJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IVoiceTransport::SendVoicesInfo
// Il2CppName: SendVoicesInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::IVoiceTransport::*)(::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>*, int, int)>(&Photon::Voice::IVoiceTransport::SendVoicesInfo)> {
  static const MethodInfo* get() {
    static auto* voices = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")})->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IVoiceTransport*), "SendVoicesInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voices, channelId, targetPlayerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IVoiceTransport::SendVoiceRemove
// Il2CppName: SendVoiceRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::IVoiceTransport::*)(::Photon::Voice::LocalVoice*, int, int)>(&Photon::Voice::IVoiceTransport::SendVoiceRemove)> {
  static const MethodInfo* get() {
    static auto* voice = &::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IVoiceTransport*), "SendVoiceRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voice, channelId, targetPlayerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IVoiceTransport::SendFrame
// Il2CppName: SendFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::IVoiceTransport::*)(::System::ArraySegment_1<uint8_t>, ::Photon::Voice::FrameFlags, uint8_t, uint8_t, int, int, bool, ::Photon::Voice::LocalVoice*)>(&Photon::Voice::IVoiceTransport::SendFrame)> {
  static const MethodInfo* get() {
    static auto* data = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "ArraySegment`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte")})->byval_arg;
    static auto* flags = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameFlags")->byval_arg;
    static auto* evNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* reliable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* localVoice = &::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IVoiceTransport*), "SendFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, flags, evNumber, voiceId, channelId, targetPlayerId, reliable, localVoice});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IVoiceTransport::ChannelIdStr
// Il2CppName: ChannelIdStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::IVoiceTransport::*)(int)>(&Photon::Voice::IVoiceTransport::ChannelIdStr)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IVoiceTransport*), "ChannelIdStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::IVoiceTransport::PlayerIdStr
// Il2CppName: PlayerIdStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::IVoiceTransport::*)(int)>(&Photon::Voice::IVoiceTransport::PlayerIdStr)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::IVoiceTransport*), "PlayerIdStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
