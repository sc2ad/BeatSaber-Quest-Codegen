// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioOutDelayControl
#include "Photon/Voice/AudioOutDelayControl.hpp"
// Including type: Photon.Voice.IAudioOut`1
#include "Photon/Voice/IAudioOut_1.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: PrimitiveArrayPool`1<T>
  template<typename T>
  class PrimitiveArrayPool_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: AudioOutDelayControl`1<T>
  template<typename T>
  class AudioOutDelayControl_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::AudioOutDelayControl_1, "Photon.Voice", "AudioOutDelayControl`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioOutDelayControl`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AudioOutDelayControl_1 : public ::Photon::Voice::AudioOutDelayControl/*, public ::Photon::Voice::IAudioOut_1<T>*/ {
    public:
    public:
    // private readonly System.Int32 sizeofT
    // Size: 0x4
    // Offset: 0x0
    int sizeofT;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 frameSamples
    // Size: 0x4
    // Offset: 0x0
    int frameSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 frameSize
    // Size: 0x4
    // Offset: 0x0
    int frameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 bufferSamples
    // Size: 0x4
    // Offset: 0x0
    int bufferSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 frequency
    // Size: 0x4
    // Offset: 0x0
    int frequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 clipWriteSamplePos
    // Size: 0x4
    // Offset: 0x0
    int clipWriteSamplePos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playSamplePosPrev
    // Size: 0x4
    // Offset: 0x0
    int playSamplePosPrev;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 sourceTimeSamplesPrev
    // Size: 0x4
    // Offset: 0x0
    int sourceTimeSamplesPrev;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 playLoopCount
    // Size: 0x4
    // Offset: 0x0
    int playLoopCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.AudioOutDelayControl/Photon.Voice.PlayDelayConfig playDelayConfig
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioOutDelayControl::PlayDelayConfig* playDelayConfig;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioOutDelayControl::PlayDelayConfig*) == 0x8);
    // protected System.Int32 channels
    // Size: 0x4
    // Offset: 0x0
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean started
    // Size: 0x1
    // Offset: 0x0
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean flushed
    // Size: 0x1
    // Offset: 0x0
    bool flushed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 targetDelaySamples
    // Size: 0x4
    // Offset: 0x0
    int targetDelaySamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 upperTargetDelaySamples
    // Size: 0x4
    // Offset: 0x0
    int upperTargetDelaySamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 maxDelaySamples
    // Size: 0x4
    // Offset: 0x0
    int maxDelaySamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 lastPushTime
    // Size: 0x4
    // Offset: 0x0
    int lastPushTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected readonly Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // protected readonly System.String logPrefix
    // Size: 0x8
    // Offset: 0x0
    ::StringW logPrefix;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.Boolean debugInfo
    // Size: 0x1
    // Offset: 0x0
    bool debugInfo;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean processInService
    // Size: 0x1
    // Offset: 0x0
    bool processInService;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private T[] zeroFrame
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> zeroFrame;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private T[] resampledFrame
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<T> resampledFrame;
    // Field size check
    static_assert(sizeof(::ArrayW<T>) == 0x8);
    // private Photon.Voice.AudioUtil/Photon.Voice.TempoUp`1<T> tempoUp
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioUtil::TempoUp_1<T>* tempoUp;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::TempoUp_1<T>*) == 0x8);
    // private System.Boolean tempoChangeHQ
    // Size: 0x1
    // Offset: 0x0
    bool tempoChangeHQ;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Queue`1<T[]> frameQueue
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Queue_1<::ArrayW<T>>* frameQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::ArrayW<T>>*) == 0x8);
    // private Photon.Voice.PrimitiveArrayPool`1<T> framePool
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::PrimitiveArrayPool_1<T>* framePool;
    // Field size check
    static_assert(sizeof(::Photon::Voice::PrimitiveArrayPool_1<T>*) == 0x8);
    // private System.Boolean catchingUp
    // Size: 0x1
    // Offset: 0x0
    bool catchingUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioOut_1<T>
    operator ::Photon::Voice::IAudioOut_1<T>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioOut_1<T>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 TEMPO_UP_SKIP_GROUP
    static int _get_TEMPO_UP_SKIP_GROUP() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::_get_TEMPO_UP_SKIP_GROUP");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioOutDelayControl_1<T>*>::get(), "TEMPO_UP_SKIP_GROUP"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 TEMPO_UP_SKIP_GROUP
    static void _set_TEMPO_UP_SKIP_GROUP(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::_set_TEMPO_UP_SKIP_GROUP");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioOutDelayControl_1<T>*>::get(), "TEMPO_UP_SKIP_GROUP", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 NO_PUSH_TIMEOUT_MS
    static int _get_NO_PUSH_TIMEOUT_MS() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::_get_NO_PUSH_TIMEOUT_MS");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioOutDelayControl_1<T>*>::get(), "NO_PUSH_TIMEOUT_MS"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 NO_PUSH_TIMEOUT_MS
    static void _set_NO_PUSH_TIMEOUT_MS(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::_set_NO_PUSH_TIMEOUT_MS");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioOutDelayControl_1<T>*>::get(), "NO_PUSH_TIMEOUT_MS", value));
    }
    // Autogenerated static field getter
    // Get static field: static public System.Int32 FRAME_POOL_CAPACITY
    static int _get_FRAME_POOL_CAPACITY() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::_get_FRAME_POOL_CAPACITY");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioOutDelayControl_1<T>*>::get(), "FRAME_POOL_CAPACITY"));
    }
    // Autogenerated static field setter
    // Set static field: static public System.Int32 FRAME_POOL_CAPACITY
    static void _set_FRAME_POOL_CAPACITY(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::_set_FRAME_POOL_CAPACITY");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<AudioOutDelayControl_1<T>*>::get(), "FRAME_POOL_CAPACITY", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Int32 sizeofT
    [[deprecated("Use field access instead!")]] int& dyn_sizeofT() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_sizeofT");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sizeofT"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 frameSamples
    [[deprecated("Use field access instead!")]] int& dyn_frameSamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_frameSamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameSamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 frameSize
    [[deprecated("Use field access instead!")]] int& dyn_frameSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_frameSize");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameSize"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 bufferSamples
    [[deprecated("Use field access instead!")]] int& dyn_bufferSamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_bufferSamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bufferSamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 frequency
    [[deprecated("Use field access instead!")]] int& dyn_frequency() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_frequency");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frequency"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 clipWriteSamplePos
    [[deprecated("Use field access instead!")]] int& dyn_clipWriteSamplePos() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_clipWriteSamplePos");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "clipWriteSamplePos"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 playSamplePosPrev
    [[deprecated("Use field access instead!")]] int& dyn_playSamplePosPrev() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_playSamplePosPrev");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playSamplePosPrev"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 sourceTimeSamplesPrev
    [[deprecated("Use field access instead!")]] int& dyn_sourceTimeSamplesPrev() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_sourceTimeSamplesPrev");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "sourceTimeSamplesPrev"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 playLoopCount
    [[deprecated("Use field access instead!")]] int& dyn_playLoopCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_playLoopCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playLoopCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.AudioOutDelayControl/Photon.Voice.PlayDelayConfig playDelayConfig
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioOutDelayControl::PlayDelayConfig*& dyn_playDelayConfig() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_playDelayConfig");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "playDelayConfig"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioOutDelayControl::PlayDelayConfig**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_channels");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channels"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean started
    [[deprecated("Use field access instead!")]] bool& dyn_started() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_started");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "started"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean flushed
    [[deprecated("Use field access instead!")]] bool& dyn_flushed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_flushed");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "flushed"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 targetDelaySamples
    [[deprecated("Use field access instead!")]] int& dyn_targetDelaySamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_targetDelaySamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "targetDelaySamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 upperTargetDelaySamples
    [[deprecated("Use field access instead!")]] int& dyn_upperTargetDelaySamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_upperTargetDelaySamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "upperTargetDelaySamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 maxDelaySamples
    [[deprecated("Use field access instead!")]] int& dyn_maxDelaySamples() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_maxDelaySamples");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "maxDelaySamples"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 lastPushTime
    [[deprecated("Use field access instead!")]] int& dyn_lastPushTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_lastPushTime");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "lastPushTime"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected readonly Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_logger");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logger"))->offset;
      return *reinterpret_cast<::Photon::Voice::ILogger**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected readonly System.String logPrefix
    [[deprecated("Use field access instead!")]] ::StringW& dyn_logPrefix() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_logPrefix");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "logPrefix"))->offset;
      return *reinterpret_cast<::StringW*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean debugInfo
    [[deprecated("Use field access instead!")]] bool& dyn_debugInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_debugInfo");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "debugInfo"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean processInService
    [[deprecated("Use field access instead!")]] bool& dyn_processInService() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_processInService");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "processInService"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] zeroFrame
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_zeroFrame() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_zeroFrame");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "zeroFrame"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private T[] resampledFrame
    [[deprecated("Use field access instead!")]] ::ArrayW<T>& dyn_resampledFrame() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_resampledFrame");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resampledFrame"))->offset;
      return *reinterpret_cast<::ArrayW<T>*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.AudioUtil/Photon.Voice.TempoUp`1<T> tempoUp
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::TempoUp_1<T>*& dyn_tempoUp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_tempoUp");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempoUp"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioUtil::TempoUp_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean tempoChangeHQ
    [[deprecated("Use field access instead!")]] bool& dyn_tempoChangeHQ() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_tempoChangeHQ");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "tempoChangeHQ"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Queue`1<T[]> frameQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ArrayW<T>>*& dyn_frameQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_frameQueue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "frameQueue"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ArrayW<T>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.PrimitiveArrayPool`1<T> framePool
    [[deprecated("Use field access instead!")]] ::Photon::Voice::PrimitiveArrayPool_1<T>*& dyn_framePool() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_framePool");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framePool"))->offset;
      return *reinterpret_cast<::Photon::Voice::PrimitiveArrayPool_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean catchingUp
    [[deprecated("Use field access instead!")]] bool& dyn_catchingUp() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::dyn_catchingUp");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "catchingUp"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Int32 get_OutPos()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_OutPos() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::get_OutPos");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_Lag()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_Lag() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::get_Lag");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsFlushed()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsFlushed() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::get_IsFlushed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsFlushed", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Boolean get_IsPlaying()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsPlaying() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::get_IsPlaying");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Boolean processInService, Photon.Voice.AudioOutDelayControl/Photon.Voice.PlayDelayConfig playDelayConfig, Photon.Voice.ILogger logger, System.String logPrefix, System.Boolean debugInfo)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioOutDelayControl_1<T>* New_ctor(bool processInService, ::Photon::Voice::AudioOutDelayControl::PlayDelayConfig* playDelayConfig, ::Photon::Voice::ILogger* logger, ::StringW logPrefix, bool debugInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioOutDelayControl_1<T>*, creationType>(processInService, playDelayConfig, logger, logPrefix, debugInfo)));
    }
    // public System.Void OutCreate(System.Int32 frequency, System.Int32 channels, System.Int32 bufferSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OutCreate(int frequency, int channels, int bufferSamples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::OutCreate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frequency, channels, bufferSamples);
    }
    // public System.Void OutStart()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OutStart() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::OutStart");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void OutWrite(T[] data, System.Int32 offsetSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OutWrite(::ArrayW<T> data, int offsetSamples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::OutWrite");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, data, offsetSamples);
    }
    // public System.Void Start(System.Int32 frequency, System.Int32 channels, System.Int32 frameSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Start(int frequency, int channels, int frameSamples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::Start");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frequency, channels, frameSamples);
    }
    // private System.Boolean processFrame(T[] frame, System.Int32 playSamplePos)
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool processFrame(::ArrayW<T> frame, int playSamplePos) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::processFrame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "processFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(frame), ::il2cpp_utils::ExtractType(playSamplePos)})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, frame, playSamplePos);
    }
    // public System.Void Service()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Service() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::Service");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // private System.Int32 writeResampled(T[] f, System.Int32 resampledLenSamples)
    // Offset: 0xFFFFFFFFFFFFFFFF
    int writeResampled(::ArrayW<T> f, int resampledLenSamples) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::writeResampled");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "writeResampled", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(f), ::il2cpp_utils::ExtractType(resampledLenSamples)})));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method, f, resampledLenSamples);
    }
    // public System.Void Push(T[] frame)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Push(::ArrayW<T> frame) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::Push");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, frame);
    }
    // public System.Void Flush()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Flush() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::Flush");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void Stop()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Stop() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioOutDelayControl_1::Stop");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioOutDelayControl_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.AudioOutDelayControl`1
  // Could not write size check! Type: Photon.Voice.AudioOutDelayControl`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
