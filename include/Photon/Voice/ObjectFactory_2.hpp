// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ObjectFactory`2<TType, TInfo>
  template<typename TType, typename TInfo>
  class ObjectFactory_2;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::ObjectFactory_2, "Photon.Voice", "ObjectFactory`2");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.ObjectFactory`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TType, typename TInfo>
  class ObjectFactory_2/*, public ::System::IDisposable*/ {
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // public TInfo get_Info()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TInfo get_Info() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ObjectFactory_2::get_Info");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::ObjectFactory_2<TType, TInfo>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TInfo, false>(this, ___internal__method);
    }
    // public TType New()
    // Offset: 0xFFFFFFFFFFFFFFFF
    TType New() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ObjectFactory_2::New");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::ObjectFactory_2<TType, TInfo>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TType, false>(this, ___internal__method);
    }
    // public TType New(TInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    TType New(TInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ObjectFactory_2::New");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::ObjectFactory_2<TType, TInfo>*), -1)));
      return ::il2cpp_utils::RunMethodRethrow<TType, false>(this, ___internal__method, info);
    }
    // public System.Void Free(TType obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Free(TType obj) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ObjectFactory_2::Free");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::ObjectFactory_2<TType, TInfo>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj);
    }
    // public System.Void Free(TType obj, TInfo info)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Free(TType obj, TInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ObjectFactory_2::Free");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::ObjectFactory_2<TType, TInfo>*), -1)));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, obj, info);
    }
  }; // Photon.Voice.ObjectFactory`2
  // Could not write size check! Type: Photon.Voice.ObjectFactory`2 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
