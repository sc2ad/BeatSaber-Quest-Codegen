// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferInfo
  class ImageBufferInfo;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ImageBufferNative
  class ImageBufferNative;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::ImageBufferNative);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageBufferNative*, "Photon.Voice", "ImageBufferNative");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.ImageBufferNative
  // [TokenAttribute] Offset: FFFFFFFF
  class ImageBufferNative : public ::Il2CppObject {
    public:
    public:
    // private readonly Photon.Voice.ImageBufferInfo <Info>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Voice::ImageBufferInfo* Info;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageBufferInfo*) == 0x8);
    // private System.IntPtr[] <Planes>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::System::IntPtr> Planes;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::IntPtr>) == 0x8);
    public:
    // Get instance field reference: private readonly Photon.Voice.ImageBufferInfo <Info>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageBufferInfo*& dyn_$Info$k__BackingField();
    // Get instance field reference: private System.IntPtr[] <Planes>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::IntPtr>& dyn_$Planes$k__BackingField();
    // public Photon.Voice.ImageBufferInfo get_Info()
    // Offset: 0x1160C5C
    ::Photon::Voice::ImageBufferInfo* get_Info();
    // public System.IntPtr[] get_Planes()
    // Offset: 0x1160C64
    ::ArrayW<::System::IntPtr> get_Planes();
    // protected System.Void set_Planes(System.IntPtr[] value)
    // Offset: 0x1160C6C
    void set_Planes(::ArrayW<::System::IntPtr> value);
    // public System.Void .ctor(Photon.Voice.ImageBufferInfo info)
    // Offset: 0x1160BD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ImageBufferNative* New_ctor(::Photon::Voice::ImageBufferInfo* info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::ImageBufferNative::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ImageBufferNative*, creationType>(info)));
    }
    // public System.Void Release()
    // Offset: 0x1160C74
    void Release();
    // public System.Void Dispose()
    // Offset: 0x1160C78
    void Dispose();
  }; // Photon.Voice.ImageBufferNative
  #pragma pack(pop)
  static check_size<sizeof(ImageBufferNative), 24 + sizeof(::ArrayW<::System::IntPtr>)> __Photon_Voice_ImageBufferNativeSizeCheck;
  static_assert(sizeof(ImageBufferNative) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::get_Info
// Il2CppName: get_Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::ImageBufferInfo* (Photon::Voice::ImageBufferNative::*)()>(&Photon::Voice::ImageBufferNative::get_Info)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "get_Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::get_Planes
// Il2CppName: get_Planes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::System::IntPtr> (Photon::Voice::ImageBufferNative::*)()>(&Photon::Voice::ImageBufferNative::get_Planes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "get_Planes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::set_Planes
// Il2CppName: set_Planes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNative::*)(::ArrayW<::System::IntPtr>)>(&Photon::Voice::ImageBufferNative::set_Planes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "IntPtr"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "set_Planes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNative::*)()>(&Photon::Voice::ImageBufferNative::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::ImageBufferNative::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::ImageBufferNative::*)()>(&Photon::Voice::ImageBufferNative::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::ImageBufferNative*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
