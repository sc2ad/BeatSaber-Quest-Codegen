// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Photon.Voice.Codec
#include "Photon/Voice/Codec.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IVoiceTransport
  class IVoiceTransport;
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: LocalVoice
  class LocalVoice;
  // Forward declaring type: RemoteVoice
  class RemoteVoice;
  // Forward declaring type: RemoteVoiceInfo
  class RemoteVoiceInfo;
  // Forward declaring type: LocalVoiceAudio`1<T>
  template<typename T>
  class LocalVoiceAudio_1;
  // Forward declaring type: IEncoder
  class IEncoder;
  // Forward declaring type: LocalVoiceFramed`1<T>
  template<typename T>
  class LocalVoiceFramed_1;
  // Forward declaring type: IAudioDesc
  class IAudioDesc;
  // Forward declaring type: AudioSampleType
  struct AudioSampleType;
  // Forward declaring type: FrameBuffer
  struct FrameBuffer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: VoiceClient
  class VoiceClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::VoiceClient);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::VoiceClient*, "Photon.Voice", "VoiceClient");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.VoiceClient
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceClient : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    // Nested type: ::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate
    class RemoteVoiceInfoDelegate;
    // Nested type: ::Photon::Voice::VoiceClient::$get_RemoteVoiceInfos$d__40
    class $get_RemoteVoiceInfos$d__40;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass48_0
    class $$c__DisplayClass48_0;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass49_0_1<T>
    template<typename T>
    class $$c__DisplayClass49_0_1;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass50_0_1<T>
    template<typename T>
    class $$c__DisplayClass50_0_1;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass51_0
    class $$c__DisplayClass51_0;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass51_1
    class $$c__DisplayClass51_1;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass51_2
    class $$c__DisplayClass51_2;
    // Nested type: ::Photon::Voice::VoiceClient::$$c__DisplayClass51_3
    class $$c__DisplayClass51_3;
    // Nested type: ::Photon::Voice::VoiceClient::$$c
    class $$c;
    public:
    // Photon.Voice.IVoiceTransport transport
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Voice::IVoiceTransport* transport;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IVoiceTransport*) == 0x8);
    // Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private System.Int32 <FramesLost>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    int FramesLost;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <FramesReceived>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    int FramesReceived;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <RoundTripTime>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int RoundTripTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <RoundTripTimeVariance>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    int RoundTripTimeVariance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <SuppressInfoDuplicateWarning>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool SuppressInfoDuplicateWarning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SuppressInfoDuplicateWarning and: OnRemoteVoiceInfoAction
    char __padding6[0x7] = {};
    // private Photon.Voice.VoiceClient/Photon.Voice.RemoteVoiceInfoDelegate <OnRemoteVoiceInfoAction>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate* OnRemoteVoiceInfoAction;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate*) == 0x8);
    // private System.Int32 <DebugLostPercent>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    int DebugLostPercent;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 prevRtt
    // Size: 0x4
    // Offset: 0x44
    int prevRtt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.Dictionary`2<Photon.Voice.Codec,System.Int32> remoteVoiceDelayFrames
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::Dictionary_2<::Photon::Voice::Codec, int>* remoteVoiceDelayFrames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Photon::Voice::Codec, int>*) == 0x8);
    // private System.Byte globalInterestGroup
    // Size: 0x1
    // Offset: 0x50
    uint8_t globalInterestGroup;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte voiceIdCnt
    // Size: 0x1
    // Offset: 0x51
    uint8_t voiceIdCnt;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: voiceIdCnt and: localVoices
    char __padding12[0x6] = {};
    // private System.Collections.Generic.Dictionary`2<System.Byte,Photon.Voice.LocalVoice> localVoices
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<uint8_t, ::Photon::Voice::LocalVoice*>* localVoices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<uint8_t, ::Photon::Voice::LocalVoice*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Photon.Voice.LocalVoice>> localVoicesPerChannel
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::Photon::Voice::LocalVoice*>*>* localVoicesPerChannel;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::Photon::Voice::LocalVoice*>*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.Dictionary`2<System.Byte,Photon.Voice.RemoteVoice>> remoteVoices
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Photon::Voice::RemoteVoice*>*>* remoteVoices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Photon::Voice::RemoteVoice*>*>*) == 0x8);
    // private System.Random rnd
    // Size: 0x8
    // Offset: 0x70
    ::System::Random* rnd;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: Photon.Voice.IVoiceTransport transport
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IVoiceTransport*& dyn_transport();
    // Get instance field reference: Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger();
    // Get instance field reference: private System.Int32 <FramesLost>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$FramesLost$k__BackingField();
    // Get instance field reference: private System.Int32 <FramesReceived>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$FramesReceived$k__BackingField();
    // Get instance field reference: private System.Int32 <RoundTripTime>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$RoundTripTime$k__BackingField();
    // Get instance field reference: private System.Int32 <RoundTripTimeVariance>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$RoundTripTimeVariance$k__BackingField();
    // Get instance field reference: private System.Boolean <SuppressInfoDuplicateWarning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$SuppressInfoDuplicateWarning$k__BackingField();
    // Get instance field reference: private Photon.Voice.VoiceClient/Photon.Voice.RemoteVoiceInfoDelegate <OnRemoteVoiceInfoAction>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate*& dyn_$OnRemoteVoiceInfoAction$k__BackingField();
    // Get instance field reference: private System.Int32 <DebugLostPercent>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$DebugLostPercent$k__BackingField();
    // Get instance field reference: private System.Int32 prevRtt
    [[deprecated("Use field access instead!")]] int& dyn_prevRtt();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<Photon.Voice.Codec,System.Int32> remoteVoiceDelayFrames
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Photon::Voice::Codec, int>*& dyn_remoteVoiceDelayFrames();
    // Get instance field reference: private System.Byte globalInterestGroup
    [[deprecated("Use field access instead!")]] uint8_t& dyn_globalInterestGroup();
    // Get instance field reference: private System.Byte voiceIdCnt
    [[deprecated("Use field access instead!")]] uint8_t& dyn_voiceIdCnt();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Byte,Photon.Voice.LocalVoice> localVoices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<uint8_t, ::Photon::Voice::LocalVoice*>*& dyn_localVoices();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.List`1<Photon.Voice.LocalVoice>> localVoicesPerChannel
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::List_1<::Photon::Voice::LocalVoice*>*>*& dyn_localVoicesPerChannel();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Collections.Generic.Dictionary`2<System.Byte,Photon.Voice.RemoteVoice>> remoteVoices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Collections::Generic::Dictionary_2<uint8_t, ::Photon::Voice::RemoteVoice*>*>*& dyn_remoteVoices();
    // Get instance field reference: private System.Random rnd
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_rnd();
    // public System.Int32 get_FramesLost()
    // Offset: 0x117309C
    int get_FramesLost();
    // System.Void set_FramesLost(System.Int32 value)
    // Offset: 0x11730A4
    void set_FramesLost(int value);
    // public System.Int32 get_FramesReceived()
    // Offset: 0x11730AC
    int get_FramesReceived();
    // private System.Void set_FramesReceived(System.Int32 value)
    // Offset: 0x11730B4
    void set_FramesReceived(int value);
    // public System.Int32 get_FramesSent()
    // Offset: 0x11730BC
    int get_FramesSent();
    // public System.Int32 get_FramesSentBytes()
    // Offset: 0x11731C0
    int get_FramesSentBytes();
    // public System.Int32 get_RoundTripTime()
    // Offset: 0x11732C4
    int get_RoundTripTime();
    // private System.Void set_RoundTripTime(System.Int32 value)
    // Offset: 0x11732CC
    void set_RoundTripTime(int value);
    // public System.Int32 get_RoundTripTimeVariance()
    // Offset: 0x11732D4
    int get_RoundTripTimeVariance();
    // private System.Void set_RoundTripTimeVariance(System.Int32 value)
    // Offset: 0x11732DC
    void set_RoundTripTimeVariance(int value);
    // public System.Boolean get_SuppressInfoDuplicateWarning()
    // Offset: 0x11732E4
    bool get_SuppressInfoDuplicateWarning();
    // public System.Void set_SuppressInfoDuplicateWarning(System.Boolean value)
    // Offset: 0x11732EC
    void set_SuppressInfoDuplicateWarning(bool value);
    // public Photon.Voice.VoiceClient/Photon.Voice.RemoteVoiceInfoDelegate get_OnRemoteVoiceInfoAction()
    // Offset: 0x11732F8
    ::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate* get_OnRemoteVoiceInfoAction();
    // public System.Void set_OnRemoteVoiceInfoAction(Photon.Voice.VoiceClient/Photon.Voice.RemoteVoiceInfoDelegate value)
    // Offset: 0x1173300
    void set_OnRemoteVoiceInfoAction(::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate* value);
    // public System.Int32 get_DebugLostPercent()
    // Offset: 0x1173308
    int get_DebugLostPercent();
    // public System.Void set_DebugLostPercent(System.Int32 value)
    // Offset: 0x1173310
    void set_DebugLostPercent(int value);
    // public System.Collections.Generic.IEnumerable`1<Photon.Voice.LocalVoice> get_LocalVoices()
    // Offset: 0x1173318
    ::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>* get_LocalVoices();
    // public System.Collections.Generic.IEnumerable`1<Photon.Voice.RemoteVoiceInfo> get_RemoteVoiceInfos()
    // Offset: 0x11734A8
    ::System::Collections::Generic::IEnumerable_1<::Photon::Voice::RemoteVoiceInfo*>* get_RemoteVoiceInfos();
    // System.Byte get_GlobalInterestGroup()
    // Offset: 0x1175984
    uint8_t get_GlobalInterestGroup();
    // System.Void set_GlobalInterestGroup(System.Byte value)
    // Offset: 0x1161898
    void set_GlobalInterestGroup(uint8_t value);
    // System.Void .ctor(Photon.Voice.IVoiceTransport transport, Photon.Voice.ILogger logger)
    // Offset: 0x1161490
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceClient* New_ctor(::Photon::Voice::IVoiceTransport* transport, ::Photon::Voice::ILogger* logger) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceClient*, creationType>(transport, logger)));
    }
    // public System.Collections.Generic.IEnumerable`1<Photon.Voice.LocalVoice> LocalVoicesInChannel(System.Int32 channelId)
    // Offset: 0x11733CC
    ::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>* LocalVoicesInChannel(int channelId);
    // public System.Void LogSpacingProfiles()
    // Offset: 0x1173518
    void LogSpacingProfiles();
    // public System.Void LogStats()
    // Offset: 0x1173B4C
    void LogStats();
    // public System.Void SetRemoteVoiceDelayFrames(Photon.Voice.Codec codec, System.Int32 delayFrames)
    // Offset: 0x11740E8
    void SetRemoteVoiceDelayFrames(::Photon::Voice::Codec codec, int delayFrames);
    // public System.Void Service()
    // Offset: 0x1161618
    void Service();
    // private Photon.Voice.LocalVoice createLocalVoice(System.Int32 channelId, System.Func`3<System.Byte,System.Int32,Photon.Voice.LocalVoice> voiceFactory)
    // Offset: 0x1174344
    ::Photon::Voice::LocalVoice* createLocalVoice(int channelId, ::System::Func_3<uint8_t, int, ::Photon::Voice::LocalVoice*>* voiceFactory);
    // public Photon.Voice.LocalVoice CreateLocalVoice(Photon.Voice.VoiceInfo voiceInfo, System.Int32 channelId, Photon.Voice.IEncoder encoder)
    // Offset: 0x11748E0
    ::Photon::Voice::LocalVoice* CreateLocalVoice(::Photon::Voice::VoiceInfo voiceInfo, int channelId, ::Photon::Voice::IEncoder* encoder);
    // public Photon.Voice.LocalVoiceFramed`1<T> CreateLocalVoiceFramed(Photon.Voice.VoiceInfo voiceInfo, System.Int32 frameSize, System.Int32 channelId, Photon.Voice.IEncoder encoder)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::Photon::Voice::LocalVoiceFramed_1<T>* CreateLocalVoiceFramed(::Photon::Voice::VoiceInfo voiceInfo, int frameSize, int channelId, ::Photon::Voice::IEncoder* encoder) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::CreateLocalVoiceFramed");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLocalVoiceFramed", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(voiceInfo), ::il2cpp_utils::ExtractType(frameSize), ::il2cpp_utils::ExtractType(channelId), ::il2cpp_utils::ExtractType(encoder)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::LocalVoiceFramed_1<T>*, false>(this, ___generic__method, voiceInfo, frameSize, channelId, encoder);
    }
    // private Photon.Voice.LocalVoiceAudio`1<T> CreateLocalVoiceAudio(Photon.Voice.VoiceInfo voiceInfo, Photon.Voice.IAudioDesc audioSourceDesc, Photon.Voice.IEncoder encoder, System.Int32 channelId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::Photon::Voice::LocalVoiceAudio_1<T>* CreateLocalVoiceAudio(::Photon::Voice::VoiceInfo voiceInfo, ::Photon::Voice::IAudioDesc* audioSourceDesc, ::Photon::Voice::IEncoder* encoder, int channelId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::VoiceClient::CreateLocalVoiceAudio");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreateLocalVoiceAudio", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(voiceInfo), ::il2cpp_utils::ExtractType(audioSourceDesc), ::il2cpp_utils::ExtractType(encoder), ::il2cpp_utils::ExtractType(channelId)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::LocalVoiceAudio_1<T>*, false>(this, ___generic__method, voiceInfo, audioSourceDesc, encoder, channelId);
    }
    // public Photon.Voice.LocalVoice CreateLocalVoiceAudioFromSource(Photon.Voice.VoiceInfo voiceInfo, Photon.Voice.IAudioDesc source, Photon.Voice.AudioSampleType sampleType, Photon.Voice.IEncoder encoder, System.Int32 channelId)
    // Offset: 0x11749BC
    ::Photon::Voice::LocalVoice* CreateLocalVoiceAudioFromSource(::Photon::Voice::VoiceInfo voiceInfo, ::Photon::Voice::IAudioDesc* source, ::Photon::Voice::AudioSampleType sampleType, ::Photon::Voice::IEncoder* encoder, int channelId);
    // private System.Byte getNewVoiceId()
    // Offset: 0x1174560
    uint8_t getNewVoiceId();
    // private System.Void addVoice(System.Byte newId, System.Int32 channelId, Photon.Voice.LocalVoice v)
    // Offset: 0x1174704
    void addVoice(uint8_t newId, int channelId, ::Photon::Voice::LocalVoice* v);
    // public System.Void RemoveLocalVoice(Photon.Voice.LocalVoice voice)
    // Offset: 0x1166AC8
    void RemoveLocalVoice(::Photon::Voice::LocalVoice* voice);
    // private System.Void sendChannelVoicesInfo(System.Int32 channelId, System.Int32 targetPlayerId)
    // Offset: 0x1175874
    void sendChannelVoicesInfo(int channelId, int targetPlayerId);
    // System.Void sendVoicesInfoAndConfigFrame(System.Collections.Generic.IEnumerable`1<Photon.Voice.LocalVoice> voiceList, System.Int32 channelId, System.Int32 targetPlayerId)
    // Offset: 0x1164EDC
    void sendVoicesInfoAndConfigFrame(::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>* voiceList, int channelId, int targetPlayerId);
    // private System.Void clearRemoteVoices()
    // Offset: 0x117598C
    void clearRemoteVoices();
    // private System.Void clearRemoteVoicesInChannel(System.Int32 channelId)
    // Offset: 0x1175CE4
    void clearRemoteVoicesInChannel(int channelId);
    // private System.Void clearRemoteVoicesInChannelForPlayer(System.Int32 channelId, System.Int32 playerId)
    // Offset: 0x1176218
    void clearRemoteVoicesInChannelForPlayer(int channelId, int playerId);
    // System.Void onJoinChannel(System.Int32 channel)
    // Offset: 0x11638EC
    void onJoinChannel(int channel);
    // System.Void onLeaveChannel(System.Int32 channel)
    // Offset: 0x11638E8
    void onLeaveChannel(int channel);
    // System.Void onLeaveAllChannels()
    // Offset: 0x11637C8
    void onLeaveAllChannels();
    // System.Void onPlayerJoin(System.Int32 channelId, System.Int32 playerId)
    // Offset: 0x11637C4
    void onPlayerJoin(int channelId, int playerId);
    // System.Void onPlayerLeave(System.Int32 channelId, System.Int32 playerId)
    // Offset: 0x11637CC
    void onPlayerLeave(int channelId, int playerId);
    // System.Void onVoiceInfo(System.Int32 channelId, System.Int32 playerId, System.Byte voiceId, System.Byte eventNumber, Photon.Voice.VoiceInfo info)
    // Offset: 0x1167CC4
    void onVoiceInfo(int channelId, int playerId, uint8_t voiceId, uint8_t eventNumber, ::Photon::Voice::VoiceInfo info);
    // System.Void onVoiceRemove(System.Int32 channelId, System.Int32 playerId, System.Byte[] voiceIds)
    // Offset: 0x11684C4
    void onVoiceRemove(int channelId, int playerId, ::ArrayW<uint8_t> voiceIds);
    // System.Void onFrame(System.Int32 channelId, System.Int32 playerId, System.Byte voiceId, System.Byte evNumber, ref Photon.Voice.FrameBuffer receivedBytes, System.Boolean isLocalPlayer)
    // Offset: 0x11642DC
    void onFrame(int channelId, int playerId, uint8_t voiceId, uint8_t evNumber, ByRef<::Photon::Voice::FrameBuffer> receivedBytes, bool isLocalPlayer);
    // System.String channelStr(System.Int32 channelId)
    // Offset: 0x1165D20
    ::StringW channelStr(int channelId);
    // System.String playerStr(System.Int32 playerId)
    // Offset: 0x1176488
    ::StringW playerStr(int playerId);
    // public System.Void Dispose()
    // Offset: 0x116390C
    void Dispose();
  }; // Photon.Voice.VoiceClient
  #pragma pack(pop)
  static check_size<sizeof(VoiceClient), 112 + sizeof(::System::Random*)> __Photon_Voice_VoiceClientSizeCheck;
  static_assert(sizeof(VoiceClient) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_FramesLost
// Il2CppName: get_FramesLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_FramesLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_FramesLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_FramesLost
// Il2CppName: set_FramesLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::set_FramesLost)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_FramesLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_FramesReceived
// Il2CppName: get_FramesReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_FramesReceived)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_FramesReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_FramesReceived
// Il2CppName: set_FramesReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::set_FramesReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_FramesReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_FramesSent
// Il2CppName: get_FramesSent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_FramesSent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_FramesSent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_FramesSentBytes
// Il2CppName: get_FramesSentBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_FramesSentBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_FramesSentBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_RoundTripTime
// Il2CppName: get_RoundTripTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_RoundTripTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_RoundTripTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_RoundTripTime
// Il2CppName: set_RoundTripTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::set_RoundTripTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_RoundTripTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_RoundTripTimeVariance
// Il2CppName: get_RoundTripTimeVariance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_RoundTripTimeVariance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_RoundTripTimeVariance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_RoundTripTimeVariance
// Il2CppName: set_RoundTripTimeVariance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::set_RoundTripTimeVariance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_RoundTripTimeVariance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_SuppressInfoDuplicateWarning
// Il2CppName: get_SuppressInfoDuplicateWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_SuppressInfoDuplicateWarning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_SuppressInfoDuplicateWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_SuppressInfoDuplicateWarning
// Il2CppName: set_SuppressInfoDuplicateWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(bool)>(&Photon::Voice::VoiceClient::set_SuppressInfoDuplicateWarning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_SuppressInfoDuplicateWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_OnRemoteVoiceInfoAction
// Il2CppName: get_OnRemoteVoiceInfoAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate* (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_OnRemoteVoiceInfoAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_OnRemoteVoiceInfoAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_OnRemoteVoiceInfoAction
// Il2CppName: set_OnRemoteVoiceInfoAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(::Photon::Voice::VoiceClient::RemoteVoiceInfoDelegate*)>(&Photon::Voice::VoiceClient::set_OnRemoteVoiceInfoAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceClient/RemoteVoiceInfoDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_OnRemoteVoiceInfoAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_DebugLostPercent
// Il2CppName: get_DebugLostPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_DebugLostPercent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_DebugLostPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_DebugLostPercent
// Il2CppName: set_DebugLostPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::set_DebugLostPercent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_DebugLostPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_LocalVoices
// Il2CppName: get_LocalVoices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>* (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_LocalVoices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_LocalVoices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_RemoteVoiceInfos
// Il2CppName: get_RemoteVoiceInfos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Photon::Voice::RemoteVoiceInfo*>* (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_RemoteVoiceInfos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_RemoteVoiceInfos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::get_GlobalInterestGroup
// Il2CppName: get_GlobalInterestGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::get_GlobalInterestGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "get_GlobalInterestGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::set_GlobalInterestGroup
// Il2CppName: set_GlobalInterestGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(uint8_t)>(&Photon::Voice::VoiceClient::set_GlobalInterestGroup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "set_GlobalInterestGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::LocalVoicesInChannel
// Il2CppName: LocalVoicesInChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>* (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::LocalVoicesInChannel)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "LocalVoicesInChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::LogSpacingProfiles
// Il2CppName: LogSpacingProfiles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::LogSpacingProfiles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "LogSpacingProfiles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::LogStats
// Il2CppName: LogStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::LogStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "LogStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::SetRemoteVoiceDelayFrames
// Il2CppName: SetRemoteVoiceDelayFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(::Photon::Voice::Codec, int)>(&Photon::Voice::VoiceClient::SetRemoteVoiceDelayFrames)> {
  static const MethodInfo* get() {
    static auto* codec = &::il2cpp_utils::GetClassFromName("Photon.Voice", "Codec")->byval_arg;
    static auto* delayFrames = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "SetRemoteVoiceDelayFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{codec, delayFrames});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::createLocalVoice
// Il2CppName: createLocalVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::LocalVoice* (Photon::Voice::VoiceClient::*)(int, ::System::Func_3<uint8_t, int, ::Photon::Voice::LocalVoice*>*)>(&Photon::Voice::VoiceClient::createLocalVoice)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceFactory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte"), ::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "createLocalVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, voiceFactory});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::CreateLocalVoice
// Il2CppName: CreateLocalVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::LocalVoice* (Photon::Voice::VoiceClient::*)(::Photon::Voice::VoiceInfo, int, ::Photon::Voice::IEncoder*)>(&Photon::Voice::VoiceClient::CreateLocalVoice)> {
  static const MethodInfo* get() {
    static auto* voiceInfo = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* encoder = &::il2cpp_utils::GetClassFromName("Photon.Voice", "IEncoder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "CreateLocalVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceInfo, channelId, encoder});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::CreateLocalVoiceFramed
// Il2CppName: CreateLocalVoiceFramed
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::CreateLocalVoiceAudio
// Il2CppName: CreateLocalVoiceAudio
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::CreateLocalVoiceAudioFromSource
// Il2CppName: CreateLocalVoiceAudioFromSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::LocalVoice* (Photon::Voice::VoiceClient::*)(::Photon::Voice::VoiceInfo, ::Photon::Voice::IAudioDesc*, ::Photon::Voice::AudioSampleType, ::Photon::Voice::IEncoder*, int)>(&Photon::Voice::VoiceClient::CreateLocalVoiceAudioFromSource)> {
  static const MethodInfo* get() {
    static auto* voiceInfo = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("Photon.Voice", "IAudioDesc")->byval_arg;
    static auto* sampleType = &::il2cpp_utils::GetClassFromName("Photon.Voice", "AudioSampleType")->byval_arg;
    static auto* encoder = &::il2cpp_utils::GetClassFromName("Photon.Voice", "IEncoder")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "CreateLocalVoiceAudioFromSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceInfo, source, sampleType, encoder, channelId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::getNewVoiceId
// Il2CppName: getNewVoiceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::getNewVoiceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "getNewVoiceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::addVoice
// Il2CppName: addVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(uint8_t, int, ::Photon::Voice::LocalVoice*)>(&Photon::Voice::VoiceClient::addVoice)> {
  static const MethodInfo* get() {
    static auto* newId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "addVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newId, channelId, v});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::RemoveLocalVoice
// Il2CppName: RemoveLocalVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(::Photon::Voice::LocalVoice*)>(&Photon::Voice::VoiceClient::RemoveLocalVoice)> {
  static const MethodInfo* get() {
    static auto* voice = &::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "RemoveLocalVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voice});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::sendChannelVoicesInfo
// Il2CppName: sendChannelVoicesInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int)>(&Photon::Voice::VoiceClient::sendChannelVoicesInfo)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "sendChannelVoicesInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, targetPlayerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::sendVoicesInfoAndConfigFrame
// Il2CppName: sendVoicesInfoAndConfigFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(::System::Collections::Generic::IEnumerable_1<::Photon::Voice::LocalVoice*>*, int, int)>(&Photon::Voice::VoiceClient::sendVoicesInfoAndConfigFrame)> {
  static const MethodInfo* get() {
    static auto* voiceList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice", "LocalVoice")})->byval_arg;
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* targetPlayerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "sendVoicesInfoAndConfigFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceList, channelId, targetPlayerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::clearRemoteVoices
// Il2CppName: clearRemoteVoices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::clearRemoteVoices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "clearRemoteVoices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::clearRemoteVoicesInChannel
// Il2CppName: clearRemoteVoicesInChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::clearRemoteVoicesInChannel)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "clearRemoteVoicesInChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::clearRemoteVoicesInChannelForPlayer
// Il2CppName: clearRemoteVoicesInChannelForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int)>(&Photon::Voice::VoiceClient::clearRemoteVoicesInChannelForPlayer)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "clearRemoteVoicesInChannelForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onJoinChannel
// Il2CppName: onJoinChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::onJoinChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onJoinChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onLeaveChannel
// Il2CppName: onLeaveChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::onLeaveChannel)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onLeaveChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onLeaveAllChannels
// Il2CppName: onLeaveAllChannels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::onLeaveAllChannels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onLeaveAllChannels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onPlayerJoin
// Il2CppName: onPlayerJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int)>(&Photon::Voice::VoiceClient::onPlayerJoin)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onPlayerJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onPlayerLeave
// Il2CppName: onPlayerLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int)>(&Photon::Voice::VoiceClient::onPlayerLeave)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onPlayerLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onVoiceInfo
// Il2CppName: onVoiceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int, uint8_t, uint8_t, ::Photon::Voice::VoiceInfo)>(&Photon::Voice::VoiceClient::onVoiceInfo)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* eventNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onVoiceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId, voiceId, eventNumber, info});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onVoiceRemove
// Il2CppName: onVoiceRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int, ::ArrayW<uint8_t>)>(&Photon::Voice::VoiceClient::onVoiceRemove)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceIds = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onVoiceRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId, voiceIds});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::onFrame
// Il2CppName: onFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)(int, int, uint8_t, uint8_t, ByRef<::Photon::Voice::FrameBuffer>, bool)>(&Photon::Voice::VoiceClient::onFrame)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* evNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* receivedBytes = &::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameBuffer")->this_arg;
    static auto* isLocalPlayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "onFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId, voiceId, evNumber, receivedBytes, isLocalPlayer});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::channelStr
// Il2CppName: channelStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::channelStr)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "channelStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::playerStr
// Il2CppName: playerStr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::VoiceClient::*)(int)>(&Photon::Voice::VoiceClient::playerStr)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "playerStr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::VoiceClient::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::VoiceClient::*)()>(&Photon::Voice::VoiceClient::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::VoiceClient*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
