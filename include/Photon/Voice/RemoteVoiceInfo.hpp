// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: RemoteVoiceInfo
  class RemoteVoiceInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::RemoteVoiceInfo);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::RemoteVoiceInfo*, "Photon.Voice", "RemoteVoiceInfo");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.RemoteVoiceInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteVoiceInfo : public ::Il2CppObject {
    public:
    public:
    // private Photon.Voice.VoiceInfo <Info>k__BackingField
    // Size: 0x30
    // Offset: 0x10
    ::Photon::Voice::VoiceInfo Info;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceInfo) == 0x30);
    // private System.Int32 <ChannelId>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    int ChannelId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <PlayerId>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    int PlayerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte <VoiceId>k__BackingField
    // Size: 0x1
    // Offset: 0x48
    uint8_t VoiceId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Get instance field reference: private Photon.Voice.VoiceInfo <Info>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceInfo& dyn_$Info$k__BackingField();
    // Get instance field reference: private System.Int32 <ChannelId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$ChannelId$k__BackingField();
    // Get instance field reference: private System.Int32 <PlayerId>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$PlayerId$k__BackingField();
    // Get instance field reference: private System.Byte <VoiceId>k__BackingField
    [[deprecated("Use field access instead!")]] uint8_t& dyn_$VoiceId$k__BackingField();
    // public Photon.Voice.VoiceInfo get_Info()
    // Offset: 0x116BD84
    ::Photon::Voice::VoiceInfo get_Info();
    // private System.Void set_Info(Photon.Voice.VoiceInfo value)
    // Offset: 0x116BD98
    void set_Info(::Photon::Voice::VoiceInfo value);
    // public System.Int32 get_ChannelId()
    // Offset: 0x116BDAC
    int get_ChannelId();
    // private System.Void set_ChannelId(System.Int32 value)
    // Offset: 0x116BDB4
    void set_ChannelId(int value);
    // public System.Int32 get_PlayerId()
    // Offset: 0x116BDBC
    int get_PlayerId();
    // private System.Void set_PlayerId(System.Int32 value)
    // Offset: 0x116BDC4
    void set_PlayerId(int value);
    // public System.Byte get_VoiceId()
    // Offset: 0x116BDCC
    uint8_t get_VoiceId();
    // private System.Void set_VoiceId(System.Byte value)
    // Offset: 0x116BDD4
    void set_VoiceId(uint8_t value);
    // System.Void .ctor(System.Int32 channelId, System.Int32 playerId, System.Byte voiceId, Photon.Voice.VoiceInfo info)
    // Offset: 0x116BD28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RemoteVoiceInfo* New_ctor(int channelId, int playerId, uint8_t voiceId, ::Photon::Voice::VoiceInfo info) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::RemoteVoiceInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RemoteVoiceInfo*, creationType>(channelId, playerId, voiceId, info)));
    }
  }; // Photon.Voice.RemoteVoiceInfo
  #pragma pack(pop)
  static check_size<sizeof(RemoteVoiceInfo), 72 + sizeof(uint8_t)> __Photon_Voice_RemoteVoiceInfoSizeCheck;
  static_assert(sizeof(RemoteVoiceInfo) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::get_Info
// Il2CppName: get_Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::VoiceInfo (Photon::Voice::RemoteVoiceInfo::*)()>(&Photon::Voice::RemoteVoiceInfo::get_Info)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "get_Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::set_Info
// Il2CppName: set_Info
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceInfo::*)(::Photon::Voice::VoiceInfo)>(&Photon::Voice::RemoteVoiceInfo::set_Info)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "set_Info", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::get_ChannelId
// Il2CppName: get_ChannelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::RemoteVoiceInfo::*)()>(&Photon::Voice::RemoteVoiceInfo::get_ChannelId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "get_ChannelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::set_ChannelId
// Il2CppName: set_ChannelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceInfo::*)(int)>(&Photon::Voice::RemoteVoiceInfo::set_ChannelId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "set_ChannelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::get_PlayerId
// Il2CppName: get_PlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::RemoteVoiceInfo::*)()>(&Photon::Voice::RemoteVoiceInfo::get_PlayerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "get_PlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::set_PlayerId
// Il2CppName: set_PlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceInfo::*)(int)>(&Photon::Voice::RemoteVoiceInfo::set_PlayerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "set_PlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::get_VoiceId
// Il2CppName: get_VoiceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Photon::Voice::RemoteVoiceInfo::*)()>(&Photon::Voice::RemoteVoiceInfo::get_VoiceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "get_VoiceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::set_VoiceId
// Il2CppName: set_VoiceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::RemoteVoiceInfo::*)(uint8_t)>(&Photon::Voice::RemoteVoiceInfo::set_VoiceId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::RemoteVoiceInfo*), "set_VoiceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::RemoteVoiceInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
