// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.LocalVoice
#include "Photon/Voice/LocalVoice.hpp"
// Including type: Photon.Voice.ILocalVoiceAudio
#include "Photon/Voice/ILocalVoiceAudio.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoiceAudioDummy
  class LocalVoiceAudioDummy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::LocalVoiceAudioDummy);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::LocalVoiceAudioDummy*, "Photon.Voice", "LocalVoiceAudioDummy");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.LocalVoiceAudioDummy
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalVoiceAudioDummy : public ::Photon::Voice::LocalVoice/*, public ::Photon::Voice::ILocalVoiceAudio*/ {
    public:
    public:
    // private Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorDummy voiceDetector
    // Size: 0x8
    // Offset: 0xB8
    ::Photon::Voice::AudioUtil::VoiceDetectorDummy* voiceDetector;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::VoiceDetectorDummy*) == 0x8);
    // private Photon.Voice.AudioUtil/Photon.Voice.LevelMeterDummy levelMeter
    // Size: 0x8
    // Offset: 0xC0
    ::Photon::Voice::AudioUtil::LevelMeterDummy* levelMeter;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::LevelMeterDummy*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::ILocalVoiceAudio
    operator ::Photon::Voice::ILocalVoiceAudio() noexcept {
      return *reinterpret_cast<::Photon::Voice::ILocalVoiceAudio*>(this);
    }
    // Get static field: static public Photon.Voice.LocalVoiceAudioDummy Dummy
    static ::Photon::Voice::LocalVoiceAudioDummy* _get_Dummy();
    // Set static field: static public Photon.Voice.LocalVoiceAudioDummy Dummy
    static void _set_Dummy(::Photon::Voice::LocalVoiceAudioDummy* value);
    // Get instance field reference: private Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorDummy voiceDetector
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::VoiceDetectorDummy*& dyn_voiceDetector();
    // Get instance field reference: private Photon.Voice.AudioUtil/Photon.Voice.LevelMeterDummy levelMeter
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::LevelMeterDummy*& dyn_levelMeter();
    // public Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector get_VoiceDetector()
    // Offset: 0x1166E68
    ::Photon::Voice::AudioUtil::IVoiceDetector* get_VoiceDetector();
    // public Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter get_LevelMeter()
    // Offset: 0x1166E70
    ::Photon::Voice::AudioUtil::ILevelMeter* get_LevelMeter();
    // public System.Boolean get_VoiceDetectorCalibrating()
    // Offset: 0x1166E78
    bool get_VoiceDetectorCalibrating();
    // static private System.Void .cctor()
    // Offset: 0x1166F0C
    static void _cctor();
    // public System.Void VoiceDetectorCalibrate(System.Int32 durationMs, System.Action`1<System.Single> onCalibrated)
    // Offset: 0x1166E80
    void VoiceDetectorCalibrate(int durationMs, ::System::Action_1<float>* onCalibrated);
    // public System.Void .ctor()
    // Offset: 0x1166E84
    // Implemented from: Photon.Voice.LocalVoice
    // Base method: System.Void LocalVoice::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalVoiceAudioDummy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudioDummy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalVoiceAudioDummy*, creationType>()));
    }
  }; // Photon.Voice.LocalVoiceAudioDummy
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceAudioDummy::get_VoiceDetector
// Il2CppName: get_VoiceDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::AudioUtil::IVoiceDetector* (Photon::Voice::LocalVoiceAudioDummy::*)()>(&Photon::Voice::LocalVoiceAudioDummy::get_VoiceDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceAudioDummy*), "get_VoiceDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceAudioDummy::get_LevelMeter
// Il2CppName: get_LevelMeter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::AudioUtil::ILevelMeter* (Photon::Voice::LocalVoiceAudioDummy::*)()>(&Photon::Voice::LocalVoiceAudioDummy::get_LevelMeter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceAudioDummy*), "get_LevelMeter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceAudioDummy::get_VoiceDetectorCalibrating
// Il2CppName: get_VoiceDetectorCalibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::LocalVoiceAudioDummy::*)()>(&Photon::Voice::LocalVoiceAudioDummy::get_VoiceDetectorCalibrating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceAudioDummy*), "get_VoiceDetectorCalibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceAudioDummy::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::LocalVoiceAudioDummy::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceAudioDummy*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceAudioDummy::VoiceDetectorCalibrate
// Il2CppName: VoiceDetectorCalibrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::LocalVoiceAudioDummy::*)(int, ::System::Action_1<float>*)>(&Photon::Voice::LocalVoiceAudioDummy::VoiceDetectorCalibrate)> {
  static const MethodInfo* get() {
    static auto* durationMs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onCalibrated = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceAudioDummy*), "VoiceDetectorCalibrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{durationMs, onCalibrated});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceAudioDummy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
