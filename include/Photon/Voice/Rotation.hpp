// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: Rotation
  struct Rotation;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Rotation, "Photon.Voice", "Rotation");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Rotation
  // [TokenAttribute] Offset: FFFFFFFF
  struct Rotation/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Rotation
    constexpr Rotation(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Photon.Voice.Rotation Undefined
    static constexpr const int Undefined = -1;
    // Get static field: static public Photon.Voice.Rotation Undefined
    static ::Photon::Voice::Rotation _get_Undefined();
    // Set static field: static public Photon.Voice.Rotation Undefined
    static void _set_Undefined(::Photon::Voice::Rotation value);
    // static field const value: static public Photon.Voice.Rotation Rotate0
    static constexpr const int Rotate0 = 0;
    // Get static field: static public Photon.Voice.Rotation Rotate0
    static ::Photon::Voice::Rotation _get_Rotate0();
    // Set static field: static public Photon.Voice.Rotation Rotate0
    static void _set_Rotate0(::Photon::Voice::Rotation value);
    // static field const value: static public Photon.Voice.Rotation Rotate90
    static constexpr const int Rotate90 = 90;
    // Get static field: static public Photon.Voice.Rotation Rotate90
    static ::Photon::Voice::Rotation _get_Rotate90();
    // Set static field: static public Photon.Voice.Rotation Rotate90
    static void _set_Rotate90(::Photon::Voice::Rotation value);
    // static field const value: static public Photon.Voice.Rotation Rotate180
    static constexpr const int Rotate180 = 180;
    // Get static field: static public Photon.Voice.Rotation Rotate180
    static ::Photon::Voice::Rotation _get_Rotate180();
    // Set static field: static public Photon.Voice.Rotation Rotate180
    static void _set_Rotate180(::Photon::Voice::Rotation value);
    // static field const value: static public Photon.Voice.Rotation Rotate270
    static constexpr const int Rotate270 = 270;
    // Get static field: static public Photon.Voice.Rotation Rotate270
    static ::Photon::Voice::Rotation _get_Rotate270();
    // Set static field: static public Photon.Voice.Rotation Rotate270
    static void _set_Rotate270(::Photon::Voice::Rotation value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Photon.Voice.Rotation
  #pragma pack(pop)
  static check_size<sizeof(Rotation), 0 + sizeof(int)> __Photon_Voice_RotationSizeCheck;
  static_assert(sizeof(Rotation) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
