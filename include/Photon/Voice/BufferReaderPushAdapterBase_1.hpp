// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IServiceable
#include "Photon/Voice/IServiceable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IDataReader`1<T>
  template<typename T>
  class IDataReader_1;
  // Forward declaring type: LocalVoice
  class LocalVoice;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: BufferReaderPushAdapterBase`1<T>
  template<typename T>
  class BufferReaderPushAdapterBase_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::BufferReaderPushAdapterBase_1, "Photon.Voice", "BufferReaderPushAdapterBase`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.BufferReaderPushAdapterBase`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class BufferReaderPushAdapterBase_1 : public ::Il2CppObject/*, public ::Photon::Voice::IServiceable*/ {
    public:
    public:
    // protected Photon.Voice.IDataReader`1<T> reader
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::IDataReader_1<T>* reader;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IDataReader_1<T>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IServiceable
    operator ::Photon::Voice::IServiceable() noexcept {
      return *reinterpret_cast<::Photon::Voice::IServiceable*>(this);
    }
    // Creating conversion operator: operator ::Photon::Voice::IDataReader_1<T>*
    constexpr operator ::Photon::Voice::IDataReader_1<T>*() const noexcept {
      return reader;
    }
    // Autogenerated instance field getter
    // Get instance field: protected Photon.Voice.IDataReader`1<T> reader
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IDataReader_1<T>*& dyn_reader() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterBase_1::dyn_reader");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "reader"))->offset;
      return *reinterpret_cast<::Photon::Voice::IDataReader_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(Photon.Voice.IDataReader`1<T> reader)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BufferReaderPushAdapterBase_1<T>* New_ctor(::Photon::Voice::IDataReader_1<T>* reader) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterBase_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BufferReaderPushAdapterBase_1<T>*, creationType>(reader)));
    }
    // public System.Void Service(Photon.Voice.LocalVoice localVoice)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Service(::Photon::Voice::LocalVoice* localVoice) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterBase_1::Service");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::BufferReaderPushAdapterBase_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, localVoice);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::BufferReaderPushAdapterBase_1::Dispose");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Dispose", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.BufferReaderPushAdapterBase`1
  // Could not write size check! Type: Photon.Voice.BufferReaderPushAdapterBase`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
