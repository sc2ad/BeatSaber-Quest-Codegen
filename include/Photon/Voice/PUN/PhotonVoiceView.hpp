// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
  // Forward declaring type: Speaker
  class Speaker;
}
// Completed forward declares
// Type namespace: Photon.Voice.PUN
namespace Photon::Voice::PUN {
  // Forward declaring type: PhotonVoiceView
  class PhotonVoiceView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::PUN::PhotonVoiceView);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::PUN::PhotonVoiceView*, "Photon.Voice.PUN", "PhotonVoiceView");
// Type namespace: Photon.Voice.PUN
namespace Photon::Voice::PUN {
  // Size: 0x46
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.PUN.PhotonVoiceView
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 973884
  // [RequireComponent] Offset: 973884
  // [HelpURLAttribute] Offset: 973884
  class PhotonVoiceView : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Writing base type padding for base size: 0x22 to desired offset: 0x28
    char ___base_padding[0x6] = {};
    public:
    // private Photon.Pun.PhotonView photonView
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private Photon.Voice.Unity.Recorder recorderInUse
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Voice::Unity::Recorder* recorderInUse;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private Photon.Voice.Unity.Speaker speakerInUse
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::Unity::Speaker* speakerInUse;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Speaker*) == 0x8);
    // private System.Boolean onEnableCalledOnce
    // Size: 0x1
    // Offset: 0x40
    bool onEnableCalledOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoCreateRecorderIfNotFound
    // Size: 0x1
    // Offset: 0x41
    bool AutoCreateRecorderIfNotFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UsePrimaryRecorder
    // Size: 0x1
    // Offset: 0x42
    bool UsePrimaryRecorder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SetupDebugSpeaker
    // Size: 0x1
    // Offset: 0x43
    bool SetupDebugSpeaker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsSpeaker>k__BackingField
    // Size: 0x1
    // Offset: 0x44
    bool IsSpeaker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <IsRecorder>k__BackingField
    // Size: 0x1
    // Offset: 0x45
    bool IsRecorder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Photon.Pun.PhotonView photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonView();
    // Get instance field reference: private Photon.Voice.Unity.Recorder recorderInUse
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_recorderInUse();
    // Get instance field reference: private Photon.Voice.Unity.Speaker speakerInUse
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Speaker*& dyn_speakerInUse();
    // Get instance field reference: private System.Boolean onEnableCalledOnce
    [[deprecated("Use field access instead!")]] bool& dyn_onEnableCalledOnce();
    // Get instance field reference: public System.Boolean AutoCreateRecorderIfNotFound
    [[deprecated("Use field access instead!")]] bool& dyn_AutoCreateRecorderIfNotFound();
    // Get instance field reference: public System.Boolean UsePrimaryRecorder
    [[deprecated("Use field access instead!")]] bool& dyn_UsePrimaryRecorder();
    // Get instance field reference: public System.Boolean SetupDebugSpeaker
    [[deprecated("Use field access instead!")]] bool& dyn_SetupDebugSpeaker();
    // Get instance field reference: private System.Boolean <IsSpeaker>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsSpeaker$k__BackingField();
    // Get instance field reference: private System.Boolean <IsRecorder>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsRecorder$k__BackingField();
    // public Photon.Voice.Unity.Recorder get_RecorderInUse()
    // Offset: 0x1BA8554
    ::Photon::Voice::Unity::Recorder* get_RecorderInUse();
    // public System.Void set_RecorderInUse(Photon.Voice.Unity.Recorder value)
    // Offset: 0x1BA855C
    void set_RecorderInUse(::Photon::Voice::Unity::Recorder* value);
    // public Photon.Voice.Unity.Speaker get_SpeakerInUse()
    // Offset: 0x1BA8DC4
    ::Photon::Voice::Unity::Speaker* get_SpeakerInUse();
    // public System.Void set_SpeakerInUse(Photon.Voice.Unity.Speaker value)
    // Offset: 0x1BA8DCC
    void set_SpeakerInUse(::Photon::Voice::Unity::Speaker* value);
    // public System.Boolean get_IsSetup()
    // Offset: 0x1BA8FBC
    bool get_IsSetup();
    // public System.Boolean get_IsSpeaker()
    // Offset: 0x1BA901C
    bool get_IsSpeaker();
    // private System.Void set_IsSpeaker(System.Boolean value)
    // Offset: 0x1BA9024
    void set_IsSpeaker(bool value);
    // public System.Boolean get_IsSpeaking()
    // Offset: 0x1BA9030
    bool get_IsSpeaking();
    // public System.Boolean get_IsRecorder()
    // Offset: 0x1BA905C
    bool get_IsRecorder();
    // private System.Void set_IsRecorder(System.Boolean value)
    // Offset: 0x1BA9064
    void set_IsRecorder(bool value);
    // public System.Boolean get_IsRecording()
    // Offset: 0x1BA9070
    bool get_IsRecording();
    // public System.Boolean get_IsSpeakerLinked()
    // Offset: 0x1BA909C
    bool get_IsSpeakerLinked();
    // public System.Boolean get_IsPhotonViewReady()
    // Offset: 0x1BA8CF8
    bool get_IsPhotonViewReady();
    // System.Boolean get_RequiresSpeaker()
    // Offset: 0x1BA8F68
    bool get_RequiresSpeaker();
    // System.Boolean get_RequiresRecorder()
    // Offset: 0x1BA86F8
    bool get_RequiresRecorder();
    // public System.Void .ctor()
    // Offset: 0x1BAA830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonVoiceView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::PUN::PhotonVoiceView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonVoiceView*, creationType>()));
    }
    // private System.Void OnEnable()
    // Offset: 0x1BA9284
    void OnEnable();
    // private System.Void Start()
    // Offset: 0x1BA929C
    void Start();
    // private System.Void CheckLateLinking()
    // Offset: 0x1BA92A0
    void CheckLateLinking();
    // System.Void Setup()
    // Offset: 0x1BA95E8
    void Setup();
    // private System.Boolean SetupRecorder()
    // Offset: 0x1BA973C
    bool SetupRecorder();
    // private System.Boolean SetupRecorder(Photon.Voice.Unity.Recorder recorder)
    // Offset: 0x1BA9AA0
    bool SetupRecorder(::Photon::Voice::Unity::Recorder* recorder);
    // private System.Boolean SetupSpeaker()
    // Offset: 0x1BA9DB8
    bool SetupSpeaker();
    // private System.Boolean SetupSpeaker(Photon.Voice.Unity.Speaker speaker)
    // Offset: 0x1BAA300
    bool SetupSpeaker(::Photon::Voice::Unity::Speaker* speaker);
    // System.Void SetupRecorderInUse()
    // Offset: 0x1BA873C
    void SetupRecorderInUse();
    // System.Void SetupSpeakerInUse()
    // Offset: 0x1BA7270
    void SetupSpeakerInUse();
    // public System.Void Init()
    // Offset: 0x1BA9130
    void Init();
    // protected override System.Void Awake()
    // Offset: 0x1BA90C8
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::Awake()
    void Awake();
  }; // Photon.Voice.PUN.PhotonVoiceView
  #pragma pack(pop)
  static check_size<sizeof(PhotonVoiceView), 69 + sizeof(bool)> __Photon_Voice_PUN_PhotonVoiceViewSizeCheck;
  static_assert(sizeof(PhotonVoiceView) == 0x46);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_RecorderInUse
// Il2CppName: get_RecorderInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder* (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_RecorderInUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_RecorderInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::set_RecorderInUse
// Il2CppName: set_RecorderInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)(::Photon::Voice::Unity::Recorder*)>(&Photon::Voice::PUN::PhotonVoiceView::set_RecorderInUse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "set_RecorderInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_SpeakerInUse
// Il2CppName: get_SpeakerInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Speaker* (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_SpeakerInUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_SpeakerInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::set_SpeakerInUse
// Il2CppName: set_SpeakerInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)(::Photon::Voice::Unity::Speaker*)>(&Photon::Voice::PUN::PhotonVoiceView::set_SpeakerInUse)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "set_SpeakerInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsSetup
// Il2CppName: get_IsSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsSpeaker
// Il2CppName: get_IsSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsSpeaker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::set_IsSpeaker
// Il2CppName: set_IsSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)(bool)>(&Photon::Voice::PUN::PhotonVoiceView::set_IsSpeaker)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "set_IsSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsSpeaking
// Il2CppName: get_IsSpeaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsSpeaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsSpeaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsRecorder
// Il2CppName: get_IsRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::set_IsRecorder
// Il2CppName: set_IsRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)(bool)>(&Photon::Voice::PUN::PhotonVoiceView::set_IsRecorder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "set_IsRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsRecording
// Il2CppName: get_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsSpeakerLinked
// Il2CppName: get_IsSpeakerLinked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsSpeakerLinked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsSpeakerLinked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_IsPhotonViewReady
// Il2CppName: get_IsPhotonViewReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_IsPhotonViewReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_IsPhotonViewReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_RequiresSpeaker
// Il2CppName: get_RequiresSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_RequiresSpeaker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_RequiresSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::get_RequiresRecorder
// Il2CppName: get_RequiresRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::get_RequiresRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "get_RequiresRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::CheckLateLinking
// Il2CppName: CheckLateLinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::CheckLateLinking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "CheckLateLinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::SetupRecorder
// Il2CppName: SetupRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::SetupRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "SetupRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::SetupRecorder
// Il2CppName: SetupRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)(::Photon::Voice::Unity::Recorder*)>(&Photon::Voice::PUN::PhotonVoiceView::SetupRecorder)> {
  static const MethodInfo* get() {
    static auto* recorder = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "SetupRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{recorder});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::SetupSpeaker
// Il2CppName: SetupSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::SetupSpeaker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "SetupSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::SetupSpeaker
// Il2CppName: SetupSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceView::*)(::Photon::Voice::Unity::Speaker*)>(&Photon::Voice::PUN::PhotonVoiceView::SetupSpeaker)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "SetupSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::SetupRecorderInUse
// Il2CppName: SetupRecorderInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::SetupRecorderInUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "SetupRecorderInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::SetupSpeakerInUse
// Il2CppName: SetupSpeakerInUse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::SetupSpeakerInUse)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "SetupSpeakerInUse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceView::*)()>(&Photon::Voice::PUN::PhotonVoiceView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
