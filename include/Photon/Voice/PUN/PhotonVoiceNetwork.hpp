// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceConnection
#include "Photon/Voice/Unity/VoiceConnection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: EnterRoomParams
  class EnterRoomParams;
  // Forward declaring type: ClientState
  struct ClientState;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Speaker
  class Speaker;
}
// Completed forward declares
// Type namespace: Photon.Voice.PUN
namespace Photon::Voice::PUN {
  // Forward declaring type: PhotonVoiceNetwork
  class PhotonVoiceNetwork;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::PUN::PhotonVoiceNetwork);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::PUN::PhotonVoiceNetwork*, "Photon.Voice.PUN", "PhotonVoiceNetwork");
// Type namespace: Photon.Voice.PUN
namespace Photon::Voice::PUN {
  // Size: 0x117
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.PUN.PhotonVoiceNetwork
  // [TokenAttribute] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 973814
  // [HelpURLAttribute] Offset: 973814
  class PhotonVoiceNetwork : public ::Photon::Voice::Unity::VoiceConnection {
    public:
    public:
    // public System.Boolean AutoConnectAndJoin
    // Size: 0x1
    // Offset: 0x104
    bool AutoConnectAndJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AutoLeaveAndDisconnect
    // Size: 0x1
    // Offset: 0x105
    bool AutoLeaveAndDisconnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean WorkInOfflineMode
    // Size: 0x1
    // Offset: 0x106
    bool WorkInOfflineMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: WorkInOfflineMode and: voiceRoomParams
    char __padding2[0x1] = {};
    // private Photon.Realtime.EnterRoomParams voiceRoomParams
    // Size: 0x8
    // Offset: 0x108
    ::Photon::Realtime::EnterRoomParams* voiceRoomParams;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::EnterRoomParams*) == 0x8);
    // private System.Boolean clientCalledConnectAndJoin
    // Size: 0x1
    // Offset: 0x110
    bool clientCalledConnectAndJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean clientCalledDisconnect
    // Size: 0x1
    // Offset: 0x111
    bool clientCalledDisconnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean clientCalledConnectOnly
    // Size: 0x1
    // Offset: 0x112
    bool clientCalledConnectOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean internalDisconnect
    // Size: 0x1
    // Offset: 0x113
    bool internalDisconnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean internalConnect
    // Size: 0x1
    // Offset: 0x114
    bool internalConnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usePunAppSettings
    // Size: 0x1
    // Offset: 0x115
    bool usePunAppSettings;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usePunAuthValues
    // Size: 0x1
    // Offset: 0x116
    bool usePunAuthValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // static field const value: static public System.String VoiceRoomNameSuffix
    static constexpr const char* VoiceRoomNameSuffix = "_voice_";
    // Get static field: static public System.String VoiceRoomNameSuffix
    static ::StringW _get_VoiceRoomNameSuffix();
    // Set static field: static public System.String VoiceRoomNameSuffix
    static void _set_VoiceRoomNameSuffix(::StringW value);
    // Get static field: static private System.Object instanceLock
    static ::Il2CppObject* _get_instanceLock();
    // Set static field: static private System.Object instanceLock
    static void _set_instanceLock(::Il2CppObject* value);
    // Get static field: static private Photon.Voice.PUN.PhotonVoiceNetwork instance
    static ::Photon::Voice::PUN::PhotonVoiceNetwork* _get_instance();
    // Set static field: static private Photon.Voice.PUN.PhotonVoiceNetwork instance
    static void _set_instance(::Photon::Voice::PUN::PhotonVoiceNetwork* value);
    // Get static field: static private System.Boolean instantiated
    static bool _get_instantiated();
    // Set static field: static private System.Boolean instantiated
    static void _set_instantiated(bool value);
    // Get instance field reference: public System.Boolean AutoConnectAndJoin
    [[deprecated("Use field access instead!")]] bool& dyn_AutoConnectAndJoin();
    // Get instance field reference: public System.Boolean AutoLeaveAndDisconnect
    [[deprecated("Use field access instead!")]] bool& dyn_AutoLeaveAndDisconnect();
    // Get instance field reference: public System.Boolean WorkInOfflineMode
    [[deprecated("Use field access instead!")]] bool& dyn_WorkInOfflineMode();
    // Get instance field reference: private Photon.Realtime.EnterRoomParams voiceRoomParams
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::EnterRoomParams*& dyn_voiceRoomParams();
    // Get instance field reference: private System.Boolean clientCalledConnectAndJoin
    [[deprecated("Use field access instead!")]] bool& dyn_clientCalledConnectAndJoin();
    // Get instance field reference: private System.Boolean clientCalledDisconnect
    [[deprecated("Use field access instead!")]] bool& dyn_clientCalledDisconnect();
    // Get instance field reference: private System.Boolean clientCalledConnectOnly
    [[deprecated("Use field access instead!")]] bool& dyn_clientCalledConnectOnly();
    // Get instance field reference: private System.Boolean internalDisconnect
    [[deprecated("Use field access instead!")]] bool& dyn_internalDisconnect();
    // Get instance field reference: private System.Boolean internalConnect
    [[deprecated("Use field access instead!")]] bool& dyn_internalConnect();
    // Get instance field reference: private System.Boolean usePunAppSettings
    [[deprecated("Use field access instead!")]] bool& dyn_usePunAppSettings();
    // Get instance field reference: private System.Boolean usePunAuthValues
    [[deprecated("Use field access instead!")]] bool& dyn_usePunAuthValues();
    // static public Photon.Voice.PUN.PhotonVoiceNetwork get_Instance()
    // Offset: 0x1BA4A60
    static ::Photon::Voice::PUN::PhotonVoiceNetwork* get_Instance();
    // static public System.Void set_Instance(Photon.Voice.PUN.PhotonVoiceNetwork value)
    // Offset: 0x1BA5260
    static void set_Instance(::Photon::Voice::PUN::PhotonVoiceNetwork* value);
    // public System.Boolean get_UsePunAuthValues()
    // Offset: 0x1BA58AC
    bool get_UsePunAuthValues();
    // public System.Void set_UsePunAuthValues(System.Boolean value)
    // Offset: 0x1BA58B4
    void set_UsePunAuthValues(bool value);
    // public System.Void .ctor()
    // Offset: 0x1BA842C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonVoiceNetwork* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::PUN::PhotonVoiceNetwork::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonVoiceNetwork*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BA84E8
    static void _cctor();
    // public System.Boolean ConnectAndJoinRoom()
    // Offset: 0x1BA58C0
    bool ConnectAndJoinRoom();
    // public System.Void Disconnect()
    // Offset: 0x1BA5DA8
    void Disconnect();
    // private System.Void OnEnable()
    // Offset: 0x1BA6098
    void OnEnable();
    // private System.Void OnPunStateChanged(Photon.Realtime.ClientState fromState, Photon.Realtime.ClientState toState)
    // Offset: 0x1BA6B24
    void OnPunStateChanged(::Photon::Realtime::ClientState fromState, ::Photon::Realtime::ClientState toState);
    // private System.Void FollowPun(Photon.Realtime.ClientState toState)
    // Offset: 0x1BA6CAC
    void FollowPun(::Photon::Realtime::ClientState toState);
    // static System.String GetVoiceRoomName()
    // Offset: 0x1BA7588
    static ::StringW GetVoiceRoomName();
    // private System.Void ConnectOrJoin()
    // Offset: 0x1BA7648
    void ConnectOrJoin();
    // private System.Boolean Connect()
    // Offset: 0x1BA5AEC
    bool Connect();
    // private System.Boolean JoinRoom(System.String voiceRoomName)
    // Offset: 0x1BA7B48
    bool JoinRoom(::StringW voiceRoomName);
    // private System.Void FollowPun()
    // Offset: 0x1BA6164
    void FollowPun();
    // System.Void CheckLateLinking(Photon.Voice.Unity.Speaker speaker, System.Int32 viewId)
    // Offset: 0x1BA7CB4
    void CheckLateLinking(::Photon::Voice::Unity::Speaker* speaker, int viewId);
    // protected override System.Void Awake()
    // Offset: 0x1BA5F24
    // Implemented from: Photon.Voice.Unity.VoiceConnection
    // Base method: System.Void VoiceConnection::Awake()
    void Awake();
    // protected override System.Void OnDisable()
    // Offset: 0x1BA676C
    // Implemented from: Photon.Voice.Unity.VoiceConnection
    // Base method: System.Void VoiceConnection::OnDisable()
    void OnDisable();
    // protected override System.Void OnDestroy()
    // Offset: 0x1BA6834
    // Implemented from: Photon.Voice.Unity.VoiceConnection
    // Base method: System.Void VoiceConnection::OnDestroy()
    void OnDestroy();
    // protected override System.Void OnVoiceStateChanged(Photon.Realtime.ClientState fromState, Photon.Realtime.ClientState toState)
    // Offset: 0x1BA6CD0
    // Implemented from: Photon.Voice.Unity.VoiceConnection
    // Base method: System.Void VoiceConnection::OnVoiceStateChanged(Photon.Realtime.ClientState fromState, Photon.Realtime.ClientState toState)
    void OnVoiceStateChanged(::Photon::Realtime::ClientState fromState, ::Photon::Realtime::ClientState toState);
    // protected override Photon.Voice.Unity.Speaker SimpleSpeakerFactory(System.Int32 playerId, System.Byte voiceId, System.Object userData)
    // Offset: 0x1BA6D8C
    // Implemented from: Photon.Voice.Unity.VoiceConnection
    // Base method: Photon.Voice.Unity.Speaker VoiceConnection::SimpleSpeakerFactory(System.Int32 playerId, System.Byte voiceId, System.Object userData)
    ::Photon::Voice::Unity::Speaker* SimpleSpeakerFactory(int playerId, uint8_t voiceId, ::Il2CppObject* userData);
  }; // Photon.Voice.PUN.PhotonVoiceNetwork
  #pragma pack(pop)
  static check_size<sizeof(PhotonVoiceNetwork), 278 + sizeof(bool)> __Photon_Voice_PUN_PhotonVoiceNetworkSizeCheck;
  static_assert(sizeof(PhotonVoiceNetwork) == 0x117);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::PUN::PhotonVoiceNetwork* (*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::set_Instance
// Il2CppName: set_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Voice::PUN::PhotonVoiceNetwork*)>(&Photon::Voice::PUN::PhotonVoiceNetwork::set_Instance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.PUN", "PhotonVoiceNetwork")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "set_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::get_UsePunAuthValues
// Il2CppName: get_UsePunAuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::get_UsePunAuthValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "get_UsePunAuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::set_UsePunAuthValues
// Il2CppName: set_UsePunAuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)(bool)>(&Photon::Voice::PUN::PhotonVoiceNetwork::set_UsePunAuthValues)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "set_UsePunAuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::ConnectAndJoinRoom
// Il2CppName: ConnectAndJoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::ConnectAndJoinRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "ConnectAndJoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::OnPunStateChanged
// Il2CppName: OnPunStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)(::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState)>(&Photon::Voice::PUN::PhotonVoiceNetwork::OnPunStateChanged)> {
  static const MethodInfo* get() {
    static auto* fromState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    static auto* toState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "OnPunStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromState, toState});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::FollowPun
// Il2CppName: FollowPun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)(::Photon::Realtime::ClientState)>(&Photon::Voice::PUN::PhotonVoiceNetwork::FollowPun)> {
  static const MethodInfo* get() {
    static auto* toState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "FollowPun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{toState});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::GetVoiceRoomName
// Il2CppName: GetVoiceRoomName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::GetVoiceRoomName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "GetVoiceRoomName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::ConnectOrJoin
// Il2CppName: ConnectOrJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::ConnectOrJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "ConnectOrJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::JoinRoom
// Il2CppName: JoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::PUN::PhotonVoiceNetwork::*)(::StringW)>(&Photon::Voice::PUN::PhotonVoiceNetwork::JoinRoom)> {
  static const MethodInfo* get() {
    static auto* voiceRoomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "JoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceRoomName});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::FollowPun
// Il2CppName: FollowPun
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::FollowPun)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "FollowPun", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::CheckLateLinking
// Il2CppName: CheckLateLinking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)(::Photon::Voice::Unity::Speaker*, int)>(&Photon::Voice::PUN::PhotonVoiceNetwork::CheckLateLinking)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    static auto* viewId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "CheckLateLinking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker, viewId});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)()>(&Photon::Voice::PUN::PhotonVoiceNetwork::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::OnVoiceStateChanged
// Il2CppName: OnVoiceStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::PhotonVoiceNetwork::*)(::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState)>(&Photon::Voice::PUN::PhotonVoiceNetwork::OnVoiceStateChanged)> {
  static const MethodInfo* get() {
    static auto* fromState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    static auto* toState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "OnVoiceStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromState, toState});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::PhotonVoiceNetwork::SimpleSpeakerFactory
// Il2CppName: SimpleSpeakerFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Speaker* (Photon::Voice::PUN::PhotonVoiceNetwork::*)(int, uint8_t, ::Il2CppObject*)>(&Photon::Voice::PUN::PhotonVoiceNetwork::SimpleSpeakerFactory)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::PhotonVoiceNetwork*), "SimpleSpeakerFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId, voiceId, userData});
  }
};
