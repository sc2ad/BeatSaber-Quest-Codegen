// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::PUN
namespace Photon::Voice::PUN {
  // Forward declaring type: PhotonVoiceView
  class PhotonVoiceView;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Photon.Voice.PUN.UtilityScripts
namespace Photon::Voice::PUN::UtilityScripts {
  // Forward declaring type: VoiceDebugScript
  class VoiceDebugScript;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::PUN::UtilityScripts::VoiceDebugScript);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*, "Photon.Voice.PUN.UtilityScripts", "VoiceDebugScript");
// Type namespace: Photon.Voice.PUN.UtilityScripts
namespace Photon::Voice::PUN::UtilityScripts {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.PUN.UtilityScripts.VoiceDebugScript
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 973930
  class VoiceDebugScript : public ::Photon::Pun::MonoBehaviourPun {
    public:
    public:
    // private Photon.Voice.PUN.PhotonVoiceView photonVoiceView
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Voice::PUN::PhotonVoiceView* photonVoiceView;
    // Field size check
    static_assert(sizeof(::Photon::Voice::PUN::PhotonVoiceView*) == 0x8);
    // public System.Boolean ForceRecordingAndTransmission
    // Size: 0x1
    // Offset: 0x28
    bool ForceRecordingAndTransmission;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ForceRecordingAndTransmission and: TestAudioClip
    char __padding1[0x7] = {};
    // public UnityEngine.AudioClip TestAudioClip
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AudioClip* TestAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // public System.Boolean TestUsingAudioClip
    // Size: 0x1
    // Offset: 0x38
    bool TestUsingAudioClip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean DisableVad
    // Size: 0x1
    // Offset: 0x39
    bool DisableVad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IncreaseLogLevels
    // Size: 0x1
    // Offset: 0x3A
    bool IncreaseLogLevels;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LocalDebug
    // Size: 0x1
    // Offset: 0x3B
    bool LocalDebug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Photon.Voice.PUN.PhotonVoiceView photonVoiceView
    [[deprecated("Use field access instead!")]] ::Photon::Voice::PUN::PhotonVoiceView*& dyn_photonVoiceView();
    // Get instance field reference: public System.Boolean ForceRecordingAndTransmission
    [[deprecated("Use field access instead!")]] bool& dyn_ForceRecordingAndTransmission();
    // Get instance field reference: public UnityEngine.AudioClip TestAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_TestAudioClip();
    // Get instance field reference: public System.Boolean TestUsingAudioClip
    [[deprecated("Use field access instead!")]] bool& dyn_TestUsingAudioClip();
    // Get instance field reference: public System.Boolean DisableVad
    [[deprecated("Use field access instead!")]] bool& dyn_DisableVad();
    // Get instance field reference: public System.Boolean IncreaseLogLevels
    [[deprecated("Use field access instead!")]] bool& dyn_IncreaseLogLevels();
    // Get instance field reference: public System.Boolean LocalDebug
    [[deprecated("Use field access instead!")]] bool& dyn_LocalDebug();
    // public System.Void .ctor()
    // Offset: 0x1BAB77C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceDebugScript* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceDebugScript*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x1BAA838
    void Awake();
    // private System.Void Update()
    // Offset: 0x1BAA890
    void Update();
    // public System.Void CantHearYou()
    // Offset: 0x1BAABB4
    void CantHearYou();
    // private System.Void CantHearYou(System.String roomName, System.String serverIp, System.String appVersion, Photon.Pun.PhotonMessageInfo photonMessageInfo)
    // Offset: 0x1BAAFC0
    void CantHearYou(::StringW roomName, ::StringW serverIp, ::StringW appVersion, ::Photon::Pun::PhotonMessageInfo photonMessageInfo);
    // private System.Void Reply(System.String why, Photon.Realtime.Player player)
    // Offset: 0x1BAB594
    void Reply(::StringW why, ::Photon::Realtime::Player* player);
    // private System.Void HeresWhy(System.String why, Photon.Pun.PhotonMessageInfo photonMessageInfo)
    // Offset: 0x1BAB674
    void HeresWhy(::StringW why, ::Photon::Pun::PhotonMessageInfo photonMessageInfo);
    // private System.Void MaxLogs()
    // Offset: 0x1BAAAA8
    void MaxLogs();
  }; // Photon.Voice.PUN.UtilityScripts.VoiceDebugScript
  #pragma pack(pop)
  static check_size<sizeof(VoiceDebugScript), 59 + sizeof(bool)> __Photon_Voice_PUN_UtilityScripts_VoiceDebugScriptSizeCheck;
  static_assert(sizeof(VoiceDebugScript) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)()>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)()>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::CantHearYou
// Il2CppName: CantHearYou
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)()>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::CantHearYou)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "CantHearYou", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::CantHearYou
// Il2CppName: CantHearYou
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)(::StringW, ::StringW, ::StringW, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::CantHearYou)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverIp = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appVersion = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonMessageInfo = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "CantHearYou", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, serverIp, appVersion, photonMessageInfo});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::Reply
// Il2CppName: Reply
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)(::StringW, ::Photon::Realtime::Player*)>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::Reply)> {
  static const MethodInfo* get() {
    static auto* why = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "Reply", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{why, player});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::HeresWhy
// Il2CppName: HeresWhy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)(::StringW, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::HeresWhy)> {
  static const MethodInfo* get() {
    static auto* why = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* photonMessageInfo = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "HeresWhy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{why, photonMessageInfo});
  }
};
// Writing MetadataGetter for method: Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::MaxLogs
// Il2CppName: MaxLogs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::*)()>(&Photon::Voice::PUN::UtilityScripts::VoiceDebugScript::MaxLogs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::PUN::UtilityScripts::VoiceDebugScript*), "MaxLogs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
