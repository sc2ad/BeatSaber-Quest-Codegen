// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.LocalVoiceFramed`1
#include "Photon/Voice/LocalVoiceFramed_1.hpp"
// Including type: Photon.Voice.ILocalVoiceAudio
#include "Photon/Voice/ILocalVoiceAudio.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: VoiceClient
  class VoiceClient;
  // Forward declaring type: IEncoder
  class IEncoder;
  // Forward declaring type: IAudioDesc
  class IAudioDesc;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoiceAudio`1<T>
  template<typename T>
  class LocalVoiceAudio_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::LocalVoiceAudio_1, "Photon.Voice", "LocalVoiceAudio`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.LocalVoiceAudio`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class LocalVoiceAudio_1 : public ::Photon::Voice::LocalVoiceFramed_1<T>/*, public ::Photon::Voice::ILocalVoiceAudio*/ {
    public:
    public:
    // protected Photon.Voice.AudioUtil/Photon.Voice.VoiceDetector`1<T> voiceDetector
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioUtil::VoiceDetector_1<T>* voiceDetector;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::VoiceDetector_1<T>*) == 0x8);
    // protected Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorCalibration`1<T> voiceDetectorCalibration
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1<T>* voiceDetectorCalibration;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1<T>*) == 0x8);
    // protected Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1<T> levelMeter
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioUtil::LevelMeter_1<T>* levelMeter;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::LevelMeter_1<T>*) == 0x8);
    // protected System.Int32 channels
    // Size: 0x4
    // Offset: 0x0
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean resampleSource
    // Size: 0x1
    // Offset: 0x0
    bool resampleSource;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::ILocalVoiceAudio
    operator ::Photon::Voice::ILocalVoiceAudio() noexcept {
      return *reinterpret_cast<::Photon::Voice::ILocalVoiceAudio*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: protected Photon.Voice.AudioUtil/Photon.Voice.VoiceDetector`1<T> voiceDetector
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::VoiceDetector_1<T>*& dyn_voiceDetector() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::dyn_voiceDetector");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voiceDetector"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioUtil::VoiceDetector_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorCalibration`1<T> voiceDetectorCalibration
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1<T>*& dyn_voiceDetectorCalibration() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::dyn_voiceDetectorCalibration");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voiceDetectorCalibration"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected Photon.Voice.AudioUtil/Photon.Voice.LevelMeter`1<T> levelMeter
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::LevelMeter_1<T>*& dyn_levelMeter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::dyn_levelMeter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelMeter"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioUtil::LevelMeter_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::dyn_channels");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "channels"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Boolean resampleSource
    [[deprecated("Use field access instead!")]] bool& dyn_resampleSource() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::dyn_resampleSource");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "resampleSource"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector get_VoiceDetector()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::AudioUtil::IVoiceDetector* get_VoiceDetector() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::get_VoiceDetector");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::LocalVoiceAudio_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::AudioUtil::IVoiceDetector*, false>(this, ___internal__method);
    }
    // public Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter get_LevelMeter()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::AudioUtil::ILevelMeter* get_LevelMeter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::get_LevelMeter");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::LocalVoiceAudio_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::AudioUtil::ILevelMeter*, false>(this, ___internal__method);
    }
    // public System.Boolean get_VoiceDetectorCalibrating()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_VoiceDetectorCalibrating() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::get_VoiceDetectorCalibrating");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::LocalVoiceAudio_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // System.Void .ctor(Photon.Voice.VoiceClient voiceClient, Photon.Voice.IEncoder encoder, System.Byte id, Photon.Voice.VoiceInfo voiceInfo, Photon.Voice.IAudioDesc audioSourceDesc, System.Int32 channelId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalVoiceAudio_1<T>* New_ctor(::Photon::Voice::VoiceClient* voiceClient, ::Photon::Voice::IEncoder* encoder, uint8_t id, ::Photon::Voice::VoiceInfo voiceInfo, ::Photon::Voice::IAudioDesc* audioSourceDesc, int channelId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalVoiceAudio_1<T>*, creationType>(voiceClient, encoder, id, voiceInfo, audioSourceDesc, channelId)));
    }
    // static public Photon.Voice.LocalVoiceAudio`1<T> Create(Photon.Voice.VoiceClient voiceClient, System.Byte voiceId, Photon.Voice.IEncoder encoder, Photon.Voice.VoiceInfo voiceInfo, Photon.Voice.IAudioDesc audioSourceDesc, System.Int32 channelId)
    // Offset: 0xFFFFFFFFFFFFFFFF
    static ::Photon::Voice::LocalVoiceAudio_1<T>* Create(::Photon::Voice::VoiceClient* voiceClient, uint8_t voiceId, ::Photon::Voice::IEncoder* encoder, ::Photon::Voice::VoiceInfo voiceInfo, ::Photon::Voice::IAudioDesc* audioSourceDesc, int channelId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::Create");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LocalVoiceAudio_1<T>*>::get(), "Create", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(voiceClient), ::il2cpp_utils::ExtractType(voiceId), ::il2cpp_utils::ExtractType(encoder), ::il2cpp_utils::ExtractType(voiceInfo), ::il2cpp_utils::ExtractType(audioSourceDesc), ::il2cpp_utils::ExtractType(channelId)})));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::LocalVoiceAudio_1<T>*, false>(static_cast<Il2CppObject*>(nullptr), ___internal__method, voiceClient, voiceId, encoder, voiceInfo, audioSourceDesc, channelId);
    }
    // public System.Void VoiceDetectorCalibrate(System.Int32 durationMs, System.Action`1<System.Single> onCalibrated)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void VoiceDetectorCalibrate(int durationMs, ::System::Action_1<float>* onCalibrated) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::VoiceDetectorCalibrate");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::LocalVoiceAudio_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, durationMs, onCalibrated);
    }
    // protected System.Void initBuiltinProcessors()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void initBuiltinProcessors() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceAudio_1::initBuiltinProcessors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "initBuiltinProcessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.LocalVoiceAudio`1
  // Could not write size check! Type: Photon.Voice.LocalVoiceAudio`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
