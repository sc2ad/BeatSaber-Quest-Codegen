// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.LocalVoice
#include "Photon/Voice/LocalVoice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: VoiceClient
  class VoiceClient;
  // Forward declaring type: IEncoder
  class IEncoder;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoiceFramedBase
  class LocalVoiceFramedBase;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::LocalVoiceFramedBase);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::LocalVoiceFramedBase*, "Photon.Voice", "LocalVoiceFramedBase");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.LocalVoiceFramedBase
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalVoiceFramedBase : public ::Photon::Voice::LocalVoice {
    public:
    public:
    // private System.Int32 <FrameSize>k__BackingField
    // Size: 0x4
    // Offset: 0xB8
    int FrameSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return FrameSize;
    }
    // Get instance field reference: private System.Int32 <FrameSize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$FrameSize$k__BackingField();
    // public System.Int32 get_FrameSize()
    // Offset: 0x11671BC
    int get_FrameSize();
    // private System.Void set_FrameSize(System.Int32 value)
    // Offset: 0x11671C4
    void set_FrameSize(int value);
    // System.Void .ctor(Photon.Voice.VoiceClient voiceClient, Photon.Voice.IEncoder encoder, System.Byte id, Photon.Voice.VoiceInfo voiceInfo, System.Int32 channelId, System.Int32 frameSize)
    // Offset: 0x11671CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalVoiceFramedBase* New_ctor(::Photon::Voice::VoiceClient* voiceClient, ::Photon::Voice::IEncoder* encoder, uint8_t id, ::Photon::Voice::VoiceInfo voiceInfo, int channelId, int frameSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramedBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalVoiceFramedBase*, creationType>(voiceClient, encoder, id, voiceInfo, channelId, frameSize)));
    }
  }; // Photon.Voice.LocalVoiceFramedBase
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceFramedBase::get_FrameSize
// Il2CppName: get_FrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::LocalVoiceFramedBase::*)()>(&Photon::Voice::LocalVoiceFramedBase::get_FrameSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceFramedBase*), "get_FrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceFramedBase::set_FrameSize
// Il2CppName: set_FrameSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::LocalVoiceFramedBase::*)(int)>(&Photon::Voice::LocalVoiceFramedBase::set_FrameSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::LocalVoiceFramedBase*), "set_FrameSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::LocalVoiceFramedBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
