// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Photon.Voice.FrameFlags
#include "Photon/Voice/FrameFlags.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: FrameBuffer
  struct FrameBuffer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::FrameBuffer, "Photon.Voice", "FrameBuffer");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x32
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.FrameBuffer
  // [TokenAttribute] Offset: FFFFFFFF
  struct FrameBuffer/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Byte[] array
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<uint8_t> array;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // private readonly System.Int32 offset
    // Size: 0x4
    // Offset: 0x8
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 count
    // Size: 0x4
    // Offset: 0xC
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.IDisposable disposer
    // Size: 0x8
    // Offset: 0x10
    ::System::IDisposable* disposer;
    // Field size check
    static_assert(sizeof(::System::IDisposable*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x18
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: refCnt
    char __padding4[0x3] = {};
    // private System.Int32 refCnt
    // Size: 0x4
    // Offset: 0x1C
    int refCnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Runtime.InteropServices.GCHandle gcHandle
    // Size: 0x4
    // Offset: 0x20
    ::System::Runtime::InteropServices::GCHandle gcHandle;
    // Field size check
    static_assert(sizeof(::System::Runtime::InteropServices::GCHandle) == 0x4);
    // Padding between fields: gcHandle and: ptr
    char __padding6[0x4] = {};
    // private System.IntPtr ptr
    // Size: 0x8
    // Offset: 0x28
    ::System::IntPtr ptr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private System.Boolean pinned
    // Size: 0x1
    // Offset: 0x30
    bool pinned;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly Photon.Voice.FrameFlags <Flags>k__BackingField
    // Size: 0x1
    // Offset: 0x31
    ::Photon::Voice::FrameFlags Flags;
    // Field size check
    static_assert(sizeof(::Photon::Voice::FrameFlags) == 0x1);
    public:
    // Creating value type constructor for type: FrameBuffer
    constexpr FrameBuffer(::ArrayW<uint8_t> array_ = ::ArrayW<uint8_t>(static_cast<void*>(nullptr)), int offset_ = {}, int count_ = {}, ::System::IDisposable* disposer_ = {}, bool disposed_ = {}, int refCnt_ = {}, ::System::Runtime::InteropServices::GCHandle gcHandle_ = {}, ::System::IntPtr ptr_ = {}, bool pinned_ = {}, ::Photon::Voice::FrameFlags Flags_ = {}) noexcept : array{array_}, offset{offset_}, count{count_}, disposer{disposer_}, disposed{disposed_}, refCnt{refCnt_}, gcHandle{gcHandle_}, ptr{ptr_}, pinned{pinned_}, Flags{Flags_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get static field: static System.Int32 statDisposerCreated
    static int _get_statDisposerCreated();
    // Set static field: static System.Int32 statDisposerCreated
    static void _set_statDisposerCreated(int value);
    // Get static field: static System.Int32 statDisposerDisposed
    static int _get_statDisposerDisposed();
    // Set static field: static System.Int32 statDisposerDisposed
    static void _set_statDisposerDisposed(int value);
    // Get static field: static System.Int32 statPinned
    static int _get_statPinned();
    // Set static field: static System.Int32 statPinned
    static void _set_statPinned(int value);
    // Get static field: static System.Int32 statUnpinned
    static int _get_statUnpinned();
    // Set static field: static System.Int32 statUnpinned
    static void _set_statUnpinned(int value);
    // Get instance field reference: private readonly System.Byte[] array
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_array();
    // Get instance field reference: private readonly System.Int32 offset
    [[deprecated("Use field access instead!")]] int& dyn_offset();
    // Get instance field reference: private readonly System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: private readonly System.IDisposable disposer
    [[deprecated("Use field access instead!")]] ::System::IDisposable*& dyn_disposer();
    // Get instance field reference: private System.Boolean disposed
    [[deprecated("Use field access instead!")]] bool& dyn_disposed();
    // Get instance field reference: private System.Int32 refCnt
    [[deprecated("Use field access instead!")]] int& dyn_refCnt();
    // Get instance field reference: private System.Runtime.InteropServices.GCHandle gcHandle
    [[deprecated("Use field access instead!")]] ::System::Runtime::InteropServices::GCHandle& dyn_gcHandle();
    // Get instance field reference: private System.IntPtr ptr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_ptr();
    // Get instance field reference: private System.Boolean pinned
    [[deprecated("Use field access instead!")]] bool& dyn_pinned();
    // Get instance field reference: private readonly Photon.Voice.FrameFlags <Flags>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::FrameFlags& dyn_$Flags$k__BackingField();
    // public System.IntPtr get_Ptr()
    // Offset: 0xA54C8C
    ::System::IntPtr get_Ptr();
    // public System.Byte[] get_Array()
    // Offset: 0xA54CCC
    ::ArrayW<uint8_t> get_Array();
    // public System.Int32 get_Length()
    // Offset: 0xA54CD4
    int get_Length();
    // public System.Int32 get_Offset()
    // Offset: 0xA54CDC
    int get_Offset();
    // public Photon.Voice.FrameFlags get_Flags()
    // Offset: 0xA54CE4
    ::Photon::Voice::FrameFlags get_Flags();
    // public System.Void .ctor(System.Byte[] array, System.Int32 offset, System.Int32 count, Photon.Voice.FrameFlags flags, System.IDisposable disposer)
    // Offset: 0xA54C7C
    FrameBuffer(::ArrayW<uint8_t> array, int offset, int count, ::Photon::Voice::FrameFlags flags, ::System::IDisposable* disposer);
    // public System.Void .ctor(System.Byte[] array, Photon.Voice.FrameFlags flags)
    // Offset: 0xA54C84
    FrameBuffer(::ArrayW<uint8_t> array, ::Photon::Voice::FrameFlags flags);
    // public System.Void Retain()
    // Offset: 0xA54C94
    void Retain();
    // public System.Void Release()
    // Offset: 0xA54CA4
    void Release();
    // private System.Void Dispose()
    // Offset: 0xA54CC4
    void Dispose();
  }; // Photon.Voice.FrameBuffer
  #pragma pack(pop)
  static check_size<sizeof(FrameBuffer), 49 + sizeof(::Photon::Voice::FrameFlags)> __Photon_Voice_FrameBufferSizeCheck;
  static_assert(sizeof(FrameBuffer) == 0x32);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::get_Ptr
// Il2CppName: get_Ptr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::get_Ptr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "get_Ptr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::get_Array
// Il2CppName: get_Array
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::get_Array)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "get_Array", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::get_Length
// Il2CppName: get_Length
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::get_Length)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "get_Length", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::get_Offset
// Il2CppName: get_Offset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::get_Offset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "get_Offset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::get_Flags
// Il2CppName: get_Flags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::FrameFlags (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::get_Flags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "get_Flags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::FrameBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::FrameBuffer
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::Retain
// Il2CppName: Retain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::Retain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "Retain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::Release
// Il2CppName: Release
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::Release)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "Release", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::FrameBuffer::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::FrameBuffer::*)()>(&Photon::Voice::FrameBuffer::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::FrameBuffer), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
