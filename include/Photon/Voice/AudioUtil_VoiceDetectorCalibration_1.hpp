// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
// Including type: Photon.Voice.IProcessor`1
#include "Photon/Voice/IProcessor_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1, "Photon.Voice", "AudioUtil/VoiceDetectorCalibration`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorCalibration`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class AudioUtil::VoiceDetectorCalibration_1 : public ::Il2CppObject/*, public ::Photon::Voice::IProcessor_1<T>*/ {
    public:
    public:
    // private Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector voiceDetector
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioUtil::IVoiceDetector* voiceDetector;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::IVoiceDetector*) == 0x8);
    // private Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter levelMeter
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::AudioUtil::ILevelMeter* levelMeter;
    // Field size check
    static_assert(sizeof(::Photon::Voice::AudioUtil::ILevelMeter*) == 0x8);
    // private System.Int32 valuesPerSec
    // Size: 0x4
    // Offset: 0x0
    int valuesPerSec;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 calibrateCount
    // Size: 0x4
    // Offset: 0x0
    int calibrateCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action`1<System.Single> onCalibrated
    // Size: 0x8
    // Offset: 0x0
    ::System::Action_1<float>* onCalibrated;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IProcessor_1<T>
    operator ::Photon::Voice::IProcessor_1<T>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IProcessor_1<T>*>(this);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector voiceDetector
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::IVoiceDetector*& dyn_voiceDetector() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::dyn_voiceDetector");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "voiceDetector"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioUtil::IVoiceDetector**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter levelMeter
    [[deprecated("Use field access instead!")]] ::Photon::Voice::AudioUtil::ILevelMeter*& dyn_levelMeter() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::dyn_levelMeter");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "levelMeter"))->offset;
      return *reinterpret_cast<::Photon::Voice::AudioUtil::ILevelMeter**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 valuesPerSec
    [[deprecated("Use field access instead!")]] int& dyn_valuesPerSec() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::dyn_valuesPerSec");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "valuesPerSec"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: protected System.Int32 calibrateCount
    [[deprecated("Use field access instead!")]] int& dyn_calibrateCount() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::dyn_calibrateCount");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "calibrateCount"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Action`1<System.Single> onCalibrated
    [[deprecated("Use field access instead!")]] ::System::Action_1<float>*& dyn_onCalibrated() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::dyn_onCalibrated");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "onCalibrated"))->offset;
      return *reinterpret_cast<::System::Action_1<float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Boolean get_IsCalibrating()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_IsCalibrating() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::get_IsCalibrating");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_IsCalibrating", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // public System.Void .ctor(Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector voiceDetector, Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter levelMeter, System.Int32 samplingRate, System.Int32 channels)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioUtil::VoiceDetectorCalibration_1<T>* New_ctor(::Photon::Voice::AudioUtil::IVoiceDetector* voiceDetector, ::Photon::Voice::AudioUtil::ILevelMeter* levelMeter, int samplingRate, int channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioUtil::VoiceDetectorCalibration_1<T>*, creationType>(voiceDetector, levelMeter, samplingRate, channels)));
    }
    // public System.Void Calibrate(System.Int32 durationMs, System.Action`1<System.Single> onCalibrated)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Calibrate(int durationMs, ::System::Action_1<float>* onCalibrated) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::Calibrate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Calibrate", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(durationMs), ::il2cpp_utils::ExtractType(onCalibrated)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, durationMs, onCalibrated);
    }
    // public T[] Process(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> Process(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::Process");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1<T>*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method, buf);
    }
    // public System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::AudioUtil::VoiceDetectorCalibration_1<T>*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorCalibration`1
  // Could not write size check! Type: Photon.Voice.AudioUtil/Photon.Voice.VoiceDetectorCalibration`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
