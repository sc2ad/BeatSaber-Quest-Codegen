// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: Photon.Voice.ImageFormat
#include "Photon/Voice/ImageFormat.hpp"
// Completed includes
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: ImageOutputBuf
  struct ImageOutputBuf;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::ImageOutputBuf, "Photon.Voice", "ImageOutputBuf");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.ImageOutputBuf
  // [TokenAttribute] Offset: FFFFFFFF
  struct ImageOutputBuf/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.IntPtr Buf
    // Size: 0x8
    // Offset: 0x0
    ::System::IntPtr Buf;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.Int32 Width
    // Size: 0x4
    // Offset: 0x8
    int Width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Height
    // Size: 0x4
    // Offset: 0xC
    int Height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 Stride
    // Size: 0x4
    // Offset: 0x10
    int Stride;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public Photon.Voice.ImageFormat ImageFormat
    // Size: 0x4
    // Offset: 0x14
    ::Photon::Voice::ImageFormat ImageFormat;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ImageFormat) == 0x4);
    public:
    // Creating value type constructor for type: ImageOutputBuf
    constexpr ImageOutputBuf(::System::IntPtr Buf_ = {}, int Width_ = {}, int Height_ = {}, int Stride_ = {}, ::Photon::Voice::ImageFormat ImageFormat_ = {}) noexcept : Buf{Buf_}, Width{Width_}, Height{Height_}, Stride{Stride_}, ImageFormat{ImageFormat_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.IntPtr Buf
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_Buf();
    // Get instance field reference: public System.Int32 Width
    [[deprecated("Use field access instead!")]] int& dyn_Width();
    // Get instance field reference: public System.Int32 Height
    [[deprecated("Use field access instead!")]] int& dyn_Height();
    // Get instance field reference: public System.Int32 Stride
    [[deprecated("Use field access instead!")]] int& dyn_Stride();
    // Get instance field reference: public Photon.Voice.ImageFormat ImageFormat
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ImageFormat& dyn_ImageFormat();
  }; // Photon.Voice.ImageOutputBuf
  #pragma pack(pop)
  static check_size<sizeof(ImageOutputBuf), 20 + sizeof(::Photon::Voice::ImageFormat)> __Photon_Voice_ImageOutputBufSizeCheck;
  static_assert(sizeof(ImageOutputBuf) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
