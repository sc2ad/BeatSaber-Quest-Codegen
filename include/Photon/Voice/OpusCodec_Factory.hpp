// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.OpusCodec
#include "Photon/Voice/OpusCodec.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IEncoder
  class IEncoder;
  // Forward declaring type: ILogger
  class ILogger;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::OpusCodec::Factory);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::OpusCodec::Factory*, "Photon.Voice", "OpusCodec/Factory");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.OpusCodec/Photon.Voice.Factory
  // [TokenAttribute] Offset: FFFFFFFF
  class OpusCodec::Factory : public ::Il2CppObject {
    public:
    // static public Photon.Voice.IEncoder CreateEncoder(Photon.Voice.VoiceInfo i, Photon.Voice.ILogger logger)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class B>
    static ::Photon::Voice::IEncoder* CreateEncoder(::Photon::Voice::VoiceInfo i, ::Photon::Voice::ILogger* logger) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::OpusCodec::Factory::CreateEncoder");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("Photon.Voice", "OpusCodec/Factory", "CreateEncoder", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<B>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(i), ::il2cpp_utils::ExtractType(logger)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<B>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::IEncoder*, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, i, logger);
    }
  }; // Photon.Voice.OpusCodec/Photon.Voice.Factory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::OpusCodec::Factory::CreateEncoder
// Il2CppName: CreateEncoder
// Cannot write MetadataGetter for generic methods!
