// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Voice.Unity.ILoggableDependent
#include "Photon/Voice/Unity/ILoggableDependent.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceLogger
  class VoiceLogger;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceComponent
  class VoiceComponent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::VoiceComponent);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::VoiceComponent*, "Photon.Voice.Unity", "VoiceComponent");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x22
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.VoiceComponent
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 9559AC
  class VoiceComponent : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Voice::Unity::ILoggableDependent*/ {
    public:
    public:
    // private Photon.Voice.Unity.VoiceLogger logger
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Voice::Unity::VoiceLogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::VoiceLogger*) == 0x8);
    // protected ExitGames.Client.Photon.DebugLevel logLevel
    // Size: 0x1
    // Offset: 0x20
    ::ExitGames::Client::Photon::DebugLevel logLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // private System.Boolean ignoreGlobalLogLevel
    // Size: 0x1
    // Offset: 0x21
    bool ignoreGlobalLogLevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::Unity::ILoggableDependent
    operator ::Photon::Voice::Unity::ILoggableDependent() noexcept {
      return *reinterpret_cast<::Photon::Voice::Unity::ILoggableDependent*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.String currentPlatform
    static ::StringW _get_currentPlatform();
    // Set static field: static private System.String currentPlatform
    static void _set_currentPlatform(::StringW value);
    // Get instance field reference: private Photon.Voice.Unity.VoiceLogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::VoiceLogger*& dyn_logger();
    // Get instance field reference: protected ExitGames.Client.Photon.DebugLevel logLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_logLevel();
    // Get instance field reference: private System.Boolean ignoreGlobalLogLevel
    [[deprecated("Use field access instead!")]] bool& dyn_ignoreGlobalLogLevel();
    // public Photon.Voice.Unity.VoiceLogger get_Logger()
    // Offset: 0x1036CAC
    ::Photon::Voice::Unity::VoiceLogger* get_Logger();
    // protected System.Void set_Logger(Photon.Voice.Unity.VoiceLogger value)
    // Offset: 0x1048F54
    void set_Logger(::Photon::Voice::Unity::VoiceLogger* value);
    // public ExitGames.Client.Photon.DebugLevel get_LogLevel()
    // Offset: 0x1048F5C
    ::ExitGames::Client::Photon::DebugLevel get_LogLevel();
    // public System.Void set_LogLevel(ExitGames.Client.Photon.DebugLevel value)
    // Offset: 0x103C2EC
    void set_LogLevel(::ExitGames::Client::Photon::DebugLevel value);
    // public System.Boolean get_IgnoreGlobalLogLevel()
    // Offset: 0x1048FA0
    bool get_IgnoreGlobalLogLevel();
    // public System.Void set_IgnoreGlobalLogLevel(System.Boolean value)
    // Offset: 0x1048FA8
    void set_IgnoreGlobalLogLevel(bool value);
    // static public System.String get_CurrentPlatform()
    // Offset: 0x103717C
    static ::StringW get_CurrentPlatform();
    // protected System.Void .ctor()
    // Offset: 0x1040DC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceComponent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::VoiceComponent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceComponent*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1044C9C
    void Awake();
  }; // Photon.Voice.Unity.VoiceComponent
  #pragma pack(pop)
  static check_size<sizeof(VoiceComponent), 33 + sizeof(bool)> __Photon_Voice_Unity_VoiceComponentSizeCheck;
  static_assert(sizeof(VoiceComponent) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::get_Logger
// Il2CppName: get_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::VoiceLogger* (Photon::Voice::Unity::VoiceComponent::*)()>(&Photon::Voice::Unity::VoiceComponent::get_Logger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "get_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::set_Logger
// Il2CppName: set_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceComponent::*)(::Photon::Voice::Unity::VoiceLogger*)>(&Photon::Voice::Unity::VoiceComponent::set_Logger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "VoiceLogger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "set_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::get_LogLevel
// Il2CppName: get_LogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (Photon::Voice::Unity::VoiceComponent::*)()>(&Photon::Voice::Unity::VoiceComponent::get_LogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "get_LogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::set_LogLevel
// Il2CppName: set_LogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceComponent::*)(::ExitGames::Client::Photon::DebugLevel)>(&Photon::Voice::Unity::VoiceComponent::set_LogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "set_LogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::get_IgnoreGlobalLogLevel
// Il2CppName: get_IgnoreGlobalLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceComponent::*)()>(&Photon::Voice::Unity::VoiceComponent::get_IgnoreGlobalLogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "get_IgnoreGlobalLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::set_IgnoreGlobalLogLevel
// Il2CppName: set_IgnoreGlobalLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceComponent::*)(bool)>(&Photon::Voice::Unity::VoiceComponent::set_IgnoreGlobalLogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "set_IgnoreGlobalLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::get_CurrentPlatform
// Il2CppName: get_CurrentPlatform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Photon::Voice::Unity::VoiceComponent::get_CurrentPlatform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "get_CurrentPlatform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceComponent::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceComponent::*)()>(&Photon::Voice::Unity::VoiceComponent::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceComponent*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
