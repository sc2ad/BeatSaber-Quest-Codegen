// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity::UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: MicAmplifierFloat
  class MicAmplifierFloat;
  // Forward declaring type: MicAmplifierShort
  class MicAmplifierShort;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: PhotonVoiceCreatedParams
  class PhotonVoiceCreatedParams;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: MicAmplifier
  class MicAmplifier;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UtilityScripts::MicAmplifier);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UtilityScripts::MicAmplifier*, "Photon.Voice.Unity.UtilityScripts", "MicAmplifier");
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UtilityScripts.MicAmplifier
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 955B2C
  class MicAmplifier : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Writing base type padding for base size: 0x22 to desired offset: 0x24
    char ___base_padding[0x2] = {};
    public:
    // private System.Single boostValue
    // Size: 0x4
    // Offset: 0x24
    float boostValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single amplificationFactor
    // Size: 0x4
    // Offset: 0x28
    float amplificationFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: amplificationFactor and: floatProcessor
    char __padding1[0x4] = {};
    // private Photon.Voice.Unity.UtilityScripts.MicAmplifierFloat floatProcessor
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat* floatProcessor;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*) == 0x8);
    // private Photon.Voice.Unity.UtilityScripts.MicAmplifierShort shortProcessor
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::Unity::UtilityScripts::MicAmplifierShort* shortProcessor;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::UtilityScripts::MicAmplifierShort*) == 0x8);
    public:
    // Get instance field reference: private System.Single boostValue
    [[deprecated("Use field access instead!")]] float& dyn_boostValue();
    // Get instance field reference: private System.Single amplificationFactor
    [[deprecated("Use field access instead!")]] float& dyn_amplificationFactor();
    // Get instance field reference: private Photon.Voice.Unity.UtilityScripts.MicAmplifierFloat floatProcessor
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*& dyn_floatProcessor();
    // Get instance field reference: private Photon.Voice.Unity.UtilityScripts.MicAmplifierShort shortProcessor
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::UtilityScripts::MicAmplifierShort*& dyn_shortProcessor();
    // public System.Single get_AmplificationFactor()
    // Offset: 0x1044248
    float get_AmplificationFactor();
    // public System.Void set_AmplificationFactor(System.Single value)
    // Offset: 0x1044250
    void set_AmplificationFactor(float value);
    // public System.Single get_BoostValue()
    // Offset: 0x10442B0
    float get_BoostValue();
    // public System.Void set_BoostValue(System.Single value)
    // Offset: 0x10442B8
    void set_BoostValue(float value);
    // private System.Void OnEnable()
    // Offset: 0x1044318
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x1044334
    void OnDisable();
    // private System.Void PhotonVoiceCreated(Photon.Voice.Unity.PhotonVoiceCreatedParams p)
    // Offset: 0x1044358
    void PhotonVoiceCreated(::Photon::Voice::Unity::PhotonVoiceCreatedParams* p);
    // public System.Void .ctor()
    // Offset: 0x1044724
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicAmplifier* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UtilityScripts::MicAmplifier::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicAmplifier*, creationType>()));
    }
  }; // Photon.Voice.Unity.UtilityScripts.MicAmplifier
  #pragma pack(pop)
  static check_size<sizeof(MicAmplifier), 56 + sizeof(::Photon::Voice::Unity::UtilityScripts::MicAmplifierShort*)> __Photon_Voice_Unity_UtilityScripts_MicAmplifierSizeCheck;
  static_assert(sizeof(MicAmplifier) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::get_AmplificationFactor
// Il2CppName: get_AmplificationFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::get_AmplificationFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "get_AmplificationFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::set_AmplificationFactor
// Il2CppName: set_AmplificationFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)(float)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::set_AmplificationFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "set_AmplificationFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::get_BoostValue
// Il2CppName: get_BoostValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::get_BoostValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "get_BoostValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::set_BoostValue
// Il2CppName: set_BoostValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)(float)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::set_BoostValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "set_BoostValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::PhotonVoiceCreated
// Il2CppName: PhotonVoiceCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifier::*)(::Photon::Voice::Unity::PhotonVoiceCreatedParams*)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifier::PhotonVoiceCreated)> {
  static const MethodInfo* get() {
    static auto* p = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "PhotonVoiceCreatedParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifier*), "PhotonVoiceCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{p});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifier::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
