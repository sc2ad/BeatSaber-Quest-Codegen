// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: MicrophonePermission
  class MicrophonePermission;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UtilityScripts::MicrophonePermission);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UtilityScripts::MicrophonePermission*, "Photon.Voice.Unity.UtilityScripts", "MicrophonePermission");
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Size: 0x33
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UtilityScripts.MicrophonePermission
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 955B90
  class MicrophonePermission : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Writing base type padding for base size: 0x22 to desired offset: 0x28
    char ___base_padding[0x6] = {};
    public:
    // private Photon.Voice.Unity.Recorder recorder
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Voice::Unity::Recorder* recorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private System.Boolean isRequesting
    // Size: 0x1
    // Offset: 0x30
    bool isRequesting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasPermission
    // Size: 0x1
    // Offset: 0x31
    bool hasPermission;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean autoStart
    // Size: 0x1
    // Offset: 0x32
    bool autoStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static private System.Action`1<System.Boolean> MicrophonePermissionCallback
    static ::System::Action_1<bool>* _get_MicrophonePermissionCallback();
    // Set static field: static private System.Action`1<System.Boolean> MicrophonePermissionCallback
    static void _set_MicrophonePermissionCallback(::System::Action_1<bool>* value);
    // Get instance field reference: private Photon.Voice.Unity.Recorder recorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_recorder();
    // Get instance field reference: private System.Boolean isRequesting
    [[deprecated("Use field access instead!")]] bool& dyn_isRequesting();
    // Get instance field reference: private System.Boolean hasPermission
    [[deprecated("Use field access instead!")]] bool& dyn_hasPermission();
    // Get instance field reference: private System.Boolean autoStart
    [[deprecated("Use field access instead!")]] bool& dyn_autoStart();
    // public System.Boolean get_HasPermission()
    // Offset: 0x1044A98
    bool get_HasPermission();
    // private System.Void set_HasPermission(System.Boolean value)
    // Offset: 0x1044AA0
    void set_HasPermission(bool value);
    // static public System.Void add_MicrophonePermissionCallback(System.Action`1<System.Boolean> value)
    // Offset: 0x1044930
    static void add_MicrophonePermissionCallback(::System::Action_1<bool>* value);
    // static public System.Void remove_MicrophonePermissionCallback(System.Action`1<System.Boolean> value)
    // Offset: 0x10449E4
    static void remove_MicrophonePermissionCallback(::System::Action_1<bool>* value);
    // public System.Void InitVoice()
    // Offset: 0x1044D74
    void InitVoice();
    // private System.Void OnApplicationFocus(System.Boolean focus)
    // Offset: 0x1044EC4
    void OnApplicationFocus(bool focus);
    // public System.Void .ctor()
    // Offset: 0x1044F50
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicrophonePermission* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UtilityScripts::MicrophonePermission::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicrophonePermission*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x1044C20
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::Awake()
    void Awake();
  }; // Photon.Voice.Unity.UtilityScripts.MicrophonePermission
  #pragma pack(pop)
  static check_size<sizeof(MicrophonePermission), 50 + sizeof(bool)> __Photon_Voice_Unity_UtilityScripts_MicrophonePermissionSizeCheck;
  static_assert(sizeof(MicrophonePermission) == 0x33);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::get_HasPermission
// Il2CppName: get_HasPermission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::UtilityScripts::MicrophonePermission::*)()>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::get_HasPermission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "get_HasPermission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::set_HasPermission
// Il2CppName: set_HasPermission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicrophonePermission::*)(bool)>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::set_HasPermission)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "set_HasPermission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::add_MicrophonePermissionCallback
// Il2CppName: add_MicrophonePermissionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<bool>*)>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::add_MicrophonePermissionCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "add_MicrophonePermissionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::remove_MicrophonePermissionCallback
// Il2CppName: remove_MicrophonePermissionCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Action_1<bool>*)>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::remove_MicrophonePermissionCallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "remove_MicrophonePermissionCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::InitVoice
// Il2CppName: InitVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicrophonePermission::*)()>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::InitVoice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "InitVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicrophonePermission::*)(bool)>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* focus = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focus});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicrophonePermission::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicrophonePermission::*)()>(&Photon::Voice::Unity::UtilityScripts::MicrophonePermission::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicrophonePermission*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
