// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IProcessor`1
#include "Photon/Voice/IProcessor_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: MicAmplifierFloat
  class MicAmplifierFloat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*, "Photon.Voice.Unity.UtilityScripts", "MicAmplifierFloat");
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UtilityScripts.MicAmplifierFloat
  // [TokenAttribute] Offset: FFFFFFFF
  class MicAmplifierFloat : public ::Il2CppObject/*, public ::Photon::Voice::IProcessor_1<float>*/ {
    public:
    public:
    // private System.Single <AmplificationFactor>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float AmplificationFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <BoostValue>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    float BoostValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <MaxBefore>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float MaxBefore;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <MaxAfter>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float MaxAfter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <Disabled>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool Disabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IProcessor_1<float>
    operator ::Photon::Voice::IProcessor_1<float>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IProcessor_1<float>*>(this);
    }
    // Get instance field reference: private System.Single <AmplificationFactor>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$AmplificationFactor$k__BackingField();
    // Get instance field reference: private System.Single <BoostValue>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$BoostValue$k__BackingField();
    // Get instance field reference: private System.Single <MaxBefore>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MaxBefore$k__BackingField();
    // Get instance field reference: private System.Single <MaxAfter>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$MaxAfter$k__BackingField();
    // Get instance field reference: private System.Boolean <Disabled>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$Disabled$k__BackingField();
    // public System.Single get_AmplificationFactor()
    // Offset: 0x104473C
    float get_AmplificationFactor();
    // public System.Void set_AmplificationFactor(System.Single value)
    // Offset: 0x1044744
    void set_AmplificationFactor(float value);
    // public System.Single get_BoostValue()
    // Offset: 0x104474C
    float get_BoostValue();
    // public System.Void set_BoostValue(System.Single value)
    // Offset: 0x1044754
    void set_BoostValue(float value);
    // public System.Single get_MaxBefore()
    // Offset: 0x104475C
    float get_MaxBefore();
    // private System.Void set_MaxBefore(System.Single value)
    // Offset: 0x1044764
    void set_MaxBefore(float value);
    // public System.Single get_MaxAfter()
    // Offset: 0x104476C
    float get_MaxAfter();
    // private System.Void set_MaxAfter(System.Single value)
    // Offset: 0x1044774
    void set_MaxAfter(float value);
    // public System.Boolean get_Disabled()
    // Offset: 0x104477C
    bool get_Disabled();
    // public System.Void set_Disabled(System.Boolean value)
    // Offset: 0x1044784
    void set_Disabled(bool value);
    // public System.Void .ctor(System.Single amplificationFactor, System.Single boostValue)
    // Offset: 0x10446B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicAmplifierFloat* New_ctor(float amplificationFactor, float boostValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicAmplifierFloat*, creationType>(amplificationFactor, boostValue)));
    }
    // public System.Single[] Process(System.Single[] buf)
    // Offset: 0x1044790
    ::ArrayW<float> Process(::ArrayW<float> buf);
    // public System.Void Dispose()
    // Offset: 0x1044834
    void Dispose();
  }; // Photon.Voice.Unity.UtilityScripts.MicAmplifierFloat
  #pragma pack(pop)
  static check_size<sizeof(MicAmplifierFloat), 32 + sizeof(bool)> __Photon_Voice_Unity_UtilityScripts_MicAmplifierFloatSizeCheck;
  static_assert(sizeof(MicAmplifierFloat) == 0x21);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_AmplificationFactor
// Il2CppName: get_AmplificationFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_AmplificationFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "get_AmplificationFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_AmplificationFactor
// Il2CppName: set_AmplificationFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)(float)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_AmplificationFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "set_AmplificationFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_BoostValue
// Il2CppName: get_BoostValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_BoostValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "get_BoostValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_BoostValue
// Il2CppName: set_BoostValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)(float)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_BoostValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "set_BoostValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_MaxBefore
// Il2CppName: get_MaxBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_MaxBefore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "get_MaxBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_MaxBefore
// Il2CppName: set_MaxBefore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)(float)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_MaxBefore)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "set_MaxBefore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_MaxAfter
// Il2CppName: get_MaxAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_MaxAfter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "get_MaxAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_MaxAfter
// Il2CppName: set_MaxAfter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)(float)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_MaxAfter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "set_MaxAfter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_Disabled
// Il2CppName: get_Disabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::get_Disabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "get_Disabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_Disabled
// Il2CppName: set_Disabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)(bool)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::set_Disabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "set_Disabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)(::ArrayW<float>)>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::Process)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::*)()>(&Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::MicAmplifierFloat*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
