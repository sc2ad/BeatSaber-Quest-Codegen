// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PhotonPeer
  class PhotonPeer;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceConnection
  class VoiceConnection;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: VoiceClient
  class VoiceClient;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: PhotonVoiceStatsGui
  class PhotonVoiceStatsGui;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui*, "Photon.Voice.Unity.UtilityScripts", "PhotonVoiceStatsGui");
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UtilityScripts.PhotonVoiceStatsGui
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonVoiceStatsGui : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Boolean statsWindowOn
    // Size: 0x1
    // Offset: 0x18
    bool statsWindowOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean statsOn
    // Size: 0x1
    // Offset: 0x19
    bool statsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean healthStatsVisible
    // Size: 0x1
    // Offset: 0x1A
    bool healthStatsVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean trafficStatsOn
    // Size: 0x1
    // Offset: 0x1B
    bool trafficStatsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean buttonsOn
    // Size: 0x1
    // Offset: 0x1C
    bool buttonsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean voiceStatsOn
    // Size: 0x1
    // Offset: 0x1D
    bool voiceStatsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: voiceStatsOn and: statsRect
    char __padding5[0x2] = {};
    // private UnityEngine.Rect statsRect
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Rect statsRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private System.Int32 windowId
    // Size: 0x4
    // Offset: 0x30
    int windowId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: windowId and: peer
    char __padding7[0x4] = {};
    // private ExitGames.Client.Photon.PhotonPeer peer
    // Size: 0x8
    // Offset: 0x38
    ::ExitGames::Client::Photon::PhotonPeer* peer;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::PhotonPeer*) == 0x8);
    // private Photon.Voice.Unity.VoiceConnection voiceConnection
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Voice::Unity::VoiceConnection* voiceConnection;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::VoiceConnection*) == 0x8);
    // private Photon.Voice.VoiceClient voiceClient
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Voice::VoiceClient* voiceClient;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceClient*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Boolean statsWindowOn
    [[deprecated("Use field access instead!")]] bool& dyn_statsWindowOn();
    // Get instance field reference: private System.Boolean statsOn
    [[deprecated("Use field access instead!")]] bool& dyn_statsOn();
    // Get instance field reference: private System.Boolean healthStatsVisible
    [[deprecated("Use field access instead!")]] bool& dyn_healthStatsVisible();
    // Get instance field reference: private System.Boolean trafficStatsOn
    [[deprecated("Use field access instead!")]] bool& dyn_trafficStatsOn();
    // Get instance field reference: private System.Boolean buttonsOn
    [[deprecated("Use field access instead!")]] bool& dyn_buttonsOn();
    // Get instance field reference: private System.Boolean voiceStatsOn
    [[deprecated("Use field access instead!")]] bool& dyn_voiceStatsOn();
    // Get instance field reference: private UnityEngine.Rect statsRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_statsRect();
    // Get instance field reference: private System.Int32 windowId
    [[deprecated("Use field access instead!")]] int& dyn_windowId();
    // Get instance field reference: private ExitGames.Client.Photon.PhotonPeer peer
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::PhotonPeer*& dyn_peer();
    // Get instance field reference: private Photon.Voice.Unity.VoiceConnection voiceConnection
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::VoiceConnection*& dyn_voiceConnection();
    // Get instance field reference: private Photon.Voice.VoiceClient voiceClient
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceClient*& dyn_voiceClient();
    // public System.Void .ctor()
    // Offset: 0x1047748
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonVoiceStatsGui* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonVoiceStatsGui*, creationType>()));
    }
    // private System.Void OnEnable()
    // Offset: 0x1045D9C
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x1045FA4
    void Update();
    // private System.Void OnGUI()
    // Offset: 0x1045FF4
    void OnGUI();
    // private System.Void TrafficStatsWindow(System.Int32 windowId)
    // Offset: 0x1046194
    void TrafficStatsWindow(int windowId);
  }; // Photon.Voice.Unity.UtilityScripts.PhotonVoiceStatsGui
  #pragma pack(pop)
  static check_size<sizeof(PhotonVoiceStatsGui), 72 + sizeof(::Photon::Voice::VoiceClient*)> __Photon_Voice_Unity_UtilityScripts_PhotonVoiceStatsGuiSizeCheck;
  static_assert(sizeof(PhotonVoiceStatsGui) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::*)()>(&Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::*)()>(&Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::*)()>(&Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::TrafficStatsWindow
// Il2CppName: TrafficStatsWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::*)(int)>(&Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui::TrafficStatsWindow)> {
  static const MethodInfo* get() {
    static auto* windowId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::PhotonVoiceStatsGui*), "TrafficStatsWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowId});
  }
};
