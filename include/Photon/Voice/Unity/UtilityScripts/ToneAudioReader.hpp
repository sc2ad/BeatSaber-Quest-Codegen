// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IAudioReader`1
#include "Photon/Voice/IAudioReader_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: ToneAudioReader
  class ToneAudioReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UtilityScripts::ToneAudioReader);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UtilityScripts::ToneAudioReader*, "Photon.Voice.Unity.UtilityScripts", "ToneAudioReader");
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UtilityScripts.ToneAudioReader
  // [TokenAttribute] Offset: FFFFFFFF
  class ToneAudioReader : public ::Il2CppObject/*, public ::Photon::Voice::IAudioReader_1<float>*/ {
    public:
    public:
    // private System.Double k
    // Size: 0x8
    // Offset: 0x10
    double k;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private System.Int64 timeSamples
    // Size: 0x8
    // Offset: 0x18
    int64_t timeSamples;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioReader_1<float>
    operator ::Photon::Voice::IAudioReader_1<float>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioReader_1<float>*>(this);
    }
    // Get instance field reference: private System.Double k
    [[deprecated("Use field access instead!")]] double& dyn_k();
    // Get instance field reference: private System.Int64 timeSamples
    [[deprecated("Use field access instead!")]] int64_t& dyn_timeSamples();
    // public System.Int32 get_Channels()
    // Offset: 0x1048CC8
    int get_Channels();
    // public System.Int32 get_SamplingRate()
    // Offset: 0x1048CC0
    int get_SamplingRate();
    // public System.String get_Error()
    // Offset: 0x1048CD0
    ::StringW get_Error();
    // public System.Void .ctor()
    // Offset: 0x1048C88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ToneAudioReader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UtilityScripts::ToneAudioReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ToneAudioReader*, creationType>()));
    }
    // public System.Void Dispose()
    // Offset: 0x1048CD8
    void Dispose();
    // public System.Boolean Read(System.Single[] buf)
    // Offset: 0x1048CDC
    bool Read(::ArrayW<float> buf);
  }; // Photon.Voice.Unity.UtilityScripts.ToneAudioReader
  #pragma pack(pop)
  static check_size<sizeof(ToneAudioReader), 24 + sizeof(int64_t)> __Photon_Voice_Unity_UtilityScripts_ToneAudioReaderSizeCheck;
  static_assert(sizeof(ToneAudioReader) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::ToneAudioReader::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::UtilityScripts::ToneAudioReader::*)()>(&Photon::Voice::Unity::UtilityScripts::ToneAudioReader::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::ToneAudioReader*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::ToneAudioReader::get_SamplingRate
// Il2CppName: get_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::UtilityScripts::ToneAudioReader::*)()>(&Photon::Voice::Unity::UtilityScripts::ToneAudioReader::get_SamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::ToneAudioReader*), "get_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::ToneAudioReader::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::UtilityScripts::ToneAudioReader::*)()>(&Photon::Voice::Unity::UtilityScripts::ToneAudioReader::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::ToneAudioReader*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::ToneAudioReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::ToneAudioReader::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::ToneAudioReader::*)()>(&Photon::Voice::Unity::UtilityScripts::ToneAudioReader::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::ToneAudioReader*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::ToneAudioReader::Read
// Il2CppName: Read
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::UtilityScripts::ToneAudioReader::*)(::ArrayW<float>)>(&Photon::Voice::Unity::UtilityScripts::ToneAudioReader::Read)> {
  static const MethodInfo* get() {
    static auto* buf = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::ToneAudioReader*), "Read", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buf});
  }
};
