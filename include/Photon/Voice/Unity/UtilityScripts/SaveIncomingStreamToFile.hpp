// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity::UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceConnection
  class VoiceConnection;
  // Forward declaring type: Speaker
  class Speaker;
  // Forward declaring type: RemoteVoiceLink
  class RemoteVoiceLink;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Forward declaring type: SaveIncomingStreamToFile
  class SaveIncomingStreamToFile;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile*, "Photon.Voice.Unity.UtilityScripts", "SaveIncomingStreamToFile");
// Type namespace: Photon.Voice.Unity.UtilityScripts
namespace Photon::Voice::Unity::UtilityScripts {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UtilityScripts.SaveIncomingStreamToFile
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 955C58
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class SaveIncomingStreamToFile : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Writing base type padding for base size: 0x22 to desired offset: 0x28
    char ___base_padding[0x6] = {};
    // Nested type: ::Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::$$c__DisplayClass5_0
    class $$c__DisplayClass5_0;
    public:
    // private Photon.Voice.Unity.VoiceConnection voiceConnection
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Voice::Unity::VoiceConnection* voiceConnection;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::VoiceConnection*) == 0x8);
    // private System.Boolean muteLocalSpeaker
    // Size: 0x1
    // Offset: 0x30
    bool muteLocalSpeaker;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Photon.Voice.Unity.VoiceConnection voiceConnection
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::VoiceConnection*& dyn_voiceConnection();
    // Get instance field reference: private System.Boolean muteLocalSpeaker
    [[deprecated("Use field access instead!")]] bool& dyn_muteLocalSpeaker();
    // private System.Void OnSpeakerLinked(Photon.Voice.Unity.Speaker speaker)
    // Offset: 0x1047A00
    void OnSpeakerLinked(::Photon::Voice::Unity::Speaker* speaker);
    // private System.Void OnDestroy()
    // Offset: 0x1047AB0
    void OnDestroy();
    // private System.Void OnRemoteVoiceAdded(Photon.Voice.Unity.RemoteVoiceLink remoteVoiceLink)
    // Offset: 0x1047CD0
    void OnRemoteVoiceAdded(::Photon::Voice::Unity::RemoteVoiceLink* remoteVoiceLink);
    // private System.String GetFilePath(Photon.Voice.Unity.RemoteVoiceLink remoteVoiceLink)
    // Offset: 0x1047EEC
    ::StringW GetFilePath(::Photon::Voice::Unity::RemoteVoiceLink* remoteVoiceLink);
    // public System.Void .ctor()
    // Offset: 0x1048160
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaveIncomingStreamToFile* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaveIncomingStreamToFile*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x10477C0
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::Awake()
    void Awake();
  }; // Photon.Voice.Unity.UtilityScripts.SaveIncomingStreamToFile
  #pragma pack(pop)
  static check_size<sizeof(SaveIncomingStreamToFile), 48 + sizeof(bool)> __Photon_Voice_Unity_UtilityScripts_SaveIncomingStreamToFileSizeCheck;
  static_assert(sizeof(SaveIncomingStreamToFile) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::OnSpeakerLinked
// Il2CppName: OnSpeakerLinked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::*)(::Photon::Voice::Unity::Speaker*)>(&Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::OnSpeakerLinked)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile*), "OnSpeakerLinked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::*)()>(&Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::OnRemoteVoiceAdded
// Il2CppName: OnRemoteVoiceAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::*)(::Photon::Voice::Unity::RemoteVoiceLink*)>(&Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::OnRemoteVoiceAdded)> {
  static const MethodInfo* get() {
    static auto* remoteVoiceLink = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile*), "OnRemoteVoiceAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteVoiceLink});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::GetFilePath
// Il2CppName: GetFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::*)(::Photon::Voice::Unity::RemoteVoiceLink*)>(&Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::GetFilePath)> {
  static const MethodInfo* get() {
    static auto* remoteVoiceLink = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile*), "GetFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteVoiceLink});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::*)()>(&Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UtilityScripts::SaveIncomingStreamToFile*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
