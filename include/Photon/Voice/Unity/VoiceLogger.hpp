// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.ILogger
#include "Photon/Voice/ILogger.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceLogger
  class VoiceLogger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::VoiceLogger);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::VoiceLogger*, "Photon.Voice.Unity", "VoiceLogger");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.VoiceLogger
  // [TokenAttribute] Offset: FFFFFFFF
  class VoiceLogger : public ::Il2CppObject/*, public ::Photon::Voice::ILogger*/ {
    public:
    public:
    // private System.String <Tag>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW Tag;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private ExitGames.Client.Photon.DebugLevel <LogLevel>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    ::ExitGames::Client::Photon::DebugLevel LogLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // Padding between fields: LogLevel and: context
    char __padding1[0x7] = {};
    // private readonly UnityEngine.Object context
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Object* context;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::ILogger
    operator ::Photon::Voice::ILogger() noexcept {
      return *reinterpret_cast<::Photon::Voice::ILogger*>(this);
    }
    // Get instance field reference: private System.String <Tag>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Tag$k__BackingField();
    // Get instance field reference: private ExitGames.Client.Photon.DebugLevel <LogLevel>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_$LogLevel$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Object context
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_context();
    // public System.String get_Tag()
    // Offset: 0x1BFD658
    ::StringW get_Tag();
    // public System.Void set_Tag(System.String value)
    // Offset: 0x1BFD660
    void set_Tag(::StringW value);
    // public ExitGames.Client.Photon.DebugLevel get_LogLevel()
    // Offset: 0x1BFD668
    ::ExitGames::Client::Photon::DebugLevel get_LogLevel();
    // public System.Void set_LogLevel(ExitGames.Client.Photon.DebugLevel value)
    // Offset: 0x1BFD670
    void set_LogLevel(::ExitGames::Client::Photon::DebugLevel value);
    // public System.Boolean get_IsErrorEnabled()
    // Offset: 0x1BFD678
    bool get_IsErrorEnabled();
    // public System.Boolean get_IsWarningEnabled()
    // Offset: 0x1BFD4A8
    bool get_IsWarningEnabled();
    // public System.Boolean get_IsInfoEnabled()
    // Offset: 0x1BFD378
    bool get_IsInfoEnabled();
    // public System.Boolean get_IsDebugEnabled()
    // Offset: 0x1BFD688
    bool get_IsDebugEnabled();
    // public System.Void .ctor(UnityEngine.Object context, System.String tag, ExitGames.Client.Photon.DebugLevel level)
    // Offset: 0x1BFD5D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceLogger* New_ctor(::UnityEngine::Object* context, ::StringW tag, ::ExitGames::Client::Photon::DebugLevel level) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::VoiceLogger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceLogger*, creationType>(context, tag, level)));
    }
    // public System.Void .ctor(System.String tag, ExitGames.Client.Photon.DebugLevel level)
    // Offset: 0x1BFD61C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceLogger* New_ctor(::StringW tag, ::ExitGames::Client::Photon::DebugLevel level) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::VoiceLogger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceLogger*, creationType>(tag, level)));
    }
    // public System.Void LogError(System.String fmt, params System.Object[] args)
    // Offset: 0x1BFD698
    void LogError(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // public System.Void LogWarning(System.String fmt, params System.Object[] args)
    // Offset: 0x1BFD4B8
    void LogWarning(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // public System.Void LogInfo(System.String fmt, params System.Object[] args)
    // Offset: 0x1BFD388
    void LogInfo(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // public System.Void LogDebug(System.String fmt, params System.Object[] args)
    // Offset: 0x1BFD828
    void LogDebug(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // private System.String GetFormatString(System.String fmt)
    // Offset: 0x1BFD7B4
    ::StringW GetFormatString(::StringW fmt);
    // private System.String GetTimestamp()
    // Offset: 0x1BFD83C
    ::StringW GetTimestamp();
  }; // Photon.Voice.Unity.VoiceLogger
  #pragma pack(pop)
  static check_size<sizeof(VoiceLogger), 32 + sizeof(::UnityEngine::Object*)> __Photon_Voice_Unity_VoiceLoggerSizeCheck;
  static_assert(sizeof(VoiceLogger) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::get_Tag
// Il2CppName: get_Tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::get_Tag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "get_Tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::set_Tag
// Il2CppName: set_Tag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceLogger::*)(::StringW)>(&Photon::Voice::Unity::VoiceLogger::set_Tag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "set_Tag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::get_LogLevel
// Il2CppName: get_LogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::get_LogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "get_LogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::set_LogLevel
// Il2CppName: set_LogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceLogger::*)(::ExitGames::Client::Photon::DebugLevel)>(&Photon::Voice::Unity::VoiceLogger::set_LogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "set_LogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::get_IsErrorEnabled
// Il2CppName: get_IsErrorEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::get_IsErrorEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "get_IsErrorEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::get_IsWarningEnabled
// Il2CppName: get_IsWarningEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::get_IsWarningEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "get_IsWarningEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::get_IsInfoEnabled
// Il2CppName: get_IsInfoEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::get_IsInfoEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "get_IsInfoEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::get_IsDebugEnabled
// Il2CppName: get_IsDebugEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::get_IsDebugEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "get_IsDebugEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceLogger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::VoiceLogger::LogError)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceLogger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::VoiceLogger::LogWarning)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::LogInfo
// Il2CppName: LogInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceLogger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::VoiceLogger::LogInfo)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "LogInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::LogDebug
// Il2CppName: LogDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceLogger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::VoiceLogger::LogDebug)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "LogDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::GetFormatString
// Il2CppName: GetFormatString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::VoiceLogger::*)(::StringW)>(&Photon::Voice::Unity::VoiceLogger::GetFormatString)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "GetFormatString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceLogger::GetTimestamp
// Il2CppName: GetTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::VoiceLogger::*)()>(&Photon::Voice::Unity::VoiceLogger::GetTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceLogger*), "GetTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
