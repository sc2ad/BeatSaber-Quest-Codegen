// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: AudioOutCapture
  class AudioOutCapture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::AudioOutCapture);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::AudioOutCapture*, "Photon.Voice.Unity", "AudioOutCapture");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.AudioOutCapture
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioOutCapture : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Action`2<System.Single[],System.Int32> OnAudioFrame
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_2<::ArrayW<float>, int>* OnAudioFrame;
    // Field size check
    static_assert(sizeof(::System::Action_2<::ArrayW<float>, int>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Action`2<System.Single[],System.Int32> OnAudioFrame
    [[deprecated("Use field access instead!")]] ::System::Action_2<::ArrayW<float>, int>*& dyn_OnAudioFrame();
    // public System.Void add_OnAudioFrame(System.Action`2<System.Single[],System.Int32> value)
    // Offset: 0x116D9C4
    void add_OnAudioFrame(::System::Action_2<::ArrayW<float>, int>* value);
    // public System.Void remove_OnAudioFrame(System.Action`2<System.Single[],System.Int32> value)
    // Offset: 0x116DA68
    void remove_OnAudioFrame(::System::Action_2<::ArrayW<float>, int>* value);
    // public System.Void .ctor()
    // Offset: 0x116DB88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioOutCapture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::AudioOutCapture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioOutCapture*, creationType>()));
    }
    // private System.Void OnAudioFilterRead(System.Single[] frame, System.Int32 channels)
    // Offset: 0x116DB0C
    void OnAudioFilterRead(::ArrayW<float> frame, int channels);
  }; // Photon.Voice.Unity.AudioOutCapture
  #pragma pack(pop)
  static check_size<sizeof(AudioOutCapture), 24 + sizeof(::System::Action_2<::ArrayW<float>, int>*)> __Photon_Voice_Unity_AudioOutCaptureSizeCheck;
  static_assert(sizeof(AudioOutCapture) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioOutCapture::add_OnAudioFrame
// Il2CppName: add_OnAudioFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioOutCapture::*)(::System::Action_2<::ArrayW<float>, int>*)>(&Photon::Voice::Unity::AudioOutCapture::add_OnAudioFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioOutCapture*), "add_OnAudioFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioOutCapture::remove_OnAudioFrame
// Il2CppName: remove_OnAudioFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioOutCapture::*)(::System::Action_2<::ArrayW<float>, int>*)>(&Photon::Voice::Unity::AudioOutCapture::remove_OnAudioFrame)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioOutCapture*), "remove_OnAudioFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioOutCapture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::AudioOutCapture::OnAudioFilterRead
// Il2CppName: OnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AudioOutCapture::*)(::ArrayW<float>, int)>(&Photon::Voice::Unity::AudioOutCapture::OnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* frame = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AudioOutCapture*), "OnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame, channels});
  }
};
