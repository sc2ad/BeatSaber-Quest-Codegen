// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IAudioPusher`1
#include "Photon/Voice/IAudioPusher_1.hpp"
// Including type: Photon.Voice.IResettable
#include "Photon/Voice/IResettable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AndroidJavaObject
  class AndroidJavaObject;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: ObjectFactory`2<TType, TInfo>
  template<typename TType, typename TInfo>
  class ObjectFactory_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: AndroidAudioInAEC
  class AndroidAudioInAEC;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::AndroidAudioInAEC);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::AndroidAudioInAEC*, "Photon.Voice.Unity", "AndroidAudioInAEC");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.AndroidAudioInAEC
  // [TokenAttribute] Offset: FFFFFFFF
  class AndroidAudioInAEC : public ::Il2CppObject/*, public ::Photon::Voice::IAudioPusher_1<int16_t>, public ::Photon::Voice::IResettable*/ {
    public:
    // Nested type: ::Photon::Voice::Unity::AndroidAudioInAEC::DataCallback
    class DataCallback;
    public:
    // private UnityEngine.AndroidJavaObject audioIn
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AndroidJavaObject* audioIn;
    // Field size check
    static_assert(sizeof(::UnityEngine::AndroidJavaObject*) == 0x8);
    // private System.IntPtr javaBuf
    // Size: 0x8
    // Offset: 0x18
    ::System::IntPtr javaBuf;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // private Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private System.Int32 audioInSampleRate
    // Size: 0x4
    // Offset: 0x28
    int audioInSampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: audioInSampleRate and: callback
    char __padding3[0x4] = {};
    // private Photon.Voice.Unity.AndroidAudioInAEC/Photon.Voice.Unity.DataCallback callback
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Voice::Unity::AndroidAudioInAEC::DataCallback* callback;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::AndroidAudioInAEC::DataCallback*) == 0x8);
    // private System.String <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioPusher_1<int16_t>
    operator ::Photon::Voice::IAudioPusher_1<int16_t>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioPusher_1<int16_t>*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Voice::IResettable
    operator ::Photon::Voice::IResettable() noexcept {
      return *reinterpret_cast<::Photon::Voice::IResettable*>(this);
    }
    // Get instance field reference: private UnityEngine.AndroidJavaObject audioIn
    [[deprecated("Use field access instead!")]] ::UnityEngine::AndroidJavaObject*& dyn_audioIn();
    // Get instance field reference: private System.IntPtr javaBuf
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_javaBuf();
    // Get instance field reference: private Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger();
    // Get instance field reference: private System.Int32 audioInSampleRate
    [[deprecated("Use field access instead!")]] int& dyn_audioInSampleRate();
    // Get instance field reference: private Photon.Voice.Unity.AndroidAudioInAEC/Photon.Voice.Unity.DataCallback callback
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::AndroidAudioInAEC::DataCallback*& dyn_callback();
    // Get instance field reference: private System.String <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Error$k__BackingField();
    // public System.Int32 get_Channels()
    // Offset: 0x116D130
    int get_Channels();
    // public System.Int32 get_SamplingRate()
    // Offset: 0x116D3C0
    int get_SamplingRate();
    // public System.String get_Error()
    // Offset: 0x116D3C8
    ::StringW get_Error();
    // private System.Void set_Error(System.String value)
    // Offset: 0x116D3D0
    void set_Error(::StringW value);
    // public System.Void .ctor(Photon.Voice.ILogger logger, System.Boolean enableAEC, System.Boolean enableAGC, System.Boolean enableNS)
    // Offset: 0x116BFE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AndroidAudioInAEC* New_ctor(::Photon::Voice::ILogger* logger, bool enableAEC, bool enableAGC, bool enableNS) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::AndroidAudioInAEC::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AndroidAudioInAEC*, creationType>(logger, enableAEC, enableAGC, enableNS)));
    }
    // public System.Void SetCallback(System.Action`1<System.Int16[]> callback, Photon.Voice.ObjectFactory`2<System.Int16[],System.Int32> bufferFactory)
    // Offset: 0x116D138
    void SetCallback(::System::Action_1<::ArrayW<int16_t>>* callback, ::Photon::Voice::ObjectFactory_2<::ArrayW<int16_t>, int>* bufferFactory);
    // public System.Void Reset()
    // Offset: 0x116D3D8
    void Reset();
    // public System.Void Dispose()
    // Offset: 0x116D4D8
    void Dispose();
  }; // Photon.Voice.Unity.AndroidAudioInAEC
  #pragma pack(pop)
  static check_size<sizeof(AndroidAudioInAEC), 56 + sizeof(::StringW)> __Photon_Voice_Unity_AndroidAudioInAECSizeCheck;
  static_assert(sizeof(AndroidAudioInAEC) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::AndroidAudioInAEC::*)()>(&Photon::Voice::Unity::AndroidAudioInAEC::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::get_SamplingRate
// Il2CppName: get_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::AndroidAudioInAEC::*)()>(&Photon::Voice::Unity::AndroidAudioInAEC::get_SamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "get_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::AndroidAudioInAEC::*)()>(&Photon::Voice::Unity::AndroidAudioInAEC::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::set_Error
// Il2CppName: set_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AndroidAudioInAEC::*)(::StringW)>(&Photon::Voice::Unity::AndroidAudioInAEC::set_Error)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "set_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::SetCallback
// Il2CppName: SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AndroidAudioInAEC::*)(::System::Action_1<::ArrayW<int16_t>>*, ::Photon::Voice::ObjectFactory_2<::ArrayW<int16_t>, int>*)>(&Photon::Voice::Unity::AndroidAudioInAEC::SetCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)})->byval_arg;
    static auto* bufferFactory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "ObjectFactory`2"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, bufferFactory});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AndroidAudioInAEC::*)()>(&Photon::Voice::Unity::AndroidAudioInAEC::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::AndroidAudioInAEC::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::AndroidAudioInAEC::*)()>(&Photon::Voice::Unity::AndroidAudioInAEC::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::AndroidAudioInAEC*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
