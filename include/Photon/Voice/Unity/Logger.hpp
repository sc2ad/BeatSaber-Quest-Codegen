// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.ILogger
#include "Photon/Voice/ILogger.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Logger
  class Logger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::Logger);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::Logger*, "Photon.Voice.Unity", "Logger");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.Logger
  // [TokenAttribute] Offset: FFFFFFFF
  class Logger : public ::Il2CppObject/*, public ::Photon::Voice::ILogger*/ {
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::ILogger
    operator ::Photon::Voice::ILogger() noexcept {
      return *reinterpret_cast<::Photon::Voice::ILogger*>(this);
    }
    // public System.Void .ctor()
    // Offset: 0x116DD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Logger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::Logger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Logger*, creationType>()));
    }
    // public System.Void LogError(System.String fmt, params System.Object[] args)
    // Offset: 0x116DB90
    void LogError(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // public System.Void LogWarning(System.String fmt, params System.Object[] args)
    // Offset: 0x116DC08
    void LogWarning(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // public System.Void LogInfo(System.String fmt, params System.Object[] args)
    // Offset: 0x116DC80
    void LogInfo(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
    // public System.Void LogDebug(System.String fmt, params System.Object[] args)
    // Offset: 0x116DCF8
    void LogDebug(::StringW fmt, ::ArrayW<::Il2CppObject*> args);
  }; // Photon.Voice.Unity.Logger
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::Logger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::Logger::LogError
// Il2CppName: LogError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Logger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::Logger::LogError)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Logger*), "LogError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Logger::LogWarning
// Il2CppName: LogWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Logger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::Logger::LogWarning)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Logger*), "LogWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Logger::LogInfo
// Il2CppName: LogInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Logger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::Logger::LogInfo)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Logger*), "LogInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Logger::LogDebug
// Il2CppName: LogDebug
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Logger::*)(::StringW, ::ArrayW<::Il2CppObject*>)>(&Photon::Voice::Unity::Logger::LogDebug)> {
  static const MethodInfo* get() {
    static auto* fmt = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* args = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Logger*), "LogDebug", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fmt, args});
  }
};
