// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: PlaybackDelaySettings
  struct PlaybackDelaySettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::PlaybackDelaySettings, "Photon.Voice.Unity", "PlaybackDelaySettings");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Voice.Unity.PlaybackDelaySettings
  // [TokenAttribute] Offset: FFFFFFFF
  struct PlaybackDelaySettings/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32 MinDelaySoft
    // Size: 0x4
    // Offset: 0x0
    int MinDelaySoft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxDelaySoft
    // Size: 0x4
    // Offset: 0x4
    int MaxDelaySoft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxDelayHard
    // Size: 0x4
    // Offset: 0x8
    int MaxDelayHard;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: PlaybackDelaySettings
    constexpr PlaybackDelaySettings(int MinDelaySoft_ = {}, int MaxDelaySoft_ = {}, int MaxDelayHard_ = {}) noexcept : MinDelaySoft{MinDelaySoft_}, MaxDelaySoft{MaxDelaySoft_}, MaxDelayHard{MaxDelayHard_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // static field const value: static public System.Int32 DEFAULT_LOW
    static constexpr const int DEFAULT_LOW = 200;
    // Get static field: static public System.Int32 DEFAULT_LOW
    static int _get_DEFAULT_LOW();
    // Set static field: static public System.Int32 DEFAULT_LOW
    static void _set_DEFAULT_LOW(int value);
    // static field const value: static public System.Int32 DEFAULT_HIGH
    static constexpr const int DEFAULT_HIGH = 400;
    // Get static field: static public System.Int32 DEFAULT_HIGH
    static int _get_DEFAULT_HIGH();
    // Set static field: static public System.Int32 DEFAULT_HIGH
    static void _set_DEFAULT_HIGH(int value);
    // static field const value: static public System.Int32 DEFAULT_MAX
    static constexpr const int DEFAULT_MAX = 1000;
    // Get static field: static public System.Int32 DEFAULT_MAX
    static int _get_DEFAULT_MAX();
    // Set static field: static public System.Int32 DEFAULT_MAX
    static void _set_DEFAULT_MAX(int value);
    // Get instance field reference: public System.Int32 MinDelaySoft
    [[deprecated("Use field access instead!")]] int& dyn_MinDelaySoft();
    // Get instance field reference: public System.Int32 MaxDelaySoft
    [[deprecated("Use field access instead!")]] int& dyn_MaxDelaySoft();
    // Get instance field reference: public System.Int32 MaxDelayHard
    [[deprecated("Use field access instead!")]] int& dyn_MaxDelayHard();
    // public override System.String ToString()
    // Offset: 0xA51870
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Photon.Voice.Unity.PlaybackDelaySettings
  #pragma pack(pop)
  static check_size<sizeof(PlaybackDelaySettings), 8 + sizeof(int)> __Photon_Voice_Unity_PlaybackDelaySettingsSizeCheck;
  static_assert(sizeof(PlaybackDelaySettings) == 0xC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::PlaybackDelaySettings::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::PlaybackDelaySettings::*)()>(&Photon::Voice::Unity::PlaybackDelaySettings::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::PlaybackDelaySettings), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
