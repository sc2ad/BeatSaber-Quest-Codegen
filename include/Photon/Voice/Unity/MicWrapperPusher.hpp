// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.IAudioPusher`1
#include "Photon/Voice/IAudioPusher_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
  // Forward declaring type: ObjectFactory`2<TType, TInfo>
  template<typename TType, typename TInfo>
  class ObjectFactory_2;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: AudioOutCapture
  class AudioOutCapture;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: MicWrapperPusher
  class MicWrapperPusher;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::MicWrapperPusher);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::MicWrapperPusher*, "Photon.Voice.Unity", "MicWrapperPusher");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.MicWrapperPusher
  // [TokenAttribute] Offset: FFFFFFFF
  class MicWrapperPusher : public ::Il2CppObject/*, public ::Photon::Voice::IAudioPusher_1<float>*/ {
    public:
    public:
    // private UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip mic
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioClip* mic;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.String device
    // Size: 0x8
    // Offset: 0x20
    ::StringW device;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Voice.ILogger logger
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Voice::ILogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::ILogger*) == 0x8);
    // private Photon.Voice.Unity.AudioOutCapture audioOutCapture
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Voice::Unity::AudioOutCapture* audioOutCapture;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::AudioOutCapture*) == 0x8);
    // private System.Int32 sampleRate
    // Size: 0x4
    // Offset: 0x38
    int sampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 channels
    // Size: 0x4
    // Offset: 0x3C
    int channels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean destroyGameObjectOnStop
    // Size: 0x1
    // Offset: 0x40
    bool destroyGameObjectOnStop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: destroyGameObjectOnStop and: frame2
    char __padding7[0x7] = {};
    // private System.Single[] frame2
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> frame2;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Action`1<System.Single[]> pushCallback
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::ArrayW<float>>* pushCallback;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ArrayW<float>>*) == 0x8);
    // private System.String <Error>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::StringW Error;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::IAudioPusher_1<float>
    operator ::Photon::Voice::IAudioPusher_1<float>() noexcept {
      return *reinterpret_cast<::Photon::Voice::IAudioPusher_1<float>*>(this);
    }
    // Get instance field reference: private UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: private UnityEngine.AudioClip mic
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_mic();
    // Get instance field reference: private System.String device
    [[deprecated("Use field access instead!")]] ::StringW& dyn_device();
    // Get instance field reference: private Photon.Voice.ILogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::ILogger*& dyn_logger();
    // Get instance field reference: private Photon.Voice.Unity.AudioOutCapture audioOutCapture
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::AudioOutCapture*& dyn_audioOutCapture();
    // Get instance field reference: private System.Int32 sampleRate
    [[deprecated("Use field access instead!")]] int& dyn_sampleRate();
    // Get instance field reference: private System.Int32 channels
    [[deprecated("Use field access instead!")]] int& dyn_channels();
    // Get instance field reference: private System.Boolean destroyGameObjectOnStop
    [[deprecated("Use field access instead!")]] bool& dyn_destroyGameObjectOnStop();
    // Get instance field reference: private System.Single[] frame2
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_frame2();
    // Get instance field reference: private System.Action`1<System.Single[]> pushCallback
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ArrayW<float>>*& dyn_pushCallback();
    // Get instance field reference: private System.String <Error>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$Error$k__BackingField();
    // public System.Int32 get_SamplingRate()
    // Offset: 0x116FD40
    int get_SamplingRate();
    // public System.Int32 get_Channels()
    // Offset: 0x116FD58
    int get_Channels();
    // public System.String get_Error()
    // Offset: 0x1172AEC
    ::StringW get_Error();
    // private System.Void set_Error(System.String value)
    // Offset: 0x1172AF4
    void set_Error(::StringW value);
    // public System.Void .ctor(System.String device, UnityEngine.AudioSource aS, System.Int32 suggestedFrequency, Photon.Voice.ILogger lg, System.Boolean destroyOnStop)
    // Offset: 0x116EA70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicWrapperPusher* New_ctor(::StringW device, ::UnityEngine::AudioSource* aS, int suggestedFrequency, ::Photon::Voice::ILogger* lg, bool destroyOnStop) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::MicWrapperPusher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicWrapperPusher*, creationType>(device, aS, suggestedFrequency, lg, destroyOnStop)));
    }
    // public System.Void .ctor(System.String device, UnityEngine.GameObject gO, System.Int32 suggestedFrequency, Photon.Voice.ILogger lg, System.Boolean destroyOnStop)
    // Offset: 0x116FD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicWrapperPusher* New_ctor(::StringW device, ::UnityEngine::GameObject* gO, int suggestedFrequency, ::Photon::Voice::ILogger* lg, bool destroyOnStop) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::MicWrapperPusher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicWrapperPusher*, creationType>(device, gO, suggestedFrequency, lg, destroyOnStop)));
    }
    // public System.Void .ctor(System.String device, UnityEngine.Transform parentTransform, System.Int32 suggestedFrequency, Photon.Voice.ILogger lg, System.Boolean destroyOnStop)
    // Offset: 0x1171568
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MicWrapperPusher* New_ctor(::StringW device, ::UnityEngine::Transform* parentTransform, int suggestedFrequency, ::Photon::Voice::ILogger* lg, bool destroyOnStop) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::MicWrapperPusher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MicWrapperPusher*, creationType>(device, parentTransform, suggestedFrequency, lg, destroyOnStop)));
    }
    // private System.Void AudioOutCaptureOnOnAudioFrame(System.Single[] frame, System.Int32 channelsNumber)
    // Offset: 0x11726A8
    void AudioOutCaptureOnOnAudioFrame(::ArrayW<float> frame, int channelsNumber);
    // public System.Void SetCallback(System.Action`1<System.Single[]> callback, Photon.Voice.ObjectFactory`2<System.Single[],System.Int32> bufferFactory)
    // Offset: 0x11728EC
    void SetCallback(::System::Action_1<::ArrayW<float>>* callback, ::Photon::Voice::ObjectFactory_2<::ArrayW<float>, int>* bufferFactory);
    // public System.Void Dispose()
    // Offset: 0x1172984
    void Dispose();
  }; // Photon.Voice.Unity.MicWrapperPusher
  #pragma pack(pop)
  static check_size<sizeof(MicWrapperPusher), 88 + sizeof(::StringW)> __Photon_Voice_Unity_MicWrapperPusherSizeCheck;
  static_assert(sizeof(MicWrapperPusher) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::get_SamplingRate
// Il2CppName: get_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::MicWrapperPusher::*)()>(&Photon::Voice::Unity::MicWrapperPusher::get_SamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "get_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::MicWrapperPusher::*)()>(&Photon::Voice::Unity::MicWrapperPusher::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::get_Error
// Il2CppName: get_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::MicWrapperPusher::*)()>(&Photon::Voice::Unity::MicWrapperPusher::get_Error)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "get_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::set_Error
// Il2CppName: set_Error
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::MicWrapperPusher::*)(::StringW)>(&Photon::Voice::Unity::MicWrapperPusher::set_Error)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "set_Error", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::AudioOutCaptureOnOnAudioFrame
// Il2CppName: AudioOutCaptureOnOnAudioFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::MicWrapperPusher::*)(::ArrayW<float>, int)>(&Photon::Voice::Unity::MicWrapperPusher::AudioOutCaptureOnOnAudioFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* channelsNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "AudioOutCaptureOnOnAudioFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame, channelsNumber});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::SetCallback
// Il2CppName: SetCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::MicWrapperPusher::*)(::System::Action_1<::ArrayW<float>>*, ::Photon::Voice::ObjectFactory_2<::ArrayW<float>, int>*)>(&Photon::Voice::Unity::MicWrapperPusher::SetCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)})->byval_arg;
    static auto* bufferFactory = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "ObjectFactory`2"), ::std::vector<const Il2CppClass*>{il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "SetCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, bufferFactory});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::MicWrapperPusher::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::MicWrapperPusher::*)()>(&Photon::Voice::Unity::MicWrapperPusher::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::MicWrapperPusher*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
