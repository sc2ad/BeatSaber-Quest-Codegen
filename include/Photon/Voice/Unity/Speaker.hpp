// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
// Including type: Photon.Voice.Unity.PlaybackDelaySettings
#include "Photon/Voice/Unity/PlaybackDelaySettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: RemoteVoiceLink
  class RemoteVoiceLink;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: IAudioOut`1<T>
  template<typename T>
  class IAudioOut_1;
  // Forward declaring type: FrameOut`1<T>
  template<typename T>
  class FrameOut_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Speaker
  class Speaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::Speaker);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::Speaker*, "Photon.Voice.Unity", "Speaker");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.Speaker
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 955914
  // [AddComponentMenu] Offset: 955914
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class Speaker : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Writing base type padding for base size: 0x22 to desired offset: 0x28
    char ___base_padding[0x6] = {};
    // Nested type: ::Photon::Voice::Unity::Speaker::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    public:
    // private Photon.Voice.IAudioOut`1<System.Single> audioOutput
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Voice::IAudioOut_1<float>* audioOutput;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IAudioOut_1<float>*) == 0x8);
    // private Photon.Voice.Unity.RemoteVoiceLink remoteVoiceLink
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Voice::Unity::RemoteVoiceLink* remoteVoiceLink;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::RemoteVoiceLink*) == 0x8);
    // private System.Boolean playbackOnlyWhenEnabled
    // Size: 0x1
    // Offset: 0x38
    bool playbackOnlyWhenEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playbackOnlyWhenEnabled and: playDelayMs
    char __padding2[0x3] = {};
    // private System.Int32 playDelayMs
    // Size: 0x4
    // Offset: 0x3C
    int playDelayMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.Unity.PlaybackDelaySettings playbackDelaySettings
    // Size: 0xC
    // Offset: 0x40
    ::Photon::Voice::Unity::PlaybackDelaySettings playbackDelaySettings;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::PlaybackDelaySettings) == 0xC);
    // private System.Boolean playbackExplicitlyStopped
    // Size: 0x1
    // Offset: 0x4C
    bool playbackExplicitlyStopped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playbackExplicitlyStopped and: OnRemoteVoiceRemoveAction
    char __padding5[0x3] = {};
    // private System.Action`1<Photon.Voice.Unity.Speaker> <OnRemoteVoiceRemoveAction>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::Photon::Voice::Unity::Speaker*>* OnRemoteVoiceRemoveAction;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Photon::Voice::Unity::Speaker*>*) == 0x8);
    // private Photon.Realtime.Player <Actor>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Realtime::Player* Actor;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Boolean <PlaybackStarted>k__BackingField
    // Size: 0x1
    // Offset: 0x60
    bool PlaybackStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private Photon.Voice.IAudioOut`1<System.Single> audioOutput
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IAudioOut_1<float>*& dyn_audioOutput();
    // Get instance field reference: private Photon.Voice.Unity.RemoteVoiceLink remoteVoiceLink
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::RemoteVoiceLink*& dyn_remoteVoiceLink();
    // Get instance field reference: private System.Boolean playbackOnlyWhenEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_playbackOnlyWhenEnabled();
    // Get instance field reference: private System.Int32 playDelayMs
    [[deprecated("Use field access instead!")]] int& dyn_playDelayMs();
    // Get instance field reference: private Photon.Voice.Unity.PlaybackDelaySettings playbackDelaySettings
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::PlaybackDelaySettings& dyn_playbackDelaySettings();
    // Get instance field reference: private System.Boolean playbackExplicitlyStopped
    [[deprecated("Use field access instead!")]] bool& dyn_playbackExplicitlyStopped();
    // Get instance field reference: private System.Action`1<Photon.Voice.Unity.Speaker> <OnRemoteVoiceRemoveAction>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Photon::Voice::Unity::Speaker*>*& dyn_$OnRemoteVoiceRemoveAction$k__BackingField();
    // Get instance field reference: private Photon.Realtime.Player <Actor>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_$Actor$k__BackingField();
    // Get instance field reference: private System.Boolean <PlaybackStarted>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$PlaybackStarted$k__BackingField();
    // public System.Int32 get_PlayDelayMs()
    // Offset: 0x104154C
    int get_PlayDelayMs();
    // public System.Void set_PlayDelayMs(System.Int32 value)
    // Offset: 0x1041554
    void set_PlayDelayMs(int value);
    // public System.Boolean get_IsPlaying()
    // Offset: 0x104156C
    bool get_IsPlaying();
    // public System.Int32 get_Lag()
    // Offset: 0x1041638
    int get_Lag();
    // public System.Action`1<Photon.Voice.Unity.Speaker> get_OnRemoteVoiceRemoveAction()
    // Offset: 0x1041708
    ::System::Action_1<::Photon::Voice::Unity::Speaker*>* get_OnRemoteVoiceRemoveAction();
    // public System.Void set_OnRemoteVoiceRemoveAction(System.Action`1<Photon.Voice.Unity.Speaker> value)
    // Offset: 0x1041710
    void set_OnRemoteVoiceRemoveAction(::System::Action_1<::Photon::Voice::Unity::Speaker*>* value);
    // public Photon.Realtime.Player get_Actor()
    // Offset: 0x1041718
    ::Photon::Realtime::Player* get_Actor();
    // protected internal System.Void set_Actor(Photon.Realtime.Player value)
    // Offset: 0x1041720
    void set_Actor(::Photon::Realtime::Player* value);
    // public System.Boolean get_IsLinked()
    // Offset: 0x1041728
    bool get_IsLinked();
    // Photon.Voice.Unity.RemoteVoiceLink get_RemoteVoiceLink()
    // Offset: 0x1041738
    ::Photon::Voice::Unity::RemoteVoiceLink* get_RemoteVoiceLink();
    // public System.Boolean get_PlaybackOnlyWhenEnabled()
    // Offset: 0x1041740
    bool get_PlaybackOnlyWhenEnabled();
    // public System.Void set_PlaybackOnlyWhenEnabled(System.Boolean value)
    // Offset: 0x1041748
    void set_PlaybackOnlyWhenEnabled(bool value);
    // public System.Boolean get_PlaybackStarted()
    // Offset: 0x1042280
    bool get_PlaybackStarted();
    // private System.Void set_PlaybackStarted(System.Boolean value)
    // Offset: 0x1042288
    void set_PlaybackStarted(bool value);
    // public System.Int32 get_PlaybackDelayMinSoft()
    // Offset: 0x1042294
    int get_PlaybackDelayMinSoft();
    // public System.Int32 get_PlaybackDelayMaxSoft()
    // Offset: 0x104229C
    int get_PlaybackDelayMaxSoft();
    // public System.Int32 get_PlaybackDelayMaxHard()
    // Offset: 0x10422A4
    int get_PlaybackDelayMaxHard();
    // System.Boolean get_Initialized()
    // Offset: 0x1041628
    bool get_Initialized();
    // private System.Void OnEnable()
    // Offset: 0x10422AC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x10422CC
    void OnDisable();
    // private System.Void Initialize()
    // Offset: 0x10422E8
    void Initialize();
    // System.Boolean OnRemoteVoiceInfo(Photon.Voice.Unity.RemoteVoiceLink stream)
    // Offset: 0x1042670
    bool OnRemoteVoiceInfo(::Photon::Voice::Unity::RemoteVoiceLink* stream);
    // System.Void OnRemoteVoiceRemove()
    // Offset: 0x1042A04
    void OnRemoteVoiceRemove();
    // System.Void OnAudioFrame(Photon.Voice.FrameOut`1<System.Single> frame)
    // Offset: 0x1042C80
    void OnAudioFrame(::Photon::Voice::FrameOut_1<float>* frame);
    // private System.Boolean StartPlaying()
    // Offset: 0x10417F0
    bool StartPlaying();
    // private System.Void OnDestroy()
    // Offset: 0x1042DDC
    void OnDestroy();
    // private System.Boolean StopPlaying(System.Boolean force)
    // Offset: 0x1041E10
    bool StopPlaying(bool force);
    // private System.Void CleanUp()
    // Offset: 0x1042B20
    void CleanUp();
    // System.Void Service()
    // Offset: 0x1042F04
    void Service();
    // public System.Boolean StartPlayback()
    // Offset: 0x1042A00
    bool StartPlayback();
    // public System.Boolean StopPlayback()
    // Offset: 0x1042FCC
    bool StopPlayback();
    // public System.Boolean RestartPlayback(System.Boolean reinit)
    // Offset: 0x104310C
    bool RestartPlayback(bool reinit);
    // public System.Boolean SetPlaybackDelaySettings(Photon.Voice.Unity.PlaybackDelaySettings pdc)
    // Offset: 0x1043158
    bool SetPlaybackDelaySettings(::Photon::Voice::Unity::PlaybackDelaySettings pdc);
    // public System.Boolean SetPlaybackDelaySettings(System.Int32 low, System.Int32 high, System.Int32 max)
    // Offset: 0x1043164
    bool SetPlaybackDelaySettings(int low, int high, int max);
    // public System.Void .ctor()
    // Offset: 0x1043384
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Speaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::Speaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Speaker*, creationType>()));
    }
  }; // Photon.Voice.Unity.Speaker
  #pragma pack(pop)
  static check_size<sizeof(Speaker), 96 + sizeof(bool)> __Photon_Voice_Unity_SpeakerSizeCheck;
  static_assert(sizeof(Speaker) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_PlayDelayMs
// Il2CppName: get_PlayDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_PlayDelayMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_PlayDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::set_PlayDelayMs
// Il2CppName: set_PlayDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)(int)>(&Photon::Voice::Unity::Speaker::set_PlayDelayMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "set_PlayDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_IsPlaying
// Il2CppName: get_IsPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_IsPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_IsPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_Lag
// Il2CppName: get_Lag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_Lag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_Lag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_OnRemoteVoiceRemoveAction
// Il2CppName: get_OnRemoteVoiceRemoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Action_1<::Photon::Voice::Unity::Speaker*>* (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_OnRemoteVoiceRemoveAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_OnRemoteVoiceRemoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::set_OnRemoteVoiceRemoveAction
// Il2CppName: set_OnRemoteVoiceRemoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)(::System::Action_1<::Photon::Voice::Unity::Speaker*>*)>(&Photon::Voice::Unity::Speaker::set_OnRemoteVoiceRemoveAction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "set_OnRemoteVoiceRemoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_Actor
// Il2CppName: get_Actor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_Actor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_Actor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::set_Actor
// Il2CppName: set_Actor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)(::Photon::Realtime::Player*)>(&Photon::Voice::Unity::Speaker::set_Actor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "set_Actor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_IsLinked
// Il2CppName: get_IsLinked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_IsLinked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_IsLinked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_RemoteVoiceLink
// Il2CppName: get_RemoteVoiceLink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::RemoteVoiceLink* (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_RemoteVoiceLink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_RemoteVoiceLink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_PlaybackOnlyWhenEnabled
// Il2CppName: get_PlaybackOnlyWhenEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_PlaybackOnlyWhenEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_PlaybackOnlyWhenEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::set_PlaybackOnlyWhenEnabled
// Il2CppName: set_PlaybackOnlyWhenEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)(bool)>(&Photon::Voice::Unity::Speaker::set_PlaybackOnlyWhenEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "set_PlaybackOnlyWhenEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_PlaybackStarted
// Il2CppName: get_PlaybackStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_PlaybackStarted)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_PlaybackStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::set_PlaybackStarted
// Il2CppName: set_PlaybackStarted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)(bool)>(&Photon::Voice::Unity::Speaker::set_PlaybackStarted)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "set_PlaybackStarted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_PlaybackDelayMinSoft
// Il2CppName: get_PlaybackDelayMinSoft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_PlaybackDelayMinSoft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_PlaybackDelayMinSoft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_PlaybackDelayMaxSoft
// Il2CppName: get_PlaybackDelayMaxSoft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_PlaybackDelayMaxSoft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_PlaybackDelayMaxSoft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_PlaybackDelayMaxHard
// Il2CppName: get_PlaybackDelayMaxHard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_PlaybackDelayMaxHard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_PlaybackDelayMaxHard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::get_Initialized
// Il2CppName: get_Initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::get_Initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "get_Initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::OnRemoteVoiceInfo
// Il2CppName: OnRemoteVoiceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)(::Photon::Voice::Unity::RemoteVoiceLink*)>(&Photon::Voice::Unity::Speaker::OnRemoteVoiceInfo)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "OnRemoteVoiceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::OnRemoteVoiceRemove
// Il2CppName: OnRemoteVoiceRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::OnRemoteVoiceRemove)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "OnRemoteVoiceRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::OnAudioFrame
// Il2CppName: OnAudioFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)(::Photon::Voice::FrameOut_1<float>*)>(&Photon::Voice::Unity::Speaker::OnAudioFrame)> {
  static const MethodInfo* get() {
    static auto* frame = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "OnAudioFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frame});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::StartPlaying
// Il2CppName: StartPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::StartPlaying)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "StartPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::StopPlaying
// Il2CppName: StopPlaying
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)(bool)>(&Photon::Voice::Unity::Speaker::StopPlaying)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "StopPlaying", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::CleanUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::StartPlayback
// Il2CppName: StartPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::StartPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "StartPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::StopPlayback
// Il2CppName: StopPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)()>(&Photon::Voice::Unity::Speaker::StopPlayback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "StopPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::RestartPlayback
// Il2CppName: RestartPlayback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)(bool)>(&Photon::Voice::Unity::Speaker::RestartPlayback)> {
  static const MethodInfo* get() {
    static auto* reinit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "RestartPlayback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reinit});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::SetPlaybackDelaySettings
// Il2CppName: SetPlaybackDelaySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)(::Photon::Voice::Unity::PlaybackDelaySettings)>(&Photon::Voice::Unity::Speaker::SetPlaybackDelaySettings)> {
  static const MethodInfo* get() {
    static auto* pdc = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "PlaybackDelaySettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "SetPlaybackDelaySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pdc});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::SetPlaybackDelaySettings
// Il2CppName: SetPlaybackDelaySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Speaker::*)(int, int, int)>(&Photon::Voice::Unity::Speaker::SetPlaybackDelaySettings)> {
  static const MethodInfo* get() {
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* high = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Speaker*), "SetPlaybackDelaySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{low, high, max});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Speaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
