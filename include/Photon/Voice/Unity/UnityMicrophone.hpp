// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: UnityMicrophone
  class UnityMicrophone;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UnityMicrophone);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UnityMicrophone*, "Photon.Voice.Unity", "UnityMicrophone");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.UnityMicrophone
  // [TokenAttribute] Offset: FFFFFFFF
  class UnityMicrophone : public ::Il2CppObject {
    public:
    // static public System.String[] get_devices()
    // Offset: 0x116D9B0
    static ::ArrayW<::StringW> get_devices();
    // static public System.Void End(System.String deviceName)
    // Offset: 0x116E808
    static void End(::StringW deviceName);
    // static public System.Void GetDeviceCaps(System.String deviceName, out System.Int32 minFreq, out System.Int32 maxFreq)
    // Offset: 0x116E780
    static void GetDeviceCaps(::StringW deviceName, ByRef<int> minFreq, ByRef<int> maxFreq);
    // static public System.Int32 GetPosition(System.String deviceName)
    // Offset: 0x116EA68
    static int GetPosition(::StringW deviceName);
    // static public System.Boolean IsRecording(System.String deviceName)
    // Offset: 0x1172DF0
    static bool IsRecording(::StringW deviceName);
    // static public UnityEngine.AudioClip Start(System.String deviceName, System.Boolean loop, System.Int32 lengthSec, System.Int32 frequency)
    // Offset: 0x116E788
    static ::UnityEngine::AudioClip* Start(::StringW deviceName, bool loop, int lengthSec, int frequency);
  }; // Photon.Voice.Unity.UnityMicrophone
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityMicrophone::get_devices
// Il2CppName: get_devices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&Photon::Voice::Unity::UnityMicrophone::get_devices)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityMicrophone*), "get_devices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityMicrophone::End
// Il2CppName: End
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&Photon::Voice::Unity::UnityMicrophone::End)> {
  static const MethodInfo* get() {
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityMicrophone*), "End", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceName});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityMicrophone::GetDeviceCaps
// Il2CppName: GetDeviceCaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ByRef<int>, ByRef<int>)>(&Photon::Voice::Unity::UnityMicrophone::GetDeviceCaps)> {
  static const MethodInfo* get() {
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* minFreq = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maxFreq = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityMicrophone*), "GetDeviceCaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceName, minFreq, maxFreq});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityMicrophone::GetPosition
// Il2CppName: GetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&Photon::Voice::Unity::UnityMicrophone::GetPosition)> {
  static const MethodInfo* get() {
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityMicrophone*), "GetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceName});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityMicrophone::IsRecording
// Il2CppName: IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Photon::Voice::Unity::UnityMicrophone::IsRecording)> {
  static const MethodInfo* get() {
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityMicrophone*), "IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceName});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityMicrophone::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (*)(::StringW, bool, int, int)>(&Photon::Voice::Unity::UnityMicrophone::Start)> {
  static const MethodInfo* get() {
    static auto* deviceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* loop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* lengthSec = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityMicrophone*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceName, loop, lengthSec, frequency});
  }
};
