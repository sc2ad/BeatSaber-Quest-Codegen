// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Realtime.ConnectionHandler
#include "Photon/Realtime/ConnectionHandler.hpp"
// Including type: Photon.Voice.Unity.ILoggable
#include "Photon/Voice/Unity/ILoggable.hpp"
// Including type: ExitGames.Client.Photon.DebugLevel
#include "ExitGames/Client/Photon/DebugLevel.hpp"
// Including type: Photon.Voice.Unity.PlaybackDelaySettings
#include "Photon/Voice/Unity/PlaybackDelaySettings.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceLogger
  class VoiceLogger;
  // Forward declaring type: RemoteVoiceLink
  class RemoteVoiceLink;
  // Forward declaring type: Recorder
  class Recorder;
  // Forward declaring type: Speaker
  class Speaker;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: LoadBalancingTransport
  class LoadBalancingTransport;
  // Forward declaring type: VoiceClient
  class VoiceClient;
  // Forward declaring type: VoiceInfo
  struct VoiceInfo;
  // Forward declaring type: RemoteVoiceOptions
  struct RemoteVoiceOptions;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: SupportLogger
  class SupportLogger;
  // Forward declaring type: AppSettings
  class AppSettings;
  // Forward declaring type: ClientState
  struct ClientState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`4<T1, T2, T3, TResult>
  template<typename T1, typename T2, typename T3, typename TResult>
  class Func_4;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceConnection
  class VoiceConnection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::VoiceConnection);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::VoiceConnection*, "Photon.Voice.Unity", "VoiceConnection");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x104
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.VoiceConnection
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 9559E4
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 9559E4
  class VoiceConnection : public ::Photon::Realtime::ConnectionHandler/*, public ::Photon::Voice::Unity::ILoggable*/ {
    public:
    // Nested type: ::Photon::Voice::Unity::VoiceConnection::$$c__DisplayClass98_0
    class $$c__DisplayClass98_0;
    // Nested type: ::Photon::Voice::Unity::VoiceConnection::$$c__DisplayClass102_0
    class $$c__DisplayClass102_0;
    public:
    // private Photon.Voice.Unity.VoiceLogger logger
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::Unity::VoiceLogger* logger;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::VoiceLogger*) == 0x8);
    // private ExitGames.Client.Photon.DebugLevel logLevel
    // Size: 0x1
    // Offset: 0x40
    ::ExitGames::Client::Photon::DebugLevel logLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // Padding between fields: logLevel and: client
    char __padding1[0x7] = {};
    // private Photon.Voice.LoadBalancingTransport client
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Voice::LoadBalancingTransport* client;
    // Field size check
    static_assert(sizeof(::Photon::Voice::LoadBalancingTransport*) == 0x8);
    // private System.Boolean enableSupportLogger
    // Size: 0x1
    // Offset: 0x50
    bool enableSupportLogger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableSupportLogger and: supportLoggerComponent
    char __padding3[0x7] = {};
    // private Photon.Realtime.SupportLogger supportLoggerComponent
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Realtime::SupportLogger* supportLoggerComponent;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::SupportLogger*) == 0x8);
    // private System.Int32 updateInterval
    // Size: 0x4
    // Offset: 0x60
    int updateInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nextSendTickCount
    // Size: 0x4
    // Offset: 0x64
    int nextSendTickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 statsResetInterval
    // Size: 0x4
    // Offset: 0x68
    int statsResetInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nextStatsTickCount
    // Size: 0x4
    // Offset: 0x6C
    int nextStatsTickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single statsReferenceTime
    // Size: 0x4
    // Offset: 0x70
    float statsReferenceTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 referenceFramesLost
    // Size: 0x4
    // Offset: 0x74
    int referenceFramesLost;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 referenceFramesReceived
    // Size: 0x4
    // Offset: 0x78
    int referenceFramesReceived;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: referenceFramesReceived and: speakerPrefab
    char __padding11[0x4] = {};
    // private UnityEngine.GameObject speakerPrefab
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* speakerPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean cleanedUp
    // Size: 0x1
    // Offset: 0x88
    bool cleanedUp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cleanedUp and: cachedRemoteVoices
    char __padding13[0x7] = {};
    // protected System.Collections.Generic.List`1<Photon.Voice.Unity.RemoteVoiceLink> cachedRemoteVoices
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::Photon::Voice::Unity::RemoteVoiceLink*>* cachedRemoteVoices;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Voice::Unity::RemoteVoiceLink*>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x9561F8
    // private Photon.Voice.Unity.Recorder primaryRecorder
    // Size: 0x8
    // Offset: 0x98
    ::Photon::Voice::Unity::Recorder* primaryRecorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private System.Boolean primaryRecorderInitialized
    // Size: 0x1
    // Offset: 0xA0
    bool primaryRecorderInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private ExitGames.Client.Photon.DebugLevel globalRecordersLogLevel
    // Size: 0x1
    // Offset: 0xA1
    ::ExitGames::Client::Photon::DebugLevel globalRecordersLogLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // private ExitGames.Client.Photon.DebugLevel globalSpeakersLogLevel
    // Size: 0x1
    // Offset: 0xA2
    ::ExitGames::Client::Photon::DebugLevel globalSpeakersLogLevel;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::DebugLevel) == 0x1);
    // Padding between fields: globalSpeakersLogLevel and: globalPlaybackDelay
    char __padding18[0x1] = {};
    // private System.Int32 globalPlaybackDelay
    // Size: 0x4
    // Offset: 0xA4
    int globalPlaybackDelay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.Unity.PlaybackDelaySettings globalPlaybackDelaySettings
    // Size: 0xC
    // Offset: 0xA8
    ::Photon::Voice::Unity::PlaybackDelaySettings globalPlaybackDelaySettings;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::PlaybackDelaySettings) == 0xC);
    // Padding between fields: globalPlaybackDelaySettings and: linkedSpeakers
    char __padding20[0x4] = {};
    // private System.Collections.Generic.List`1<Photon.Voice.Unity.Speaker> linkedSpeakers
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::Photon::Voice::Unity::Speaker*>* linkedSpeakers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Voice::Unity::Speaker*>*) == 0x8);
    // private System.Collections.Generic.List`1<Photon.Voice.Unity.Recorder> initializedRecorders
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::Photon::Voice::Unity::Recorder*>* initializedRecorders;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Voice::Unity::Recorder*>*) == 0x8);
    // public Photon.Realtime.AppSettings Settings
    // Size: 0x8
    // Offset: 0xC8
    ::Photon::Realtime::AppSettings* Settings;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::AppSettings*) == 0x8);
    // public System.Func`4<System.Int32,System.Byte,System.Object,Photon.Voice.Unity.Speaker> SpeakerFactory
    // Size: 0x8
    // Offset: 0xD0
    ::System::Func_4<int, uint8_t, ::Il2CppObject*, ::Photon::Voice::Unity::Speaker*>* SpeakerFactory;
    // Field size check
    static_assert(sizeof(::System::Func_4<int, uint8_t, ::Il2CppObject*, ::Photon::Voice::Unity::Speaker*>*) == 0x8);
    // private System.Action`1<Photon.Voice.Unity.Speaker> SpeakerLinked
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action_1<::Photon::Voice::Unity::Speaker*>* SpeakerLinked;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Photon::Voice::Unity::Speaker*>*) == 0x8);
    // private System.Action`1<Photon.Voice.Unity.RemoteVoiceLink> RemoteVoiceAdded
    // Size: 0x8
    // Offset: 0xE0
    ::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>* RemoteVoiceAdded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*) == 0x8);
    // public System.Single MinimalTimeScaleToDispatchInFixedUpdate
    // Size: 0x4
    // Offset: 0xE8
    float MinimalTimeScaleToDispatchInFixedUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean AutoCreateSpeakerIfNotFound
    // Size: 0x1
    // Offset: 0xEC
    bool AutoCreateSpeakerIfNotFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AutoCreateSpeakerIfNotFound and: MaxDatagrams
    char __padding28[0x3] = {};
    // public System.Int32 MaxDatagrams
    // Size: 0x4
    // Offset: 0xF0
    int MaxDatagrams;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean SendAsap
    // Size: 0x1
    // Offset: 0xF4
    bool SendAsap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SendAsap and: FramesReceivedPerSecond
    char __padding30[0x3] = {};
    // private System.Single <FramesReceivedPerSecond>k__BackingField
    // Size: 0x4
    // Offset: 0xF8
    float FramesReceivedPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <FramesLostPerSecond>k__BackingField
    // Size: 0x4
    // Offset: 0xFC
    float FramesLostPerSecond;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <FramesLostPercent>k__BackingField
    // Size: 0x4
    // Offset: 0x100
    float FramesLostPercent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Voice::Unity::ILoggable
    operator ::Photon::Voice::Unity::ILoggable() noexcept {
      return *reinterpret_cast<::Photon::Voice::Unity::ILoggable*>(this);
    }
    // static field const value: static private System.String PlayerPrefsKey
    static constexpr const char* PlayerPrefsKey = "VoiceCloudBestRegion";
    // Get static field: static private System.String PlayerPrefsKey
    static ::StringW _get_PlayerPrefsKey();
    // Set static field: static private System.String PlayerPrefsKey
    static void _set_PlayerPrefsKey(::StringW value);
    // Get instance field reference: private Photon.Voice.Unity.VoiceLogger logger
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::VoiceLogger*& dyn_logger();
    // Get instance field reference: private ExitGames.Client.Photon.DebugLevel logLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_logLevel();
    // Get instance field reference: private Photon.Voice.LoadBalancingTransport client
    [[deprecated("Use field access instead!")]] ::Photon::Voice::LoadBalancingTransport*& dyn_client();
    // Get instance field reference: private System.Boolean enableSupportLogger
    [[deprecated("Use field access instead!")]] bool& dyn_enableSupportLogger();
    // Get instance field reference: private Photon.Realtime.SupportLogger supportLoggerComponent
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::SupportLogger*& dyn_supportLoggerComponent();
    // Get instance field reference: private System.Int32 updateInterval
    [[deprecated("Use field access instead!")]] int& dyn_updateInterval();
    // Get instance field reference: private System.Int32 nextSendTickCount
    [[deprecated("Use field access instead!")]] int& dyn_nextSendTickCount();
    // Get instance field reference: private System.Int32 statsResetInterval
    [[deprecated("Use field access instead!")]] int& dyn_statsResetInterval();
    // Get instance field reference: private System.Int32 nextStatsTickCount
    [[deprecated("Use field access instead!")]] int& dyn_nextStatsTickCount();
    // Get instance field reference: private System.Single statsReferenceTime
    [[deprecated("Use field access instead!")]] float& dyn_statsReferenceTime();
    // Get instance field reference: private System.Int32 referenceFramesLost
    [[deprecated("Use field access instead!")]] int& dyn_referenceFramesLost();
    // Get instance field reference: private System.Int32 referenceFramesReceived
    [[deprecated("Use field access instead!")]] int& dyn_referenceFramesReceived();
    // Get instance field reference: private UnityEngine.GameObject speakerPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_speakerPrefab();
    // Get instance field reference: private System.Boolean cleanedUp
    [[deprecated("Use field access instead!")]] bool& dyn_cleanedUp();
    // Get instance field reference: protected System.Collections.Generic.List`1<Photon.Voice.Unity.RemoteVoiceLink> cachedRemoteVoices
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Voice::Unity::RemoteVoiceLink*>*& dyn_cachedRemoteVoices();
    // Get instance field reference: private Photon.Voice.Unity.Recorder primaryRecorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_primaryRecorder();
    // Get instance field reference: private System.Boolean primaryRecorderInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_primaryRecorderInitialized();
    // Get instance field reference: private ExitGames.Client.Photon.DebugLevel globalRecordersLogLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_globalRecordersLogLevel();
    // Get instance field reference: private ExitGames.Client.Photon.DebugLevel globalSpeakersLogLevel
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::DebugLevel& dyn_globalSpeakersLogLevel();
    // Get instance field reference: private System.Int32 globalPlaybackDelay
    [[deprecated("Use field access instead!")]] int& dyn_globalPlaybackDelay();
    // Get instance field reference: private Photon.Voice.Unity.PlaybackDelaySettings globalPlaybackDelaySettings
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::PlaybackDelaySettings& dyn_globalPlaybackDelaySettings();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Voice.Unity.Speaker> linkedSpeakers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Voice::Unity::Speaker*>*& dyn_linkedSpeakers();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Voice.Unity.Recorder> initializedRecorders
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Voice::Unity::Recorder*>*& dyn_initializedRecorders();
    // Get instance field reference: public Photon.Realtime.AppSettings Settings
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::AppSettings*& dyn_Settings();
    // Get instance field reference: public System.Func`4<System.Int32,System.Byte,System.Object,Photon.Voice.Unity.Speaker> SpeakerFactory
    [[deprecated("Use field access instead!")]] ::System::Func_4<int, uint8_t, ::Il2CppObject*, ::Photon::Voice::Unity::Speaker*>*& dyn_SpeakerFactory();
    // Get instance field reference: private System.Action`1<Photon.Voice.Unity.Speaker> SpeakerLinked
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Photon::Voice::Unity::Speaker*>*& dyn_SpeakerLinked();
    // Get instance field reference: private System.Action`1<Photon.Voice.Unity.RemoteVoiceLink> RemoteVoiceAdded
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*& dyn_RemoteVoiceAdded();
    // Get instance field reference: public System.Single MinimalTimeScaleToDispatchInFixedUpdate
    [[deprecated("Use field access instead!")]] float& dyn_MinimalTimeScaleToDispatchInFixedUpdate();
    // Get instance field reference: public System.Boolean AutoCreateSpeakerIfNotFound
    [[deprecated("Use field access instead!")]] bool& dyn_AutoCreateSpeakerIfNotFound();
    // Get instance field reference: public System.Int32 MaxDatagrams
    [[deprecated("Use field access instead!")]] int& dyn_MaxDatagrams();
    // Get instance field reference: public System.Boolean SendAsap
    [[deprecated("Use field access instead!")]] bool& dyn_SendAsap();
    // Get instance field reference: private System.Single <FramesReceivedPerSecond>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$FramesReceivedPerSecond$k__BackingField();
    // Get instance field reference: private System.Single <FramesLostPerSecond>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$FramesLostPerSecond$k__BackingField();
    // Get instance field reference: private System.Single <FramesLostPercent>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$FramesLostPercent$k__BackingField();
    // public Photon.Voice.Unity.VoiceLogger get_Logger()
    // Offset: 0x1048FB4
    ::Photon::Voice::Unity::VoiceLogger* get_Logger();
    // protected System.Void set_Logger(Photon.Voice.Unity.VoiceLogger value)
    // Offset: 0x1049090
    void set_Logger(::Photon::Voice::Unity::VoiceLogger* value);
    // public ExitGames.Client.Photon.DebugLevel get_LogLevel()
    // Offset: 0x1049098
    ::ExitGames::Client::Photon::DebugLevel get_LogLevel();
    // public System.Void set_LogLevel(ExitGames.Client.Photon.DebugLevel value)
    // Offset: 0x10490DC
    void set_LogLevel(::ExitGames::Client::Photon::DebugLevel value);
    // public Photon.Voice.LoadBalancingTransport get_Client()
    // Offset: 0x103B3AC
    ::Photon::Voice::LoadBalancingTransport* get_Client();
    // public Photon.Voice.VoiceClient get_VoiceClient()
    // Offset: 0x103C32C
    ::Photon::Voice::VoiceClient* get_VoiceClient();
    // public Photon.Realtime.ClientState get_ClientState()
    // Offset: 0x104911C
    ::Photon::Realtime::ClientState get_ClientState();
    // public System.Single get_FramesReceivedPerSecond()
    // Offset: 0x104913C
    float get_FramesReceivedPerSecond();
    // private System.Void set_FramesReceivedPerSecond(System.Single value)
    // Offset: 0x1049144
    void set_FramesReceivedPerSecond(float value);
    // public System.Single get_FramesLostPerSecond()
    // Offset: 0x104914C
    float get_FramesLostPerSecond();
    // private System.Void set_FramesLostPerSecond(System.Single value)
    // Offset: 0x1049154
    void set_FramesLostPerSecond(float value);
    // public System.Single get_FramesLostPercent()
    // Offset: 0x104915C
    float get_FramesLostPercent();
    // private System.Void set_FramesLostPercent(System.Single value)
    // Offset: 0x1049164
    void set_FramesLostPercent(float value);
    // public UnityEngine.GameObject get_SpeakerPrefab()
    // Offset: 0x104916C
    ::UnityEngine::GameObject* get_SpeakerPrefab();
    // public System.Void set_SpeakerPrefab(UnityEngine.GameObject value)
    // Offset: 0x1049174
    void set_SpeakerPrefab(::UnityEngine::GameObject* value);
    // public Photon.Voice.Unity.Recorder get_PrimaryRecorder()
    // Offset: 0x1043CDC
    ::Photon::Voice::Unity::Recorder* get_PrimaryRecorder();
    // public System.Void set_PrimaryRecorder(Photon.Voice.Unity.Recorder value)
    // Offset: 0x1043D0C
    void set_PrimaryRecorder(::Photon::Voice::Unity::Recorder* value);
    // public ExitGames.Client.Photon.DebugLevel get_GlobalRecordersLogLevel()
    // Offset: 0x10493FC
    ::ExitGames::Client::Photon::DebugLevel get_GlobalRecordersLogLevel();
    // public System.Void set_GlobalRecordersLogLevel(ExitGames.Client.Photon.DebugLevel value)
    // Offset: 0x1049404
    void set_GlobalRecordersLogLevel(::ExitGames::Client::Photon::DebugLevel value);
    // public ExitGames.Client.Photon.DebugLevel get_GlobalSpeakersLogLevel()
    // Offset: 0x10494AC
    ::ExitGames::Client::Photon::DebugLevel get_GlobalSpeakersLogLevel();
    // public System.Void set_GlobalSpeakersLogLevel(ExitGames.Client.Photon.DebugLevel value)
    // Offset: 0x10494B4
    void set_GlobalSpeakersLogLevel(::ExitGames::Client::Photon::DebugLevel value);
    // public System.Int32 get_GlobalPlaybackDelay()
    // Offset: 0x104955C
    int get_GlobalPlaybackDelay();
    // public System.Void set_GlobalPlaybackDelay(System.Int32 value)
    // Offset: 0x1049564
    void set_GlobalPlaybackDelay(int value);
    // public System.String get_BestRegionSummaryInPreferences()
    // Offset: 0x104957C
    ::StringW get_BestRegionSummaryInPreferences();
    // public System.Void set_BestRegionSummaryInPreferences(System.String value)
    // Offset: 0x10495CC
    void set_BestRegionSummaryInPreferences(::StringW value);
    // public System.Int32 get_GlobalPlaybackDelayMinSoft()
    // Offset: 0x1049648
    int get_GlobalPlaybackDelayMinSoft();
    // public System.Int32 get_GlobalPlaybackDelayMaxSoft()
    // Offset: 0x1049650
    int get_GlobalPlaybackDelayMaxSoft();
    // public System.Int32 get_GlobalPlaybackDelayMaxHard()
    // Offset: 0x1049658
    int get_GlobalPlaybackDelayMaxHard();
    // public System.Void add_SpeakerLinked(System.Action`1<Photon.Voice.Unity.Speaker> value)
    // Offset: 0x104795C
    void add_SpeakerLinked(::System::Action_1<::Photon::Voice::Unity::Speaker*>* value);
    // public System.Void remove_SpeakerLinked(System.Action`1<Photon.Voice.Unity.Speaker> value)
    // Offset: 0x1047B88
    void remove_SpeakerLinked(::System::Action_1<::Photon::Voice::Unity::Speaker*>* value);
    // public System.Void add_RemoteVoiceAdded(System.Action`1<Photon.Voice.Unity.RemoteVoiceLink> value)
    // Offset: 0x10478B8
    void add_RemoteVoiceAdded(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>* value);
    // public System.Void remove_RemoteVoiceAdded(System.Action`1<Photon.Voice.Unity.RemoteVoiceLink> value)
    // Offset: 0x1047C2C
    void remove_RemoteVoiceAdded(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>* value);
    // public System.Void .ctor()
    // Offset: 0x104BD50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VoiceConnection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::VoiceConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VoiceConnection*, creationType>()));
    }
    // public System.Boolean ConnectUsingSettings(Photon.Realtime.AppSettings overwriteSettings)
    // Offset: 0x10435CC
    bool ConnectUsingSettings(::Photon::Realtime::AppSettings* overwriteSettings);
    // public System.Void InitRecorder(Photon.Voice.Unity.Recorder rec)
    // Offset: 0x1049660
    void InitRecorder(::Photon::Voice::Unity::Recorder* rec);
    // public System.Void SetPlaybackDelaySettings(Photon.Voice.Unity.PlaybackDelaySettings gpds)
    // Offset: 0x10497D8
    void SetPlaybackDelaySettings(::Photon::Voice::Unity::PlaybackDelaySettings gpds);
    // public System.Void SetGlobalPlaybackDelaySettings(System.Int32 low, System.Int32 high, System.Int32 max)
    // Offset: 0x10497E4
    void SetGlobalPlaybackDelaySettings(int low, int high, int max);
    // public System.Boolean TryLateLinkingUsingUserData(Photon.Voice.Unity.Speaker speaker, System.Object userData)
    // Offset: 0x10499F0
    bool TryLateLinkingUsingUserData(::Photon::Voice::Unity::Speaker* speaker, ::Il2CppObject* userData);
    // protected System.Void Update()
    // Offset: 0x104A724
    void Update();
    // protected System.Void FixedUpdate()
    // Offset: 0x104A830
    void FixedUpdate();
    // protected System.Void Dispatch()
    // Offset: 0x104A870
    void Dispatch();
    // private System.Void LateUpdate()
    // Offset: 0x104A8B8
    void LateUpdate();
    // protected System.Void OnDestroy()
    // Offset: 0x104AD70
    void OnDestroy();
    // protected Photon.Voice.Unity.Speaker SimpleSpeakerFactory(System.Int32 playerId, System.Byte voiceId, System.Object userData)
    // Offset: 0x104AD74
    ::Photon::Voice::Unity::Speaker* SimpleSpeakerFactory(int playerId, uint8_t voiceId, ::Il2CppObject* userData);
    // System.Void DeleteVoiceOnRemoteVoiceRemove(Photon.Voice.Unity.Speaker speaker)
    // Offset: 0x104B1E0
    void DeleteVoiceOnRemoteVoiceRemove(::Photon::Voice::Unity::Speaker* speaker);
    // private System.Void OnRemoteVoiceInfo(System.Int32 channelId, System.Int32 playerId, System.Byte voiceId, Photon.Voice.VoiceInfo voiceInfo, ref Photon.Voice.RemoteVoiceOptions options)
    // Offset: 0x104B384
    void OnRemoteVoiceInfo(int channelId, int playerId, uint8_t voiceId, ::Photon::Voice::VoiceInfo voiceInfo, ByRef<::Photon::Voice::RemoteVoiceOptions> options);
    // protected System.Void OnVoiceStateChanged(Photon.Realtime.ClientState fromState, Photon.Realtime.ClientState toState)
    // Offset: 0x104B8E0
    void OnVoiceStateChanged(::Photon::Realtime::ClientState fromState, ::Photon::Realtime::ClientState toState);
    // protected System.Void CalcStatistics()
    // Offset: 0x104A99C
    void CalcStatistics();
    // private System.Void CleanUp()
    // Offset: 0x104AB38
    void CleanUp();
    // protected System.Void LinkSpeaker(Photon.Voice.Unity.Speaker speaker, Photon.Voice.Unity.RemoteVoiceLink remoteVoice)
    // Offset: 0x104A1FC
    void LinkSpeaker(::Photon::Voice::Unity::Speaker* speaker, ::Photon::Voice::Unity::RemoteVoiceLink* remoteVoice);
    // private System.Void ClearRemoteVoicesCache()
    // Offset: 0x104BB74
    void ClearRemoteVoicesCache();
    // private System.Void TryInitializePrimaryRecorder()
    // Offset: 0x1049350
    void TryInitializePrimaryRecorder();
    // System.Void AddInitializedRecorder(Photon.Voice.Unity.Recorder rec)
    // Offset: 0x103C34C
    void AddInitializedRecorder(::Photon::Voice::Unity::Recorder* rec);
    // System.Void RemoveInitializedRecorder(Photon.Voice.Unity.Recorder rec)
    // Offset: 0x103F1F4
    void RemoveInitializedRecorder(::Photon::Voice::Unity::Recorder* rec);
    // private System.Void StartInitializedRecorders()
    // Offset: 0x104BCBC
    void StartInitializedRecorders();
    // private System.Void StopInitializedRecorders()
    // Offset: 0x104BAD0
    void StopInitializedRecorders();
    // private System.Boolean TryGetFirstVoiceStreamByUserData(System.Object userData, out Photon.Voice.Unity.RemoteVoiceLink remoteVoiceLink)
    // Offset: 0x1049E6C
    bool TryGetFirstVoiceStreamByUserData(::Il2CppObject* userData, ByRef<::Photon::Voice::Unity::RemoteVoiceLink*> remoteVoiceLink);
    // protected override System.Void Awake()
    // Offset: 0x104A660
    // Implemented from: Photon.Realtime.ConnectionHandler
    // Base method: System.Void ConnectionHandler::Awake()
    void Awake();
    // protected override System.Void OnDisable()
    // Offset: 0x104AAA8
    // Implemented from: Photon.Realtime.ConnectionHandler
    // Base method: System.Void ConnectionHandler::OnDisable()
    void OnDisable();
  }; // Photon.Voice.Unity.VoiceConnection
  #pragma pack(pop)
  static check_size<sizeof(VoiceConnection), 256 + sizeof(float)> __Photon_Voice_Unity_VoiceConnectionSizeCheck;
  static_assert(sizeof(VoiceConnection) == 0x104);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_Logger
// Il2CppName: get_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::VoiceLogger* (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_Logger)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_Logger
// Il2CppName: set_Logger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::VoiceLogger*)>(&Photon::Voice::Unity::VoiceConnection::set_Logger)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "VoiceLogger")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_Logger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_LogLevel
// Il2CppName: get_LogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_LogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_LogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_LogLevel
// Il2CppName: set_LogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::ExitGames::Client::Photon::DebugLevel)>(&Photon::Voice::Unity::VoiceConnection::set_LogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_LogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_Client
// Il2CppName: get_Client
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::LoadBalancingTransport* (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_Client)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_Client", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_VoiceClient
// Il2CppName: get_VoiceClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::VoiceClient* (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_VoiceClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_VoiceClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_ClientState
// Il2CppName: get_ClientState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::ClientState (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_ClientState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_ClientState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_FramesReceivedPerSecond
// Il2CppName: get_FramesReceivedPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_FramesReceivedPerSecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_FramesReceivedPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_FramesReceivedPerSecond
// Il2CppName: set_FramesReceivedPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(float)>(&Photon::Voice::Unity::VoiceConnection::set_FramesReceivedPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_FramesReceivedPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_FramesLostPerSecond
// Il2CppName: get_FramesLostPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_FramesLostPerSecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_FramesLostPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_FramesLostPerSecond
// Il2CppName: set_FramesLostPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(float)>(&Photon::Voice::Unity::VoiceConnection::set_FramesLostPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_FramesLostPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_FramesLostPercent
// Il2CppName: get_FramesLostPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_FramesLostPercent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_FramesLostPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_FramesLostPercent
// Il2CppName: set_FramesLostPercent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(float)>(&Photon::Voice::Unity::VoiceConnection::set_FramesLostPercent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_FramesLostPercent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_SpeakerPrefab
// Il2CppName: get_SpeakerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_SpeakerPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_SpeakerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_SpeakerPrefab
// Il2CppName: set_SpeakerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::UnityEngine::GameObject*)>(&Photon::Voice::Unity::VoiceConnection::set_SpeakerPrefab)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_SpeakerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_PrimaryRecorder
// Il2CppName: get_PrimaryRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder* (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_PrimaryRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_PrimaryRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_PrimaryRecorder
// Il2CppName: set_PrimaryRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Recorder*)>(&Photon::Voice::Unity::VoiceConnection::set_PrimaryRecorder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_PrimaryRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_GlobalRecordersLogLevel
// Il2CppName: get_GlobalRecordersLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_GlobalRecordersLogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_GlobalRecordersLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_GlobalRecordersLogLevel
// Il2CppName: set_GlobalRecordersLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::ExitGames::Client::Photon::DebugLevel)>(&Photon::Voice::Unity::VoiceConnection::set_GlobalRecordersLogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_GlobalRecordersLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_GlobalSpeakersLogLevel
// Il2CppName: get_GlobalSpeakersLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::DebugLevel (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_GlobalSpeakersLogLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_GlobalSpeakersLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_GlobalSpeakersLogLevel
// Il2CppName: set_GlobalSpeakersLogLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::ExitGames::Client::Photon::DebugLevel)>(&Photon::Voice::Unity::VoiceConnection::set_GlobalSpeakersLogLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_GlobalSpeakersLogLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelay
// Il2CppName: get_GlobalPlaybackDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_GlobalPlaybackDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_GlobalPlaybackDelay
// Il2CppName: set_GlobalPlaybackDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(int)>(&Photon::Voice::Unity::VoiceConnection::set_GlobalPlaybackDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_GlobalPlaybackDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_BestRegionSummaryInPreferences
// Il2CppName: get_BestRegionSummaryInPreferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_BestRegionSummaryInPreferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_BestRegionSummaryInPreferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::set_BestRegionSummaryInPreferences
// Il2CppName: set_BestRegionSummaryInPreferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::StringW)>(&Photon::Voice::Unity::VoiceConnection::set_BestRegionSummaryInPreferences)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "set_BestRegionSummaryInPreferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelayMinSoft
// Il2CppName: get_GlobalPlaybackDelayMinSoft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelayMinSoft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_GlobalPlaybackDelayMinSoft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelayMaxSoft
// Il2CppName: get_GlobalPlaybackDelayMaxSoft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelayMaxSoft)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_GlobalPlaybackDelayMaxSoft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelayMaxHard
// Il2CppName: get_GlobalPlaybackDelayMaxHard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::get_GlobalPlaybackDelayMaxHard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "get_GlobalPlaybackDelayMaxHard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::add_SpeakerLinked
// Il2CppName: add_SpeakerLinked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::System::Action_1<::Photon::Voice::Unity::Speaker*>*)>(&Photon::Voice::Unity::VoiceConnection::add_SpeakerLinked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "add_SpeakerLinked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::remove_SpeakerLinked
// Il2CppName: remove_SpeakerLinked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::System::Action_1<::Photon::Voice::Unity::Speaker*>*)>(&Photon::Voice::Unity::VoiceConnection::remove_SpeakerLinked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "remove_SpeakerLinked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::add_RemoteVoiceAdded
// Il2CppName: add_RemoteVoiceAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*)>(&Photon::Voice::Unity::VoiceConnection::add_RemoteVoiceAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "add_RemoteVoiceAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::remove_RemoteVoiceAdded
// Il2CppName: remove_RemoteVoiceAdded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::System::Action_1<::Photon::Voice::Unity::RemoteVoiceLink*>*)>(&Photon::Voice::Unity::VoiceConnection::remove_RemoteVoiceAdded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "remove_RemoteVoiceAdded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::ConnectUsingSettings
// Il2CppName: ConnectUsingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Realtime::AppSettings*)>(&Photon::Voice::Unity::VoiceConnection::ConnectUsingSettings)> {
  static const MethodInfo* get() {
    static auto* overwriteSettings = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "AppSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "ConnectUsingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{overwriteSettings});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::InitRecorder
// Il2CppName: InitRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Recorder*)>(&Photon::Voice::Unity::VoiceConnection::InitRecorder)> {
  static const MethodInfo* get() {
    static auto* rec = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "InitRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rec});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::SetPlaybackDelaySettings
// Il2CppName: SetPlaybackDelaySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::PlaybackDelaySettings)>(&Photon::Voice::Unity::VoiceConnection::SetPlaybackDelaySettings)> {
  static const MethodInfo* get() {
    static auto* gpds = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "PlaybackDelaySettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "SetPlaybackDelaySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gpds});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::SetGlobalPlaybackDelaySettings
// Il2CppName: SetGlobalPlaybackDelaySettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(int, int, int)>(&Photon::Voice::Unity::VoiceConnection::SetGlobalPlaybackDelaySettings)> {
  static const MethodInfo* get() {
    static auto* low = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* high = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "SetGlobalPlaybackDelaySettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{low, high, max});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::TryLateLinkingUsingUserData
// Il2CppName: TryLateLinkingUsingUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Speaker*, ::Il2CppObject*)>(&Photon::Voice::Unity::VoiceConnection::TryLateLinkingUsingUserData)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "TryLateLinkingUsingUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker, userData});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::Dispatch
// Il2CppName: Dispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::Dispatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "Dispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::SimpleSpeakerFactory
// Il2CppName: SimpleSpeakerFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Speaker* (Photon::Voice::Unity::VoiceConnection::*)(int, uint8_t, ::Il2CppObject*)>(&Photon::Voice::Unity::VoiceConnection::SimpleSpeakerFactory)> {
  static const MethodInfo* get() {
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "SimpleSpeakerFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerId, voiceId, userData});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::DeleteVoiceOnRemoteVoiceRemove
// Il2CppName: DeleteVoiceOnRemoteVoiceRemove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Speaker*)>(&Photon::Voice::Unity::VoiceConnection::DeleteVoiceOnRemoteVoiceRemove)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "DeleteVoiceOnRemoteVoiceRemove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::OnRemoteVoiceInfo
// Il2CppName: OnRemoteVoiceInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(int, int, uint8_t, ::Photon::Voice::VoiceInfo, ByRef<::Photon::Voice::RemoteVoiceOptions>)>(&Photon::Voice::Unity::VoiceConnection::OnRemoteVoiceInfo)> {
  static const MethodInfo* get() {
    static auto* channelId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* voiceInfo = &::il2cpp_utils::GetClassFromName("Photon.Voice", "VoiceInfo")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Photon.Voice", "RemoteVoiceOptions")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "OnRemoteVoiceInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channelId, playerId, voiceId, voiceInfo, options});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::OnVoiceStateChanged
// Il2CppName: OnVoiceStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState)>(&Photon::Voice::Unity::VoiceConnection::OnVoiceStateChanged)> {
  static const MethodInfo* get() {
    static auto* fromState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    static auto* toState = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "OnVoiceStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromState, toState});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::CalcStatistics
// Il2CppName: CalcStatistics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::CalcStatistics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "CalcStatistics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::CleanUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::LinkSpeaker
// Il2CppName: LinkSpeaker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Speaker*, ::Photon::Voice::Unity::RemoteVoiceLink*)>(&Photon::Voice::Unity::VoiceConnection::LinkSpeaker)> {
  static const MethodInfo* get() {
    static auto* speaker = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Speaker")->byval_arg;
    static auto* remoteVoice = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "LinkSpeaker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speaker, remoteVoice});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::ClearRemoteVoicesCache
// Il2CppName: ClearRemoteVoicesCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::ClearRemoteVoicesCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "ClearRemoteVoicesCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::TryInitializePrimaryRecorder
// Il2CppName: TryInitializePrimaryRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::TryInitializePrimaryRecorder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "TryInitializePrimaryRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::AddInitializedRecorder
// Il2CppName: AddInitializedRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Recorder*)>(&Photon::Voice::Unity::VoiceConnection::AddInitializedRecorder)> {
  static const MethodInfo* get() {
    static auto* rec = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "AddInitializedRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rec});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::RemoveInitializedRecorder
// Il2CppName: RemoveInitializedRecorder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)(::Photon::Voice::Unity::Recorder*)>(&Photon::Voice::Unity::VoiceConnection::RemoveInitializedRecorder)> {
  static const MethodInfo* get() {
    static auto* rec = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "RemoveInitializedRecorder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rec});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::StartInitializedRecorders
// Il2CppName: StartInitializedRecorders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::StartInitializedRecorders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "StartInitializedRecorders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::StopInitializedRecorders
// Il2CppName: StopInitializedRecorders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::StopInitializedRecorders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "StopInitializedRecorders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::TryGetFirstVoiceStreamByUserData
// Il2CppName: TryGetFirstVoiceStreamByUserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::VoiceConnection::*)(::Il2CppObject*, ByRef<::Photon::Voice::Unity::RemoteVoiceLink*>)>(&Photon::Voice::Unity::VoiceConnection::TryGetFirstVoiceStreamByUserData)> {
  static const MethodInfo* get() {
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* remoteVoiceLink = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "TryGetFirstVoiceStreamByUserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userData, remoteVoiceLink});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::VoiceConnection::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::VoiceConnection::*)()>(&Photon::Voice::Unity::VoiceConnection::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::VoiceConnection*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
