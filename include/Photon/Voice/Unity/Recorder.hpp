// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.Unity.VoiceComponent
#include "Photon/Voice/Unity/VoiceComponent.hpp"
// Including type: POpusCodec.Enums.SamplingRate
#include "POpusCodec/Enums/SamplingRate.hpp"
// Including type: Photon.Voice.OpusCodec/Photon.Voice.FrameDuration
#include "Photon/Voice/OpusCodec_FrameDuration.hpp"
// Including type: Photon.Voice.Unity.NativeAndroidMicrophoneSettings
#include "Photon/Voice/Unity/NativeAndroidMicrophoneSettings.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: Photon.Voice.AudioUtil
#include "Photon/Voice/AudioUtil.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Array
  class Array;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: VoiceConnection
  class VoiceConnection;
  // Forward declaring type: AudioInEnumerator
  class AudioInEnumerator;
  // Skipping declaration: InputSourceType because it is already included!
  // Skipping declaration: MicType because it is already included!
  // Skipping declaration: SampleTypeConv because it is already included!
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoice
  class LocalVoice;
  // Forward declaring type: IAudioDesc
  class IAudioDesc;
  // Forward declaring type: VoiceClient
  class VoiceClient;
  // Forward declaring type: IAudioInChangeNotifier
  class IAudioInChangeNotifier;
  // Forward declaring type: IDeviceEnumerator
  class IDeviceEnumerator;
  // Forward declaring type: ILocalVoiceAudio
  class ILocalVoiceAudio;
  // Forward declaring type: DeviceInfo
  struct DeviceInfo;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::Recorder);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::Recorder*, "Photon.Voice.Unity", "Recorder");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.Recorder
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 9558A4
  // [HelpURLAttribute] Offset: 9558A4
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class Recorder : public ::Photon::Voice::Unity::VoiceComponent {
    public:
    // Nested type: ::Photon::Voice::Unity::Recorder::InputSourceType
    struct InputSourceType;
    // Nested type: ::Photon::Voice::Unity::Recorder::MicType
    struct MicType;
    // Nested type: ::Photon::Voice::Unity::Recorder::SampleTypeConv
    struct SampleTypeConv;
    // Nested type: ::Photon::Voice::Unity::Recorder::PhotonVoiceCreatedParams
    class PhotonVoiceCreatedParams;
    // Nested type: ::Photon::Voice::Unity::Recorder::$$c__DisplayClass175_0
    class $$c__DisplayClass175_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputSourceType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputSourceType
      constexpr InputSourceType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType Microphone
      static constexpr const int Microphone = 0;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType Microphone
      static ::Photon::Voice::Unity::Recorder::InputSourceType _get_Microphone();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType Microphone
      static void _set_Microphone(::Photon::Voice::Unity::Recorder::InputSourceType value);
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType AudioClip
      static constexpr const int AudioClip = 1;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType AudioClip
      static ::Photon::Voice::Unity::Recorder::InputSourceType _get_AudioClip();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType AudioClip
      static void _set_AudioClip(::Photon::Voice::Unity::Recorder::InputSourceType value);
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType Factory
      static constexpr const int Factory = 2;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType Factory
      static ::Photon::Voice::Unity::Recorder::InputSourceType _get_Factory();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType Factory
      static void _set_Factory(::Photon::Voice::Unity::Recorder::InputSourceType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType
    #pragma pack(pop)
    static check_size<sizeof(Recorder::InputSourceType), 0 + sizeof(int)> __Photon_Voice_Unity_Recorder_InputSourceTypeSizeCheck;
    static_assert(sizeof(Recorder::InputSourceType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MicType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MicType
      constexpr MicType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType Unity
      static constexpr const int Unity = 0;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType Unity
      static ::Photon::Voice::Unity::Recorder::MicType _get_Unity();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType Unity
      static void _set_Unity(::Photon::Voice::Unity::Recorder::MicType value);
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType Photon
      static constexpr const int Photon = 1;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType Photon
      static ::Photon::Voice::Unity::Recorder::MicType _get_Photon();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType Photon
      static void _set_Photon(::Photon::Voice::Unity::Recorder::MicType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType
    #pragma pack(pop)
    static check_size<sizeof(Recorder::MicType), 0 + sizeof(int)> __Photon_Voice_Unity_Recorder_MicTypeSizeCheck;
    static_assert(sizeof(Recorder::MicType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv
    // [TokenAttribute] Offset: FFFFFFFF
    // [ObsoleteAttribute] Offset: 955DB4
    struct SampleTypeConv/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SampleTypeConv
      constexpr SampleTypeConv(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv None
      static constexpr const int None = 0;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv None
      static ::Photon::Voice::Unity::Recorder::SampleTypeConv _get_None();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv None
      static void _set_None(::Photon::Voice::Unity::Recorder::SampleTypeConv value);
      // static field const value: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv Short
      static constexpr const int Short = 1;
      // Get static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv Short
      static ::Photon::Voice::Unity::Recorder::SampleTypeConv _get_Short();
      // Set static field: static public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv Short
      static void _set_Short(::Photon::Voice::Unity::Recorder::SampleTypeConv value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv
    #pragma pack(pop)
    static check_size<sizeof(Recorder::SampleTypeConv), 0 + sizeof(int)> __Photon_Voice_Unity_Recorder_SampleTypeConvSizeCheck;
    static_assert(sizeof(Recorder::SampleTypeConv) == 0x4);
    public:
    // private System.Boolean voiceDetection
    // Size: 0x1
    // Offset: 0x22
    bool voiceDetection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: voiceDetection and: voiceDetectionThreshold
    char __padding0[0x1] = {};
    // private System.Single voiceDetectionThreshold
    // Size: 0x4
    // Offset: 0x24
    float voiceDetectionThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 voiceDetectionDelayMs
    // Size: 0x4
    // Offset: 0x28
    int voiceDetectionDelayMs;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: voiceDetectionDelayMs and: userData
    char __padding2[0x4] = {};
    // private System.Object userData
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppObject* userData;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private Photon.Voice.LocalVoice voice
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Voice::LocalVoice* voice;
    // Field size check
    static_assert(sizeof(::Photon::Voice::LocalVoice*) == 0x8);
    // private System.String unityMicrophoneDevice
    // Size: 0x8
    // Offset: 0x40
    ::StringW unityMicrophoneDevice;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 photonMicrophoneDeviceId
    // Size: 0x4
    // Offset: 0x48
    int photonMicrophoneDeviceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: photonMicrophoneDeviceId and: inputSource
    char __padding6[0x4] = {};
    // private Photon.Voice.IAudioDesc inputSource
    // Size: 0x8
    // Offset: 0x50
    ::Photon::Voice::IAudioDesc* inputSource;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IAudioDesc*) == 0x8);
    // private Photon.Voice.VoiceClient client
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Voice::VoiceClient* client;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceClient*) == 0x8);
    // private Photon.Voice.Unity.VoiceConnection voiceConnection
    // Size: 0x8
    // Offset: 0x60
    ::Photon::Voice::Unity::VoiceConnection* voiceConnection;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::VoiceConnection*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x955EB4
    // private System.Byte interestGroup
    // Size: 0x1
    // Offset: 0x68
    uint8_t interestGroup;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Boolean debugEchoMode
    // Size: 0x1
    // Offset: 0x69
    bool debugEchoMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean reliableMode
    // Size: 0x1
    // Offset: 0x6A
    bool reliableMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean encrypt
    // Size: 0x1
    // Offset: 0x6B
    bool encrypt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean transmitEnabled
    // Size: 0x1
    // Offset: 0x6C
    bool transmitEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: transmitEnabled and: samplingRate
    char __padding14[0x3] = {};
    // private POpusCodec.Enums.SamplingRate samplingRate
    // Size: 0x4
    // Offset: 0x70
    ::POpusCodec::Enums::SamplingRate samplingRate;
    // Field size check
    static_assert(sizeof(::POpusCodec::Enums::SamplingRate) == 0x4);
    // private Photon.Voice.OpusCodec/Photon.Voice.FrameDuration frameDuration
    // Size: 0x4
    // Offset: 0x74
    ::Photon::Voice::OpusCodec::FrameDuration frameDuration;
    // Field size check
    static_assert(sizeof(::Photon::Voice::OpusCodec::FrameDuration) == 0x4);
    // [RangeAttribute] Offset: 0x955F60
    // private System.Int32 bitrate
    // Size: 0x4
    // Offset: 0x78
    int bitrate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType sourceType
    // Size: 0x4
    // Offset: 0x7C
    ::Photon::Voice::Unity::Recorder::InputSourceType sourceType;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder::InputSourceType) == 0x4);
    // private Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType microphoneType
    // Size: 0x4
    // Offset: 0x80
    ::Photon::Voice::Unity::Recorder::MicType microphoneType;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder::MicType) == 0x4);
    // Padding between fields: microphoneType and: audioClip
    char __padding19[0x4] = {};
    // private UnityEngine.AudioClip audioClip
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Boolean loopAudioClip
    // Size: 0x1
    // Offset: 0x90
    bool loopAudioClip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isRecording
    // Size: 0x1
    // Offset: 0x91
    bool isRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRecording and: inputFactory
    char __padding22[0x6] = {};
    // private System.Func`1<Photon.Voice.IAudioDesc> inputFactory
    // Size: 0x8
    // Offset: 0x98
    ::System::Func_1<::Photon::Voice::IAudioDesc*>* inputFactory;
    // Field size check
    static_assert(sizeof(::System::Func_1<::Photon::Voice::IAudioDesc*>*) == 0x8);
    // private Photon.Voice.IAudioInChangeNotifier photonMicChangeNotifier
    // Size: 0x8
    // Offset: 0xA0
    ::Photon::Voice::IAudioInChangeNotifier* photonMicChangeNotifier;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IAudioInChangeNotifier*) == 0x8);
    // private System.Boolean reactOnSystemChanges
    // Size: 0x1
    // Offset: 0xA8
    bool reactOnSystemChanges;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean subscribedToSystemChangesPhoton
    // Size: 0x1
    // Offset: 0xA9
    bool subscribedToSystemChangesPhoton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean subscribedToSystemChangesUnity
    // Size: 0x1
    // Offset: 0xAA
    bool subscribedToSystemChangesUnity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean autoStart
    // Size: 0x1
    // Offset: 0xAB
    bool autoStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private Photon.Voice.Unity.NativeAndroidMicrophoneSettings nativeAndroidMicrophoneSettings
    // Size: 0x3
    // Offset: 0xAC
    ::Photon::Voice::Unity::NativeAndroidMicrophoneSettings nativeAndroidMicrophoneSettings;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::NativeAndroidMicrophoneSettings) == 0x3);
    // private System.Boolean recordOnlyWhenEnabled
    // Size: 0x1
    // Offset: 0xAF
    bool recordOnlyWhenEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean skipDeviceChangeChecks
    // Size: 0x1
    // Offset: 0xB0
    bool skipDeviceChangeChecks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean wasRecordingBeforePause
    // Size: 0x1
    // Offset: 0xB1
    bool wasRecordingBeforePause;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isPausedOrInBackground
    // Size: 0x1
    // Offset: 0xB2
    bool isPausedOrInBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean stopRecordingWhenPaused
    // Size: 0x1
    // Offset: 0xB3
    bool stopRecordingWhenPaused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useOnAudioFilterRead
    // Size: 0x1
    // Offset: 0xB4
    bool useOnAudioFilterRead;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean trySamplingRateMatch
    // Size: 0x1
    // Offset: 0xB5
    bool trySamplingRateMatch;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useMicrophoneTypeFallback
    // Size: 0x1
    // Offset: 0xB6
    bool useMicrophoneTypeFallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean recordOnlyWhenJoined
    // Size: 0x1
    // Offset: 0xB7
    bool recordOnlyWhenJoined;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean recordingStoppedExplicitly
    // Size: 0x1
    // Offset: 0xB8
    bool recordingStoppedExplicitly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recordingStoppedExplicitly and: photonMicrophonesEnumerator
    char __padding39[0x7] = {};
    // private Photon.Voice.IDeviceEnumerator photonMicrophonesEnumerator
    // Size: 0x8
    // Offset: 0xC0
    ::Photon::Voice::IDeviceEnumerator* photonMicrophonesEnumerator;
    // Field size check
    static_assert(sizeof(::Photon::Voice::IDeviceEnumerator*) == 0x8);
    // private Photon.Voice.Unity.AudioInEnumerator unityMicrophonesEnumerator
    // Size: 0x8
    // Offset: 0xC8
    ::Photon::Voice::Unity::AudioInEnumerator* unityMicrophonesEnumerator;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::AudioInEnumerator*) == 0x8);
    // private System.Object microphoneDeviceChangeDetectedLock
    // Size: 0x8
    // Offset: 0xD0
    ::Il2CppObject* microphoneDeviceChangeDetectedLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Boolean microphoneDeviceChangeDetected
    // Size: 0x1
    // Offset: 0xD8
    bool microphoneDeviceChangeDetected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <RequiresRestart>k__BackingField
    // Size: 0x1
    // Offset: 0xD9
    bool RequiresRestart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: RequiresRestart and: TypeConvert
    char __padding44[0x2] = {};
    // private Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv <TypeConvert>k__BackingField
    // Size: 0x4
    // Offset: 0xDC
    ::Photon::Voice::Unity::Recorder::SampleTypeConv TypeConvert;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder::SampleTypeConv) == 0x4);
    public:
    // static field const value: static public System.Int32 MIN_OPUS_BITRATE
    static constexpr const int MIN_OPUS_BITRATE = 6000;
    // Get static field: static public System.Int32 MIN_OPUS_BITRATE
    static int _get_MIN_OPUS_BITRATE();
    // Set static field: static public System.Int32 MIN_OPUS_BITRATE
    static void _set_MIN_OPUS_BITRATE(int value);
    // static field const value: static public System.Int32 MAX_OPUS_BITRATE
    static constexpr const int MAX_OPUS_BITRATE = 510000;
    // Get static field: static public System.Int32 MAX_OPUS_BITRATE
    static int _get_MAX_OPUS_BITRATE();
    // Set static field: static public System.Int32 MAX_OPUS_BITRATE
    static void _set_MAX_OPUS_BITRATE(int value);
    // Get static field: static private readonly System.Array samplingRateValues
    static ::System::Array* _get_samplingRateValues();
    // Set static field: static private readonly System.Array samplingRateValues
    static void _set_samplingRateValues(::System::Array* value);
    // [ObsoleteAttribute] Offset: 0x955FE8
    // Get static field: static private Photon.Voice.IDeviceEnumerator photonMicrophoneEnumerator
    static ::Photon::Voice::IDeviceEnumerator* _get_photonMicrophoneEnumerator();
    // Set static field: static private Photon.Voice.IDeviceEnumerator photonMicrophoneEnumerator
    static void _set_photonMicrophoneEnumerator(::Photon::Voice::IDeviceEnumerator* value);
    // Get instance field reference: private System.Boolean voiceDetection
    [[deprecated("Use field access instead!")]] bool& dyn_voiceDetection();
    // Get instance field reference: private System.Single voiceDetectionThreshold
    [[deprecated("Use field access instead!")]] float& dyn_voiceDetectionThreshold();
    // Get instance field reference: private System.Int32 voiceDetectionDelayMs
    [[deprecated("Use field access instead!")]] int& dyn_voiceDetectionDelayMs();
    // Get instance field reference: private System.Object userData
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_userData();
    // Get instance field reference: private Photon.Voice.LocalVoice voice
    [[deprecated("Use field access instead!")]] ::Photon::Voice::LocalVoice*& dyn_voice();
    // Get instance field reference: private System.String unityMicrophoneDevice
    [[deprecated("Use field access instead!")]] ::StringW& dyn_unityMicrophoneDevice();
    // Get instance field reference: private System.Int32 photonMicrophoneDeviceId
    [[deprecated("Use field access instead!")]] int& dyn_photonMicrophoneDeviceId();
    // Get instance field reference: private Photon.Voice.IAudioDesc inputSource
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IAudioDesc*& dyn_inputSource();
    // Get instance field reference: private Photon.Voice.VoiceClient client
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceClient*& dyn_client();
    // Get instance field reference: private Photon.Voice.Unity.VoiceConnection voiceConnection
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::VoiceConnection*& dyn_voiceConnection();
    // Get instance field reference: private System.Byte interestGroup
    [[deprecated("Use field access instead!")]] uint8_t& dyn_interestGroup();
    // Get instance field reference: private System.Boolean debugEchoMode
    [[deprecated("Use field access instead!")]] bool& dyn_debugEchoMode();
    // Get instance field reference: private System.Boolean reliableMode
    [[deprecated("Use field access instead!")]] bool& dyn_reliableMode();
    // Get instance field reference: private System.Boolean encrypt
    [[deprecated("Use field access instead!")]] bool& dyn_encrypt();
    // Get instance field reference: private System.Boolean transmitEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_transmitEnabled();
    // Get instance field reference: private POpusCodec.Enums.SamplingRate samplingRate
    [[deprecated("Use field access instead!")]] ::POpusCodec::Enums::SamplingRate& dyn_samplingRate();
    // Get instance field reference: private Photon.Voice.OpusCodec/Photon.Voice.FrameDuration frameDuration
    [[deprecated("Use field access instead!")]] ::Photon::Voice::OpusCodec::FrameDuration& dyn_frameDuration();
    // Get instance field reference: private System.Int32 bitrate
    [[deprecated("Use field access instead!")]] int& dyn_bitrate();
    // Get instance field reference: private Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType sourceType
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder::InputSourceType& dyn_sourceType();
    // Get instance field reference: private Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType microphoneType
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder::MicType& dyn_microphoneType();
    // Get instance field reference: private UnityEngine.AudioClip audioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn_audioClip();
    // Get instance field reference: private System.Boolean loopAudioClip
    [[deprecated("Use field access instead!")]] bool& dyn_loopAudioClip();
    // Get instance field reference: private System.Boolean isRecording
    [[deprecated("Use field access instead!")]] bool& dyn_isRecording();
    // Get instance field reference: private System.Func`1<Photon.Voice.IAudioDesc> inputFactory
    [[deprecated("Use field access instead!")]] ::System::Func_1<::Photon::Voice::IAudioDesc*>*& dyn_inputFactory();
    // Get instance field reference: private Photon.Voice.IAudioInChangeNotifier photonMicChangeNotifier
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IAudioInChangeNotifier*& dyn_photonMicChangeNotifier();
    // Get instance field reference: private System.Boolean reactOnSystemChanges
    [[deprecated("Use field access instead!")]] bool& dyn_reactOnSystemChanges();
    // Get instance field reference: private System.Boolean subscribedToSystemChangesPhoton
    [[deprecated("Use field access instead!")]] bool& dyn_subscribedToSystemChangesPhoton();
    // Get instance field reference: private System.Boolean subscribedToSystemChangesUnity
    [[deprecated("Use field access instead!")]] bool& dyn_subscribedToSystemChangesUnity();
    // Get instance field reference: private System.Boolean autoStart
    [[deprecated("Use field access instead!")]] bool& dyn_autoStart();
    // Get instance field reference: private Photon.Voice.Unity.NativeAndroidMicrophoneSettings nativeAndroidMicrophoneSettings
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::NativeAndroidMicrophoneSettings& dyn_nativeAndroidMicrophoneSettings();
    // Get instance field reference: private System.Boolean recordOnlyWhenEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_recordOnlyWhenEnabled();
    // Get instance field reference: private System.Boolean skipDeviceChangeChecks
    [[deprecated("Use field access instead!")]] bool& dyn_skipDeviceChangeChecks();
    // Get instance field reference: private System.Boolean wasRecordingBeforePause
    [[deprecated("Use field access instead!")]] bool& dyn_wasRecordingBeforePause();
    // Get instance field reference: private System.Boolean isPausedOrInBackground
    [[deprecated("Use field access instead!")]] bool& dyn_isPausedOrInBackground();
    // Get instance field reference: private System.Boolean stopRecordingWhenPaused
    [[deprecated("Use field access instead!")]] bool& dyn_stopRecordingWhenPaused();
    // Get instance field reference: private System.Boolean useOnAudioFilterRead
    [[deprecated("Use field access instead!")]] bool& dyn_useOnAudioFilterRead();
    // Get instance field reference: private System.Boolean trySamplingRateMatch
    [[deprecated("Use field access instead!")]] bool& dyn_trySamplingRateMatch();
    // Get instance field reference: private System.Boolean useMicrophoneTypeFallback
    [[deprecated("Use field access instead!")]] bool& dyn_useMicrophoneTypeFallback();
    // Get instance field reference: private System.Boolean recordOnlyWhenJoined
    [[deprecated("Use field access instead!")]] bool& dyn_recordOnlyWhenJoined();
    // Get instance field reference: private System.Boolean recordingStoppedExplicitly
    [[deprecated("Use field access instead!")]] bool& dyn_recordingStoppedExplicitly();
    // Get instance field reference: private Photon.Voice.IDeviceEnumerator photonMicrophonesEnumerator
    [[deprecated("Use field access instead!")]] ::Photon::Voice::IDeviceEnumerator*& dyn_photonMicrophonesEnumerator();
    // Get instance field reference: private Photon.Voice.Unity.AudioInEnumerator unityMicrophonesEnumerator
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::AudioInEnumerator*& dyn_unityMicrophonesEnumerator();
    // Get instance field reference: private System.Object microphoneDeviceChangeDetectedLock
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_microphoneDeviceChangeDetectedLock();
    // Get instance field reference: System.Boolean microphoneDeviceChangeDetected
    [[deprecated("Use field access instead!")]] bool& dyn_microphoneDeviceChangeDetected();
    // Get instance field reference: private System.Boolean <RequiresRestart>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$RequiresRestart$k__BackingField();
    // Get instance field reference: private Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv <TypeConvert>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder::SampleTypeConv& dyn_$TypeConvert$k__BackingField();
    // System.Boolean get_MicrophoneDeviceChangeDetected()
    // Offset: 0x1036A18
    bool get_MicrophoneDeviceChangeDetected();
    // System.Void set_MicrophoneDeviceChangeDetected(System.Boolean value)
    // Offset: 0x1036AC4
    void set_MicrophoneDeviceChangeDetected(bool value);
    // private System.Boolean get_subscribedToSystemChanges()
    // Offset: 0x1036D88
    bool get_subscribedToSystemChanges();
    // static public Photon.Voice.IDeviceEnumerator get_PhotonMicrophoneEnumerator()
    // Offset: 0x1036DA8
    static ::Photon::Voice::IDeviceEnumerator* get_PhotonMicrophoneEnumerator();
    // public System.Boolean get_IsInitialized()
    // Offset: 0x1037290
    bool get_IsInitialized();
    // public System.Boolean get_RequiresInit()
    // Offset: 0x10372A0
    bool get_RequiresInit();
    // public System.Boolean get_RequiresRestart()
    // Offset: 0x10372A8
    bool get_RequiresRestart();
    // protected System.Void set_RequiresRestart(System.Boolean value)
    // Offset: 0x10372B0
    void set_RequiresRestart(bool value);
    // public System.Boolean get_TransmitEnabled()
    // Offset: 0x10372BC
    bool get_TransmitEnabled();
    // public System.Void set_TransmitEnabled(System.Boolean value)
    // Offset: 0x10372C4
    void set_TransmitEnabled(bool value);
    // public System.Boolean get_Encrypt()
    // Offset: 0x1037388
    bool get_Encrypt();
    // public System.Void set_Encrypt(System.Boolean value)
    // Offset: 0x1037390
    void set_Encrypt(bool value);
    // public System.Boolean get_DebugEchoMode()
    // Offset: 0x10373C8
    bool get_DebugEchoMode();
    // public System.Void set_DebugEchoMode(System.Boolean value)
    // Offset: 0x1037480
    void set_DebugEchoMode(bool value);
    // public System.Boolean get_ReliableMode()
    // Offset: 0x10375D8
    bool get_ReliableMode();
    // public System.Void set_ReliableMode(System.Boolean value)
    // Offset: 0x10375E0
    void set_ReliableMode(bool value);
    // public System.Boolean get_VoiceDetection()
    // Offset: 0x1037684
    bool get_VoiceDetection();
    // public System.Void set_VoiceDetection(System.Boolean value)
    // Offset: 0x1037990
    void set_VoiceDetection(bool value);
    // public System.Single get_VoiceDetectionThreshold()
    // Offset: 0x1037B50
    float get_VoiceDetectionThreshold();
    // public System.Void set_VoiceDetectionThreshold(System.Single value)
    // Offset: 0x103807C
    void set_VoiceDetectionThreshold(float value);
    // public System.Int32 get_VoiceDetectionDelayMs()
    // Offset: 0x103826C
    int get_VoiceDetectionDelayMs();
    // public System.Void set_VoiceDetectionDelayMs(System.Int32 value)
    // Offset: 0x1038574
    void set_VoiceDetectionDelayMs(int value);
    // public System.Object get_UserData()
    // Offset: 0x103866C
    ::Il2CppObject* get_UserData();
    // public System.Void set_UserData(System.Object value)
    // Offset: 0x1038674
    void set_UserData(::Il2CppObject* value);
    // public System.Func`1<Photon.Voice.IAudioDesc> get_InputFactory()
    // Offset: 0x103879C
    ::System::Func_1<::Photon::Voice::IAudioDesc*>* get_InputFactory();
    // public System.Void set_InputFactory(System.Func`1<Photon.Voice.IAudioDesc> value)
    // Offset: 0x10387A4
    void set_InputFactory(::System::Func_1<::Photon::Voice::IAudioDesc*>* value);
    // public Photon.Voice.AudioUtil/Photon.Voice.IVoiceDetector get_VoiceDetector()
    // Offset: 0x1037A80
    ::Photon::Voice::AudioUtil::IVoiceDetector* get_VoiceDetector();
    // public System.String get_UnityMicrophoneDevice()
    // Offset: 0x1038930
    ::StringW get_UnityMicrophoneDevice();
    // public System.Void set_UnityMicrophoneDevice(System.String value)
    // Offset: 0x1038B00
    void set_UnityMicrophoneDevice(::StringW value);
    // public System.Int32 get_PhotonMicrophoneDeviceId()
    // Offset: 0x1038E2C
    int get_PhotonMicrophoneDeviceId();
    // public System.Void set_PhotonMicrophoneDeviceId(System.Int32 value)
    // Offset: 0x1038F2C
    void set_PhotonMicrophoneDeviceId(int value);
    // public System.Byte get_AudioGroup()
    // Offset: 0x103902C
    uint8_t get_AudioGroup();
    // public System.Void set_AudioGroup(System.Byte value)
    // Offset: 0x1039030
    void set_AudioGroup(uint8_t value);
    // public System.Byte get_InterestGroup()
    // Offset: 0x1037430
    uint8_t get_InterestGroup();
    // public System.Void set_InterestGroup(System.Byte value)
    // Offset: 0x1039034
    void set_InterestGroup(uint8_t value);
    // public System.Boolean get_IsCurrentlyTransmitting()
    // Offset: 0x1039178
    bool get_IsCurrentlyTransmitting();
    // public Photon.Voice.AudioUtil/Photon.Voice.ILevelMeter get_LevelMeter()
    // Offset: 0x10391AC
    ::Photon::Voice::AudioUtil::ILevelMeter* get_LevelMeter();
    // public System.Boolean get_VoiceDetectorCalibrating()
    // Offset: 0x1039280
    bool get_VoiceDetectorCalibrating();
    // protected Photon.Voice.ILocalVoiceAudio get_voiceAudio()
    // Offset: 0x10388E0
    ::Photon::Voice::ILocalVoiceAudio* get_voiceAudio();
    // public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType get_SourceType()
    // Offset: 0x1039360
    ::Photon::Voice::Unity::Recorder::InputSourceType get_SourceType();
    // public System.Void set_SourceType(Photon.Voice.Unity.Recorder/Photon.Voice.Unity.InputSourceType value)
    // Offset: 0x1039368
    void set_SourceType(::Photon::Voice::Unity::Recorder::InputSourceType value);
    // public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType get_MicrophoneType()
    // Offset: 0x103949C
    ::Photon::Voice::Unity::Recorder::MicType get_MicrophoneType();
    // public System.Void set_MicrophoneType(Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType value)
    // Offset: 0x10394A4
    void set_MicrophoneType(::Photon::Voice::Unity::Recorder::MicType value);
    // public Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv get_TypeConvert()
    // Offset: 0x10395E0
    ::Photon::Voice::Unity::Recorder::SampleTypeConv get_TypeConvert();
    // public System.Void set_TypeConvert(Photon.Voice.Unity.Recorder/Photon.Voice.Unity.SampleTypeConv value)
    // Offset: 0x10395E8
    void set_TypeConvert(::Photon::Voice::Unity::Recorder::SampleTypeConv value);
    // public UnityEngine.AudioClip get_AudioClip()
    // Offset: 0x10395F0
    ::UnityEngine::AudioClip* get_AudioClip();
    // public System.Void set_AudioClip(UnityEngine.AudioClip value)
    // Offset: 0x10395F8
    void set_AudioClip(::UnityEngine::AudioClip* value);
    // public System.Boolean get_LoopAudioClip()
    // Offset: 0x1039760
    bool get_LoopAudioClip();
    // public System.Void set_LoopAudioClip(System.Boolean value)
    // Offset: 0x1039768
    void set_LoopAudioClip(bool value);
    // public POpusCodec.Enums.SamplingRate get_SamplingRate()
    // Offset: 0x1039900
    ::POpusCodec::Enums::SamplingRate get_SamplingRate();
    // public System.Void set_SamplingRate(POpusCodec.Enums.SamplingRate value)
    // Offset: 0x1039908
    void set_SamplingRate(::POpusCodec::Enums::SamplingRate value);
    // public Photon.Voice.OpusCodec/Photon.Voice.FrameDuration get_FrameDuration()
    // Offset: 0x1039B4C
    ::Photon::Voice::OpusCodec::FrameDuration get_FrameDuration();
    // public System.Void set_FrameDuration(Photon.Voice.OpusCodec/Photon.Voice.FrameDuration value)
    // Offset: 0x1039B54
    void set_FrameDuration(::Photon::Voice::OpusCodec::FrameDuration value);
    // public System.Int32 get_Bitrate()
    // Offset: 0x1039C7C
    int get_Bitrate();
    // public System.Void set_Bitrate(System.Int32 value)
    // Offset: 0x1039C84
    void set_Bitrate(int value);
    // public System.Boolean get_IsRecording()
    // Offset: 0x1039EFC
    bool get_IsRecording();
    // public System.Void set_IsRecording(System.Boolean value)
    // Offset: 0x1039F04
    void set_IsRecording(bool value);
    // public System.Boolean get_ReactOnSystemChanges()
    // Offset: 0x103A430
    bool get_ReactOnSystemChanges();
    // public System.Void set_ReactOnSystemChanges(System.Boolean value)
    // Offset: 0x103A438
    void set_ReactOnSystemChanges(bool value);
    // public System.Boolean get_AutoStart()
    // Offset: 0x103ADC8
    bool get_AutoStart();
    // public System.Void set_AutoStart(System.Boolean value)
    // Offset: 0x103ADD0
    void set_AutoStart(bool value);
    // public System.Boolean get_RecordOnlyWhenEnabled()
    // Offset: 0x103AF8C
    bool get_RecordOnlyWhenEnabled();
    // public System.Void set_RecordOnlyWhenEnabled(System.Boolean value)
    // Offset: 0x103AF94
    void set_RecordOnlyWhenEnabled(bool value);
    // public System.Boolean get_SkipDeviceChangeChecks()
    // Offset: 0x103B154
    bool get_SkipDeviceChangeChecks();
    // public System.Void set_SkipDeviceChangeChecks(System.Boolean value)
    // Offset: 0x103B15C
    void set_SkipDeviceChangeChecks(bool value);
    // public System.Boolean get_StopRecordingWhenPaused()
    // Offset: 0x103B168
    bool get_StopRecordingWhenPaused();
    // public System.Void set_StopRecordingWhenPaused(System.Boolean value)
    // Offset: 0x103B170
    void set_StopRecordingWhenPaused(bool value);
    // public System.Boolean get_UseOnAudioFilterRead()
    // Offset: 0x103B17C
    bool get_UseOnAudioFilterRead();
    // public System.Void set_UseOnAudioFilterRead(System.Boolean value)
    // Offset: 0x103B184
    void set_UseOnAudioFilterRead(bool value);
    // public System.Boolean get_TrySamplingRateMatch()
    // Offset: 0x103B2C8
    bool get_TrySamplingRateMatch();
    // public System.Void set_TrySamplingRateMatch(System.Boolean value)
    // Offset: 0x103B2D0
    void set_TrySamplingRateMatch(bool value);
    // public System.Boolean get_UseMicrophoneTypeFallback()
    // Offset: 0x103B2FC
    bool get_UseMicrophoneTypeFallback();
    // public System.Void set_UseMicrophoneTypeFallback(System.Boolean value)
    // Offset: 0x103B304
    void set_UseMicrophoneTypeFallback(bool value);
    // public System.Boolean get_RecordOnlyWhenJoined()
    // Offset: 0x103B310
    bool get_RecordOnlyWhenJoined();
    // public System.Void set_RecordOnlyWhenJoined(System.Boolean value)
    // Offset: 0x103B318
    void set_RecordOnlyWhenJoined(bool value);
    // public Photon.Voice.IDeviceEnumerator get_MicrophonesEnumerator()
    // Offset: 0x103B518
    ::Photon::Voice::IDeviceEnumerator* get_MicrophonesEnumerator();
    // public Photon.Voice.DeviceInfo get_MicrophoneDevice()
    // Offset: 0x103BA20
    ::Photon::Voice::DeviceInfo get_MicrophoneDevice();
    // public System.Void set_MicrophoneDevice(Photon.Voice.DeviceInfo value)
    // Offset: 0x103BE60
    void set_MicrophoneDevice(::Photon::Voice::DeviceInfo value);
    // static private System.Void .cctor()
    // Offset: 0x1040DD0
    static void _cctor();
    // public System.Void Init(Photon.Voice.Unity.VoiceConnection voiceConnection)
    // Offset: 0x103BF8C
    void Init(::Photon::Voice::Unity::VoiceConnection* voiceConnection);
    // public System.Void ReInit()
    // Offset: 0x103C3B4
    void ReInit();
    // public System.Void RestartRecording(System.Boolean force)
    // Offset: 0x103C3BC
    void RestartRecording(bool force);
    // public System.Void VoiceDetectorCalibrate(System.Int32 durationMs, System.Action`1<System.Single> detectionEndedCallback)
    // Offset: 0x103C618
    void VoiceDetectorCalibrate(int durationMs, ::System::Action_1<float>* detectionEndedCallback);
    // public System.Void StartRecording()
    // Offset: 0x103A068
    void StartRecording();
    // public System.Void StopRecording()
    // Offset: 0x1039F28
    void StopRecording();
    // public System.Boolean SetAndroidNativeMicrophoneSettings(Photon.Voice.Unity.NativeAndroidMicrophoneSettings nams)
    // Offset: 0x103C970
    bool SetAndroidNativeMicrophoneSettings(::Photon::Voice::Unity::NativeAndroidMicrophoneSettings nams);
    // public System.Boolean SetAndroidNativeMicrophoneSettings(System.Boolean aec, System.Boolean agc, System.Boolean ns)
    // Offset: 0x103C994
    bool SetAndroidNativeMicrophoneSettings(bool aec, bool agc, bool ns);
    // public System.Boolean ResetLocalAudio()
    // Offset: 0x103CC48
    bool ResetLocalAudio();
    // static public System.Boolean CompareUnityMicNames(System.String mic1, System.String mic2)
    // Offset: 0x1038D64
    static bool CompareUnityMicNames(::StringW mic1, ::StringW mic2);
    // static public System.Boolean IsDefaultUnityMic(System.String mic)
    // Offset: 0x103CEE4
    static bool IsDefaultUnityMic(::StringW mic);
    // private System.Void Setup()
    // Offset: 0x103CF60
    void Setup();
    // private Photon.Voice.LocalVoice CreateLocalVoiceAudioAndSource()
    // Offset: 0x103D314
    ::Photon::Voice::LocalVoice* CreateLocalVoiceAudioAndSource();
    // protected System.Void SendPhotonVoiceCreatedMessage()
    // Offset: 0x103ED84
    void SendPhotonVoiceCreatedMessage();
    // private System.Void OnDestroy()
    // Offset: 0x103EE34
    void OnDestroy();
    // private System.Void RemoveVoice(System.Boolean sendUnityMsg)
    // Offset: 0x103EF7C
    void RemoveVoice(bool sendUnityMsg);
    // private System.Void OnAudioConfigChanged(System.Boolean deviceWasChanged)
    // Offset: 0x103F25C
    void OnAudioConfigChanged(bool deviceWasChanged);
    // private System.Void PhotonMicrophoneChangeDetected()
    // Offset: 0x103F38C
    void PhotonMicrophoneChangeDetected();
    // System.Void HandleDeviceChange()
    // Offset: 0x103F4AC
    void HandleDeviceChange();
    // private System.Void SubscribeToSystemChanges()
    // Offset: 0x103A490
    void SubscribeToSystemChanges();
    // private System.Void UnsubscribeFromSystemChanges()
    // Offset: 0x103AA44
    void UnsubscribeFromSystemChanges();
    // private System.Void GetThresholdFromDetector()
    // Offset: 0x1037B74
    void GetThresholdFromDetector();
    // private System.Void GetActivityDelayFromDetector()
    // Offset: 0x1038290
    void GetActivityDelayFromDetector();
    // private System.Void GetStatusFromDetector()
    // Offset: 0x10376A8
    void GetStatusFromDetector();
    // static private System.Boolean IsValidUnityMic(System.String mic)
    // Offset: 0x1038A88
    static bool IsValidUnityMic(::StringW mic);
    // private System.Void OnEnable()
    // Offset: 0x103F82C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x103F834
    void OnDisable();
    // private System.Boolean IsValidPhotonMic()
    // Offset: 0x103F84C
    bool IsValidPhotonMic();
    // private System.Boolean CheckIfMicrophoneIdIsValid(Photon.Voice.IDeviceEnumerator audioInEnumerator, System.Int32 id)
    // Offset: 0x103F8A4
    bool CheckIfMicrophoneIdIsValid(::Photon::Voice::IDeviceEnumerator* audioInEnumerator, int id);
    // private System.Boolean IsValidPhotonMic(System.Int32 id)
    // Offset: 0x103F878
    bool IsValidPhotonMic(int id);
    // private System.Void OnApplicationPause(System.Boolean paused)
    // Offset: 0x103FC58
    void OnApplicationPause(bool paused);
    // private System.Void OnApplicationFocus(System.Boolean focused)
    // Offset: 0x1040344
    void OnApplicationFocus(bool focused);
    // private System.Void HandleApplicationPause(System.Boolean paused)
    // Offset: 0x103FD7C
    void HandleApplicationPause(bool paused);
    // private POpusCodec.Enums.SamplingRate GetSupportedSamplingRate(System.Int32 requested)
    // Offset: 0x103EA28
    ::POpusCodec::Enums::SamplingRate GetSupportedSamplingRate(int requested);
    // private POpusCodec.Enums.SamplingRate GetSupportedSamplingRateForUnityMicrophone(POpusCodec.Enums.SamplingRate requested)
    // Offset: 0x104046C
    ::POpusCodec::Enums::SamplingRate GetSupportedSamplingRateForUnityMicrophone(::POpusCodec::Enums::SamplingRate requested);
    // private POpusCodec.Enums.SamplingRate GetSupportedSamplingRate(POpusCodec.Enums.SamplingRate requested, System.Int32 minFreq, System.Int32 maxFreq)
    // Offset: 0x10404BC
    ::POpusCodec::Enums::SamplingRate GetSupportedSamplingRate(::POpusCodec::Enums::SamplingRate requested, int minFreq, int maxFreq);
    // private POpusCodec.Enums.SamplingRate GetSupportedSamplingRate(POpusCodec.Enums.SamplingRate sR)
    // Offset: 0x1040858
    ::POpusCodec::Enums::SamplingRate GetSupportedSamplingRate(::POpusCodec::Enums::SamplingRate sR);
    // private System.Void CheckAndSetSamplingRate(POpusCodec.Enums.SamplingRate sR)
    // Offset: 0x103990C
    void CheckAndSetSamplingRate(::POpusCodec::Enums::SamplingRate sR);
    // private System.Void CheckAndSetSamplingRate()
    // Offset: 0x1038E24
    void CheckAndSetSamplingRate();
    // System.Void StopRecordingInternal()
    // Offset: 0x103B008
    void StopRecordingInternal();
    // System.Void CheckAndAutoStart()
    // Offset: 0x103ADF4
    void CheckAndAutoStart();
    // System.Void StartRecordingInternal()
    // Offset: 0x103C84C
    void StartRecordingInternal();
    // private Photon.Voice.IDeviceEnumerator GetMicrophonesEnumerator(Photon.Voice.Unity.Recorder/Photon.Voice.Unity.MicType micType)
    // Offset: 0x103B520
    ::Photon::Voice::IDeviceEnumerator* GetMicrophonesEnumerator(::Photon::Voice::Unity::Recorder::MicType micType);
    // private Photon.Voice.DeviceInfo GetDeviceById(System.Int32 id)
    // Offset: 0x104097C
    ::Photon::Voice::DeviceInfo GetDeviceById(int id);
    // private Photon.Voice.DeviceInfo GetDeviceById(System.String id)
    // Offset: 0x103BB0C
    ::Photon::Voice::DeviceInfo GetDeviceById(::StringW id);
    // public System.Void .ctor()
    // Offset: 0x1040CE0
    // Implemented from: Photon.Voice.Unity.VoiceComponent
    // Base method: System.Void VoiceComponent::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Recorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::Recorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Recorder*, creationType>()));
    }
  }; // Photon.Voice.Unity.Recorder
  #pragma pack(pop)
  static check_size<sizeof(Recorder), 220 + sizeof(::Photon::Voice::Unity::Recorder::SampleTypeConv)> __Photon_Voice_Unity_RecorderSizeCheck;
  static_assert(sizeof(Recorder) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::Recorder::SampleTypeConv, "Photon.Voice.Unity", "Recorder/SampleTypeConv");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::Recorder::MicType, "Photon.Voice.Unity", "Recorder/MicType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::Recorder::InputSourceType, "Photon.Voice.Unity", "Recorder/InputSourceType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_MicrophoneDeviceChangeDetected
// Il2CppName: get_MicrophoneDeviceChangeDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_MicrophoneDeviceChangeDetected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_MicrophoneDeviceChangeDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_MicrophoneDeviceChangeDetected
// Il2CppName: set_MicrophoneDeviceChangeDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_MicrophoneDeviceChangeDetected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_MicrophoneDeviceChangeDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_subscribedToSystemChanges
// Il2CppName: get_subscribedToSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_subscribedToSystemChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_subscribedToSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_PhotonMicrophoneEnumerator
// Il2CppName: get_PhotonMicrophoneEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::IDeviceEnumerator* (*)()>(&Photon::Voice::Unity::Recorder::get_PhotonMicrophoneEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_PhotonMicrophoneEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_RequiresInit
// Il2CppName: get_RequiresInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_RequiresInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_RequiresInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_RequiresRestart
// Il2CppName: get_RequiresRestart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_RequiresRestart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_RequiresRestart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_RequiresRestart
// Il2CppName: set_RequiresRestart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_RequiresRestart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_RequiresRestart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_TransmitEnabled
// Il2CppName: get_TransmitEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_TransmitEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_TransmitEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_TransmitEnabled
// Il2CppName: set_TransmitEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_TransmitEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_TransmitEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_Encrypt
// Il2CppName: get_Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_Encrypt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_Encrypt
// Il2CppName: set_Encrypt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_Encrypt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_Encrypt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_DebugEchoMode
// Il2CppName: get_DebugEchoMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_DebugEchoMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_DebugEchoMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_DebugEchoMode
// Il2CppName: set_DebugEchoMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_DebugEchoMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_DebugEchoMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_ReliableMode
// Il2CppName: get_ReliableMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_ReliableMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_ReliableMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_ReliableMode
// Il2CppName: set_ReliableMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_ReliableMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_ReliableMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_VoiceDetection
// Il2CppName: get_VoiceDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_VoiceDetection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_VoiceDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_VoiceDetection
// Il2CppName: set_VoiceDetection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_VoiceDetection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_VoiceDetection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_VoiceDetectionThreshold
// Il2CppName: get_VoiceDetectionThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_VoiceDetectionThreshold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_VoiceDetectionThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_VoiceDetectionThreshold
// Il2CppName: set_VoiceDetectionThreshold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(float)>(&Photon::Voice::Unity::Recorder::set_VoiceDetectionThreshold)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_VoiceDetectionThreshold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_VoiceDetectionDelayMs
// Il2CppName: get_VoiceDetectionDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_VoiceDetectionDelayMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_VoiceDetectionDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_VoiceDetectionDelayMs
// Il2CppName: set_VoiceDetectionDelayMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(int)>(&Photon::Voice::Unity::Recorder::set_VoiceDetectionDelayMs)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_VoiceDetectionDelayMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_UserData
// Il2CppName: get_UserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_UserData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_UserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_UserData
// Il2CppName: set_UserData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Il2CppObject*)>(&Photon::Voice::Unity::Recorder::set_UserData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_UserData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_InputFactory
// Il2CppName: get_InputFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Func_1<::Photon::Voice::IAudioDesc*>* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_InputFactory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_InputFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_InputFactory
// Il2CppName: set_InputFactory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::System::Func_1<::Photon::Voice::IAudioDesc*>*)>(&Photon::Voice::Unity::Recorder::set_InputFactory)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Voice", "IAudioDesc")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_InputFactory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_VoiceDetector
// Il2CppName: get_VoiceDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::AudioUtil::IVoiceDetector* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_VoiceDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_VoiceDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_UnityMicrophoneDevice
// Il2CppName: get_UnityMicrophoneDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_UnityMicrophoneDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_UnityMicrophoneDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_UnityMicrophoneDevice
// Il2CppName: set_UnityMicrophoneDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::StringW)>(&Photon::Voice::Unity::Recorder::set_UnityMicrophoneDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_UnityMicrophoneDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_PhotonMicrophoneDeviceId
// Il2CppName: get_PhotonMicrophoneDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_PhotonMicrophoneDeviceId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_PhotonMicrophoneDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_PhotonMicrophoneDeviceId
// Il2CppName: set_PhotonMicrophoneDeviceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(int)>(&Photon::Voice::Unity::Recorder::set_PhotonMicrophoneDeviceId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_PhotonMicrophoneDeviceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_AudioGroup
// Il2CppName: get_AudioGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_AudioGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_AudioGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_AudioGroup
// Il2CppName: set_AudioGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(uint8_t)>(&Photon::Voice::Unity::Recorder::set_AudioGroup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_AudioGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_InterestGroup
// Il2CppName: get_InterestGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_InterestGroup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_InterestGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_InterestGroup
// Il2CppName: set_InterestGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(uint8_t)>(&Photon::Voice::Unity::Recorder::set_InterestGroup)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_InterestGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_IsCurrentlyTransmitting
// Il2CppName: get_IsCurrentlyTransmitting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_IsCurrentlyTransmitting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_IsCurrentlyTransmitting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_LevelMeter
// Il2CppName: get_LevelMeter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::AudioUtil::ILevelMeter* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_LevelMeter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_LevelMeter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_VoiceDetectorCalibrating
// Il2CppName: get_VoiceDetectorCalibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_VoiceDetectorCalibrating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_VoiceDetectorCalibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_voiceAudio
// Il2CppName: get_voiceAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::ILocalVoiceAudio* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_voiceAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_voiceAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_SourceType
// Il2CppName: get_SourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder::InputSourceType (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_SourceType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_SourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_SourceType
// Il2CppName: set_SourceType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::Unity::Recorder::InputSourceType)>(&Photon::Voice::Unity::Recorder::set_SourceType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder/InputSourceType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_SourceType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_MicrophoneType
// Il2CppName: get_MicrophoneType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder::MicType (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_MicrophoneType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_MicrophoneType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_MicrophoneType
// Il2CppName: set_MicrophoneType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::Unity::Recorder::MicType)>(&Photon::Voice::Unity::Recorder::set_MicrophoneType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder/MicType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_MicrophoneType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_TypeConvert
// Il2CppName: get_TypeConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::Unity::Recorder::SampleTypeConv (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_TypeConvert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_TypeConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_TypeConvert
// Il2CppName: set_TypeConvert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::Unity::Recorder::SampleTypeConv)>(&Photon::Voice::Unity::Recorder::set_TypeConvert)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder/SampleTypeConv")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_TypeConvert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_AudioClip
// Il2CppName: get_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_AudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_AudioClip
// Il2CppName: set_AudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::UnityEngine::AudioClip*)>(&Photon::Voice::Unity::Recorder::set_AudioClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_AudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_LoopAudioClip
// Il2CppName: get_LoopAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_LoopAudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_LoopAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_LoopAudioClip
// Il2CppName: set_LoopAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_LoopAudioClip)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_LoopAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_SamplingRate
// Il2CppName: get_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SamplingRate (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_SamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_SamplingRate
// Il2CppName: set_SamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::POpusCodec::Enums::SamplingRate)>(&Photon::Voice::Unity::Recorder::set_SamplingRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_SamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_FrameDuration
// Il2CppName: get_FrameDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::OpusCodec::FrameDuration (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_FrameDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_FrameDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_FrameDuration
// Il2CppName: set_FrameDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::OpusCodec::FrameDuration)>(&Photon::Voice::Unity::Recorder::set_FrameDuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "OpusCodec/FrameDuration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_FrameDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_Bitrate
// Il2CppName: get_Bitrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_Bitrate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_Bitrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_Bitrate
// Il2CppName: set_Bitrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(int)>(&Photon::Voice::Unity::Recorder::set_Bitrate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_Bitrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_IsRecording
// Il2CppName: get_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_IsRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_IsRecording
// Il2CppName: set_IsRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_IsRecording)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_IsRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_ReactOnSystemChanges
// Il2CppName: get_ReactOnSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_ReactOnSystemChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_ReactOnSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_ReactOnSystemChanges
// Il2CppName: set_ReactOnSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_ReactOnSystemChanges)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_ReactOnSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_AutoStart
// Il2CppName: get_AutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_AutoStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_AutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_AutoStart
// Il2CppName: set_AutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_AutoStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_AutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_RecordOnlyWhenEnabled
// Il2CppName: get_RecordOnlyWhenEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_RecordOnlyWhenEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_RecordOnlyWhenEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_RecordOnlyWhenEnabled
// Il2CppName: set_RecordOnlyWhenEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_RecordOnlyWhenEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_RecordOnlyWhenEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_SkipDeviceChangeChecks
// Il2CppName: get_SkipDeviceChangeChecks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_SkipDeviceChangeChecks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_SkipDeviceChangeChecks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_SkipDeviceChangeChecks
// Il2CppName: set_SkipDeviceChangeChecks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_SkipDeviceChangeChecks)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_SkipDeviceChangeChecks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_StopRecordingWhenPaused
// Il2CppName: get_StopRecordingWhenPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_StopRecordingWhenPaused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_StopRecordingWhenPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_StopRecordingWhenPaused
// Il2CppName: set_StopRecordingWhenPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_StopRecordingWhenPaused)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_StopRecordingWhenPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_UseOnAudioFilterRead
// Il2CppName: get_UseOnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_UseOnAudioFilterRead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_UseOnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_UseOnAudioFilterRead
// Il2CppName: set_UseOnAudioFilterRead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_UseOnAudioFilterRead)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_UseOnAudioFilterRead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_TrySamplingRateMatch
// Il2CppName: get_TrySamplingRateMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_TrySamplingRateMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_TrySamplingRateMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_TrySamplingRateMatch
// Il2CppName: set_TrySamplingRateMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_TrySamplingRateMatch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_TrySamplingRateMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_UseMicrophoneTypeFallback
// Il2CppName: get_UseMicrophoneTypeFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_UseMicrophoneTypeFallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_UseMicrophoneTypeFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_UseMicrophoneTypeFallback
// Il2CppName: set_UseMicrophoneTypeFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_UseMicrophoneTypeFallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_UseMicrophoneTypeFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_RecordOnlyWhenJoined
// Il2CppName: get_RecordOnlyWhenJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_RecordOnlyWhenJoined)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_RecordOnlyWhenJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_RecordOnlyWhenJoined
// Il2CppName: set_RecordOnlyWhenJoined
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::set_RecordOnlyWhenJoined)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_RecordOnlyWhenJoined", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_MicrophonesEnumerator
// Il2CppName: get_MicrophonesEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::IDeviceEnumerator* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_MicrophonesEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_MicrophonesEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::get_MicrophoneDevice
// Il2CppName: get_MicrophoneDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::DeviceInfo (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::get_MicrophoneDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "get_MicrophoneDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::set_MicrophoneDevice
// Il2CppName: set_MicrophoneDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::DeviceInfo)>(&Photon::Voice::Unity::Recorder::set_MicrophoneDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Voice", "DeviceInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "set_MicrophoneDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Voice::Unity::Recorder::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::Unity::VoiceConnection*)>(&Photon::Voice::Unity::Recorder::Init)> {
  static const MethodInfo* get() {
    static auto* voiceConnection = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "VoiceConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{voiceConnection});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::ReInit
// Il2CppName: ReInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::ReInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "ReInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::RestartRecording
// Il2CppName: RestartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::RestartRecording)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "RestartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::VoiceDetectorCalibrate
// Il2CppName: VoiceDetectorCalibrate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(int, ::System::Action_1<float>*)>(&Photon::Voice::Unity::Recorder::VoiceDetectorCalibrate)> {
  static const MethodInfo* get() {
    static auto* durationMs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* detectionEndedCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "VoiceDetectorCalibrate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{durationMs, detectionEndedCallback});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::StartRecording
// Il2CppName: StartRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::StartRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "StartRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::StopRecording
// Il2CppName: StopRecording
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::StopRecording)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "StopRecording", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::SetAndroidNativeMicrophoneSettings
// Il2CppName: SetAndroidNativeMicrophoneSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::Unity::NativeAndroidMicrophoneSettings)>(&Photon::Voice::Unity::Recorder::SetAndroidNativeMicrophoneSettings)> {
  static const MethodInfo* get() {
    static auto* nams = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "NativeAndroidMicrophoneSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "SetAndroidNativeMicrophoneSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nams});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::SetAndroidNativeMicrophoneSettings
// Il2CppName: SetAndroidNativeMicrophoneSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)(bool, bool, bool)>(&Photon::Voice::Unity::Recorder::SetAndroidNativeMicrophoneSettings)> {
  static const MethodInfo* get() {
    static auto* aec = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* agc = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ns = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "SetAndroidNativeMicrophoneSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aec, agc, ns});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::ResetLocalAudio
// Il2CppName: ResetLocalAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::ResetLocalAudio)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "ResetLocalAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::CompareUnityMicNames
// Il2CppName: CompareUnityMicNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&Photon::Voice::Unity::Recorder::CompareUnityMicNames)> {
  static const MethodInfo* get() {
    static auto* mic1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mic2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "CompareUnityMicNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mic1, mic2});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::IsDefaultUnityMic
// Il2CppName: IsDefaultUnityMic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Photon::Voice::Unity::Recorder::IsDefaultUnityMic)> {
  static const MethodInfo* get() {
    static auto* mic = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "IsDefaultUnityMic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mic});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::Setup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::CreateLocalVoiceAudioAndSource
// Il2CppName: CreateLocalVoiceAudioAndSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::LocalVoice* (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::CreateLocalVoiceAudioAndSource)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "CreateLocalVoiceAudioAndSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::SendPhotonVoiceCreatedMessage
// Il2CppName: SendPhotonVoiceCreatedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::SendPhotonVoiceCreatedMessage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "SendPhotonVoiceCreatedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::RemoveVoice
// Il2CppName: RemoveVoice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::RemoveVoice)> {
  static const MethodInfo* get() {
    static auto* sendUnityMsg = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "RemoveVoice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendUnityMsg});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::OnAudioConfigChanged
// Il2CppName: OnAudioConfigChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::OnAudioConfigChanged)> {
  static const MethodInfo* get() {
    static auto* deviceWasChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "OnAudioConfigChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceWasChanged});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::PhotonMicrophoneChangeDetected
// Il2CppName: PhotonMicrophoneChangeDetected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::PhotonMicrophoneChangeDetected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "PhotonMicrophoneChangeDetected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::HandleDeviceChange
// Il2CppName: HandleDeviceChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::HandleDeviceChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "HandleDeviceChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::SubscribeToSystemChanges
// Il2CppName: SubscribeToSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::SubscribeToSystemChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "SubscribeToSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::UnsubscribeFromSystemChanges
// Il2CppName: UnsubscribeFromSystemChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::UnsubscribeFromSystemChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "UnsubscribeFromSystemChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetThresholdFromDetector
// Il2CppName: GetThresholdFromDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::GetThresholdFromDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetThresholdFromDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetActivityDelayFromDetector
// Il2CppName: GetActivityDelayFromDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::GetActivityDelayFromDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetActivityDelayFromDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetStatusFromDetector
// Il2CppName: GetStatusFromDetector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::GetStatusFromDetector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetStatusFromDetector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::IsValidUnityMic
// Il2CppName: IsValidUnityMic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Photon::Voice::Unity::Recorder::IsValidUnityMic)> {
  static const MethodInfo* get() {
    static auto* mic = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "IsValidUnityMic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mic});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::IsValidPhotonMic
// Il2CppName: IsValidPhotonMic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::IsValidPhotonMic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "IsValidPhotonMic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::CheckIfMicrophoneIdIsValid
// Il2CppName: CheckIfMicrophoneIdIsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::IDeviceEnumerator*, int)>(&Photon::Voice::Unity::Recorder::CheckIfMicrophoneIdIsValid)> {
  static const MethodInfo* get() {
    static auto* audioInEnumerator = &::il2cpp_utils::GetClassFromName("Photon.Voice", "IDeviceEnumerator")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "CheckIfMicrophoneIdIsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioInEnumerator, id});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::IsValidPhotonMic
// Il2CppName: IsValidPhotonMic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::Recorder::*)(int)>(&Photon::Voice::Unity::Recorder::IsValidPhotonMic)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "IsValidPhotonMic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::OnApplicationPause
// Il2CppName: OnApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::OnApplicationPause)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "OnApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::OnApplicationFocus
// Il2CppName: OnApplicationFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::OnApplicationFocus)> {
  static const MethodInfo* get() {
    static auto* focused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "OnApplicationFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{focused});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::HandleApplicationPause
// Il2CppName: HandleApplicationPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(bool)>(&Photon::Voice::Unity::Recorder::HandleApplicationPause)> {
  static const MethodInfo* get() {
    static auto* paused = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "HandleApplicationPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{paused});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetSupportedSamplingRate
// Il2CppName: GetSupportedSamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SamplingRate (Photon::Voice::Unity::Recorder::*)(int)>(&Photon::Voice::Unity::Recorder::GetSupportedSamplingRate)> {
  static const MethodInfo* get() {
    static auto* requested = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetSupportedSamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requested});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetSupportedSamplingRateForUnityMicrophone
// Il2CppName: GetSupportedSamplingRateForUnityMicrophone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SamplingRate (Photon::Voice::Unity::Recorder::*)(::POpusCodec::Enums::SamplingRate)>(&Photon::Voice::Unity::Recorder::GetSupportedSamplingRateForUnityMicrophone)> {
  static const MethodInfo* get() {
    static auto* requested = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetSupportedSamplingRateForUnityMicrophone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requested});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetSupportedSamplingRate
// Il2CppName: GetSupportedSamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SamplingRate (Photon::Voice::Unity::Recorder::*)(::POpusCodec::Enums::SamplingRate, int, int)>(&Photon::Voice::Unity::Recorder::GetSupportedSamplingRate)> {
  static const MethodInfo* get() {
    static auto* requested = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    static auto* minFreq = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxFreq = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetSupportedSamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{requested, minFreq, maxFreq});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetSupportedSamplingRate
// Il2CppName: GetSupportedSamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::POpusCodec::Enums::SamplingRate (Photon::Voice::Unity::Recorder::*)(::POpusCodec::Enums::SamplingRate)>(&Photon::Voice::Unity::Recorder::GetSupportedSamplingRate)> {
  static const MethodInfo* get() {
    static auto* sR = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetSupportedSamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sR});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::CheckAndSetSamplingRate
// Il2CppName: CheckAndSetSamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)(::POpusCodec::Enums::SamplingRate)>(&Photon::Voice::Unity::Recorder::CheckAndSetSamplingRate)> {
  static const MethodInfo* get() {
    static auto* sR = &::il2cpp_utils::GetClassFromName("POpusCodec.Enums", "SamplingRate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "CheckAndSetSamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sR});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::CheckAndSetSamplingRate
// Il2CppName: CheckAndSetSamplingRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::CheckAndSetSamplingRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "CheckAndSetSamplingRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::StopRecordingInternal
// Il2CppName: StopRecordingInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::StopRecordingInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "StopRecordingInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::CheckAndAutoStart
// Il2CppName: CheckAndAutoStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::CheckAndAutoStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "CheckAndAutoStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::StartRecordingInternal
// Il2CppName: StartRecordingInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::Recorder::*)()>(&Photon::Voice::Unity::Recorder::StartRecordingInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "StartRecordingInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetMicrophonesEnumerator
// Il2CppName: GetMicrophonesEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::IDeviceEnumerator* (Photon::Voice::Unity::Recorder::*)(::Photon::Voice::Unity::Recorder::MicType)>(&Photon::Voice::Unity::Recorder::GetMicrophonesEnumerator)> {
  static const MethodInfo* get() {
    static auto* micType = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "Recorder/MicType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetMicrophonesEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{micType});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetDeviceById
// Il2CppName: GetDeviceById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::DeviceInfo (Photon::Voice::Unity::Recorder::*)(int)>(&Photon::Voice::Unity::Recorder::GetDeviceById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetDeviceById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::GetDeviceById
// Il2CppName: GetDeviceById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Voice::DeviceInfo (Photon::Voice::Unity::Recorder::*)(::StringW)>(&Photon::Voice::Unity::Recorder::GetDeviceById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::Recorder*), "GetDeviceById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::Recorder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
