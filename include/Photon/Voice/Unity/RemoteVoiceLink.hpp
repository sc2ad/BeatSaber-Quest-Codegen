// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: Photon.Voice.VoiceInfo
#include "Photon/Voice/VoiceInfo.hpp"
// Including type: Photon.Voice.RemoteVoiceOptions
#include "Photon/Voice/RemoteVoiceOptions.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: FrameOut`1<T>
  template<typename T>
  class FrameOut_1;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: RemoteVoiceLink
  class RemoteVoiceLink;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::RemoteVoiceLink);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::RemoteVoiceLink*, "Photon.Voice.Unity", "RemoteVoiceLink");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.Unity.RemoteVoiceLink
  // [TokenAttribute] Offset: FFFFFFFF
  class RemoteVoiceLink : public ::Il2CppObject/*, public ::System::IEquatable_1<::Photon::Voice::Unity::RemoteVoiceLink*>*/ {
    public:
    public:
    // public readonly Photon.Voice.VoiceInfo Info
    // Size: 0x30
    // Offset: 0x10
    ::Photon::Voice::VoiceInfo Info;
    // Field size check
    static_assert(sizeof(::Photon::Voice::VoiceInfo) == 0x30);
    // public readonly System.Int32 PlayerId
    // Size: 0x4
    // Offset: 0x40
    int PlayerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 VoiceId
    // Size: 0x4
    // Offset: 0x44
    int VoiceId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 ChannelId
    // Size: 0x4
    // Offset: 0x48
    int ChannelId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ChannelId and: FloatFrameDecoded
    char __padding3[0x4] = {};
    // private System.Action`1<Photon.Voice.FrameOut`1<System.Single>> FloatFrameDecoded
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::Photon::Voice::FrameOut_1<float>*>* FloatFrameDecoded;
    // Field size check
    static_assert(sizeof(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*) == 0x8);
    // private System.Action RemoteVoiceRemoved
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* RemoteVoiceRemoved;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.String cached
    // Size: 0x8
    // Offset: 0x60
    ::StringW cached;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Photon::Voice::Unity::RemoteVoiceLink*>
    operator ::System::IEquatable_1<::Photon::Voice::Unity::RemoteVoiceLink*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Photon::Voice::Unity::RemoteVoiceLink*>*>(this);
    }
    // Get instance field reference: public readonly Photon.Voice.VoiceInfo Info
    [[deprecated("Use field access instead!")]] ::Photon::Voice::VoiceInfo& dyn_Info();
    // Get instance field reference: public readonly System.Int32 PlayerId
    [[deprecated("Use field access instead!")]] int& dyn_PlayerId();
    // Get instance field reference: public readonly System.Int32 VoiceId
    [[deprecated("Use field access instead!")]] int& dyn_VoiceId();
    // Get instance field reference: public readonly System.Int32 ChannelId
    [[deprecated("Use field access instead!")]] int& dyn_ChannelId();
    // Get instance field reference: private System.Action`1<Photon.Voice.FrameOut`1<System.Single>> FloatFrameDecoded
    [[deprecated("Use field access instead!")]] ::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*& dyn_FloatFrameDecoded();
    // Get instance field reference: private System.Action RemoteVoiceRemoved
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_RemoteVoiceRemoved();
    // Get instance field reference: private System.String cached
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cached();
    // public System.Void add_FloatFrameDecoded(System.Action`1<Photon.Voice.FrameOut`1<System.Single>> value)
    // Offset: 0x1040F10
    void add_FloatFrameDecoded(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>* value);
    // public System.Void remove_FloatFrameDecoded(System.Action`1<Photon.Voice.FrameOut`1<System.Single>> value)
    // Offset: 0x1040FB4
    void remove_FloatFrameDecoded(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>* value);
    // public System.Void add_RemoteVoiceRemoved(System.Action value)
    // Offset: 0x1041058
    void add_RemoteVoiceRemoved(::System::Action* value);
    // public System.Void remove_RemoteVoiceRemoved(System.Action value)
    // Offset: 0x10410FC
    void remove_RemoteVoiceRemoved(::System::Action* value);
    // public System.Void .ctor(Photon.Voice.VoiceInfo info, System.Int32 playerId, System.Int32 voiceId, System.Int32 channelId, ref Photon.Voice.RemoteVoiceOptions options)
    // Offset: 0x10411A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RemoteVoiceLink* New_ctor(::Photon::Voice::VoiceInfo info, int playerId, int voiceId, int channelId, ByRef<::Photon::Voice::RemoteVoiceOptions> options) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::RemoteVoiceLink::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RemoteVoiceLink*, creationType>(info, playerId, voiceId, channelId, byref(options))));
    }
    // private System.Void OnRemoteVoiceRemoveAction()
    // Offset: 0x10412A4
    void OnRemoteVoiceRemoveAction();
    // private System.Void OnDecodedFrameFloatAction(Photon.Voice.FrameOut`1<System.Single> floats)
    // Offset: 0x10412B8
    void OnDecodedFrameFloatAction(::Photon::Voice::FrameOut_1<float>* floats);
    // public System.Boolean Equals(Photon.Voice.Unity.RemoteVoiceLink other)
    // Offset: 0x10414FC
    bool Equals(::Photon::Voice::Unity::RemoteVoiceLink* other);
    // public override System.String ToString()
    // Offset: 0x104132C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Photon.Voice.Unity.RemoteVoiceLink
  #pragma pack(pop)
  static check_size<sizeof(RemoteVoiceLink), 96 + sizeof(::StringW)> __Photon_Voice_Unity_RemoteVoiceLinkSizeCheck;
  static_assert(sizeof(RemoteVoiceLink) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::add_FloatFrameDecoded
// Il2CppName: add_FloatFrameDecoded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::RemoteVoiceLink::*)(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*)>(&Photon::Voice::Unity::RemoteVoiceLink::add_FloatFrameDecoded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "add_FloatFrameDecoded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::remove_FloatFrameDecoded
// Il2CppName: remove_FloatFrameDecoded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::RemoteVoiceLink::*)(::System::Action_1<::Photon::Voice::FrameOut_1<float>*>*)>(&Photon::Voice::Unity::RemoteVoiceLink::remove_FloatFrameDecoded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "remove_FloatFrameDecoded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::add_RemoteVoiceRemoved
// Il2CppName: add_RemoteVoiceRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::RemoteVoiceLink::*)(::System::Action*)>(&Photon::Voice::Unity::RemoteVoiceLink::add_RemoteVoiceRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "add_RemoteVoiceRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::remove_RemoteVoiceRemoved
// Il2CppName: remove_RemoteVoiceRemoved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::RemoteVoiceLink::*)(::System::Action*)>(&Photon::Voice::Unity::RemoteVoiceLink::remove_RemoteVoiceRemoved)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "remove_RemoteVoiceRemoved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::OnRemoteVoiceRemoveAction
// Il2CppName: OnRemoteVoiceRemoveAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::RemoteVoiceLink::*)()>(&Photon::Voice::Unity::RemoteVoiceLink::OnRemoteVoiceRemoveAction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "OnRemoteVoiceRemoveAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::OnDecodedFrameFloatAction
// Il2CppName: OnDecodedFrameFloatAction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::RemoteVoiceLink::*)(::Photon::Voice::FrameOut_1<float>*)>(&Photon::Voice::Unity::RemoteVoiceLink::OnDecodedFrameFloatAction)> {
  static const MethodInfo* get() {
    static auto* floats = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Photon.Voice", "FrameOut`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "OnDecodedFrameFloatAction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{floats});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Voice::Unity::RemoteVoiceLink::*)(::Photon::Voice::Unity::RemoteVoiceLink*)>(&Photon::Voice::Unity::RemoteVoiceLink::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Photon.Voice.Unity", "RemoteVoiceLink")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::RemoteVoiceLink::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Voice::Unity::RemoteVoiceLink::*)()>(&Photon::Voice::Unity::RemoteVoiceLink::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::RemoteVoiceLink*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
