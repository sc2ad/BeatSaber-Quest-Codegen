// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.AudioOutDelayControl`1
#include "Photon/Voice/AudioOutDelayControl_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: ILogger
  class ILogger;
}
// Completed forward declares
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: UnityAudioOut
  class UnityAudioOut;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::Unity::UnityAudioOut);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::Unity::UnityAudioOut*, "Photon.Voice.Unity", "UnityAudioOut");
// Type namespace: Photon.Voice.Unity
namespace Photon::Voice::Unity {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.Unity.UnityAudioOut
  // [TokenAttribute] Offset: FFFFFFFF
  class UnityAudioOut : public ::Photon::Voice::AudioOutDelayControl_1<float> {
    public:
    public:
    // private readonly UnityEngine.AudioSource source
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::AudioSource* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    public:
    // Creating conversion operator: operator ::UnityEngine::AudioSource*
    constexpr operator ::UnityEngine::AudioSource*() const noexcept {
      return source;
    }
    // Get instance field reference: private readonly UnityEngine.AudioSource source
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_source();
    // public System.Void .ctor(UnityEngine.AudioSource audioSource, Photon.Voice.AudioOutDelayControl/Photon.Voice.PlayDelayConfig playDelayConfig, Photon.Voice.ILogger logger, System.String logPrefix, System.Boolean debugInfo)
    // Offset: 0x1172B24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnityAudioOut* New_ctor(::UnityEngine::AudioSource* audioSource, ::Photon::Voice::AudioOutDelayControl::PlayDelayConfig* playDelayConfig, ::Photon::Voice::ILogger* logger, ::StringW logPrefix, bool debugInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::Unity::UnityAudioOut::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnityAudioOut*, creationType>(audioSource, playDelayConfig, logger, logPrefix, debugInfo)));
    }
    // public System.Void OutWrite(System.Single[] data, System.Int32 offsetSamples)
    // Offset: 0x1172D00
    void OutWrite(::ArrayW<float> data, int offsetSamples);
    // public override System.Int32 get_OutPos()
    // Offset: 0x1172C1C
    // Implemented from: Photon.Voice.AudioOutDelayControl`1
    // Base method: System.Int32 AudioOutDelayControl_1::get_OutPos()
    int get_OutPos();
    // public override System.Void OutCreate(System.Int32 frequency, System.Int32 channels, System.Int32 bufferSamples)
    // Offset: 0x1172C38
    // Implemented from: Photon.Voice.AudioOutDelayControl`1
    // Base method: System.Void AudioOutDelayControl_1::OutCreate(System.Int32 frequency, System.Int32 channels, System.Int32 bufferSamples)
    void OutCreate(int frequency, int channels, int bufferSamples);
    // public override System.Void OutStart()
    // Offset: 0x1172CE4
    // Implemented from: Photon.Voice.AudioOutDelayControl`1
    // Base method: System.Void AudioOutDelayControl_1::OutStart()
    void OutStart();
    // public override System.Void Stop()
    // Offset: 0x1172D44
    // Implemented from: Photon.Voice.AudioOutDelayControl`1
    // Base method: System.Void AudioOutDelayControl_1::Stop()
    void Stop();
  }; // Photon.Voice.Unity.UnityAudioOut
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityAudioOut::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityAudioOut::OutWrite
// Il2CppName: OutWrite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UnityAudioOut::*)(::ArrayW<float>, int)>(&Photon::Voice::Unity::UnityAudioOut::OutWrite)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* offsetSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityAudioOut*), "OutWrite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, offsetSamples});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityAudioOut::get_OutPos
// Il2CppName: get_OutPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Voice::Unity::UnityAudioOut::*)()>(&Photon::Voice::Unity::UnityAudioOut::get_OutPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityAudioOut*), "get_OutPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityAudioOut::OutCreate
// Il2CppName: OutCreate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UnityAudioOut::*)(int, int, int)>(&Photon::Voice::Unity::UnityAudioOut::OutCreate)> {
  static const MethodInfo* get() {
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bufferSamples = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityAudioOut*), "OutCreate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frequency, channels, bufferSamples});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityAudioOut::OutStart
// Il2CppName: OutStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UnityAudioOut::*)()>(&Photon::Voice::Unity::UnityAudioOut::OutStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityAudioOut*), "OutStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Voice::Unity::UnityAudioOut::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Voice::Unity::UnityAudioOut::*)()>(&Photon::Voice::Unity::UnityAudioOut::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::Unity::UnityAudioOut*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
