// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: WebRTCAudioLib
  class WebRTCAudioLib;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Voice::WebRTCAudioLib);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Voice::WebRTCAudioLib*, "Photon.Voice", "WebRTCAudioLib");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Voice.WebRTCAudioLib
  // [TokenAttribute] Offset: FFFFFFFF
  class WebRTCAudioLib : public ::Il2CppObject {
    public:
    // Nested type: ::Photon::Voice::WebRTCAudioLib::Error
    struct Error;
    // Nested type: ::Photon::Voice::WebRTCAudioLib::Param
    struct Param;
    // static field const value: static private System.String lib_name
    static constexpr const char* lib_name = "webrtc-audio";
    // Get static field: static private System.String lib_name
    static ::StringW _get_lib_name();
    // Set static field: static private System.String lib_name
    static void _set_lib_name(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x1BDEAB0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebRTCAudioLib* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::WebRTCAudioLib::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebRTCAudioLib*, creationType>()));
    }
    // static public System.IntPtr webrtc_audio_processor_create(System.Int32 samplingRate, System.Int32 channels, System.Int32 frameSize, System.Int32 revSamplingRate, System.Int32 revChannels)
    // Offset: 0x1BDE704
    static ::System::IntPtr webrtc_audio_processor_create(int samplingRate, int channels, int frameSize, int revSamplingRate, int revChannels);
    // static public System.Int32 webrtc_audio_processor_init(System.IntPtr proc)
    // Offset: 0x1BDE7B4
    static int webrtc_audio_processor_init(::System::IntPtr proc);
    // static public System.Int32 webrtc_audio_processor_set_param(System.IntPtr proc, System.Int32 param, System.Int32 v)
    // Offset: 0x1BDE834
    static int webrtc_audio_processor_set_param(::System::IntPtr proc, int param, int v);
    // static public System.Int32 webrtc_audio_processor_process(System.IntPtr proc, System.Int16[] buffer, System.Int32 offset, out System.Boolean voiceDetected)
    // Offset: 0x1BDE8CC
    static int webrtc_audio_processor_process(::System::IntPtr proc, ::ArrayW<int16_t> buffer, int offset, ByRef<bool> voiceDetected);
    // static public System.Int32 webrtc_audio_processor_process_reverse(System.IntPtr proc, System.Int16[] buffer, System.Int32 bufferSize)
    // Offset: 0x1BDE990
    static int webrtc_audio_processor_process_reverse(::System::IntPtr proc, ::ArrayW<int16_t> buffer, int bufferSize);
    // static public System.Void webrtc_audio_processor_destroy(System.IntPtr proc)
    // Offset: 0x1BDEA30
    static void webrtc_audio_processor_destroy(::System::IntPtr proc);
  }; // Photon.Voice.WebRTCAudioLib
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_create
// Il2CppName: webrtc_audio_processor_create
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, int, int, int)>(&Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_create)> {
  static const MethodInfo* get() {
    static auto* samplingRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* revSamplingRate = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* revChannels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioLib*), "webrtc_audio_processor_create", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samplingRate, channels, frameSize, revSamplingRate, revChannels});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_init
// Il2CppName: webrtc_audio_processor_init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr)>(&Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_init)> {
  static const MethodInfo* get() {
    static auto* proc = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioLib*), "webrtc_audio_processor_init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proc});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_set_param
// Il2CppName: webrtc_audio_processor_set_param
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, int, int)>(&Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_set_param)> {
  static const MethodInfo* get() {
    static auto* proc = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* v = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioLib*), "webrtc_audio_processor_set_param", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proc, param, v});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_process
// Il2CppName: webrtc_audio_processor_process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<int16_t>, int, ByRef<bool>)>(&Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_process)> {
  static const MethodInfo* get() {
    static auto* proc = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voiceDetected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioLib*), "webrtc_audio_processor_process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proc, buffer, offset, voiceDetected});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_process_reverse
// Il2CppName: webrtc_audio_processor_process_reverse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::System::IntPtr, ::ArrayW<int16_t>, int)>(&Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_process_reverse)> {
  static const MethodInfo* get() {
    static auto* proc = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* bufferSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioLib*), "webrtc_audio_processor_process_reverse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proc, buffer, bufferSize});
  }
};
// Writing MetadataGetter for method: Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_destroy
// Il2CppName: webrtc_audio_processor_destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::IntPtr)>(&Photon::Voice::WebRTCAudioLib::webrtc_audio_processor_destroy)> {
  static const MethodInfo* get() {
    static auto* proc = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Voice::WebRTCAudioLib*), "webrtc_audio_processor_destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{proc});
  }
};
