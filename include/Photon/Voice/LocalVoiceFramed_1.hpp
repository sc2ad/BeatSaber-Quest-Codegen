// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Voice.LocalVoiceFramedBase
#include "Photon/Voice/LocalVoiceFramedBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice
namespace Photon::Voice {
  // Forward declaring type: Framer`1<T>
  template<typename T>
  class Framer_1;
  // Forward declaring type: IProcessor`1<T>
  template<typename T>
  class IProcessor_1;
  // Forward declaring type: FactoryPrimitiveArrayPool`1<T>
  template<typename T>
  class FactoryPrimitiveArrayPool_1;
  // Forward declaring type: VoiceClient
  class VoiceClient;
  // Forward declaring type: IEncoder
  class IEncoder;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AutoResetEvent
  class AutoResetEvent;
}
// Completed forward declares
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // Forward declaring type: LocalVoiceFramed`1<T>
  template<typename T>
  class LocalVoiceFramed_1;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::Photon::Voice::LocalVoiceFramed_1, "Photon.Voice", "LocalVoiceFramed`1");
// Type namespace: Photon.Voice
namespace Photon::Voice {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Voice.LocalVoiceFramed`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T>
  class LocalVoiceFramed_1 : public ::Photon::Voice::LocalVoiceFramedBase {
    public:
    public:
    // private Photon.Voice.Framer`1<T> framer
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::Framer_1<T>* framer;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Framer_1<T>*) == 0x8);
    // private System.Int32 preProcessorsCnt
    // Size: 0x4
    // Offset: 0x0
    int preProcessorsCnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<Photon.Voice.IProcessor`1<T>> processors
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::List_1<::Photon::Voice::IProcessor_1<T>*>* processors;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Voice::IProcessor_1<T>*>*) == 0x8);
    // private System.Boolean dataEncodeThreadStarted
    // Size: 0x1
    // Offset: 0x0
    bool dataEncodeThreadStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Collections.Generic.Queue`1<T[]> pushDataQueue
    // Size: 0x8
    // Offset: 0x0
    ::System::Collections::Generic::Queue_1<::ArrayW<T>>* pushDataQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::ArrayW<T>>*) == 0x8);
    // private System.Threading.AutoResetEvent pushDataQueueReady
    // Size: 0x8
    // Offset: 0x0
    ::System::Threading::AutoResetEvent* pushDataQueueReady;
    // Field size check
    static_assert(sizeof(::System::Threading::AutoResetEvent*) == 0x8);
    // private Photon.Voice.FactoryPrimitiveArrayPool`1<T> bufferFactory
    // Size: 0x8
    // Offset: 0x0
    ::Photon::Voice::FactoryPrimitiveArrayPool_1<T>* bufferFactory;
    // Field size check
    static_assert(sizeof(::Photon::Voice::FactoryPrimitiveArrayPool_1<T>*) == 0x8);
    // private System.Int32 framesSkippedNextLog
    // Size: 0x4
    // Offset: 0x0
    int framesSkippedNextLog;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 framesSkipped
    // Size: 0x4
    // Offset: 0x0
    int framesSkipped;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean exitThread
    // Size: 0x1
    // Offset: 0x0
    bool exitThread;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 processNullFramesCnt
    // Size: 0x4
    // Offset: 0x0
    int processNullFramesCnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.Framer`1<T> framer
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Framer_1<T>*& dyn_framer() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_framer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framer"))->offset;
      return *reinterpret_cast<::Photon::Voice::Framer_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 preProcessorsCnt
    [[deprecated("Use field access instead!")]] int& dyn_preProcessorsCnt() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_preProcessorsCnt");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "preProcessorsCnt"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.List`1<Photon.Voice.IProcessor`1<T>> processors
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Voice::IProcessor_1<T>*>*& dyn_processors() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_processors");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "processors"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::List_1<::Photon::Voice::IProcessor_1<T>*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean dataEncodeThreadStarted
    [[deprecated("Use field access instead!")]] bool& dyn_dataEncodeThreadStarted() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_dataEncodeThreadStarted");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "dataEncodeThreadStarted"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Collections.Generic.Queue`1<T[]> pushDataQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::ArrayW<T>>*& dyn_pushDataQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_pushDataQueue");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pushDataQueue"))->offset;
      return *reinterpret_cast<::System::Collections::Generic::Queue_1<::ArrayW<T>>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Threading.AutoResetEvent pushDataQueueReady
    [[deprecated("Use field access instead!")]] ::System::Threading::AutoResetEvent*& dyn_pushDataQueueReady() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_pushDataQueueReady");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "pushDataQueueReady"))->offset;
      return *reinterpret_cast<::System::Threading::AutoResetEvent**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private Photon.Voice.FactoryPrimitiveArrayPool`1<T> bufferFactory
    [[deprecated("Use field access instead!")]] ::Photon::Voice::FactoryPrimitiveArrayPool_1<T>*& dyn_bufferFactory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_bufferFactory");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "bufferFactory"))->offset;
      return *reinterpret_cast<::Photon::Voice::FactoryPrimitiveArrayPool_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 framesSkippedNextLog
    [[deprecated("Use field access instead!")]] int& dyn_framesSkippedNextLog() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_framesSkippedNextLog");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framesSkippedNextLog"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 framesSkipped
    [[deprecated("Use field access instead!")]] int& dyn_framesSkipped() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_framesSkipped");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "framesSkipped"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean exitThread
    [[deprecated("Use field access instead!")]] bool& dyn_exitThread() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_exitThread");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "exitThread"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Int32 processNullFramesCnt
    [[deprecated("Use field access instead!")]] int& dyn_processNullFramesCnt() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::dyn_processNullFramesCnt");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "processNullFramesCnt"))->offset;
      return *reinterpret_cast<int*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public Photon.Voice.FactoryPrimitiveArrayPool`1<T> get_BufferFactory()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::Photon::Voice::FactoryPrimitiveArrayPool_1<T>* get_BufferFactory() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::get_BufferFactory");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_BufferFactory", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<::Photon::Voice::FactoryPrimitiveArrayPool_1<T>*, false>(this, ___internal__method);
    }
    // public System.Boolean get_PushDataAsyncReady()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_PushDataAsyncReady() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::get_PushDataAsyncReady");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_PushDataAsyncReady", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method);
    }
    // protected T[] processFrame(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::ArrayW<T> processFrame(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::processFrame");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "processFrame", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf)})));
      return ::il2cpp_utils::RunMethodRethrow<::ArrayW<T>, false>(this, ___internal__method, buf);
    }
    // public System.Void AddPostProcessor(params Photon.Voice.IProcessor`1<T>[] processors)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddPostProcessor(::ArrayW<::Photon::Voice::IProcessor_1<T>*> processors) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::AddPostProcessor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPostProcessor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(processors)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, processors);
    }
    // public System.Void AddPreProcessor(params Photon.Voice.IProcessor`1<T>[] processors)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AddPreProcessor(::ArrayW<::Photon::Voice::IProcessor_1<T>*> processors) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::AddPreProcessor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddPreProcessor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(processors)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, processors);
    }
    // public System.Void ClearProcessors()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ClearProcessors() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::ClearProcessors");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ClearProcessors", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void PushDataAsync(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PushDataAsync(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::PushDataAsync");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushDataAsync", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buf);
    }
    // private System.Void PushDataAsyncThread()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PushDataAsyncThread() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::PushDataAsyncThread");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushDataAsyncThread", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
    // public System.Void PushData(T[] buf)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void PushData(::ArrayW<T> buf) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::PushData");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "PushData", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(buf)})));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method, buf);
    }
    // System.Void .ctor(Photon.Voice.VoiceClient voiceClient, Photon.Voice.IEncoder encoder, System.Byte id, Photon.Voice.VoiceInfo voiceInfo, System.Int32 channelId, System.Int32 frameSize)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Photon.Voice.LocalVoiceFramedBase
    // Base method: System.Void LocalVoiceFramedBase::.ctor(Photon.Voice.VoiceClient voiceClient, Photon.Voice.IEncoder encoder, System.Byte id, Photon.Voice.VoiceInfo voiceInfo, System.Int32 channelId, System.Int32 frameSize)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalVoiceFramed_1<T>* New_ctor(::Photon::Voice::VoiceClient* voiceClient, ::Photon::Voice::IEncoder* encoder, uint8_t id, ::Photon::Voice::VoiceInfo voiceInfo, int channelId, int frameSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalVoiceFramed_1<T>*, creationType>(voiceClient, encoder, id, voiceInfo, channelId, frameSize)));
    }
    // public override System.Void Dispose()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: Photon.Voice.LocalVoice
    // Base method: System.Void LocalVoice::Dispose()
    void Dispose() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Voice::LocalVoiceFramed_1::Dispose");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Photon::Voice::LocalVoice*), -1));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___internal__method);
    }
  }; // Photon.Voice.LocalVoiceFramed`1
  // Could not write size check! Type: Photon.Voice.LocalVoiceFramed`1 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
