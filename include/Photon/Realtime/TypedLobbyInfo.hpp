// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Realtime.TypedLobby
#include "Photon/Realtime/TypedLobby.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: TypedLobbyInfo
  class TypedLobbyInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::TypedLobbyInfo);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::TypedLobbyInfo*, "Photon.Realtime", "TypedLobbyInfo");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Realtime.TypedLobbyInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class TypedLobbyInfo : public ::Photon::Realtime::TypedLobby {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x1C
    char ___base_padding[0x3] = {};
    public:
    // public System.Int32 PlayerCount
    // Size: 0x4
    // Offset: 0x1C
    int PlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 RoomCount
    // Size: 0x4
    // Offset: 0x20
    int RoomCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Int32 PlayerCount
    [[deprecated("Use field access instead!")]] int& dyn_PlayerCount();
    // Get instance field reference: public System.Int32 RoomCount
    [[deprecated("Use field access instead!")]] int& dyn_RoomCount();
    // public System.Void .ctor()
    // Offset: 0x1BD0DE8
    // Implemented from: Photon.Realtime.TypedLobby
    // Base method: System.Void TypedLobby::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypedLobbyInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::TypedLobbyInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypedLobbyInfo*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1BD0C50
    // Implemented from: Photon.Realtime.TypedLobby
    // Base method: System.String TypedLobby::ToString()
    ::StringW ToString();
  }; // Photon.Realtime.TypedLobbyInfo
  #pragma pack(pop)
  static check_size<sizeof(TypedLobbyInfo), 32 + sizeof(int)> __Photon_Realtime_TypedLobbyInfoSizeCheck;
  static_assert(sizeof(TypedLobbyInfo) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::TypedLobbyInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::TypedLobbyInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::TypedLobbyInfo::*)()>(&Photon::Realtime::TypedLobbyInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::TypedLobbyInfo*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
