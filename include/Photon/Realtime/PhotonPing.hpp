// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Completed forward declares
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: PhotonPing
  class PhotonPing;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::PhotonPing);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::PhotonPing*, "Photon.Realtime", "PhotonPing");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Realtime.PhotonPing
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonPing : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // public System.String DebugString
    // Size: 0x8
    // Offset: 0x10
    ::StringW DebugString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean Successful
    // Size: 0x1
    // Offset: 0x18
    bool Successful;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected internal System.Boolean GotResult
    // Size: 0x1
    // Offset: 0x19
    bool GotResult;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: GotResult and: PingLength
    char __padding2[0x2] = {};
    // protected internal System.Int32 PingLength
    // Size: 0x4
    // Offset: 0x1C
    int PingLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected internal System.Byte[] PingBytes
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<uint8_t> PingBytes;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // protected internal System.Byte PingId
    // Size: 0x1
    // Offset: 0x28
    uint8_t PingId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private readonly System.Random RandomIdProvider
    static ::System::Random* _get_RandomIdProvider();
    // Set static field: static private readonly System.Random RandomIdProvider
    static void _set_RandomIdProvider(::System::Random* value);
    // Get instance field reference: public System.String DebugString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DebugString();
    // Get instance field reference: public System.Boolean Successful
    [[deprecated("Use field access instead!")]] bool& dyn_Successful();
    // Get instance field reference: protected internal System.Boolean GotResult
    [[deprecated("Use field access instead!")]] bool& dyn_GotResult();
    // Get instance field reference: protected internal System.Int32 PingLength
    [[deprecated("Use field access instead!")]] int& dyn_PingLength();
    // Get instance field reference: protected internal System.Byte[] PingBytes
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn_PingBytes();
    // Get instance field reference: protected internal System.Byte PingId
    [[deprecated("Use field access instead!")]] uint8_t& dyn_PingId();
    // protected System.Void .ctor()
    // Offset: 0x13384DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonPing* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::PhotonPing::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonPing*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x133856C
    static void _cctor();
    // public System.Boolean StartPing(System.String ip)
    // Offset: 0x1338330
    bool StartPing(::StringW ip);
    // public System.Boolean Done()
    // Offset: 0x1338390
    bool Done();
    // public System.Void Dispose()
    // Offset: 0x13383F0
    void Dispose();
    // protected internal System.Void Init()
    // Offset: 0x1338450
    void Init();
  }; // Photon.Realtime.PhotonPing
  #pragma pack(pop)
  static check_size<sizeof(PhotonPing), 40 + sizeof(uint8_t)> __Photon_Realtime_PhotonPingSizeCheck;
  static_assert(sizeof(PhotonPing) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::PhotonPing::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::PhotonPing::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Realtime::PhotonPing::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PhotonPing*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::PhotonPing::StartPing
// Il2CppName: StartPing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::PhotonPing::*)(::StringW)>(&Photon::Realtime::PhotonPing::StartPing)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PhotonPing*), "StartPing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::PhotonPing::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::PhotonPing::*)()>(&Photon::Realtime::PhotonPing::Done)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PhotonPing*), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::PhotonPing::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::PhotonPing::*)()>(&Photon::Realtime::PhotonPing::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PhotonPing*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::PhotonPing::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::PhotonPing::*)()>(&Photon::Realtime::PhotonPing::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PhotonPing*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
