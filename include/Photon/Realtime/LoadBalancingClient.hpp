// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ExitGames.Client.Photon.IPhotonPeerListener
#include "ExitGames/Client/Photon/IPhotonPeerListener.hpp"
// Including type: Photon.Realtime.ClientAppType
#include "Photon/Realtime/ClientAppType.hpp"
// Including type: Photon.Realtime.AuthModeOption
#include "Photon/Realtime/AuthModeOption.hpp"
// Including type: Photon.Realtime.EncryptionMode
#include "Photon/Realtime/EncryptionMode.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: ExitGames.Client.Photon.ConnectionProtocol
#include "ExitGames/Client/Photon/ConnectionProtocol.hpp"
// Including type: Photon.Realtime.PhotonPortDefinition
#include "Photon/Realtime/PhotonPortDefinition.hpp"
// Including type: Photon.Realtime.ServerConnection
#include "Photon/Realtime/ServerConnection.hpp"
// Including type: Photon.Realtime.ClientState
#include "Photon/Realtime/ClientState.hpp"
// Including type: Photon.Realtime.DisconnectCause
#include "Photon/Realtime/DisconnectCause.hpp"
// Including type: Photon.Realtime.JoinType
#include "Photon/Realtime/JoinType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: LoadBalancingPeer
  class LoadBalancingPeer;
  // Forward declaring type: AuthenticationValues
  class AuthenticationValues;
  // Forward declaring type: ConnectionCallbacksContainer
  class ConnectionCallbacksContainer;
  // Forward declaring type: MatchMakingCallbacksContainer
  class MatchMakingCallbacksContainer;
  // Forward declaring type: InRoomCallbacksContainer
  class InRoomCallbacksContainer;
  // Forward declaring type: LobbyCallbacksContainer
  class LobbyCallbacksContainer;
  // Forward declaring type: WebRpcCallbacksContainer
  class WebRpcCallbacksContainer;
  // Forward declaring type: ErrorInfoCallbacksContainer
  class ErrorInfoCallbacksContainer;
  // Forward declaring type: TypedLobby
  class TypedLobby;
  // Forward declaring type: TypedLobbyInfo
  class TypedLobbyInfo;
  // Forward declaring type: Player
  class Player;
  // Forward declaring type: Room
  class Room;
  // Forward declaring type: EnterRoomParams
  class EnterRoomParams;
  // Forward declaring type: RegionHandler
  class RegionHandler;
  // Forward declaring type: AppSettings
  class AppSettings;
  // Forward declaring type: FindFriendsOptions
  class FindFriendsOptions;
  // Forward declaring type: OpJoinRandomRoomParams
  class OpJoinRandomRoomParams;
  // Forward declaring type: WebFlags
  class WebFlags;
  // Forward declaring type: RaiseEventOptions
  class RaiseEventOptions;
  // Forward declaring type: RoomOptions
  class RoomOptions;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: EventData
  class EventData;
  // Forward declaring type: OperationResponse
  class OperationResponse;
  // Forward declaring type: SerializationProtocol
  struct SerializationProtocol;
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: SendOptions
  struct SendOptions;
  // Forward declaring type: DebugLevel
  struct DebugLevel;
  // Forward declaring type: StatusCode
  struct StatusCode;
  // Forward declaring type: DisconnectMessage
  class DisconnectMessage;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: LoadBalancingClient
  class LoadBalancingClient;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::LoadBalancingClient);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::LoadBalancingClient*, "Photon.Realtime", "LoadBalancingClient");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Realtime.LoadBalancingClient
  // [TokenAttribute] Offset: FFFFFFFF
  class LoadBalancingClient : public ::Il2CppObject/*, public ::ExitGames::Client::Photon::IPhotonPeerListener*/ {
    public:
    // Nested type: ::Photon::Realtime::LoadBalancingClient::EncryptionDataParameters
    class EncryptionDataParameters;
    // Nested type: ::Photon::Realtime::LoadBalancingClient::CallbackTargetChange
    class CallbackTargetChange;
    public:
    // private Photon.Realtime.LoadBalancingPeer <LoadBalancingPeer>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Realtime::LoadBalancingPeer* LoadBalancingPeer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::LoadBalancingPeer*) == 0x8);
    // private System.String <AppVersion>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW AppVersion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <AppId>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW AppId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Realtime.ClientAppType <ClientType>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::Photon::Realtime::ClientAppType ClientType;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::ClientAppType) == 0x4);
    // private Photon.Realtime.AuthenticationValues <AuthValues>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::Photon::Realtime::AuthenticationValues* AuthValues;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::AuthenticationValues*) == 0x8);
    // public Photon.Realtime.AuthModeOption AuthMode
    // Size: 0x4
    // Offset: 0x38
    ::Photon::Realtime::AuthModeOption AuthMode;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::AuthModeOption) == 0x4);
    // public Photon.Realtime.EncryptionMode EncryptionMode
    // Size: 0x4
    // Offset: 0x3C
    ::Photon::Realtime::EncryptionMode EncryptionMode;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::EncryptionMode) == 0x4);
    // private System.Nullable`1<ExitGames.Client.Photon.ConnectionProtocol> <ExpectedProtocol>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x40
    ::System::Nullable_1<::ExitGames::Client::Photon::ConnectionProtocol> ExpectedProtocol;
    // private System.Object tokenCache
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* tokenCache;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean <IsUsingNameServer>k__BackingField
    // Size: 0x1
    // Offset: 0x50
    bool IsUsingNameServer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.String NameServerHost
    // Size: 0x8
    // Offset: 0x58
    ::StringW NameServerHost;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <UseAlternativeUdpPorts>k__BackingField
    // Size: 0x1
    // Offset: 0x60
    bool UseAlternativeUdpPorts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public Photon.Realtime.PhotonPortDefinition ServerPortOverrides
    // Size: 0x6
    // Offset: 0x62
    ::Photon::Realtime::PhotonPortDefinition ServerPortOverrides;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::PhotonPortDefinition) == 0x6);
    // private System.Boolean <EnableProtocolFallback>k__BackingField
    // Size: 0x1
    // Offset: 0x68
    bool EnableProtocolFallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.String <MasterServerAddress>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::StringW MasterServerAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <GameServerAddress>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::StringW GameServerAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Realtime.ServerConnection <Server>k__BackingField
    // Size: 0x4
    // Offset: 0x80
    ::Photon::Realtime::ServerConnection Server;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::ServerConnection) == 0x4);
    // public System.String ProxyServerAddress
    // Size: 0x8
    // Offset: 0x88
    ::StringW ProxyServerAddress;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private Photon.Realtime.ClientState state
    // Size: 0x4
    // Offset: 0x90
    ::Photon::Realtime::ClientState state;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::ClientState) == 0x4);
    // private System.Action`2<Photon.Realtime.ClientState,Photon.Realtime.ClientState> StateChanged
    // Size: 0x8
    // Offset: 0x98
    ::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>* StateChanged;
    // Field size check
    static_assert(sizeof(::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>*) == 0x8);
    // private System.Action`1<ExitGames.Client.Photon.EventData> EventReceived
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action_1<::ExitGames::Client::Photon::EventData*>* EventReceived;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ExitGames::Client::Photon::EventData*>*) == 0x8);
    // private System.Action`1<ExitGames.Client.Photon.OperationResponse> OpResponseReceived
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>* OpResponseReceived;
    // Field size check
    static_assert(sizeof(::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>*) == 0x8);
    // public Photon.Realtime.ConnectionCallbacksContainer ConnectionCallbackTargets
    // Size: 0x8
    // Offset: 0xB0
    ::Photon::Realtime::ConnectionCallbacksContainer* ConnectionCallbackTargets;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::ConnectionCallbacksContainer*) == 0x8);
    // public Photon.Realtime.MatchMakingCallbacksContainer MatchMakingCallbackTargets
    // Size: 0x8
    // Offset: 0xB8
    ::Photon::Realtime::MatchMakingCallbacksContainer* MatchMakingCallbackTargets;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::MatchMakingCallbacksContainer*) == 0x8);
    // Photon.Realtime.InRoomCallbacksContainer InRoomCallbackTargets
    // Size: 0x8
    // Offset: 0xC0
    ::Photon::Realtime::InRoomCallbacksContainer* InRoomCallbackTargets;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::InRoomCallbacksContainer*) == 0x8);
    // Photon.Realtime.LobbyCallbacksContainer LobbyCallbackTargets
    // Size: 0x8
    // Offset: 0xC8
    ::Photon::Realtime::LobbyCallbacksContainer* LobbyCallbackTargets;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::LobbyCallbacksContainer*) == 0x8);
    // Photon.Realtime.WebRpcCallbacksContainer WebRpcCallbackTargets
    // Size: 0x8
    // Offset: 0xD0
    ::Photon::Realtime::WebRpcCallbacksContainer* WebRpcCallbackTargets;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::WebRpcCallbacksContainer*) == 0x8);
    // Photon.Realtime.ErrorInfoCallbacksContainer ErrorInfoCallbackTargets
    // Size: 0x8
    // Offset: 0xD8
    ::Photon::Realtime::ErrorInfoCallbacksContainer* ErrorInfoCallbackTargets;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::ErrorInfoCallbacksContainer*) == 0x8);
    // private Photon.Realtime.DisconnectCause <DisconnectedCause>k__BackingField
    // Size: 0x4
    // Offset: 0xE0
    ::Photon::Realtime::DisconnectCause DisconnectedCause;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::DisconnectCause) == 0x4);
    // private Photon.Realtime.TypedLobby <CurrentLobby>k__BackingField
    // Size: 0x8
    // Offset: 0xE8
    ::Photon::Realtime::TypedLobby* CurrentLobby;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::TypedLobby*) == 0x8);
    // public System.Boolean EnableLobbyStatistics
    // Size: 0x1
    // Offset: 0xF0
    bool EnableLobbyStatistics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Collections.Generic.List`1<Photon.Realtime.TypedLobbyInfo> lobbyStatistics
    // Size: 0x8
    // Offset: 0xF8
    ::System::Collections::Generic::List_1<::Photon::Realtime::TypedLobbyInfo*>* lobbyStatistics;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Realtime::TypedLobbyInfo*>*) == 0x8);
    // private Photon.Realtime.Player <LocalPlayer>k__BackingField
    // Size: 0x8
    // Offset: 0x100
    ::Photon::Realtime::Player* LocalPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private Photon.Realtime.Room <CurrentRoom>k__BackingField
    // Size: 0x8
    // Offset: 0x108
    ::Photon::Realtime::Room* CurrentRoom;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Room*) == 0x8);
    // private System.Int32 <PlayersOnMasterCount>k__BackingField
    // Size: 0x4
    // Offset: 0x110
    int PlayersOnMasterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <PlayersInRoomsCount>k__BackingField
    // Size: 0x4
    // Offset: 0x114
    int PlayersInRoomsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <RoomsCount>k__BackingField
    // Size: 0x4
    // Offset: 0x118
    int RoomsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Realtime.JoinType lastJoinType
    // Size: 0x4
    // Offset: 0x11C
    ::Photon::Realtime::JoinType lastJoinType;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::JoinType) == 0x4);
    // private Photon.Realtime.EnterRoomParams enterRoomParamsCache
    // Size: 0x8
    // Offset: 0x120
    ::Photon::Realtime::EnterRoomParams* enterRoomParamsCache;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::EnterRoomParams*) == 0x8);
    // private ExitGames.Client.Photon.OperationResponse failedRoomEntryOperation
    // Size: 0x8
    // Offset: 0x128
    ::ExitGames::Client::Photon::OperationResponse* failedRoomEntryOperation;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::OperationResponse*) == 0x8);
    // private System.String[] friendListRequested
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<::StringW> friendListRequested;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String <CloudRegion>k__BackingField
    // Size: 0x8
    // Offset: 0x138
    ::StringW CloudRegion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <CurrentCluster>k__BackingField
    // Size: 0x8
    // Offset: 0x140
    ::StringW CurrentCluster;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Photon.Realtime.RegionHandler RegionHandler
    // Size: 0x8
    // Offset: 0x148
    ::Photon::Realtime::RegionHandler* RegionHandler;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::RegionHandler*) == 0x8);
    // private System.String bestRegionSummaryFromStorage
    // Size: 0x8
    // Offset: 0x150
    ::StringW bestRegionSummaryFromStorage;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String SummaryToCache
    // Size: 0x8
    // Offset: 0x158
    ::StringW SummaryToCache;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean connectToBestRegion
    // Size: 0x1
    // Offset: 0x160
    bool connectToBestRegion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Collections.Generic.Queue`1<Photon.Realtime.LoadBalancingClient/Photon.Realtime.CallbackTargetChange> callbackTargetChanges
    // Size: 0x8
    // Offset: 0x168
    ::System::Collections::Generic::Queue_1<::Photon::Realtime::LoadBalancingClient::CallbackTargetChange*>* callbackTargetChanges;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Photon::Realtime::LoadBalancingClient::CallbackTargetChange*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.Object> callbackTargets
    // Size: 0x8
    // Offset: 0x170
    ::System::Collections::Generic::HashSet_1<::Il2CppObject*>* callbackTargets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::Il2CppObject*>*) == 0x8);
    // public System.Int32 NameServerPortInAppSettings
    // Size: 0x4
    // Offset: 0x178
    int NameServerPortInAppSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::ExitGames::Client::Photon::IPhotonPeerListener
    operator ::ExitGames::Client::Photon::IPhotonPeerListener() noexcept {
      return *reinterpret_cast<::ExitGames::Client::Photon::IPhotonPeerListener*>(this);
    }
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Int32> ProtocolToNameServerPort
    static ::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, int>* _get_ProtocolToNameServerPort();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<ExitGames.Client.Photon.ConnectionProtocol,System.Int32> ProtocolToNameServerPort
    static void _set_ProtocolToNameServerPort(::System::Collections::Generic::Dictionary_2<::ExitGames::Client::Photon::ConnectionProtocol, int>* value);
    // static field const value: static private System.Int32 FriendRequestListMax
    static constexpr const int FriendRequestListMax = 512;
    // Get static field: static private System.Int32 FriendRequestListMax
    static int _get_FriendRequestListMax();
    // Set static field: static private System.Int32 FriendRequestListMax
    static void _set_FriendRequestListMax(int value);
    // Get instance field reference: private Photon.Realtime.LoadBalancingPeer <LoadBalancingPeer>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::LoadBalancingPeer*& dyn_$LoadBalancingPeer$k__BackingField();
    // Get instance field reference: private System.String <AppVersion>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$AppVersion$k__BackingField();
    // Get instance field reference: private System.String <AppId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$AppId$k__BackingField();
    // Get instance field reference: private Photon.Realtime.ClientAppType <ClientType>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::ClientAppType& dyn_$ClientType$k__BackingField();
    // Get instance field reference: private Photon.Realtime.AuthenticationValues <AuthValues>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::AuthenticationValues*& dyn_$AuthValues$k__BackingField();
    // Get instance field reference: public Photon.Realtime.AuthModeOption AuthMode
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::AuthModeOption& dyn_AuthMode();
    // Get instance field reference: public Photon.Realtime.EncryptionMode EncryptionMode
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::EncryptionMode& dyn_EncryptionMode();
    // Get instance field reference: private System.Nullable`1<ExitGames.Client.Photon.ConnectionProtocol> <ExpectedProtocol>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<::ExitGames::Client::Photon::ConnectionProtocol>& dyn_$ExpectedProtocol$k__BackingField();
    // Get instance field reference: private System.Object tokenCache
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_tokenCache();
    // Get instance field reference: private System.Boolean <IsUsingNameServer>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsUsingNameServer$k__BackingField();
    // Get instance field reference: public System.String NameServerHost
    [[deprecated("Use field access instead!")]] ::StringW& dyn_NameServerHost();
    // Get instance field reference: private System.Boolean <UseAlternativeUdpPorts>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$UseAlternativeUdpPorts$k__BackingField();
    // Get instance field reference: public Photon.Realtime.PhotonPortDefinition ServerPortOverrides
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::PhotonPortDefinition& dyn_ServerPortOverrides();
    // Get instance field reference: private System.Boolean <EnableProtocolFallback>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$EnableProtocolFallback$k__BackingField();
    // Get instance field reference: private System.String <MasterServerAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$MasterServerAddress$k__BackingField();
    // Get instance field reference: private System.String <GameServerAddress>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$GameServerAddress$k__BackingField();
    // Get instance field reference: private Photon.Realtime.ServerConnection <Server>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::ServerConnection& dyn_$Server$k__BackingField();
    // Get instance field reference: public System.String ProxyServerAddress
    [[deprecated("Use field access instead!")]] ::StringW& dyn_ProxyServerAddress();
    // Get instance field reference: private Photon.Realtime.ClientState state
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::ClientState& dyn_state();
    // Get instance field reference: private System.Action`2<Photon.Realtime.ClientState,Photon.Realtime.ClientState> StateChanged
    [[deprecated("Use field access instead!")]] ::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>*& dyn_StateChanged();
    // Get instance field reference: private System.Action`1<ExitGames.Client.Photon.EventData> EventReceived
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ExitGames::Client::Photon::EventData*>*& dyn_EventReceived();
    // Get instance field reference: private System.Action`1<ExitGames.Client.Photon.OperationResponse> OpResponseReceived
    [[deprecated("Use field access instead!")]] ::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>*& dyn_OpResponseReceived();
    // Get instance field reference: public Photon.Realtime.ConnectionCallbacksContainer ConnectionCallbackTargets
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::ConnectionCallbacksContainer*& dyn_ConnectionCallbackTargets();
    // Get instance field reference: public Photon.Realtime.MatchMakingCallbacksContainer MatchMakingCallbackTargets
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::MatchMakingCallbacksContainer*& dyn_MatchMakingCallbackTargets();
    // Get instance field reference: Photon.Realtime.InRoomCallbacksContainer InRoomCallbackTargets
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::InRoomCallbacksContainer*& dyn_InRoomCallbackTargets();
    // Get instance field reference: Photon.Realtime.LobbyCallbacksContainer LobbyCallbackTargets
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::LobbyCallbacksContainer*& dyn_LobbyCallbackTargets();
    // Get instance field reference: Photon.Realtime.WebRpcCallbacksContainer WebRpcCallbackTargets
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::WebRpcCallbacksContainer*& dyn_WebRpcCallbackTargets();
    // Get instance field reference: Photon.Realtime.ErrorInfoCallbacksContainer ErrorInfoCallbackTargets
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::ErrorInfoCallbacksContainer*& dyn_ErrorInfoCallbackTargets();
    // Get instance field reference: private Photon.Realtime.DisconnectCause <DisconnectedCause>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::DisconnectCause& dyn_$DisconnectedCause$k__BackingField();
    // Get instance field reference: private Photon.Realtime.TypedLobby <CurrentLobby>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::TypedLobby*& dyn_$CurrentLobby$k__BackingField();
    // Get instance field reference: public System.Boolean EnableLobbyStatistics
    [[deprecated("Use field access instead!")]] bool& dyn_EnableLobbyStatistics();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<Photon.Realtime.TypedLobbyInfo> lobbyStatistics
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Realtime::TypedLobbyInfo*>*& dyn_lobbyStatistics();
    // Get instance field reference: private Photon.Realtime.Player <LocalPlayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_$LocalPlayer$k__BackingField();
    // Get instance field reference: private Photon.Realtime.Room <CurrentRoom>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Room*& dyn_$CurrentRoom$k__BackingField();
    // Get instance field reference: private System.Int32 <PlayersOnMasterCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$PlayersOnMasterCount$k__BackingField();
    // Get instance field reference: private System.Int32 <PlayersInRoomsCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$PlayersInRoomsCount$k__BackingField();
    // Get instance field reference: private System.Int32 <RoomsCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$RoomsCount$k__BackingField();
    // Get instance field reference: private Photon.Realtime.JoinType lastJoinType
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::JoinType& dyn_lastJoinType();
    // Get instance field reference: private Photon.Realtime.EnterRoomParams enterRoomParamsCache
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::EnterRoomParams*& dyn_enterRoomParamsCache();
    // Get instance field reference: private ExitGames.Client.Photon.OperationResponse failedRoomEntryOperation
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::OperationResponse*& dyn_failedRoomEntryOperation();
    // Get instance field reference: private System.String[] friendListRequested
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_friendListRequested();
    // Get instance field reference: private System.String <CloudRegion>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$CloudRegion$k__BackingField();
    // Get instance field reference: private System.String <CurrentCluster>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$CurrentCluster$k__BackingField();
    // Get instance field reference: public Photon.Realtime.RegionHandler RegionHandler
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::RegionHandler*& dyn_RegionHandler();
    // Get instance field reference: private System.String bestRegionSummaryFromStorage
    [[deprecated("Use field access instead!")]] ::StringW& dyn_bestRegionSummaryFromStorage();
    // Get instance field reference: public System.String SummaryToCache
    [[deprecated("Use field access instead!")]] ::StringW& dyn_SummaryToCache();
    // Get instance field reference: private System.Boolean connectToBestRegion
    [[deprecated("Use field access instead!")]] bool& dyn_connectToBestRegion();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<Photon.Realtime.LoadBalancingClient/Photon.Realtime.CallbackTargetChange> callbackTargetChanges
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Photon::Realtime::LoadBalancingClient::CallbackTargetChange*>*& dyn_callbackTargetChanges();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.Object> callbackTargets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::Il2CppObject*>*& dyn_callbackTargets();
    // Get instance field reference: public System.Int32 NameServerPortInAppSettings
    [[deprecated("Use field access instead!")]] int& dyn_NameServerPortInAppSettings();
    // public Photon.Realtime.LoadBalancingPeer get_LoadBalancingPeer()
    // Offset: 0x132BED4
    ::Photon::Realtime::LoadBalancingPeer* get_LoadBalancingPeer();
    // private System.Void set_LoadBalancingPeer(Photon.Realtime.LoadBalancingPeer value)
    // Offset: 0x132BEDC
    void set_LoadBalancingPeer(::Photon::Realtime::LoadBalancingPeer* value);
    // public ExitGames.Client.Photon.SerializationProtocol get_SerializationProtocol()
    // Offset: 0x132BEE4
    ::ExitGames::Client::Photon::SerializationProtocol get_SerializationProtocol();
    // public System.Void set_SerializationProtocol(ExitGames.Client.Photon.SerializationProtocol value)
    // Offset: 0x132BF00
    void set_SerializationProtocol(::ExitGames::Client::Photon::SerializationProtocol value);
    // public System.String get_AppVersion()
    // Offset: 0x132BF1C
    ::StringW get_AppVersion();
    // public System.Void set_AppVersion(System.String value)
    // Offset: 0x132BF24
    void set_AppVersion(::StringW value);
    // public System.String get_AppId()
    // Offset: 0x132BF2C
    ::StringW get_AppId();
    // public System.Void set_AppId(System.String value)
    // Offset: 0x132BF34
    void set_AppId(::StringW value);
    // public Photon.Realtime.ClientAppType get_ClientType()
    // Offset: 0x132BF3C
    ::Photon::Realtime::ClientAppType get_ClientType();
    // public System.Void set_ClientType(Photon.Realtime.ClientAppType value)
    // Offset: 0x132BF44
    void set_ClientType(::Photon::Realtime::ClientAppType value);
    // public Photon.Realtime.AuthenticationValues get_AuthValues()
    // Offset: 0x132BF4C
    ::Photon::Realtime::AuthenticationValues* get_AuthValues();
    // public System.Void set_AuthValues(Photon.Realtime.AuthenticationValues value)
    // Offset: 0x132BF54
    void set_AuthValues(::Photon::Realtime::AuthenticationValues* value);
    // public System.Nullable`1<ExitGames.Client.Photon.ConnectionProtocol> get_ExpectedProtocol()
    // Offset: 0x132BF5C
    ::System::Nullable_1<::ExitGames::Client::Photon::ConnectionProtocol> get_ExpectedProtocol();
    // public System.Void set_ExpectedProtocol(System.Nullable`1<ExitGames.Client.Photon.ConnectionProtocol> value)
    // Offset: 0x132BF64
    void set_ExpectedProtocol(::System::Nullable_1<::ExitGames::Client::Photon::ConnectionProtocol> value);
    // private System.Object get_TokenForInit()
    // Offset: 0x132BF6C
    ::Il2CppObject* get_TokenForInit();
    // public System.Boolean get_IsUsingNameServer()
    // Offset: 0x132BF8C
    bool get_IsUsingNameServer();
    // public System.Void set_IsUsingNameServer(System.Boolean value)
    // Offset: 0x132BF94
    void set_IsUsingNameServer(bool value);
    // public System.String get_NameServerAddress()
    // Offset: 0x132BFA0
    ::StringW get_NameServerAddress();
    // public System.Boolean get_UseAlternativeUdpPorts()
    // Offset: 0x132C19C
    bool get_UseAlternativeUdpPorts();
    // public System.Void set_UseAlternativeUdpPorts(System.Boolean value)
    // Offset: 0x132C1A4
    void set_UseAlternativeUdpPorts(bool value);
    // public System.Boolean get_EnableProtocolFallback()
    // Offset: 0x132C1B0
    bool get_EnableProtocolFallback();
    // public System.Void set_EnableProtocolFallback(System.Boolean value)
    // Offset: 0x132C1B8
    void set_EnableProtocolFallback(bool value);
    // public System.String get_CurrentServerAddress()
    // Offset: 0x132C1C4
    ::StringW get_CurrentServerAddress();
    // public System.String get_MasterServerAddress()
    // Offset: 0x132C1E0
    ::StringW get_MasterServerAddress();
    // public System.Void set_MasterServerAddress(System.String value)
    // Offset: 0x132C1E8
    void set_MasterServerAddress(::StringW value);
    // public System.String get_GameServerAddress()
    // Offset: 0x132C1F0
    ::StringW get_GameServerAddress();
    // protected internal System.Void set_GameServerAddress(System.String value)
    // Offset: 0x132C1F8
    void set_GameServerAddress(::StringW value);
    // public Photon.Realtime.ServerConnection get_Server()
    // Offset: 0x132C200
    ::Photon::Realtime::ServerConnection get_Server();
    // private System.Void set_Server(Photon.Realtime.ServerConnection value)
    // Offset: 0x132C208
    void set_Server(::Photon::Realtime::ServerConnection value);
    // public Photon.Realtime.ClientState get_State()
    // Offset: 0x132C210
    ::Photon::Realtime::ClientState get_State();
    // public System.Void set_State(Photon.Realtime.ClientState value)
    // Offset: 0x132C218
    void set_State(::Photon::Realtime::ClientState value);
    // public System.Boolean get_IsConnected()
    // Offset: 0x132873C
    bool get_IsConnected();
    // public System.Boolean get_IsConnectedAndReady()
    // Offset: 0x132C29C
    bool get_IsConnectedAndReady();
    // public Photon.Realtime.DisconnectCause get_DisconnectedCause()
    // Offset: 0x132C6AC
    ::Photon::Realtime::DisconnectCause get_DisconnectedCause();
    // protected System.Void set_DisconnectedCause(Photon.Realtime.DisconnectCause value)
    // Offset: 0x132C6B4
    void set_DisconnectedCause(::Photon::Realtime::DisconnectCause value);
    // public System.Boolean get_InLobby()
    // Offset: 0x132C6BC
    bool get_InLobby();
    // public Photon.Realtime.TypedLobby get_CurrentLobby()
    // Offset: 0x132C6CC
    ::Photon::Realtime::TypedLobby* get_CurrentLobby();
    // System.Void set_CurrentLobby(Photon.Realtime.TypedLobby value)
    // Offset: 0x132C6D4
    void set_CurrentLobby(::Photon::Realtime::TypedLobby* value);
    // public Photon.Realtime.Player get_LocalPlayer()
    // Offset: 0x132C6DC
    ::Photon::Realtime::Player* get_LocalPlayer();
    // System.Void set_LocalPlayer(Photon.Realtime.Player value)
    // Offset: 0x132C6E4
    void set_LocalPlayer(::Photon::Realtime::Player* value);
    // public System.String get_NickName()
    // Offset: 0x132C6EC
    ::StringW get_NickName();
    // public System.Void set_NickName(System.String value)
    // Offset: 0x132C708
    void set_NickName(::StringW value);
    // public System.String get_UserId()
    // Offset: 0x132C780
    ::StringW get_UserId();
    // public System.Void set_UserId(System.String value)
    // Offset: 0x132C798
    void set_UserId(::StringW value);
    // public Photon.Realtime.Room get_CurrentRoom()
    // Offset: 0x132C820
    ::Photon::Realtime::Room* get_CurrentRoom();
    // public System.Void set_CurrentRoom(Photon.Realtime.Room value)
    // Offset: 0x132C828
    void set_CurrentRoom(::Photon::Realtime::Room* value);
    // public System.Boolean get_InRoom()
    // Offset: 0x132C830
    bool get_InRoom();
    // public System.Int32 get_PlayersOnMasterCount()
    // Offset: 0x132C854
    int get_PlayersOnMasterCount();
    // System.Void set_PlayersOnMasterCount(System.Int32 value)
    // Offset: 0x132C85C
    void set_PlayersOnMasterCount(int value);
    // public System.Int32 get_PlayersInRoomsCount()
    // Offset: 0x132C864
    int get_PlayersInRoomsCount();
    // System.Void set_PlayersInRoomsCount(System.Int32 value)
    // Offset: 0x132C86C
    void set_PlayersInRoomsCount(int value);
    // public System.Int32 get_RoomsCount()
    // Offset: 0x132C874
    int get_RoomsCount();
    // System.Void set_RoomsCount(System.Int32 value)
    // Offset: 0x132C87C
    void set_RoomsCount(int value);
    // public System.Boolean get_IsFetchingFriendList()
    // Offset: 0x132C884
    bool get_IsFetchingFriendList();
    // public System.String get_CloudRegion()
    // Offset: 0x132C894
    ::StringW get_CloudRegion();
    // private System.Void set_CloudRegion(System.String value)
    // Offset: 0x132C89C
    void set_CloudRegion(::StringW value);
    // public System.String get_CurrentCluster()
    // Offset: 0x132C8A4
    ::StringW get_CurrentCluster();
    // private System.Void set_CurrentCluster(System.String value)
    // Offset: 0x132C8AC
    void set_CurrentCluster(::StringW value);
    // public System.Void add_StateChanged(System.Action`2<Photon.Realtime.ClientState,Photon.Realtime.ClientState> value)
    // Offset: 0x132C2D4
    void add_StateChanged(::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>* value);
    // public System.Void remove_StateChanged(System.Action`2<Photon.Realtime.ClientState,Photon.Realtime.ClientState> value)
    // Offset: 0x132C378
    void remove_StateChanged(::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>* value);
    // public System.Void add_EventReceived(System.Action`1<ExitGames.Client.Photon.EventData> value)
    // Offset: 0x132C41C
    void add_EventReceived(::System::Action_1<::ExitGames::Client::Photon::EventData*>* value);
    // public System.Void remove_EventReceived(System.Action`1<ExitGames.Client.Photon.EventData> value)
    // Offset: 0x132C4C0
    void remove_EventReceived(::System::Action_1<::ExitGames::Client::Photon::EventData*>* value);
    // public System.Void add_OpResponseReceived(System.Action`1<ExitGames.Client.Photon.OperationResponse> value)
    // Offset: 0x132C564
    void add_OpResponseReceived(::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>* value);
    // public System.Void remove_OpResponseReceived(System.Action`1<ExitGames.Client.Photon.OperationResponse> value)
    // Offset: 0x132C608
    void remove_OpResponseReceived(::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>* value);
    // public System.Void .ctor(ExitGames.Client.Photon.ConnectionProtocol protocol)
    // Offset: 0x132C8B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoadBalancingClient* New_ctor(::ExitGames::Client::Photon::ConnectionProtocol protocol) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::LoadBalancingClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoadBalancingClient*, creationType>(protocol)));
    }
    // public System.Void .ctor(System.String masterAddress, System.String appId, System.String gameVersion, ExitGames.Client.Photon.ConnectionProtocol protocol)
    // Offset: 0x132CCC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LoadBalancingClient* New_ctor(::StringW masterAddress, ::StringW appId, ::StringW gameVersion, ::ExitGames::Client::Photon::ConnectionProtocol protocol) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::LoadBalancingClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LoadBalancingClient*, creationType>(masterAddress, appId, gameVersion, protocol)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1335214
    static void _cctor();
    // private System.String GetNameServerAddress()
    // Offset: 0x132BFA4
    ::StringW GetNameServerAddress();
    // public System.Boolean ConnectUsingSettings(Photon.Realtime.AppSettings appSettings)
    // Offset: 0x132CD08
    bool ConnectUsingSettings(::Photon::Realtime::AppSettings* appSettings);
    // public System.Boolean Connect()
    // Offset: 0x132D038
    bool Connect();
    // public System.Boolean ConnectToMasterServer()
    // Offset: 0x132D044
    bool ConnectToMasterServer();
    // public System.Boolean ConnectToNameServer()
    // Offset: 0x132D1CC
    bool ConnectToNameServer();
    // public System.Boolean ConnectToRegionMaster(System.String region)
    // Offset: 0x132D37C
    bool ConnectToRegionMaster(::StringW region);
    // private System.Void CheckConnectSetupWebGl()
    // Offset: 0x132D8D8
    void CheckConnectSetupWebGl();
    // private System.Boolean Connect(System.String serverAddress, System.String proxyServerAddress, Photon.Realtime.ServerConnection serverType)
    // Offset: 0x132D8DC
    bool Connect(::StringW serverAddress, ::StringW proxyServerAddress, ::Photon::Realtime::ServerConnection serverType);
    // public System.Boolean ReconnectToMaster()
    // Offset: 0x132DB80
    bool ReconnectToMaster();
    // public System.Boolean ReconnectAndRejoin()
    // Offset: 0x132DD08
    bool ReconnectAndRejoin();
    // public System.Void Disconnect(Photon.Realtime.DisconnectCause cause)
    // Offset: 0x1328768
    void Disconnect(::Photon::Realtime::DisconnectCause cause);
    // private System.Void DisconnectToReconnect()
    // Offset: 0x132DEAC
    void DisconnectToReconnect();
    // public System.Void SimulateConnectionLoss(System.Boolean simulateTimeout)
    // Offset: 0x132DF10
    void SimulateConnectionLoss(bool simulateTimeout);
    // private System.Boolean CallAuthenticate()
    // Offset: 0x132D5A0
    bool CallAuthenticate();
    // public System.Void Service()
    // Offset: 0x132E314
    void Service();
    // private System.Boolean OpGetRegions()
    // Offset: 0x132E32C
    bool OpGetRegions();
    // public System.Boolean OpFindFriends(System.String[] friendsToFind, Photon.Realtime.FindFriendsOptions options)
    // Offset: 0x132E3B8
    bool OpFindFriends(::ArrayW<::StringW> friendsToFind, ::Photon::Realtime::FindFriendsOptions* options);
    // public System.Boolean OpJoinLobby(Photon.Realtime.TypedLobby lobby)
    // Offset: 0x132E6E4
    bool OpJoinLobby(::Photon::Realtime::TypedLobby* lobby);
    // public System.Boolean OpLeaveLobby()
    // Offset: 0x132E7C0
    bool OpLeaveLobby();
    // public System.Boolean OpJoinRandomRoom(Photon.Realtime.OpJoinRandomRoomParams opJoinRandomRoomParams)
    // Offset: 0x132E848
    bool OpJoinRandomRoom(::Photon::Realtime::OpJoinRandomRoomParams* opJoinRandomRoomParams);
    // public System.Boolean OpJoinRandomOrCreateRoom(Photon.Realtime.OpJoinRandomRoomParams opJoinRandomRoomParams, Photon.Realtime.EnterRoomParams createRoomParams)
    // Offset: 0x132E968
    bool OpJoinRandomOrCreateRoom(::Photon::Realtime::OpJoinRandomRoomParams* opJoinRandomRoomParams, ::Photon::Realtime::EnterRoomParams* createRoomParams);
    // public System.Boolean OpCreateRoom(Photon.Realtime.EnterRoomParams enterRoomParams)
    // Offset: 0x132EA9C
    bool OpCreateRoom(::Photon::Realtime::EnterRoomParams* enterRoomParams);
    // public System.Boolean OpJoinOrCreateRoom(Photon.Realtime.EnterRoomParams enterRoomParams)
    // Offset: 0x132EB64
    bool OpJoinOrCreateRoom(::Photon::Realtime::EnterRoomParams* enterRoomParams);
    // public System.Boolean OpJoinRoom(Photon.Realtime.EnterRoomParams enterRoomParams)
    // Offset: 0x132EC38
    bool OpJoinRoom(::Photon::Realtime::EnterRoomParams* enterRoomParams);
    // public System.Boolean OpRejoinRoom(System.String roomName)
    // Offset: 0x132ED10
    bool OpRejoinRoom(::StringW roomName);
    // public System.Boolean OpLeaveRoom(System.Boolean becomeInactive, System.Boolean sendAuthCookie)
    // Offset: 0x132EE08
    bool OpLeaveRoom(bool becomeInactive, bool sendAuthCookie);
    // public System.Boolean OpGetGameList(Photon.Realtime.TypedLobby typedLobby, System.String sqlLobbyFilter)
    // Offset: 0x132EED4
    bool OpGetGameList(::Photon::Realtime::TypedLobby* typedLobby, ::StringW sqlLobbyFilter);
    // public System.Boolean OpSetCustomPropertiesOfActor(System.Int32 actorNr, ExitGames.Client.Photon.Hashtable propertiesToSet, ExitGames.Client.Photon.Hashtable expectedProperties, Photon.Realtime.WebFlags webFlags)
    // Offset: 0x132EFCC
    bool OpSetCustomPropertiesOfActor(int actorNr, ::ExitGames::Client::Photon::Hashtable* propertiesToSet, ::ExitGames::Client::Photon::Hashtable* expectedProperties, ::Photon::Realtime::WebFlags* webFlags);
    // protected internal System.Boolean OpSetPropertiesOfActor(System.Int32 actorNr, ExitGames.Client.Photon.Hashtable actorProperties, ExitGames.Client.Photon.Hashtable expectedProperties, Photon.Realtime.WebFlags webFlags)
    // Offset: 0x132F390
    bool OpSetPropertiesOfActor(int actorNr, ::ExitGames::Client::Photon::Hashtable* actorProperties, ::ExitGames::Client::Photon::Hashtable* expectedProperties, ::Photon::Realtime::WebFlags* webFlags);
    // public System.Boolean OpSetCustomPropertiesOfRoom(ExitGames.Client.Photon.Hashtable propertiesToSet, ExitGames.Client.Photon.Hashtable expectedProperties, Photon.Realtime.WebFlags webFlags)
    // Offset: 0x132F810
    bool OpSetCustomPropertiesOfRoom(::ExitGames::Client::Photon::Hashtable* propertiesToSet, ::ExitGames::Client::Photon::Hashtable* expectedProperties, ::Photon::Realtime::WebFlags* webFlags);
    // protected internal System.Boolean OpSetPropertyOfRoom(System.Byte propCode, System.Object value)
    // Offset: 0x132FA78
    bool OpSetPropertyOfRoom(uint8_t propCode, ::Il2CppObject* value);
    // protected internal System.Boolean OpSetPropertiesOfRoom(ExitGames.Client.Photon.Hashtable gameProperties, ExitGames.Client.Photon.Hashtable expectedProperties, Photon.Realtime.WebFlags webFlags)
    // Offset: 0x132F944
    bool OpSetPropertiesOfRoom(::ExitGames::Client::Photon::Hashtable* gameProperties, ::ExitGames::Client::Photon::Hashtable* expectedProperties, ::Photon::Realtime::WebFlags* webFlags);
    // public System.Boolean OpRaiseEvent(System.Byte eventCode, System.Object customEventContent, Photon.Realtime.RaiseEventOptions raiseEventOptions, ExitGames.Client.Photon.SendOptions sendOptions)
    // Offset: 0x132FDF0
    bool OpRaiseEvent(uint8_t eventCode, ::Il2CppObject* customEventContent, ::Photon::Realtime::RaiseEventOptions* raiseEventOptions, ::ExitGames::Client::Photon::SendOptions sendOptions);
    // public System.Boolean OpChangeGroups(System.Byte[] groupsToRemove, System.Byte[] groupsToAdd)
    // Offset: 0x132FEB0
    bool OpChangeGroups(::ArrayW<uint8_t> groupsToRemove, ::ArrayW<uint8_t> groupsToAdd);
    // private System.Void ReadoutProperties(ExitGames.Client.Photon.Hashtable gameProperties, ExitGames.Client.Photon.Hashtable actorProperties, System.Int32 targetActorNr)
    // Offset: 0x132FF54
    void ReadoutProperties(::ExitGames::Client::Photon::Hashtable* gameProperties, ::ExitGames::Client::Photon::Hashtable* actorProperties, int targetActorNr);
    // private ExitGames.Client.Photon.Hashtable ReadoutPropertiesForActorNr(ExitGames.Client.Photon.Hashtable actorProperties, System.Int32 actorNr)
    // Offset: 0x13302D4
    ::ExitGames::Client::Photon::Hashtable* ReadoutPropertiesForActorNr(::ExitGames::Client::Photon::Hashtable* actorProperties, int actorNr);
    // public System.Void ChangeLocalID(System.Int32 newID)
    // Offset: 0x13303C4
    void ChangeLocalID(int newID);
    // private System.Void GameEnteredOnGameServer(ExitGames.Client.Photon.OperationResponse operationResponse)
    // Offset: 0x1330518
    void GameEnteredOnGameServer(::ExitGames::Client::Photon::OperationResponse* operationResponse);
    // private System.Void UpdatedActorList(System.Int32[] actorsInGame)
    // Offset: 0x13307B8
    void UpdatedActorList(::ArrayW<int> actorsInGame);
    // protected internal Photon.Realtime.Player CreatePlayer(System.String actorName, System.Int32 actorNumber, System.Boolean isLocal, ExitGames.Client.Photon.Hashtable actorProperties)
    // Offset: 0x1330BA4
    ::Photon::Realtime::Player* CreatePlayer(::StringW actorName, int actorNumber, bool isLocal, ::ExitGames::Client::Photon::Hashtable* actorProperties);
    // protected internal Photon.Realtime.Room CreateRoom(System.String roomName, Photon.Realtime.RoomOptions opt)
    // Offset: 0x1330D00
    ::Photon::Realtime::Room* CreateRoom(::StringW roomName, ::Photon::Realtime::RoomOptions* opt);
    // private System.Boolean CheckIfOpAllowedOnServer(System.Byte opCode, Photon.Realtime.ServerConnection serverConnection)
    // Offset: 0x1330D78
    bool CheckIfOpAllowedOnServer(uint8_t opCode, ::Photon::Realtime::ServerConnection serverConnection);
    // private System.Boolean CheckIfOpCanBeSent(System.Byte opCode, Photon.Realtime.ServerConnection serverConnection, System.String opName)
    // Offset: 0x132E008
    bool CheckIfOpCanBeSent(uint8_t opCode, ::Photon::Realtime::ServerConnection serverConnection, ::StringW opName);
    // private System.Boolean CheckIfClientIsReadyToCallOperation(System.Byte opCode)
    // Offset: 0x1330ED8
    bool CheckIfClientIsReadyToCallOperation(uint8_t opCode);
    // public System.Void DebugReturn(ExitGames.Client.Photon.DebugLevel level, System.String message)
    // Offset: 0x1330FEC
    void DebugReturn(::ExitGames::Client::Photon::DebugLevel level, ::StringW message);
    // private System.Void CallbackRoomEnterFailed(ExitGames.Client.Photon.OperationResponse operationResponse)
    // Offset: 0x1331128
    void CallbackRoomEnterFailed(::ExitGames::Client::Photon::OperationResponse* operationResponse);
    // public System.Void OnOperationResponse(ExitGames.Client.Photon.OperationResponse operationResponse)
    // Offset: 0x1331630
    void OnOperationResponse(::ExitGames::Client::Photon::OperationResponse* operationResponse);
    // public System.Void OnStatusChanged(ExitGames.Client.Photon.StatusCode statusCode)
    // Offset: 0x1333684
    void OnStatusChanged(::ExitGames::Client::Photon::StatusCode statusCode);
    // public System.Void OnEvent(ExitGames.Client.Photon.EventData photonEvent)
    // Offset: 0x1333E80
    void OnEvent(::ExitGames::Client::Photon::EventData* photonEvent);
    // public System.Void OnMessage(System.Object message)
    // Offset: 0x1334A54
    void OnMessage(::Il2CppObject* message);
    // private System.Void OnDisconnectMessageReceived(ExitGames.Client.Photon.DisconnectMessage obj)
    // Offset: 0x1334AD0
    void OnDisconnectMessageReceived(::ExitGames::Client::Photon::DisconnectMessage* obj);
    // private System.Void OnRegionPingCompleted(Photon.Realtime.RegionHandler regionHandler)
    // Offset: 0x1334BC8
    void OnRegionPingCompleted(::Photon::Realtime::RegionHandler* regionHandler);
    // static protected internal System.String ReplacePortWithAlternative(System.String address, System.UInt16 replacementPort)
    // Offset: 0x1332980
    static ::StringW ReplacePortWithAlternative(::StringW address, uint16_t replacementPort);
    // private System.Void SetupEncryption(System.Collections.Generic.Dictionary`2<System.Byte,System.Object> encryptionData)
    // Offset: 0x1332734
    void SetupEncryption(::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>* encryptionData);
    // public System.Boolean OpWebRpc(System.String uriPath, System.Object parameters, System.Boolean sendAuthCookie)
    // Offset: 0x1334F04
    bool OpWebRpc(::StringW uriPath, ::Il2CppObject* parameters, bool sendAuthCookie);
    // public System.Void AddCallbackTarget(System.Object target)
    // Offset: 0x13350B0
    void AddCallbackTarget(::Il2CppObject* target);
    // public System.Void RemoveCallbackTarget(System.Object target)
    // Offset: 0x1335184
    void RemoveCallbackTarget(::Il2CppObject* target);
    // protected internal System.Void UpdateCallbackTargets()
    // Offset: 0x1327B30
    void UpdateCallbackTargets();
    // private System.Void UpdateCallbackTarget(Photon.Realtime.LoadBalancingClient/Photon.Realtime.CallbackTargetChange change, System.Collections.Generic.List`1<T> container)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void UpdateCallbackTarget(::Photon::Realtime::LoadBalancingClient::CallbackTargetChange* change, ::System::Collections::Generic::List_1<T>* container) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::LoadBalancingClient::UpdateCallbackTarget");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "UpdateCallbackTarget", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(change), ::il2cpp_utils::ExtractType(container)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, change, container);
    }
  }; // Photon.Realtime.LoadBalancingClient
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_LoadBalancingPeer
// Il2CppName: get_LoadBalancingPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::LoadBalancingPeer* (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_LoadBalancingPeer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_LoadBalancingPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_LoadBalancingPeer
// Il2CppName: set_LoadBalancingPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::LoadBalancingPeer*)>(&Photon::Realtime::LoadBalancingClient::set_LoadBalancingPeer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "LoadBalancingPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_LoadBalancingPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_SerializationProtocol
// Il2CppName: get_SerializationProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::SerializationProtocol (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_SerializationProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_SerializationProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_SerializationProtocol
// Il2CppName: set_SerializationProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::SerializationProtocol)>(&Photon::Realtime::LoadBalancingClient::set_SerializationProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SerializationProtocol")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_SerializationProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_AppVersion
// Il2CppName: get_AppVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_AppVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_AppVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_AppVersion
// Il2CppName: set_AppVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_AppVersion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_AppVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_AppId
// Il2CppName: get_AppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_AppId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_AppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_AppId
// Il2CppName: set_AppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_AppId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_AppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_ClientType
// Il2CppName: get_ClientType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::ClientAppType (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_ClientType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_ClientType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_ClientType
// Il2CppName: set_ClientType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::ClientAppType)>(&Photon::Realtime::LoadBalancingClient::set_ClientType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientAppType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_ClientType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_AuthValues
// Il2CppName: get_AuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::AuthenticationValues* (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_AuthValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_AuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_AuthValues
// Il2CppName: set_AuthValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::AuthenticationValues*)>(&Photon::Realtime::LoadBalancingClient::set_AuthValues)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "AuthenticationValues")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_AuthValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_ExpectedProtocol
// Il2CppName: get_ExpectedProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<::ExitGames::Client::Photon::ConnectionProtocol> (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_ExpectedProtocol)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_ExpectedProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_ExpectedProtocol
// Il2CppName: set_ExpectedProtocol
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Nullable_1<::ExitGames::Client::Photon::ConnectionProtocol>)>(&Photon::Realtime::LoadBalancingClient::set_ExpectedProtocol)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "ConnectionProtocol")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_ExpectedProtocol", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_TokenForInit
// Il2CppName: get_TokenForInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_TokenForInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_TokenForInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_IsUsingNameServer
// Il2CppName: get_IsUsingNameServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_IsUsingNameServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_IsUsingNameServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_IsUsingNameServer
// Il2CppName: set_IsUsingNameServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(bool)>(&Photon::Realtime::LoadBalancingClient::set_IsUsingNameServer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_IsUsingNameServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_NameServerAddress
// Il2CppName: get_NameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_NameServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_NameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_UseAlternativeUdpPorts
// Il2CppName: get_UseAlternativeUdpPorts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_UseAlternativeUdpPorts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_UseAlternativeUdpPorts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_UseAlternativeUdpPorts
// Il2CppName: set_UseAlternativeUdpPorts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(bool)>(&Photon::Realtime::LoadBalancingClient::set_UseAlternativeUdpPorts)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_UseAlternativeUdpPorts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_EnableProtocolFallback
// Il2CppName: get_EnableProtocolFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_EnableProtocolFallback)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_EnableProtocolFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_EnableProtocolFallback
// Il2CppName: set_EnableProtocolFallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(bool)>(&Photon::Realtime::LoadBalancingClient::set_EnableProtocolFallback)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_EnableProtocolFallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_CurrentServerAddress
// Il2CppName: get_CurrentServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_CurrentServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_CurrentServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_MasterServerAddress
// Il2CppName: get_MasterServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_MasterServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_MasterServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_MasterServerAddress
// Il2CppName: set_MasterServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_MasterServerAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_MasterServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_GameServerAddress
// Il2CppName: get_GameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_GameServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_GameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_GameServerAddress
// Il2CppName: set_GameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_GameServerAddress)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_GameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_Server
// Il2CppName: get_Server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::ServerConnection (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_Server)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_Server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_Server
// Il2CppName: set_Server
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::ServerConnection)>(&Photon::Realtime::LoadBalancingClient::set_Server)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ServerConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_Server", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_State
// Il2CppName: get_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::ClientState (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_State)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_State
// Il2CppName: set_State
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::ClientState)>(&Photon::Realtime::LoadBalancingClient::set_State)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_State", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_IsConnected
// Il2CppName: get_IsConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_IsConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_IsConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_IsConnectedAndReady
// Il2CppName: get_IsConnectedAndReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_IsConnectedAndReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_IsConnectedAndReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_DisconnectedCause
// Il2CppName: get_DisconnectedCause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::DisconnectCause (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_DisconnectedCause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_DisconnectedCause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_DisconnectedCause
// Il2CppName: set_DisconnectedCause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::DisconnectCause)>(&Photon::Realtime::LoadBalancingClient::set_DisconnectedCause)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "DisconnectCause")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_DisconnectedCause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_InLobby
// Il2CppName: get_InLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_InLobby)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_InLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_CurrentLobby
// Il2CppName: get_CurrentLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::TypedLobby* (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_CurrentLobby)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_CurrentLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_CurrentLobby
// Il2CppName: set_CurrentLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::TypedLobby*)>(&Photon::Realtime::LoadBalancingClient::set_CurrentLobby)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "TypedLobby")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_CurrentLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_LocalPlayer
// Il2CppName: get_LocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_LocalPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_LocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_LocalPlayer
// Il2CppName: set_LocalPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::Player*)>(&Photon::Realtime::LoadBalancingClient::set_LocalPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_LocalPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_NickName
// Il2CppName: get_NickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_NickName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_NickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_NickName
// Il2CppName: set_NickName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_NickName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_NickName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_UserId
// Il2CppName: get_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_UserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_UserId
// Il2CppName: set_UserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_UserId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_UserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_CurrentRoom
// Il2CppName: get_CurrentRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Room* (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_CurrentRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_CurrentRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_CurrentRoom
// Il2CppName: set_CurrentRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::Room*)>(&Photon::Realtime::LoadBalancingClient::set_CurrentRoom)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Room")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_CurrentRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_InRoom
// Il2CppName: get_InRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_InRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_InRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_PlayersOnMasterCount
// Il2CppName: get_PlayersOnMasterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_PlayersOnMasterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_PlayersOnMasterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_PlayersOnMasterCount
// Il2CppName: set_PlayersOnMasterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(int)>(&Photon::Realtime::LoadBalancingClient::set_PlayersOnMasterCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_PlayersOnMasterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_PlayersInRoomsCount
// Il2CppName: get_PlayersInRoomsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_PlayersInRoomsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_PlayersInRoomsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_PlayersInRoomsCount
// Il2CppName: set_PlayersInRoomsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(int)>(&Photon::Realtime::LoadBalancingClient::set_PlayersInRoomsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_PlayersInRoomsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_RoomsCount
// Il2CppName: get_RoomsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_RoomsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_RoomsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_RoomsCount
// Il2CppName: set_RoomsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(int)>(&Photon::Realtime::LoadBalancingClient::set_RoomsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_RoomsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_IsFetchingFriendList
// Il2CppName: get_IsFetchingFriendList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_IsFetchingFriendList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_IsFetchingFriendList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_CloudRegion
// Il2CppName: get_CloudRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_CloudRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_CloudRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_CloudRegion
// Il2CppName: set_CloudRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_CloudRegion)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_CloudRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::get_CurrentCluster
// Il2CppName: get_CurrentCluster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::get_CurrentCluster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "get_CurrentCluster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::set_CurrentCluster
// Il2CppName: set_CurrentCluster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::set_CurrentCluster)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "set_CurrentCluster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::add_StateChanged
// Il2CppName: add_StateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>*)>(&Photon::Realtime::LoadBalancingClient::add_StateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState"), ::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "add_StateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::remove_StateChanged
// Il2CppName: remove_StateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Action_2<::Photon::Realtime::ClientState, ::Photon::Realtime::ClientState>*)>(&Photon::Realtime::LoadBalancingClient::remove_StateChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState"), ::il2cpp_utils::GetClassFromName("Photon.Realtime", "ClientState")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "remove_StateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::add_EventReceived
// Il2CppName: add_EventReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Action_1<::ExitGames::Client::Photon::EventData*>*)>(&Photon::Realtime::LoadBalancingClient::add_EventReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "add_EventReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::remove_EventReceived
// Il2CppName: remove_EventReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Action_1<::ExitGames::Client::Photon::EventData*>*)>(&Photon::Realtime::LoadBalancingClient::remove_EventReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "remove_EventReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::add_OpResponseReceived
// Il2CppName: add_OpResponseReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>*)>(&Photon::Realtime::LoadBalancingClient::add_OpResponseReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "add_OpResponseReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::remove_OpResponseReceived
// Il2CppName: remove_OpResponseReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Action_1<::ExitGames::Client::Photon::OperationResponse*>*)>(&Photon::Realtime::LoadBalancingClient::remove_OpResponseReceived)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "remove_OpResponseReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Realtime::LoadBalancingClient::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::GetNameServerAddress
// Il2CppName: GetNameServerAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::GetNameServerAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "GetNameServerAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ConnectUsingSettings
// Il2CppName: ConnectUsingSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::AppSettings*)>(&Photon::Realtime::LoadBalancingClient::ConnectUsingSettings)> {
  static const MethodInfo* get() {
    static auto* appSettings = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "AppSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ConnectUsingSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{appSettings});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ConnectToMasterServer
// Il2CppName: ConnectToMasterServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::ConnectToMasterServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ConnectToMasterServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ConnectToNameServer
// Il2CppName: ConnectToNameServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::ConnectToNameServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ConnectToNameServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ConnectToRegionMaster
// Il2CppName: ConnectToRegionMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::ConnectToRegionMaster)> {
  static const MethodInfo* get() {
    static auto* region = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ConnectToRegionMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{region});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CheckConnectSetupWebGl
// Il2CppName: CheckConnectSetupWebGl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::CheckConnectSetupWebGl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CheckConnectSetupWebGl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::StringW, ::StringW, ::Photon::Realtime::ServerConnection)>(&Photon::Realtime::LoadBalancingClient::Connect)> {
  static const MethodInfo* get() {
    static auto* serverAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* proxyServerAddress = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverType = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ServerConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serverAddress, proxyServerAddress, serverType});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ReconnectToMaster
// Il2CppName: ReconnectToMaster
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::ReconnectToMaster)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ReconnectToMaster", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ReconnectAndRejoin
// Il2CppName: ReconnectAndRejoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::ReconnectAndRejoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ReconnectAndRejoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::DisconnectCause)>(&Photon::Realtime::LoadBalancingClient::Disconnect)> {
  static const MethodInfo* get() {
    static auto* cause = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "DisconnectCause")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cause});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::DisconnectToReconnect
// Il2CppName: DisconnectToReconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::DisconnectToReconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "DisconnectToReconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::SimulateConnectionLoss
// Il2CppName: SimulateConnectionLoss
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(bool)>(&Photon::Realtime::LoadBalancingClient::SimulateConnectionLoss)> {
  static const MethodInfo* get() {
    static auto* simulateTimeout = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "SimulateConnectionLoss", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{simulateTimeout});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CallAuthenticate
// Il2CppName: CallAuthenticate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::CallAuthenticate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CallAuthenticate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::Service
// Il2CppName: Service
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::Service)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "Service", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpGetRegions
// Il2CppName: OpGetRegions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::OpGetRegions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpGetRegions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpFindFriends
// Il2CppName: OpFindFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::ArrayW<::StringW>, ::Photon::Realtime::FindFriendsOptions*)>(&Photon::Realtime::LoadBalancingClient::OpFindFriends)> {
  static const MethodInfo* get() {
    static auto* friendsToFind = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "FindFriendsOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpFindFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendsToFind, options});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpJoinLobby
// Il2CppName: OpJoinLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::TypedLobby*)>(&Photon::Realtime::LoadBalancingClient::OpJoinLobby)> {
  static const MethodInfo* get() {
    static auto* lobby = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "TypedLobby")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpJoinLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lobby});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpLeaveLobby
// Il2CppName: OpLeaveLobby
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::OpLeaveLobby)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpLeaveLobby", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpJoinRandomRoom
// Il2CppName: OpJoinRandomRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::OpJoinRandomRoomParams*)>(&Photon::Realtime::LoadBalancingClient::OpJoinRandomRoom)> {
  static const MethodInfo* get() {
    static auto* opJoinRandomRoomParams = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "OpJoinRandomRoomParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpJoinRandomRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opJoinRandomRoomParams});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpJoinRandomOrCreateRoom
// Il2CppName: OpJoinRandomOrCreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::OpJoinRandomRoomParams*, ::Photon::Realtime::EnterRoomParams*)>(&Photon::Realtime::LoadBalancingClient::OpJoinRandomOrCreateRoom)> {
  static const MethodInfo* get() {
    static auto* opJoinRandomRoomParams = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "OpJoinRandomRoomParams")->byval_arg;
    static auto* createRoomParams = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "EnterRoomParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpJoinRandomOrCreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opJoinRandomRoomParams, createRoomParams});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpCreateRoom
// Il2CppName: OpCreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::EnterRoomParams*)>(&Photon::Realtime::LoadBalancingClient::OpCreateRoom)> {
  static const MethodInfo* get() {
    static auto* enterRoomParams = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "EnterRoomParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpCreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enterRoomParams});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpJoinOrCreateRoom
// Il2CppName: OpJoinOrCreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::EnterRoomParams*)>(&Photon::Realtime::LoadBalancingClient::OpJoinOrCreateRoom)> {
  static const MethodInfo* get() {
    static auto* enterRoomParams = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "EnterRoomParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpJoinOrCreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enterRoomParams});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpJoinRoom
// Il2CppName: OpJoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::EnterRoomParams*)>(&Photon::Realtime::LoadBalancingClient::OpJoinRoom)> {
  static const MethodInfo* get() {
    static auto* enterRoomParams = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "EnterRoomParams")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpJoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enterRoomParams});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpRejoinRoom
// Il2CppName: OpRejoinRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::StringW)>(&Photon::Realtime::LoadBalancingClient::OpRejoinRoom)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpRejoinRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpLeaveRoom
// Il2CppName: OpLeaveRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(bool, bool)>(&Photon::Realtime::LoadBalancingClient::OpLeaveRoom)> {
  static const MethodInfo* get() {
    static auto* becomeInactive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* sendAuthCookie = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpLeaveRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{becomeInactive, sendAuthCookie});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpGetGameList
// Il2CppName: OpGetGameList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::TypedLobby*, ::StringW)>(&Photon::Realtime::LoadBalancingClient::OpGetGameList)> {
  static const MethodInfo* get() {
    static auto* typedLobby = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "TypedLobby")->byval_arg;
    static auto* sqlLobbyFilter = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpGetGameList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{typedLobby, sqlLobbyFilter});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpSetCustomPropertiesOfActor
// Il2CppName: OpSetCustomPropertiesOfActor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(int, ::ExitGames::Client::Photon::Hashtable*, ::ExitGames::Client::Photon::Hashtable*, ::Photon::Realtime::WebFlags*)>(&Photon::Realtime::LoadBalancingClient::OpSetCustomPropertiesOfActor)> {
  static const MethodInfo* get() {
    static auto* actorNr = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* propertiesToSet = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* expectedProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* webFlags = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "WebFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpSetCustomPropertiesOfActor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorNr, propertiesToSet, expectedProperties, webFlags});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpSetPropertiesOfActor
// Il2CppName: OpSetPropertiesOfActor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(int, ::ExitGames::Client::Photon::Hashtable*, ::ExitGames::Client::Photon::Hashtable*, ::Photon::Realtime::WebFlags*)>(&Photon::Realtime::LoadBalancingClient::OpSetPropertiesOfActor)> {
  static const MethodInfo* get() {
    static auto* actorNr = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* actorProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* expectedProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* webFlags = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "WebFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpSetPropertiesOfActor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorNr, actorProperties, expectedProperties, webFlags});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpSetCustomPropertiesOfRoom
// Il2CppName: OpSetCustomPropertiesOfRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::Hashtable*, ::ExitGames::Client::Photon::Hashtable*, ::Photon::Realtime::WebFlags*)>(&Photon::Realtime::LoadBalancingClient::OpSetCustomPropertiesOfRoom)> {
  static const MethodInfo* get() {
    static auto* propertiesToSet = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* expectedProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* webFlags = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "WebFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpSetCustomPropertiesOfRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesToSet, expectedProperties, webFlags});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpSetPropertyOfRoom
// Il2CppName: OpSetPropertyOfRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(uint8_t, ::Il2CppObject*)>(&Photon::Realtime::LoadBalancingClient::OpSetPropertyOfRoom)> {
  static const MethodInfo* get() {
    static auto* propCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpSetPropertyOfRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propCode, value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpSetPropertiesOfRoom
// Il2CppName: OpSetPropertiesOfRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::Hashtable*, ::ExitGames::Client::Photon::Hashtable*, ::Photon::Realtime::WebFlags*)>(&Photon::Realtime::LoadBalancingClient::OpSetPropertiesOfRoom)> {
  static const MethodInfo* get() {
    static auto* gameProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* expectedProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* webFlags = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "WebFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpSetPropertiesOfRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameProperties, expectedProperties, webFlags});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpRaiseEvent
// Il2CppName: OpRaiseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(uint8_t, ::Il2CppObject*, ::Photon::Realtime::RaiseEventOptions*, ::ExitGames::Client::Photon::SendOptions)>(&Photon::Realtime::LoadBalancingClient::OpRaiseEvent)> {
  static const MethodInfo* get() {
    static auto* eventCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* customEventContent = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* raiseEventOptions = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "RaiseEventOptions")->byval_arg;
    static auto* sendOptions = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "SendOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpRaiseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventCode, customEventContent, raiseEventOptions, sendOptions});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpChangeGroups
// Il2CppName: OpChangeGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::ArrayW<uint8_t>, ::ArrayW<uint8_t>)>(&Photon::Realtime::LoadBalancingClient::OpChangeGroups)> {
  static const MethodInfo* get() {
    static auto* groupsToRemove = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* groupsToAdd = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpChangeGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupsToRemove, groupsToAdd});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ReadoutProperties
// Il2CppName: ReadoutProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::Hashtable*, ::ExitGames::Client::Photon::Hashtable*, int)>(&Photon::Realtime::LoadBalancingClient::ReadoutProperties)> {
  static const MethodInfo* get() {
    static auto* gameProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* actorProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* targetActorNr = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ReadoutProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameProperties, actorProperties, targetActorNr});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ReadoutPropertiesForActorNr
// Il2CppName: ReadoutPropertiesForActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::Hashtable* (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::Hashtable*, int)>(&Photon::Realtime::LoadBalancingClient::ReadoutPropertiesForActorNr)> {
  static const MethodInfo* get() {
    static auto* actorProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    static auto* actorNr = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ReadoutPropertiesForActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorProperties, actorNr});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ChangeLocalID
// Il2CppName: ChangeLocalID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(int)>(&Photon::Realtime::LoadBalancingClient::ChangeLocalID)> {
  static const MethodInfo* get() {
    static auto* newID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ChangeLocalID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newID});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::GameEnteredOnGameServer
// Il2CppName: GameEnteredOnGameServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::OperationResponse*)>(&Photon::Realtime::LoadBalancingClient::GameEnteredOnGameServer)> {
  static const MethodInfo* get() {
    static auto* operationResponse = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "GameEnteredOnGameServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationResponse});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::UpdatedActorList
// Il2CppName: UpdatedActorList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ArrayW<int>)>(&Photon::Realtime::LoadBalancingClient::UpdatedActorList)> {
  static const MethodInfo* get() {
    static auto* actorsInGame = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "UpdatedActorList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorsInGame});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CreatePlayer
// Il2CppName: CreatePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (Photon::Realtime::LoadBalancingClient::*)(::StringW, int, bool, ::ExitGames::Client::Photon::Hashtable*)>(&Photon::Realtime::LoadBalancingClient::CreatePlayer)> {
  static const MethodInfo* get() {
    static auto* actorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* actorNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isLocal = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* actorProperties = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CreatePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{actorName, actorNumber, isLocal, actorProperties});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CreateRoom
// Il2CppName: CreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Room* (Photon::Realtime::LoadBalancingClient::*)(::StringW, ::Photon::Realtime::RoomOptions*)>(&Photon::Realtime::LoadBalancingClient::CreateRoom)> {
  static const MethodInfo* get() {
    static auto* roomName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* opt = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "RoomOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{roomName, opt});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CheckIfOpAllowedOnServer
// Il2CppName: CheckIfOpAllowedOnServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(uint8_t, ::Photon::Realtime::ServerConnection)>(&Photon::Realtime::LoadBalancingClient::CheckIfOpAllowedOnServer)> {
  static const MethodInfo* get() {
    static auto* opCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* serverConnection = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ServerConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CheckIfOpAllowedOnServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opCode, serverConnection});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CheckIfOpCanBeSent
// Il2CppName: CheckIfOpCanBeSent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(uint8_t, ::Photon::Realtime::ServerConnection, ::StringW)>(&Photon::Realtime::LoadBalancingClient::CheckIfOpCanBeSent)> {
  static const MethodInfo* get() {
    static auto* opCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* serverConnection = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ServerConnection")->byval_arg;
    static auto* opName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CheckIfOpCanBeSent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opCode, serverConnection, opName});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CheckIfClientIsReadyToCallOperation
// Il2CppName: CheckIfClientIsReadyToCallOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(uint8_t)>(&Photon::Realtime::LoadBalancingClient::CheckIfClientIsReadyToCallOperation)> {
  static const MethodInfo* get() {
    static auto* opCode = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CheckIfClientIsReadyToCallOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{opCode});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::DebugReturn
// Il2CppName: DebugReturn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::DebugLevel, ::StringW)>(&Photon::Realtime::LoadBalancingClient::DebugReturn)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DebugLevel")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "DebugReturn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level, message});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::CallbackRoomEnterFailed
// Il2CppName: CallbackRoomEnterFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::OperationResponse*)>(&Photon::Realtime::LoadBalancingClient::CallbackRoomEnterFailed)> {
  static const MethodInfo* get() {
    static auto* operationResponse = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "CallbackRoomEnterFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationResponse});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OnOperationResponse
// Il2CppName: OnOperationResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::OperationResponse*)>(&Photon::Realtime::LoadBalancingClient::OnOperationResponse)> {
  static const MethodInfo* get() {
    static auto* operationResponse = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "OperationResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OnOperationResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{operationResponse});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OnStatusChanged
// Il2CppName: OnStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::StatusCode)>(&Photon::Realtime::LoadBalancingClient::OnStatusChanged)> {
  static const MethodInfo* get() {
    static auto* statusCode = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "StatusCode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OnStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusCode});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OnEvent
// Il2CppName: OnEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::EventData*)>(&Photon::Realtime::LoadBalancingClient::OnEvent)> {
  static const MethodInfo* get() {
    static auto* photonEvent = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "EventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OnEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{photonEvent});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OnMessage
// Il2CppName: OnMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Il2CppObject*)>(&Photon::Realtime::LoadBalancingClient::OnMessage)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OnMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OnDisconnectMessageReceived
// Il2CppName: OnDisconnectMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::ExitGames::Client::Photon::DisconnectMessage*)>(&Photon::Realtime::LoadBalancingClient::OnDisconnectMessageReceived)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "DisconnectMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OnDisconnectMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OnRegionPingCompleted
// Il2CppName: OnRegionPingCompleted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Photon::Realtime::RegionHandler*)>(&Photon::Realtime::LoadBalancingClient::OnRegionPingCompleted)> {
  static const MethodInfo* get() {
    static auto* regionHandler = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "RegionHandler")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OnRegionPingCompleted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{regionHandler});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::ReplacePortWithAlternative
// Il2CppName: ReplacePortWithAlternative
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW, uint16_t)>(&Photon::Realtime::LoadBalancingClient::ReplacePortWithAlternative)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* replacementPort = &::il2cpp_utils::GetClassFromName("System", "UInt16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "ReplacePortWithAlternative", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, replacementPort});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::SetupEncryption
// Il2CppName: SetupEncryption
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppObject*>*)>(&Photon::Realtime::LoadBalancingClient::SetupEncryption)> {
  static const MethodInfo* get() {
    static auto* encryptionData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Byte"), ::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "SetupEncryption", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{encryptionData});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::OpWebRpc
// Il2CppName: OpWebRpc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::LoadBalancingClient::*)(::StringW, ::Il2CppObject*, bool)>(&Photon::Realtime::LoadBalancingClient::OpWebRpc)> {
  static const MethodInfo* get() {
    static auto* uriPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parameters = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    static auto* sendAuthCookie = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "OpWebRpc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uriPath, parameters, sendAuthCookie});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::AddCallbackTarget
// Il2CppName: AddCallbackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Il2CppObject*)>(&Photon::Realtime::LoadBalancingClient::AddCallbackTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "AddCallbackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::RemoveCallbackTarget
// Il2CppName: RemoveCallbackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)(::Il2CppObject*)>(&Photon::Realtime::LoadBalancingClient::RemoveCallbackTarget)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "RemoveCallbackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::UpdateCallbackTargets
// Il2CppName: UpdateCallbackTargets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::LoadBalancingClient::*)()>(&Photon::Realtime::LoadBalancingClient::UpdateCallbackTargets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::LoadBalancingClient*), "UpdateCallbackTargets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::LoadBalancingClient::UpdateCallbackTarget
// Il2CppName: UpdateCallbackTarget
// Cannot write MetadataGetter for generic methods!
