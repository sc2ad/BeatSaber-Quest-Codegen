// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: LoadBalancingClient
  class LoadBalancingClient;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: ConnectionHandler
  class ConnectionHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::ConnectionHandler);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::ConnectionHandler*, "Photon.Realtime", "ConnectionHandler");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Realtime.ConnectionHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class ConnectionHandler : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Photon.Realtime.LoadBalancingClient <Client>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Realtime::LoadBalancingClient* Client;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::LoadBalancingClient*) == 0x8);
    // public System.Boolean DisconnectAfterKeepAlive
    // Size: 0x1
    // Offset: 0x20
    bool DisconnectAfterKeepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: DisconnectAfterKeepAlive and: KeepAliveInBackground
    char __padding1[0x3] = {};
    // public System.Int32 KeepAliveInBackground
    // Size: 0x4
    // Offset: 0x24
    int KeepAliveInBackground;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <CountSendAcksOnly>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    int CountSendAcksOnly;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean ApplyDontDestroyOnLoad
    // Size: 0x1
    // Offset: 0x2C
    bool ApplyDontDestroyOnLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte fallbackThreadId
    // Size: 0x1
    // Offset: 0x2D
    uint8_t fallbackThreadId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Boolean didSendAcks
    // Size: 0x1
    // Offset: 0x2E
    bool didSendAcks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: didSendAcks and: backgroundStopwatch
    char __padding6[0x1] = {};
    // private readonly System.Diagnostics.Stopwatch backgroundStopwatch
    // Size: 0x8
    // Offset: 0x30
    ::System::Diagnostics::Stopwatch* backgroundStopwatch;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Boolean AppQuits
    static bool _get_AppQuits();
    // Set static field: static public System.Boolean AppQuits
    static void _set_AppQuits(bool value);
    // Get instance field reference: private Photon.Realtime.LoadBalancingClient <Client>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::LoadBalancingClient*& dyn_$Client$k__BackingField();
    // Get instance field reference: public System.Boolean DisconnectAfterKeepAlive
    [[deprecated("Use field access instead!")]] bool& dyn_DisconnectAfterKeepAlive();
    // Get instance field reference: public System.Int32 KeepAliveInBackground
    [[deprecated("Use field access instead!")]] int& dyn_KeepAliveInBackground();
    // Get instance field reference: private System.Int32 <CountSendAcksOnly>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CountSendAcksOnly$k__BackingField();
    // Get instance field reference: public System.Boolean ApplyDontDestroyOnLoad
    [[deprecated("Use field access instead!")]] bool& dyn_ApplyDontDestroyOnLoad();
    // Get instance field reference: private System.Byte fallbackThreadId
    [[deprecated("Use field access instead!")]] uint8_t& dyn_fallbackThreadId();
    // Get instance field reference: private System.Boolean didSendAcks
    [[deprecated("Use field access instead!")]] bool& dyn_didSendAcks();
    // Get instance field reference: private readonly System.Diagnostics.Stopwatch backgroundStopwatch
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn_backgroundStopwatch();
    // public Photon.Realtime.LoadBalancingClient get_Client()
    // Offset: 0x13284D0
    ::Photon::Realtime::LoadBalancingClient* get_Client();
    // public System.Void set_Client(Photon.Realtime.LoadBalancingClient value)
    // Offset: 0x13284D8
    void set_Client(::Photon::Realtime::LoadBalancingClient* value);
    // public System.Int32 get_CountSendAcksOnly()
    // Offset: 0x13284E0
    int get_CountSendAcksOnly();
    // private System.Void set_CountSendAcksOnly(System.Int32 value)
    // Offset: 0x13284E8
    void set_CountSendAcksOnly(int value);
    // public System.Boolean get_FallbackThreadRunning()
    // Offset: 0x13284F0
    bool get_FallbackThreadRunning();
    // public System.Void .ctor()
    // Offset: 0x1328BA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectionHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::ConnectionHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectionHandler*, creationType>()));
    }
    // protected System.Void OnApplicationQuit()
    // Offset: 0x1328500
    void OnApplicationQuit();
    // protected System.Void Awake()
    // Offset: 0x1328554
    void Awake();
    // protected System.Void OnDisable()
    // Offset: 0x13285E4
    void OnDisable();
    // public System.Void StartFallbackSendAckThread()
    // Offset: 0x13289D8
    void StartFallbackSendAckThread();
    // public System.Void StopFallbackSendAckThread()
    // Offset: 0x13286BC
    void StopFallbackSendAckThread();
    // public System.Boolean RealtimeFallbackThread()
    // Offset: 0x1328A98
    bool RealtimeFallbackThread();
  }; // Photon.Realtime.ConnectionHandler
  #pragma pack(pop)
  static check_size<sizeof(ConnectionHandler), 48 + sizeof(::System::Diagnostics::Stopwatch*)> __Photon_Realtime_ConnectionHandlerSizeCheck;
  static_assert(sizeof(ConnectionHandler) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::get_Client
// Il2CppName: get_Client
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::LoadBalancingClient* (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::get_Client)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "get_Client", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::set_Client
// Il2CppName: set_Client
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)(::Photon::Realtime::LoadBalancingClient*)>(&Photon::Realtime::ConnectionHandler::set_Client)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "LoadBalancingClient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "set_Client", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::get_CountSendAcksOnly
// Il2CppName: get_CountSendAcksOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::get_CountSendAcksOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "get_CountSendAcksOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::set_CountSendAcksOnly
// Il2CppName: set_CountSendAcksOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)(int)>(&Photon::Realtime::ConnectionHandler::set_CountSendAcksOnly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "set_CountSendAcksOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::get_FallbackThreadRunning
// Il2CppName: get_FallbackThreadRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::get_FallbackThreadRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "get_FallbackThreadRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::OnApplicationQuit
// Il2CppName: OnApplicationQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::OnApplicationQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "OnApplicationQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::StartFallbackSendAckThread
// Il2CppName: StartFallbackSendAckThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::StartFallbackSendAckThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "StartFallbackSendAckThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::StopFallbackSendAckThread
// Il2CppName: StopFallbackSendAckThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::StopFallbackSendAckThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "StopFallbackSendAckThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::ConnectionHandler::RealtimeFallbackThread
// Il2CppName: RealtimeFallbackThread
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::ConnectionHandler::*)()>(&Photon::Realtime::ConnectionHandler::RealtimeFallbackThread)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ConnectionHandler*), "RealtimeFallbackThread", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
