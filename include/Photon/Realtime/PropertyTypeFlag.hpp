// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: PropertyTypeFlag
  struct PropertyTypeFlag;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::PropertyTypeFlag, "Photon.Realtime", "PropertyTypeFlag");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Realtime.PropertyTypeFlag
  // [TokenAttribute] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct PropertyTypeFlag/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Creating value type constructor for type: PropertyTypeFlag
    constexpr PropertyTypeFlag(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public Photon.Realtime.PropertyTypeFlag None
    static constexpr const uint8_t None = 0u;
    // Get static field: static public Photon.Realtime.PropertyTypeFlag None
    static ::Photon::Realtime::PropertyTypeFlag _get_None();
    // Set static field: static public Photon.Realtime.PropertyTypeFlag None
    static void _set_None(::Photon::Realtime::PropertyTypeFlag value);
    // static field const value: static public Photon.Realtime.PropertyTypeFlag Game
    static constexpr const uint8_t Game = 1u;
    // Get static field: static public Photon.Realtime.PropertyTypeFlag Game
    static ::Photon::Realtime::PropertyTypeFlag _get_Game();
    // Set static field: static public Photon.Realtime.PropertyTypeFlag Game
    static void _set_Game(::Photon::Realtime::PropertyTypeFlag value);
    // static field const value: static public Photon.Realtime.PropertyTypeFlag Actor
    static constexpr const uint8_t Actor = 2u;
    // Get static field: static public Photon.Realtime.PropertyTypeFlag Actor
    static ::Photon::Realtime::PropertyTypeFlag _get_Actor();
    // Set static field: static public Photon.Realtime.PropertyTypeFlag Actor
    static void _set_Actor(::Photon::Realtime::PropertyTypeFlag value);
    // static field const value: static public Photon.Realtime.PropertyTypeFlag GameAndActor
    static constexpr const uint8_t GameAndActor = 3u;
    // Get static field: static public Photon.Realtime.PropertyTypeFlag GameAndActor
    static ::Photon::Realtime::PropertyTypeFlag _get_GameAndActor();
    // Set static field: static public Photon.Realtime.PropertyTypeFlag GameAndActor
    static void _set_GameAndActor(::Photon::Realtime::PropertyTypeFlag value);
    // Get instance field reference: public System.Byte value__
    [[deprecated("Use field access instead!")]] uint8_t& dyn_value__();
  }; // Photon.Realtime.PropertyTypeFlag
  #pragma pack(pop)
  static check_size<sizeof(PropertyTypeFlag), 0 + sizeof(uint8_t)> __Photon_Realtime_PropertyTypeFlagSizeCheck;
  static_assert(sizeof(PropertyTypeFlag) == 0x1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
