// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Realtime.RegionHandler
#include "Photon/Realtime/RegionHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Region
  class Region;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::RegionHandler::$$c__DisplayClass23_0);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::RegionHandler::$$c__DisplayClass23_0*, "Photon.Realtime", "RegionHandler/<>c__DisplayClass23_0");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Realtime.RegionHandler/Photon.Realtime.<>c__DisplayClass23_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class RegionHandler::$$c__DisplayClass23_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String prevBestRegionCode
    // Size: 0x8
    // Offset: 0x10
    ::StringW prevBestRegionCode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return prevBestRegionCode;
    }
    // Get instance field reference: public System.String prevBestRegionCode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_prevBestRegionCode();
    // public System.Void .ctor()
    // Offset: 0x1339B5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RegionHandler::$$c__DisplayClass23_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::RegionHandler::$$c__DisplayClass23_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RegionHandler::$$c__DisplayClass23_0*, creationType>()));
    }
    // System.Boolean <PingMinimumOfRegions>b__0(Photon.Realtime.Region r)
    // Offset: 0x133A440
    bool $PingMinimumOfRegions$b__0(::Photon::Realtime::Region* r);
  }; // Photon.Realtime.RegionHandler/Photon.Realtime.<>c__DisplayClass23_0
  #pragma pack(pop)
  static check_size<sizeof(RegionHandler::$$c__DisplayClass23_0), 16 + sizeof(::StringW)> __Photon_Realtime_RegionHandler_$$c__DisplayClass23_0SizeCheck;
  static_assert(sizeof(RegionHandler::$$c__DisplayClass23_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::RegionHandler::$$c__DisplayClass23_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::RegionHandler::$$c__DisplayClass23_0::$PingMinimumOfRegions$b__0
// Il2CppName: <PingMinimumOfRegions>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::RegionHandler::$$c__DisplayClass23_0::*)(::Photon::Realtime::Region*)>(&Photon::Realtime::RegionHandler::$$c__DisplayClass23_0::$PingMinimumOfRegions$b__0)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Region")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::RegionHandler::$$c__DisplayClass23_0*), "<PingMinimumOfRegions>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r});
  }
};
