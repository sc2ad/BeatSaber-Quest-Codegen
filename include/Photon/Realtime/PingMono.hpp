// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Realtime.PhotonPing
#include "Photon/Realtime/PhotonPing.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Completed forward declares
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: PingMono
  class PingMono;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::PingMono);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::PingMono*, "Photon.Realtime", "PingMono");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Realtime.PingMono
  // [TokenAttribute] Offset: FFFFFFFF
  class PingMono : public ::Photon::Realtime::PhotonPing {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x30
    char ___base_padding[0x7] = {};
    public:
    // private System.Net.Sockets.Socket sock
    // Size: 0x8
    // Offset: 0x30
    ::System::Net::Sockets::Socket* sock;
    // Field size check
    static_assert(sizeof(::System::Net::Sockets::Socket*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Net::Sockets::Socket*
    constexpr operator ::System::Net::Sockets::Socket*() const noexcept {
      return sock;
    }
    // Get instance field reference: private System.Net.Sockets.Socket sock
    [[deprecated("Use field access instead!")]] ::System::Net::Sockets::Socket*& dyn_sock();
    // public System.Void .ctor()
    // Offset: 0x1338C10
    // Implemented from: Photon.Realtime.PhotonPing
    // Base method: System.Void PhotonPing::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PingMono* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::PingMono::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PingMono*, creationType>()));
    }
    // public override System.Boolean StartPing(System.String ip)
    // Offset: 0x1338638
    // Implemented from: Photon.Realtime.PhotonPing
    // Base method: System.Boolean PhotonPing::StartPing(System.String ip)
    bool StartPing(::StringW ip);
    // public override System.Boolean Done()
    // Offset: 0x13388A8
    // Implemented from: Photon.Realtime.PhotonPing
    // Base method: System.Boolean PhotonPing::Done()
    bool Done();
    // public override System.Void Dispose()
    // Offset: 0x1338B48
    // Implemented from: Photon.Realtime.PhotonPing
    // Base method: System.Void PhotonPing::Dispose()
    void Dispose();
  }; // Photon.Realtime.PingMono
  #pragma pack(pop)
  static check_size<sizeof(PingMono), 48 + sizeof(::System::Net::Sockets::Socket*)> __Photon_Realtime_PingMonoSizeCheck;
  static_assert(sizeof(PingMono) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::PingMono::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::PingMono::StartPing
// Il2CppName: StartPing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::PingMono::*)(::StringW)>(&Photon::Realtime::PingMono::StartPing)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PingMono*), "StartPing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::PingMono::Done
// Il2CppName: Done
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Realtime::PingMono::*)()>(&Photon::Realtime::PingMono::Done)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PingMono*), "Done", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Realtime::PingMono::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::PingMono::*)()>(&Photon::Realtime::PingMono::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::PingMono*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
