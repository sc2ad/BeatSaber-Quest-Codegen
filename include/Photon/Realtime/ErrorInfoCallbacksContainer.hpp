// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Collections.Generic.List`1
#include "System/Collections/Generic/List_1.hpp"
// Including type: Photon.Realtime.IErrorInfoCallback
#include "Photon/Realtime/IErrorInfoCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: LoadBalancingClient
  class LoadBalancingClient;
  // Forward declaring type: ErrorInfo
  class ErrorInfo;
}
// Completed forward declares
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // Forward declaring type: ErrorInfoCallbacksContainer
  class ErrorInfoCallbacksContainer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Realtime::ErrorInfoCallbacksContainer);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Realtime::ErrorInfoCallbacksContainer*, "Photon.Realtime", "ErrorInfoCallbacksContainer");
// Type namespace: Photon.Realtime
namespace Photon::Realtime {
  // WARNING Size may be invalid!
  // Autogenerated type: Photon.Realtime.ErrorInfoCallbacksContainer
  // [TokenAttribute] Offset: FFFFFFFF
  class ErrorInfoCallbacksContainer : public ::System::Collections::Generic::List_1<::Photon::Realtime::IErrorInfoCallback*>/*, public ::Photon::Realtime::IErrorInfoCallback*/ {
    public:
    public:
    // private Photon.Realtime.LoadBalancingClient client
    // Size: 0x8
    // Offset: 0x28
    ::Photon::Realtime::LoadBalancingClient* client;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::LoadBalancingClient*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IErrorInfoCallback
    operator ::Photon::Realtime::IErrorInfoCallback() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IErrorInfoCallback*>(this);
    }
    // Creating conversion operator: operator ::Photon::Realtime::LoadBalancingClient*
    constexpr operator ::Photon::Realtime::LoadBalancingClient*() const noexcept {
      return client;
    }
    // Get instance field reference: private Photon.Realtime.LoadBalancingClient client
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::LoadBalancingClient*& dyn_client();
    // public System.Void .ctor(Photon.Realtime.LoadBalancingClient client)
    // Offset: 0x1329BC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ErrorInfoCallbacksContainer* New_ctor(::Photon::Realtime::LoadBalancingClient* client) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Realtime::ErrorInfoCallbacksContainer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ErrorInfoCallbacksContainer*, creationType>(client)));
    }
    // public System.Void OnErrorInfo(Photon.Realtime.ErrorInfo errorInfo)
    // Offset: 0x1329C44
    void OnErrorInfo(::Photon::Realtime::ErrorInfo* errorInfo);
  }; // Photon.Realtime.ErrorInfoCallbacksContainer
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Realtime::ErrorInfoCallbacksContainer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Realtime::ErrorInfoCallbacksContainer::OnErrorInfo
// Il2CppName: OnErrorInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Realtime::ErrorInfoCallbacksContainer::*)(::Photon::Realtime::ErrorInfo*)>(&Photon::Realtime::ErrorInfoCallbacksContainer::OnErrorInfo)> {
  static const MethodInfo* get() {
    static auto* errorInfo = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "ErrorInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Realtime::ErrorInfoCallbacksContainer*), "OnErrorInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{errorInfo});
  }
};
