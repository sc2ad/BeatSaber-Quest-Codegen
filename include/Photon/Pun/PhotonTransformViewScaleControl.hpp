// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonTransformViewScaleModel
  class PhotonTransformViewScaleModel;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonTransformViewScaleControl
  class PhotonTransformViewScaleControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonTransformViewScaleControl);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonTransformViewScaleControl*, "Photon.Pun", "PhotonTransformViewScaleControl");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonTransformViewScaleControl
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonTransformViewScaleControl : public ::Il2CppObject {
    public:
    public:
    // private Photon.Pun.PhotonTransformViewScaleModel m_Model
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Pun::PhotonTransformViewScaleModel* m_Model;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonTransformViewScaleModel*) == 0x8);
    // private UnityEngine.Vector3 m_NetworkScale
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 m_NetworkScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private Photon.Pun.PhotonTransformViewScaleModel m_Model
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonTransformViewScaleModel*& dyn_m_Model();
    // Get instance field reference: private UnityEngine.Vector3 m_NetworkScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_NetworkScale();
    // public System.Void .ctor(Photon.Pun.PhotonTransformViewScaleModel model)
    // Offset: 0x1B783F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonTransformViewScaleControl* New_ctor(::Photon::Pun::PhotonTransformViewScaleModel* model) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonTransformViewScaleControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonTransformViewScaleControl*, creationType>(model)));
    }
    // public UnityEngine.Vector3 GetNetworkScale()
    // Offset: 0x1B799F8
    ::UnityEngine::Vector3 GetNetworkScale();
    // public UnityEngine.Vector3 GetScale(UnityEngine.Vector3 currentScale)
    // Offset: 0x1B78C34
    ::UnityEngine::Vector3 GetScale(::UnityEngine::Vector3 currentScale);
    // public System.Void OnPhotonSerializeView(UnityEngine.Vector3 currentScale, Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B79150
    void OnPhotonSerializeView(::UnityEngine::Vector3 currentScale, ::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
  }; // Photon.Pun.PhotonTransformViewScaleControl
  #pragma pack(pop)
  static check_size<sizeof(PhotonTransformViewScaleControl), 24 + sizeof(::UnityEngine::Vector3)> __Photon_Pun_PhotonTransformViewScaleControlSizeCheck;
  static_assert(sizeof(PhotonTransformViewScaleControl) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewScaleControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewScaleControl::GetNetworkScale
// Il2CppName: GetNetworkScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Photon::Pun::PhotonTransformViewScaleControl::*)()>(&Photon::Pun::PhotonTransformViewScaleControl::GetNetworkScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformViewScaleControl*), "GetNetworkScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewScaleControl::GetScale
// Il2CppName: GetScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (Photon::Pun::PhotonTransformViewScaleControl::*)(::UnityEngine::Vector3)>(&Photon::Pun::PhotonTransformViewScaleControl::GetScale)> {
  static const MethodInfo* get() {
    static auto* currentScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformViewScaleControl*), "GetScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentScale});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewScaleControl::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformViewScaleControl::*)(::UnityEngine::Vector3, ::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonTransformViewScaleControl::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* currentScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformViewScaleControl*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentScale, stream, info});
  }
};
