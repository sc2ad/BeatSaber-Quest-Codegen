// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Realtime.ConnectionHandler
#include "Photon/Realtime/ConnectionHandler.hpp"
// Including type: Photon.Realtime.IInRoomCallbacks
#include "Photon/Realtime/IInRoomCallbacks.hpp"
// Including type: Photon.Realtime.IMatchmakingCallbacks
#include "Photon/Realtime/IMatchmakingCallbacks.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: SupportLogger
  class SupportLogger;
  // Forward declaring type: Player
  class Player;
  // Forward declaring type: FriendInfo
  class FriendInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonHandler
  class PhotonHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonHandler);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonHandler*, "Photon.Pun", "PhotonHandler");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonHandler : public ::Photon::Realtime::ConnectionHandler/*, public ::Photon::Realtime::IInRoomCallbacks, public ::Photon::Realtime::IMatchmakingCallbacks*/ {
    public:
    // Nested type: ::Photon::Pun::PhotonHandler::$$c
    class $$c;
    public:
    // protected internal System.Int32 UpdateInterval
    // Size: 0x4
    // Offset: 0x38
    int UpdateInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected internal System.Int32 UpdateIntervalOnSerialize
    // Size: 0x4
    // Offset: 0x3C
    int UpdateIntervalOnSerialize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nextSendTickCount
    // Size: 0x4
    // Offset: 0x40
    int nextSendTickCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nextSendTickCountOnSerialize
    // Size: 0x4
    // Offset: 0x44
    int nextSendTickCountOnSerialize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Realtime.SupportLogger supportLoggerComponent
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Realtime::SupportLogger* supportLoggerComponent;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::SupportLogger*) == 0x8);
    // protected System.Collections.Generic.List`1<System.Int32> reusableIntList
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<int>* reusableIntList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Realtime::IInRoomCallbacks
    operator ::Photon::Realtime::IInRoomCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IInRoomCallbacks*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Realtime::IMatchmakingCallbacks
    operator ::Photon::Realtime::IMatchmakingCallbacks() noexcept {
      return *reinterpret_cast<::Photon::Realtime::IMatchmakingCallbacks*>(this);
    }
    // Get static field: static private Photon.Pun.PhotonHandler instance
    static ::Photon::Pun::PhotonHandler* _get_instance();
    // Set static field: static private Photon.Pun.PhotonHandler instance
    static void _set_instance(::Photon::Pun::PhotonHandler* value);
    // Get static field: static public System.Int32 MaxDatagrams
    static int _get_MaxDatagrams();
    // Set static field: static public System.Int32 MaxDatagrams
    static void _set_MaxDatagrams(int value);
    // Get static field: static public System.Boolean SendAsap
    static bool _get_SendAsap();
    // Set static field: static public System.Boolean SendAsap
    static void _set_SendAsap(bool value);
    // static field const value: static private System.Int32 SerializeRateFrameCorrection
    static constexpr const int SerializeRateFrameCorrection = 8;
    // Get static field: static private System.Int32 SerializeRateFrameCorrection
    static int _get_SerializeRateFrameCorrection();
    // Set static field: static private System.Int32 SerializeRateFrameCorrection
    static void _set_SerializeRateFrameCorrection(int value);
    // Get instance field reference: protected internal System.Int32 UpdateInterval
    [[deprecated("Use field access instead!")]] int& dyn_UpdateInterval();
    // Get instance field reference: protected internal System.Int32 UpdateIntervalOnSerialize
    [[deprecated("Use field access instead!")]] int& dyn_UpdateIntervalOnSerialize();
    // Get instance field reference: private System.Int32 nextSendTickCount
    [[deprecated("Use field access instead!")]] int& dyn_nextSendTickCount();
    // Get instance field reference: private System.Int32 nextSendTickCountOnSerialize
    [[deprecated("Use field access instead!")]] int& dyn_nextSendTickCountOnSerialize();
    // Get instance field reference: private Photon.Realtime.SupportLogger supportLoggerComponent
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::SupportLogger*& dyn_supportLoggerComponent();
    // Get instance field reference: protected System.Collections.Generic.List`1<System.Int32> reusableIntList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_reusableIntList();
    // static Photon.Pun.PhotonHandler get_Instance()
    // Offset: 0x108444C
    static ::Photon::Pun::PhotonHandler* get_Instance();
    // public System.Void .ctor()
    // Offset: 0x1086FE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonHandler*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1087050
    static void _cctor();
    // protected System.Void OnEnable()
    // Offset: 0x108473C
    void OnEnable();
    // protected System.Void Start()
    // Offset: 0x1084C50
    void Start();
    // protected System.Void FixedUpdate()
    // Offset: 0x1084D9C
    void FixedUpdate();
    // protected System.Void LateUpdate()
    // Offset: 0x1084FB8
    void LateUpdate();
    // protected System.Void Dispatch()
    // Offset: 0x1084E30
    void Dispatch();
    // public System.Void OnCreatedRoom()
    // Offset: 0x10856DC
    void OnCreatedRoom();
    // public System.Void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    // Offset: 0x1085BD4
    void OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* propertiesThatChanged);
    // public System.Void OnPlayerPropertiesUpdate(Photon.Realtime.Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
    // Offset: 0x1085EC0
    void OnPlayerPropertiesUpdate(::Photon::Realtime::Player* targetPlayer, ::ExitGames::Client::Photon::Hashtable* changedProps);
    // public System.Void OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0x1085EC4
    void OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
    // public System.Void OnFriendListUpdate(System.Collections.Generic.List`1<Photon.Realtime.FriendInfo> friendList)
    // Offset: 0x10860BC
    void OnFriendListUpdate(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>* friendList);
    // public System.Void OnCreateRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x10860C0
    void OnCreateRoomFailed(int16_t returnCode, ::StringW message);
    // public System.Void OnJoinRoomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x10860C4
    void OnJoinRoomFailed(int16_t returnCode, ::StringW message);
    // public System.Void OnJoinRandomFailed(System.Int16 returnCode, System.String message)
    // Offset: 0x10860C8
    void OnJoinRandomFailed(int16_t returnCode, ::StringW message);
    // public System.Void OnJoinedRoom()
    // Offset: 0x10860CC
    void OnJoinedRoom();
    // public System.Void OnLeftRoom()
    // Offset: 0x108663C
    void OnLeftRoom();
    // public System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0x108695C
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0x1086B98
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // protected override System.Void Awake()
    // Offset: 0x1084604
    // Implemented from: Photon.Realtime.ConnectionHandler
    // Base method: System.Void ConnectionHandler::Awake()
    void Awake();
    // protected override System.Void OnDisable()
    // Offset: 0x1084D2C
    // Implemented from: Photon.Realtime.ConnectionHandler
    // Base method: System.Void ConnectionHandler::OnDisable()
    void OnDisable();
  }; // Photon.Pun.PhotonHandler
  #pragma pack(pop)
  static check_size<sizeof(PhotonHandler), 80 + sizeof(::System::Collections::Generic::List_1<int>*)> __Photon_Pun_PhotonHandlerSizeCheck;
  static_assert(sizeof(PhotonHandler) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonHandler* (*)()>(&Photon::Pun::PhotonHandler::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Pun::PhotonHandler::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::Dispatch
// Il2CppName: Dispatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::Dispatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "Dispatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnCreatedRoom
// Il2CppName: OnCreatedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::OnCreatedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnCreatedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnRoomPropertiesUpdate
// Il2CppName: OnRoomPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(::ExitGames::Client::Photon::Hashtable*)>(&Photon::Pun::PhotonHandler::OnRoomPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* propertiesThatChanged = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnRoomPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesThatChanged});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnPlayerPropertiesUpdate
// Il2CppName: OnPlayerPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(::Photon::Realtime::Player*, ::ExitGames::Client::Photon::Hashtable*)>(&Photon::Pun::PhotonHandler::OnPlayerPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* changedProps = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnPlayerPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetPlayer, changedProps});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnMasterClientSwitched
// Il2CppName: OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(::Photon::Realtime::Player*)>(&Photon::Pun::PhotonHandler::OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnFriendListUpdate
// Il2CppName: OnFriendListUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(::System::Collections::Generic::List_1<::Photon::Realtime::FriendInfo*>*)>(&Photon::Pun::PhotonHandler::OnFriendListUpdate)> {
  static const MethodInfo* get() {
    static auto* friendList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Photon.Realtime", "FriendInfo")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnFriendListUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{friendList});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnCreateRoomFailed
// Il2CppName: OnCreateRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(int16_t, ::StringW)>(&Photon::Pun::PhotonHandler::OnCreateRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnCreateRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnJoinRoomFailed
// Il2CppName: OnJoinRoomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(int16_t, ::StringW)>(&Photon::Pun::PhotonHandler::OnJoinRoomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnJoinRoomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnJoinRandomFailed
// Il2CppName: OnJoinRandomFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(int16_t, ::StringW)>(&Photon::Pun::PhotonHandler::OnJoinRandomFailed)> {
  static const MethodInfo* get() {
    static auto* returnCode = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnJoinRandomFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{returnCode, message});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnLeftRoom
// Il2CppName: OnLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::OnLeftRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(::Photon::Realtime::Player*)>(&Photon::Pun::PhotonHandler::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)(::Photon::Realtime::Player*)>(&Photon::Pun::PhotonHandler::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonHandler::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonHandler::*)()>(&Photon::Pun::PhotonHandler::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonHandler*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
