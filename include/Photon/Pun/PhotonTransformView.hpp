// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonTransformView
  class PhotonTransformView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonTransformView);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonTransformView*, "Photon.Pun", "PhotonTransformView");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonTransformView
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 954C6C
  // [HelpURLAttribute] Offset: 954C6C
  class PhotonTransformView : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // private System.Single m_Distance
    // Size: 0x4
    // Offset: 0x20
    float m_Distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Angle
    // Size: 0x4
    // Offset: 0x24
    float m_Angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 m_Direction
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 m_Direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_NetworkPosition
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 m_NetworkPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_StoredPosition
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 m_StoredPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion m_NetworkRotation
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Quaternion m_NetworkRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Boolean m_SynchronizePosition
    // Size: 0x1
    // Offset: 0x5C
    bool m_SynchronizePosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_SynchronizeRotation
    // Size: 0x1
    // Offset: 0x5D
    bool m_SynchronizeRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_SynchronizeScale
    // Size: 0x1
    // Offset: 0x5E
    bool m_SynchronizeScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9552B8
    // public System.Boolean m_UseLocal
    // Size: 0x1
    // Offset: 0x5F
    bool m_UseLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_firstTake
    // Size: 0x1
    // Offset: 0x60
    bool m_firstTake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: private System.Single m_Distance
    [[deprecated("Use field access instead!")]] float& dyn_m_Distance();
    // Get instance field reference: private System.Single m_Angle
    [[deprecated("Use field access instead!")]] float& dyn_m_Angle();
    // Get instance field reference: private UnityEngine.Vector3 m_Direction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_Direction();
    // Get instance field reference: private UnityEngine.Vector3 m_NetworkPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_NetworkPosition();
    // Get instance field reference: private UnityEngine.Vector3 m_StoredPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_m_StoredPosition();
    // Get instance field reference: private UnityEngine.Quaternion m_NetworkRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_NetworkRotation();
    // Get instance field reference: public System.Boolean m_SynchronizePosition
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizePosition();
    // Get instance field reference: public System.Boolean m_SynchronizeRotation
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizeRotation();
    // Get instance field reference: public System.Boolean m_SynchronizeScale
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizeScale();
    // Get instance field reference: public System.Boolean m_UseLocal
    [[deprecated("Use field access instead!")]] bool& dyn_m_UseLocal();
    // Get instance field reference: private System.Boolean m_firstTake
    [[deprecated("Use field access instead!")]] bool& dyn_m_firstTake();
    // public System.Void Awake()
    // Offset: 0x1B777AC
    void Awake();
    // private System.Void Reset()
    // Offset: 0x1B77870
    void Reset();
    // private System.Void OnEnable()
    // Offset: 0x1B7787C
    void OnEnable();
    // public System.Void Update()
    // Offset: 0x1B77888
    void Update();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B77C20
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x1B7822C
    // Implemented from: Photon.Pun.MonoBehaviourPun
    // Base method: System.Void MonoBehaviourPun::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonTransformView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonTransformView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonTransformView*, creationType>()));
    }
  }; // Photon.Pun.PhotonTransformView
  #pragma pack(pop)
  static check_size<sizeof(PhotonTransformView), 96 + sizeof(bool)> __Photon_Pun_PhotonTransformViewSizeCheck;
  static_assert(sizeof(PhotonTransformView) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformView::*)()>(&Photon::Pun::PhotonTransformView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformView::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformView::*)()>(&Photon::Pun::PhotonTransformView::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformView*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformView::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformView::*)()>(&Photon::Pun::PhotonTransformView::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformView*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformView::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformView::*)()>(&Photon::Pun::PhotonTransformView::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformView*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformView::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformView::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonTransformView::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformView*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
