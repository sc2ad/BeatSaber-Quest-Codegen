// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.IPunPrefabPool
#include "Photon/Pun/IPunPrefabPool.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: DefaultPool
  class DefaultPool;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::DefaultPool);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::DefaultPool*, "Photon.Pun", "DefaultPool");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.DefaultPool
  // [TokenAttribute] Offset: FFFFFFFF
  class DefaultPool : public ::Il2CppObject/*, public ::Photon::Pun::IPunPrefabPool*/ {
    public:
    public:
    // public readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> ResourceCache
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>* ResourceCache;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunPrefabPool
    operator ::Photon::Pun::IPunPrefabPool() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunPrefabPool*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*
    constexpr operator ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*() const noexcept {
      return ResourceCache;
    }
    // Get instance field reference: public readonly System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> ResourceCache
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*& dyn_ResourceCache();
    // public System.Void .ctor()
    // Offset: 0x1081E7C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultPool* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::DefaultPool::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultPool*, creationType>()));
    }
    // public UnityEngine.GameObject Instantiate(System.String prefabId, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation)
    // Offset: 0x1081BE8
    ::UnityEngine::GameObject* Instantiate(::StringW prefabId, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation);
    // public System.Void Destroy(UnityEngine.GameObject gameObject)
    // Offset: 0x1081E14
    void Destroy(::UnityEngine::GameObject* gameObject);
  }; // Photon.Pun.DefaultPool
  #pragma pack(pop)
  static check_size<sizeof(DefaultPool), 16 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*)> __Photon_Pun_DefaultPoolSizeCheck;
  static_assert(sizeof(DefaultPool) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::DefaultPool::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::DefaultPool::Instantiate
// Il2CppName: Instantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (Photon::Pun::DefaultPool::*)(::StringW, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&Photon::Pun::DefaultPool::Instantiate)> {
  static const MethodInfo* get() {
    static auto* prefabId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::DefaultPool*), "Instantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prefabId, position, rotation});
  }
};
// Writing MetadataGetter for method: Photon::Pun::DefaultPool::Destroy
// Il2CppName: Destroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::DefaultPool::*)(::UnityEngine::GameObject*)>(&Photon::Pun::DefaultPool::Destroy)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::DefaultPool*), "Destroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject});
  }
};
