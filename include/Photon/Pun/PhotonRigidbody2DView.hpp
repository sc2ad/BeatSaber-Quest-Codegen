// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody2D
  class Rigidbody2D;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonRigidbody2DView
  class PhotonRigidbody2DView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonRigidbody2DView);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonRigidbody2DView*, "Photon.Pun", "PhotonRigidbody2DView");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x44
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonRigidbody2DView
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 954B5C
  // [AddComponentMenu] Offset: 954B5C
  class PhotonRigidbody2DView : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // private System.Single m_Distance
    // Size: 0x4
    // Offset: 0x20
    float m_Distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_Angle
    // Size: 0x4
    // Offset: 0x24
    float m_Angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rigidbody2D m_Body
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rigidbody2D* m_Body;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody2D*) == 0x8);
    // private UnityEngine.Vector2 m_NetworkPosition
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Vector2 m_NetworkPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private System.Single m_NetworkRotation
    // Size: 0x4
    // Offset: 0x38
    float m_NetworkRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean m_SynchronizeVelocity
    // Size: 0x1
    // Offset: 0x3C
    bool m_SynchronizeVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_SynchronizeAngularVelocity
    // Size: 0x1
    // Offset: 0x3D
    bool m_SynchronizeAngularVelocity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean m_TeleportEnabled
    // Size: 0x1
    // Offset: 0x3E
    bool m_TeleportEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_TeleportEnabled and: m_TeleportIfDistanceGreaterThan
    char __padding7[0x1] = {};
    // public System.Single m_TeleportIfDistanceGreaterThan
    // Size: 0x4
    // Offset: 0x40
    float m_TeleportIfDistanceGreaterThan;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: private System.Single m_Distance
    [[deprecated("Use field access instead!")]] float& dyn_m_Distance();
    // Get instance field reference: private System.Single m_Angle
    [[deprecated("Use field access instead!")]] float& dyn_m_Angle();
    // Get instance field reference: private UnityEngine.Rigidbody2D m_Body
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& dyn_m_Body();
    // Get instance field reference: private UnityEngine.Vector2 m_NetworkPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_NetworkPosition();
    // Get instance field reference: private System.Single m_NetworkRotation
    [[deprecated("Use field access instead!")]] float& dyn_m_NetworkRotation();
    // Get instance field reference: public System.Boolean m_SynchronizeVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizeVelocity();
    // Get instance field reference: public System.Boolean m_SynchronizeAngularVelocity
    [[deprecated("Use field access instead!")]] bool& dyn_m_SynchronizeAngularVelocity();
    // Get instance field reference: public System.Boolean m_TeleportEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_TeleportEnabled();
    // Get instance field reference: public System.Single m_TeleportIfDistanceGreaterThan
    [[deprecated("Use field access instead!")]] float& dyn_m_TeleportIfDistanceGreaterThan();
    // public System.Void Awake()
    // Offset: 0x1B750AC
    void Awake();
    // public System.Void FixedUpdate()
    // Offset: 0x1B75104
    void FixedUpdate();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B752B8
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0x1B758A4
    // Implemented from: Photon.Pun.MonoBehaviourPun
    // Base method: System.Void MonoBehaviourPun::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonRigidbody2DView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonRigidbody2DView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonRigidbody2DView*, creationType>()));
    }
  }; // Photon.Pun.PhotonRigidbody2DView
  #pragma pack(pop)
  static check_size<sizeof(PhotonRigidbody2DView), 64 + sizeof(float)> __Photon_Pun_PhotonRigidbody2DViewSizeCheck;
  static_assert(sizeof(PhotonRigidbody2DView) == 0x44);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonRigidbody2DView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonRigidbody2DView::*)()>(&Photon::Pun::PhotonRigidbody2DView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonRigidbody2DView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonRigidbody2DView::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonRigidbody2DView::*)()>(&Photon::Pun::PhotonRigidbody2DView::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonRigidbody2DView*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonRigidbody2DView::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonRigidbody2DView::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonRigidbody2DView::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonRigidbody2DView*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonRigidbody2DView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
