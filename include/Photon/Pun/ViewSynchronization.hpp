// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: ViewSynchronization
  struct ViewSynchronization;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::ViewSynchronization, "Photon.Pun", "ViewSynchronization");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.ViewSynchronization
  // [TokenAttribute] Offset: FFFFFFFF
  struct ViewSynchronization/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: ViewSynchronization
    constexpr ViewSynchronization(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public Photon.Pun.ViewSynchronization Off
    static constexpr const int Off = 0;
    // Get static field: static public Photon.Pun.ViewSynchronization Off
    static ::Photon::Pun::ViewSynchronization _get_Off();
    // Set static field: static public Photon.Pun.ViewSynchronization Off
    static void _set_Off(::Photon::Pun::ViewSynchronization value);
    // static field const value: static public Photon.Pun.ViewSynchronization ReliableDeltaCompressed
    static constexpr const int ReliableDeltaCompressed = 1;
    // Get static field: static public Photon.Pun.ViewSynchronization ReliableDeltaCompressed
    static ::Photon::Pun::ViewSynchronization _get_ReliableDeltaCompressed();
    // Set static field: static public Photon.Pun.ViewSynchronization ReliableDeltaCompressed
    static void _set_ReliableDeltaCompressed(::Photon::Pun::ViewSynchronization value);
    // static field const value: static public Photon.Pun.ViewSynchronization Unreliable
    static constexpr const int Unreliable = 2;
    // Get static field: static public Photon.Pun.ViewSynchronization Unreliable
    static ::Photon::Pun::ViewSynchronization _get_Unreliable();
    // Set static field: static public Photon.Pun.ViewSynchronization Unreliable
    static void _set_Unreliable(::Photon::Pun::ViewSynchronization value);
    // static field const value: static public Photon.Pun.ViewSynchronization UnreliableOnChange
    static constexpr const int UnreliableOnChange = 3;
    // Get static field: static public Photon.Pun.ViewSynchronization UnreliableOnChange
    static ::Photon::Pun::ViewSynchronization _get_UnreliableOnChange();
    // Set static field: static public Photon.Pun.ViewSynchronization UnreliableOnChange
    static void _set_UnreliableOnChange(::Photon::Pun::ViewSynchronization value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // Photon.Pun.ViewSynchronization
  #pragma pack(pop)
  static check_size<sizeof(ViewSynchronization), 0 + sizeof(int)> __Photon_Pun_ViewSynchronizationSizeCheck;
  static_assert(sizeof(ViewSynchronization) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
