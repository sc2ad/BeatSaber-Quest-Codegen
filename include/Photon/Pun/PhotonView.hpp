// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.ViewSynchronization
#include "Photon/Pun/ViewSynchronization.hpp"
// Including type: Photon.Pun.OwnershipOption
#include "Photon/Pun/OwnershipOption.hpp"
// Including type: Photon.Pun.RpcTarget
#include "Photon/Pun/RpcTarget.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Component because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: IOnPhotonViewPreNetDestroy
  class IOnPhotonViewPreNetDestroy;
  // Forward declaring type: IOnPhotonViewOwnerChange
  class IOnPhotonViewOwnerChange;
  // Forward declaring type: IOnPhotonViewControllerChange
  class IOnPhotonViewControllerChange;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
  // Forward declaring type: IPhotonViewCallback
  class IPhotonViewCallback;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonView);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonView*, "Photon.Pun", "PhotonView");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonView
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 954A94
  class PhotonView : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::Photon::Pun::PhotonView::ObservableSearch
    struct ObservableSearch;
    // Nested type: ::Photon::Pun::PhotonView::CallbackTargetChange
    struct CallbackTargetChange;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Photon.Pun.PhotonView/Photon.Pun.ObservableSearch
    // [TokenAttribute] Offset: FFFFFFFF
    struct ObservableSearch/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ObservableSearch
      constexpr ObservableSearch(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch Manual
      static constexpr const int Manual = 0;
      // Get static field: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch Manual
      static ::Photon::Pun::PhotonView::ObservableSearch _get_Manual();
      // Set static field: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch Manual
      static void _set_Manual(::Photon::Pun::PhotonView::ObservableSearch value);
      // static field const value: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch AutoFindActive
      static constexpr const int AutoFindActive = 1;
      // Get static field: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch AutoFindActive
      static ::Photon::Pun::PhotonView::ObservableSearch _get_AutoFindActive();
      // Set static field: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch AutoFindActive
      static void _set_AutoFindActive(::Photon::Pun::PhotonView::ObservableSearch value);
      // static field const value: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch AutoFindAll
      static constexpr const int AutoFindAll = 2;
      // Get static field: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch AutoFindAll
      static ::Photon::Pun::PhotonView::ObservableSearch _get_AutoFindAll();
      // Set static field: static public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch AutoFindAll
      static void _set_AutoFindAll(::Photon::Pun::PhotonView::ObservableSearch value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Photon.Pun.PhotonView/Photon.Pun.ObservableSearch
    #pragma pack(pop)
    static check_size<sizeof(PhotonView::ObservableSearch), 0 + sizeof(int)> __Photon_Pun_PhotonView_ObservableSearchSizeCheck;
    static_assert(sizeof(PhotonView::ObservableSearch) == 0x4);
    // Size: 0x11
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Photon.Pun.PhotonView/Photon.Pun.CallbackTargetChange
    // [TokenAttribute] Offset: FFFFFFFF
    struct CallbackTargetChange/*, public ::System::ValueType*/ {
      public:
      public:
      // public Photon.Pun.IPhotonViewCallback obj
      // Size: 0x8
      // Offset: 0x0
      ::Photon::Pun::IPhotonViewCallback* obj;
      // Field size check
      static_assert(sizeof(::Photon::Pun::IPhotonViewCallback*) == 0x8);
      // public System.Type type
      // Size: 0x8
      // Offset: 0x8
      ::System::Type* type;
      // Field size check
      static_assert(sizeof(::System::Type*) == 0x8);
      // public System.Boolean add
      // Size: 0x1
      // Offset: 0x10
      bool add;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      public:
      // Creating value type constructor for type: CallbackTargetChange
      constexpr CallbackTargetChange(::Photon::Pun::IPhotonViewCallback* obj_ = {}, ::System::Type* type_ = {}, bool add_ = {}) noexcept : obj{obj_}, type{type_}, add{add_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public Photon.Pun.IPhotonViewCallback obj
      [[deprecated("Use field access instead!")]] ::Photon::Pun::IPhotonViewCallback*& dyn_obj();
      // Get instance field reference: public System.Type type
      [[deprecated("Use field access instead!")]] ::System::Type*& dyn_type();
      // Get instance field reference: public System.Boolean add
      [[deprecated("Use field access instead!")]] bool& dyn_add();
      // public System.Void .ctor(Photon.Pun.IPhotonViewCallback obj, System.Type type, System.Boolean add)
      // Offset: 0xA78C8C
      // ABORTED: conflicts with another method.  CallbackTargetChange(::Photon::Pun::IPhotonViewCallback* obj, ::System::Type* type, bool add);
    }; // Photon.Pun.PhotonView/Photon.Pun.CallbackTargetChange
    #pragma pack(pop)
    static check_size<sizeof(PhotonView::CallbackTargetChange), 16 + sizeof(bool)> __Photon_Pun_PhotonView_CallbackTargetChangeSizeCheck;
    static_assert(sizeof(PhotonView::CallbackTargetChange) == 0x11);
    public:
    // [FormerlySerializedAsAttribute] Offset: 0x954DC4
    // public System.Byte Group
    // Size: 0x1
    // Offset: 0x18
    uint8_t Group;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Group and: prefixField
    char __padding0[0x3] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x954DFC
    // public System.Int32 prefixField
    // Size: 0x4
    // Offset: 0x1C
    int prefixField;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.Object[] instantiationDataField
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::Il2CppObject*> instantiationDataField;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
    // protected internal System.Collections.Generic.List`1<System.Object> lastOnSerializeDataSent
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Il2CppObject*>* lastOnSerializeDataSent;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // protected internal System.Collections.Generic.List`1<System.Object> syncValues
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::Il2CppObject*>* syncValues;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // protected internal System.Object[] lastOnSerializeDataReceived
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::Il2CppObject*> lastOnSerializeDataReceived;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0x954E34
    // public Photon.Pun.ViewSynchronization Synchronization
    // Size: 0x4
    // Offset: 0x40
    ::Photon::Pun::ViewSynchronization Synchronization;
    // Field size check
    static_assert(sizeof(::Photon::Pun::ViewSynchronization) == 0x4);
    // protected internal System.Boolean mixedModeIsReliable
    // Size: 0x1
    // Offset: 0x44
    bool mixedModeIsReliable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mixedModeIsReliable and: OwnershipTransfer
    char __padding7[0x3] = {};
    // [FormerlySerializedAsAttribute] Offset: 0x954E6C
    // public Photon.Pun.OwnershipOption OwnershipTransfer
    // Size: 0x4
    // Offset: 0x48
    ::Photon::Pun::OwnershipOption OwnershipTransfer;
    // Field size check
    static_assert(sizeof(::Photon::Pun::OwnershipOption) == 0x4);
    // public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch observableSearch
    // Size: 0x4
    // Offset: 0x4C
    ::Photon::Pun::PhotonView::ObservableSearch observableSearch;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView::ObservableSearch) == 0x4);
    // public System.Collections.Generic.List`1<UnityEngine.Component> ObservedComponents
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Component*>* ObservedComponents;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Component*>*) == 0x8);
    // UnityEngine.MonoBehaviour[] RpcMonoBehaviours
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::MonoBehaviour*> RpcMonoBehaviours;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MonoBehaviour*>) == 0x8);
    // private System.Boolean <IsMine>k__BackingField
    // Size: 0x1
    // Offset: 0x60
    bool IsMine;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsMine and: Controller
    char __padding12[0x7] = {};
    // private Photon.Realtime.Player <Controller>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::Photon::Realtime::Player* Controller;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Int32 <CreatorActorNr>k__BackingField
    // Size: 0x4
    // Offset: 0x70
    int CreatorActorNr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <AmOwner>k__BackingField
    // Size: 0x1
    // Offset: 0x74
    bool AmOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: AmOwner and: Owner
    char __padding15[0x3] = {};
    // private Photon.Realtime.Player <Owner>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::Photon::Realtime::Player* Owner;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Int32 ownerActorNr
    // Size: 0x4
    // Offset: 0x80
    int ownerActorNr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 controllerActorNr
    // Size: 0x4
    // Offset: 0x84
    int controllerActorNr;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0x954EF4
    // public System.Int32 sceneViewId
    // Size: 0x4
    // Offset: 0x88
    int sceneViewId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 viewIdField
    // Size: 0x4
    // Offset: 0x8C
    int viewIdField;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0x954F50
    // public System.Int32 InstantiationId
    // Size: 0x4
    // Offset: 0x90
    int InstantiationId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isRuntimeInstantiated
    // Size: 0x1
    // Offset: 0x94
    bool isRuntimeInstantiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected internal System.Boolean removedFromLocalViewList
    // Size: 0x1
    // Offset: 0x95
    bool removedFromLocalViewList;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: removedFromLocalViewList and: CallbackChangeQueue
    char __padding23[0x2] = {};
    // private System.Collections.Generic.Queue`1<Photon.Pun.PhotonView/Photon.Pun.CallbackTargetChange> CallbackChangeQueue
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::Queue_1<::Photon::Pun::PhotonView::CallbackTargetChange>* CallbackChangeQueue;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Queue_1<::Photon::Pun::PhotonView::CallbackTargetChange>*) == 0x8);
    // private System.Collections.Generic.List`1<Photon.Pun.IOnPhotonViewPreNetDestroy> OnPreNetDestroyCallbacks
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewPreNetDestroy*>* OnPreNetDestroyCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewPreNetDestroy*>*) == 0x8);
    // private System.Collections.Generic.List`1<Photon.Pun.IOnPhotonViewOwnerChange> OnOwnerChangeCallbacks
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewOwnerChange*>* OnOwnerChangeCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewOwnerChange*>*) == 0x8);
    // private System.Collections.Generic.List`1<Photon.Pun.IOnPhotonViewControllerChange> OnControllerChangeCallbacks
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewControllerChange*>* OnControllerChangeCallbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewControllerChange*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Byte Group
    [[deprecated("Use field access instead!")]] uint8_t& dyn_Group();
    // Get instance field reference: public System.Int32 prefixField
    [[deprecated("Use field access instead!")]] int& dyn_prefixField();
    // Get instance field reference: System.Object[] instantiationDataField
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn_instantiationDataField();
    // Get instance field reference: protected internal System.Collections.Generic.List`1<System.Object> lastOnSerializeDataSent
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_lastOnSerializeDataSent();
    // Get instance field reference: protected internal System.Collections.Generic.List`1<System.Object> syncValues
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_syncValues();
    // Get instance field reference: protected internal System.Object[] lastOnSerializeDataReceived
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn_lastOnSerializeDataReceived();
    // Get instance field reference: public Photon.Pun.ViewSynchronization Synchronization
    [[deprecated("Use field access instead!")]] ::Photon::Pun::ViewSynchronization& dyn_Synchronization();
    // Get instance field reference: protected internal System.Boolean mixedModeIsReliable
    [[deprecated("Use field access instead!")]] bool& dyn_mixedModeIsReliable();
    // Get instance field reference: public Photon.Pun.OwnershipOption OwnershipTransfer
    [[deprecated("Use field access instead!")]] ::Photon::Pun::OwnershipOption& dyn_OwnershipTransfer();
    // Get instance field reference: public Photon.Pun.PhotonView/Photon.Pun.ObservableSearch observableSearch
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView::ObservableSearch& dyn_observableSearch();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Component> ObservedComponents
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Component*>*& dyn_ObservedComponents();
    // Get instance field reference: UnityEngine.MonoBehaviour[] RpcMonoBehaviours
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MonoBehaviour*>& dyn_RpcMonoBehaviours();
    // Get instance field reference: private System.Boolean <IsMine>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$IsMine$k__BackingField();
    // Get instance field reference: private Photon.Realtime.Player <Controller>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_$Controller$k__BackingField();
    // Get instance field reference: private System.Int32 <CreatorActorNr>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CreatorActorNr$k__BackingField();
    // Get instance field reference: private System.Boolean <AmOwner>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$AmOwner$k__BackingField();
    // Get instance field reference: private Photon.Realtime.Player <Owner>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_$Owner$k__BackingField();
    // Get instance field reference: private System.Int32 ownerActorNr
    [[deprecated("Use field access instead!")]] int& dyn_ownerActorNr();
    // Get instance field reference: private System.Int32 controllerActorNr
    [[deprecated("Use field access instead!")]] int& dyn_controllerActorNr();
    // Get instance field reference: public System.Int32 sceneViewId
    [[deprecated("Use field access instead!")]] int& dyn_sceneViewId();
    // Get instance field reference: private System.Int32 viewIdField
    [[deprecated("Use field access instead!")]] int& dyn_viewIdField();
    // Get instance field reference: public System.Int32 InstantiationId
    [[deprecated("Use field access instead!")]] int& dyn_InstantiationId();
    // Get instance field reference: public System.Boolean isRuntimeInstantiated
    [[deprecated("Use field access instead!")]] bool& dyn_isRuntimeInstantiated();
    // Get instance field reference: protected internal System.Boolean removedFromLocalViewList
    [[deprecated("Use field access instead!")]] bool& dyn_removedFromLocalViewList();
    // Get instance field reference: private System.Collections.Generic.Queue`1<Photon.Pun.PhotonView/Photon.Pun.CallbackTargetChange> CallbackChangeQueue
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Queue_1<::Photon::Pun::PhotonView::CallbackTargetChange>*& dyn_CallbackChangeQueue();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Pun.IOnPhotonViewPreNetDestroy> OnPreNetDestroyCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewPreNetDestroy*>*& dyn_OnPreNetDestroyCallbacks();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Pun.IOnPhotonViewOwnerChange> OnOwnerChangeCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewOwnerChange*>*& dyn_OnOwnerChangeCallbacks();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Pun.IOnPhotonViewControllerChange> OnControllerChangeCallbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewControllerChange*>*& dyn_OnControllerChangeCallbacks();
    // public System.Int32 get_Prefix()
    // Offset: 0x1B79A04
    int get_Prefix();
    // public System.Void set_Prefix(System.Int32 value)
    // Offset: 0x1B79AAC
    void set_Prefix(int value);
    // public System.Object[] get_InstantiationData()
    // Offset: 0x1B79AB4
    ::ArrayW<::Il2CppObject*> get_InstantiationData();
    // protected internal System.Void set_InstantiationData(System.Object[] value)
    // Offset: 0x1B79ABC
    void set_InstantiationData(::ArrayW<::Il2CppObject*> value);
    // public System.Boolean get_IsSceneView()
    // Offset: 0x1B79AC4
    bool get_IsSceneView();
    // public System.Boolean get_IsRoomView()
    // Offset: 0x1B79AD4
    bool get_IsRoomView();
    // public System.Boolean get_IsOwnerActive()
    // Offset: 0x1B79AE4
    bool get_IsOwnerActive();
    // public System.Boolean get_IsMine()
    // Offset: 0x1B79B04
    bool get_IsMine();
    // private System.Void set_IsMine(System.Boolean value)
    // Offset: 0x1B79B0C
    void set_IsMine(bool value);
    // public System.Boolean get_AmController()
    // Offset: 0x1B79B18
    bool get_AmController();
    // public Photon.Realtime.Player get_Controller()
    // Offset: 0x1B79B20
    ::Photon::Realtime::Player* get_Controller();
    // private System.Void set_Controller(Photon.Realtime.Player value)
    // Offset: 0x1B79B28
    void set_Controller(::Photon::Realtime::Player* value);
    // public System.Int32 get_CreatorActorNr()
    // Offset: 0x1B79B30
    int get_CreatorActorNr();
    // private System.Void set_CreatorActorNr(System.Int32 value)
    // Offset: 0x1B79B38
    void set_CreatorActorNr(int value);
    // public System.Boolean get_AmOwner()
    // Offset: 0x1B79B40
    bool get_AmOwner();
    // private System.Void set_AmOwner(System.Boolean value)
    // Offset: 0x1B79B48
    void set_AmOwner(bool value);
    // public Photon.Realtime.Player get_Owner()
    // Offset: 0x1B79B54
    ::Photon::Realtime::Player* get_Owner();
    // private System.Void set_Owner(Photon.Realtime.Player value)
    // Offset: 0x1B79B5C
    void set_Owner(::Photon::Realtime::Player* value);
    // public System.Int32 get_OwnerActorNr()
    // Offset: 0x1B79B64
    int get_OwnerActorNr();
    // public System.Void set_OwnerActorNr(System.Int32 value)
    // Offset: 0x1B79B6C
    void set_OwnerActorNr(int value);
    // public System.Int32 get_ControllerActorNr()
    // Offset: 0x1B7A04C
    int get_ControllerActorNr();
    // public System.Void set_ControllerActorNr(System.Int32 value)
    // Offset: 0x1B7A054
    void set_ControllerActorNr(int value);
    // public System.Int32 get_ViewID()
    // Offset: 0x1B7A2A0
    int get_ViewID();
    // public System.Void set_ViewID(System.Int32 value)
    // Offset: 0x1B7A2A8
    void set_ViewID(int value);
    // public System.Void .ctor()
    // Offset: 0x1B7BF84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonView*, creationType>()));
    }
    // protected internal System.Void Awake()
    // Offset: 0x1B7A4C4
    void Awake();
    // System.Void ResetPhotonView(System.Boolean resetOwner)
    // Offset: 0x1B7A614
    void ResetPhotonView(bool resetOwner);
    // System.Void RebuildControllerCache(System.Boolean ownerHasChanged)
    // Offset: 0x1B7A428
    void RebuildControllerCache(bool ownerHasChanged);
    // public System.Void OnPreNetDestroy(Photon.Pun.PhotonView rootView)
    // Offset: 0x1B7A61C
    void OnPreNetDestroy(::Photon::Pun::PhotonView* rootView);
    // protected internal System.Void OnDestroy()
    // Offset: 0x1B7A738
    void OnDestroy();
    // public System.Void RequestOwnership()
    // Offset: 0x1B7A880
    void RequestOwnership();
    // public System.Void TransferOwnership(Photon.Realtime.Player newOwner)
    // Offset: 0x1B7AAD8
    void TransferOwnership(::Photon::Realtime::Player* newOwner);
    // public System.Void TransferOwnership(System.Int32 newOwnerId)
    // Offset: 0x1B7AD04
    void TransferOwnership(int newOwnerId);
    // public System.Void FindObservables(System.Boolean force)
    // Offset: 0x1B7A504
    void FindObservables(bool force);
    // public System.Void SerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B7B08C
    void SerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void DeserializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B7B42C
    void DeserializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // protected internal System.Void DeserializeComponent(UnityEngine.Component component, Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B7B530
    void DeserializeComponent(::UnityEngine::Component* component, ::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // protected internal System.Void SerializeComponent(UnityEngine.Component component, Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B7B1BC
    void SerializeComponent(::UnityEngine::Component* component, ::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void RefreshRpcMonoBehaviourCache()
    // Offset: 0x1B7B7A0
    void RefreshRpcMonoBehaviourCache();
    // public System.Void RPC(System.String methodName, Photon.Pun.RpcTarget target, params System.Object[] parameters)
    // Offset: 0x1B7B7F8
    void RPC(::StringW methodName, ::Photon::Pun::RpcTarget target, ::ArrayW<::Il2CppObject*> parameters);
    // public System.Void RpcSecure(System.String methodName, Photon.Pun.RpcTarget target, System.Boolean encrypt, params System.Object[] parameters)
    // Offset: 0x1B7B88C
    void RpcSecure(::StringW methodName, ::Photon::Pun::RpcTarget target, bool encrypt, ::ArrayW<::Il2CppObject*> parameters);
    // public System.Void RPC(System.String methodName, Photon.Realtime.Player targetPlayer, params System.Object[] parameters)
    // Offset: 0x1B7B924
    void RPC(::StringW methodName, ::Photon::Realtime::Player* targetPlayer, ::ArrayW<::Il2CppObject*> parameters);
    // public System.Void RpcSecure(System.String methodName, Photon.Realtime.Player targetPlayer, System.Boolean encrypt, params System.Object[] parameters)
    // Offset: 0x1B7B9B8
    void RpcSecure(::StringW methodName, ::Photon::Realtime::Player* targetPlayer, bool encrypt, ::ArrayW<::Il2CppObject*> parameters);
    // static public Photon.Pun.PhotonView Get(UnityEngine.Component component)
    // Offset: 0x1B7BA50
    static ::Photon::Pun::PhotonView* Get(::UnityEngine::Component* component);
    // static public Photon.Pun.PhotonView Get(UnityEngine.GameObject gameObj)
    // Offset: 0x1B7BADC
    static ::Photon::Pun::PhotonView* Get(::UnityEngine::GameObject* gameObj);
    // static public Photon.Pun.PhotonView Find(System.Int32 viewID)
    // Offset: 0x1B7BB68
    static ::Photon::Pun::PhotonView* Find(int viewID);
    // public System.Void AddCallbackTarget(Photon.Pun.IPhotonViewCallback obj)
    // Offset: 0x1B7BBD0
    void AddCallbackTarget(::Photon::Pun::IPhotonViewCallback* obj);
    // public System.Void RemoveCallbackTarget(Photon.Pun.IPhotonViewCallback obj)
    // Offset: 0x1B7BC84
    void RemoveCallbackTarget(::Photon::Pun::IPhotonViewCallback* obj);
    // public System.Void AddCallback(Photon.Pun.IPhotonViewCallback obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void AddCallback(::Photon::Pun::IPhotonViewCallback* obj) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Photon::Pun::IPhotonViewCallback>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonView::AddCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "AddCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, obj);
    }
    // public System.Void RemoveCallback(Photon.Pun.IPhotonViewCallback obj)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RemoveCallback(::Photon::Pun::IPhotonViewCallback* obj) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Photon::Pun::IPhotonViewCallback>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonView::RemoveCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RemoveCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, obj);
    }
    // private System.Void UpdateCallbackLists()
    // Offset: 0x1B79D8C
    void UpdateCallbackLists();
    // private System.Void TryRegisterCallback(Photon.Pun.IPhotonViewCallback obj, ref System.Collections.Generic.List`1<T> list, System.Boolean add)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void TryRegisterCallback(::Photon::Pun::IPhotonViewCallback* obj, ByRef<::System::Collections::Generic::List_1<T>*> list, bool add) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Photon::Pun::IPhotonViewCallback>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonView::TryRegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryRegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(add)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, obj, byref(list), add);
    }
    // private System.Void RegisterCallback(T obj, ref System.Collections.Generic.List`1<T> list, System.Boolean add)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void RegisterCallback(T obj, ByRef<::System::Collections::Generic::List_1<T>*> list, bool add) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::Photon::Pun::IPhotonViewCallback>);
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonView::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(obj), ::il2cpp_utils::ExtractType(list), ::il2cpp_utils::ExtractType(add)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, obj, byref(list), add);
    }
    // public override System.String ToString()
    // Offset: 0x1B7BD24
    // Implemented from: UnityEngine.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Photon.Pun.PhotonView
  #pragma pack(pop)
  static check_size<sizeof(PhotonView), 176 + sizeof(::System::Collections::Generic::List_1<::Photon::Pun::IOnPhotonViewControllerChange*>*)> __Photon_Pun_PhotonViewSizeCheck;
  static_assert(sizeof(PhotonView) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonView::CallbackTargetChange, "Photon.Pun", "PhotonView/CallbackTargetChange");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonView::ObservableSearch, "Photon.Pun", "PhotonView/ObservableSearch");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_Prefix
// Il2CppName: get_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_Prefix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_Prefix
// Il2CppName: set_Prefix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(int)>(&Photon::Pun::PhotonView::set_Prefix)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_Prefix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_InstantiationData
// Il2CppName: get_InstantiationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Il2CppObject*> (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_InstantiationData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_InstantiationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_InstantiationData
// Il2CppName: set_InstantiationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::ArrayW<::Il2CppObject*>)>(&Photon::Pun::PhotonView::set_InstantiationData)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_InstantiationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_IsSceneView
// Il2CppName: get_IsSceneView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_IsSceneView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_IsSceneView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_IsRoomView
// Il2CppName: get_IsRoomView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_IsRoomView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_IsRoomView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_IsOwnerActive
// Il2CppName: get_IsOwnerActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_IsOwnerActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_IsOwnerActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_IsMine
// Il2CppName: get_IsMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_IsMine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_IsMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_IsMine
// Il2CppName: set_IsMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(bool)>(&Photon::Pun::PhotonView::set_IsMine)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_IsMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_AmController
// Il2CppName: get_AmController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_AmController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_AmController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_Controller
// Il2CppName: get_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_Controller)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_Controller
// Il2CppName: set_Controller
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Realtime::Player*)>(&Photon::Pun::PhotonView::set_Controller)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_Controller", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_CreatorActorNr
// Il2CppName: get_CreatorActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_CreatorActorNr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_CreatorActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_CreatorActorNr
// Il2CppName: set_CreatorActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(int)>(&Photon::Pun::PhotonView::set_CreatorActorNr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_CreatorActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_AmOwner
// Il2CppName: get_AmOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_AmOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_AmOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_AmOwner
// Il2CppName: set_AmOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(bool)>(&Photon::Pun::PhotonView::set_AmOwner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_AmOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_Owner
// Il2CppName: get_Owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_Owner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_Owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_Owner
// Il2CppName: set_Owner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Realtime::Player*)>(&Photon::Pun::PhotonView::set_Owner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_Owner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_OwnerActorNr
// Il2CppName: get_OwnerActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_OwnerActorNr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_OwnerActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_OwnerActorNr
// Il2CppName: set_OwnerActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(int)>(&Photon::Pun::PhotonView::set_OwnerActorNr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_OwnerActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_ControllerActorNr
// Il2CppName: get_ControllerActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_ControllerActorNr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_ControllerActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_ControllerActorNr
// Il2CppName: set_ControllerActorNr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(int)>(&Photon::Pun::PhotonView::set_ControllerActorNr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_ControllerActorNr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::get_ViewID
// Il2CppName: get_ViewID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::get_ViewID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "get_ViewID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::set_ViewID
// Il2CppName: set_ViewID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(int)>(&Photon::Pun::PhotonView::set_ViewID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "set_ViewID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonView::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::ResetPhotonView
// Il2CppName: ResetPhotonView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(bool)>(&Photon::Pun::PhotonView::ResetPhotonView)> {
  static const MethodInfo* get() {
    static auto* resetOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "ResetPhotonView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{resetOwner});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RebuildControllerCache
// Il2CppName: RebuildControllerCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(bool)>(&Photon::Pun::PhotonView::RebuildControllerCache)> {
  static const MethodInfo* get() {
    static auto* ownerHasChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RebuildControllerCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ownerHasChanged});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::OnPreNetDestroy
// Il2CppName: OnPreNetDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Pun::PhotonView*)>(&Photon::Pun::PhotonView::OnPreNetDestroy)> {
  static const MethodInfo* get() {
    static auto* rootView = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonView")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "OnPreNetDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rootView});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RequestOwnership
// Il2CppName: RequestOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::RequestOwnership)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RequestOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::TransferOwnership
// Il2CppName: TransferOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Realtime::Player*)>(&Photon::Pun::PhotonView::TransferOwnership)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "TransferOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::TransferOwnership
// Il2CppName: TransferOwnership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(int)>(&Photon::Pun::PhotonView::TransferOwnership)> {
  static const MethodInfo* get() {
    static auto* newOwnerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "TransferOwnership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwnerId});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::FindObservables
// Il2CppName: FindObservables
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(bool)>(&Photon::Pun::PhotonView::FindObservables)> {
  static const MethodInfo* get() {
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "FindObservables", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{force});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::SerializeView
// Il2CppName: SerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonView::SerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "SerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::DeserializeView
// Il2CppName: DeserializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonView::DeserializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "DeserializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::DeserializeComponent
// Il2CppName: DeserializeComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::UnityEngine::Component*, ::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonView::DeserializeComponent)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "DeserializeComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::SerializeComponent
// Il2CppName: SerializeComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::UnityEngine::Component*, ::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonView::SerializeComponent)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "SerializeComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component, stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RefreshRpcMonoBehaviourCache
// Il2CppName: RefreshRpcMonoBehaviourCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::RefreshRpcMonoBehaviourCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RefreshRpcMonoBehaviourCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RPC
// Il2CppName: RPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::StringW, ::Photon::Pun::RpcTarget, ::ArrayW<::Il2CppObject*>)>(&Photon::Pun::PhotonView::RPC)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Pun", "RpcTarget")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName, target, parameters});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RpcSecure
// Il2CppName: RpcSecure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::StringW, ::Photon::Pun::RpcTarget, bool, ::ArrayW<::Il2CppObject*>)>(&Photon::Pun::PhotonView::RpcSecure)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* target = &::il2cpp_utils::GetClassFromName("Photon.Pun", "RpcTarget")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RpcSecure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName, target, encrypt, parameters});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RPC
// Il2CppName: RPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::StringW, ::Photon::Realtime::Player*, ::ArrayW<::Il2CppObject*>)>(&Photon::Pun::PhotonView::RPC)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName, targetPlayer, parameters});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RpcSecure
// Il2CppName: RpcSecure
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::StringW, ::Photon::Realtime::Player*, bool, ::ArrayW<::Il2CppObject*>)>(&Photon::Pun::PhotonView::RpcSecure)> {
  static const MethodInfo* get() {
    static auto* methodName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* encrypt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Object"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RpcSecure", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{methodName, targetPlayer, encrypt, parameters});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (*)(::UnityEngine::Component*)>(&Photon::Pun::PhotonView::Get)> {
  static const MethodInfo* get() {
    static auto* component = &::il2cpp_utils::GetClassFromName("UnityEngine", "Component")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{component});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::Get
// Il2CppName: Get
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (*)(::UnityEngine::GameObject*)>(&Photon::Pun::PhotonView::Get)> {
  static const MethodInfo* get() {
    static auto* gameObj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "Get", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObj});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::Find
// Il2CppName: Find
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (*)(int)>(&Photon::Pun::PhotonView::Find)> {
  static const MethodInfo* get() {
    static auto* viewID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "Find", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewID});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::AddCallbackTarget
// Il2CppName: AddCallbackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Pun::IPhotonViewCallback*)>(&Photon::Pun::PhotonView::AddCallbackTarget)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Photon.Pun", "IPhotonViewCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "AddCallbackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RemoveCallbackTarget
// Il2CppName: RemoveCallbackTarget
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)(::Photon::Pun::IPhotonViewCallback*)>(&Photon::Pun::PhotonView::RemoveCallbackTarget)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("Photon.Pun", "IPhotonViewCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "RemoveCallbackTarget", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::AddCallback
// Il2CppName: AddCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RemoveCallback
// Il2CppName: RemoveCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Pun::PhotonView::UpdateCallbackLists
// Il2CppName: UpdateCallbackLists
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::UpdateCallbackLists)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "UpdateCallbackLists", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonView::TryRegisterCallback
// Il2CppName: TryRegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Pun::PhotonView::RegisterCallback
// Il2CppName: RegisterCallback
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: Photon::Pun::PhotonView::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Pun::PhotonView::*)()>(&Photon::Pun::PhotonView::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonView*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
