// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonTransformViewRotationModel
  class PhotonTransformViewRotationModel;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonTransformViewRotationControl
  class PhotonTransformViewRotationControl;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonTransformViewRotationControl);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonTransformViewRotationControl*, "Photon.Pun", "PhotonTransformViewRotationControl");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonTransformViewRotationControl
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonTransformViewRotationControl : public ::Il2CppObject {
    public:
    public:
    // private Photon.Pun.PhotonTransformViewRotationModel m_Model
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Pun::PhotonTransformViewRotationModel* m_Model;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonTransformViewRotationModel*) == 0x8);
    // private UnityEngine.Quaternion m_NetworkRotation
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Quaternion m_NetworkRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: private Photon.Pun.PhotonTransformViewRotationModel m_Model
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonTransformViewRotationModel*& dyn_m_Model();
    // Get instance field reference: private UnityEngine.Quaternion m_NetworkRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_m_NetworkRotation();
    // public System.Void .ctor(Photon.Pun.PhotonTransformViewRotationModel model)
    // Offset: 0x1B783C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonTransformViewRotationControl* New_ctor(::Photon::Pun::PhotonTransformViewRotationModel* model) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonTransformViewRotationControl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonTransformViewRotationControl*, creationType>(model)));
    }
    // public UnityEngine.Quaternion GetNetworkRotation()
    // Offset: 0x1B799EC
    ::UnityEngine::Quaternion GetNetworkRotation();
    // public UnityEngine.Quaternion GetRotation(UnityEngine.Quaternion currentRotation)
    // Offset: 0x1B78AAC
    ::UnityEngine::Quaternion GetRotation(::UnityEngine::Quaternion currentRotation);
    // public System.Void OnPhotonSerializeView(UnityEngine.Quaternion currentRotation, Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x1B79048
    void OnPhotonSerializeView(::UnityEngine::Quaternion currentRotation, ::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
  }; // Photon.Pun.PhotonTransformViewRotationControl
  #pragma pack(pop)
  static check_size<sizeof(PhotonTransformViewRotationControl), 24 + sizeof(::UnityEngine::Quaternion)> __Photon_Pun_PhotonTransformViewRotationControlSizeCheck;
  static_assert(sizeof(PhotonTransformViewRotationControl) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewRotationControl::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewRotationControl::GetNetworkRotation
// Il2CppName: GetNetworkRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Photon::Pun::PhotonTransformViewRotationControl::*)()>(&Photon::Pun::PhotonTransformViewRotationControl::GetNetworkRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformViewRotationControl*), "GetNetworkRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewRotationControl::GetRotation
// Il2CppName: GetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (Photon::Pun::PhotonTransformViewRotationControl::*)(::UnityEngine::Quaternion)>(&Photon::Pun::PhotonTransformViewRotationControl::GetRotation)> {
  static const MethodInfo* get() {
    static auto* currentRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformViewRotationControl*), "GetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentRotation});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewRotationControl::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonTransformViewRotationControl::*)(::UnityEngine::Quaternion, ::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::PhotonTransformViewRotationControl::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* currentRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonTransformViewRotationControl*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentRotation, stream, info});
  }
};
