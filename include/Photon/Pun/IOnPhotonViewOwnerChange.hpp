// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.IPhotonViewCallback
#include "Photon/Pun/IPhotonViewCallback.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: IOnPhotonViewOwnerChange
  class IOnPhotonViewOwnerChange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::IOnPhotonViewOwnerChange);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::IOnPhotonViewOwnerChange*, "Photon.Pun", "IOnPhotonViewOwnerChange");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.IOnPhotonViewOwnerChange
  // [TokenAttribute] Offset: FFFFFFFF
  class IOnPhotonViewOwnerChange/*, public ::Photon::Pun::IPhotonViewCallback*/ {
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPhotonViewCallback
    operator ::Photon::Pun::IPhotonViewCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPhotonViewCallback*>(this);
    }
    // public System.Void OnOwnerChange(Photon.Realtime.Player newOwner, Photon.Realtime.Player previousOwner)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnOwnerChange(::Photon::Realtime::Player* newOwner, ::Photon::Realtime::Player* previousOwner);
  }; // Photon.Pun.IOnPhotonViewOwnerChange
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::IOnPhotonViewOwnerChange::OnOwnerChange
// Il2CppName: OnOwnerChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::IOnPhotonViewOwnerChange::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&Photon::Pun::IOnPhotonViewOwnerChange::OnOwnerChange)> {
  static const MethodInfo* get() {
    static auto* newOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::IOnPhotonViewOwnerChange*), "OnOwnerChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newOwner, previousOwner});
  }
};
