// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStreamQueue
  class PhotonStreamQueue;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonStreamQueue);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonStreamQueue*, "Photon.Pun", "PhotonStreamQueue");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonStreamQueue
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonStreamQueue : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 m_SampleRate
    // Size: 0x4
    // Offset: 0x10
    int m_SampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_SampleCount
    // Size: 0x4
    // Offset: 0x14
    int m_SampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_ObjectsPerSample
    // Size: 0x4
    // Offset: 0x18
    int m_ObjectsPerSample;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single m_LastSampleTime
    // Size: 0x4
    // Offset: 0x1C
    float m_LastSampleTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_LastFrameCount
    // Size: 0x4
    // Offset: 0x20
    int m_LastFrameCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_NextObjectIndex
    // Size: 0x4
    // Offset: 0x24
    int m_NextObjectIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<System.Object> m_Objects
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::Il2CppObject*>* m_Objects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // private System.Boolean m_IsWriting
    // Size: 0x1
    // Offset: 0x30
    bool m_IsWriting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Int32 m_SampleRate
    [[deprecated("Use field access instead!")]] int& dyn_m_SampleRate();
    // Get instance field reference: private System.Int32 m_SampleCount
    [[deprecated("Use field access instead!")]] int& dyn_m_SampleCount();
    // Get instance field reference: private System.Int32 m_ObjectsPerSample
    [[deprecated("Use field access instead!")]] int& dyn_m_ObjectsPerSample();
    // Get instance field reference: private System.Single m_LastSampleTime
    [[deprecated("Use field access instead!")]] float& dyn_m_LastSampleTime();
    // Get instance field reference: private System.Int32 m_LastFrameCount
    [[deprecated("Use field access instead!")]] int& dyn_m_LastFrameCount();
    // Get instance field reference: private System.Int32 m_NextObjectIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_NextObjectIndex();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Object> m_Objects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_m_Objects();
    // Get instance field reference: private System.Boolean m_IsWriting
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsWriting();
    // public System.Void .ctor(System.Int32 sampleRate)
    // Offset: 0x1B76F8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonStreamQueue* New_ctor(int sampleRate) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonStreamQueue::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonStreamQueue*, creationType>(sampleRate)));
    }
    // private System.Void BeginWritePackage()
    // Offset: 0x1B77020
    void BeginWritePackage();
    // public System.Void Reset()
    // Offset: 0x1B77374
    void Reset();
    // public System.Void SendNext(System.Object obj)
    // Offset: 0x1B773DC
    void SendNext(::Il2CppObject* obj);
    // public System.Boolean HasQueuedObjects()
    // Offset: 0x1B77484
    bool HasQueuedObjects();
    // public System.Object ReceiveNext()
    // Offset: 0x1B77494
    ::Il2CppObject* ReceiveNext();
    // public System.Void Serialize(Photon.Pun.PhotonStream stream)
    // Offset: 0x1B7753C
    void Serialize(::Photon::Pun::PhotonStream* stream);
    // public System.Void Deserialize(Photon.Pun.PhotonStream stream)
    // Offset: 0x1B77664
    void Deserialize(::Photon::Pun::PhotonStream* stream);
  }; // Photon.Pun.PhotonStreamQueue
  #pragma pack(pop)
  static check_size<sizeof(PhotonStreamQueue), 48 + sizeof(bool)> __Photon_Pun_PhotonStreamQueueSizeCheck;
  static_assert(sizeof(PhotonStreamQueue) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::BeginWritePackage
// Il2CppName: BeginWritePackage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonStreamQueue::*)()>(&Photon::Pun::PhotonStreamQueue::BeginWritePackage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "BeginWritePackage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonStreamQueue::*)()>(&Photon::Pun::PhotonStreamQueue::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::SendNext
// Il2CppName: SendNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonStreamQueue::*)(::Il2CppObject*)>(&Photon::Pun::PhotonStreamQueue::SendNext)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "SendNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::HasQueuedObjects
// Il2CppName: HasQueuedObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonStreamQueue::*)()>(&Photon::Pun::PhotonStreamQueue::HasQueuedObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "HasQueuedObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::ReceiveNext
// Il2CppName: ReceiveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (Photon::Pun::PhotonStreamQueue::*)()>(&Photon::Pun::PhotonStreamQueue::ReceiveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "ReceiveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonStreamQueue::*)(::Photon::Pun::PhotonStream*)>(&Photon::Pun::PhotonStreamQueue::Serialize)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonStreamQueue::Deserialize
// Il2CppName: Deserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonStreamQueue::*)(::Photon::Pun::PhotonStream*)>(&Photon::Pun::PhotonStreamQueue::Deserialize)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonStreamQueue*), "Deserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream});
  }
};
