// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.EventSystems.IPointerEnterHandler
#include "UnityEngine/EventSystems/IPointerEnterHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerExitHandler
#include "UnityEngine/EventSystems/IPointerExitHandler.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
  // Forward declaring type: Graphic
  class Graphic;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: GraphicToggleIsOnTransition
  class GraphicToggleIsOnTransition;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition*, "Photon.Pun.UtilityScripts", "GraphicToggleIsOnTransition");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.GraphicToggleIsOnTransition
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 99228C
  class GraphicToggleIsOnTransition : public ::UnityEngine::MonoBehaviour/*, public ::UnityEngine::EventSystems::IPointerEnterHandler, public ::UnityEngine::EventSystems::IPointerExitHandler*/ {
    public:
    public:
    // public UnityEngine.UI.Toggle toggle
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Toggle* toggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Graphic _graphic
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Graphic* graphic;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
    // public UnityEngine.Color NormalOnColor
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Color NormalOnColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color NormalOffColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color NormalOffColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color HoverOnColor
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Color HoverOnColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color HoverOffColor
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Color HoverOffColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean isHover
    // Size: 0x1
    // Offset: 0x68
    bool isHover;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerEnterHandler
    operator ::UnityEngine::EventSystems::IPointerEnterHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerEnterHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerExitHandler
    operator ::UnityEngine::EventSystems::IPointerExitHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerExitHandler*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.Toggle toggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn_toggle();
    // Get instance field reference: private UnityEngine.UI.Graphic _graphic
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn__graphic();
    // Get instance field reference: public UnityEngine.Color NormalOnColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_NormalOnColor();
    // Get instance field reference: public UnityEngine.Color NormalOffColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_NormalOffColor();
    // Get instance field reference: public UnityEngine.Color HoverOnColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_HoverOnColor();
    // Get instance field reference: public UnityEngine.Color HoverOffColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_HoverOffColor();
    // Get instance field reference: private System.Boolean isHover
    [[deprecated("Use field access instead!")]] bool& dyn_isHover();
    // public System.Void .ctor()
    // Offset: 0x164DB5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GraphicToggleIsOnTransition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GraphicToggleIsOnTransition*, creationType>()));
    }
    // public System.Void OnPointerEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x164D898
    void OnPointerEnter(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x164D910
    void OnPointerExit(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnEnable()
    // Offset: 0x164D984
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0x164DAB8
    void OnDisable();
    // public System.Void OnValueChanged(System.Boolean isOn)
    // Offset: 0x164DA54
    void OnValueChanged(bool isOn);
  }; // Photon.Pun.UtilityScripts.GraphicToggleIsOnTransition
  #pragma pack(pop)
  static check_size<sizeof(GraphicToggleIsOnTransition), 104 + sizeof(bool)> __Photon_Pun_UtilityScripts_GraphicToggleIsOnTransitionSizeCheck;
  static_assert(sizeof(GraphicToggleIsOnTransition) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnPointerEnter
// Il2CppName: OnPointerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::*)(::UnityEngine::EventSystems::PointerEventData*)>(&Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnPointerEnter)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition*), "OnPointerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnPointerExit
// Il2CppName: OnPointerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::*)(::UnityEngine::EventSystems::PointerEventData*)>(&Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnPointerExit)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition*), "OnPointerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::*)()>(&Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::*)()>(&Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnValueChanged
// Il2CppName: OnValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::*)(bool)>(&Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition::OnValueChanged)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::GraphicToggleIsOnTransition*), "OnValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
