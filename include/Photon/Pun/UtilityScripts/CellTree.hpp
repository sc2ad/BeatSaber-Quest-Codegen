// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun::UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CellTreeNode
  class CellTreeNode;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CellTree
  class CellTree;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::CellTree);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::CellTree*, "Photon.Pun.UtilityScripts", "CellTree");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.CellTree
  // [TokenAttribute] Offset: FFFFFFFF
  class CellTree : public ::Il2CppObject {
    public:
    public:
    // private Photon.Pun.UtilityScripts.CellTreeNode <RootNode>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Pun::UtilityScripts::CellTreeNode* RootNode;
    // Field size check
    static_assert(sizeof(::Photon::Pun::UtilityScripts::CellTreeNode*) == 0x8);
    public:
    // Creating conversion operator: operator ::Photon::Pun::UtilityScripts::CellTreeNode*
    constexpr operator ::Photon::Pun::UtilityScripts::CellTreeNode*() const noexcept {
      return RootNode;
    }
    // Get instance field reference: private Photon.Pun.UtilityScripts.CellTreeNode <RootNode>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Pun::UtilityScripts::CellTreeNode*& dyn_$RootNode$k__BackingField();
    // public Photon.Pun.UtilityScripts.CellTreeNode get_RootNode()
    // Offset: 0x164A770
    ::Photon::Pun::UtilityScripts::CellTreeNode* get_RootNode();
    // private System.Void set_RootNode(Photon.Pun.UtilityScripts.CellTreeNode value)
    // Offset: 0x164A778
    void set_RootNode(::Photon::Pun::UtilityScripts::CellTreeNode* value);
    // public System.Void .ctor()
    // Offset: 0x164A780
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CellTree* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::CellTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CellTree*, creationType>()));
    }
    // public System.Void .ctor(Photon.Pun.UtilityScripts.CellTreeNode root)
    // Offset: 0x164A788
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CellTree* New_ctor(::Photon::Pun::UtilityScripts::CellTreeNode* root) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::CellTree::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CellTree*, creationType>(root)));
    }
  }; // Photon.Pun.UtilityScripts.CellTree
  #pragma pack(pop)
  static check_size<sizeof(CellTree), 16 + sizeof(::Photon::Pun::UtilityScripts::CellTreeNode*)> __Photon_Pun_UtilityScripts_CellTreeSizeCheck;
  static_assert(sizeof(CellTree) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CellTree::get_RootNode
// Il2CppName: get_RootNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::UtilityScripts::CellTreeNode* (Photon::Pun::UtilityScripts::CellTree::*)()>(&Photon::Pun::UtilityScripts::CellTree::get_RootNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CellTree*), "get_RootNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CellTree::set_RootNode
// Il2CppName: set_RootNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CellTree::*)(::Photon::Pun::UtilityScripts::CellTreeNode*)>(&Photon::Pun::UtilityScripts::CellTree::set_RootNode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Pun.UtilityScripts", "CellTreeNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CellTree*), "set_RootNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CellTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CellTree::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
