// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun::UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CellTree
  class CellTree;
  // Forward declaring type: CellTreeNode
  class CellTreeNode;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CullArea
  class CullArea;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::CullArea);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::CullArea*, "Photon.Pun.UtilityScripts", "CullArea");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x6B
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.CullArea
  // [TokenAttribute] Offset: FFFFFFFF
  class CullArea : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public readonly System.Byte FIRST_GROUP_ID
    // Size: 0x1
    // Offset: 0x18
    uint8_t FIRST_GROUP_ID;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: FIRST_GROUP_ID and: SUBDIVISION_FIRST_LEVEL_ORDER
    char __padding0[0x7] = {};
    // public readonly System.Int32[] SUBDIVISION_FIRST_LEVEL_ORDER
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> SUBDIVISION_FIRST_LEVEL_ORDER;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly System.Int32[] SUBDIVISION_SECOND_LEVEL_ORDER
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> SUBDIVISION_SECOND_LEVEL_ORDER;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public readonly System.Int32[] SUBDIVISION_THIRD_LEVEL_ORDER
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> SUBDIVISION_THIRD_LEVEL_ORDER;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.Vector2 Center
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 Center;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 Size
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Vector2 Size;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2[] Subdivisions
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector2> Subdivisions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // public System.Int32 NumberOfSubdivisions
    // Size: 0x4
    // Offset: 0x50
    int NumberOfSubdivisions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <CellCount>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    int CellCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private Photon.Pun.UtilityScripts.CellTree <CellTree>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Pun::UtilityScripts::CellTree* CellTree;
    // Field size check
    static_assert(sizeof(::Photon::Pun::UtilityScripts::CellTree*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.GameObject> <Map>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>* Map;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>*) == 0x8);
    // public System.Boolean YIsUpAxis
    // Size: 0x1
    // Offset: 0x68
    bool YIsUpAxis;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean RecreateCellHierarchy
    // Size: 0x1
    // Offset: 0x69
    bool RecreateCellHierarchy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Byte idCounter
    // Size: 0x1
    // Offset: 0x6A
    uint8_t idCounter;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 MAX_NUMBER_OF_ALLOWED_CELLS
    static constexpr const int MAX_NUMBER_OF_ALLOWED_CELLS = 250;
    // Get static field: static private System.Int32 MAX_NUMBER_OF_ALLOWED_CELLS
    static int _get_MAX_NUMBER_OF_ALLOWED_CELLS();
    // Set static field: static private System.Int32 MAX_NUMBER_OF_ALLOWED_CELLS
    static void _set_MAX_NUMBER_OF_ALLOWED_CELLS(int value);
    // static field const value: static public System.Int32 MAX_NUMBER_OF_SUBDIVISIONS
    static constexpr const int MAX_NUMBER_OF_SUBDIVISIONS = 3;
    // Get static field: static public System.Int32 MAX_NUMBER_OF_SUBDIVISIONS
    static int _get_MAX_NUMBER_OF_SUBDIVISIONS();
    // Set static field: static public System.Int32 MAX_NUMBER_OF_SUBDIVISIONS
    static void _set_MAX_NUMBER_OF_SUBDIVISIONS(int value);
    // Get instance field reference: public readonly System.Byte FIRST_GROUP_ID
    [[deprecated("Use field access instead!")]] uint8_t& dyn_FIRST_GROUP_ID();
    // Get instance field reference: public readonly System.Int32[] SUBDIVISION_FIRST_LEVEL_ORDER
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_SUBDIVISION_FIRST_LEVEL_ORDER();
    // Get instance field reference: public readonly System.Int32[] SUBDIVISION_SECOND_LEVEL_ORDER
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_SUBDIVISION_SECOND_LEVEL_ORDER();
    // Get instance field reference: public readonly System.Int32[] SUBDIVISION_THIRD_LEVEL_ORDER
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_SUBDIVISION_THIRD_LEVEL_ORDER();
    // Get instance field reference: public UnityEngine.Vector2 Center
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_Center();
    // Get instance field reference: public UnityEngine.Vector2 Size
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_Size();
    // Get instance field reference: public UnityEngine.Vector2[] Subdivisions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_Subdivisions();
    // Get instance field reference: public System.Int32 NumberOfSubdivisions
    [[deprecated("Use field access instead!")]] int& dyn_NumberOfSubdivisions();
    // Get instance field reference: private System.Int32 <CellCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$CellCount$k__BackingField();
    // Get instance field reference: private Photon.Pun.UtilityScripts.CellTree <CellTree>k__BackingField
    [[deprecated("Use field access instead!")]] ::Photon::Pun::UtilityScripts::CellTree*& dyn_$CellTree$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.GameObject> <Map>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>*& dyn_$Map$k__BackingField();
    // Get instance field reference: public System.Boolean YIsUpAxis
    [[deprecated("Use field access instead!")]] bool& dyn_YIsUpAxis();
    // Get instance field reference: public System.Boolean RecreateCellHierarchy
    [[deprecated("Use field access instead!")]] bool& dyn_RecreateCellHierarchy();
    // Get instance field reference: private System.Byte idCounter
    [[deprecated("Use field access instead!")]] uint8_t& dyn_idCounter();
    // public System.Int32 get_CellCount()
    // Offset: 0x164BF38
    int get_CellCount();
    // private System.Void set_CellCount(System.Int32 value)
    // Offset: 0x164BF40
    void set_CellCount(int value);
    // public Photon.Pun.UtilityScripts.CellTree get_CellTree()
    // Offset: 0x164BF48
    ::Photon::Pun::UtilityScripts::CellTree* get_CellTree();
    // private System.Void set_CellTree(Photon.Pun.UtilityScripts.CellTree value)
    // Offset: 0x164BF50
    void set_CellTree(::Photon::Pun::UtilityScripts::CellTree* value);
    // public System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.GameObject> get_Map()
    // Offset: 0x164BF58
    ::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>* get_Map();
    // private System.Void set_Map(System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.GameObject> value)
    // Offset: 0x164BF60
    void set_Map(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>* value);
    // public System.Void .ctor()
    // Offset: 0x164CAB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CullArea* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::CullArea::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CullArea*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x164BF68
    void Awake();
    // public System.Void OnDrawGizmos()
    // Offset: 0x164C4F0
    void OnDrawGizmos();
    // private System.Void CreateCellHierarchy()
    // Offset: 0x164BF74
    void CreateCellHierarchy();
    // private System.Void CreateChildCells(Photon.Pun.UtilityScripts.CellTreeNode parent, System.Int32 cellLevelInHierarchy)
    // Offset: 0x164C600
    void CreateChildCells(::Photon::Pun::UtilityScripts::CellTreeNode* parent, int cellLevelInHierarchy);
    // private System.Void DrawCells()
    // Offset: 0x164C53C
    void DrawCells();
    // private System.Boolean IsCellCountAllowed()
    // Offset: 0x164C55C
    bool IsCellCountAllowed();
    // public System.Collections.Generic.List`1<System.Byte> GetActiveCells(UnityEngine.Vector3 position)
    // Offset: 0x164C9A4
    ::System::Collections::Generic::List_1<uint8_t>* GetActiveCells(::UnityEngine::Vector3 position);
  }; // Photon.Pun.UtilityScripts.CullArea
  #pragma pack(pop)
  static check_size<sizeof(CullArea), 106 + sizeof(uint8_t)> __Photon_Pun_UtilityScripts_CullAreaSizeCheck;
  static_assert(sizeof(CullArea) == 0x6B);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::get_CellCount
// Il2CppName: get_CellCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::get_CellCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "get_CellCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::set_CellCount
// Il2CppName: set_CellCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)(int)>(&Photon::Pun::UtilityScripts::CullArea::set_CellCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "set_CellCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::get_CellTree
// Il2CppName: get_CellTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::UtilityScripts::CellTree* (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::get_CellTree)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "get_CellTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::set_CellTree
// Il2CppName: set_CellTree
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)(::Photon::Pun::UtilityScripts::CellTree*)>(&Photon::Pun::UtilityScripts::CullArea::set_CellTree)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Pun.UtilityScripts", "CellTree")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "set_CellTree", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::get_Map
// Il2CppName: get_Map
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>* (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::get_Map)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "get_Map", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::set_Map
// Il2CppName: set_Map
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)(::System::Collections::Generic::Dictionary_2<int, ::UnityEngine::GameObject*>*)>(&Photon::Pun::UtilityScripts::CullArea::set_Map)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "set_Map", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::CreateCellHierarchy
// Il2CppName: CreateCellHierarchy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::CreateCellHierarchy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "CreateCellHierarchy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::CreateChildCells
// Il2CppName: CreateChildCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)(::Photon::Pun::UtilityScripts::CellTreeNode*, int)>(&Photon::Pun::UtilityScripts::CullArea::CreateChildCells)> {
  static const MethodInfo* get() {
    static auto* parent = &::il2cpp_utils::GetClassFromName("Photon.Pun.UtilityScripts", "CellTreeNode")->byval_arg;
    static auto* cellLevelInHierarchy = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "CreateChildCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parent, cellLevelInHierarchy});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::DrawCells
// Il2CppName: DrawCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::DrawCells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "DrawCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::IsCellCountAllowed
// Il2CppName: IsCellCountAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::UtilityScripts::CullArea::*)()>(&Photon::Pun::UtilityScripts::CullArea::IsCellCountAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "IsCellCountAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullArea::GetActiveCells
// Il2CppName: GetActiveCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<uint8_t>* (Photon::Pun::UtilityScripts::CullArea::*)(::UnityEngine::Vector3)>(&Photon::Pun::UtilityScripts::CullArea::GetActiveCells)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullArea*), "GetActiveCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
