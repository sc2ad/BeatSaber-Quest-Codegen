// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: PhotonPeer
  class PhotonPeer;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: PhotonLagSimulationGui
  class PhotonLagSimulationGui;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::PhotonLagSimulationGui);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::PhotonLagSimulationGui*, "Photon.Pun.UtilityScripts", "PhotonLagSimulationGui");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.PhotonLagSimulationGui
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonLagSimulationGui : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Rect WindowRect
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Rect WindowRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Int32 WindowId
    // Size: 0x4
    // Offset: 0x28
    int WindowId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean Visible
    // Size: 0x1
    // Offset: 0x2C
    bool Visible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Visible and: Peer
    char __padding2[0x3] = {};
    // private ExitGames.Client.Photon.PhotonPeer <Peer>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::ExitGames::Client::Photon::PhotonPeer* Peer;
    // Field size check
    static_assert(sizeof(::ExitGames::Client::Photon::PhotonPeer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Rect WindowRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_WindowRect();
    // Get instance field reference: public System.Int32 WindowId
    [[deprecated("Use field access instead!")]] int& dyn_WindowId();
    // Get instance field reference: public System.Boolean Visible
    [[deprecated("Use field access instead!")]] bool& dyn_Visible();
    // Get instance field reference: private ExitGames.Client.Photon.PhotonPeer <Peer>k__BackingField
    [[deprecated("Use field access instead!")]] ::ExitGames::Client::Photon::PhotonPeer*& dyn_$Peer$k__BackingField();
    // public ExitGames.Client.Photon.PhotonPeer get_Peer()
    // Offset: 0x164FCC4
    ::ExitGames::Client::Photon::PhotonPeer* get_Peer();
    // public System.Void set_Peer(ExitGames.Client.Photon.PhotonPeer value)
    // Offset: 0x164FCCC
    void set_Peer(::ExitGames::Client::Photon::PhotonPeer* value);
    // public System.Void .ctor()
    // Offset: 0x16507AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonLagSimulationGui* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::PhotonLagSimulationGui::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonLagSimulationGui*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0x164FCD4
    void Start();
    // public System.Void OnGUI()
    // Offset: 0x164FD50
    void OnGUI();
    // private System.Void NetSimHasNoPeerWindow(System.Int32 windowId)
    // Offset: 0x164FEC8
    void NetSimHasNoPeerWindow(int windowId);
    // private System.Void NetSimWindow(System.Int32 windowId)
    // Offset: 0x164FFA0
    void NetSimWindow(int windowId);
  }; // Photon.Pun.UtilityScripts.PhotonLagSimulationGui
  #pragma pack(pop)
  static check_size<sizeof(PhotonLagSimulationGui), 48 + sizeof(::ExitGames::Client::Photon::PhotonPeer*)> __Photon_Pun_UtilityScripts_PhotonLagSimulationGuiSizeCheck;
  static_assert(sizeof(PhotonLagSimulationGui) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::get_Peer
// Il2CppName: get_Peer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ExitGames::Client::Photon::PhotonPeer* (Photon::Pun::UtilityScripts::PhotonLagSimulationGui::*)()>(&Photon::Pun::UtilityScripts::PhotonLagSimulationGui::get_Peer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonLagSimulationGui*), "get_Peer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::set_Peer
// Il2CppName: set_Peer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonLagSimulationGui::*)(::ExitGames::Client::Photon::PhotonPeer*)>(&Photon::Pun::UtilityScripts::PhotonLagSimulationGui::set_Peer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "PhotonPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonLagSimulationGui*), "set_Peer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonLagSimulationGui::*)()>(&Photon::Pun::UtilityScripts::PhotonLagSimulationGui::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonLagSimulationGui*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonLagSimulationGui::*)()>(&Photon::Pun::UtilityScripts::PhotonLagSimulationGui::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonLagSimulationGui*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::NetSimHasNoPeerWindow
// Il2CppName: NetSimHasNoPeerWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonLagSimulationGui::*)(int)>(&Photon::Pun::UtilityScripts::PhotonLagSimulationGui::NetSimHasNoPeerWindow)> {
  static const MethodInfo* get() {
    static auto* windowId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonLagSimulationGui*), "NetSimHasNoPeerWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowId});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonLagSimulationGui::NetSimWindow
// Il2CppName: NetSimWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonLagSimulationGui::*)(int)>(&Photon::Pun::UtilityScripts::PhotonLagSimulationGui::NetSimWindow)> {
  static const MethodInfo* get() {
    static auto* windowId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonLagSimulationGui*), "NetSimWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowId});
  }
};
