// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun::UtilityScripts
namespace Photon::Pun::UtilityScripts {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: ExitGames::Client::Photon
namespace ExitGames::Client::Photon {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CountdownTimer
  class CountdownTimer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::CountdownTimer);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::CountdownTimer*, "Photon.Pun.UtilityScripts", "CountdownTimer");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.CountdownTimer
  // [TokenAttribute] Offset: FFFFFFFF
  class CountdownTimer : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired
    class CountdownTimerHasExpired;
    public:
    // [HeaderAttribute] Offset: 0x99271C
    // public System.Single Countdown
    // Size: 0x4
    // Offset: 0x20
    float Countdown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isTimerRunning
    // Size: 0x1
    // Offset: 0x24
    bool isTimerRunning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isTimerRunning and: startTime
    char __padding1[0x3] = {};
    // private System.Int32 startTime
    // Size: 0x4
    // Offset: 0x28
    int startTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: startTime and: Text
    char __padding2[0x4] = {};
    // [HeaderAttribute] Offset: 0x992754
    // public UnityEngine.UI.Text Text
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* Text;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // static field const value: static public System.String CountdownStartTime
    static constexpr const char* CountdownStartTime = "StartTime";
    // Get static field: static public System.String CountdownStartTime
    static ::StringW _get_CountdownStartTime();
    // Set static field: static public System.String CountdownStartTime
    static void _set_CountdownStartTime(::StringW value);
    // Get static field: static private Photon.Pun.UtilityScripts.CountdownTimer/Photon.Pun.UtilityScripts.CountdownTimerHasExpired OnCountdownTimerHasExpired
    static ::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired* _get_OnCountdownTimerHasExpired();
    // Set static field: static private Photon.Pun.UtilityScripts.CountdownTimer/Photon.Pun.UtilityScripts.CountdownTimerHasExpired OnCountdownTimerHasExpired
    static void _set_OnCountdownTimerHasExpired(::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired* value);
    // Get instance field reference: public System.Single Countdown
    [[deprecated("Use field access instead!")]] float& dyn_Countdown();
    // Get instance field reference: private System.Boolean isTimerRunning
    [[deprecated("Use field access instead!")]] bool& dyn_isTimerRunning();
    // Get instance field reference: private System.Int32 startTime
    [[deprecated("Use field access instead!")]] int& dyn_startTime();
    // Get instance field reference: public UnityEngine.UI.Text Text
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_Text();
    // static public System.Void add_OnCountdownTimerHasExpired(Photon.Pun.UtilityScripts.CountdownTimer/Photon.Pun.UtilityScripts.CountdownTimerHasExpired value)
    // Offset: 0x164B14C
    static void add_OnCountdownTimerHasExpired(::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired* value);
    // static public System.Void remove_OnCountdownTimerHasExpired(Photon.Pun.UtilityScripts.CountdownTimer/Photon.Pun.UtilityScripts.CountdownTimerHasExpired value)
    // Offset: 0x164B200
    static void remove_OnCountdownTimerHasExpired(::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired* value);
    // public System.Void .ctor()
    // Offset: 0x164BEE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CountdownTimer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::CountdownTimer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CountdownTimer*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0x164B2B4
    void Start();
    // public System.Void Update()
    // Offset: 0x164B71C
    void Update();
    // private System.Void OnTimerRuns()
    // Offset: 0x164B954
    void OnTimerRuns();
    // private System.Void OnTimerEnds()
    // Offset: 0x164B870
    void OnTimerEnds();
    // private System.Void Initialize()
    // Offset: 0x164B3F0
    void Initialize();
    // private System.Single TimeRemaining()
    // Offset: 0x164B7E8
    float TimeRemaining();
    // static public System.Boolean TryGetStartTime(out System.Int32 startTimestamp)
    // Offset: 0x164BC40
    static bool TryGetStartTime(ByRef<int> startTimestamp);
    // static public System.Void SetStartTime()
    // Offset: 0x164BD38
    static void SetStartTime();
    // public override System.Void OnEnable()
    // Offset: 0x164B36C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnEnable()
    void OnEnable();
    // public override System.Void OnDisable()
    // Offset: 0x164B6A0
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnDisable()
    void OnDisable();
    // public override System.Void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    // Offset: 0x164BB74
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
    void OnRoomPropertiesUpdate(::ExitGames::Client::Photon::Hashtable* propertiesThatChanged);
  }; // Photon.Pun.UtilityScripts.CountdownTimer
  #pragma pack(pop)
  static check_size<sizeof(CountdownTimer), 48 + sizeof(::UnityEngine::UI::Text*)> __Photon_Pun_UtilityScripts_CountdownTimerSizeCheck;
  static_assert(sizeof(CountdownTimer) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::add_OnCountdownTimerHasExpired
// Il2CppName: add_OnCountdownTimerHasExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired*)>(&Photon::Pun::UtilityScripts::CountdownTimer::add_OnCountdownTimerHasExpired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Pun.UtilityScripts", "CountdownTimer/CountdownTimerHasExpired")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "add_OnCountdownTimerHasExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::remove_OnCountdownTimerHasExpired
// Il2CppName: remove_OnCountdownTimerHasExpired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Photon::Pun::UtilityScripts::CountdownTimer::CountdownTimerHasExpired*)>(&Photon::Pun::UtilityScripts::CountdownTimer::remove_OnCountdownTimerHasExpired)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Photon.Pun.UtilityScripts", "CountdownTimer/CountdownTimerHasExpired")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "remove_OnCountdownTimerHasExpired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::OnTimerRuns
// Il2CppName: OnTimerRuns
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::OnTimerRuns)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "OnTimerRuns", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::OnTimerEnds
// Il2CppName: OnTimerEnds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::OnTimerEnds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "OnTimerEnds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::Initialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::TimeRemaining
// Il2CppName: TimeRemaining
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::TimeRemaining)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "TimeRemaining", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::TryGetStartTime
// Il2CppName: TryGetStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<int>)>(&Photon::Pun::UtilityScripts::CountdownTimer::TryGetStartTime)> {
  static const MethodInfo* get() {
    static auto* startTimestamp = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "TryGetStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTimestamp});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::SetStartTime
// Il2CppName: SetStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::SetStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "SetStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)()>(&Photon::Pun::UtilityScripts::CountdownTimer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CountdownTimer::OnRoomPropertiesUpdate
// Il2CppName: OnRoomPropertiesUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CountdownTimer::*)(::ExitGames::Client::Photon::Hashtable*)>(&Photon::Pun::UtilityScripts::CountdownTimer::OnRoomPropertiesUpdate)> {
  static const MethodInfo* get() {
    static auto* propertiesThatChanged = &::il2cpp_utils::GetClassFromName("ExitGames.Client.Photon", "Hashtable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CountdownTimer*), "OnRoomPropertiesUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propertiesThatChanged});
  }
};
