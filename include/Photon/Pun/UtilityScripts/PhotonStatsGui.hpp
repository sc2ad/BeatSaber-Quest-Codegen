// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: PhotonStatsGui
  class PhotonStatsGui;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::PhotonStatsGui);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::PhotonStatsGui*, "Photon.Pun.UtilityScripts", "PhotonStatsGui");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.PhotonStatsGui
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonStatsGui : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean statsWindowOn
    // Size: 0x1
    // Offset: 0x18
    bool statsWindowOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean statsOn
    // Size: 0x1
    // Offset: 0x19
    bool statsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean healthStatsVisible
    // Size: 0x1
    // Offset: 0x1A
    bool healthStatsVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean trafficStatsOn
    // Size: 0x1
    // Offset: 0x1B
    bool trafficStatsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean buttonsOn
    // Size: 0x1
    // Offset: 0x1C
    bool buttonsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: buttonsOn and: statsRect
    char __padding4[0x3] = {};
    // public UnityEngine.Rect statsRect
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Rect statsRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Int32 WindowId
    // Size: 0x4
    // Offset: 0x30
    int WindowId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean statsWindowOn
    [[deprecated("Use field access instead!")]] bool& dyn_statsWindowOn();
    // Get instance field reference: public System.Boolean statsOn
    [[deprecated("Use field access instead!")]] bool& dyn_statsOn();
    // Get instance field reference: public System.Boolean healthStatsVisible
    [[deprecated("Use field access instead!")]] bool& dyn_healthStatsVisible();
    // Get instance field reference: public System.Boolean trafficStatsOn
    [[deprecated("Use field access instead!")]] bool& dyn_trafficStatsOn();
    // Get instance field reference: public System.Boolean buttonsOn
    [[deprecated("Use field access instead!")]] bool& dyn_buttonsOn();
    // Get instance field reference: public UnityEngine.Rect statsRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_statsRect();
    // Get instance field reference: public System.Int32 WindowId
    [[deprecated("Use field access instead!")]] int& dyn_WindowId();
    // public System.Void .ctor()
    // Offset: 0x1651D0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonStatsGui* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::PhotonStatsGui::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonStatsGui*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0x165081C
    void Start();
    // public System.Void Update()
    // Offset: 0x1650880
    void Update();
    // public System.Void OnGUI()
    // Offset: 0x16508D0
    void OnGUI();
    // public System.Void TrafficStatsWindow(System.Int32 windowID)
    // Offset: 0x1650AC4
    void TrafficStatsWindow(int windowID);
  }; // Photon.Pun.UtilityScripts.PhotonStatsGui
  #pragma pack(pop)
  static check_size<sizeof(PhotonStatsGui), 48 + sizeof(int)> __Photon_Pun_UtilityScripts_PhotonStatsGuiSizeCheck;
  static_assert(sizeof(PhotonStatsGui) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonStatsGui::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonStatsGui::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonStatsGui::*)()>(&Photon::Pun::UtilityScripts::PhotonStatsGui::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonStatsGui*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonStatsGui::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonStatsGui::*)()>(&Photon::Pun::UtilityScripts::PhotonStatsGui::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonStatsGui*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonStatsGui::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonStatsGui::*)()>(&Photon::Pun::UtilityScripts::PhotonStatsGui::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonStatsGui*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::PhotonStatsGui::TrafficStatsWindow
// Il2CppName: TrafficStatsWindow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::PhotonStatsGui::*)(int)>(&Photon::Pun::UtilityScripts::PhotonStatsGui::TrafficStatsWindow)> {
  static const MethodInfo* get() {
    static auto* windowID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::PhotonStatsGui*), "TrafficStatsWindow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{windowID});
  }
};
