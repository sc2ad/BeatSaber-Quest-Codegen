// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Rigidbody2D
  class Rigidbody2D;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: MoveByKeys
  class MoveByKeys;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::MoveByKeys);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::MoveByKeys*, "Photon.Pun.UtilityScripts", "MoveByKeys");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.MoveByKeys
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 992218
  class MoveByKeys : public ::Photon::Pun::MonoBehaviourPun {
    public:
    public:
    // public System.Single Speed
    // Size: 0x4
    // Offset: 0x20
    float Speed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single JumpForce
    // Size: 0x4
    // Offset: 0x24
    float JumpForce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single JumpTimeout
    // Size: 0x4
    // Offset: 0x28
    float JumpTimeout;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean isSprite
    // Size: 0x1
    // Offset: 0x2C
    bool isSprite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSprite and: jumpingTime
    char __padding3[0x3] = {};
    // private System.Single jumpingTime
    // Size: 0x4
    // Offset: 0x30
    float jumpingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: jumpingTime and: body
    char __padding4[0x4] = {};
    // private UnityEngine.Rigidbody body
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rigidbody* body;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Rigidbody2D body2d
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Rigidbody2D* body2d;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody2D*) == 0x8);
    public:
    // Get instance field reference: public System.Single Speed
    [[deprecated("Use field access instead!")]] float& dyn_Speed();
    // Get instance field reference: public System.Single JumpForce
    [[deprecated("Use field access instead!")]] float& dyn_JumpForce();
    // Get instance field reference: public System.Single JumpTimeout
    [[deprecated("Use field access instead!")]] float& dyn_JumpTimeout();
    // Get instance field reference: private System.Boolean isSprite
    [[deprecated("Use field access instead!")]] bool& dyn_isSprite();
    // Get instance field reference: private System.Single jumpingTime
    [[deprecated("Use field access instead!")]] float& dyn_jumpingTime();
    // Get instance field reference: private UnityEngine.Rigidbody body
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_body();
    // Get instance field reference: private UnityEngine.Rigidbody2D body2d
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody2D*& dyn_body2d();
    // public System.Void .ctor()
    // Offset: 0x164E0F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MoveByKeys* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::MoveByKeys::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MoveByKeys*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0x164DBC0
    void Start();
    // public System.Void FixedUpdate()
    // Offset: 0x164DC84
    void FixedUpdate();
  }; // Photon.Pun.UtilityScripts.MoveByKeys
  #pragma pack(pop)
  static check_size<sizeof(MoveByKeys), 64 + sizeof(::UnityEngine::Rigidbody2D*)> __Photon_Pun_UtilityScripts_MoveByKeysSizeCheck;
  static_assert(sizeof(MoveByKeys) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::MoveByKeys::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::MoveByKeys::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::MoveByKeys::*)()>(&Photon::Pun::UtilityScripts::MoveByKeys::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::MoveByKeys*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::MoveByKeys::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::MoveByKeys::*)()>(&Photon::Pun::UtilityScripts::MoveByKeys::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::MoveByKeys*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
