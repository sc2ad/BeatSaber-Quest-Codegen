// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: StatesGui
  class StatesGui;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::StatesGui);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::StatesGui*, "Photon.Pun.UtilityScripts", "StatesGui");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.StatesGui
  // [TokenAttribute] Offset: FFFFFFFF
  class StatesGui : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Rect GuiOffset
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Rect GuiOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // public System.Boolean DontDestroy
    // Size: 0x1
    // Offset: 0x28
    bool DontDestroy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ServerTimestamp
    // Size: 0x1
    // Offset: 0x29
    bool ServerTimestamp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean DetailedConnection
    // Size: 0x1
    // Offset: 0x2A
    bool DetailedConnection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Server
    // Size: 0x1
    // Offset: 0x2B
    bool Server;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AppVersion
    // Size: 0x1
    // Offset: 0x2C
    bool AppVersion;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UserId
    // Size: 0x1
    // Offset: 0x2D
    bool UserId;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Room
    // Size: 0x1
    // Offset: 0x2E
    bool Room;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean RoomProps
    // Size: 0x1
    // Offset: 0x2F
    bool RoomProps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EventsIn
    // Size: 0x1
    // Offset: 0x30
    bool EventsIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LocalPlayer
    // Size: 0x1
    // Offset: 0x31
    bool LocalPlayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean PlayerProps
    // Size: 0x1
    // Offset: 0x32
    bool PlayerProps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Others
    // Size: 0x1
    // Offset: 0x33
    bool Others;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean Buttons
    // Size: 0x1
    // Offset: 0x34
    bool Buttons;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ExpectedUsers
    // Size: 0x1
    // Offset: 0x35
    bool ExpectedUsers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ExpectedUsers and: GuiRect
    char __padding14[0x2] = {};
    // private UnityEngine.Rect GuiRect
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Rect GuiRect;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rect) == 0x10);
    // private System.Single native_width
    // Size: 0x4
    // Offset: 0x48
    float native_width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single native_height
    // Size: 0x4
    // Offset: 0x4C
    float native_height;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private Photon.Pun.UtilityScripts.StatesGui Instance
    static ::Photon::Pun::UtilityScripts::StatesGui* _get_Instance();
    // Set static field: static private Photon.Pun.UtilityScripts.StatesGui Instance
    static void _set_Instance(::Photon::Pun::UtilityScripts::StatesGui* value);
    // Get instance field reference: public UnityEngine.Rect GuiOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_GuiOffset();
    // Get instance field reference: public System.Boolean DontDestroy
    [[deprecated("Use field access instead!")]] bool& dyn_DontDestroy();
    // Get instance field reference: public System.Boolean ServerTimestamp
    [[deprecated("Use field access instead!")]] bool& dyn_ServerTimestamp();
    // Get instance field reference: public System.Boolean DetailedConnection
    [[deprecated("Use field access instead!")]] bool& dyn_DetailedConnection();
    // Get instance field reference: public System.Boolean Server
    [[deprecated("Use field access instead!")]] bool& dyn_Server();
    // Get instance field reference: public System.Boolean AppVersion
    [[deprecated("Use field access instead!")]] bool& dyn_AppVersion();
    // Get instance field reference: public System.Boolean UserId
    [[deprecated("Use field access instead!")]] bool& dyn_UserId();
    // Get instance field reference: public System.Boolean Room
    [[deprecated("Use field access instead!")]] bool& dyn_Room();
    // Get instance field reference: public System.Boolean RoomProps
    [[deprecated("Use field access instead!")]] bool& dyn_RoomProps();
    // Get instance field reference: public System.Boolean EventsIn
    [[deprecated("Use field access instead!")]] bool& dyn_EventsIn();
    // Get instance field reference: public System.Boolean LocalPlayer
    [[deprecated("Use field access instead!")]] bool& dyn_LocalPlayer();
    // Get instance field reference: public System.Boolean PlayerProps
    [[deprecated("Use field access instead!")]] bool& dyn_PlayerProps();
    // Get instance field reference: public System.Boolean Others
    [[deprecated("Use field access instead!")]] bool& dyn_Others();
    // Get instance field reference: public System.Boolean Buttons
    [[deprecated("Use field access instead!")]] bool& dyn_Buttons();
    // Get instance field reference: public System.Boolean ExpectedUsers
    [[deprecated("Use field access instead!")]] bool& dyn_ExpectedUsers();
    // Get instance field reference: private UnityEngine.Rect GuiRect
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rect& dyn_GuiRect();
    // Get instance field reference: private System.Single native_width
    [[deprecated("Use field access instead!")]] float& dyn_native_width();
    // Get instance field reference: private System.Single native_height
    [[deprecated("Use field access instead!")]] float& dyn_native_height();
    // public System.Void .ctor()
    // Offset: 0x1659BE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StatesGui* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::StatesGui::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StatesGui*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x1657BCC
    void Awake();
    // private System.Void OnDisable()
    // Offset: 0x1657D48
    void OnDisable();
    // private System.Void OnGUI()
    // Offset: 0x1657DEC
    void OnGUI();
    // private System.String PlayerToString(Photon.Realtime.Player player)
    // Offset: 0x16597D4
    ::StringW PlayerToString(::Photon::Realtime::Player* player);
  }; // Photon.Pun.UtilityScripts.StatesGui
  #pragma pack(pop)
  static check_size<sizeof(StatesGui), 76 + sizeof(float)> __Photon_Pun_UtilityScripts_StatesGuiSizeCheck;
  static_assert(sizeof(StatesGui) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::StatesGui::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::StatesGui::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::StatesGui::*)()>(&Photon::Pun::UtilityScripts::StatesGui::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::StatesGui*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::StatesGui::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::StatesGui::*)()>(&Photon::Pun::UtilityScripts::StatesGui::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::StatesGui*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::StatesGui::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::StatesGui::*)()>(&Photon::Pun::UtilityScripts::StatesGui::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::StatesGui*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::StatesGui::PlayerToString
// Il2CppName: PlayerToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Pun::UtilityScripts::StatesGui::*)(::Photon::Realtime::Player*)>(&Photon::Pun::UtilityScripts::StatesGui::PlayerToString)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::StatesGui*), "PlayerToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
