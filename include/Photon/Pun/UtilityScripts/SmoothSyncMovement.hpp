// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: SmoothSyncMovement
  class SmoothSyncMovement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::SmoothSyncMovement);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::SmoothSyncMovement*, "Photon.Pun.UtilityScripts", "SmoothSyncMovement");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.SmoothSyncMovement
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 9921B4
  class SmoothSyncMovement : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // public System.Single SmoothingDelay
    // Size: 0x4
    // Offset: 0x20
    float SmoothingDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 correctPlayerPos
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 correctPlayerPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion correctPlayerRot
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Quaternion correctPlayerRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Get instance field reference: public System.Single SmoothingDelay
    [[deprecated("Use field access instead!")]] float& dyn_SmoothingDelay();
    // Get instance field reference: private UnityEngine.Vector3 correctPlayerPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_correctPlayerPos();
    // Get instance field reference: private UnityEngine.Quaternion correctPlayerRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_correctPlayerRot();
    // public System.Void .ctor()
    // Offset: 0x1657B1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SmoothSyncMovement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::SmoothSyncMovement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SmoothSyncMovement*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0x1657628
    void Awake();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x16577BC
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void Update()
    // Offset: 0x1657934
    void Update();
  }; // Photon.Pun.UtilityScripts.SmoothSyncMovement
  #pragma pack(pop)
  static check_size<sizeof(SmoothSyncMovement), 48 + sizeof(::UnityEngine::Quaternion)> __Photon_Pun_UtilityScripts_SmoothSyncMovementSizeCheck;
  static_assert(sizeof(SmoothSyncMovement) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::SmoothSyncMovement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::SmoothSyncMovement::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::SmoothSyncMovement::*)()>(&Photon::Pun::UtilityScripts::SmoothSyncMovement::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::SmoothSyncMovement*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::SmoothSyncMovement::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::SmoothSyncMovement::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::UtilityScripts::SmoothSyncMovement::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::SmoothSyncMovement*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::SmoothSyncMovement::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::SmoothSyncMovement::*)()>(&Photon::Pun::UtilityScripts::SmoothSyncMovement::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::SmoothSyncMovement*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
