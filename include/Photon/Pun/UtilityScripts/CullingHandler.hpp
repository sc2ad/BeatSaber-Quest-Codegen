// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun::UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CullArea
  class CullArea;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Forward declaring type: CullingHandler
  class CullingHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::UtilityScripts::CullingHandler);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::UtilityScripts::CullingHandler*, "Photon.Pun.UtilityScripts", "CullingHandler");
// Type namespace: Photon.Pun.UtilityScripts
namespace Photon::Pun::UtilityScripts {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.UtilityScripts.CullingHandler
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 9920C8
  class CullingHandler : public ::UnityEngine::MonoBehaviour/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    public:
    // private System.Int32 orderIndex
    // Size: 0x4
    // Offset: 0x18
    int orderIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: orderIndex and: cullArea
    char __padding0[0x4] = {};
    // private Photon.Pun.UtilityScripts.CullArea cullArea
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Pun::UtilityScripts::CullArea* cullArea;
    // Field size check
    static_assert(sizeof(::Photon::Pun::UtilityScripts::CullArea*) == 0x8);
    // private System.Collections.Generic.List`1<System.Byte> previousActiveCells
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<uint8_t>* previousActiveCells;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint8_t>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Byte> activeCells
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<uint8_t>* activeCells;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<uint8_t>*) == 0x8);
    // private Photon.Pun.PhotonView pView
    // Size: 0x8
    // Offset: 0x38
    ::Photon::Pun::PhotonView* pView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 currentPosition
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 currentPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single timeSinceUpdate
    // Size: 0x4
    // Offset: 0x58
    float timeSinceUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeBetweenUpdatesMin
    // Size: 0x4
    // Offset: 0x5C
    float timeBetweenUpdatesMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 orderIndex
    [[deprecated("Use field access instead!")]] int& dyn_orderIndex();
    // Get instance field reference: private Photon.Pun.UtilityScripts.CullArea cullArea
    [[deprecated("Use field access instead!")]] ::Photon::Pun::UtilityScripts::CullArea*& dyn_cullArea();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Byte> previousActiveCells
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint8_t>*& dyn_previousActiveCells();
    // Get instance field reference: private System.Collections.Generic.List`1<System.Byte> activeCells
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<uint8_t>*& dyn_activeCells();
    // Get instance field reference: private Photon.Pun.PhotonView pView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_pView();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: private UnityEngine.Vector3 currentPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentPosition();
    // Get instance field reference: private System.Single timeSinceUpdate
    [[deprecated("Use field access instead!")]] float& dyn_timeSinceUpdate();
    // Get instance field reference: private System.Single timeBetweenUpdatesMin
    [[deprecated("Use field access instead!")]] float& dyn_timeBetweenUpdatesMin();
    // public System.Void .ctor()
    // Offset: 0x164D808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CullingHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::UtilityScripts::CullingHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CullingHandler*, creationType>()));
    }
    // private System.Void OnEnable()
    // Offset: 0x164CBCC
    void OnEnable();
    // private System.Void Start()
    // Offset: 0x164CD3C
    void Start();
    // private System.Void Update()
    // Offset: 0x164CE40
    void Update();
    // private System.Void OnGUI()
    // Offset: 0x164D2C8
    void OnGUI();
    // private System.Boolean HaveActiveCellsChanged()
    // Offset: 0x164CF6C
    bool HaveActiveCellsChanged();
    // private System.Void UpdateInterestGroups()
    // Offset: 0x164D0E4
    void UpdateInterestGroups();
    // public System.Void OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0x164D68C
    void OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
  }; // Photon.Pun.UtilityScripts.CullingHandler
  #pragma pack(pop)
  static check_size<sizeof(CullingHandler), 92 + sizeof(float)> __Photon_Pun_UtilityScripts_CullingHandlerSizeCheck;
  static_assert(sizeof(CullingHandler) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullingHandler::*)()>(&Photon::Pun::UtilityScripts::CullingHandler::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullingHandler::*)()>(&Photon::Pun::UtilityScripts::CullingHandler::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullingHandler::*)()>(&Photon::Pun::UtilityScripts::CullingHandler::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullingHandler::*)()>(&Photon::Pun::UtilityScripts::CullingHandler::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::HaveActiveCellsChanged
// Il2CppName: HaveActiveCellsChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::UtilityScripts::CullingHandler::*)()>(&Photon::Pun::UtilityScripts::CullingHandler::HaveActiveCellsChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "HaveActiveCellsChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::UpdateInterestGroups
// Il2CppName: UpdateInterestGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullingHandler::*)()>(&Photon::Pun::UtilityScripts::CullingHandler::UpdateInterestGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "UpdateInterestGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::UtilityScripts::CullingHandler::OnPhotonSerializeView
// Il2CppName: OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::UtilityScripts::CullingHandler::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&Photon::Pun::UtilityScripts::CullingHandler::OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::UtilityScripts::CullingHandler*), "OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
