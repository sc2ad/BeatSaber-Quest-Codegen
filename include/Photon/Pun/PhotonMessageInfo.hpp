// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonMessageInfo, "Photon.Pun", "PhotonMessageInfo");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Pun.PhotonMessageInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct PhotonMessageInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // private readonly System.Int32 timeInt
    // Size: 0x4
    // Offset: 0x0
    int timeInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: timeInt and: Sender
    char __padding0[0x4] = {};
    // public readonly Photon.Realtime.Player Sender
    // Size: 0x8
    // Offset: 0x8
    ::Photon::Realtime::Player* Sender;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public readonly Photon.Pun.PhotonView photonView
    // Size: 0x8
    // Offset: 0x10
    ::Photon::Pun::PhotonView* photonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    public:
    // Creating value type constructor for type: PhotonMessageInfo
    constexpr PhotonMessageInfo(int timeInt_ = {}, ::Photon::Realtime::Player* Sender_ = {}, ::Photon::Pun::PhotonView* photonView_ = {}) noexcept : timeInt{timeInt_}, Sender{Sender_}, photonView{photonView_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: private readonly System.Int32 timeInt
    [[deprecated("Use field access instead!")]] int& dyn_timeInt();
    // Get instance field reference: public readonly Photon.Realtime.Player Sender
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_Sender();
    // Get instance field reference: public readonly Photon.Pun.PhotonView photonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_photonView();
    // public System.Double get_timestamp()
    // Offset: 0xA51F04
    double get_timestamp();
    // public System.Double get_SentServerTime()
    // Offset: 0xA51F1C
    double get_SentServerTime();
    // public System.Int32 get_SentServerTimestamp()
    // Offset: 0xA51F34
    int get_SentServerTimestamp();
    // public System.Void .ctor(Photon.Realtime.Player player, System.Int32 timestamp, Photon.Pun.PhotonView view)
    // Offset: 0xA51EF8
    PhotonMessageInfo(::Photon::Realtime::Player* player, int timestamp, ::Photon::Pun::PhotonView* view);
    // public override System.String ToString()
    // Offset: 0xA51F3C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // Photon.Pun.PhotonMessageInfo
  #pragma pack(pop)
  static check_size<sizeof(PhotonMessageInfo), 16 + sizeof(::Photon::Pun::PhotonView*)> __Photon_Pun_PhotonMessageInfoSizeCheck;
  static_assert(sizeof(PhotonMessageInfo) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonMessageInfo::get_timestamp
// Il2CppName: get_timestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Photon::Pun::PhotonMessageInfo::*)()>(&Photon::Pun::PhotonMessageInfo::get_timestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonMessageInfo), "get_timestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonMessageInfo::get_SentServerTime
// Il2CppName: get_SentServerTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (Photon::Pun::PhotonMessageInfo::*)()>(&Photon::Pun::PhotonMessageInfo::get_SentServerTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonMessageInfo), "get_SentServerTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonMessageInfo::get_SentServerTimestamp
// Il2CppName: get_SentServerTimestamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonMessageInfo::*)()>(&Photon::Pun::PhotonMessageInfo::get_SentServerTimestamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonMessageInfo), "get_SentServerTimestamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonMessageInfo::PhotonMessageInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonMessageInfo::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Pun::PhotonMessageInfo::*)()>(&Photon::Pun::PhotonMessageInfo::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonMessageInfo), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
