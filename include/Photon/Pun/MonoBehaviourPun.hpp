// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: MonoBehaviourPun
  class MonoBehaviourPun;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::MonoBehaviourPun);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::MonoBehaviourPun*, "Photon.Pun", "MonoBehaviourPun");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.MonoBehaviourPun
  // [TokenAttribute] Offset: FFFFFFFF
  class MonoBehaviourPun : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Photon.Pun.PhotonView pvCache
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Pun::PhotonView* pvCache;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Photon.Pun.PhotonView pvCache
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_pvCache();
    // public Photon.Pun.PhotonView get_photonView()
    // Offset: 0x1081F18
    ::Photon::Pun::PhotonView* get_photonView();
    // public System.Void .ctor()
    // Offset: 0x1081FA8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoBehaviourPun* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::MonoBehaviourPun::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoBehaviourPun*, creationType>()));
    }
  }; // Photon.Pun.MonoBehaviourPun
  #pragma pack(pop)
  static check_size<sizeof(MonoBehaviourPun), 24 + sizeof(::Photon::Pun::PhotonView*)> __Photon_Pun_MonoBehaviourPunSizeCheck;
  static_assert(sizeof(MonoBehaviourPun) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::MonoBehaviourPun::get_photonView
// Il2CppName: get_photonView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (Photon::Pun::MonoBehaviourPun::*)()>(&Photon::Pun::MonoBehaviourPun::get_photonView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::MonoBehaviourPun*), "get_photonView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::MonoBehaviourPun::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
