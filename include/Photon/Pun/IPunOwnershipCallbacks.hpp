// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: IPunOwnershipCallbacks
  class IPunOwnershipCallbacks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::IPunOwnershipCallbacks);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::IPunOwnershipCallbacks*, "Photon.Pun", "IPunOwnershipCallbacks");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.IPunOwnershipCallbacks
  // [TokenAttribute] Offset: FFFFFFFF
  class IPunOwnershipCallbacks {
    public:
    // public System.Void OnOwnershipRequest(Photon.Pun.PhotonView targetView, Photon.Realtime.Player requestingPlayer)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnOwnershipRequest(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* requestingPlayer);
    // public System.Void OnOwnershipTransfered(Photon.Pun.PhotonView targetView, Photon.Realtime.Player previousOwner)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnOwnershipTransfered(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* previousOwner);
    // public System.Void OnOwnershipTransferFailed(Photon.Pun.PhotonView targetView, Photon.Realtime.Player senderOfFailedRequest)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void OnOwnershipTransferFailed(::Photon::Pun::PhotonView* targetView, ::Photon::Realtime::Player* senderOfFailedRequest);
  }; // Photon.Pun.IPunOwnershipCallbacks
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::IPunOwnershipCallbacks::OnOwnershipRequest
// Il2CppName: OnOwnershipRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::IPunOwnershipCallbacks::*)(::Photon::Pun::PhotonView*, ::Photon::Realtime::Player*)>(&Photon::Pun::IPunOwnershipCallbacks::OnOwnershipRequest)> {
  static const MethodInfo* get() {
    static auto* targetView = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonView")->byval_arg;
    static auto* requestingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::IPunOwnershipCallbacks*), "OnOwnershipRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetView, requestingPlayer});
  }
};
// Writing MetadataGetter for method: Photon::Pun::IPunOwnershipCallbacks::OnOwnershipTransfered
// Il2CppName: OnOwnershipTransfered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::IPunOwnershipCallbacks::*)(::Photon::Pun::PhotonView*, ::Photon::Realtime::Player*)>(&Photon::Pun::IPunOwnershipCallbacks::OnOwnershipTransfered)> {
  static const MethodInfo* get() {
    static auto* targetView = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonView")->byval_arg;
    static auto* previousOwner = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::IPunOwnershipCallbacks*), "OnOwnershipTransfered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetView, previousOwner});
  }
};
// Writing MetadataGetter for method: Photon::Pun::IPunOwnershipCallbacks::OnOwnershipTransferFailed
// Il2CppName: OnOwnershipTransferFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::IPunOwnershipCallbacks::*)(::Photon::Pun::PhotonView*, ::Photon::Realtime::Player*)>(&Photon::Pun::IPunOwnershipCallbacks::OnOwnershipTransferFailed)> {
  static const MethodInfo* get() {
    static auto* targetView = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonView")->byval_arg;
    static auto* senderOfFailedRequest = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::IPunOwnershipCallbacks*), "OnOwnershipTransferFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetView, senderOfFailedRequest});
  }
};
