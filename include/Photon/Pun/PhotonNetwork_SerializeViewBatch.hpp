// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.PhotonNetwork
#include "Photon/Pun/PhotonNetwork.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonNetwork::SerializeViewBatch);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonNetwork::SerializeViewBatch*, "Photon.Pun", "PhotonNetwork/SerializeViewBatch");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonNetwork/Photon.Pun.SerializeViewBatch
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonNetwork::SerializeViewBatch : public ::Il2CppObject/*, public ::System::IEquatable_1<::Photon::Pun::PhotonNetwork::RaiseEventBatch>, public ::System::IEquatable_1<::Photon::Pun::PhotonNetwork::SerializeViewBatch*>*/ {
    public:
    public:
    // public readonly Photon.Pun.PhotonNetwork/Photon.Pun.RaiseEventBatch Batch
    // Size: 0x2
    // Offset: 0x10
    ::Photon::Pun::PhotonNetwork::RaiseEventBatch Batch;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonNetwork::RaiseEventBatch) == 0x2);
    // Padding between fields: Batch and: ObjectUpdates
    char __padding0[0x6] = {};
    // public System.Collections.Generic.List`1<System.Object> ObjectUpdates
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::Il2CppObject*>* ObjectUpdates;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Il2CppObject*>*) == 0x8);
    // private System.Int32 defaultSize
    // Size: 0x4
    // Offset: 0x20
    int defaultSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 offset
    // Size: 0x4
    // Offset: 0x24
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Photon::Pun::PhotonNetwork::RaiseEventBatch>
    operator ::System::IEquatable_1<::Photon::Pun::PhotonNetwork::RaiseEventBatch>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Photon::Pun::PhotonNetwork::RaiseEventBatch>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IEquatable_1<::Photon::Pun::PhotonNetwork::SerializeViewBatch*>
    operator ::System::IEquatable_1<::Photon::Pun::PhotonNetwork::SerializeViewBatch*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::Photon::Pun::PhotonNetwork::SerializeViewBatch*>*>(this);
    }
    // Get instance field reference: public readonly Photon.Pun.PhotonNetwork/Photon.Pun.RaiseEventBatch Batch
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonNetwork::RaiseEventBatch& dyn_Batch();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Object> ObjectUpdates
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Il2CppObject*>*& dyn_ObjectUpdates();
    // Get instance field reference: private System.Int32 defaultSize
    [[deprecated("Use field access instead!")]] int& dyn_defaultSize();
    // Get instance field reference: private System.Int32 offset
    [[deprecated("Use field access instead!")]] int& dyn_offset();
    // public System.Void .ctor(Photon.Pun.PhotonNetwork/Photon.Pun.RaiseEventBatch batch, System.Int32 offset)
    // Offset: 0x1B74CE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonNetwork::SerializeViewBatch* New_ctor(::Photon::Pun::PhotonNetwork::RaiseEventBatch batch, int offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonNetwork::SerializeViewBatch::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonNetwork::SerializeViewBatch*, creationType>(batch, offset)));
    }
    // public System.Boolean Equals(Photon.Pun.PhotonNetwork/Photon.Pun.SerializeViewBatch other)
    // Offset: 0x1B74E00
    bool Equals(::Photon::Pun::PhotonNetwork::SerializeViewBatch* other);
    // public System.Boolean Equals(Photon.Pun.PhotonNetwork/Photon.Pun.RaiseEventBatch other)
    // Offset: 0x1B74E48
    bool Equals(::Photon::Pun::PhotonNetwork::RaiseEventBatch other);
    // public System.Void Clear()
    // Offset: 0x1B74F44
    void Clear();
    // public System.Void Add(System.Collections.Generic.List`1<System.Object> viewData)
    // Offset: 0x1B74FE4
    void Add(::System::Collections::Generic::List_1<::Il2CppObject*>* viewData);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1B74DEC
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x1B74E80
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // Photon.Pun.PhotonNetwork/Photon.Pun.SerializeViewBatch
  #pragma pack(pop)
  static check_size<sizeof(PhotonNetwork::SerializeViewBatch), 36 + sizeof(int)> __Photon_Pun_PhotonNetwork_SerializeViewBatchSizeCheck;
  static_assert(sizeof(PhotonNetwork::SerializeViewBatch) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonNetwork::SerializeViewBatch::*)(::Photon::Pun::PhotonNetwork::SerializeViewBatch*)>(&Photon::Pun::PhotonNetwork::SerializeViewBatch::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonNetwork/SerializeViewBatch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonNetwork::SerializeViewBatch*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonNetwork::SerializeViewBatch::*)(::Photon::Pun::PhotonNetwork::RaiseEventBatch)>(&Photon::Pun::PhotonNetwork::SerializeViewBatch::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonNetwork/RaiseEventBatch")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonNetwork::SerializeViewBatch*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonNetwork::SerializeViewBatch::*)()>(&Photon::Pun::PhotonNetwork::SerializeViewBatch::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonNetwork::SerializeViewBatch*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::Add
// Il2CppName: Add
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::PhotonNetwork::SerializeViewBatch::*)(::System::Collections::Generic::List_1<::Il2CppObject*>*)>(&Photon::Pun::PhotonNetwork::SerializeViewBatch::Add)> {
  static const MethodInfo* get() {
    static auto* viewData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Object")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonNetwork::SerializeViewBatch*), "Add", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewData});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (Photon::Pun::PhotonNetwork::SerializeViewBatch::*)()>(&Photon::Pun::PhotonNetwork::SerializeViewBatch::GetHashCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonNetwork::SerializeViewBatch*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::PhotonNetwork::SerializeViewBatch::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (Photon::Pun::PhotonNetwork::SerializeViewBatch::*)(::Il2CppObject*)>(&Photon::Pun::PhotonNetwork::SerializeViewBatch::Equals)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::PhotonNetwork::SerializeViewBatch*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
