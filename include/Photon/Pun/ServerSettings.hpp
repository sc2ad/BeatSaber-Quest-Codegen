// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: Photon.Pun.PunLogLevel
#include "Photon/Pun/PunLogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: AppSettings
  class AppSettings;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: ServerSettings
  class ServerSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::ServerSettings);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::ServerSettings*, "Photon.Pun", "ServerSettings");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.ServerSettings
  // [TokenAttribute] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: 954ADC
  class ServerSettings : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // [TooltipAttribute] Offset: 0x954FD0
    // public Photon.Realtime.AppSettings AppSettings
    // Size: 0x8
    // Offset: 0x18
    ::Photon::Realtime::AppSettings* AppSettings;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::AppSettings*) == 0x8);
    // [TooltipAttribute] Offset: 0x955008
    // public System.String DevRegion
    // Size: 0x8
    // Offset: 0x20
    ::StringW DevRegion;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TooltipAttribute] Offset: 0x955040
    // public Photon.Pun.PunLogLevel PunLogging
    // Size: 0x4
    // Offset: 0x28
    ::Photon::Pun::PunLogLevel PunLogging;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PunLogLevel) == 0x4);
    // [TooltipAttribute] Offset: 0x955078
    // public System.Boolean EnableSupportLogger
    // Size: 0x1
    // Offset: 0x2C
    bool EnableSupportLogger;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9550B0
    // public System.Boolean RunInBackground
    // Size: 0x1
    // Offset: 0x2D
    bool RunInBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9550E8
    // public System.Boolean StartInOfflineMode
    // Size: 0x1
    // Offset: 0x2E
    bool StartInOfflineMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: StartInOfflineMode and: RpcList
    char __padding5[0x1] = {};
    // [TooltipAttribute] Offset: 0x955120
    // public System.Collections.Generic.List`1<System.String> RpcList
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::StringW>* RpcList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public Photon.Realtime.AppSettings AppSettings
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::AppSettings*& dyn_AppSettings();
    // Get instance field reference: public System.String DevRegion
    [[deprecated("Use field access instead!")]] ::StringW& dyn_DevRegion();
    // Get instance field reference: public Photon.Pun.PunLogLevel PunLogging
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PunLogLevel& dyn_PunLogging();
    // Get instance field reference: public System.Boolean EnableSupportLogger
    [[deprecated("Use field access instead!")]] bool& dyn_EnableSupportLogger();
    // Get instance field reference: public System.Boolean RunInBackground
    [[deprecated("Use field access instead!")]] bool& dyn_RunInBackground();
    // Get instance field reference: public System.Boolean StartInOfflineMode
    [[deprecated("Use field access instead!")]] bool& dyn_StartInOfflineMode();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> RpcList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_RpcList();
    // static public System.String get_BestRegionSummaryInPreferences()
    // Offset: 0x1B7C70C
    static ::StringW get_BestRegionSummaryInPreferences();
    // public System.Void .ctor()
    // Offset: 0x1B7C83C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ServerSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::ServerSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ServerSettings*, creationType>()));
    }
    // public System.Void UseCloud(System.String cloudAppid, System.String code)
    // Offset: 0x1B7C5E0
    void UseCloud(::StringW cloudAppid, ::StringW code);
    // static public System.Boolean IsAppId(System.String val)
    // Offset: 0x1B7C638
    static bool IsAppId(::StringW val);
    // static public System.Void ResetBestRegionCodeInPreferences()
    // Offset: 0x1B7C76C
    static void ResetBestRegionCodeInPreferences();
    // public override System.String ToString()
    // Offset: 0x1B7C7D0
    // Implemented from: UnityEngine.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // Photon.Pun.ServerSettings
  #pragma pack(pop)
  static check_size<sizeof(ServerSettings), 48 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __Photon_Pun_ServerSettingsSizeCheck;
  static_assert(sizeof(ServerSettings) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::ServerSettings::get_BestRegionSummaryInPreferences
// Il2CppName: get_BestRegionSummaryInPreferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&Photon::Pun::ServerSettings::get_BestRegionSummaryInPreferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::ServerSettings*), "get_BestRegionSummaryInPreferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::ServerSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: Photon::Pun::ServerSettings::UseCloud
// Il2CppName: UseCloud
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (Photon::Pun::ServerSettings::*)(::StringW, ::StringW)>(&Photon::Pun::ServerSettings::UseCloud)> {
  static const MethodInfo* get() {
    static auto* cloudAppid = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::ServerSettings*), "UseCloud", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cloudAppid, code});
  }
};
// Writing MetadataGetter for method: Photon::Pun::ServerSettings::IsAppId
// Il2CppName: IsAppId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&Photon::Pun::ServerSettings::IsAppId)> {
  static const MethodInfo* get() {
    static auto* val = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::ServerSettings*), "IsAppId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{val});
  }
};
// Writing MetadataGetter for method: Photon::Pun::ServerSettings::ResetBestRegionCodeInPreferences
// Il2CppName: ResetBestRegionCodeInPreferences
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&Photon::Pun::ServerSettings::ResetBestRegionCodeInPreferences)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::ServerSettings*), "ResetBestRegionCodeInPreferences", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: Photon::Pun::ServerSettings::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (Photon::Pun::ServerSettings::*)()>(&Photon::Pun::ServerSettings::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(Photon::Pun::ServerSettings*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
