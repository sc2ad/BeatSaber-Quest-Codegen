// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonTransformViewPositionModel
  class PhotonTransformViewPositionModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::Photon::Pun::PhotonTransformViewPositionModel);
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonTransformViewPositionModel*, "Photon.Pun", "PhotonTransformViewPositionModel");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: Photon.Pun.PhotonTransformViewPositionModel
  // [TokenAttribute] Offset: FFFFFFFF
  class PhotonTransformViewPositionModel : public ::Il2CppObject {
    public:
    // Nested type: ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions
    struct InterpolateOptions;
    // Nested type: ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions
    struct ExtrapolateOptions;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions
    // [TokenAttribute] Offset: FFFFFFFF
    struct InterpolateOptions/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InterpolateOptions
      constexpr InterpolateOptions(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions Disabled
      static constexpr const int Disabled = 0;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions Disabled
      static ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions _get_Disabled();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions Disabled
      static void _set_Disabled(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions FixedSpeed
      static constexpr const int FixedSpeed = 1;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions FixedSpeed
      static ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions _get_FixedSpeed();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions FixedSpeed
      static void _set_FixedSpeed(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions EstimatedSpeed
      static constexpr const int EstimatedSpeed = 2;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions EstimatedSpeed
      static ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions _get_EstimatedSpeed();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions EstimatedSpeed
      static void _set_EstimatedSpeed(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions SynchronizeValues
      static constexpr const int SynchronizeValues = 3;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions SynchronizeValues
      static ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions _get_SynchronizeValues();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions SynchronizeValues
      static void _set_SynchronizeValues(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions Lerp
      static constexpr const int Lerp = 4;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions Lerp
      static ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions _get_Lerp();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions Lerp
      static void _set_Lerp(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions
    #pragma pack(pop)
    static check_size<sizeof(PhotonTransformViewPositionModel::InterpolateOptions), 0 + sizeof(int)> __Photon_Pun_PhotonTransformViewPositionModel_InterpolateOptionsSizeCheck;
    static_assert(sizeof(PhotonTransformViewPositionModel::InterpolateOptions) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions
    // [TokenAttribute] Offset: FFFFFFFF
    struct ExtrapolateOptions/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ExtrapolateOptions
      constexpr ExtrapolateOptions(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions Disabled
      static constexpr const int Disabled = 0;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions Disabled
      static ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions _get_Disabled();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions Disabled
      static void _set_Disabled(::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions SynchronizeValues
      static constexpr const int SynchronizeValues = 1;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions SynchronizeValues
      static ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions _get_SynchronizeValues();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions SynchronizeValues
      static void _set_SynchronizeValues(::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions EstimateSpeedAndTurn
      static constexpr const int EstimateSpeedAndTurn = 2;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions EstimateSpeedAndTurn
      static ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions _get_EstimateSpeedAndTurn();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions EstimateSpeedAndTurn
      static void _set_EstimateSpeedAndTurn(::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions value);
      // static field const value: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions FixedSpeed
      static constexpr const int FixedSpeed = 3;
      // Get static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions FixedSpeed
      static ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions _get_FixedSpeed();
      // Set static field: static public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions FixedSpeed
      static void _set_FixedSpeed(::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions
    #pragma pack(pop)
    static check_size<sizeof(PhotonTransformViewPositionModel::ExtrapolateOptions), 0 + sizeof(int)> __Photon_Pun_PhotonTransformViewPositionModel_ExtrapolateOptionsSizeCheck;
    static_assert(sizeof(PhotonTransformViewPositionModel::ExtrapolateOptions) == 0x4);
    public:
    // public System.Boolean SynchronizeEnabled
    // Size: 0x1
    // Offset: 0x10
    bool SynchronizeEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean TeleportEnabled
    // Size: 0x1
    // Offset: 0x11
    bool TeleportEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: TeleportEnabled and: TeleportIfDistanceGreaterThan
    char __padding1[0x2] = {};
    // public System.Single TeleportIfDistanceGreaterThan
    // Size: 0x4
    // Offset: 0x14
    float TeleportIfDistanceGreaterThan;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions InterpolateOption
    // Size: 0x4
    // Offset: 0x18
    ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions InterpolateOption;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions) == 0x4);
    // public System.Single InterpolateMoveTowardsSpeed
    // Size: 0x4
    // Offset: 0x1C
    float InterpolateMoveTowardsSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single InterpolateLerpSpeed
    // Size: 0x4
    // Offset: 0x20
    float InterpolateLerpSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions ExtrapolateOption
    // Size: 0x4
    // Offset: 0x24
    ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions ExtrapolateOption;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions) == 0x4);
    // public System.Single ExtrapolateSpeed
    // Size: 0x4
    // Offset: 0x28
    float ExtrapolateSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean ExtrapolateIncludingRoundTripTime
    // Size: 0x1
    // Offset: 0x2C
    bool ExtrapolateIncludingRoundTripTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ExtrapolateIncludingRoundTripTime and: ExtrapolateNumberOfStoredPositions
    char __padding8[0x3] = {};
    // public System.Int32 ExtrapolateNumberOfStoredPositions
    // Size: 0x4
    // Offset: 0x30
    int ExtrapolateNumberOfStoredPositions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public System.Boolean SynchronizeEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_SynchronizeEnabled();
    // Get instance field reference: public System.Boolean TeleportEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_TeleportEnabled();
    // Get instance field reference: public System.Single TeleportIfDistanceGreaterThan
    [[deprecated("Use field access instead!")]] float& dyn_TeleportIfDistanceGreaterThan();
    // Get instance field reference: public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.InterpolateOptions InterpolateOption
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions& dyn_InterpolateOption();
    // Get instance field reference: public System.Single InterpolateMoveTowardsSpeed
    [[deprecated("Use field access instead!")]] float& dyn_InterpolateMoveTowardsSpeed();
    // Get instance field reference: public System.Single InterpolateLerpSpeed
    [[deprecated("Use field access instead!")]] float& dyn_InterpolateLerpSpeed();
    // Get instance field reference: public Photon.Pun.PhotonTransformViewPositionModel/Photon.Pun.ExtrapolateOptions ExtrapolateOption
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions& dyn_ExtrapolateOption();
    // Get instance field reference: public System.Single ExtrapolateSpeed
    [[deprecated("Use field access instead!")]] float& dyn_ExtrapolateSpeed();
    // Get instance field reference: public System.Boolean ExtrapolateIncludingRoundTripTime
    [[deprecated("Use field access instead!")]] bool& dyn_ExtrapolateIncludingRoundTripTime();
    // Get instance field reference: public System.Int32 ExtrapolateNumberOfStoredPositions
    [[deprecated("Use field access instead!")]] int& dyn_ExtrapolateNumberOfStoredPositions();
    // public System.Void .ctor()
    // Offset: 0x1B79348
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PhotonTransformViewPositionModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::Photon::Pun::PhotonTransformViewPositionModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PhotonTransformViewPositionModel*, creationType>()));
    }
  }; // Photon.Pun.PhotonTransformViewPositionModel
  #pragma pack(pop)
  static check_size<sizeof(PhotonTransformViewPositionModel), 48 + sizeof(int)> __Photon_Pun_PhotonTransformViewPositionModelSizeCheck;
  static_assert(sizeof(PhotonTransformViewPositionModel) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonTransformViewPositionModel::ExtrapolateOptions, "Photon.Pun", "PhotonTransformViewPositionModel/ExtrapolateOptions");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::PhotonTransformViewPositionModel::InterpolateOptions, "Photon.Pun", "PhotonTransformViewPositionModel/InterpolateOptions");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::PhotonTransformViewPositionModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
