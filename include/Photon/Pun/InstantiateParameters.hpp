// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Completed forward declares
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Forward declaring type: InstantiateParameters
  struct InstantiateParameters;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::Photon::Pun::InstantiateParameters, "Photon.Pun", "InstantiateParameters");
// Type namespace: Photon.Pun
namespace Photon::Pun {
  // Size: 0x4C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Photon.Pun.InstantiateParameters
  // [TokenAttribute] Offset: FFFFFFFF
  struct InstantiateParameters/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Int32[] viewIDs
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<int> viewIDs;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Byte objLevelPrefix
    // Size: 0x1
    // Offset: 0x8
    uint8_t objLevelPrefix;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: objLevelPrefix and: data
    char __padding1[0x7] = {};
    // public System.Object[] data
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::Il2CppObject*> data;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppObject*>) == 0x8);
    // public System.Byte group
    // Size: 0x1
    // Offset: 0x18
    uint8_t group;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: group and: rotation
    char __padding3[0x3] = {};
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x2C
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.String prefabName
    // Size: 0x8
    // Offset: 0x38
    ::StringW prefabName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public Photon.Realtime.Player creator
    // Size: 0x8
    // Offset: 0x40
    ::Photon::Realtime::Player* creator;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Int32 timestamp
    // Size: 0x4
    // Offset: 0x48
    int timestamp;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: InstantiateParameters
    constexpr InstantiateParameters(::ArrayW<int> viewIDs_ = ::ArrayW<int>(static_cast<void*>(nullptr)), uint8_t objLevelPrefix_ = {}, ::ArrayW<::Il2CppObject*> data_ = ::ArrayW<::Il2CppObject*>(static_cast<void*>(nullptr)), uint8_t group_ = {}, ::UnityEngine::Quaternion rotation_ = {}, ::UnityEngine::Vector3 position_ = {}, ::StringW prefabName_ = {}, ::Photon::Realtime::Player* creator_ = {}, int timestamp_ = {}) noexcept : viewIDs{viewIDs_}, objLevelPrefix{objLevelPrefix_}, data{data_}, group{group_}, rotation{rotation_}, position{position_}, prefabName{prefabName_}, creator{creator_}, timestamp{timestamp_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32[] viewIDs
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_viewIDs();
    // Get instance field reference: public System.Byte objLevelPrefix
    [[deprecated("Use field access instead!")]] uint8_t& dyn_objLevelPrefix();
    // Get instance field reference: public System.Object[] data
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppObject*>& dyn_data();
    // Get instance field reference: public System.Byte group
    [[deprecated("Use field access instead!")]] uint8_t& dyn_group();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public System.String prefabName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_prefabName();
    // Get instance field reference: public Photon.Realtime.Player creator
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_creator();
    // Get instance field reference: public System.Int32 timestamp
    [[deprecated("Use field access instead!")]] int& dyn_timestamp();
    // public System.Void .ctor(System.String prefabName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Byte group, System.Object[] data, System.Byte objLevelPrefix, System.Int32[] viewIDs, Photon.Realtime.Player creator, System.Int32 timestamp)
    // Offset: 0xA51E90
    InstantiateParameters(::StringW prefabName, ::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, uint8_t group, ::ArrayW<::Il2CppObject*> data, uint8_t objLevelPrefix, ::ArrayW<int> viewIDs, ::Photon::Realtime::Player* creator, int timestamp);
  }; // Photon.Pun.InstantiateParameters
  #pragma pack(pop)
  static check_size<sizeof(InstantiateParameters), 72 + sizeof(int)> __Photon_Pun_InstantiateParametersSizeCheck;
  static_assert(sizeof(InstantiateParameters) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: Photon::Pun::InstantiateParameters::InstantiateParameters
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
