// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IPointerClickHandler
#include "UnityEngine/EventSystems/IPointerClickHandler.hpp"
// Including type: UnityEngine.EventSystems.ISubmitHandler
#include "UnityEngine/EventSystems/ISubmitHandler.hpp"
// Including type: UnityEngine.EventSystems.IUpdateSelectedHandler
#include "UnityEngine/EventSystems/IUpdateSelectedHandler.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IEndDragHandler
#include "UnityEngine/EventSystems/IEndDragHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.EventSystems.IScrollHandler
#include "UnityEngine/EventSystems/IScrollHandler.hpp"
// Including type: UnityEngine.TouchScreenKeyboardType
#include "UnityEngine/TouchScreenKeyboardType.hpp"
// Including type: UnityEngine.UIVertex
#include "UnityEngine/UIVertex.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WaitForSecondsRealtime
  class WaitForSecondsRealtime;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: TouchScreenKeyboard
  class TouchScreenKeyboard;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Event
  class Event;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Object because it is already included!
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
  // Forward declaring type: TMP_ScrollbarEventHandler
  class TMP_ScrollbarEventHandler;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_InputValidator
  class TMP_InputValidator;
  // Skipping declaration: ContentType because it is already included!
  // Skipping declaration: LineType because it is already included!
  // Skipping declaration: InputType because it is already included!
  // Skipping declaration: CharacterValidation because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
  // Forward declaring type: Scrollbar
  class Scrollbar;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseInput
  class BaseInput;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_InputField
  class TMP_InputField;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::TMPro::TMP_InputField);
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_InputField*, "TMPro", "TMP_InputField");
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x2B0
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_InputField
  // [TokenAttribute] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: 10D7BD4
  class TMP_InputField : public ::UnityEngine::UI::Selectable/*, public ::UnityEngine::EventSystems::IPointerClickHandler, public ::UnityEngine::EventSystems::ISubmitHandler, public ::UnityEngine::EventSystems::IUpdateSelectedHandler, public ::UnityEngine::EventSystems::IBeginDragHandler, public ::UnityEngine::EventSystems::IDragHandler, public ::UnityEngine::EventSystems::IEndDragHandler, public ::UnityEngine::UI::ICanvasElement, public ::UnityEngine::UI::ILayoutElement, public ::UnityEngine::EventSystems::IScrollHandler*/ {
    public:
    // Nested type: ::TMPro::TMP_InputField::ContentType
    struct ContentType;
    // Nested type: ::TMPro::TMP_InputField::InputType
    struct InputType;
    // Nested type: ::TMPro::TMP_InputField::CharacterValidation
    struct CharacterValidation;
    // Nested type: ::TMPro::TMP_InputField::LineType
    struct LineType;
    // Nested type: ::TMPro::TMP_InputField::OnValidateInput
    class OnValidateInput;
    // Nested type: ::TMPro::TMP_InputField::SubmitEvent
    class SubmitEvent;
    // Nested type: ::TMPro::TMP_InputField::OnChangeEvent
    class OnChangeEvent;
    // Nested type: ::TMPro::TMP_InputField::SelectionEvent
    class SelectionEvent;
    // Nested type: ::TMPro::TMP_InputField::TextSelectionEvent
    class TextSelectionEvent;
    // Nested type: ::TMPro::TMP_InputField::TouchScreenKeyboardEvent
    class TouchScreenKeyboardEvent;
    // Nested type: ::TMPro::TMP_InputField::EditState
    struct EditState;
    // Nested type: ::TMPro::TMP_InputField::$CaretBlink$d__267
    class $CaretBlink$d__267;
    // Nested type: ::TMPro::TMP_InputField::$MouseDragOutsideRect$d__285
    class $MouseDragOutsideRect$d__285;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/TMPro.ContentType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ContentType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ContentType
      constexpr ContentType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Standard
      static ::TMPro::TMP_InputField::ContentType _get_Standard();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Standard
      static void _set_Standard(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Autocorrected
      static constexpr const int Autocorrected = 1;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Autocorrected
      static ::TMPro::TMP_InputField::ContentType _get_Autocorrected();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Autocorrected
      static void _set_Autocorrected(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType IntegerNumber
      static constexpr const int IntegerNumber = 2;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType IntegerNumber
      static ::TMPro::TMP_InputField::ContentType _get_IntegerNumber();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType IntegerNumber
      static void _set_IntegerNumber(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType DecimalNumber
      static constexpr const int DecimalNumber = 3;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType DecimalNumber
      static ::TMPro::TMP_InputField::ContentType _get_DecimalNumber();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType DecimalNumber
      static void _set_DecimalNumber(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Alphanumeric
      static ::TMPro::TMP_InputField::ContentType _get_Alphanumeric();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Alphanumeric
      static void _set_Alphanumeric(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Name
      static constexpr const int Name = 5;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Name
      static ::TMPro::TMP_InputField::ContentType _get_Name();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Name
      static void _set_Name(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType EmailAddress
      static constexpr const int EmailAddress = 6;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType EmailAddress
      static ::TMPro::TMP_InputField::ContentType _get_EmailAddress();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType EmailAddress
      static void _set_EmailAddress(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Password
      static constexpr const int Password = 7;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Password
      static ::TMPro::TMP_InputField::ContentType _get_Password();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Password
      static void _set_Password(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Pin
      static constexpr const int Pin = 8;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Pin
      static ::TMPro::TMP_InputField::ContentType _get_Pin();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Pin
      static void _set_Pin(::TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.ContentType Custom
      static constexpr const int Custom = 9;
      // Get static field: static public TMPro.TMP_InputField/TMPro.ContentType Custom
      static ::TMPro::TMP_InputField::ContentType _get_Custom();
      // Set static field: static public TMPro.TMP_InputField/TMPro.ContentType Custom
      static void _set_Custom(::TMPro::TMP_InputField::ContentType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TMPro.TMP_InputField/TMPro.ContentType
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::ContentType), 0 + sizeof(int)> __TMPro_TMP_InputField_ContentTypeSizeCheck;
    static_assert(sizeof(TMP_InputField::ContentType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/TMPro.InputType
    // [TokenAttribute] Offset: FFFFFFFF
    struct InputType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: InputType
      constexpr InputType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/TMPro.InputType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public TMPro.TMP_InputField/TMPro.InputType Standard
      static ::TMPro::TMP_InputField::InputType _get_Standard();
      // Set static field: static public TMPro.TMP_InputField/TMPro.InputType Standard
      static void _set_Standard(::TMPro::TMP_InputField::InputType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.InputType AutoCorrect
      static constexpr const int AutoCorrect = 1;
      // Get static field: static public TMPro.TMP_InputField/TMPro.InputType AutoCorrect
      static ::TMPro::TMP_InputField::InputType _get_AutoCorrect();
      // Set static field: static public TMPro.TMP_InputField/TMPro.InputType AutoCorrect
      static void _set_AutoCorrect(::TMPro::TMP_InputField::InputType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.InputType Password
      static constexpr const int Password = 2;
      // Get static field: static public TMPro.TMP_InputField/TMPro.InputType Password
      static ::TMPro::TMP_InputField::InputType _get_Password();
      // Set static field: static public TMPro.TMP_InputField/TMPro.InputType Password
      static void _set_Password(::TMPro::TMP_InputField::InputType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TMPro.TMP_InputField/TMPro.InputType
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::InputType), 0 + sizeof(int)> __TMPro_TMP_InputField_InputTypeSizeCheck;
    static_assert(sizeof(TMP_InputField::InputType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/TMPro.CharacterValidation
    // [TokenAttribute] Offset: FFFFFFFF
    struct CharacterValidation/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: CharacterValidation
      constexpr CharacterValidation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation None
      static constexpr const int None = 0;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation None
      static ::TMPro::TMP_InputField::CharacterValidation _get_None();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation None
      static void _set_None(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation Digit
      static constexpr const int Digit = 1;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Digit
      static ::TMPro::TMP_InputField::CharacterValidation _get_Digit();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Digit
      static void _set_Digit(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation Integer
      static constexpr const int Integer = 2;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Integer
      static ::TMPro::TMP_InputField::CharacterValidation _get_Integer();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Integer
      static void _set_Integer(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation Decimal
      static constexpr const int Decimal = 3;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Decimal
      static ::TMPro::TMP_InputField::CharacterValidation _get_Decimal();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Decimal
      static void _set_Decimal(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Alphanumeric
      static ::TMPro::TMP_InputField::CharacterValidation _get_Alphanumeric();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Alphanumeric
      static void _set_Alphanumeric(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation Name
      static constexpr const int Name = 5;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Name
      static ::TMPro::TMP_InputField::CharacterValidation _get_Name();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Name
      static void _set_Name(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation Regex
      static constexpr const int Regex = 6;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Regex
      static ::TMPro::TMP_InputField::CharacterValidation _get_Regex();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation Regex
      static void _set_Regex(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation EmailAddress
      static constexpr const int EmailAddress = 7;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation EmailAddress
      static ::TMPro::TMP_InputField::CharacterValidation _get_EmailAddress();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation EmailAddress
      static void _set_EmailAddress(::TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.CharacterValidation CustomValidator
      static constexpr const int CustomValidator = 8;
      // Get static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation CustomValidator
      static ::TMPro::TMP_InputField::CharacterValidation _get_CustomValidator();
      // Set static field: static public TMPro.TMP_InputField/TMPro.CharacterValidation CustomValidator
      static void _set_CustomValidator(::TMPro::TMP_InputField::CharacterValidation value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TMPro.TMP_InputField/TMPro.CharacterValidation
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::CharacterValidation), 0 + sizeof(int)> __TMPro_TMP_InputField_CharacterValidationSizeCheck;
    static_assert(sizeof(TMP_InputField::CharacterValidation) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/TMPro.LineType
    // [TokenAttribute] Offset: FFFFFFFF
    struct LineType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LineType
      constexpr LineType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/TMPro.LineType SingleLine
      static constexpr const int SingleLine = 0;
      // Get static field: static public TMPro.TMP_InputField/TMPro.LineType SingleLine
      static ::TMPro::TMP_InputField::LineType _get_SingleLine();
      // Set static field: static public TMPro.TMP_InputField/TMPro.LineType SingleLine
      static void _set_SingleLine(::TMPro::TMP_InputField::LineType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.LineType MultiLineSubmit
      static constexpr const int MultiLineSubmit = 1;
      // Get static field: static public TMPro.TMP_InputField/TMPro.LineType MultiLineSubmit
      static ::TMPro::TMP_InputField::LineType _get_MultiLineSubmit();
      // Set static field: static public TMPro.TMP_InputField/TMPro.LineType MultiLineSubmit
      static void _set_MultiLineSubmit(::TMPro::TMP_InputField::LineType value);
      // static field const value: static public TMPro.TMP_InputField/TMPro.LineType MultiLineNewline
      static constexpr const int MultiLineNewline = 2;
      // Get static field: static public TMPro.TMP_InputField/TMPro.LineType MultiLineNewline
      static ::TMPro::TMP_InputField::LineType _get_MultiLineNewline();
      // Set static field: static public TMPro.TMP_InputField/TMPro.LineType MultiLineNewline
      static void _set_MultiLineNewline(::TMPro::TMP_InputField::LineType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TMPro.TMP_InputField/TMPro.LineType
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::LineType), 0 + sizeof(int)> __TMPro_TMP_InputField_LineTypeSizeCheck;
    static_assert(sizeof(TMP_InputField::LineType) == 0x4);
    public:
    // protected UnityEngine.TouchScreenKeyboard m_SoftKeyboard
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::TouchScreenKeyboard* m_SoftKeyboard;
    // Field size check
    static_assert(sizeof(::UnityEngine::TouchScreenKeyboard*) == 0x8);
    // protected UnityEngine.RectTransform m_TextViewport
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::RectTransform* m_TextViewport;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // protected TMPro.TMP_Text m_TextComponent
    // Size: 0x8
    // Offset: 0x108
    ::TMPro::TMP_Text* m_TextComponent;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // protected UnityEngine.RectTransform m_TextComponentRectTransform
    // Size: 0x8
    // Offset: 0x110
    ::UnityEngine::RectTransform* m_TextComponentRectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // protected UnityEngine.UI.Graphic m_Placeholder
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::UI::Graphic* m_Placeholder;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Graphic*) == 0x8);
    // protected UnityEngine.UI.Scrollbar m_VerticalScrollbar
    // Size: 0x8
    // Offset: 0x120
    ::UnityEngine::UI::Scrollbar* m_VerticalScrollbar;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Scrollbar*) == 0x8);
    // protected TMPro.TMP_ScrollbarEventHandler m_VerticalScrollbarEventHandler
    // Size: 0x8
    // Offset: 0x128
    ::TMPro::TMP_ScrollbarEventHandler* m_VerticalScrollbarEventHandler;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_ScrollbarEventHandler*) == 0x8);
    // private System.Boolean m_IsDrivenByLayoutComponents
    // Size: 0x1
    // Offset: 0x130
    bool m_IsDrivenByLayoutComponents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsDrivenByLayoutComponents and: m_ScrollPosition
    char __padding7[0x3] = {};
    // private System.Single m_ScrollPosition
    // Size: 0x4
    // Offset: 0x134
    float m_ScrollPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_ScrollSensitivity
    // Size: 0x4
    // Offset: 0x138
    float m_ScrollSensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private TMPro.TMP_InputField/TMPro.ContentType m_ContentType
    // Size: 0x4
    // Offset: 0x13C
    ::TMPro::TMP_InputField::ContentType m_ContentType;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::ContentType) == 0x4);
    // private TMPro.TMP_InputField/TMPro.InputType m_InputType
    // Size: 0x4
    // Offset: 0x140
    ::TMPro::TMP_InputField::InputType m_InputType;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::InputType) == 0x4);
    // private System.Char m_AsteriskChar
    // Size: 0x2
    // Offset: 0x144
    ::Il2CppChar m_AsteriskChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: m_AsteriskChar and: m_KeyboardType
    char __padding12[0x2] = {};
    // private UnityEngine.TouchScreenKeyboardType m_KeyboardType
    // Size: 0x4
    // Offset: 0x148
    ::UnityEngine::TouchScreenKeyboardType m_KeyboardType;
    // Field size check
    static_assert(sizeof(::UnityEngine::TouchScreenKeyboardType) == 0x4);
    // private TMPro.TMP_InputField/TMPro.LineType m_LineType
    // Size: 0x4
    // Offset: 0x14C
    ::TMPro::TMP_InputField::LineType m_LineType;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::LineType) == 0x4);
    // private System.Boolean m_HideMobileInput
    // Size: 0x1
    // Offset: 0x150
    bool m_HideMobileInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HideSoftKeyboard
    // Size: 0x1
    // Offset: 0x151
    bool m_HideSoftKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HideSoftKeyboard and: m_CharacterValidation
    char __padding16[0x2] = {};
    // private TMPro.TMP_InputField/TMPro.CharacterValidation m_CharacterValidation
    // Size: 0x4
    // Offset: 0x154
    ::TMPro::TMP_InputField::CharacterValidation m_CharacterValidation;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::CharacterValidation) == 0x4);
    // private System.String m_RegexValue
    // Size: 0x8
    // Offset: 0x158
    ::StringW m_RegexValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Single m_GlobalPointSize
    // Size: 0x4
    // Offset: 0x160
    float m_GlobalPointSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_CharacterLimit
    // Size: 0x4
    // Offset: 0x164
    int m_CharacterLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private TMPro.TMP_InputField/TMPro.SubmitEvent m_OnEndEdit
    // Size: 0x8
    // Offset: 0x168
    ::TMPro::TMP_InputField::SubmitEvent* m_OnEndEdit;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::SubmitEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.SubmitEvent m_OnSubmit
    // Size: 0x8
    // Offset: 0x170
    ::TMPro::TMP_InputField::SubmitEvent* m_OnSubmit;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::SubmitEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.SelectionEvent m_OnSelect
    // Size: 0x8
    // Offset: 0x178
    ::TMPro::TMP_InputField::SelectionEvent* m_OnSelect;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::SelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.SelectionEvent m_OnDeselect
    // Size: 0x8
    // Offset: 0x180
    ::TMPro::TMP_InputField::SelectionEvent* m_OnDeselect;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::SelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.TextSelectionEvent m_OnTextSelection
    // Size: 0x8
    // Offset: 0x188
    ::TMPro::TMP_InputField::TextSelectionEvent* m_OnTextSelection;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::TextSelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.TextSelectionEvent m_OnEndTextSelection
    // Size: 0x8
    // Offset: 0x190
    ::TMPro::TMP_InputField::TextSelectionEvent* m_OnEndTextSelection;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::TextSelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.OnChangeEvent m_OnValueChanged
    // Size: 0x8
    // Offset: 0x198
    ::TMPro::TMP_InputField::OnChangeEvent* m_OnValueChanged;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::OnChangeEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.TouchScreenKeyboardEvent m_OnTouchScreenKeyboardStatusChanged
    // Size: 0x8
    // Offset: 0x1A0
    ::TMPro::TMP_InputField::TouchScreenKeyboardEvent* m_OnTouchScreenKeyboardStatusChanged;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::TouchScreenKeyboardEvent*) == 0x8);
    // private TMPro.TMP_InputField/TMPro.OnValidateInput m_OnValidateInput
    // Size: 0x8
    // Offset: 0x1A8
    ::TMPro::TMP_InputField::OnValidateInput* m_OnValidateInput;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputField::OnValidateInput*) == 0x8);
    // private UnityEngine.Color m_CaretColor
    // Size: 0x10
    // Offset: 0x1B0
    ::UnityEngine::Color m_CaretColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean m_CustomCaretColor
    // Size: 0x1
    // Offset: 0x1C0
    bool m_CustomCaretColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CustomCaretColor and: m_SelectionColor
    char __padding31[0x3] = {};
    // private UnityEngine.Color m_SelectionColor
    // Size: 0x10
    // Offset: 0x1C4
    ::UnityEngine::Color m_SelectionColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: m_SelectionColor and: m_Text
    char __padding32[0x4] = {};
    // [TextAreaAttribute] Offset: 0x10D8694
    // protected System.String m_Text
    // Size: 0x8
    // Offset: 0x1D8
    ::StringW m_Text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [RangeAttribute] Offset: 0x10D86D4
    // private System.Single m_CaretBlinkRate
    // Size: 0x4
    // Offset: 0x1E0
    float m_CaretBlinkRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x10D8714
    // private System.Int32 m_CaretWidth
    // Size: 0x4
    // Offset: 0x1E4
    int m_CaretWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_ReadOnly
    // Size: 0x1
    // Offset: 0x1E8
    bool m_ReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RichText
    // Size: 0x1
    // Offset: 0x1E9
    bool m_RichText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RichText and: m_StringPosition
    char __padding37[0x2] = {};
    // protected System.Int32 m_StringPosition
    // Size: 0x4
    // Offset: 0x1EC
    int m_StringPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_StringSelectPosition
    // Size: 0x4
    // Offset: 0x1F0
    int m_StringSelectPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_CaretPosition
    // Size: 0x4
    // Offset: 0x1F4
    int m_CaretPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_CaretSelectPosition
    // Size: 0x4
    // Offset: 0x1F8
    int m_CaretSelectPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_CaretSelectPosition and: caretRectTrans
    char __padding41[0x4] = {};
    // private UnityEngine.RectTransform caretRectTrans
    // Size: 0x8
    // Offset: 0x200
    ::UnityEngine::RectTransform* caretRectTrans;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // protected UnityEngine.UIVertex[] m_CursorVerts
    // Size: 0x8
    // Offset: 0x208
    ::ArrayW<::UnityEngine::UIVertex> m_CursorVerts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UIVertex>) == 0x8);
    // private UnityEngine.CanvasRenderer m_CachedInputRenderer
    // Size: 0x8
    // Offset: 0x210
    ::UnityEngine::CanvasRenderer* m_CachedInputRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasRenderer*) == 0x8);
    // private UnityEngine.Vector2 m_LastPosition
    // Size: 0x8
    // Offset: 0x218
    ::UnityEngine::Vector2 m_LastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // protected UnityEngine.Mesh m_Mesh
    // Size: 0x8
    // Offset: 0x220
    ::UnityEngine::Mesh* m_Mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private System.Boolean m_AllowInput
    // Size: 0x1
    // Offset: 0x228
    bool m_AllowInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ShouldActivateNextUpdate
    // Size: 0x1
    // Offset: 0x229
    bool m_ShouldActivateNextUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UpdateDrag
    // Size: 0x1
    // Offset: 0x22A
    bool m_UpdateDrag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DragPositionOutOfBounds
    // Size: 0x1
    // Offset: 0x22B
    bool m_DragPositionOutOfBounds;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_CaretVisible
    // Size: 0x1
    // Offset: 0x22C
    bool m_CaretVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CaretVisible and: m_BlinkCoroutine
    char __padding51[0x3] = {};
    // private UnityEngine.Coroutine m_BlinkCoroutine
    // Size: 0x8
    // Offset: 0x230
    ::UnityEngine::Coroutine* m_BlinkCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.Single m_BlinkStartTime
    // Size: 0x4
    // Offset: 0x238
    float m_BlinkStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_BlinkStartTime and: m_DragCoroutine
    char __padding53[0x4] = {};
    // private UnityEngine.Coroutine m_DragCoroutine
    // Size: 0x8
    // Offset: 0x240
    ::UnityEngine::Coroutine* m_DragCoroutine;
    // Field size check
    static_assert(sizeof(::UnityEngine::Coroutine*) == 0x8);
    // private System.String m_OriginalText
    // Size: 0x8
    // Offset: 0x248
    ::StringW m_OriginalText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean m_WasCanceled
    // Size: 0x1
    // Offset: 0x250
    bool m_WasCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HasDoneFocusTransition
    // Size: 0x1
    // Offset: 0x251
    bool m_HasDoneFocusTransition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HasDoneFocusTransition and: m_WaitForSecondsRealtime
    char __padding57[0x6] = {};
    // private UnityEngine.WaitForSecondsRealtime m_WaitForSecondsRealtime
    // Size: 0x8
    // Offset: 0x258
    ::UnityEngine::WaitForSecondsRealtime* m_WaitForSecondsRealtime;
    // Field size check
    static_assert(sizeof(::UnityEngine::WaitForSecondsRealtime*) == 0x8);
    // private System.Boolean m_PreventCallback
    // Size: 0x1
    // Offset: 0x260
    bool m_PreventCallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_TouchKeyboardAllowsInPlaceEditing
    // Size: 0x1
    // Offset: 0x261
    bool m_TouchKeyboardAllowsInPlaceEditing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsTextComponentUpdateRequired
    // Size: 0x1
    // Offset: 0x262
    bool m_IsTextComponentUpdateRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsScrollbarUpdateRequired
    // Size: 0x1
    // Offset: 0x263
    bool m_IsScrollbarUpdateRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsUpdatingScrollbarValues
    // Size: 0x1
    // Offset: 0x264
    bool m_IsUpdatingScrollbarValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_isLastKeyBackspace
    // Size: 0x1
    // Offset: 0x265
    bool m_isLastKeyBackspace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isLastKeyBackspace and: m_PointerDownClickStartTime
    char __padding64[0x2] = {};
    // private System.Single m_PointerDownClickStartTime
    // Size: 0x4
    // Offset: 0x268
    float m_PointerDownClickStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_KeyDownStartTime
    // Size: 0x4
    // Offset: 0x26C
    float m_KeyDownStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DoubleClickDelay
    // Size: 0x4
    // Offset: 0x270
    float m_DoubleClickDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_DoubleClickDelay and: m_GlobalFontAsset
    char __padding67[0x4] = {};
    // protected TMPro.TMP_FontAsset m_GlobalFontAsset
    // Size: 0x8
    // Offset: 0x278
    ::TMPro::TMP_FontAsset* m_GlobalFontAsset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_FontAsset*) == 0x8);
    // protected System.Boolean m_OnFocusSelectAll
    // Size: 0x1
    // Offset: 0x280
    bool m_OnFocusSelectAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isSelectAll
    // Size: 0x1
    // Offset: 0x281
    bool m_isSelectAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ResetOnDeActivation
    // Size: 0x1
    // Offset: 0x282
    bool m_ResetOnDeActivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SelectionStillActive
    // Size: 0x1
    // Offset: 0x283
    bool m_SelectionStillActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ReleaseSelection
    // Size: 0x1
    // Offset: 0x284
    bool m_ReleaseSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ReleaseSelection and: m_SelectedObject
    char __padding73[0x3] = {};
    // private UnityEngine.GameObject m_SelectedObject
    // Size: 0x8
    // Offset: 0x288
    ::UnityEngine::GameObject* m_SelectedObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Boolean m_RestoreOriginalTextOnEscape
    // Size: 0x1
    // Offset: 0x290
    bool m_RestoreOriginalTextOnEscape;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isRichTextEditingAllowed
    // Size: 0x1
    // Offset: 0x291
    bool m_isRichTextEditingAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isRichTextEditingAllowed and: m_LineLimit
    char __padding76[0x2] = {};
    // protected System.Int32 m_LineLimit
    // Size: 0x4
    // Offset: 0x294
    int m_LineLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.TMP_InputValidator m_InputValidator
    // Size: 0x8
    // Offset: 0x298
    ::TMPro::TMP_InputValidator* m_InputValidator;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_InputValidator*) == 0x8);
    // private System.Boolean m_isSelected
    // Size: 0x1
    // Offset: 0x2A0
    bool m_isSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsStringPositionDirty
    // Size: 0x1
    // Offset: 0x2A1
    bool m_IsStringPositionDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsCaretPositionDirty
    // Size: 0x1
    // Offset: 0x2A2
    bool m_IsCaretPositionDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_forceRectTransformAdjustment
    // Size: 0x1
    // Offset: 0x2A3
    bool m_forceRectTransformAdjustment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_forceRectTransformAdjustment and: m_ProcessingEvent
    char __padding82[0x4] = {};
    // private UnityEngine.Event m_ProcessingEvent
    // Size: 0x8
    // Offset: 0x2A8
    ::UnityEngine::Event* m_ProcessingEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Event*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IPointerClickHandler
    operator ::UnityEngine::EventSystems::IPointerClickHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IPointerClickHandler*>(this);
    }
    // Creating interface conversion operator: i_IPointerClickHandler
    inline ::UnityEngine::EventSystems::IPointerClickHandler* i_IPointerClickHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IPointerClickHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::ISubmitHandler
    operator ::UnityEngine::EventSystems::ISubmitHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::ISubmitHandler*>(this);
    }
    // Creating interface conversion operator: i_ISubmitHandler
    inline ::UnityEngine::EventSystems::ISubmitHandler* i_ISubmitHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::ISubmitHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IUpdateSelectedHandler
    operator ::UnityEngine::EventSystems::IUpdateSelectedHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IUpdateSelectedHandler*>(this);
    }
    // Creating interface conversion operator: i_IUpdateSelectedHandler
    inline ::UnityEngine::EventSystems::IUpdateSelectedHandler* i_IUpdateSelectedHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IUpdateSelectedHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IBeginDragHandler
    operator ::UnityEngine::EventSystems::IBeginDragHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: i_IBeginDragHandler
    inline ::UnityEngine::EventSystems::IBeginDragHandler* i_IBeginDragHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IDragHandler
    operator ::UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: i_IDragHandler
    inline ::UnityEngine::EventSystems::IDragHandler* i_IDragHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IEndDragHandler
    operator ::UnityEngine::EventSystems::IEndDragHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IEndDragHandler*>(this);
    }
    // Creating interface conversion operator: i_IEndDragHandler
    inline ::UnityEngine::EventSystems::IEndDragHandler* i_IEndDragHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IEndDragHandler*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UI::ICanvasElement
    operator ::UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ICanvasElement*>(this);
    }
    // Creating interface conversion operator: i_ICanvasElement
    inline ::UnityEngine::UI::ICanvasElement* i_ICanvasElement() noexcept {
      return reinterpret_cast<::UnityEngine::UI::ICanvasElement*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::UI::ILayoutElement
    operator ::UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: i_ILayoutElement
    inline ::UnityEngine::UI::ILayoutElement* i_ILayoutElement() noexcept {
      return reinterpret_cast<::UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::EventSystems::IScrollHandler
    operator ::UnityEngine::EventSystems::IScrollHandler() noexcept {
      return *reinterpret_cast<::UnityEngine::EventSystems::IScrollHandler*>(this);
    }
    // Creating interface conversion operator: i_IScrollHandler
    inline ::UnityEngine::EventSystems::IScrollHandler* i_IScrollHandler() noexcept {
      return reinterpret_cast<::UnityEngine::EventSystems::IScrollHandler*>(this);
    }
    // Get static field: static private readonly System.Char[] kSeparators
    static ::ArrayW<::Il2CppChar> _get_kSeparators();
    // Set static field: static private readonly System.Char[] kSeparators
    static void _set_kSeparators(::ArrayW<::Il2CppChar> value);
    // static field const value: static private System.Single kHScrollSpeed
    static constexpr const float kHScrollSpeed = 0.05;
    // Get static field: static private System.Single kHScrollSpeed
    static float _get_kHScrollSpeed();
    // Set static field: static private System.Single kHScrollSpeed
    static void _set_kHScrollSpeed(float value);
    // static field const value: static private System.Single kVScrollSpeed
    static constexpr const float kVScrollSpeed = 0.1;
    // Get static field: static private System.Single kVScrollSpeed
    static float _get_kVScrollSpeed();
    // Set static field: static private System.Single kVScrollSpeed
    static void _set_kVScrollSpeed(float value);
    // static field const value: static private System.String kEmailSpecialCharacters
    static constexpr const char* kEmailSpecialCharacters = "!#$%&'*+-/=?^_`{|}~";
    // Get static field: static private System.String kEmailSpecialCharacters
    static ::StringW _get_kEmailSpecialCharacters();
    // Set static field: static private System.String kEmailSpecialCharacters
    static void _set_kEmailSpecialCharacters(::StringW value);
    // Get instance field reference: protected UnityEngine.TouchScreenKeyboard m_SoftKeyboard
    [[deprecated("Use field access instead!")]] ::UnityEngine::TouchScreenKeyboard*& dyn_m_SoftKeyboard();
    // Get instance field reference: protected UnityEngine.RectTransform m_TextViewport
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_TextViewport();
    // Get instance field reference: protected TMPro.TMP_Text m_TextComponent
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_m_TextComponent();
    // Get instance field reference: protected UnityEngine.RectTransform m_TextComponentRectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_TextComponentRectTransform();
    // Get instance field reference: protected UnityEngine.UI.Graphic m_Placeholder
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Graphic*& dyn_m_Placeholder();
    // Get instance field reference: protected UnityEngine.UI.Scrollbar m_VerticalScrollbar
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Scrollbar*& dyn_m_VerticalScrollbar();
    // Get instance field reference: protected TMPro.TMP_ScrollbarEventHandler m_VerticalScrollbarEventHandler
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_ScrollbarEventHandler*& dyn_m_VerticalScrollbarEventHandler();
    // Get instance field reference: private System.Boolean m_IsDrivenByLayoutComponents
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsDrivenByLayoutComponents();
    // Get instance field reference: private System.Single m_ScrollPosition
    [[deprecated("Use field access instead!")]] float& dyn_m_ScrollPosition();
    // Get instance field reference: protected System.Single m_ScrollSensitivity
    [[deprecated("Use field access instead!")]] float& dyn_m_ScrollSensitivity();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.ContentType m_ContentType
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::ContentType& dyn_m_ContentType();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.InputType m_InputType
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::InputType& dyn_m_InputType();
    // Get instance field reference: private System.Char m_AsteriskChar
    [[deprecated("Use field access instead!")]] ::Il2CppChar& dyn_m_AsteriskChar();
    // Get instance field reference: private UnityEngine.TouchScreenKeyboardType m_KeyboardType
    [[deprecated("Use field access instead!")]] ::UnityEngine::TouchScreenKeyboardType& dyn_m_KeyboardType();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.LineType m_LineType
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::LineType& dyn_m_LineType();
    // Get instance field reference: private System.Boolean m_HideMobileInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_HideMobileInput();
    // Get instance field reference: private System.Boolean m_HideSoftKeyboard
    [[deprecated("Use field access instead!")]] bool& dyn_m_HideSoftKeyboard();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.CharacterValidation m_CharacterValidation
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::CharacterValidation& dyn_m_CharacterValidation();
    // Get instance field reference: private System.String m_RegexValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_RegexValue();
    // Get instance field reference: private System.Single m_GlobalPointSize
    [[deprecated("Use field access instead!")]] float& dyn_m_GlobalPointSize();
    // Get instance field reference: private System.Int32 m_CharacterLimit
    [[deprecated("Use field access instead!")]] int& dyn_m_CharacterLimit();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.SubmitEvent m_OnEndEdit
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::SubmitEvent*& dyn_m_OnEndEdit();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.SubmitEvent m_OnSubmit
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::SubmitEvent*& dyn_m_OnSubmit();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.SelectionEvent m_OnSelect
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::SelectionEvent*& dyn_m_OnSelect();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.SelectionEvent m_OnDeselect
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::SelectionEvent*& dyn_m_OnDeselect();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.TextSelectionEvent m_OnTextSelection
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::TextSelectionEvent*& dyn_m_OnTextSelection();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.TextSelectionEvent m_OnEndTextSelection
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::TextSelectionEvent*& dyn_m_OnEndTextSelection();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.OnChangeEvent m_OnValueChanged
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::OnChangeEvent*& dyn_m_OnValueChanged();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.TouchScreenKeyboardEvent m_OnTouchScreenKeyboardStatusChanged
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::TouchScreenKeyboardEvent*& dyn_m_OnTouchScreenKeyboardStatusChanged();
    // Get instance field reference: private TMPro.TMP_InputField/TMPro.OnValidateInput m_OnValidateInput
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputField::OnValidateInput*& dyn_m_OnValidateInput();
    // Get instance field reference: private UnityEngine.Color m_CaretColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_CaretColor();
    // Get instance field reference: private System.Boolean m_CustomCaretColor
    [[deprecated("Use field access instead!")]] bool& dyn_m_CustomCaretColor();
    // Get instance field reference: private UnityEngine.Color m_SelectionColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_SelectionColor();
    // Get instance field reference: protected System.String m_Text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_Text();
    // Get instance field reference: private System.Single m_CaretBlinkRate
    [[deprecated("Use field access instead!")]] float& dyn_m_CaretBlinkRate();
    // Get instance field reference: private System.Int32 m_CaretWidth
    [[deprecated("Use field access instead!")]] int& dyn_m_CaretWidth();
    // Get instance field reference: private System.Boolean m_ReadOnly
    [[deprecated("Use field access instead!")]] bool& dyn_m_ReadOnly();
    // Get instance field reference: private System.Boolean m_RichText
    [[deprecated("Use field access instead!")]] bool& dyn_m_RichText();
    // Get instance field reference: protected System.Int32 m_StringPosition
    [[deprecated("Use field access instead!")]] int& dyn_m_StringPosition();
    // Get instance field reference: protected System.Int32 m_StringSelectPosition
    [[deprecated("Use field access instead!")]] int& dyn_m_StringSelectPosition();
    // Get instance field reference: protected System.Int32 m_CaretPosition
    [[deprecated("Use field access instead!")]] int& dyn_m_CaretPosition();
    // Get instance field reference: protected System.Int32 m_CaretSelectPosition
    [[deprecated("Use field access instead!")]] int& dyn_m_CaretSelectPosition();
    // Get instance field reference: private UnityEngine.RectTransform caretRectTrans
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_caretRectTrans();
    // Get instance field reference: protected UnityEngine.UIVertex[] m_CursorVerts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UIVertex>& dyn_m_CursorVerts();
    // Get instance field reference: private UnityEngine.CanvasRenderer m_CachedInputRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasRenderer*& dyn_m_CachedInputRenderer();
    // Get instance field reference: private UnityEngine.Vector2 m_LastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_m_LastPosition();
    // Get instance field reference: protected UnityEngine.Mesh m_Mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_Mesh();
    // Get instance field reference: private System.Boolean m_AllowInput
    [[deprecated("Use field access instead!")]] bool& dyn_m_AllowInput();
    // Get instance field reference: private System.Boolean m_ShouldActivateNextUpdate
    [[deprecated("Use field access instead!")]] bool& dyn_m_ShouldActivateNextUpdate();
    // Get instance field reference: private System.Boolean m_UpdateDrag
    [[deprecated("Use field access instead!")]] bool& dyn_m_UpdateDrag();
    // Get instance field reference: private System.Boolean m_DragPositionOutOfBounds
    [[deprecated("Use field access instead!")]] bool& dyn_m_DragPositionOutOfBounds();
    // Get instance field reference: protected System.Boolean m_CaretVisible
    [[deprecated("Use field access instead!")]] bool& dyn_m_CaretVisible();
    // Get instance field reference: private UnityEngine.Coroutine m_BlinkCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_m_BlinkCoroutine();
    // Get instance field reference: private System.Single m_BlinkStartTime
    [[deprecated("Use field access instead!")]] float& dyn_m_BlinkStartTime();
    // Get instance field reference: private UnityEngine.Coroutine m_DragCoroutine
    [[deprecated("Use field access instead!")]] ::UnityEngine::Coroutine*& dyn_m_DragCoroutine();
    // Get instance field reference: private System.String m_OriginalText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_OriginalText();
    // Get instance field reference: private System.Boolean m_WasCanceled
    [[deprecated("Use field access instead!")]] bool& dyn_m_WasCanceled();
    // Get instance field reference: private System.Boolean m_HasDoneFocusTransition
    [[deprecated("Use field access instead!")]] bool& dyn_m_HasDoneFocusTransition();
    // Get instance field reference: private UnityEngine.WaitForSecondsRealtime m_WaitForSecondsRealtime
    [[deprecated("Use field access instead!")]] ::UnityEngine::WaitForSecondsRealtime*& dyn_m_WaitForSecondsRealtime();
    // Get instance field reference: private System.Boolean m_PreventCallback
    [[deprecated("Use field access instead!")]] bool& dyn_m_PreventCallback();
    // Get instance field reference: private System.Boolean m_TouchKeyboardAllowsInPlaceEditing
    [[deprecated("Use field access instead!")]] bool& dyn_m_TouchKeyboardAllowsInPlaceEditing();
    // Get instance field reference: private System.Boolean m_IsTextComponentUpdateRequired
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsTextComponentUpdateRequired();
    // Get instance field reference: private System.Boolean m_IsScrollbarUpdateRequired
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsScrollbarUpdateRequired();
    // Get instance field reference: private System.Boolean m_IsUpdatingScrollbarValues
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsUpdatingScrollbarValues();
    // Get instance field reference: private System.Boolean m_isLastKeyBackspace
    [[deprecated("Use field access instead!")]] bool& dyn_m_isLastKeyBackspace();
    // Get instance field reference: private System.Single m_PointerDownClickStartTime
    [[deprecated("Use field access instead!")]] float& dyn_m_PointerDownClickStartTime();
    // Get instance field reference: private System.Single m_KeyDownStartTime
    [[deprecated("Use field access instead!")]] float& dyn_m_KeyDownStartTime();
    // Get instance field reference: private System.Single m_DoubleClickDelay
    [[deprecated("Use field access instead!")]] float& dyn_m_DoubleClickDelay();
    // Get instance field reference: protected TMPro.TMP_FontAsset m_GlobalFontAsset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_FontAsset*& dyn_m_GlobalFontAsset();
    // Get instance field reference: protected System.Boolean m_OnFocusSelectAll
    [[deprecated("Use field access instead!")]] bool& dyn_m_OnFocusSelectAll();
    // Get instance field reference: protected System.Boolean m_isSelectAll
    [[deprecated("Use field access instead!")]] bool& dyn_m_isSelectAll();
    // Get instance field reference: protected System.Boolean m_ResetOnDeActivation
    [[deprecated("Use field access instead!")]] bool& dyn_m_ResetOnDeActivation();
    // Get instance field reference: private System.Boolean m_SelectionStillActive
    [[deprecated("Use field access instead!")]] bool& dyn_m_SelectionStillActive();
    // Get instance field reference: private System.Boolean m_ReleaseSelection
    [[deprecated("Use field access instead!")]] bool& dyn_m_ReleaseSelection();
    // Get instance field reference: private UnityEngine.GameObject m_SelectedObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_m_SelectedObject();
    // Get instance field reference: private System.Boolean m_RestoreOriginalTextOnEscape
    [[deprecated("Use field access instead!")]] bool& dyn_m_RestoreOriginalTextOnEscape();
    // Get instance field reference: protected System.Boolean m_isRichTextEditingAllowed
    [[deprecated("Use field access instead!")]] bool& dyn_m_isRichTextEditingAllowed();
    // Get instance field reference: protected System.Int32 m_LineLimit
    [[deprecated("Use field access instead!")]] int& dyn_m_LineLimit();
    // Get instance field reference: protected TMPro.TMP_InputValidator m_InputValidator
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_InputValidator*& dyn_m_InputValidator();
    // Get instance field reference: private System.Boolean m_isSelected
    [[deprecated("Use field access instead!")]] bool& dyn_m_isSelected();
    // Get instance field reference: private System.Boolean m_IsStringPositionDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsStringPositionDirty();
    // Get instance field reference: private System.Boolean m_IsCaretPositionDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_IsCaretPositionDirty();
    // Get instance field reference: private System.Boolean m_forceRectTransformAdjustment
    [[deprecated("Use field access instead!")]] bool& dyn_m_forceRectTransformAdjustment();
    // Get instance field reference: private UnityEngine.Event m_ProcessingEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Event*& dyn_m_ProcessingEvent();
    // private UnityEngine.EventSystems.BaseInput get_inputSystem()
    // Offset: 0x14B8338
    ::UnityEngine::EventSystems::BaseInput* get_inputSystem();
    // private System.String get_compositionString()
    // Offset: 0x14B8478
    ::StringW get_compositionString();
    // protected UnityEngine.Mesh get_mesh()
    // Offset: 0x14B8840
    ::UnityEngine::Mesh* get_mesh();
    // public System.Boolean get_shouldHideMobileInput()
    // Offset: 0x14B88E4
    bool get_shouldHideMobileInput();
    // public System.Void set_shouldHideMobileInput(System.Boolean value)
    // Offset: 0x14B8938
    void set_shouldHideMobileInput(bool value);
    // public System.Boolean get_shouldHideSoftKeyboard()
    // Offset: 0x14B89D8
    bool get_shouldHideSoftKeyboard();
    // public System.Void set_shouldHideSoftKeyboard(System.Boolean value)
    // Offset: 0x14B8A4C
    void set_shouldHideSoftKeyboard(bool value);
    // public System.String get_text()
    // Offset: 0x14B8B84
    ::StringW get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0x14B8B8C
    void set_text(::StringW value);
    // public System.Boolean get_isFocused()
    // Offset: 0x14B91B8
    bool get_isFocused();
    // public System.Single get_caretBlinkRate()
    // Offset: 0x14B91C0
    float get_caretBlinkRate();
    // public System.Void set_caretBlinkRate(System.Single value)
    // Offset: 0x14B91C8
    void set_caretBlinkRate(float value);
    // public System.Int32 get_caretWidth()
    // Offset: 0x14B92AC
    int get_caretWidth();
    // public System.Void set_caretWidth(System.Int32 value)
    // Offset: 0x14B92B4
    void set_caretWidth(int value);
    // public UnityEngine.RectTransform get_textViewport()
    // Offset: 0x14B9398
    ::UnityEngine::RectTransform* get_textViewport();
    // public System.Void set_textViewport(UnityEngine.RectTransform value)
    // Offset: 0x14AD8F8
    void set_textViewport(::UnityEngine::RectTransform* value);
    // public TMPro.TMP_Text get_textComponent()
    // Offset: 0x14B93A0
    ::TMPro::TMP_Text* get_textComponent();
    // public System.Void set_textComponent(TMPro.TMP_Text value)
    // Offset: 0x14AD958
    void set_textComponent(::TMPro::TMP_Text* value);
    // public UnityEngine.UI.Graphic get_placeholder()
    // Offset: 0x14B93A8
    ::UnityEngine::UI::Graphic* get_placeholder();
    // public System.Void set_placeholder(UnityEngine.UI.Graphic value)
    // Offset: 0x14AD9D4
    void set_placeholder(::UnityEngine::UI::Graphic* value);
    // public UnityEngine.UI.Scrollbar get_verticalScrollbar()
    // Offset: 0x14B93B0
    ::UnityEngine::UI::Scrollbar* get_verticalScrollbar();
    // public System.Void set_verticalScrollbar(UnityEngine.UI.Scrollbar value)
    // Offset: 0x14B93B8
    void set_verticalScrollbar(::UnityEngine::UI::Scrollbar* value);
    // public System.Single get_scrollSensitivity()
    // Offset: 0x14B9558
    float get_scrollSensitivity();
    // public System.Void set_scrollSensitivity(System.Single value)
    // Offset: 0x14B9560
    void set_scrollSensitivity(float value);
    // public UnityEngine.Color get_caretColor()
    // Offset: 0x14B95DC
    ::UnityEngine::Color get_caretColor();
    // public System.Void set_caretColor(UnityEngine.Color value)
    // Offset: 0x14B9624
    void set_caretColor(::UnityEngine::Color value);
    // public System.Boolean get_customCaretColor()
    // Offset: 0x14B965C
    bool get_customCaretColor();
    // public System.Void set_customCaretColor(System.Boolean value)
    // Offset: 0x14B9664
    void set_customCaretColor(bool value);
    // public UnityEngine.Color get_selectionColor()
    // Offset: 0x14B9688
    ::UnityEngine::Color get_selectionColor();
    // public System.Void set_selectionColor(UnityEngine.Color value)
    // Offset: 0x14B969C
    void set_selectionColor(::UnityEngine::Color value);
    // public TMPro.TMP_InputField/TMPro.SubmitEvent get_onEndEdit()
    // Offset: 0x14B96D4
    ::TMPro::TMP_InputField::SubmitEvent* get_onEndEdit();
    // public System.Void set_onEndEdit(TMPro.TMP_InputField/TMPro.SubmitEvent value)
    // Offset: 0x14B96DC
    void set_onEndEdit(::TMPro::TMP_InputField::SubmitEvent* value);
    // public TMPro.TMP_InputField/TMPro.SubmitEvent get_onSubmit()
    // Offset: 0x14B973C
    ::TMPro::TMP_InputField::SubmitEvent* get_onSubmit();
    // public System.Void set_onSubmit(TMPro.TMP_InputField/TMPro.SubmitEvent value)
    // Offset: 0x14B9744
    void set_onSubmit(::TMPro::TMP_InputField::SubmitEvent* value);
    // public TMPro.TMP_InputField/TMPro.SelectionEvent get_onSelect()
    // Offset: 0x14B97A4
    ::TMPro::TMP_InputField::SelectionEvent* get_onSelect();
    // public System.Void set_onSelect(TMPro.TMP_InputField/TMPro.SelectionEvent value)
    // Offset: 0x14B97AC
    void set_onSelect(::TMPro::TMP_InputField::SelectionEvent* value);
    // public TMPro.TMP_InputField/TMPro.SelectionEvent get_onDeselect()
    // Offset: 0x14B980C
    ::TMPro::TMP_InputField::SelectionEvent* get_onDeselect();
    // public System.Void set_onDeselect(TMPro.TMP_InputField/TMPro.SelectionEvent value)
    // Offset: 0x14B9814
    void set_onDeselect(::TMPro::TMP_InputField::SelectionEvent* value);
    // public TMPro.TMP_InputField/TMPro.TextSelectionEvent get_onTextSelection()
    // Offset: 0x14B9874
    ::TMPro::TMP_InputField::TextSelectionEvent* get_onTextSelection();
    // public System.Void set_onTextSelection(TMPro.TMP_InputField/TMPro.TextSelectionEvent value)
    // Offset: 0x14B987C
    void set_onTextSelection(::TMPro::TMP_InputField::TextSelectionEvent* value);
    // public TMPro.TMP_InputField/TMPro.TextSelectionEvent get_onEndTextSelection()
    // Offset: 0x14B98DC
    ::TMPro::TMP_InputField::TextSelectionEvent* get_onEndTextSelection();
    // public System.Void set_onEndTextSelection(TMPro.TMP_InputField/TMPro.TextSelectionEvent value)
    // Offset: 0x14B98E4
    void set_onEndTextSelection(::TMPro::TMP_InputField::TextSelectionEvent* value);
    // public TMPro.TMP_InputField/TMPro.OnChangeEvent get_onValueChanged()
    // Offset: 0x14B9944
    ::TMPro::TMP_InputField::OnChangeEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(TMPro.TMP_InputField/TMPro.OnChangeEvent value)
    // Offset: 0x14B994C
    void set_onValueChanged(::TMPro::TMP_InputField::OnChangeEvent* value);
    // public TMPro.TMP_InputField/TMPro.TouchScreenKeyboardEvent get_onTouchScreenKeyboardStatusChanged()
    // Offset: 0x14B99AC
    ::TMPro::TMP_InputField::TouchScreenKeyboardEvent* get_onTouchScreenKeyboardStatusChanged();
    // public System.Void set_onTouchScreenKeyboardStatusChanged(TMPro.TMP_InputField/TMPro.TouchScreenKeyboardEvent value)
    // Offset: 0x14B99B4
    void set_onTouchScreenKeyboardStatusChanged(::TMPro::TMP_InputField::TouchScreenKeyboardEvent* value);
    // public TMPro.TMP_InputField/TMPro.OnValidateInput get_onValidateInput()
    // Offset: 0x14B9A14
    ::TMPro::TMP_InputField::OnValidateInput* get_onValidateInput();
    // public System.Void set_onValidateInput(TMPro.TMP_InputField/TMPro.OnValidateInput value)
    // Offset: 0x14B9A1C
    void set_onValidateInput(::TMPro::TMP_InputField::OnValidateInput* value);
    // public System.Int32 get_characterLimit()
    // Offset: 0x14B9A7C
    int get_characterLimit();
    // public System.Void set_characterLimit(System.Int32 value)
    // Offset: 0x14B9A84
    void set_characterLimit(int value);
    // public System.Single get_pointSize()
    // Offset: 0x14B9B48
    float get_pointSize();
    // public System.Void set_pointSize(System.Single value)
    // Offset: 0x14B9B50
    void set_pointSize(float value);
    // public TMPro.TMP_FontAsset get_fontAsset()
    // Offset: 0x14B9CF4
    ::TMPro::TMP_FontAsset* get_fontAsset();
    // public System.Void set_fontAsset(TMPro.TMP_FontAsset value)
    // Offset: 0x14ADA34
    void set_fontAsset(::TMPro::TMP_FontAsset* value);
    // public System.Boolean get_onFocusSelectAll()
    // Offset: 0x14B9DE8
    bool get_onFocusSelectAll();
    // public System.Void set_onFocusSelectAll(System.Boolean value)
    // Offset: 0x14B9DF0
    void set_onFocusSelectAll(bool value);
    // public System.Boolean get_resetOnDeActivation()
    // Offset: 0x14B9DFC
    bool get_resetOnDeActivation();
    // public System.Void set_resetOnDeActivation(System.Boolean value)
    // Offset: 0x14B9E04
    void set_resetOnDeActivation(bool value);
    // public System.Boolean get_restoreOriginalTextOnEscape()
    // Offset: 0x14B9E10
    bool get_restoreOriginalTextOnEscape();
    // public System.Void set_restoreOriginalTextOnEscape(System.Boolean value)
    // Offset: 0x14B9E18
    void set_restoreOriginalTextOnEscape(bool value);
    // public System.Boolean get_isRichTextEditingAllowed()
    // Offset: 0x14B9E24
    bool get_isRichTextEditingAllowed();
    // public System.Void set_isRichTextEditingAllowed(System.Boolean value)
    // Offset: 0x14B9E2C
    void set_isRichTextEditingAllowed(bool value);
    // public TMPro.TMP_InputField/TMPro.ContentType get_contentType()
    // Offset: 0x14B9E38
    ::TMPro::TMP_InputField::ContentType get_contentType();
    // public System.Void set_contentType(TMPro.TMP_InputField/TMPro.ContentType value)
    // Offset: 0x14B9E40
    void set_contentType(::TMPro::TMP_InputField::ContentType value);
    // public TMPro.TMP_InputField/TMPro.LineType get_lineType()
    // Offset: 0x14B9F74
    ::TMPro::TMP_InputField::LineType get_lineType();
    // public System.Void set_lineType(TMPro.TMP_InputField/TMPro.LineType value)
    // Offset: 0x14B9F7C
    void set_lineType(::TMPro::TMP_InputField::LineType value);
    // public System.Int32 get_lineLimit()
    // Offset: 0x14BA0B0
    int get_lineLimit();
    // public System.Void set_lineLimit(System.Int32 value)
    // Offset: 0x14BA0B8
    void set_lineLimit(int value);
    // public TMPro.TMP_InputField/TMPro.InputType get_inputType()
    // Offset: 0x14BA138
    ::TMPro::TMP_InputField::InputType get_inputType();
    // public System.Void set_inputType(TMPro.TMP_InputField/TMPro.InputType value)
    // Offset: 0x14BA140
    void set_inputType(::TMPro::TMP_InputField::InputType value);
    // public UnityEngine.TouchScreenKeyboardType get_keyboardType()
    // Offset: 0x14BA1E4
    ::UnityEngine::TouchScreenKeyboardType get_keyboardType();
    // public System.Void set_keyboardType(UnityEngine.TouchScreenKeyboardType value)
    // Offset: 0x14BA1EC
    void set_keyboardType(::UnityEngine::TouchScreenKeyboardType value);
    // public TMPro.TMP_InputField/TMPro.CharacterValidation get_characterValidation()
    // Offset: 0x14BA278
    ::TMPro::TMP_InputField::CharacterValidation get_characterValidation();
    // public System.Void set_characterValidation(TMPro.TMP_InputField/TMPro.CharacterValidation value)
    // Offset: 0x14BA280
    void set_characterValidation(::TMPro::TMP_InputField::CharacterValidation value);
    // public TMPro.TMP_InputValidator get_inputValidator()
    // Offset: 0x14BA30C
    ::TMPro::TMP_InputValidator* get_inputValidator();
    // public System.Void set_inputValidator(TMPro.TMP_InputValidator value)
    // Offset: 0x14BA314
    void set_inputValidator(::TMPro::TMP_InputValidator* value);
    // public System.Boolean get_readOnly()
    // Offset: 0x14BA3B8
    bool get_readOnly();
    // public System.Void set_readOnly(System.Boolean value)
    // Offset: 0x14BA3C0
    void set_readOnly(bool value);
    // public System.Boolean get_richText()
    // Offset: 0x14BA3CC
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0x14BA3D4
    void set_richText(bool value);
    // public System.Boolean get_multiLine()
    // Offset: 0x14BA478
    bool get_multiLine();
    // public System.Char get_asteriskChar()
    // Offset: 0x14BA48C
    ::Il2CppChar get_asteriskChar();
    // public System.Void set_asteriskChar(System.Char value)
    // Offset: 0x14BA494
    void set_asteriskChar(::Il2CppChar value);
    // public System.Boolean get_wasCanceled()
    // Offset: 0x14BA510
    bool get_wasCanceled();
    // protected System.Int32 get_caretPositionInternal()
    // Offset: 0x14BA598
    int get_caretPositionInternal();
    // protected System.Void set_caretPositionInternal(System.Int32 value)
    // Offset: 0x14BA5C8
    void set_caretPositionInternal(int value);
    // protected System.Int32 get_stringPositionInternal()
    // Offset: 0x14BA5D8
    int get_stringPositionInternal();
    // protected System.Void set_stringPositionInternal(System.Int32 value)
    // Offset: 0x14BA608
    void set_stringPositionInternal(int value);
    // protected System.Int32 get_caretSelectPositionInternal()
    // Offset: 0x14BA640
    int get_caretSelectPositionInternal();
    // protected System.Void set_caretSelectPositionInternal(System.Int32 value)
    // Offset: 0x14BA670
    void set_caretSelectPositionInternal(int value);
    // protected System.Int32 get_stringSelectPositionInternal()
    // Offset: 0x14BA680
    int get_stringSelectPositionInternal();
    // protected System.Void set_stringSelectPositionInternal(System.Int32 value)
    // Offset: 0x14BA6B0
    void set_stringSelectPositionInternal(int value);
    // private System.Boolean get_hasSelection()
    // Offset: 0x14BA6E8
    bool get_hasSelection();
    // public System.Int32 get_caretPosition()
    // Offset: 0x14BA71C
    int get_caretPosition();
    // public System.Void set_caretPosition(System.Int32 value)
    // Offset: 0x14BA720
    void set_caretPosition(int value);
    // public System.Int32 get_selectionAnchorPosition()
    // Offset: 0x14BA7F0
    int get_selectionAnchorPosition();
    // public System.Void set_selectionAnchorPosition(System.Int32 value)
    // Offset: 0x14BA758
    void set_selectionAnchorPosition(int value);
    // public System.Int32 get_selectionFocusPosition()
    // Offset: 0x14BA7F4
    int get_selectionFocusPosition();
    // public System.Void set_selectionFocusPosition(System.Int32 value)
    // Offset: 0x14BA7A4
    void set_selectionFocusPosition(int value);
    // public System.Int32 get_stringPosition()
    // Offset: 0x14BA7F8
    int get_stringPosition();
    // public System.Void set_stringPosition(System.Int32 value)
    // Offset: 0x14BA7FC
    void set_stringPosition(int value);
    // public System.Int32 get_selectionStringAnchorPosition()
    // Offset: 0x14BA8FC
    int get_selectionStringAnchorPosition();
    // public System.Void set_selectionStringAnchorPosition(System.Int32 value)
    // Offset: 0x14BA834
    void set_selectionStringAnchorPosition(int value);
    // public System.Int32 get_selectionStringFocusPosition()
    // Offset: 0x14BA900
    int get_selectionStringFocusPosition();
    // public System.Void set_selectionStringFocusPosition(System.Int32 value)
    // Offset: 0x14BA898
    void set_selectionStringFocusPosition(int value);
    // static private System.String get_clipboard()
    // Offset: 0x14BC224
    static ::StringW get_clipboard();
    // static private System.Void set_clipboard(System.String value)
    // Offset: 0x14BC22C
    static void set_clipboard(::StringW value);
    // public System.Single get_minWidth()
    // Offset: 0x14C3568
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0x14C3570
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0x14C3624
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0x14C362C
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0x14C3634
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0x14C36D4
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x14C36DC
    int get_layoutPriority();
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x14C3760
    ::UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // protected System.Void .ctor()
    // Offset: 0x14B851C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_InputField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_InputField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_InputField*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x14C36E4
    static void _cctor();
    // private System.Boolean isKeyboardUsingEvents()
    // Offset: 0x14B8B48
    bool isKeyboardUsingEvents();
    // public System.Void SetTextWithoutNotify(System.String input)
    // Offset: 0x14B8CC4
    void SetTextWithoutNotify(::StringW input);
    // private System.Void SetText(System.String value, System.Boolean sendCallback)
    // Offset: 0x14B8B94
    void SetText(::StringW value, bool sendCallback);
    // protected System.Void ClampStringPos(ref System.Int32 pos)
    // Offset: 0x14BA518
    void ClampStringPos(ByRef<int> pos);
    // protected System.Void ClampCaretPos(ref System.Int32 pos)
    // Offset: 0x14BA550
    void ClampCaretPos(ByRef<int> pos);
    // private System.Void ON_TEXT_CHANGED(UnityEngine.Object obj)
    // Offset: 0x14BB9CC
    void ON_TEXT_CHANGED(::UnityEngine::Object* obj);
    // private System.Collections.IEnumerator CaretBlink()
    // Offset: 0x14BBB40
    ::System::Collections::IEnumerator* CaretBlink();
    // private System.Void SetCaretVisible()
    // Offset: 0x14BBBB0
    void SetCaretVisible();
    // private System.Void SetCaretActive()
    // Offset: 0x14B924C
    void SetCaretActive();
    // protected System.Void OnFocus()
    // Offset: 0x14BBBF0
    void OnFocus();
    // protected System.Void SelectAll()
    // Offset: 0x14BBC00
    void SelectAll();
    // public System.Void MoveTextEnd(System.Boolean shift)
    // Offset: 0x14BBC54
    void MoveTextEnd(bool shift);
    // public System.Void MoveTextStart(System.Boolean shift)
    // Offset: 0x14BBE08
    void MoveTextStart(bool shift);
    // public System.Void MoveToEndOfLine(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0x14BBF1C
    void MoveToEndOfLine(bool shift, bool ctrl);
    // public System.Void MoveToStartOfLine(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0x14BC098
    void MoveToStartOfLine(bool shift, bool ctrl);
    // private System.Boolean InPlaceEditing()
    // Offset: 0x14BC234
    bool InPlaceEditing();
    // private System.Void UpdateStringPositionFromKeyboard()
    // Offset: 0x14BC2F8
    void UpdateStringPositionFromKeyboard();
    // protected System.Void LateUpdate()
    // Offset: 0x14BC438
    void LateUpdate();
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BD65C
    bool MayDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BD778
    void OnBeginDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BD7A4
    void OnDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Collections.IEnumerator MouseDragOutsideRect(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BDA84
    ::System::Collections::IEnumerator* MouseDragOutsideRect(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BDB00
    void OnEndDrag(::UnityEngine::EventSystems::PointerEventData* eventData);
    // protected TMPro.TMP_InputField/TMPro.EditState KeyPressed(UnityEngine.Event evt)
    // Offset: 0x14BE2B0
    ::TMPro::TMP_InputField::EditState KeyPressed(::UnityEngine::Event* evt);
    // protected System.Boolean IsValidChar(System.Char c)
    // Offset: 0x14BF98C
    bool IsValidChar(::Il2CppChar c);
    // public System.Void ProcessEvent(UnityEngine.Event e)
    // Offset: 0x14BF99C
    void ProcessEvent(::UnityEngine::Event* e);
    // public System.Void OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14BF9A0
    void OnUpdateSelected(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnScroll(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BFB44
    void OnScroll(::UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.String GetSelectedString()
    // Offset: 0x14BEC4C
    ::StringW GetSelectedString();
    // private System.Int32 FindNextWordBegin()
    // Offset: 0x14BFCBC
    int FindNextWordBegin();
    // private System.Void MoveRight(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0x14BF5A4
    void MoveRight(bool shift, bool ctrl);
    // private System.Int32 FindPrevWordBegin()
    // Offset: 0x14BFD90
    int FindPrevWordBegin();
    // private System.Void MoveLeft(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0x14BF1E8
    void MoveLeft(bool shift, bool ctrl);
    // private System.Int32 LineUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0x14BFE48
    int LineUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 LineDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0x14C005C
    int LineDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Int32 PageUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0x14C026C
    int PageUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 PageDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0x14C051C
    int PageDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Void MoveDown(System.Boolean shift)
    // Offset: 0x14BF968
    void MoveDown(bool shift);
    // private System.Void MoveDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0x14C07CC
    void MoveDown(bool shift, bool goToLastChar);
    // private System.Void MoveUp(System.Boolean shift)
    // Offset: 0x14BF95C
    void MoveUp(bool shift);
    // private System.Void MoveUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0x14C09C4
    void MoveUp(bool shift, bool goToFirstChar);
    // private System.Void MovePageUp(System.Boolean shift)
    // Offset: 0x14BF974
    void MovePageUp(bool shift);
    // private System.Void MovePageUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0x14C0BA8
    void MovePageUp(bool shift, bool goToFirstChar);
    // private System.Void MovePageDown(System.Boolean shift)
    // Offset: 0x14BF980
    void MovePageDown(bool shift);
    // private System.Void MovePageDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0x14C0F14
    void MovePageDown(bool shift, bool goToLastChar);
    // private System.Void Delete()
    // Offset: 0x14BECFC
    void Delete();
    // private System.Void DeleteKey()
    // Offset: 0x14BEA54
    void DeleteKey();
    // private System.Void Backspace()
    // Offset: 0x14BE6F8
    void Backspace();
    // protected System.Void Append(System.String input)
    // Offset: 0x14C1294
    void Append(::StringW input);
    // protected System.Void Append(System.Char input)
    // Offset: 0x14C1348
    void Append(::Il2CppChar input);
    // private System.Void Insert(System.Char c)
    // Offset: 0x14C1448
    void Insert(::Il2CppChar c);
    // private System.Void UpdateTouchKeyboardFromEditChanges()
    // Offset: 0x14BF19C
    void UpdateTouchKeyboardFromEditChanges();
    // private System.Void SendOnValueChangedAndUpdateLabel()
    // Offset: 0x14BD638
    void SendOnValueChangedAndUpdateLabel();
    // private System.Void SendOnValueChanged()
    // Offset: 0x14B9154
    void SendOnValueChanged();
    // protected System.Void SendOnEndEdit()
    // Offset: 0x14C15B0
    void SendOnEndEdit();
    // protected System.Void SendOnSubmit()
    // Offset: 0x14BFAE0
    void SendOnSubmit();
    // protected System.Void SendOnFocus()
    // Offset: 0x14C1614
    void SendOnFocus();
    // protected System.Void SendOnFocusLost()
    // Offset: 0x14C1678
    void SendOnFocusLost();
    // protected System.Void SendOnTextSelection()
    // Offset: 0x14C16DC
    void SendOnTextSelection();
    // protected System.Void SendOnEndTextSelection()
    // Offset: 0x14C1778
    void SendOnEndTextSelection();
    // protected System.Void SendTouchScreenKeyboardStatusChanged()
    // Offset: 0x14BCF50
    void SendTouchScreenKeyboardStatusChanged();
    // protected System.Void UpdateLabel()
    // Offset: 0x14B8E3C
    void UpdateLabel();
    // private System.Void UpdateScrollbar()
    // Offset: 0x14BCDE4
    void UpdateScrollbar();
    // private System.Void OnScrollbarValueChange(System.Single value)
    // Offset: 0x14C180C
    void OnScrollbarValueChange(float value);
    // private System.Void AdjustTextPositionRelativeToViewport(System.Single relativePosition)
    // Offset: 0x14B8CCC
    void AdjustTextPositionRelativeToViewport(float relativePosition);
    // private System.Int32 GetCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0x14BBAC4
    int GetCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetMinCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0x14C1868
    int GetMinCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetMaxCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0x14C18E8
    int GetMaxCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetStringIndexFromCaretPosition(System.Int32 caretPosition)
    // Offset: 0x14BBD9C
    int GetStringIndexFromCaretPosition(int caretPosition);
    // public System.Void ForceLabelUpdate()
    // Offset: 0x14C1964
    void ForceLabelUpdate();
    // private System.Void MarkGeometryAsDirty()
    // Offset: 0x14B9330
    void MarkGeometryAsDirty();
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0x14C1968
    void Rebuild(::UnityEngine::UI::CanvasUpdate update);
    // public System.Void LayoutComplete()
    // Offset: 0x14C1A3C
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x14C1A40
    void GraphicUpdateComplete();
    // private System.Void UpdateGeometry()
    // Offset: 0x14C1978
    void UpdateGeometry();
    // private System.Void AssignPositioningIfNeeded()
    // Offset: 0x14BAEF8
    void AssignPositioningIfNeeded();
    // private System.Void OnFillVBO(UnityEngine.Mesh vbo)
    // Offset: 0x14C1A44
    void OnFillVBO(::UnityEngine::Mesh* vbo);
    // private System.Void GenerateCaret(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0x14C1D30
    void GenerateCaret(::UnityEngine::UI::VertexHelper* vbo, ::UnityEngine::Vector2 roundingOffset);
    // private System.Void CreateCursorVerts()
    // Offset: 0x14C2AC8
    void CreateCursorVerts();
    // private System.Void GenerateHightlight(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0x14C21D0
    void GenerateHightlight(::UnityEngine::UI::VertexHelper* vbo, ::UnityEngine::Vector2 roundingOffset);
    // private System.Void AdjustRectTransformRelativeToViewport(UnityEngine.Vector2 startPosition, System.Single height, System.Boolean isCharVisible)
    // Offset: 0x14C2C18
    void AdjustRectTransformRelativeToViewport(::UnityEngine::Vector2 startPosition, float height, bool isCharVisible);
    // protected System.Char Validate(System.String text, System.Int32 pos, System.Char ch)
    // Offset: 0x14BCFCC
    ::Il2CppChar Validate(::StringW text, int pos, ::Il2CppChar ch);
    // public System.Void ActivateInputField()
    // Offset: 0x14C3304
    void ActivateInputField();
    // private System.Void ActivateInputFieldInternal()
    // Offset: 0x14BCA04
    void ActivateInputFieldInternal();
    // public System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14C3468
    void OnPointerClick(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnControlClick()
    // Offset: 0x14C3488
    void OnControlClick();
    // public System.Void ReleaseSelection()
    // Offset: 0x14C348C
    void ReleaseSelection();
    // public System.Void DeactivateInputField(System.Boolean clearSelection)
    // Offset: 0x14BB834
    void DeactivateInputField(bool clearSelection);
    // public System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14C34D0
    void OnSubmit(::UnityEngine::EventSystems::BaseEventData* eventData);
    // private System.Void EnforceContentType()
    // Offset: 0x14B9EBC
    void EnforceContentType();
    // private System.Void SetTextComponentWrapMode()
    // Offset: 0x14B8790
    void SetTextComponentWrapMode();
    // private System.Void SetTextComponentRichTextMode()
    // Offset: 0x14BA3E0
    void SetTextComponentRichTextMode();
    // private System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/TMPro.ContentType[] allowedContentTypes)
    // Offset: 0x14BA040
    void SetToCustomIfContentTypeIsNot(::ArrayW<::TMPro::TMP_InputField::ContentType> allowedContentTypes);
    // private System.Void SetToCustom()
    // Offset: 0x14BA1CC
    void SetToCustom();
    // private System.Void SetToCustom(TMPro.TMP_InputField/TMPro.CharacterValidation characterValidation)
    // Offset: 0x14BA3A0
    void SetToCustom(::TMPro::TMP_InputField::CharacterValidation characterValidation);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x14C3560
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x14C3564
    void CalculateLayoutInputVertical();
    // public System.Void SetGlobalPointSize(System.Single pointSize)
    // Offset: 0x14B9C08
    void SetGlobalPointSize(float pointSize);
    // public System.Void SetGlobalFontAsset(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0x14B9CFC
    void SetGlobalFontAsset(::TMPro::TMP_FontAsset* fontAsset);
    // protected override System.Void OnEnable()
    // Offset: 0x14BA904
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x14BB540
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14BDB28
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(::UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14C3438
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSelect(::UnityEngine::EventSystems::BaseEventData* eventData);
    // public override System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14C3494
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnDeselect(::UnityEngine::EventSystems::BaseEventData* eventData);
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState state, System.Boolean instant)
    // Offset: 0x14C3534
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/UnityEngine.UI.SelectionState state, System.Boolean instant)
    void DoStateTransition(::UnityEngine::UI::Selectable::SelectionState state, bool instant);
  }; // TMPro.TMP_InputField
  #pragma pack(pop)
  static check_size<sizeof(TMP_InputField), 680 + sizeof(::UnityEngine::Event*)> __TMPro_TMP_InputFieldSizeCheck;
  static_assert(sizeof(TMP_InputField) == 0x2B0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_InputField::LineType, "TMPro", "TMP_InputField/LineType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_InputField::CharacterValidation, "TMPro", "TMP_InputField/CharacterValidation");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_InputField::InputType, "TMPro", "TMP_InputField/InputType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_InputField::ContentType, "TMPro", "TMP_InputField/ContentType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_inputSystem
// Il2CppName: get_inputSystem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::EventSystems::BaseInput* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_inputSystem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_inputSystem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_compositionString
// Il2CppName: get_compositionString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_compositionString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_compositionString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_mesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_shouldHideMobileInput
// Il2CppName: get_shouldHideMobileInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_shouldHideMobileInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_shouldHideMobileInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_shouldHideMobileInput
// Il2CppName: set_shouldHideMobileInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_shouldHideMobileInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_shouldHideMobileInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_shouldHideSoftKeyboard
// Il2CppName: get_shouldHideSoftKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_shouldHideSoftKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_shouldHideSoftKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_shouldHideSoftKeyboard
// Il2CppName: set_shouldHideSoftKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_shouldHideSoftKeyboard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_shouldHideSoftKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::StringW)>(&TMPro::TMP_InputField::set_text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_isFocused
// Il2CppName: get_isFocused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_isFocused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_isFocused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_caretBlinkRate
// Il2CppName: get_caretBlinkRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_caretBlinkRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_caretBlinkRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_caretBlinkRate
// Il2CppName: set_caretBlinkRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(float)>(&TMPro::TMP_InputField::set_caretBlinkRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_caretBlinkRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_caretWidth
// Il2CppName: get_caretWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_caretWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_caretWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_caretWidth
// Il2CppName: set_caretWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_caretWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_caretWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_textViewport
// Il2CppName: get_textViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_textViewport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_textViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_textViewport
// Il2CppName: set_textViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::RectTransform*)>(&TMPro::TMP_InputField::set_textViewport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_textViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_textComponent
// Il2CppName: get_textComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_Text* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_textComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_textComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_textComponent
// Il2CppName: set_textComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_Text*)>(&TMPro::TMP_InputField::set_textComponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_textComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_placeholder
// Il2CppName: get_placeholder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Graphic* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_placeholder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_placeholder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_placeholder
// Il2CppName: set_placeholder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::UI::Graphic*)>(&TMPro::TMP_InputField::set_placeholder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Graphic")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_placeholder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_verticalScrollbar
// Il2CppName: get_verticalScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::Scrollbar* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_verticalScrollbar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_verticalScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_verticalScrollbar
// Il2CppName: set_verticalScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::UI::Scrollbar*)>(&TMPro::TMP_InputField::set_verticalScrollbar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Scrollbar")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_verticalScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_scrollSensitivity
// Il2CppName: get_scrollSensitivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_scrollSensitivity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_scrollSensitivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_scrollSensitivity
// Il2CppName: set_scrollSensitivity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(float)>(&TMPro::TMP_InputField::set_scrollSensitivity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_scrollSensitivity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_caretColor
// Il2CppName: get_caretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_caretColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_caretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_caretColor
// Il2CppName: set_caretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::Color)>(&TMPro::TMP_InputField::set_caretColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_caretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_customCaretColor
// Il2CppName: get_customCaretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_customCaretColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_customCaretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_customCaretColor
// Il2CppName: set_customCaretColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_customCaretColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_customCaretColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_selectionColor
// Il2CppName: get_selectionColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_selectionColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_selectionColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_selectionColor
// Il2CppName: set_selectionColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::Color)>(&TMPro::TMP_InputField::set_selectionColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_selectionColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onEndEdit
// Il2CppName: get_onEndEdit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::SubmitEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onEndEdit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onEndEdit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onEndEdit
// Il2CppName: set_onEndEdit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::SubmitEvent*)>(&TMPro::TMP_InputField::set_onEndEdit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/SubmitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onEndEdit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onSubmit
// Il2CppName: get_onSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::SubmitEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onSubmit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onSubmit
// Il2CppName: set_onSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::SubmitEvent*)>(&TMPro::TMP_InputField::set_onSubmit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/SubmitEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onSelect
// Il2CppName: get_onSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::SelectionEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onSelect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onSelect
// Il2CppName: set_onSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::SelectionEvent*)>(&TMPro::TMP_InputField::set_onSelect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/SelectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onDeselect
// Il2CppName: get_onDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::SelectionEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onDeselect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onDeselect
// Il2CppName: set_onDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::SelectionEvent*)>(&TMPro::TMP_InputField::set_onDeselect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/SelectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onTextSelection
// Il2CppName: get_onTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::TextSelectionEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onTextSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onTextSelection
// Il2CppName: set_onTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::TextSelectionEvent*)>(&TMPro::TMP_InputField::set_onTextSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/TextSelectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onEndTextSelection
// Il2CppName: get_onEndTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::TextSelectionEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onEndTextSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onEndTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onEndTextSelection
// Il2CppName: set_onEndTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::TextSelectionEvent*)>(&TMPro::TMP_InputField::set_onEndTextSelection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/TextSelectionEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onEndTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onValueChanged
// Il2CppName: get_onValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::OnChangeEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onValueChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onValueChanged
// Il2CppName: set_onValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::OnChangeEvent*)>(&TMPro::TMP_InputField::set_onValueChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/OnChangeEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onTouchScreenKeyboardStatusChanged
// Il2CppName: get_onTouchScreenKeyboardStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::TouchScreenKeyboardEvent* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onTouchScreenKeyboardStatusChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onTouchScreenKeyboardStatusChanged
// Il2CppName: set_onTouchScreenKeyboardStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::TouchScreenKeyboardEvent*)>(&TMPro::TMP_InputField::set_onTouchScreenKeyboardStatusChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/TouchScreenKeyboardEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onValidateInput
// Il2CppName: get_onValidateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::OnValidateInput* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onValidateInput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onValidateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onValidateInput
// Il2CppName: set_onValidateInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::OnValidateInput*)>(&TMPro::TMP_InputField::set_onValidateInput)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/OnValidateInput")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onValidateInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_characterLimit
// Il2CppName: get_characterLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_characterLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_characterLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_characterLimit
// Il2CppName: set_characterLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_characterLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_characterLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_pointSize
// Il2CppName: get_pointSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_pointSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_pointSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_pointSize
// Il2CppName: set_pointSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(float)>(&TMPro::TMP_InputField::set_pointSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_pointSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_fontAsset
// Il2CppName: get_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_FontAsset* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_fontAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_fontAsset
// Il2CppName: set_fontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_InputField::set_fontAsset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_fontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_onFocusSelectAll
// Il2CppName: get_onFocusSelectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_onFocusSelectAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_onFocusSelectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_onFocusSelectAll
// Il2CppName: set_onFocusSelectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_onFocusSelectAll)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_onFocusSelectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_resetOnDeActivation
// Il2CppName: get_resetOnDeActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_resetOnDeActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_resetOnDeActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_resetOnDeActivation
// Il2CppName: set_resetOnDeActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_resetOnDeActivation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_resetOnDeActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_restoreOriginalTextOnEscape
// Il2CppName: get_restoreOriginalTextOnEscape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_restoreOriginalTextOnEscape)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_restoreOriginalTextOnEscape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_restoreOriginalTextOnEscape
// Il2CppName: set_restoreOriginalTextOnEscape
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_restoreOriginalTextOnEscape)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_restoreOriginalTextOnEscape", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_isRichTextEditingAllowed
// Il2CppName: get_isRichTextEditingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_isRichTextEditingAllowed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_isRichTextEditingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_isRichTextEditingAllowed
// Il2CppName: set_isRichTextEditingAllowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_isRichTextEditingAllowed)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_isRichTextEditingAllowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_contentType
// Il2CppName: get_contentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::ContentType (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_contentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_contentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_contentType
// Il2CppName: set_contentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::ContentType)>(&TMPro::TMP_InputField::set_contentType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/ContentType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_contentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_lineType
// Il2CppName: get_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::LineType (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_lineType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_lineType
// Il2CppName: set_lineType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::LineType)>(&TMPro::TMP_InputField::set_lineType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/LineType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_lineType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_lineLimit
// Il2CppName: get_lineLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_lineLimit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_lineLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_lineLimit
// Il2CppName: set_lineLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_lineLimit)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_lineLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_inputType
// Il2CppName: get_inputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::InputType (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_inputType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_inputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_inputType
// Il2CppName: set_inputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::InputType)>(&TMPro::TMP_InputField::set_inputType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/InputType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_inputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_keyboardType
// Il2CppName: get_keyboardType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TouchScreenKeyboardType (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_keyboardType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_keyboardType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_keyboardType
// Il2CppName: set_keyboardType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::TouchScreenKeyboardType)>(&TMPro::TMP_InputField::set_keyboardType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "TouchScreenKeyboardType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_keyboardType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_characterValidation
// Il2CppName: get_characterValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::CharacterValidation (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_characterValidation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_characterValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_characterValidation
// Il2CppName: set_characterValidation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::CharacterValidation)>(&TMPro::TMP_InputField::set_characterValidation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/CharacterValidation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_characterValidation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_inputValidator
// Il2CppName: get_inputValidator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputValidator* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_inputValidator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_inputValidator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_inputValidator
// Il2CppName: set_inputValidator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputValidator*)>(&TMPro::TMP_InputField::set_inputValidator)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputValidator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_inputValidator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_readOnly
// Il2CppName: get_readOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_readOnly)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_readOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_readOnly
// Il2CppName: set_readOnly
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_readOnly)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_readOnly", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_richText
// Il2CppName: get_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_richText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_richText
// Il2CppName: set_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::set_richText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_multiLine
// Il2CppName: get_multiLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_multiLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_multiLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_asteriskChar
// Il2CppName: get_asteriskChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_asteriskChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_asteriskChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_asteriskChar
// Il2CppName: set_asteriskChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::Il2CppChar)>(&TMPro::TMP_InputField::set_asteriskChar)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_asteriskChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_wasCanceled
// Il2CppName: get_wasCanceled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_wasCanceled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_wasCanceled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_caretPositionInternal
// Il2CppName: get_caretPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_caretPositionInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_caretPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_caretPositionInternal
// Il2CppName: set_caretPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_caretPositionInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_caretPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_stringPositionInternal
// Il2CppName: get_stringPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_stringPositionInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_stringPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_stringPositionInternal
// Il2CppName: set_stringPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_stringPositionInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_stringPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_caretSelectPositionInternal
// Il2CppName: get_caretSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_caretSelectPositionInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_caretSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_caretSelectPositionInternal
// Il2CppName: set_caretSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_caretSelectPositionInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_caretSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_stringSelectPositionInternal
// Il2CppName: get_stringSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_stringSelectPositionInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_stringSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_stringSelectPositionInternal
// Il2CppName: set_stringSelectPositionInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_stringSelectPositionInternal)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_stringSelectPositionInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_hasSelection
// Il2CppName: get_hasSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_hasSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_hasSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_caretPosition
// Il2CppName: get_caretPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_caretPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_caretPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_caretPosition
// Il2CppName: set_caretPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_caretPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_caretPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_selectionAnchorPosition
// Il2CppName: get_selectionAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_selectionAnchorPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_selectionAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_selectionAnchorPosition
// Il2CppName: set_selectionAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_selectionAnchorPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_selectionAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_selectionFocusPosition
// Il2CppName: get_selectionFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_selectionFocusPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_selectionFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_selectionFocusPosition
// Il2CppName: set_selectionFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_selectionFocusPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_selectionFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_stringPosition
// Il2CppName: get_stringPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_stringPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_stringPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_stringPosition
// Il2CppName: set_stringPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_stringPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_stringPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_selectionStringAnchorPosition
// Il2CppName: get_selectionStringAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_selectionStringAnchorPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_selectionStringAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_selectionStringAnchorPosition
// Il2CppName: set_selectionStringAnchorPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_selectionStringAnchorPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_selectionStringAnchorPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_selectionStringFocusPosition
// Il2CppName: get_selectionStringFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_selectionStringFocusPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_selectionStringFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_selectionStringFocusPosition
// Il2CppName: set_selectionStringFocusPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::set_selectionStringFocusPosition)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_selectionStringFocusPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_clipboard
// Il2CppName: get_clipboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&TMPro::TMP_InputField::get_clipboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_clipboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::set_clipboard
// Il2CppName: set_clipboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&TMPro::TMP_InputField::set_clipboard)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "set_clipboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_minWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_preferredWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_flexibleWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_minHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_preferredHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_flexibleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::get_layoutPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::UnityEngine_UI_ICanvasElement_get_transform
// Il2CppName: UnityEngine.UI.ICanvasElement.get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::UnityEngine_UI_ICanvasElement_get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "UnityEngine.UI.ICanvasElement.get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: TMPro::TMP_InputField::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro::TMP_InputField::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::isKeyboardUsingEvents
// Il2CppName: isKeyboardUsingEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::isKeyboardUsingEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "isKeyboardUsingEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetTextWithoutNotify
// Il2CppName: SetTextWithoutNotify
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::StringW)>(&TMPro::TMP_InputField::SetTextWithoutNotify)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetTextWithoutNotify", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::StringW, bool)>(&TMPro::TMP_InputField::SetText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sendCallback = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, sendCallback});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ClampStringPos
// Il2CppName: ClampStringPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(ByRef<int>)>(&TMPro::TMP_InputField::ClampStringPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ClampStringPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ClampCaretPos
// Il2CppName: ClampCaretPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(ByRef<int>)>(&TMPro::TMP_InputField::ClampCaretPos)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ClampCaretPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ON_TEXT_CHANGED
// Il2CppName: ON_TEXT_CHANGED
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::Object*)>(&TMPro::TMP_InputField::ON_TEXT_CHANGED)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ON_TEXT_CHANGED", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::CaretBlink
// Il2CppName: CaretBlink
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::CaretBlink)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "CaretBlink", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetCaretVisible
// Il2CppName: SetCaretVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SetCaretVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetCaretVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetCaretActive
// Il2CppName: SetCaretActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SetCaretActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetCaretActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnFocus
// Il2CppName: OnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::OnFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SelectAll
// Il2CppName: SelectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SelectAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SelectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveTextEnd
// Il2CppName: MoveTextEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::MoveTextEnd)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveTextEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveTextStart
// Il2CppName: MoveTextStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::MoveTextStart)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveTextStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveToEndOfLine
// Il2CppName: MoveToEndOfLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MoveToEndOfLine)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ctrl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveToEndOfLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, ctrl});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveToStartOfLine
// Il2CppName: MoveToStartOfLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MoveToStartOfLine)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ctrl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveToStartOfLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, ctrl});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::InPlaceEditing
// Il2CppName: InPlaceEditing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::InPlaceEditing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "InPlaceEditing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::UpdateStringPositionFromKeyboard
// Il2CppName: UpdateStringPositionFromKeyboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::UpdateStringPositionFromKeyboard)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "UpdateStringPositionFromKeyboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MayDrag
// Il2CppName: MayDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::MayDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MayDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnBeginDrag
// Il2CppName: OnBeginDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::OnBeginDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnBeginDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnDrag
// Il2CppName: OnDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::OnDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MouseDragOutsideRect
// Il2CppName: MouseDragOutsideRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::MouseDragOutsideRect)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MouseDragOutsideRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnEndDrag
// Il2CppName: OnEndDrag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::OnEndDrag)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnEndDrag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::KeyPressed
// Il2CppName: KeyPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_InputField::EditState (TMPro::TMP_InputField::*)(::UnityEngine::Event*)>(&TMPro::TMP_InputField::KeyPressed)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("UnityEngine", "Event")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "KeyPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::IsValidChar
// Il2CppName: IsValidChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_InputField::*)(::Il2CppChar)>(&TMPro::TMP_InputField::IsValidChar)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "IsValidChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ProcessEvent
// Il2CppName: ProcessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::Event*)>(&TMPro::TMP_InputField::ProcessEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("UnityEngine", "Event")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ProcessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnUpdateSelected
// Il2CppName: OnUpdateSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::BaseEventData*)>(&TMPro::TMP_InputField::OnUpdateSelected)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnUpdateSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnScroll
// Il2CppName: OnScroll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::OnScroll)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnScroll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GetSelectedString
// Il2CppName: GetSelectedString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::GetSelectedString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GetSelectedString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::FindNextWordBegin
// Il2CppName: FindNextWordBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::FindNextWordBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "FindNextWordBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveRight
// Il2CppName: MoveRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MoveRight)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ctrl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, ctrl});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::FindPrevWordBegin
// Il2CppName: FindPrevWordBegin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::FindPrevWordBegin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "FindPrevWordBegin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveLeft
// Il2CppName: MoveLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MoveLeft)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* ctrl = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, ctrl});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::LineUpCharacterPosition
// Il2CppName: LineUpCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int, bool)>(&TMPro::TMP_InputField::LineUpCharacterPosition)> {
  static const MethodInfo* get() {
    static auto* originalPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* goToFirstChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "LineUpCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalPos, goToFirstChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::LineDownCharacterPosition
// Il2CppName: LineDownCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int, bool)>(&TMPro::TMP_InputField::LineDownCharacterPosition)> {
  static const MethodInfo* get() {
    static auto* originalPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* goToLastChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "LineDownCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalPos, goToLastChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::PageUpCharacterPosition
// Il2CppName: PageUpCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int, bool)>(&TMPro::TMP_InputField::PageUpCharacterPosition)> {
  static const MethodInfo* get() {
    static auto* originalPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* goToFirstChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "PageUpCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalPos, goToFirstChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::PageDownCharacterPosition
// Il2CppName: PageDownCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int, bool)>(&TMPro::TMP_InputField::PageDownCharacterPosition)> {
  static const MethodInfo* get() {
    static auto* originalPos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* goToLastChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "PageDownCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originalPos, goToLastChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveDown
// Il2CppName: MoveDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::MoveDown)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveDown
// Il2CppName: MoveDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MoveDown)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* goToLastChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, goToLastChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveUp
// Il2CppName: MoveUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::MoveUp)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MoveUp
// Il2CppName: MoveUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MoveUp)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* goToFirstChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MoveUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, goToFirstChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MovePageUp
// Il2CppName: MovePageUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::MovePageUp)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MovePageUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MovePageUp
// Il2CppName: MovePageUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MovePageUp)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* goToFirstChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MovePageUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, goToFirstChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MovePageDown
// Il2CppName: MovePageDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::MovePageDown)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MovePageDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MovePageDown
// Il2CppName: MovePageDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool, bool)>(&TMPro::TMP_InputField::MovePageDown)> {
  static const MethodInfo* get() {
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* goToLastChar = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MovePageDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shift, goToLastChar});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Delete
// Il2CppName: Delete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::Delete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Delete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::DeleteKey
// Il2CppName: DeleteKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::DeleteKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "DeleteKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Backspace
// Il2CppName: Backspace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::Backspace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Backspace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::StringW)>(&TMPro::TMP_InputField::Append)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Append
// Il2CppName: Append
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::Il2CppChar)>(&TMPro::TMP_InputField::Append)> {
  static const MethodInfo* get() {
    static auto* input = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Append", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{input});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::Il2CppChar)>(&TMPro::TMP_InputField::Insert)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::UpdateTouchKeyboardFromEditChanges
// Il2CppName: UpdateTouchKeyboardFromEditChanges
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::UpdateTouchKeyboardFromEditChanges)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "UpdateTouchKeyboardFromEditChanges", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnValueChangedAndUpdateLabel
// Il2CppName: SendOnValueChangedAndUpdateLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnValueChangedAndUpdateLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnValueChangedAndUpdateLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnValueChanged
// Il2CppName: SendOnValueChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnValueChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnValueChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnEndEdit
// Il2CppName: SendOnEndEdit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnEndEdit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnEndEdit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnSubmit
// Il2CppName: SendOnSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnSubmit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnFocus
// Il2CppName: SendOnFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnFocusLost
// Il2CppName: SendOnFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnFocusLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnTextSelection
// Il2CppName: SendOnTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnTextSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendOnEndTextSelection
// Il2CppName: SendOnEndTextSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendOnEndTextSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendOnEndTextSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SendTouchScreenKeyboardStatusChanged
// Il2CppName: SendTouchScreenKeyboardStatusChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SendTouchScreenKeyboardStatusChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SendTouchScreenKeyboardStatusChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::UpdateLabel
// Il2CppName: UpdateLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::UpdateLabel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "UpdateLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::UpdateScrollbar
// Il2CppName: UpdateScrollbar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::UpdateScrollbar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "UpdateScrollbar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnScrollbarValueChange
// Il2CppName: OnScrollbarValueChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(float)>(&TMPro::TMP_InputField::OnScrollbarValueChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnScrollbarValueChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::AdjustTextPositionRelativeToViewport
// Il2CppName: AdjustTextPositionRelativeToViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(float)>(&TMPro::TMP_InputField::AdjustTextPositionRelativeToViewport)> {
  static const MethodInfo* get() {
    static auto* relativePosition = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "AdjustTextPositionRelativeToViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativePosition});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GetCaretPositionFromStringIndex
// Il2CppName: GetCaretPositionFromStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::GetCaretPositionFromStringIndex)> {
  static const MethodInfo* get() {
    static auto* stringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GetCaretPositionFromStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GetMinCaretPositionFromStringIndex
// Il2CppName: GetMinCaretPositionFromStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::GetMinCaretPositionFromStringIndex)> {
  static const MethodInfo* get() {
    static auto* stringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GetMinCaretPositionFromStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GetMaxCaretPositionFromStringIndex
// Il2CppName: GetMaxCaretPositionFromStringIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::GetMaxCaretPositionFromStringIndex)> {
  static const MethodInfo* get() {
    static auto* stringIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GetMaxCaretPositionFromStringIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GetStringIndexFromCaretPosition
// Il2CppName: GetStringIndexFromCaretPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_InputField::*)(int)>(&TMPro::TMP_InputField::GetStringIndexFromCaretPosition)> {
  static const MethodInfo* get() {
    static auto* caretPosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GetStringIndexFromCaretPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{caretPosition});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ForceLabelUpdate
// Il2CppName: ForceLabelUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::ForceLabelUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ForceLabelUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::MarkGeometryAsDirty
// Il2CppName: MarkGeometryAsDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::MarkGeometryAsDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "MarkGeometryAsDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Rebuild
// Il2CppName: Rebuild
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::UI::CanvasUpdate)>(&TMPro::TMP_InputField::Rebuild)> {
  static const MethodInfo* get() {
    static auto* update = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "CanvasUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Rebuild", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{update});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::LayoutComplete
// Il2CppName: LayoutComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::LayoutComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "LayoutComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GraphicUpdateComplete
// Il2CppName: GraphicUpdateComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::GraphicUpdateComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GraphicUpdateComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::UpdateGeometry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::AssignPositioningIfNeeded
// Il2CppName: AssignPositioningIfNeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::AssignPositioningIfNeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "AssignPositioningIfNeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnFillVBO
// Il2CppName: OnFillVBO
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::Mesh*)>(&TMPro::TMP_InputField::OnFillVBO)> {
  static const MethodInfo* get() {
    static auto* vbo = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnFillVBO", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vbo});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GenerateCaret
// Il2CppName: GenerateCaret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2)>(&TMPro::TMP_InputField::GenerateCaret)> {
  static const MethodInfo* get() {
    static auto* vbo = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* roundingOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GenerateCaret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vbo, roundingOffset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::CreateCursorVerts
// Il2CppName: CreateCursorVerts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::CreateCursorVerts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "CreateCursorVerts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::GenerateHightlight
// Il2CppName: GenerateHightlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::UI::VertexHelper*, ::UnityEngine::Vector2)>(&TMPro::TMP_InputField::GenerateHightlight)> {
  static const MethodInfo* get() {
    static auto* vbo = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "VertexHelper")->byval_arg;
    static auto* roundingOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "GenerateHightlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vbo, roundingOffset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::AdjustRectTransformRelativeToViewport
// Il2CppName: AdjustRectTransformRelativeToViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::Vector2, float, bool)>(&TMPro::TMP_InputField::AdjustRectTransformRelativeToViewport)> {
  static const MethodInfo* get() {
    static auto* startPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isCharVisible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "AdjustRectTransformRelativeToViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPosition, height, isCharVisible});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::Validate
// Il2CppName: Validate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (TMPro::TMP_InputField::*)(::StringW, int, ::Il2CppChar)>(&TMPro::TMP_InputField::Validate)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ch = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "Validate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, pos, ch});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ActivateInputField
// Il2CppName: ActivateInputField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::ActivateInputField)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ActivateInputField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ActivateInputFieldInternal
// Il2CppName: ActivateInputFieldInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::ActivateInputFieldInternal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ActivateInputFieldInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnPointerClick
// Il2CppName: OnPointerClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::OnPointerClick)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnPointerClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnControlClick
// Il2CppName: OnControlClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::OnControlClick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnControlClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::ReleaseSelection
// Il2CppName: ReleaseSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::ReleaseSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "ReleaseSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::DeactivateInputField
// Il2CppName: DeactivateInputField
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(bool)>(&TMPro::TMP_InputField::DeactivateInputField)> {
  static const MethodInfo* get() {
    static auto* clearSelection = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "DeactivateInputField", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clearSelection});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnSubmit
// Il2CppName: OnSubmit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::BaseEventData*)>(&TMPro::TMP_InputField::OnSubmit)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnSubmit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::EnforceContentType
// Il2CppName: EnforceContentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::EnforceContentType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "EnforceContentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetTextComponentWrapMode
// Il2CppName: SetTextComponentWrapMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SetTextComponentWrapMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetTextComponentWrapMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetTextComponentRichTextMode
// Il2CppName: SetTextComponentRichTextMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SetTextComponentRichTextMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetTextComponentRichTextMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetToCustomIfContentTypeIsNot
// Il2CppName: SetToCustomIfContentTypeIsNot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::ArrayW<::TMPro::TMP_InputField::ContentType>)>(&TMPro::TMP_InputField::SetToCustomIfContentTypeIsNot)> {
  static const MethodInfo* get() {
    static auto* allowedContentTypes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/ContentType"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetToCustomIfContentTypeIsNot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allowedContentTypes});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetToCustom
// Il2CppName: SetToCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::SetToCustom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetToCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetToCustom
// Il2CppName: SetToCustom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_InputField::CharacterValidation)>(&TMPro::TMP_InputField::SetToCustom)> {
  static const MethodInfo* get() {
    static auto* characterValidation = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_InputField/CharacterValidation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetToCustom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characterValidation});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::CalculateLayoutInputHorizontal
// Il2CppName: CalculateLayoutInputHorizontal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::CalculateLayoutInputHorizontal)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "CalculateLayoutInputHorizontal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::CalculateLayoutInputVertical
// Il2CppName: CalculateLayoutInputVertical
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::CalculateLayoutInputVertical)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "CalculateLayoutInputVertical", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetGlobalPointSize
// Il2CppName: SetGlobalPointSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(float)>(&TMPro::TMP_InputField::SetGlobalPointSize)> {
  static const MethodInfo* get() {
    static auto* pointSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetGlobalPointSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pointSize});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::SetGlobalFontAsset
// Il2CppName: SetGlobalFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_InputField::SetGlobalFontAsset)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "SetGlobalFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)()>(&TMPro::TMP_InputField::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnPointerDown
// Il2CppName: OnPointerDown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::PointerEventData*)>(&TMPro::TMP_InputField::OnPointerDown)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "PointerEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnPointerDown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnSelect
// Il2CppName: OnSelect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::BaseEventData*)>(&TMPro::TMP_InputField::OnSelect)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnSelect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::OnDeselect
// Il2CppName: OnDeselect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::EventSystems::BaseEventData*)>(&TMPro::TMP_InputField::OnDeselect)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("UnityEngine.EventSystems", "BaseEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "OnDeselect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_InputField::DoStateTransition
// Il2CppName: DoStateTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_InputField::*)(::UnityEngine::UI::Selectable::SelectionState, bool)>(&TMPro::TMP_InputField::DoStateTransition)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Selectable/SelectionState")->byval_arg;
    static auto* instant = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_InputField*), "DoStateTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, instant});
  }
};
