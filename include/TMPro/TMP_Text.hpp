// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: TMPro.MaterialReference
#include "TMPro/MaterialReference.hpp"
// Including type: TMPro.TMP_RichTextTagStack`1
#include "TMPro/TMP_RichTextTagStack_1.hpp"
// Including type: TMPro.ColorMode
#include "TMPro/ColorMode.hpp"
// Including type: TMPro.VertexGradient
#include "TMPro/VertexGradient.hpp"
// Including type: TMPro.FontWeight
#include "TMPro/FontWeight.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
// Including type: TMPro.TMP_FontStyleStack
#include "TMPro/TMP_FontStyleStack.hpp"
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
// Including type: TMPro.TextOverflowModes
#include "TMPro/TextOverflowModes.hpp"
// Including type: TMPro.TextureMappingOptions
#include "TMPro/TextureMappingOptions.hpp"
// Including type: TMPro.TextRenderFlags
#include "TMPro/TextRenderFlags.hpp"
// Including type: TMPro.VertexSortingOrder
#include "TMPro/VertexSortingOrder.hpp"
// Including type: TMPro.RichTextTagAttribute
#include "TMPro/RichTextTagAttribute.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: TMPro.TMP_CharacterInfo
#include "TMPro/TMP_CharacterInfo.hpp"
// Including type: TMPro.WordWrapState
#include "TMPro/WordWrapState.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Character
  class TMP_Character;
  // Forward declaring type: TMP_TextElement
  class TMP_TextElement;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_ColorGradient
  class TMP_ColorGradient;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
  // Forward declaring type: TMP_TextInfo
  class TMP_TextInfo;
  // Forward declaring type: TMP_SpriteAnimator
  class TMP_SpriteAnimator;
  // Forward declaring type: TMP_VertexDataUpdateFlags
  struct TMP_VertexDataUpdateFlags;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: LayoutElement
  class LayoutElement;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::TMPro::TMP_Text);
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_Text*, "TMPro", "TMP_Text");
// Type namespace: TMPro
namespace TMPro {
  // WARNING Size may be invalid!
  // Autogenerated type: TMPro.TMP_Text
  // [TokenAttribute] Offset: FFFFFFFF
  class TMP_Text : public ::UnityEngine::UI::MaskableGraphic {
    public:
    // Nested type: ::TMPro::TMP_Text::TextInputSources
    struct TextInputSources;
    // Nested type: ::TMPro::TMP_Text::UnicodeChar
    struct UnicodeChar;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_Text/TMPro.TextInputSources
    // [TokenAttribute] Offset: FFFFFFFF
    struct TextInputSources/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TextInputSources
      constexpr TextInputSources(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_Text/TMPro.TextInputSources Text
      static constexpr const int Text = 0;
      // Get static field: static public TMPro.TMP_Text/TMPro.TextInputSources Text
      static ::TMPro::TMP_Text::TextInputSources _get_Text();
      // Set static field: static public TMPro.TMP_Text/TMPro.TextInputSources Text
      static void _set_Text(::TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TMPro.TextInputSources SetText
      static constexpr const int SetText = 1;
      // Get static field: static public TMPro.TMP_Text/TMPro.TextInputSources SetText
      static ::TMPro::TMP_Text::TextInputSources _get_SetText();
      // Set static field: static public TMPro.TMP_Text/TMPro.TextInputSources SetText
      static void _set_SetText(::TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TMPro.TextInputSources SetCharArray
      static constexpr const int SetCharArray = 2;
      // Get static field: static public TMPro.TMP_Text/TMPro.TextInputSources SetCharArray
      static ::TMPro::TMP_Text::TextInputSources _get_SetCharArray();
      // Set static field: static public TMPro.TMP_Text/TMPro.TextInputSources SetCharArray
      static void _set_SetCharArray(::TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TMPro.TextInputSources String
      static constexpr const int String = 3;
      // Get static field: static public TMPro.TMP_Text/TMPro.TextInputSources String
      static ::TMPro::TMP_Text::TextInputSources _get_String();
      // Set static field: static public TMPro.TMP_Text/TMPro.TextInputSources String
      static void _set_String(::TMPro::TMP_Text::TextInputSources value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // TMPro.TMP_Text/TMPro.TextInputSources
    #pragma pack(pop)
    static check_size<sizeof(TMP_Text::TextInputSources), 0 + sizeof(int)> __TMPro_TMP_Text_TextInputSourcesSizeCheck;
    static_assert(sizeof(TMP_Text::TextInputSources) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: TMPro.TMP_Text/TMPro.UnicodeChar
    // [TokenAttribute] Offset: FFFFFFFF
    struct UnicodeChar/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int32 unicode
      // Size: 0x4
      // Offset: 0x0
      int unicode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 stringIndex
      // Size: 0x4
      // Offset: 0x4
      int stringIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 length
      // Size: 0x4
      // Offset: 0x8
      int length;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: UnicodeChar
      constexpr UnicodeChar(int unicode_ = {}, int stringIndex_ = {}, int length_ = {}) noexcept : unicode{unicode_}, stringIndex{stringIndex_}, length{length_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int32 unicode
      [[deprecated("Use field access instead!")]] int& dyn_unicode();
      // Get instance field reference: public System.Int32 stringIndex
      [[deprecated("Use field access instead!")]] int& dyn_stringIndex();
      // Get instance field reference: public System.Int32 length
      [[deprecated("Use field access instead!")]] int& dyn_length();
    }; // TMPro.TMP_Text/TMPro.UnicodeChar
    #pragma pack(pop)
    static check_size<sizeof(TMP_Text::UnicodeChar), 8 + sizeof(int)> __TMPro_TMP_Text_UnicodeCharSizeCheck;
    static_assert(sizeof(TMP_Text::UnicodeChar) == 0xC);
    public:
    // [TextAreaAttribute] Offset: 0x109B5E8
    // protected System.String m_text
    // Size: 0x8
    // Offset: 0xC0
    ::StringW m_text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected System.Boolean m_isRightToLeft
    // Size: 0x1
    // Offset: 0xC8
    bool m_isRightToLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_FontAsset m_fontAsset
    // Size: 0x8
    // Offset: 0xD0
    ::TMPro::TMP_FontAsset* m_fontAsset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_FontAsset*) == 0x8);
    // protected TMPro.TMP_FontAsset m_currentFontAsset
    // Size: 0x8
    // Offset: 0xD8
    ::TMPro::TMP_FontAsset* m_currentFontAsset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_FontAsset*) == 0x8);
    // protected System.Boolean m_isSDFShader
    // Size: 0x1
    // Offset: 0xE0
    bool m_isSDFShader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Material m_sharedMaterial
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Material* m_sharedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected UnityEngine.Material m_currentMaterial
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::Material* m_currentMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected TMPro.MaterialReference[] m_materialReferences
    // Size: 0x8
    // Offset: 0xF8
    ::ArrayW<::TMPro::MaterialReference> m_materialReferences;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::MaterialReference>) == 0x8);
    // protected System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_materialReferenceIndexLookup
    // Size: 0x8
    // Offset: 0x100
    ::System::Collections::Generic::Dictionary_2<int, int>* m_materialReferenceIndexLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> m_materialReferenceStack
    // Size: 0xFFFFFFFF
    // Offset: 0x108
    ::TMPro::TMP_RichTextTagStack_1<::TMPro::MaterialReference> m_materialReferenceStack;
    // protected System.Int32 m_currentMaterialIndex
    // Size: 0x4
    // Offset: 0x150
    int m_currentMaterialIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.Material[] m_fontSharedMaterials
    // Size: 0x8
    // Offset: 0x158
    ::ArrayW<::UnityEngine::Material*> m_fontSharedMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // protected UnityEngine.Material m_fontMaterial
    // Size: 0x8
    // Offset: 0x160
    ::UnityEngine::Material* m_fontMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // protected UnityEngine.Material[] m_fontMaterials
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::UnityEngine::Material*> m_fontMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // protected System.Boolean m_isMaterialDirty
    // Size: 0x1
    // Offset: 0x170
    bool m_isMaterialDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Color32 m_fontColor32
    // Size: 0x4
    // Offset: 0x174
    ::UnityEngine::Color32 m_fontColor32;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color m_fontColor
    // Size: 0x10
    // Offset: 0x178
    ::UnityEngine::Color m_fontColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // protected UnityEngine.Color32 m_underlineColor
    // Size: 0x4
    // Offset: 0x188
    ::UnityEngine::Color32 m_underlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color32 m_strikethroughColor
    // Size: 0x4
    // Offset: 0x18C
    ::UnityEngine::Color32 m_strikethroughColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color32 m_highlightColor
    // Size: 0x4
    // Offset: 0x190
    ::UnityEngine::Color32 m_highlightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Vector4 m_highlightPadding
    // Size: 0x10
    // Offset: 0x194
    ::UnityEngine::Vector4 m_highlightPadding;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // protected System.Boolean m_enableVertexGradient
    // Size: 0x1
    // Offset: 0x1A4
    bool m_enableVertexGradient;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.ColorMode m_colorMode
    // Size: 0x4
    // Offset: 0x1A8
    ::TMPro::ColorMode m_colorMode;
    // Field size check
    static_assert(sizeof(::TMPro::ColorMode) == 0x4);
    // protected TMPro.VertexGradient m_fontColorGradient
    // Size: 0x40
    // Offset: 0x1AC
    ::TMPro::VertexGradient m_fontColorGradient;
    // Field size check
    static_assert(sizeof(::TMPro::VertexGradient) == 0x40);
    // protected TMPro.TMP_ColorGradient m_fontColorGradientPreset
    // Size: 0x8
    // Offset: 0x1F0
    ::TMPro::TMP_ColorGradient* m_fontColorGradientPreset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_ColorGradient*) == 0x8);
    // protected TMPro.TMP_SpriteAsset m_spriteAsset
    // Size: 0x8
    // Offset: 0x1F8
    ::TMPro::TMP_SpriteAsset* m_spriteAsset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_SpriteAsset*) == 0x8);
    // protected System.Boolean m_tintAllSprites
    // Size: 0x1
    // Offset: 0x200
    bool m_tintAllSprites;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_tintSprite
    // Size: 0x1
    // Offset: 0x201
    bool m_tintSprite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Color32 m_spriteColor
    // Size: 0x4
    // Offset: 0x204
    ::UnityEngine::Color32 m_spriteColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected System.Boolean m_overrideHtmlColors
    // Size: 0x1
    // Offset: 0x208
    bool m_overrideHtmlColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Color32 m_faceColor
    // Size: 0x4
    // Offset: 0x20C
    ::UnityEngine::Color32 m_faceColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color32 m_outlineColor
    // Size: 0x4
    // Offset: 0x210
    ::UnityEngine::Color32 m_outlineColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected System.Single m_outlineWidth
    // Size: 0x4
    // Offset: 0x214
    float m_outlineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSize
    // Size: 0x4
    // Offset: 0x218
    float m_fontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_currentFontSize
    // Size: 0x4
    // Offset: 0x21C
    float m_currentFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSizeBase
    // Size: 0x4
    // Offset: 0x220
    float m_fontSizeBase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_sizeStack
    // Size: 0xFFFFFFFF
    // Offset: 0x228
    ::TMPro::TMP_RichTextTagStack_1<float> m_sizeStack;
    // protected TMPro.FontWeight m_fontWeight
    // Size: 0x4
    // Offset: 0x240
    ::TMPro::FontWeight m_fontWeight;
    // Field size check
    static_assert(sizeof(::TMPro::FontWeight) == 0x4);
    // protected TMPro.FontWeight m_FontWeightInternal
    // Size: 0x4
    // Offset: 0x244
    ::TMPro::FontWeight m_FontWeightInternal;
    // Field size check
    static_assert(sizeof(::TMPro::FontWeight) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> m_FontWeightStack
    // Size: 0xFFFFFFFF
    // Offset: 0x248
    ::TMPro::TMP_RichTextTagStack_1<::TMPro::FontWeight> m_FontWeightStack;
    // protected System.Boolean m_enableAutoSizing
    // Size: 0x1
    // Offset: 0x260
    bool m_enableAutoSizing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_maxFontSize
    // Size: 0x4
    // Offset: 0x264
    float m_maxFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_minFontSize
    // Size: 0x4
    // Offset: 0x268
    float m_minFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSizeMin
    // Size: 0x4
    // Offset: 0x26C
    float m_fontSizeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSizeMax
    // Size: 0x4
    // Offset: 0x270
    float m_fontSizeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.FontStyles m_fontStyle
    // Size: 0x4
    // Offset: 0x274
    ::TMPro::FontStyles m_fontStyle;
    // Field size check
    static_assert(sizeof(::TMPro::FontStyles) == 0x4);
    // protected TMPro.FontStyles m_FontStyleInternal
    // Size: 0x4
    // Offset: 0x278
    ::TMPro::FontStyles m_FontStyleInternal;
    // Field size check
    static_assert(sizeof(::TMPro::FontStyles) == 0x4);
    // protected TMPro.TMP_FontStyleStack m_fontStyleStack
    // Size: 0xA
    // Offset: 0x27C
    ::TMPro::TMP_FontStyleStack m_fontStyleStack;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_FontStyleStack) == 0xA);
    // protected System.Boolean m_isUsingBold
    // Size: 0x1
    // Offset: 0x286
    bool m_isUsingBold;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [FormerlySerializedAsAttribute] Offset: 0x109B7A8
    // protected TMPro.TextAlignmentOptions m_textAlignment
    // Size: 0x4
    // Offset: 0x288
    ::TMPro::TextAlignmentOptions m_textAlignment;
    // Field size check
    static_assert(sizeof(::TMPro::TextAlignmentOptions) == 0x4);
    // protected TMPro.TextAlignmentOptions m_lineJustification
    // Size: 0x4
    // Offset: 0x28C
    ::TMPro::TextAlignmentOptions m_lineJustification;
    // Field size check
    static_assert(sizeof(::TMPro::TextAlignmentOptions) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> m_lineJustificationStack
    // Size: 0xFFFFFFFF
    // Offset: 0x290
    ::TMPro::TMP_RichTextTagStack_1<::TMPro::TextAlignmentOptions> m_lineJustificationStack;
    // protected UnityEngine.Vector3[] m_textContainerLocalCorners
    // Size: 0x8
    // Offset: 0x2A8
    ::ArrayW<::UnityEngine::Vector3> m_textContainerLocalCorners;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // protected System.Single m_characterSpacing
    // Size: 0x4
    // Offset: 0x2B0
    float m_characterSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_cSpacing
    // Size: 0x4
    // Offset: 0x2B4
    float m_cSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_monoSpacing
    // Size: 0x4
    // Offset: 0x2B8
    float m_monoSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_wordSpacing
    // Size: 0x4
    // Offset: 0x2BC
    float m_wordSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineSpacing
    // Size: 0x4
    // Offset: 0x2C0
    float m_lineSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineSpacingDelta
    // Size: 0x4
    // Offset: 0x2C4
    float m_lineSpacingDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineHeight
    // Size: 0x4
    // Offset: 0x2C8
    float m_lineHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineSpacingMax
    // Size: 0x4
    // Offset: 0x2CC
    float m_lineSpacingMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_paragraphSpacing
    // Size: 0x4
    // Offset: 0x2D0
    float m_paragraphSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_charWidthMaxAdj
    // Size: 0x4
    // Offset: 0x2D4
    float m_charWidthMaxAdj;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_charWidthAdjDelta
    // Size: 0x4
    // Offset: 0x2D8
    float m_charWidthAdjDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_enableWordWrapping
    // Size: 0x1
    // Offset: 0x2DC
    bool m_enableWordWrapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isCharacterWrappingEnabled
    // Size: 0x1
    // Offset: 0x2DD
    bool m_isCharacterWrappingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isNonBreakingSpace
    // Size: 0x1
    // Offset: 0x2DE
    bool m_isNonBreakingSpace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isIgnoringAlignment
    // Size: 0x1
    // Offset: 0x2DF
    bool m_isIgnoringAlignment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_wordWrappingRatios
    // Size: 0x4
    // Offset: 0x2E0
    float m_wordWrappingRatios;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TextOverflowModes m_overflowMode
    // Size: 0x4
    // Offset: 0x2E4
    ::TMPro::TextOverflowModes m_overflowMode;
    // Field size check
    static_assert(sizeof(::TMPro::TextOverflowModes) == 0x4);
    // protected System.Int32 m_firstOverflowCharacterIndex
    // Size: 0x4
    // Offset: 0x2E8
    int m_firstOverflowCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.TMP_Text m_linkedTextComponent
    // Size: 0x8
    // Offset: 0x2F0
    ::TMPro::TMP_Text* m_linkedTextComponent;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // protected System.Boolean m_isLinkedTextComponent
    // Size: 0x1
    // Offset: 0x2F8
    bool m_isLinkedTextComponent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isTextTruncated
    // Size: 0x1
    // Offset: 0x2F9
    bool m_isTextTruncated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_enableKerning
    // Size: 0x1
    // Offset: 0x2FA
    bool m_enableKerning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_enableExtraPadding
    // Size: 0x1
    // Offset: 0x2FB
    bool m_enableExtraPadding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean checkPaddingRequired
    // Size: 0x1
    // Offset: 0x2FC
    bool checkPaddingRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isRichText
    // Size: 0x1
    // Offset: 0x2FD
    bool m_isRichText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_parseCtrlCharacters
    // Size: 0x1
    // Offset: 0x2FE
    bool m_parseCtrlCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isOverlay
    // Size: 0x1
    // Offset: 0x2FF
    bool m_isOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isOrthographic
    // Size: 0x1
    // Offset: 0x300
    bool m_isOrthographic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isCullingEnabled
    // Size: 0x1
    // Offset: 0x301
    bool m_isCullingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ignoreRectMaskCulling
    // Size: 0x1
    // Offset: 0x302
    bool m_ignoreRectMaskCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ignoreCulling
    // Size: 0x1
    // Offset: 0x303
    bool m_ignoreCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TextureMappingOptions m_horizontalMapping
    // Size: 0x4
    // Offset: 0x304
    ::TMPro::TextureMappingOptions m_horizontalMapping;
    // Field size check
    static_assert(sizeof(::TMPro::TextureMappingOptions) == 0x4);
    // protected TMPro.TextureMappingOptions m_verticalMapping
    // Size: 0x4
    // Offset: 0x308
    ::TMPro::TextureMappingOptions m_verticalMapping;
    // Field size check
    static_assert(sizeof(::TMPro::TextureMappingOptions) == 0x4);
    // protected System.Single m_uvLineOffset
    // Size: 0x4
    // Offset: 0x30C
    float m_uvLineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TextRenderFlags m_renderMode
    // Size: 0x4
    // Offset: 0x310
    ::TMPro::TextRenderFlags m_renderMode;
    // Field size check
    static_assert(sizeof(::TMPro::TextRenderFlags) == 0x4);
    // protected TMPro.VertexSortingOrder m_geometrySortingOrder
    // Size: 0x4
    // Offset: 0x314
    ::TMPro::VertexSortingOrder m_geometrySortingOrder;
    // Field size check
    static_assert(sizeof(::TMPro::VertexSortingOrder) == 0x4);
    // protected System.Boolean m_VertexBufferAutoSizeReduction
    // Size: 0x1
    // Offset: 0x318
    bool m_VertexBufferAutoSizeReduction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Int32 m_firstVisibleCharacter
    // Size: 0x4
    // Offset: 0x31C
    int m_firstVisibleCharacter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_maxVisibleCharacters
    // Size: 0x4
    // Offset: 0x320
    int m_maxVisibleCharacters;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_maxVisibleWords
    // Size: 0x4
    // Offset: 0x324
    int m_maxVisibleWords;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_maxVisibleLines
    // Size: 0x4
    // Offset: 0x328
    int m_maxVisibleLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_useMaxVisibleDescender
    // Size: 0x1
    // Offset: 0x32C
    bool m_useMaxVisibleDescender;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Int32 m_pageToDisplay
    // Size: 0x4
    // Offset: 0x330
    int m_pageToDisplay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_isNewPage
    // Size: 0x1
    // Offset: 0x334
    bool m_isNewPage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Vector4 m_margin
    // Size: 0x10
    // Offset: 0x338
    ::UnityEngine::Vector4 m_margin;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    // protected System.Single m_marginLeft
    // Size: 0x4
    // Offset: 0x348
    float m_marginLeft;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_marginRight
    // Size: 0x4
    // Offset: 0x34C
    float m_marginRight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_marginWidth
    // Size: 0x4
    // Offset: 0x350
    float m_marginWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_marginHeight
    // Size: 0x4
    // Offset: 0x354
    float m_marginHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_width
    // Size: 0x4
    // Offset: 0x358
    float m_width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_TextInfo m_textInfo
    // Size: 0x8
    // Offset: 0x360
    ::TMPro::TMP_TextInfo* m_textInfo;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_TextInfo*) == 0x8);
    // protected System.Boolean m_havePropertiesChanged
    // Size: 0x1
    // Offset: 0x368
    bool m_havePropertiesChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isUsingLegacyAnimationComponent
    // Size: 0x1
    // Offset: 0x369
    bool m_isUsingLegacyAnimationComponent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Transform m_transform
    // Size: 0x8
    // Offset: 0x370
    ::UnityEngine::Transform* m_transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.RectTransform m_rectTransform
    // Size: 0x8
    // Offset: 0x378
    ::UnityEngine::RectTransform* m_rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private System.Boolean <autoSizeTextContainer>k__BackingField
    // Size: 0x1
    // Offset: 0x380
    bool autoSizeTextContainer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_autoSizeTextContainer
    // Size: 0x1
    // Offset: 0x381
    bool m_autoSizeTextContainer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Mesh m_mesh
    // Size: 0x8
    // Offset: 0x388
    ::UnityEngine::Mesh* m_mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // protected System.Boolean m_isVolumetricText
    // Size: 0x1
    // Offset: 0x390
    bool m_isVolumetricText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_SpriteAnimator m_spriteAnimator
    // Size: 0x8
    // Offset: 0x398
    ::TMPro::TMP_SpriteAnimator* m_spriteAnimator;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_SpriteAnimator*) == 0x8);
    // protected System.Single m_flexibleHeight
    // Size: 0x4
    // Offset: 0x3A0
    float m_flexibleHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_flexibleWidth
    // Size: 0x4
    // Offset: 0x3A4
    float m_flexibleWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_minWidth
    // Size: 0x4
    // Offset: 0x3A8
    float m_minWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_minHeight
    // Size: 0x4
    // Offset: 0x3AC
    float m_minHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxWidth
    // Size: 0x4
    // Offset: 0x3B0
    float m_maxWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxHeight
    // Size: 0x4
    // Offset: 0x3B4
    float m_maxHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected UnityEngine.UI.LayoutElement m_LayoutElement
    // Size: 0x8
    // Offset: 0x3B8
    ::UnityEngine::UI::LayoutElement* m_LayoutElement;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::LayoutElement*) == 0x8);
    // protected System.Single m_preferredWidth
    // Size: 0x4
    // Offset: 0x3C0
    float m_preferredWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_renderedWidth
    // Size: 0x4
    // Offset: 0x3C4
    float m_renderedWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_isPreferredWidthDirty
    // Size: 0x1
    // Offset: 0x3C8
    bool m_isPreferredWidthDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_preferredHeight
    // Size: 0x4
    // Offset: 0x3CC
    float m_preferredHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_renderedHeight
    // Size: 0x4
    // Offset: 0x3D0
    float m_renderedHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_isPreferredHeightDirty
    // Size: 0x1
    // Offset: 0x3D4
    bool m_isPreferredHeightDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isCalculatingPreferredValues
    // Size: 0x1
    // Offset: 0x3D5
    bool m_isCalculatingPreferredValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_recursiveCount
    // Size: 0x4
    // Offset: 0x3D8
    int m_recursiveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_layoutPriority
    // Size: 0x4
    // Offset: 0x3DC
    int m_layoutPriority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_isCalculateSizeRequired
    // Size: 0x1
    // Offset: 0x3E0
    bool m_isCalculateSizeRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isLayoutDirty
    // Size: 0x1
    // Offset: 0x3E1
    bool m_isLayoutDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_verticesAlreadyDirty
    // Size: 0x1
    // Offset: 0x3E2
    bool m_verticesAlreadyDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_layoutAlreadyDirty
    // Size: 0x1
    // Offset: 0x3E3
    bool m_layoutAlreadyDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isAwake
    // Size: 0x1
    // Offset: 0x3E4
    bool m_isAwake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_isWaitingOnResourceLoad
    // Size: 0x1
    // Offset: 0x3E5
    bool m_isWaitingOnResourceLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_isInputParsingRequired
    // Size: 0x1
    // Offset: 0x3E6
    bool m_isInputParsingRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // TMPro.TMP_Text/TMPro.TextInputSources m_inputSource
    // Size: 0x4
    // Offset: 0x3E8
    ::TMPro::TMP_Text::TextInputSources m_inputSource;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text::TextInputSources) == 0x4);
    // protected System.String old_text
    // Size: 0x8
    // Offset: 0x3F0
    ::StringW old_text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // protected System.Single m_fontScale
    // Size: 0x4
    // Offset: 0x3F8
    float m_fontScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontScaleMultiplier
    // Size: 0x4
    // Offset: 0x3FC
    float m_fontScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Char[] m_htmlTag
    // Size: 0x8
    // Offset: 0x400
    ::ArrayW<::Il2CppChar> m_htmlTag;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // protected TMPro.RichTextTagAttribute[] m_xmlAttribute
    // Size: 0x8
    // Offset: 0x408
    ::ArrayW<::TMPro::RichTextTagAttribute> m_xmlAttribute;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::RichTextTagAttribute>) == 0x8);
    // protected System.Single[] m_attributeParameterValues
    // Size: 0x8
    // Offset: 0x410
    ::ArrayW<float> m_attributeParameterValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // protected System.Single tag_LineIndent
    // Size: 0x4
    // Offset: 0x418
    float tag_LineIndent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single tag_Indent
    // Size: 0x4
    // Offset: 0x41C
    float tag_Indent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_indentStack
    // Size: 0xFFFFFFFF
    // Offset: 0x420
    ::TMPro::TMP_RichTextTagStack_1<float> m_indentStack;
    // protected System.Boolean tag_NoParsing
    // Size: 0x1
    // Offset: 0x438
    bool tag_NoParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isParsingText
    // Size: 0x1
    // Offset: 0x439
    bool m_isParsingText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Matrix4x4 m_FXMatrix
    // Size: 0x40
    // Offset: 0x43C
    ::UnityEngine::Matrix4x4 m_FXMatrix;
    // Field size check
    static_assert(sizeof(::UnityEngine::Matrix4x4) == 0x40);
    // protected System.Boolean m_isFXMatrixSet
    // Size: 0x1
    // Offset: 0x47C
    bool m_isFXMatrixSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_Text/TMPro.UnicodeChar[] m_TextParsingBuffer
    // Size: 0x8
    // Offset: 0x480
    ::ArrayW<::TMPro::TMP_Text::UnicodeChar> m_TextParsingBuffer;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::TMP_Text::UnicodeChar>) == 0x8);
    // private TMPro.TMP_CharacterInfo[] m_internalCharacterInfo
    // Size: 0x8
    // Offset: 0x488
    ::ArrayW<::TMPro::TMP_CharacterInfo> m_internalCharacterInfo;
    // Field size check
    static_assert(sizeof(::ArrayW<::TMPro::TMP_CharacterInfo>) == 0x8);
    // protected System.Char[] m_input_CharArray
    // Size: 0x8
    // Offset: 0x490
    ::ArrayW<::Il2CppChar> m_input_CharArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::Il2CppChar>) == 0x8);
    // private System.Int32 m_charArray_Length
    // Size: 0x4
    // Offset: 0x498
    int m_charArray_Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_totalCharacterCount
    // Size: 0x4
    // Offset: 0x49C
    int m_totalCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.WordWrapState m_SavedWordWrapState
    // Size: 0xFFFFFFFF
    // Offset: 0x4A0
    ::TMPro::WordWrapState m_SavedWordWrapState;
    // protected TMPro.WordWrapState m_SavedLineState
    // Size: 0xFFFFFFFF
    // Offset: 0x730
    ::TMPro::WordWrapState m_SavedLineState;
    // protected System.Int32 m_characterCount
    // Size: 0x4
    // Offset: 0x9C0
    int m_characterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_firstCharacterOfLine
    // Size: 0x4
    // Offset: 0x9C4
    int m_firstCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_firstVisibleCharacterOfLine
    // Size: 0x4
    // Offset: 0x9C8
    int m_firstVisibleCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lastCharacterOfLine
    // Size: 0x4
    // Offset: 0x9CC
    int m_lastCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lastVisibleCharacterOfLine
    // Size: 0x4
    // Offset: 0x9D0
    int m_lastVisibleCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lineNumber
    // Size: 0x4
    // Offset: 0x9D4
    int m_lineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lineVisibleCharacterCount
    // Size: 0x4
    // Offset: 0x9D8
    int m_lineVisibleCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_pageNumber
    // Size: 0x4
    // Offset: 0x9DC
    int m_pageNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single m_maxAscender
    // Size: 0x4
    // Offset: 0x9E0
    float m_maxAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxCapHeight
    // Size: 0x4
    // Offset: 0x9E4
    float m_maxCapHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxDescender
    // Size: 0x4
    // Offset: 0x9E8
    float m_maxDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxLineAscender
    // Size: 0x4
    // Offset: 0x9EC
    float m_maxLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxLineDescender
    // Size: 0x4
    // Offset: 0x9F0
    float m_maxLineDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_startOfLineAscender
    // Size: 0x4
    // Offset: 0x9F4
    float m_startOfLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineOffset
    // Size: 0x4
    // Offset: 0x9F8
    float m_lineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.Extents m_meshExtents
    // Size: 0x10
    // Offset: 0x9FC
    ::TMPro::Extents m_meshExtents;
    // Field size check
    static_assert(sizeof(::TMPro::Extents) == 0x10);
    // protected UnityEngine.Color32 m_htmlColor
    // Size: 0x4
    // Offset: 0xA0C
    ::UnityEngine::Color32 m_htmlColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color32) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_colorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA10
    ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32> m_colorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_underlineColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA28
    ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32> m_underlineColorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_strikethroughColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA40
    ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32> m_strikethroughColorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_highlightColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA58
    ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32> m_highlightColorStack;
    // protected TMPro.TMP_ColorGradient m_colorGradientPreset
    // Size: 0x8
    // Offset: 0xA70
    ::TMPro::TMP_ColorGradient* m_colorGradientPreset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_ColorGradient*) == 0x8);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> m_colorGradientStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA78
    ::TMPro::TMP_RichTextTagStack_1<::TMPro::TMP_ColorGradient*> m_colorGradientStack;
    // protected System.Single m_tabSpacing
    // Size: 0x4
    // Offset: 0xA90
    float m_tabSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_spacing
    // Size: 0x4
    // Offset: 0xA94
    float m_spacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_styleStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA98
    ::TMPro::TMP_RichTextTagStack_1<int> m_styleStack;
    // protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_actionStack
    // Size: 0xFFFFFFFF
    // Offset: 0xAB0
    ::TMPro::TMP_RichTextTagStack_1<int> m_actionStack;
    // protected System.Single m_padding
    // Size: 0x4
    // Offset: 0xAC8
    float m_padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_baselineOffset
    // Size: 0x4
    // Offset: 0xACC
    float m_baselineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_baselineOffsetStack
    // Size: 0xFFFFFFFF
    // Offset: 0xAD0
    ::TMPro::TMP_RichTextTagStack_1<float> m_baselineOffsetStack;
    // protected System.Single m_xAdvance
    // Size: 0x4
    // Offset: 0xAE8
    float m_xAdvance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_TextElementType m_textElementType
    // Size: 0x4
    // Offset: 0xAEC
    ::TMPro::TMP_TextElementType m_textElementType;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_TextElementType) == 0x4);
    // protected TMPro.TMP_TextElement m_cached_TextElement
    // Size: 0x8
    // Offset: 0xAF0
    ::TMPro::TMP_TextElement* m_cached_TextElement;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_TextElement*) == 0x8);
    // protected TMPro.TMP_Character m_cached_Underline_Character
    // Size: 0x8
    // Offset: 0xAF8
    ::TMPro::TMP_Character* m_cached_Underline_Character;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Character*) == 0x8);
    // protected TMPro.TMP_Character m_cached_Ellipsis_Character
    // Size: 0x8
    // Offset: 0xB00
    ::TMPro::TMP_Character* m_cached_Ellipsis_Character;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Character*) == 0x8);
    // protected TMPro.TMP_SpriteAsset m_defaultSpriteAsset
    // Size: 0x8
    // Offset: 0xB08
    ::TMPro::TMP_SpriteAsset* m_defaultSpriteAsset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_SpriteAsset*) == 0x8);
    // protected TMPro.TMP_SpriteAsset m_currentSpriteAsset
    // Size: 0x8
    // Offset: 0xB10
    ::TMPro::TMP_SpriteAsset* m_currentSpriteAsset;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_SpriteAsset*) == 0x8);
    // protected System.Int32 m_spriteCount
    // Size: 0x4
    // Offset: 0xB18
    int m_spriteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_spriteIndex
    // Size: 0x4
    // Offset: 0xB1C
    int m_spriteIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_spriteAnimationID
    // Size: 0x4
    // Offset: 0xB20
    int m_spriteAnimationID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_ignoreActiveState
    // Size: 0x1
    // Offset: 0xB24
    bool m_ignoreActiveState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Single[] k_Power
    // Size: 0x8
    // Offset: 0xB28
    ::ArrayW<float> k_Power;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Get static field: static protected UnityEngine.Color32 s_colorWhite
    static ::UnityEngine::Color32 _get_s_colorWhite();
    // Set static field: static protected UnityEngine.Color32 s_colorWhite
    static void _set_s_colorWhite(::UnityEngine::Color32 value);
    // Get static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
    static ::UnityEngine::Vector2 _get_k_LargePositiveVector2();
    // Set static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
    static void _set_k_LargePositiveVector2(::UnityEngine::Vector2 value);
    // Get static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
    static ::UnityEngine::Vector2 _get_k_LargeNegativeVector2();
    // Set static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
    static void _set_k_LargeNegativeVector2(::UnityEngine::Vector2 value);
    // Get static field: static protected System.Single k_LargePositiveFloat
    static float _get_k_LargePositiveFloat();
    // Set static field: static protected System.Single k_LargePositiveFloat
    static void _set_k_LargePositiveFloat(float value);
    // Get static field: static protected System.Single k_LargeNegativeFloat
    static float _get_k_LargeNegativeFloat();
    // Set static field: static protected System.Single k_LargeNegativeFloat
    static void _set_k_LargeNegativeFloat(float value);
    // Get static field: static protected System.Int32 k_LargePositiveInt
    static int _get_k_LargePositiveInt();
    // Set static field: static protected System.Int32 k_LargePositiveInt
    static void _set_k_LargePositiveInt(int value);
    // Get static field: static protected System.Int32 k_LargeNegativeInt
    static int _get_k_LargeNegativeInt();
    // Set static field: static protected System.Int32 k_LargeNegativeInt
    static void _set_k_LargeNegativeInt(int value);
    // Get instance field reference: protected System.String m_text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_m_text();
    // Get instance field reference: protected System.Boolean m_isRightToLeft
    [[deprecated("Use field access instead!")]] bool& dyn_m_isRightToLeft();
    // Get instance field reference: protected TMPro.TMP_FontAsset m_fontAsset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_FontAsset*& dyn_m_fontAsset();
    // Get instance field reference: protected TMPro.TMP_FontAsset m_currentFontAsset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_FontAsset*& dyn_m_currentFontAsset();
    // Get instance field reference: protected System.Boolean m_isSDFShader
    [[deprecated("Use field access instead!")]] bool& dyn_m_isSDFShader();
    // Get instance field reference: protected UnityEngine.Material m_sharedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_sharedMaterial();
    // Get instance field reference: protected UnityEngine.Material m_currentMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_currentMaterial();
    // Get instance field reference: protected TMPro.MaterialReference[] m_materialReferences
    [[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::MaterialReference>& dyn_m_materialReferences();
    // Get instance field reference: protected System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_materialReferenceIndexLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, int>*& dyn_m_materialReferenceIndexLookup();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> m_materialReferenceStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::TMPro::MaterialReference>& dyn_m_materialReferenceStack();
    // Get instance field reference: protected System.Int32 m_currentMaterialIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_currentMaterialIndex();
    // Get instance field reference: protected UnityEngine.Material[] m_fontSharedMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_m_fontSharedMaterials();
    // Get instance field reference: protected UnityEngine.Material m_fontMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_m_fontMaterial();
    // Get instance field reference: protected UnityEngine.Material[] m_fontMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_m_fontMaterials();
    // Get instance field reference: protected System.Boolean m_isMaterialDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_isMaterialDirty();
    // Get instance field reference: protected UnityEngine.Color32 m_fontColor32
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_fontColor32();
    // Get instance field reference: protected UnityEngine.Color m_fontColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_m_fontColor();
    // Get instance field reference: protected UnityEngine.Color32 m_underlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_underlineColor();
    // Get instance field reference: protected UnityEngine.Color32 m_strikethroughColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_strikethroughColor();
    // Get instance field reference: protected UnityEngine.Color32 m_highlightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_highlightColor();
    // Get instance field reference: protected UnityEngine.Vector4 m_highlightPadding
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_highlightPadding();
    // Get instance field reference: protected System.Boolean m_enableVertexGradient
    [[deprecated("Use field access instead!")]] bool& dyn_m_enableVertexGradient();
    // Get instance field reference: protected TMPro.ColorMode m_colorMode
    [[deprecated("Use field access instead!")]] ::TMPro::ColorMode& dyn_m_colorMode();
    // Get instance field reference: protected TMPro.VertexGradient m_fontColorGradient
    [[deprecated("Use field access instead!")]] ::TMPro::VertexGradient& dyn_m_fontColorGradient();
    // Get instance field reference: protected TMPro.TMP_ColorGradient m_fontColorGradientPreset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_ColorGradient*& dyn_m_fontColorGradientPreset();
    // Get instance field reference: protected TMPro.TMP_SpriteAsset m_spriteAsset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_SpriteAsset*& dyn_m_spriteAsset();
    // Get instance field reference: protected System.Boolean m_tintAllSprites
    [[deprecated("Use field access instead!")]] bool& dyn_m_tintAllSprites();
    // Get instance field reference: protected System.Boolean m_tintSprite
    [[deprecated("Use field access instead!")]] bool& dyn_m_tintSprite();
    // Get instance field reference: protected UnityEngine.Color32 m_spriteColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_spriteColor();
    // Get instance field reference: protected System.Boolean m_overrideHtmlColors
    [[deprecated("Use field access instead!")]] bool& dyn_m_overrideHtmlColors();
    // Get instance field reference: protected UnityEngine.Color32 m_faceColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_faceColor();
    // Get instance field reference: protected UnityEngine.Color32 m_outlineColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_outlineColor();
    // Get instance field reference: protected System.Single m_outlineWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_outlineWidth();
    // Get instance field reference: protected System.Single m_fontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_fontSize();
    // Get instance field reference: protected System.Single m_currentFontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_currentFontSize();
    // Get instance field reference: protected System.Single m_fontSizeBase
    [[deprecated("Use field access instead!")]] float& dyn_m_fontSizeBase();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<System.Single> m_sizeStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<float>& dyn_m_sizeStack();
    // Get instance field reference: protected TMPro.FontWeight m_fontWeight
    [[deprecated("Use field access instead!")]] ::TMPro::FontWeight& dyn_m_fontWeight();
    // Get instance field reference: protected TMPro.FontWeight m_FontWeightInternal
    [[deprecated("Use field access instead!")]] ::TMPro::FontWeight& dyn_m_FontWeightInternal();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> m_FontWeightStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::TMPro::FontWeight>& dyn_m_FontWeightStack();
    // Get instance field reference: protected System.Boolean m_enableAutoSizing
    [[deprecated("Use field access instead!")]] bool& dyn_m_enableAutoSizing();
    // Get instance field reference: protected System.Single m_maxFontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_maxFontSize();
    // Get instance field reference: protected System.Single m_minFontSize
    [[deprecated("Use field access instead!")]] float& dyn_m_minFontSize();
    // Get instance field reference: protected System.Single m_fontSizeMin
    [[deprecated("Use field access instead!")]] float& dyn_m_fontSizeMin();
    // Get instance field reference: protected System.Single m_fontSizeMax
    [[deprecated("Use field access instead!")]] float& dyn_m_fontSizeMax();
    // Get instance field reference: protected TMPro.FontStyles m_fontStyle
    [[deprecated("Use field access instead!")]] ::TMPro::FontStyles& dyn_m_fontStyle();
    // Get instance field reference: protected TMPro.FontStyles m_FontStyleInternal
    [[deprecated("Use field access instead!")]] ::TMPro::FontStyles& dyn_m_FontStyleInternal();
    // Get instance field reference: protected TMPro.TMP_FontStyleStack m_fontStyleStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_FontStyleStack& dyn_m_fontStyleStack();
    // Get instance field reference: protected System.Boolean m_isUsingBold
    [[deprecated("Use field access instead!")]] bool& dyn_m_isUsingBold();
    // Get instance field reference: protected TMPro.TextAlignmentOptions m_textAlignment
    [[deprecated("Use field access instead!")]] ::TMPro::TextAlignmentOptions& dyn_m_textAlignment();
    // Get instance field reference: protected TMPro.TextAlignmentOptions m_lineJustification
    [[deprecated("Use field access instead!")]] ::TMPro::TextAlignmentOptions& dyn_m_lineJustification();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> m_lineJustificationStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::TMPro::TextAlignmentOptions>& dyn_m_lineJustificationStack();
    // Get instance field reference: protected UnityEngine.Vector3[] m_textContainerLocalCorners
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_m_textContainerLocalCorners();
    // Get instance field reference: protected System.Single m_characterSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_characterSpacing();
    // Get instance field reference: protected System.Single m_cSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_cSpacing();
    // Get instance field reference: protected System.Single m_monoSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_monoSpacing();
    // Get instance field reference: protected System.Single m_wordSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_wordSpacing();
    // Get instance field reference: protected System.Single m_lineSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_lineSpacing();
    // Get instance field reference: protected System.Single m_lineSpacingDelta
    [[deprecated("Use field access instead!")]] float& dyn_m_lineSpacingDelta();
    // Get instance field reference: protected System.Single m_lineHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_lineHeight();
    // Get instance field reference: protected System.Single m_lineSpacingMax
    [[deprecated("Use field access instead!")]] float& dyn_m_lineSpacingMax();
    // Get instance field reference: protected System.Single m_paragraphSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_paragraphSpacing();
    // Get instance field reference: protected System.Single m_charWidthMaxAdj
    [[deprecated("Use field access instead!")]] float& dyn_m_charWidthMaxAdj();
    // Get instance field reference: protected System.Single m_charWidthAdjDelta
    [[deprecated("Use field access instead!")]] float& dyn_m_charWidthAdjDelta();
    // Get instance field reference: protected System.Boolean m_enableWordWrapping
    [[deprecated("Use field access instead!")]] bool& dyn_m_enableWordWrapping();
    // Get instance field reference: protected System.Boolean m_isCharacterWrappingEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_isCharacterWrappingEnabled();
    // Get instance field reference: protected System.Boolean m_isNonBreakingSpace
    [[deprecated("Use field access instead!")]] bool& dyn_m_isNonBreakingSpace();
    // Get instance field reference: protected System.Boolean m_isIgnoringAlignment
    [[deprecated("Use field access instead!")]] bool& dyn_m_isIgnoringAlignment();
    // Get instance field reference: protected System.Single m_wordWrappingRatios
    [[deprecated("Use field access instead!")]] float& dyn_m_wordWrappingRatios();
    // Get instance field reference: protected TMPro.TextOverflowModes m_overflowMode
    [[deprecated("Use field access instead!")]] ::TMPro::TextOverflowModes& dyn_m_overflowMode();
    // Get instance field reference: protected System.Int32 m_firstOverflowCharacterIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_firstOverflowCharacterIndex();
    // Get instance field reference: protected TMPro.TMP_Text m_linkedTextComponent
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn_m_linkedTextComponent();
    // Get instance field reference: protected System.Boolean m_isLinkedTextComponent
    [[deprecated("Use field access instead!")]] bool& dyn_m_isLinkedTextComponent();
    // Get instance field reference: protected System.Boolean m_isTextTruncated
    [[deprecated("Use field access instead!")]] bool& dyn_m_isTextTruncated();
    // Get instance field reference: protected System.Boolean m_enableKerning
    [[deprecated("Use field access instead!")]] bool& dyn_m_enableKerning();
    // Get instance field reference: protected System.Boolean m_enableExtraPadding
    [[deprecated("Use field access instead!")]] bool& dyn_m_enableExtraPadding();
    // Get instance field reference: protected System.Boolean checkPaddingRequired
    [[deprecated("Use field access instead!")]] bool& dyn_checkPaddingRequired();
    // Get instance field reference: protected System.Boolean m_isRichText
    [[deprecated("Use field access instead!")]] bool& dyn_m_isRichText();
    // Get instance field reference: protected System.Boolean m_parseCtrlCharacters
    [[deprecated("Use field access instead!")]] bool& dyn_m_parseCtrlCharacters();
    // Get instance field reference: protected System.Boolean m_isOverlay
    [[deprecated("Use field access instead!")]] bool& dyn_m_isOverlay();
    // Get instance field reference: protected System.Boolean m_isOrthographic
    [[deprecated("Use field access instead!")]] bool& dyn_m_isOrthographic();
    // Get instance field reference: protected System.Boolean m_isCullingEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_m_isCullingEnabled();
    // Get instance field reference: protected System.Boolean m_ignoreRectMaskCulling
    [[deprecated("Use field access instead!")]] bool& dyn_m_ignoreRectMaskCulling();
    // Get instance field reference: protected System.Boolean m_ignoreCulling
    [[deprecated("Use field access instead!")]] bool& dyn_m_ignoreCulling();
    // Get instance field reference: protected TMPro.TextureMappingOptions m_horizontalMapping
    [[deprecated("Use field access instead!")]] ::TMPro::TextureMappingOptions& dyn_m_horizontalMapping();
    // Get instance field reference: protected TMPro.TextureMappingOptions m_verticalMapping
    [[deprecated("Use field access instead!")]] ::TMPro::TextureMappingOptions& dyn_m_verticalMapping();
    // Get instance field reference: protected System.Single m_uvLineOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_uvLineOffset();
    // Get instance field reference: protected TMPro.TextRenderFlags m_renderMode
    [[deprecated("Use field access instead!")]] ::TMPro::TextRenderFlags& dyn_m_renderMode();
    // Get instance field reference: protected TMPro.VertexSortingOrder m_geometrySortingOrder
    [[deprecated("Use field access instead!")]] ::TMPro::VertexSortingOrder& dyn_m_geometrySortingOrder();
    // Get instance field reference: protected System.Boolean m_VertexBufferAutoSizeReduction
    [[deprecated("Use field access instead!")]] bool& dyn_m_VertexBufferAutoSizeReduction();
    // Get instance field reference: protected System.Int32 m_firstVisibleCharacter
    [[deprecated("Use field access instead!")]] int& dyn_m_firstVisibleCharacter();
    // Get instance field reference: protected System.Int32 m_maxVisibleCharacters
    [[deprecated("Use field access instead!")]] int& dyn_m_maxVisibleCharacters();
    // Get instance field reference: protected System.Int32 m_maxVisibleWords
    [[deprecated("Use field access instead!")]] int& dyn_m_maxVisibleWords();
    // Get instance field reference: protected System.Int32 m_maxVisibleLines
    [[deprecated("Use field access instead!")]] int& dyn_m_maxVisibleLines();
    // Get instance field reference: protected System.Boolean m_useMaxVisibleDescender
    [[deprecated("Use field access instead!")]] bool& dyn_m_useMaxVisibleDescender();
    // Get instance field reference: protected System.Int32 m_pageToDisplay
    [[deprecated("Use field access instead!")]] int& dyn_m_pageToDisplay();
    // Get instance field reference: protected System.Boolean m_isNewPage
    [[deprecated("Use field access instead!")]] bool& dyn_m_isNewPage();
    // Get instance field reference: protected UnityEngine.Vector4 m_margin
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_m_margin();
    // Get instance field reference: protected System.Single m_marginLeft
    [[deprecated("Use field access instead!")]] float& dyn_m_marginLeft();
    // Get instance field reference: protected System.Single m_marginRight
    [[deprecated("Use field access instead!")]] float& dyn_m_marginRight();
    // Get instance field reference: protected System.Single m_marginWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_marginWidth();
    // Get instance field reference: protected System.Single m_marginHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_marginHeight();
    // Get instance field reference: protected System.Single m_width
    [[deprecated("Use field access instead!")]] float& dyn_m_width();
    // Get instance field reference: protected TMPro.TMP_TextInfo m_textInfo
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_TextInfo*& dyn_m_textInfo();
    // Get instance field reference: protected System.Boolean m_havePropertiesChanged
    [[deprecated("Use field access instead!")]] bool& dyn_m_havePropertiesChanged();
    // Get instance field reference: protected System.Boolean m_isUsingLegacyAnimationComponent
    [[deprecated("Use field access instead!")]] bool& dyn_m_isUsingLegacyAnimationComponent();
    // Get instance field reference: protected UnityEngine.Transform m_transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_m_transform();
    // Get instance field reference: protected UnityEngine.RectTransform m_rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_m_rectTransform();
    // Get instance field reference: private System.Boolean <autoSizeTextContainer>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$autoSizeTextContainer$k__BackingField();
    // Get instance field reference: protected System.Boolean m_autoSizeTextContainer
    [[deprecated("Use field access instead!")]] bool& dyn_m_autoSizeTextContainer();
    // Get instance field reference: protected UnityEngine.Mesh m_mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn_m_mesh();
    // Get instance field reference: protected System.Boolean m_isVolumetricText
    [[deprecated("Use field access instead!")]] bool& dyn_m_isVolumetricText();
    // Get instance field reference: protected TMPro.TMP_SpriteAnimator m_spriteAnimator
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_SpriteAnimator*& dyn_m_spriteAnimator();
    // Get instance field reference: protected System.Single m_flexibleHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_flexibleHeight();
    // Get instance field reference: protected System.Single m_flexibleWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_flexibleWidth();
    // Get instance field reference: protected System.Single m_minWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_minWidth();
    // Get instance field reference: protected System.Single m_minHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_minHeight();
    // Get instance field reference: protected System.Single m_maxWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_maxWidth();
    // Get instance field reference: protected System.Single m_maxHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_maxHeight();
    // Get instance field reference: protected UnityEngine.UI.LayoutElement m_LayoutElement
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::LayoutElement*& dyn_m_LayoutElement();
    // Get instance field reference: protected System.Single m_preferredWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_preferredWidth();
    // Get instance field reference: protected System.Single m_renderedWidth
    [[deprecated("Use field access instead!")]] float& dyn_m_renderedWidth();
    // Get instance field reference: protected System.Boolean m_isPreferredWidthDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_isPreferredWidthDirty();
    // Get instance field reference: protected System.Single m_preferredHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_preferredHeight();
    // Get instance field reference: protected System.Single m_renderedHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_renderedHeight();
    // Get instance field reference: protected System.Boolean m_isPreferredHeightDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_isPreferredHeightDirty();
    // Get instance field reference: protected System.Boolean m_isCalculatingPreferredValues
    [[deprecated("Use field access instead!")]] bool& dyn_m_isCalculatingPreferredValues();
    // Get instance field reference: private System.Int32 m_recursiveCount
    [[deprecated("Use field access instead!")]] int& dyn_m_recursiveCount();
    // Get instance field reference: protected System.Int32 m_layoutPriority
    [[deprecated("Use field access instead!")]] int& dyn_m_layoutPriority();
    // Get instance field reference: protected System.Boolean m_isCalculateSizeRequired
    [[deprecated("Use field access instead!")]] bool& dyn_m_isCalculateSizeRequired();
    // Get instance field reference: protected System.Boolean m_isLayoutDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_isLayoutDirty();
    // Get instance field reference: protected System.Boolean m_verticesAlreadyDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_verticesAlreadyDirty();
    // Get instance field reference: protected System.Boolean m_layoutAlreadyDirty
    [[deprecated("Use field access instead!")]] bool& dyn_m_layoutAlreadyDirty();
    // Get instance field reference: protected System.Boolean m_isAwake
    [[deprecated("Use field access instead!")]] bool& dyn_m_isAwake();
    // Get instance field reference: System.Boolean m_isWaitingOnResourceLoad
    [[deprecated("Use field access instead!")]] bool& dyn_m_isWaitingOnResourceLoad();
    // Get instance field reference: System.Boolean m_isInputParsingRequired
    [[deprecated("Use field access instead!")]] bool& dyn_m_isInputParsingRequired();
    // Get instance field reference: TMPro.TMP_Text/TMPro.TextInputSources m_inputSource
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text::TextInputSources& dyn_m_inputSource();
    // Get instance field reference: protected System.String old_text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_old_text();
    // Get instance field reference: protected System.Single m_fontScale
    [[deprecated("Use field access instead!")]] float& dyn_m_fontScale();
    // Get instance field reference: protected System.Single m_fontScaleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_m_fontScaleMultiplier();
    // Get instance field reference: protected System.Char[] m_htmlTag
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_m_htmlTag();
    // Get instance field reference: protected TMPro.RichTextTagAttribute[] m_xmlAttribute
    [[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::RichTextTagAttribute>& dyn_m_xmlAttribute();
    // Get instance field reference: protected System.Single[] m_attributeParameterValues
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_m_attributeParameterValues();
    // Get instance field reference: protected System.Single tag_LineIndent
    [[deprecated("Use field access instead!")]] float& dyn_tag_LineIndent();
    // Get instance field reference: protected System.Single tag_Indent
    [[deprecated("Use field access instead!")]] float& dyn_tag_Indent();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<System.Single> m_indentStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<float>& dyn_m_indentStack();
    // Get instance field reference: protected System.Boolean tag_NoParsing
    [[deprecated("Use field access instead!")]] bool& dyn_tag_NoParsing();
    // Get instance field reference: protected System.Boolean m_isParsingText
    [[deprecated("Use field access instead!")]] bool& dyn_m_isParsingText();
    // Get instance field reference: protected UnityEngine.Matrix4x4 m_FXMatrix
    [[deprecated("Use field access instead!")]] ::UnityEngine::Matrix4x4& dyn_m_FXMatrix();
    // Get instance field reference: protected System.Boolean m_isFXMatrixSet
    [[deprecated("Use field access instead!")]] bool& dyn_m_isFXMatrixSet();
    // Get instance field reference: protected TMPro.TMP_Text/TMPro.UnicodeChar[] m_TextParsingBuffer
    [[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_Text::UnicodeChar>& dyn_m_TextParsingBuffer();
    // Get instance field reference: private TMPro.TMP_CharacterInfo[] m_internalCharacterInfo
    [[deprecated("Use field access instead!")]] ::ArrayW<::TMPro::TMP_CharacterInfo>& dyn_m_internalCharacterInfo();
    // Get instance field reference: protected System.Char[] m_input_CharArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::Il2CppChar>& dyn_m_input_CharArray();
    // Get instance field reference: private System.Int32 m_charArray_Length
    [[deprecated("Use field access instead!")]] int& dyn_m_charArray_Length();
    // Get instance field reference: protected System.Int32 m_totalCharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_m_totalCharacterCount();
    // Get instance field reference: protected TMPro.WordWrapState m_SavedWordWrapState
    [[deprecated("Use field access instead!")]] ::TMPro::WordWrapState& dyn_m_SavedWordWrapState();
    // Get instance field reference: protected TMPro.WordWrapState m_SavedLineState
    [[deprecated("Use field access instead!")]] ::TMPro::WordWrapState& dyn_m_SavedLineState();
    // Get instance field reference: protected System.Int32 m_characterCount
    [[deprecated("Use field access instead!")]] int& dyn_m_characterCount();
    // Get instance field reference: protected System.Int32 m_firstCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_firstCharacterOfLine();
    // Get instance field reference: protected System.Int32 m_firstVisibleCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_firstVisibleCharacterOfLine();
    // Get instance field reference: protected System.Int32 m_lastCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_lastCharacterOfLine();
    // Get instance field reference: protected System.Int32 m_lastVisibleCharacterOfLine
    [[deprecated("Use field access instead!")]] int& dyn_m_lastVisibleCharacterOfLine();
    // Get instance field reference: protected System.Int32 m_lineNumber
    [[deprecated("Use field access instead!")]] int& dyn_m_lineNumber();
    // Get instance field reference: protected System.Int32 m_lineVisibleCharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_m_lineVisibleCharacterCount();
    // Get instance field reference: protected System.Int32 m_pageNumber
    [[deprecated("Use field access instead!")]] int& dyn_m_pageNumber();
    // Get instance field reference: protected System.Single m_maxAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_maxAscender();
    // Get instance field reference: protected System.Single m_maxCapHeight
    [[deprecated("Use field access instead!")]] float& dyn_m_maxCapHeight();
    // Get instance field reference: protected System.Single m_maxDescender
    [[deprecated("Use field access instead!")]] float& dyn_m_maxDescender();
    // Get instance field reference: protected System.Single m_maxLineAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_maxLineAscender();
    // Get instance field reference: protected System.Single m_maxLineDescender
    [[deprecated("Use field access instead!")]] float& dyn_m_maxLineDescender();
    // Get instance field reference: protected System.Single m_startOfLineAscender
    [[deprecated("Use field access instead!")]] float& dyn_m_startOfLineAscender();
    // Get instance field reference: protected System.Single m_lineOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_lineOffset();
    // Get instance field reference: protected TMPro.Extents m_meshExtents
    [[deprecated("Use field access instead!")]] ::TMPro::Extents& dyn_m_meshExtents();
    // Get instance field reference: protected UnityEngine.Color32 m_htmlColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color32& dyn_m_htmlColor();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_colorStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32>& dyn_m_colorStack();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_underlineColorStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32>& dyn_m_underlineColorStack();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_strikethroughColorStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32>& dyn_m_strikethroughColorStack();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_highlightColorStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::UnityEngine::Color32>& dyn_m_highlightColorStack();
    // Get instance field reference: protected TMPro.TMP_ColorGradient m_colorGradientPreset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_ColorGradient*& dyn_m_colorGradientPreset();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> m_colorGradientStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<::TMPro::TMP_ColorGradient*>& dyn_m_colorGradientStack();
    // Get instance field reference: protected System.Single m_tabSpacing
    [[deprecated("Use field access instead!")]] float& dyn_m_tabSpacing();
    // Get instance field reference: protected System.Single m_spacing
    [[deprecated("Use field access instead!")]] float& dyn_m_spacing();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_styleStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<int>& dyn_m_styleStack();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_actionStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<int>& dyn_m_actionStack();
    // Get instance field reference: protected System.Single m_padding
    [[deprecated("Use field access instead!")]] float& dyn_m_padding();
    // Get instance field reference: protected System.Single m_baselineOffset
    [[deprecated("Use field access instead!")]] float& dyn_m_baselineOffset();
    // Get instance field reference: protected TMPro.TMP_RichTextTagStack`1<System.Single> m_baselineOffsetStack
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_RichTextTagStack_1<float>& dyn_m_baselineOffsetStack();
    // Get instance field reference: protected System.Single m_xAdvance
    [[deprecated("Use field access instead!")]] float& dyn_m_xAdvance();
    // Get instance field reference: protected TMPro.TMP_TextElementType m_textElementType
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_TextElementType& dyn_m_textElementType();
    // Get instance field reference: protected TMPro.TMP_TextElement m_cached_TextElement
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_TextElement*& dyn_m_cached_TextElement();
    // Get instance field reference: protected TMPro.TMP_Character m_cached_Underline_Character
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Character*& dyn_m_cached_Underline_Character();
    // Get instance field reference: protected TMPro.TMP_Character m_cached_Ellipsis_Character
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Character*& dyn_m_cached_Ellipsis_Character();
    // Get instance field reference: protected TMPro.TMP_SpriteAsset m_defaultSpriteAsset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_SpriteAsset*& dyn_m_defaultSpriteAsset();
    // Get instance field reference: protected TMPro.TMP_SpriteAsset m_currentSpriteAsset
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_SpriteAsset*& dyn_m_currentSpriteAsset();
    // Get instance field reference: protected System.Int32 m_spriteCount
    [[deprecated("Use field access instead!")]] int& dyn_m_spriteCount();
    // Get instance field reference: protected System.Int32 m_spriteIndex
    [[deprecated("Use field access instead!")]] int& dyn_m_spriteIndex();
    // Get instance field reference: protected System.Int32 m_spriteAnimationID
    [[deprecated("Use field access instead!")]] int& dyn_m_spriteAnimationID();
    // Get instance field reference: protected System.Boolean m_ignoreActiveState
    [[deprecated("Use field access instead!")]] bool& dyn_m_ignoreActiveState();
    // Get instance field reference: private readonly System.Single[] k_Power
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_k_Power();
    // public System.String get_text()
    // Offset: 0x1471CF8
    ::StringW get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0x1471D00
    void set_text(::StringW value);
    // public System.Boolean get_isRightToLeftText()
    // Offset: 0x1471D80
    bool get_isRightToLeftText();
    // public System.Void set_isRightToLeftText(System.Boolean value)
    // Offset: 0x1471D88
    void set_isRightToLeftText(bool value);
    // public TMPro.TMP_FontAsset get_font()
    // Offset: 0x1471DF4
    ::TMPro::TMP_FontAsset* get_font();
    // public System.Void set_font(TMPro.TMP_FontAsset value)
    // Offset: 0x1471DFC
    void set_font(::TMPro::TMP_FontAsset* value);
    // public UnityEngine.Material get_fontSharedMaterial()
    // Offset: 0x1471EDC
    ::UnityEngine::Material* get_fontSharedMaterial();
    // public System.Void set_fontSharedMaterial(UnityEngine.Material value)
    // Offset: 0x1471EE4
    void set_fontSharedMaterial(::UnityEngine::Material* value);
    // public UnityEngine.Material[] get_fontSharedMaterials()
    // Offset: 0x1471FC0
    ::ArrayW<::UnityEngine::Material*> get_fontSharedMaterials();
    // public System.Void set_fontSharedMaterials(UnityEngine.Material[] value)
    // Offset: 0x1471FD0
    void set_fontSharedMaterials(::ArrayW<::UnityEngine::Material*> value);
    // public UnityEngine.Material get_fontMaterial()
    // Offset: 0x147202C
    ::UnityEngine::Material* get_fontMaterial();
    // public System.Void set_fontMaterial(UnityEngine.Material value)
    // Offset: 0x1472040
    void set_fontMaterial(::UnityEngine::Material* value);
    // public UnityEngine.Material[] get_fontMaterials()
    // Offset: 0x1472150
    ::ArrayW<::UnityEngine::Material*> get_fontMaterials();
    // public System.Void set_fontMaterials(UnityEngine.Material[] value)
    // Offset: 0x1472164
    void set_fontMaterials(::ArrayW<::UnityEngine::Material*> value);
    // public System.Single get_alpha()
    // Offset: 0x147227C
    float get_alpha();
    // public System.Void set_alpha(System.Single value)
    // Offset: 0x1472284
    void set_alpha(float value);
    // public System.Boolean get_enableVertexGradient()
    // Offset: 0x14722B0
    bool get_enableVertexGradient();
    // public System.Void set_enableVertexGradient(System.Boolean value)
    // Offset: 0x14722B8
    void set_enableVertexGradient(bool value);
    // public TMPro.VertexGradient get_colorGradient()
    // Offset: 0x14722F0
    ::TMPro::VertexGradient get_colorGradient();
    // public System.Void set_colorGradient(TMPro.VertexGradient value)
    // Offset: 0x147231C
    void set_colorGradient(::TMPro::VertexGradient value);
    // public TMPro.TMP_ColorGradient get_colorGradientPreset()
    // Offset: 0x147235C
    ::TMPro::TMP_ColorGradient* get_colorGradientPreset();
    // public System.Void set_colorGradientPreset(TMPro.TMP_ColorGradient value)
    // Offset: 0x1472364
    void set_colorGradientPreset(::TMPro::TMP_ColorGradient* value);
    // public TMPro.TMP_SpriteAsset get_spriteAsset()
    // Offset: 0x1472380
    ::TMPro::TMP_SpriteAsset* get_spriteAsset();
    // public System.Void set_spriteAsset(TMPro.TMP_SpriteAsset value)
    // Offset: 0x1472388
    void set_spriteAsset(::TMPro::TMP_SpriteAsset* value);
    // public System.Boolean get_tintAllSprites()
    // Offset: 0x14723D8
    bool get_tintAllSprites();
    // public System.Void set_tintAllSprites(System.Boolean value)
    // Offset: 0x14723E0
    void set_tintAllSprites(bool value);
    // public System.Boolean get_overrideColorTags()
    // Offset: 0x1472418
    bool get_overrideColorTags();
    // public System.Void set_overrideColorTags(System.Boolean value)
    // Offset: 0x1472420
    void set_overrideColorTags(bool value);
    // public UnityEngine.Color32 get_faceColor()
    // Offset: 0x1472458
    ::UnityEngine::Color32 get_faceColor();
    // public System.Void set_faceColor(UnityEngine.Color32 value)
    // Offset: 0x1472534
    void set_faceColor(::UnityEngine::Color32 value);
    // public UnityEngine.Color32 get_outlineColor()
    // Offset: 0x14725CC
    ::UnityEngine::Color32 get_outlineColor();
    // public System.Void set_outlineColor(UnityEngine.Color32 value)
    // Offset: 0x14726A8
    void set_outlineColor(::UnityEngine::Color32 value);
    // public System.Single get_outlineWidth()
    // Offset: 0x147272C
    float get_outlineWidth();
    // public System.Void set_outlineWidth(System.Single value)
    // Offset: 0x14727FC
    void set_outlineWidth(float value);
    // public System.Single get_fontSize()
    // Offset: 0x1472860
    float get_fontSize();
    // public System.Void set_fontSize(System.Single value)
    // Offset: 0x1472868
    void set_fontSize(float value);
    // public System.Single get_fontScale()
    // Offset: 0x14728D4
    float get_fontScale();
    // public TMPro.FontWeight get_fontWeight()
    // Offset: 0x14728DC
    ::TMPro::FontWeight get_fontWeight();
    // public System.Void set_fontWeight(TMPro.FontWeight value)
    // Offset: 0x14728E4
    void set_fontWeight(::TMPro::FontWeight value);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0x1472944
    float get_pixelsPerUnit();
    // public System.Boolean get_enableAutoSizing()
    // Offset: 0x1472AD4
    bool get_enableAutoSizing();
    // public System.Void set_enableAutoSizing(System.Boolean value)
    // Offset: 0x1472ADC
    void set_enableAutoSizing(bool value);
    // public System.Single get_fontSizeMin()
    // Offset: 0x1472B38
    float get_fontSizeMin();
    // public System.Void set_fontSizeMin(System.Single value)
    // Offset: 0x1472B40
    void set_fontSizeMin(float value);
    // public System.Single get_fontSizeMax()
    // Offset: 0x1472B90
    float get_fontSizeMax();
    // public System.Void set_fontSizeMax(System.Single value)
    // Offset: 0x1472B98
    void set_fontSizeMax(float value);
    // public TMPro.FontStyles get_fontStyle()
    // Offset: 0x1472BE8
    ::TMPro::FontStyles get_fontStyle();
    // public System.Void set_fontStyle(TMPro.FontStyles value)
    // Offset: 0x1472BF0
    void set_fontStyle(::TMPro::FontStyles value);
    // public System.Boolean get_isUsingBold()
    // Offset: 0x1472C50
    bool get_isUsingBold();
    // public TMPro.TextAlignmentOptions get_alignment()
    // Offset: 0x1472C58
    ::TMPro::TextAlignmentOptions get_alignment();
    // public System.Void set_alignment(TMPro.TextAlignmentOptions value)
    // Offset: 0x1472C60
    void set_alignment(::TMPro::TextAlignmentOptions value);
    // public System.Single get_characterSpacing()
    // Offset: 0x1472C8C
    float get_characterSpacing();
    // public System.Void set_characterSpacing(System.Single value)
    // Offset: 0x1472C94
    void set_characterSpacing(float value);
    // public System.Single get_wordSpacing()
    // Offset: 0x1472CF0
    float get_wordSpacing();
    // public System.Void set_wordSpacing(System.Single value)
    // Offset: 0x1472CF8
    void set_wordSpacing(float value);
    // public System.Single get_lineSpacing()
    // Offset: 0x1472D54
    float get_lineSpacing();
    // public System.Void set_lineSpacing(System.Single value)
    // Offset: 0x1472D5C
    void set_lineSpacing(float value);
    // public System.Single get_lineSpacingAdjustment()
    // Offset: 0x1472DB8
    float get_lineSpacingAdjustment();
    // public System.Void set_lineSpacingAdjustment(System.Single value)
    // Offset: 0x1472DC0
    void set_lineSpacingAdjustment(float value);
    // public System.Single get_paragraphSpacing()
    // Offset: 0x1472E1C
    float get_paragraphSpacing();
    // public System.Void set_paragraphSpacing(System.Single value)
    // Offset: 0x1472E24
    void set_paragraphSpacing(float value);
    // public System.Single get_characterWidthAdjustment()
    // Offset: 0x1472E80
    float get_characterWidthAdjustment();
    // public System.Void set_characterWidthAdjustment(System.Single value)
    // Offset: 0x1472E88
    void set_characterWidthAdjustment(float value);
    // public System.Boolean get_enableWordWrapping()
    // Offset: 0x1472EE4
    bool get_enableWordWrapping();
    // public System.Void set_enableWordWrapping(System.Boolean value)
    // Offset: 0x1472EEC
    void set_enableWordWrapping(bool value);
    // public System.Single get_wordWrappingRatios()
    // Offset: 0x1472F58
    float get_wordWrappingRatios();
    // public System.Void set_wordWrappingRatios(System.Single value)
    // Offset: 0x1472F60
    void set_wordWrappingRatios(float value);
    // public TMPro.TextOverflowModes get_overflowMode()
    // Offset: 0x1472FBC
    ::TMPro::TextOverflowModes get_overflowMode();
    // public System.Void set_overflowMode(TMPro.TextOverflowModes value)
    // Offset: 0x1472FC4
    void set_overflowMode(::TMPro::TextOverflowModes value);
    // public System.Boolean get_isTextOverflowing()
    // Offset: 0x1473020
    bool get_isTextOverflowing();
    // public System.Int32 get_firstOverflowCharacterIndex()
    // Offset: 0x1473030
    int get_firstOverflowCharacterIndex();
    // public TMPro.TMP_Text get_linkedTextComponent()
    // Offset: 0x1473038
    ::TMPro::TMP_Text* get_linkedTextComponent();
    // public System.Void set_linkedTextComponent(TMPro.TMP_Text value)
    // Offset: 0x1473040
    void set_linkedTextComponent(::TMPro::TMP_Text* value);
    // public System.Boolean get_isLinkedTextComponent()
    // Offset: 0x1473294
    bool get_isLinkedTextComponent();
    // public System.Void set_isLinkedTextComponent(System.Boolean value)
    // Offset: 0x1473238
    void set_isLinkedTextComponent(bool value);
    // public System.Boolean get_isTextTruncated()
    // Offset: 0x147329C
    bool get_isTextTruncated();
    // public System.Boolean get_enableKerning()
    // Offset: 0x14732A4
    bool get_enableKerning();
    // public System.Void set_enableKerning(System.Boolean value)
    // Offset: 0x14732AC
    void set_enableKerning(bool value);
    // public System.Boolean get_extraPadding()
    // Offset: 0x1473314
    bool get_extraPadding();
    // public System.Void set_extraPadding(System.Boolean value)
    // Offset: 0x147331C
    void set_extraPadding(bool value);
    // public System.Boolean get_richText()
    // Offset: 0x1473380
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0x1473388
    void set_richText(bool value);
    // public System.Boolean get_parseCtrlCharacters()
    // Offset: 0x14733F4
    bool get_parseCtrlCharacters();
    // public System.Void set_parseCtrlCharacters(System.Boolean value)
    // Offset: 0x14733FC
    void set_parseCtrlCharacters(bool value);
    // public System.Boolean get_isOverlay()
    // Offset: 0x1473468
    bool get_isOverlay();
    // public System.Void set_isOverlay(System.Boolean value)
    // Offset: 0x1473470
    void set_isOverlay(bool value);
    // public System.Boolean get_isOrthographic()
    // Offset: 0x14734D4
    bool get_isOrthographic();
    // public System.Void set_isOrthographic(System.Boolean value)
    // Offset: 0x14734DC
    void set_isOrthographic(bool value);
    // public System.Boolean get_enableCulling()
    // Offset: 0x1473514
    bool get_enableCulling();
    // public System.Void set_enableCulling(System.Boolean value)
    // Offset: 0x147351C
    void set_enableCulling(bool value);
    // public System.Boolean get_ignoreRectMaskCulling()
    // Offset: 0x147356C
    bool get_ignoreRectMaskCulling();
    // public System.Void set_ignoreRectMaskCulling(System.Boolean value)
    // Offset: 0x1473574
    void set_ignoreRectMaskCulling(bool value);
    // public System.Boolean get_ignoreVisibility()
    // Offset: 0x147359C
    bool get_ignoreVisibility();
    // public System.Void set_ignoreVisibility(System.Boolean value)
    // Offset: 0x14735A4
    void set_ignoreVisibility(bool value);
    // public TMPro.TextureMappingOptions get_horizontalMapping()
    // Offset: 0x14735CC
    ::TMPro::TextureMappingOptions get_horizontalMapping();
    // public System.Void set_horizontalMapping(TMPro.TextureMappingOptions value)
    // Offset: 0x14735D4
    void set_horizontalMapping(::TMPro::TextureMappingOptions value);
    // public TMPro.TextureMappingOptions get_verticalMapping()
    // Offset: 0x1473600
    ::TMPro::TextureMappingOptions get_verticalMapping();
    // public System.Void set_verticalMapping(TMPro.TextureMappingOptions value)
    // Offset: 0x1473608
    void set_verticalMapping(::TMPro::TextureMappingOptions value);
    // public System.Single get_mappingUvLineOffset()
    // Offset: 0x1473634
    float get_mappingUvLineOffset();
    // public System.Void set_mappingUvLineOffset(System.Single value)
    // Offset: 0x147363C
    void set_mappingUvLineOffset(float value);
    // public TMPro.TextRenderFlags get_renderMode()
    // Offset: 0x1473668
    ::TMPro::TextRenderFlags get_renderMode();
    // public System.Void set_renderMode(TMPro.TextRenderFlags value)
    // Offset: 0x1473670
    void set_renderMode(::TMPro::TextRenderFlags value);
    // public TMPro.VertexSortingOrder get_geometrySortingOrder()
    // Offset: 0x147368C
    ::TMPro::VertexSortingOrder get_geometrySortingOrder();
    // public System.Void set_geometrySortingOrder(TMPro.VertexSortingOrder value)
    // Offset: 0x1473694
    void set_geometrySortingOrder(::TMPro::VertexSortingOrder value);
    // public System.Boolean get_vertexBufferAutoSizeReduction()
    // Offset: 0x14736B0
    bool get_vertexBufferAutoSizeReduction();
    // public System.Void set_vertexBufferAutoSizeReduction(System.Boolean value)
    // Offset: 0x14736B8
    void set_vertexBufferAutoSizeReduction(bool value);
    // public System.Int32 get_firstVisibleCharacter()
    // Offset: 0x14736D8
    int get_firstVisibleCharacter();
    // public System.Void set_firstVisibleCharacter(System.Int32 value)
    // Offset: 0x14736E0
    void set_firstVisibleCharacter(int value);
    // public System.Int32 get_maxVisibleCharacters()
    // Offset: 0x147370C
    int get_maxVisibleCharacters();
    // public System.Void set_maxVisibleCharacters(System.Int32 value)
    // Offset: 0x1473714
    void set_maxVisibleCharacters(int value);
    // public System.Int32 get_maxVisibleWords()
    // Offset: 0x1473740
    int get_maxVisibleWords();
    // public System.Void set_maxVisibleWords(System.Int32 value)
    // Offset: 0x1473748
    void set_maxVisibleWords(int value);
    // public System.Int32 get_maxVisibleLines()
    // Offset: 0x1473774
    int get_maxVisibleLines();
    // public System.Void set_maxVisibleLines(System.Int32 value)
    // Offset: 0x147377C
    void set_maxVisibleLines(int value);
    // public System.Boolean get_useMaxVisibleDescender()
    // Offset: 0x14737AC
    bool get_useMaxVisibleDescender();
    // public System.Void set_useMaxVisibleDescender(System.Boolean value)
    // Offset: 0x14737B4
    void set_useMaxVisibleDescender(bool value);
    // public System.Int32 get_pageToDisplay()
    // Offset: 0x14737E8
    int get_pageToDisplay();
    // public System.Void set_pageToDisplay(System.Int32 value)
    // Offset: 0x14737F0
    void set_pageToDisplay(int value);
    // public UnityEngine.Vector4 get_margin()
    // Offset: 0x147381C
    ::UnityEngine::Vector4 get_margin();
    // public System.Void set_margin(UnityEngine.Vector4 value)
    // Offset: 0x1473830
    void set_margin(::UnityEngine::Vector4 value);
    // public TMPro.TMP_TextInfo get_textInfo()
    // Offset: 0x1473954
    ::TMPro::TMP_TextInfo* get_textInfo();
    // public System.Boolean get_havePropertiesChanged()
    // Offset: 0x147395C
    bool get_havePropertiesChanged();
    // public System.Void set_havePropertiesChanged(System.Boolean value)
    // Offset: 0x14705C4
    void set_havePropertiesChanged(bool value);
    // public System.Boolean get_isUsingLegacyAnimationComponent()
    // Offset: 0x1473964
    bool get_isUsingLegacyAnimationComponent();
    // public System.Void set_isUsingLegacyAnimationComponent(System.Boolean value)
    // Offset: 0x147396C
    void set_isUsingLegacyAnimationComponent(bool value);
    // public UnityEngine.Transform get_transform()
    // Offset: 0x14710E8
    ::UnityEngine::Transform* get_transform();
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x1471180
    ::UnityEngine::RectTransform* get_rectTransform();
    // public System.Boolean get_autoSizeTextContainer()
    // Offset: 0x1473978
    bool get_autoSizeTextContainer();
    // public System.Void set_autoSizeTextContainer(System.Boolean value)
    // Offset: 0x1473980
    void set_autoSizeTextContainer(bool value);
    // public UnityEngine.Mesh get_mesh()
    // Offset: 0x147398C
    ::UnityEngine::Mesh* get_mesh();
    // public System.Boolean get_isVolumetricText()
    // Offset: 0x1473994
    bool get_isVolumetricText();
    // public System.Void set_isVolumetricText(System.Boolean value)
    // Offset: 0x147399C
    void set_isVolumetricText(bool value);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1473A20
    ::UnityEngine::Bounds get_bounds();
    // public UnityEngine.Bounds get_textBounds()
    // Offset: 0x1473AD0
    ::UnityEngine::Bounds get_textBounds();
    // protected TMPro.TMP_SpriteAnimator get_spriteAnimator()
    // Offset: 0x1473DA8
    ::TMPro::TMP_SpriteAnimator* get_spriteAnimator();
    // public System.Single get_flexibleHeight()
    // Offset: 0x1473E9C
    float get_flexibleHeight();
    // public System.Single get_flexibleWidth()
    // Offset: 0x1473EA4
    float get_flexibleWidth();
    // public System.Single get_minWidth()
    // Offset: 0x1473EAC
    float get_minWidth();
    // public System.Single get_minHeight()
    // Offset: 0x1473EB4
    float get_minHeight();
    // public System.Single get_maxWidth()
    // Offset: 0x1473EBC
    float get_maxWidth();
    // public System.Single get_maxHeight()
    // Offset: 0x1473EC4
    float get_maxHeight();
    // protected UnityEngine.UI.LayoutElement get_layoutElement()
    // Offset: 0x1473ECC
    ::UnityEngine::UI::LayoutElement* get_layoutElement();
    // public System.Single get_preferredWidth()
    // Offset: 0x1473F64
    float get_preferredWidth();
    // public System.Single get_preferredHeight()
    // Offset: 0x14740D8
    float get_preferredHeight();
    // public System.Single get_renderedWidth()
    // Offset: 0x1474294
    float get_renderedWidth();
    // public System.Single get_renderedHeight()
    // Offset: 0x147429C
    float get_renderedHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x14742CC
    int get_layoutPriority();
    // protected System.Void .ctor()
    // Offset: 0x148570C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_Text* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_Text::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_Text*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1485D8C
    static void _cctor();
    // protected System.Void LoadFontAsset()
    // Offset: 0x14742D4
    void LoadFontAsset();
    // protected System.Void SetSharedMaterial(UnityEngine.Material mat)
    // Offset: 0x14742D8
    void SetSharedMaterial(::UnityEngine::Material* mat);
    // protected UnityEngine.Material GetMaterial(UnityEngine.Material mat)
    // Offset: 0x14742DC
    ::UnityEngine::Material* GetMaterial(::UnityEngine::Material* mat);
    // protected System.Void SetFontBaseMaterial(UnityEngine.Material mat)
    // Offset: 0x14742E4
    void SetFontBaseMaterial(::UnityEngine::Material* mat);
    // protected UnityEngine.Material[] GetSharedMaterials()
    // Offset: 0x14742E8
    ::ArrayW<::UnityEngine::Material*> GetSharedMaterials();
    // protected System.Void SetSharedMaterials(UnityEngine.Material[] materials)
    // Offset: 0x14742F0
    void SetSharedMaterials(::ArrayW<::UnityEngine::Material*> materials);
    // protected UnityEngine.Material[] GetMaterials(UnityEngine.Material[] mats)
    // Offset: 0x14742F4
    ::ArrayW<::UnityEngine::Material*> GetMaterials(::ArrayW<::UnityEngine::Material*> mats);
    // protected UnityEngine.Material CreateMaterialInstance(UnityEngine.Material source)
    // Offset: 0x14742FC
    ::UnityEngine::Material* CreateMaterialInstance(::UnityEngine::Material* source);
    // protected System.Void SetVertexColorGradient(TMPro.TMP_ColorGradient gradient)
    // Offset: 0x14743B8
    void SetVertexColorGradient(::TMPro::TMP_ColorGradient* gradient);
    // protected System.Void SetTextSortingOrder(TMPro.VertexSortingOrder order)
    // Offset: 0x1474490
    void SetTextSortingOrder(::TMPro::VertexSortingOrder order);
    // protected System.Void SetTextSortingOrder(System.Int32[] order)
    // Offset: 0x1474494
    void SetTextSortingOrder(::ArrayW<int> order);
    // protected System.Void SetFaceColor(UnityEngine.Color32 color)
    // Offset: 0x1474498
    void SetFaceColor(::UnityEngine::Color32 color);
    // protected System.Void SetOutlineColor(UnityEngine.Color32 color)
    // Offset: 0x147449C
    void SetOutlineColor(::UnityEngine::Color32 color);
    // protected System.Void SetOutlineThickness(System.Single thickness)
    // Offset: 0x14744A0
    void SetOutlineThickness(float thickness);
    // protected System.Void SetShaderDepth()
    // Offset: 0x14744A4
    void SetShaderDepth();
    // protected System.Void SetCulling()
    // Offset: 0x14744A8
    void SetCulling();
    // protected System.Single GetPaddingForMaterial()
    // Offset: 0x14744AC
    float GetPaddingForMaterial();
    // protected System.Single GetPaddingForMaterial(UnityEngine.Material mat)
    // Offset: 0x14744B4
    float GetPaddingForMaterial(::UnityEngine::Material* mat);
    // protected UnityEngine.Vector3[] GetTextContainerLocalCorners()
    // Offset: 0x14744BC
    ::ArrayW<::UnityEngine::Vector3> GetTextContainerLocalCorners();
    // public System.Void ForceMeshUpdate()
    // Offset: 0x14744C4
    void ForceMeshUpdate();
    // public System.Void ForceMeshUpdate(System.Boolean ignoreActiveState)
    // Offset: 0x14744C8
    void ForceMeshUpdate(bool ignoreActiveState);
    // System.Void SetTextInternal(System.String text)
    // Offset: 0x14744CC
    void SetTextInternal(::StringW text);
    // public System.Void UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    // Offset: 0x1474510
    void UpdateGeometry(::UnityEngine::Mesh* mesh, int index);
    // public System.Void UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    // Offset: 0x1474514
    void UpdateVertexData(::TMPro::TMP_VertexDataUpdateFlags flags);
    // public System.Void UpdateVertexData()
    // Offset: 0x1474518
    void UpdateVertexData();
    // public System.Void SetVertices(UnityEngine.Vector3[] vertices)
    // Offset: 0x147451C
    void SetVertices(::ArrayW<::UnityEngine::Vector3> vertices);
    // public System.Void UpdateMeshPadding()
    // Offset: 0x1474520
    void UpdateMeshPadding();
    // protected System.Void InternalCrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0x1474610
    void InternalCrossFadeColor(::UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // protected System.Void InternalCrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0x1474614
    void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // protected System.Void ParseInputText()
    // Offset: 0x1474618
    void ParseInputText();
    // public System.Void SetText(System.String text)
    // Offset: 0x1475384
    void SetText(::StringW text);
    // public System.Void SetText(System.String text, System.Boolean syncTextInputBox)
    // Offset: 0x147538C
    void SetText(::StringW text, bool syncTextInputBox);
    // public System.Void SetText(System.String text, System.Single arg0)
    // Offset: 0x14753EC
    void SetText(::StringW text, float arg0);
    // public System.Void SetText(System.String text, System.Single arg0, System.Single arg1)
    // Offset: 0x14755F0
    void SetText(::StringW text, float arg0, float arg1);
    // public System.Void SetText(System.String text, System.Single arg0, System.Single arg1, System.Single arg2)
    // Offset: 0x14753FC
    void SetText(::StringW text, float arg0, float arg1, float arg2);
    // public System.Void SetText(System.Text.StringBuilder text)
    // Offset: 0x14757D4
    void SetText(::System::Text::StringBuilder* text);
    // public System.Void SetCharArray(System.Char[] sourceText)
    // Offset: 0x1475F58
    void SetCharArray(::ArrayW<::Il2CppChar> sourceText);
    // public System.Void SetCharArray(System.Char[] sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0x147695C
    void SetCharArray(::ArrayW<::Il2CppChar> sourceText, int start, int length);
    // public System.Void SetCharArray(System.Int32[] sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0x1476D64
    void SetCharArray(::ArrayW<int> sourceText, int start, int length);
    // protected System.Void SetTextArrayToCharArray(System.Char[] sourceText, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer)
    // Offset: 0x1474F8C
    void SetTextArrayToCharArray(::ArrayW<::Il2CppChar> sourceText, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer);
    // protected System.Void StringToCharArray(System.String sourceText, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer)
    // Offset: 0x1474688
    void StringToCharArray(::StringW sourceText, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer);
    // protected System.Void StringBuilderToIntArray(System.Text.StringBuilder sourceText, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer)
    // Offset: 0x1475834
    void StringBuilderToIntArray(::System::Text::StringBuilder* sourceText, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.String sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1477A70
    bool ReplaceOpeningStyleTag(ByRef<::StringW> sourceText, int srcIndex, ByRef<int> srcOffset, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x14772A0
    bool ReplaceOpeningStyleTag(ByRef<::ArrayW<int>> sourceText, int srcIndex, ByRef<int> srcOffset, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Char[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x147648C
    bool ReplaceOpeningStyleTag(ByRef<::ArrayW<::Il2CppChar>> sourceText, int srcIndex, ByRef<int> srcOffset, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Text.StringBuilder sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1478244
    bool ReplaceOpeningStyleTag(ByRef<::System::Text::StringBuilder*> sourceText, int srcIndex, ByRef<int> srcOffset, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.String sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1477CE0
    bool ReplaceClosingStyleTag(ByRef<::StringW> sourceText, int srcIndex, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1477510
    bool ReplaceClosingStyleTag(ByRef<::ArrayW<int>> sourceText, int srcIndex, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Char[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x14766FC
    bool ReplaceClosingStyleTag(ByRef<::ArrayW<::Il2CppChar>> sourceText, int srcIndex, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Text.StringBuilder sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/TMPro.UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x14784B4
    bool ReplaceClosingStyleTag(ByRef<::System::Text::StringBuilder*> sourceText, int srcIndex, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>> charBuffer, ByRef<int> writeIndex);
    // private System.Boolean IsTagName(ref System.String text, System.String tag, System.Int32 index)
    // Offset: 0x1477968
    bool IsTagName(ByRef<::StringW> text, ::StringW tag, int index);
    // private System.Boolean IsTagName(ref System.Char[] text, System.String tag, System.Int32 index)
    // Offset: 0x147635C
    bool IsTagName(ByRef<::ArrayW<::Il2CppChar>> text, ::StringW tag, int index);
    // private System.Boolean IsTagName(ref System.Int32[] text, System.String tag, System.Int32 index)
    // Offset: 0x1477170
    bool IsTagName(ByRef<::ArrayW<int>> text, ::StringW tag, int index);
    // private System.Boolean IsTagName(ref System.Text.StringBuilder text, System.String tag, System.Int32 index)
    // Offset: 0x1478138
    bool IsTagName(ByRef<::System::Text::StringBuilder*> text, ::StringW tag, int index);
    // private System.Int32 GetTagHashCode(ref System.String text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x1478714
    int GetTagHashCode(ByRef<::StringW> text, int index, ByRef<int> closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Char[] text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x147884C
    int GetTagHashCode(ByRef<::ArrayW<::Il2CppChar>> text, int index, ByRef<int> closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Int32[] text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x14787CC
    int GetTagHashCode(ByRef<::ArrayW<int>> text, int index, ByRef<int> closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Text.StringBuilder text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x14788CC
    int GetTagHashCode(ByRef<::System::Text::StringBuilder*> text, int index, ByRef<int> closeIndex);
    // private System.Void ResizeInternalArray(ref T[] array)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    void ResizeInternalArray(ByRef<::ArrayW<T>> array) {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::TMP_Text::ResizeInternalArray");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "ResizeInternalArray", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(array)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodRethrow<void, false>(this, ___generic__method, byref(array));
    }
    // protected System.Void AddFloatToCharArray(System.Double number, ref System.Int32 index, System.Int32 precision)
    // Offset: 0x14755FC
    void AddFloatToCharArray(double number, ByRef<int> index, int precision);
    // protected System.Void AddIntToCharArray(System.Double number, ref System.Int32 index, System.Int32 precision)
    // Offset: 0x1478990
    void AddIntToCharArray(double number, ByRef<int> index, int precision);
    // protected System.Int32 SetArraySizes(TMPro.TMP_Text/TMPro.UnicodeChar[] chars)
    // Offset: 0x1478AFC
    int SetArraySizes(::ArrayW<::TMPro::TMP_Text::UnicodeChar> chars);
    // protected System.Void GenerateTextMesh()
    // Offset: 0x1478B04
    void GenerateTextMesh();
    // public UnityEngine.Vector2 GetPreferredValues()
    // Offset: 0x1478B08
    ::UnityEngine::Vector2 GetPreferredValues();
    // public UnityEngine.Vector2 GetPreferredValues(System.Single width, System.Single height)
    // Offset: 0x1478B84
    ::UnityEngine::Vector2 GetPreferredValues(float width, float height);
    // public UnityEngine.Vector2 GetPreferredValues(System.String text)
    // Offset: 0x1478D74
    ::UnityEngine::Vector2 GetPreferredValues(::StringW text);
    // public UnityEngine.Vector2 GetPreferredValues(System.String text, System.Single width, System.Single height)
    // Offset: 0x1478EF4
    ::UnityEngine::Vector2 GetPreferredValues(::StringW text, float width, float height);
    // protected System.Single GetPreferredWidth()
    // Offset: 0x1473F9C
    float GetPreferredWidth();
    // protected System.Single GetPreferredWidth(UnityEngine.Vector2 margin)
    // Offset: 0x1478CB0
    float GetPreferredWidth(::UnityEngine::Vector2 margin);
    // protected System.Single GetPreferredHeight()
    // Offset: 0x1474110
    float GetPreferredHeight();
    // protected System.Single GetPreferredHeight(UnityEngine.Vector2 margin)
    // Offset: 0x1478D08
    float GetPreferredHeight(::UnityEngine::Vector2 margin);
    // public UnityEngine.Vector2 GetRenderedValues()
    // Offset: 0x1479028
    ::UnityEngine::Vector2 GetRenderedValues();
    // public UnityEngine.Vector2 GetRenderedValues(System.Boolean onlyVisibleCharacters)
    // Offset: 0x14790F0
    ::UnityEngine::Vector2 GetRenderedValues(bool onlyVisibleCharacters);
    // protected System.Single GetRenderedWidth()
    // Offset: 0x1474298
    float GetRenderedWidth();
    // protected System.Single GetRenderedWidth(System.Boolean onlyVisibleCharacters)
    // Offset: 0x14794D4
    float GetRenderedWidth(bool onlyVisibleCharacters);
    // protected System.Single GetRenderedHeight()
    // Offset: 0x14742B4
    float GetRenderedHeight();
    // protected System.Single GetRenderedHeight(System.Boolean onlyVisibleCharacters)
    // Offset: 0x14794DC
    float GetRenderedHeight(bool onlyVisibleCharacters);
    // protected UnityEngine.Vector2 CalculatePreferredValues(System.Single defaultFontSize, UnityEngine.Vector2 marginSize, System.Boolean ignoreTextAutoSizing)
    // Offset: 0x14794F8
    ::UnityEngine::Vector2 CalculatePreferredValues(float defaultFontSize, ::UnityEngine::Vector2 marginSize, bool ignoreTextAutoSizing);
    // protected UnityEngine.Bounds GetCompoundBounds()
    // Offset: 0x14800CC
    ::UnityEngine::Bounds GetCompoundBounds();
    // protected UnityEngine.Bounds GetTextBounds()
    // Offset: 0x1473AE8
    ::UnityEngine::Bounds GetTextBounds();
    // protected UnityEngine.Bounds GetTextBounds(System.Boolean onlyVisibleCharacters)
    // Offset: 0x14791C8
    ::UnityEngine::Bounds GetTextBounds(bool onlyVisibleCharacters);
    // protected System.Void AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    // Offset: 0x14800D8
    void AdjustLineOffset(int startIndex, int endIndex, float offset);
    // protected System.Void ResizeLineExtents(System.Int32 size)
    // Offset: 0x14800DC
    void ResizeLineExtents(int size);
    // public TMPro.TMP_TextInfo GetTextInfo(System.String text)
    // Offset: 0x14802C0
    ::TMPro::TMP_TextInfo* GetTextInfo(::StringW text);
    // public System.Void ComputeMarginSize()
    // Offset: 0x14802C8
    void ComputeMarginSize();
    // protected System.Void SaveWordWrappingState(ref TMPro.WordWrapState state, System.Int32 index, System.Int32 count)
    // Offset: 0x147B3B8
    void SaveWordWrappingState(ByRef<::TMPro::WordWrapState> state, int index, int count);
    // protected System.Int32 RestoreWordWrappingState(ref TMPro.WordWrapState state)
    // Offset: 0x147FDFC
    int RestoreWordWrappingState(ByRef<::TMPro::WordWrapState> state);
    // protected System.Void SaveGlyphVertexInfo(System.Single padding, System.Single style_padding, UnityEngine.Color32 vertexColor)
    // Offset: 0x14802CC
    void SaveGlyphVertexInfo(float padding, float style_padding, ::UnityEngine::Color32 vertexColor);
    // protected System.Void SaveSpriteVertexInfo(UnityEngine.Color32 vertexColor)
    // Offset: 0x1480CCC
    void SaveSpriteVertexInfo(::UnityEngine::Color32 vertexColor);
    // protected System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4)
    // Offset: 0x14814FC
    void FillCharacterVertexBuffers(int i, int index_X4);
    // protected System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4, System.Boolean isVolumetric)
    // Offset: 0x1481B68
    void FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric);
    // protected System.Void FillSpriteVertexBuffers(System.Int32 i, System.Int32 index_X4)
    // Offset: 0x1482944
    void FillSpriteVertexBuffers(int i, int index_X4);
    // protected System.Void DrawUnderlineMesh(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, System.Single startScale, System.Single endScale, System.Single maxScale, System.Single sdfScale, UnityEngine.Color32 underlineColor)
    // Offset: 0x1482FB0
    void DrawUnderlineMesh(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ByRef<int> index, float startScale, float endScale, float maxScale, float sdfScale, ::UnityEngine::Color32 underlineColor);
    // protected System.Void DrawTextHighlight(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, UnityEngine.Color32 highlightColor)
    // Offset: 0x14841C4
    void DrawTextHighlight(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ByRef<int> index, ::UnityEngine::Color32 highlightColor);
    // protected System.Void LoadDefaultSettings()
    // Offset: 0x1484720
    void LoadDefaultSettings();
    // protected System.Void GetSpecialCharacters(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0x14848E4
    void GetSpecialCharacters(::TMPro::TMP_FontAsset* fontAsset);
    // protected System.Void ReplaceTagWithCharacter(System.Int32[] chars, System.Int32 insertionIndex, System.Int32 tagLength, System.Char c)
    // Offset: 0x1484B40
    void ReplaceTagWithCharacter(::ArrayW<int> chars, int insertionIndex, int tagLength, ::Il2CppChar c);
    // protected TMPro.TMP_FontAsset GetFontAssetForWeight(System.Int32 fontWeight)
    // Offset: 0x1484BC4
    ::TMPro::TMP_FontAsset* GetFontAssetForWeight(int fontWeight);
    // protected System.Void SetActiveSubMeshes(System.Boolean state)
    // Offset: 0x1484C48
    void SetActiveSubMeshes(bool state);
    // protected System.Void ClearSubMeshObjects()
    // Offset: 0x1484C4C
    void ClearSubMeshObjects();
    // public System.Void ClearMesh()
    // Offset: 0x1484C50
    void ClearMesh();
    // public System.Void ClearMesh(System.Boolean uploadGeometry)
    // Offset: 0x1484C54
    void ClearMesh(bool uploadGeometry);
    // public System.String GetParsedText()
    // Offset: 0x1484C58
    ::StringW GetParsedText();
    // protected UnityEngine.Vector2 PackUV(System.Single x, System.Single y, System.Single scale)
    // Offset: 0x1484164
    ::UnityEngine::Vector2 PackUV(float x, float y, float scale);
    // protected System.Single PackUV(System.Single x, System.Single y)
    // Offset: 0x1484D58
    float PackUV(float x, float y);
    // System.Void InternalUpdate()
    // Offset: 0x1484DB8
    void InternalUpdate();
    // protected System.Int32 HexToInt(System.Char hex)
    // Offset: 0x1484DBC
    int HexToInt(::Il2CppChar hex);
    // protected System.Int32 GetUTF16(System.String text, System.Int32 i)
    // Offset: 0x14778B4
    int GetUTF16(::StringW text, int i);
    // protected System.Int32 GetUTF16(System.Text.StringBuilder text, System.Int32 i)
    // Offset: 0x1478084
    int GetUTF16(::System::Text::StringBuilder* text, int i);
    // protected System.Int32 GetUTF32(System.String text, System.Int32 i)
    // Offset: 0x1477770
    int GetUTF32(::StringW text, int i);
    // protected System.Int32 GetUTF32(System.Text.StringBuilder text, System.Int32 i)
    // Offset: 0x1477F40
    int GetUTF32(::System::Text::StringBuilder* text, int i);
    // protected UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 tagCount)
    // Offset: 0x1484DE8
    ::UnityEngine::Color32 HexCharsToColor(::ArrayW<::Il2CppChar> hexChars, int tagCount);
    // protected UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1485240
    ::UnityEngine::Color32 HexCharsToColor(::ArrayW<::Il2CppChar> hexChars, int startIndex, int length);
    // private System.Int32 GetAttributeParameters(System.Char[] chars, System.Int32 startIndex, System.Int32 length, ref System.Single[] parameters)
    // Offset: 0x14854BC
    int GetAttributeParameters(::ArrayW<::Il2CppChar> chars, int startIndex, int length, ByRef<::ArrayW<float>> parameters);
    // protected System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x14856E8
    float ConvertToFloat(::ArrayW<::Il2CppChar> chars, int startIndex, int length);
    // protected System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length, out System.Int32 lastIndex)
    // Offset: 0x148557C
    float ConvertToFloat(::ArrayW<::Il2CppChar> chars, int startIndex, int length, ByRef<int> lastIndex);
    // protected System.Boolean ValidateHtmlTag(TMPro.TMP_Text/TMPro.UnicodeChar[] chars, System.Int32 startIndex, out System.Int32 endIndex)
    // Offset: 0x147B654
    bool ValidateHtmlTag(::ArrayW<::TMPro::TMP_Text::UnicodeChar> chars, int startIndex, ByRef<int> endIndex);
    // public override UnityEngine.Color get_color()
    // Offset: 0x14721C0
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Color Graphic::get_color()
    ::UnityEngine::Color get_color();
    // public override System.Void set_color(UnityEngine.Color value)
    // Offset: 0x14721D4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::set_color(UnityEngine.Color value)
    void set_color(::UnityEngine::Color value);
    // public override System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0x1474524
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    void CrossFadeColor(::UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // public override System.Void CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0x14745B8
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
  }; // TMPro.TMP_Text
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_Text::UnicodeChar, "TMPro", "TMP_Text/UnicodeChar");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::TMPro::TMP_Text::TextInputSources, "TMPro", "TMP_Text/TextInputSources");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::TMP_Text::get_text
// Il2CppName: get_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_text)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_text
// Il2CppName: set_text
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW)>(&TMPro::TMP_Text::set_text)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_text", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isRightToLeftText
// Il2CppName: get_isRightToLeftText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isRightToLeftText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isRightToLeftText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_isRightToLeftText
// Il2CppName: set_isRightToLeftText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_isRightToLeftText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_isRightToLeftText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_font
// Il2CppName: get_font
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_FontAsset* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_font)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_font
// Il2CppName: set_font
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_Text::set_font)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_font", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontSharedMaterial
// Il2CppName: get_fontSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontSharedMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontSharedMaterial
// Il2CppName: set_fontSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::set_fontSharedMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontSharedMaterials
// Il2CppName: get_fontSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontSharedMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontSharedMaterials
// Il2CppName: set_fontSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::UnityEngine::Material*>)>(&TMPro::TMP_Text::set_fontSharedMaterials)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontMaterial
// Il2CppName: get_fontMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontMaterial
// Il2CppName: set_fontMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::set_fontMaterial)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontMaterials
// Il2CppName: get_fontMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontMaterials
// Il2CppName: set_fontMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::UnityEngine::Material*>)>(&TMPro::TMP_Text::set_fontMaterials)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_alpha
// Il2CppName: get_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_alpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_alpha)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_enableVertexGradient
// Il2CppName: get_enableVertexGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_enableVertexGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_enableVertexGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_enableVertexGradient
// Il2CppName: set_enableVertexGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_enableVertexGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_enableVertexGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_colorGradient
// Il2CppName: get_colorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::VertexGradient (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_colorGradient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_colorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_colorGradient
// Il2CppName: set_colorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::VertexGradient)>(&TMPro::TMP_Text::set_colorGradient)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "VertexGradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_colorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_colorGradientPreset
// Il2CppName: get_colorGradientPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_ColorGradient* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_colorGradientPreset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_colorGradientPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_colorGradientPreset
// Il2CppName: set_colorGradientPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_ColorGradient*)>(&TMPro::TMP_Text::set_colorGradientPreset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_ColorGradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_colorGradientPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_spriteAsset
// Il2CppName: get_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_SpriteAsset* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_spriteAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_spriteAsset
// Il2CppName: set_spriteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_SpriteAsset*)>(&TMPro::TMP_Text::set_spriteAsset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_SpriteAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_spriteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_tintAllSprites
// Il2CppName: get_tintAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_tintAllSprites)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_tintAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_tintAllSprites
// Il2CppName: set_tintAllSprites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_tintAllSprites)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_tintAllSprites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_overrideColorTags
// Il2CppName: get_overrideColorTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_overrideColorTags)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_overrideColorTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_overrideColorTags
// Il2CppName: set_overrideColorTags
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_overrideColorTags)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_overrideColorTags", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_faceColor
// Il2CppName: get_faceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_faceColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_faceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_faceColor
// Il2CppName: set_faceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color32)>(&TMPro::TMP_Text::set_faceColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_faceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_outlineColor
// Il2CppName: get_outlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_outlineColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_outlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_outlineColor
// Il2CppName: set_outlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color32)>(&TMPro::TMP_Text::set_outlineColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_outlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_outlineWidth
// Il2CppName: get_outlineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_outlineWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_outlineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_outlineWidth
// Il2CppName: set_outlineWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_outlineWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_outlineWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontSize
// Il2CppName: get_fontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontSize
// Il2CppName: set_fontSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_fontSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontScale
// Il2CppName: get_fontScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontWeight
// Il2CppName: get_fontWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::FontWeight (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontWeight
// Il2CppName: set_fontWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::FontWeight)>(&TMPro::TMP_Text::set_fontWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "FontWeight")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_pixelsPerUnit
// Il2CppName: get_pixelsPerUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_pixelsPerUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_pixelsPerUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_enableAutoSizing
// Il2CppName: get_enableAutoSizing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_enableAutoSizing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_enableAutoSizing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_enableAutoSizing
// Il2CppName: set_enableAutoSizing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_enableAutoSizing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_enableAutoSizing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontSizeMin
// Il2CppName: get_fontSizeMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontSizeMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontSizeMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontSizeMin
// Il2CppName: set_fontSizeMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_fontSizeMin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontSizeMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontSizeMax
// Il2CppName: get_fontSizeMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontSizeMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontSizeMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontSizeMax
// Il2CppName: set_fontSizeMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_fontSizeMax)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontSizeMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_fontStyle
// Il2CppName: get_fontStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::FontStyles (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_fontStyle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_fontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_fontStyle
// Il2CppName: set_fontStyle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::FontStyles)>(&TMPro::TMP_Text::set_fontStyle)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "FontStyles")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_fontStyle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isUsingBold
// Il2CppName: get_isUsingBold
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isUsingBold)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isUsingBold", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_alignment
// Il2CppName: get_alignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TextAlignmentOptions (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_alignment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_alignment
// Il2CppName: set_alignment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TextAlignmentOptions)>(&TMPro::TMP_Text::set_alignment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TextAlignmentOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_alignment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_characterSpacing
// Il2CppName: get_characterSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_characterSpacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_characterSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_characterSpacing
// Il2CppName: set_characterSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_characterSpacing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_characterSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_wordSpacing
// Il2CppName: get_wordSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_wordSpacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_wordSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_wordSpacing
// Il2CppName: set_wordSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_wordSpacing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_wordSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_lineSpacing
// Il2CppName: get_lineSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_lineSpacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_lineSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_lineSpacing
// Il2CppName: set_lineSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_lineSpacing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_lineSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_lineSpacingAdjustment
// Il2CppName: get_lineSpacingAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_lineSpacingAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_lineSpacingAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_lineSpacingAdjustment
// Il2CppName: set_lineSpacingAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_lineSpacingAdjustment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_lineSpacingAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_paragraphSpacing
// Il2CppName: get_paragraphSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_paragraphSpacing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_paragraphSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_paragraphSpacing
// Il2CppName: set_paragraphSpacing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_paragraphSpacing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_paragraphSpacing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_characterWidthAdjustment
// Il2CppName: get_characterWidthAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_characterWidthAdjustment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_characterWidthAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_characterWidthAdjustment
// Il2CppName: set_characterWidthAdjustment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_characterWidthAdjustment)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_characterWidthAdjustment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_enableWordWrapping
// Il2CppName: get_enableWordWrapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_enableWordWrapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_enableWordWrapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_enableWordWrapping
// Il2CppName: set_enableWordWrapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_enableWordWrapping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_enableWordWrapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_wordWrappingRatios
// Il2CppName: get_wordWrappingRatios
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_wordWrappingRatios)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_wordWrappingRatios", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_wordWrappingRatios
// Il2CppName: set_wordWrappingRatios
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_wordWrappingRatios)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_wordWrappingRatios", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_overflowMode
// Il2CppName: get_overflowMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TextOverflowModes (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_overflowMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_overflowMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_overflowMode
// Il2CppName: set_overflowMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TextOverflowModes)>(&TMPro::TMP_Text::set_overflowMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TextOverflowModes")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_overflowMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isTextOverflowing
// Il2CppName: get_isTextOverflowing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isTextOverflowing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isTextOverflowing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_firstOverflowCharacterIndex
// Il2CppName: get_firstOverflowCharacterIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_firstOverflowCharacterIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_firstOverflowCharacterIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_linkedTextComponent
// Il2CppName: get_linkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_Text* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_linkedTextComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_linkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_linkedTextComponent
// Il2CppName: set_linkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_Text*)>(&TMPro::TMP_Text::set_linkedTextComponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_linkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isLinkedTextComponent
// Il2CppName: get_isLinkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isLinkedTextComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isLinkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_isLinkedTextComponent
// Il2CppName: set_isLinkedTextComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_isLinkedTextComponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_isLinkedTextComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isTextTruncated
// Il2CppName: get_isTextTruncated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isTextTruncated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isTextTruncated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_enableKerning
// Il2CppName: get_enableKerning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_enableKerning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_enableKerning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_enableKerning
// Il2CppName: set_enableKerning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_enableKerning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_enableKerning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_extraPadding
// Il2CppName: get_extraPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_extraPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_extraPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_extraPadding
// Il2CppName: set_extraPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_extraPadding)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_extraPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_richText
// Il2CppName: get_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_richText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_richText
// Il2CppName: set_richText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_richText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_richText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_parseCtrlCharacters
// Il2CppName: get_parseCtrlCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_parseCtrlCharacters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_parseCtrlCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_parseCtrlCharacters
// Il2CppName: set_parseCtrlCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_parseCtrlCharacters)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_parseCtrlCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isOverlay
// Il2CppName: get_isOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isOverlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_isOverlay
// Il2CppName: set_isOverlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_isOverlay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_isOverlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isOrthographic
// Il2CppName: get_isOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isOrthographic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_isOrthographic
// Il2CppName: set_isOrthographic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_isOrthographic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_isOrthographic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_enableCulling
// Il2CppName: get_enableCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_enableCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_enableCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_enableCulling
// Il2CppName: set_enableCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_enableCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_enableCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_ignoreRectMaskCulling
// Il2CppName: get_ignoreRectMaskCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_ignoreRectMaskCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_ignoreRectMaskCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_ignoreRectMaskCulling
// Il2CppName: set_ignoreRectMaskCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_ignoreRectMaskCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_ignoreRectMaskCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_ignoreVisibility
// Il2CppName: get_ignoreVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_ignoreVisibility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_ignoreVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_ignoreVisibility
// Il2CppName: set_ignoreVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_ignoreVisibility)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_ignoreVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_horizontalMapping
// Il2CppName: get_horizontalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TextureMappingOptions (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_horizontalMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_horizontalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_horizontalMapping
// Il2CppName: set_horizontalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TextureMappingOptions)>(&TMPro::TMP_Text::set_horizontalMapping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TextureMappingOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_horizontalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_verticalMapping
// Il2CppName: get_verticalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TextureMappingOptions (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_verticalMapping)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_verticalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_verticalMapping
// Il2CppName: set_verticalMapping
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TextureMappingOptions)>(&TMPro::TMP_Text::set_verticalMapping)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TextureMappingOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_verticalMapping", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_mappingUvLineOffset
// Il2CppName: get_mappingUvLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_mappingUvLineOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_mappingUvLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_mappingUvLineOffset
// Il2CppName: set_mappingUvLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::set_mappingUvLineOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_mappingUvLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_renderMode
// Il2CppName: get_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TextRenderFlags (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_renderMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_renderMode
// Il2CppName: set_renderMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TextRenderFlags)>(&TMPro::TMP_Text::set_renderMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "TextRenderFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_renderMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_geometrySortingOrder
// Il2CppName: get_geometrySortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::VertexSortingOrder (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_geometrySortingOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_geometrySortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_geometrySortingOrder
// Il2CppName: set_geometrySortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::VertexSortingOrder)>(&TMPro::TMP_Text::set_geometrySortingOrder)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("TMPro", "VertexSortingOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_geometrySortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_vertexBufferAutoSizeReduction
// Il2CppName: get_vertexBufferAutoSizeReduction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_vertexBufferAutoSizeReduction)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_vertexBufferAutoSizeReduction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_vertexBufferAutoSizeReduction
// Il2CppName: set_vertexBufferAutoSizeReduction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_vertexBufferAutoSizeReduction)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_vertexBufferAutoSizeReduction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_firstVisibleCharacter
// Il2CppName: get_firstVisibleCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_firstVisibleCharacter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_firstVisibleCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_firstVisibleCharacter
// Il2CppName: set_firstVisibleCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::set_firstVisibleCharacter)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_firstVisibleCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_maxVisibleCharacters
// Il2CppName: get_maxVisibleCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_maxVisibleCharacters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_maxVisibleCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_maxVisibleCharacters
// Il2CppName: set_maxVisibleCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::set_maxVisibleCharacters)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_maxVisibleCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_maxVisibleWords
// Il2CppName: get_maxVisibleWords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_maxVisibleWords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_maxVisibleWords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_maxVisibleWords
// Il2CppName: set_maxVisibleWords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::set_maxVisibleWords)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_maxVisibleWords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_maxVisibleLines
// Il2CppName: get_maxVisibleLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_maxVisibleLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_maxVisibleLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_maxVisibleLines
// Il2CppName: set_maxVisibleLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::set_maxVisibleLines)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_maxVisibleLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_useMaxVisibleDescender
// Il2CppName: get_useMaxVisibleDescender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_useMaxVisibleDescender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_useMaxVisibleDescender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_useMaxVisibleDescender
// Il2CppName: set_useMaxVisibleDescender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_useMaxVisibleDescender)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_useMaxVisibleDescender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_pageToDisplay
// Il2CppName: get_pageToDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_pageToDisplay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_pageToDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_pageToDisplay
// Il2CppName: set_pageToDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::set_pageToDisplay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_pageToDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_margin
// Il2CppName: get_margin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector4 (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_margin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_margin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_margin
// Il2CppName: set_margin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Vector4)>(&TMPro::TMP_Text::set_margin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_margin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_textInfo
// Il2CppName: get_textInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_TextInfo* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_textInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_textInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_havePropertiesChanged
// Il2CppName: get_havePropertiesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_havePropertiesChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_havePropertiesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_havePropertiesChanged
// Il2CppName: set_havePropertiesChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_havePropertiesChanged)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_havePropertiesChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isUsingLegacyAnimationComponent
// Il2CppName: get_isUsingLegacyAnimationComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isUsingLegacyAnimationComponent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isUsingLegacyAnimationComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_isUsingLegacyAnimationComponent
// Il2CppName: set_isUsingLegacyAnimationComponent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_isUsingLegacyAnimationComponent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_isUsingLegacyAnimationComponent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_transform
// Il2CppName: get_transform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_transform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_transform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_rectTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_autoSizeTextContainer
// Il2CppName: get_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_autoSizeTextContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_autoSizeTextContainer
// Il2CppName: set_autoSizeTextContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_autoSizeTextContainer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_autoSizeTextContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_mesh
// Il2CppName: get_mesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_mesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_mesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_isVolumetricText
// Il2CppName: get_isVolumetricText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_isVolumetricText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_isVolumetricText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_isVolumetricText
// Il2CppName: set_isVolumetricText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::set_isVolumetricText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_isVolumetricText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_textBounds
// Il2CppName: get_textBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_textBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_textBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_spriteAnimator
// Il2CppName: get_spriteAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_SpriteAnimator* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_spriteAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_spriteAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_flexibleHeight
// Il2CppName: get_flexibleHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_flexibleHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_flexibleHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_flexibleWidth
// Il2CppName: get_flexibleWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_flexibleWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_flexibleWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_minWidth
// Il2CppName: get_minWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_minWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_minWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_minHeight
// Il2CppName: get_minHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_minHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_minHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_maxWidth
// Il2CppName: get_maxWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_maxWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_maxWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_maxHeight
// Il2CppName: get_maxHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_maxHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_maxHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_layoutElement
// Il2CppName: get_layoutElement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::UI::LayoutElement* (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_layoutElement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_layoutElement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_preferredWidth
// Il2CppName: get_preferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_preferredWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_preferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_preferredHeight
// Il2CppName: get_preferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_preferredHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_preferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_renderedWidth
// Il2CppName: get_renderedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_renderedWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_renderedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_renderedHeight
// Il2CppName: get_renderedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_renderedHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_renderedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_layoutPriority
// Il2CppName: get_layoutPriority
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_layoutPriority)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_layoutPriority", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: TMPro::TMP_Text::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&TMPro::TMP_Text::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::LoadFontAsset
// Il2CppName: LoadFontAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::LoadFontAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "LoadFontAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetSharedMaterial
// Il2CppName: SetSharedMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::SetSharedMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetSharedMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetMaterial
// Il2CppName: GetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::GetMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetFontBaseMaterial
// Il2CppName: SetFontBaseMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::SetFontBaseMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetFontBaseMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetSharedMaterials
// Il2CppName: GetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetSharedMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetSharedMaterials
// Il2CppName: SetSharedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::UnityEngine::Material*>)>(&TMPro::TMP_Text::SetSharedMaterials)> {
  static const MethodInfo* get() {
    static auto* materials = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetSharedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materials});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetMaterials
// Il2CppName: GetMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Material*> (TMPro::TMP_Text::*)(::ArrayW<::UnityEngine::Material*>)>(&TMPro::TMP_Text::GetMaterials)> {
  static const MethodInfo* get() {
    static auto* mats = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Material"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mats});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::CreateMaterialInstance
// Il2CppName: CreateMaterialInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::CreateMaterialInstance)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "CreateMaterialInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetVertexColorGradient
// Il2CppName: SetVertexColorGradient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_ColorGradient*)>(&TMPro::TMP_Text::SetVertexColorGradient)> {
  static const MethodInfo* get() {
    static auto* gradient = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_ColorGradient")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetVertexColorGradient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gradient});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetTextSortingOrder
// Il2CppName: SetTextSortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::VertexSortingOrder)>(&TMPro::TMP_Text::SetTextSortingOrder)> {
  static const MethodInfo* get() {
    static auto* order = &::il2cpp_utils::GetClassFromName("TMPro", "VertexSortingOrder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetTextSortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetTextSortingOrder
// Il2CppName: SetTextSortingOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<int>)>(&TMPro::TMP_Text::SetTextSortingOrder)> {
  static const MethodInfo* get() {
    static auto* order = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetTextSortingOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{order});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetFaceColor
// Il2CppName: SetFaceColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color32)>(&TMPro::TMP_Text::SetFaceColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetFaceColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetOutlineColor
// Il2CppName: SetOutlineColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color32)>(&TMPro::TMP_Text::SetOutlineColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetOutlineColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetOutlineThickness
// Il2CppName: SetOutlineThickness
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float)>(&TMPro::TMP_Text::SetOutlineThickness)> {
  static const MethodInfo* get() {
    static auto* thickness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetOutlineThickness", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{thickness});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetShaderDepth
// Il2CppName: SetShaderDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::SetShaderDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetShaderDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetCulling
// Il2CppName: SetCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::SetCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetPaddingForMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPaddingForMaterial
// Il2CppName: GetPaddingForMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(::UnityEngine::Material*)>(&TMPro::TMP_Text::GetPaddingForMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPaddingForMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTextContainerLocalCorners
// Il2CppName: GetTextContainerLocalCorners
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Vector3> (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetTextContainerLocalCorners)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTextContainerLocalCorners", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::ForceMeshUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ForceMeshUpdate
// Il2CppName: ForceMeshUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::ForceMeshUpdate)> {
  static const MethodInfo* get() {
    static auto* ignoreActiveState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ForceMeshUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ignoreActiveState});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetTextInternal
// Il2CppName: SetTextInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW)>(&TMPro::TMP_Text::SetTextInternal)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetTextInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::UpdateGeometry
// Il2CppName: UpdateGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Mesh*, int)>(&TMPro::TMP_Text::UpdateGeometry)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "UpdateGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, index});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_VertexDataUpdateFlags)>(&TMPro::TMP_Text::UpdateVertexData)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_VertexDataUpdateFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::UpdateVertexData
// Il2CppName: UpdateVertexData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::UpdateVertexData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "UpdateVertexData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetVertices
// Il2CppName: SetVertices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::UnityEngine::Vector3>)>(&TMPro::TMP_Text::SetVertices)> {
  static const MethodInfo* get() {
    static auto* vertices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetVertices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertices});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::UpdateMeshPadding
// Il2CppName: UpdateMeshPadding
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::UpdateMeshPadding)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "UpdateMeshPadding", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::InternalCrossFadeColor
// Il2CppName: InternalCrossFadeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color, float, bool, bool)>(&TMPro::TMP_Text::InternalCrossFadeColor)> {
  static const MethodInfo* get() {
    static auto* targetColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignoreTimeScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useAlpha = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "InternalCrossFadeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetColor, duration, ignoreTimeScale, useAlpha});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::InternalCrossFadeAlpha
// Il2CppName: InternalCrossFadeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float, float, bool)>(&TMPro::TMP_Text::InternalCrossFadeAlpha)> {
  static const MethodInfo* get() {
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignoreTimeScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "InternalCrossFadeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alpha, duration, ignoreTimeScale});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ParseInputText
// Il2CppName: ParseInputText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::ParseInputText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ParseInputText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW)>(&TMPro::TMP_Text::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW, bool)>(&TMPro::TMP_Text::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* syncTextInputBox = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, syncTextInputBox});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW, float)>(&TMPro::TMP_Text::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, arg0});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW, float, float)>(&TMPro::TMP_Text::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, arg0, arg1});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW, float, float, float)>(&TMPro::TMP_Text::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* arg0 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* arg1 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* arg2 = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, arg0, arg1, arg2});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetText
// Il2CppName: SetText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::System::Text::StringBuilder*)>(&TMPro::TMP_Text::SetText)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetCharArray
// Il2CppName: SetCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>)>(&TMPro::TMP_Text::SetCharArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetCharArray
// Il2CppName: SetCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, int, int)>(&TMPro::TMP_Text::SetCharArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, start, length});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetCharArray
// Il2CppName: SetCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<int>, int, int)>(&TMPro::TMP_Text::SetCharArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, start, length});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetTextArrayToCharArray
// Il2CppName: SetTextArrayToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>)>(&TMPro::TMP_Text::SetTextArrayToCharArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetTextArrayToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, charBuffer});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::StringToCharArray
// Il2CppName: StringToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::StringW, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>)>(&TMPro::TMP_Text::StringToCharArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "StringToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, charBuffer});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::StringBuilderToIntArray
// Il2CppName: StringBuilderToIntArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::System::Text::StringBuilder*, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>)>(&TMPro::TMP_Text::StringBuilderToIntArray)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "StringBuilderToIntArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, charBuffer});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::StringW>, int, ByRef<int>, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceOpeningStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, srcOffset, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::ArrayW<int>>, int, ByRef<int>, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceOpeningStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, srcOffset, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::ArrayW<::Il2CppChar>>, int, ByRef<int>, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceOpeningStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, srcOffset, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceOpeningStyleTag
// Il2CppName: ReplaceOpeningStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::System::Text::StringBuilder*>, int, ByRef<int>, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceOpeningStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* srcOffset = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceOpeningStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, srcOffset, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::StringW>, int, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceClosingStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::ArrayW<int>>, int, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceClosingStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::ArrayW<::Il2CppChar>>, int, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceClosingStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceClosingStyleTag
// Il2CppName: ReplaceClosingStyleTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::System::Text::StringBuilder*>, int, ByRef<::ArrayW<::TMPro::TMP_Text::UnicodeChar>>, ByRef<int>)>(&TMPro::TMP_Text::ReplaceClosingStyleTag)> {
  static const MethodInfo* get() {
    static auto* sourceText = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->this_arg;
    static auto* srcIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* charBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->this_arg;
    static auto* writeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceClosingStyleTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sourceText, srcIndex, charBuffer, writeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::StringW>, ::StringW, int)>(&TMPro::TMP_Text::IsTagName)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, tag, index});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::ArrayW<::Il2CppChar>>, ::StringW, int)>(&TMPro::TMP_Text::IsTagName)> {
  static const MethodInfo* get() {
    static auto* text = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->this_arg;
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, tag, index});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::ArrayW<int>>, ::StringW, int)>(&TMPro::TMP_Text::IsTagName)> {
  static const MethodInfo* get() {
    static auto* text = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, tag, index});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::IsTagName
// Il2CppName: IsTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(ByRef<::System::Text::StringBuilder*>, ::StringW, int)>(&TMPro::TMP_Text::IsTagName)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->this_arg;
    static auto* tag = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "IsTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, tag, index});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(ByRef<::StringW>, int, ByRef<int>)>(&TMPro::TMP_Text::GetTagHashCode)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, index, closeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(ByRef<::ArrayW<::Il2CppChar>>, int, ByRef<int>)>(&TMPro::TMP_Text::GetTagHashCode)> {
  static const MethodInfo* get() {
    static auto* text = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, index, closeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(ByRef<::ArrayW<int>>, int, ByRef<int>)>(&TMPro::TMP_Text::GetTagHashCode)> {
  static const MethodInfo* get() {
    static auto* text = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, index, closeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTagHashCode
// Il2CppName: GetTagHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(ByRef<::System::Text::StringBuilder*>, int, ByRef<int>)>(&TMPro::TMP_Text::GetTagHashCode)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* closeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTagHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, index, closeIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ResizeInternalArray
// Il2CppName: ResizeInternalArray
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: TMPro::TMP_Text::AddFloatToCharArray
// Il2CppName: AddFloatToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(double, ByRef<int>, int)>(&TMPro::TMP_Text::AddFloatToCharArray)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "AddFloatToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, index, precision});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::AddIntToCharArray
// Il2CppName: AddIntToCharArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(double, ByRef<int>, int)>(&TMPro::TMP_Text::AddIntToCharArray)> {
  static const MethodInfo* get() {
    static auto* number = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* precision = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "AddIntToCharArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{number, index, precision});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetArraySizes
// Il2CppName: SetArraySizes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::ArrayW<::TMPro::TMP_Text::UnicodeChar>)>(&TMPro::TMP_Text::SetArraySizes)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetArraySizes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GenerateTextMesh
// Il2CppName: GenerateTextMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GenerateTextMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GenerateTextMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetPreferredValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)(float, float)>(&TMPro::TMP_Text::GetPreferredValues)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)(::StringW)>(&TMPro::TMP_Text::GetPreferredValues)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredValues
// Il2CppName: GetPreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)(::StringW, float, float)>(&TMPro::TMP_Text::GetPreferredValues)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, width, height});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredWidth
// Il2CppName: GetPreferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetPreferredWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredWidth
// Il2CppName: GetPreferredWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(::UnityEngine::Vector2)>(&TMPro::TMP_Text::GetPreferredWidth)> {
  static const MethodInfo* get() {
    static auto* margin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{margin});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredHeight
// Il2CppName: GetPreferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetPreferredHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetPreferredHeight
// Il2CppName: GetPreferredHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(::UnityEngine::Vector2)>(&TMPro::TMP_Text::GetPreferredHeight)> {
  static const MethodInfo* get() {
    static auto* margin = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetPreferredHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{margin});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetRenderedValues
// Il2CppName: GetRenderedValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetRenderedValues)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetRenderedValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetRenderedValues
// Il2CppName: GetRenderedValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::GetRenderedValues)> {
  static const MethodInfo* get() {
    static auto* onlyVisibleCharacters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetRenderedValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onlyVisibleCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetRenderedWidth
// Il2CppName: GetRenderedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetRenderedWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetRenderedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetRenderedWidth
// Il2CppName: GetRenderedWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::GetRenderedWidth)> {
  static const MethodInfo* get() {
    static auto* onlyVisibleCharacters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetRenderedWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onlyVisibleCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetRenderedHeight
// Il2CppName: GetRenderedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetRenderedHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetRenderedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetRenderedHeight
// Il2CppName: GetRenderedHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::GetRenderedHeight)> {
  static const MethodInfo* get() {
    static auto* onlyVisibleCharacters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetRenderedHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onlyVisibleCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::CalculatePreferredValues
// Il2CppName: CalculatePreferredValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)(float, ::UnityEngine::Vector2, bool)>(&TMPro::TMP_Text::CalculatePreferredValues)> {
  static const MethodInfo* get() {
    static auto* defaultFontSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* marginSize = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* ignoreTextAutoSizing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "CalculatePreferredValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{defaultFontSize, marginSize, ignoreTextAutoSizing});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetCompoundBounds
// Il2CppName: GetCompoundBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetCompoundBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetCompoundBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTextBounds
// Il2CppName: GetTextBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetTextBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTextBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTextBounds
// Il2CppName: GetTextBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::GetTextBounds)> {
  static const MethodInfo* get() {
    static auto* onlyVisibleCharacters = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTextBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onlyVisibleCharacters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::AdjustLineOffset
// Il2CppName: AdjustLineOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int, int, float)>(&TMPro::TMP_Text::AdjustLineOffset)> {
  static const MethodInfo* get() {
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "AdjustLineOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startIndex, endIndex, offset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ResizeLineExtents
// Il2CppName: ResizeLineExtents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::ResizeLineExtents)> {
  static const MethodInfo* get() {
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ResizeLineExtents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{size});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetTextInfo
// Il2CppName: GetTextInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_TextInfo* (TMPro::TMP_Text::*)(::StringW)>(&TMPro::TMP_Text::GetTextInfo)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetTextInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ComputeMarginSize
// Il2CppName: ComputeMarginSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::ComputeMarginSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ComputeMarginSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SaveWordWrappingState
// Il2CppName: SaveWordWrappingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(ByRef<::TMPro::WordWrapState>, int, int)>(&TMPro::TMP_Text::SaveWordWrappingState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("TMPro", "WordWrapState")->this_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SaveWordWrappingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, index, count});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::RestoreWordWrappingState
// Il2CppName: RestoreWordWrappingState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(ByRef<::TMPro::WordWrapState>)>(&TMPro::TMP_Text::RestoreWordWrappingState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("TMPro", "WordWrapState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "RestoreWordWrappingState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SaveGlyphVertexInfo
// Il2CppName: SaveGlyphVertexInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float, float, ::UnityEngine::Color32)>(&TMPro::TMP_Text::SaveGlyphVertexInfo)> {
  static const MethodInfo* get() {
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* style_padding = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* vertexColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SaveGlyphVertexInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{padding, style_padding, vertexColor});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SaveSpriteVertexInfo
// Il2CppName: SaveSpriteVertexInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color32)>(&TMPro::TMP_Text::SaveSpriteVertexInfo)> {
  static const MethodInfo* get() {
    static auto* vertexColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SaveSpriteVertexInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vertexColor});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::FillCharacterVertexBuffers
// Il2CppName: FillCharacterVertexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int, int)>(&TMPro::TMP_Text::FillCharacterVertexBuffers)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index_X4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "FillCharacterVertexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, index_X4});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::FillCharacterVertexBuffers
// Il2CppName: FillCharacterVertexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int, int, bool)>(&TMPro::TMP_Text::FillCharacterVertexBuffers)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index_X4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isVolumetric = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "FillCharacterVertexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, index_X4, isVolumetric});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::FillSpriteVertexBuffers
// Il2CppName: FillSpriteVertexBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(int, int)>(&TMPro::TMP_Text::FillSpriteVertexBuffers)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index_X4 = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "FillSpriteVertexBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, index_X4});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::DrawUnderlineMesh
// Il2CppName: DrawUnderlineMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<int>, float, float, float, float, ::UnityEngine::Color32)>(&TMPro::TMP_Text::DrawUnderlineMesh)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* startScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* maxScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sdfScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* underlineColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "DrawUnderlineMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, index, startScale, endScale, maxScale, sdfScale, underlineColor});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::DrawTextHighlight
// Il2CppName: DrawTextHighlight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ByRef<int>, ::UnityEngine::Color32)>(&TMPro::TMP_Text::DrawTextHighlight)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* highlightColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "DrawTextHighlight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, index, highlightColor});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::LoadDefaultSettings
// Il2CppName: LoadDefaultSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::LoadDefaultSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "LoadDefaultSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetSpecialCharacters
// Il2CppName: GetSpecialCharacters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::TMPro::TMP_FontAsset*)>(&TMPro::TMP_Text::GetSpecialCharacters)> {
  static const MethodInfo* get() {
    static auto* fontAsset = &::il2cpp_utils::GetClassFromName("TMPro", "TMP_FontAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetSpecialCharacters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontAsset});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ReplaceTagWithCharacter
// Il2CppName: ReplaceTagWithCharacter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::ArrayW<int>, int, int, ::Il2CppChar)>(&TMPro::TMP_Text::ReplaceTagWithCharacter)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* insertionIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* c = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ReplaceTagWithCharacter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, insertionIndex, tagLength, c});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetFontAssetForWeight
// Il2CppName: GetFontAssetForWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::TMPro::TMP_FontAsset* (TMPro::TMP_Text::*)(int)>(&TMPro::TMP_Text::GetFontAssetForWeight)> {
  static const MethodInfo* get() {
    static auto* fontWeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetFontAssetForWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fontWeight});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::SetActiveSubMeshes
// Il2CppName: SetActiveSubMeshes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::SetActiveSubMeshes)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "SetActiveSubMeshes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ClearSubMeshObjects
// Il2CppName: ClearSubMeshObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::ClearSubMeshObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ClearSubMeshObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::ClearMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ClearMesh
// Il2CppName: ClearMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(bool)>(&TMPro::TMP_Text::ClearMesh)> {
  static const MethodInfo* get() {
    static auto* uploadGeometry = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ClearMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uploadGeometry});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetParsedText
// Il2CppName: GetParsedText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::GetParsedText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetParsedText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::PackUV
// Il2CppName: PackUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (TMPro::TMP_Text::*)(float, float, float)>(&TMPro::TMP_Text::PackUV)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "PackUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y, scale});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::PackUV
// Il2CppName: PackUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(float, float)>(&TMPro::TMP_Text::PackUV)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "PackUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::InternalUpdate
// Il2CppName: InternalUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::InternalUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "InternalUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::HexToInt
// Il2CppName: HexToInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::Il2CppChar)>(&TMPro::TMP_Text::HexToInt)> {
  static const MethodInfo* get() {
    static auto* hex = &::il2cpp_utils::GetClassFromName("System", "Char")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "HexToInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetUTF16
// Il2CppName: GetUTF16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::StringW, int)>(&TMPro::TMP_Text::GetUTF16)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetUTF16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, i});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetUTF16
// Il2CppName: GetUTF16
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::System::Text::StringBuilder*, int)>(&TMPro::TMP_Text::GetUTF16)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetUTF16", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, i});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetUTF32
// Il2CppName: GetUTF32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::StringW, int)>(&TMPro::TMP_Text::GetUTF32)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetUTF32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, i});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetUTF32
// Il2CppName: GetUTF32
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::System::Text::StringBuilder*, int)>(&TMPro::TMP_Text::GetUTF32)> {
  static const MethodInfo* get() {
    static auto* text = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetUTF32", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{text, i});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::HexCharsToColor
// Il2CppName: HexCharsToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, int)>(&TMPro::TMP_Text::HexCharsToColor)> {
  static const MethodInfo* get() {
    static auto* hexChars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* tagCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "HexCharsToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hexChars, tagCount});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::HexCharsToColor
// Il2CppName: HexCharsToColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, int, int)>(&TMPro::TMP_Text::HexCharsToColor)> {
  static const MethodInfo* get() {
    static auto* hexChars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "HexCharsToColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hexChars, startIndex, length});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::GetAttributeParameters
// Il2CppName: GetAttributeParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, int, int, ByRef<::ArrayW<float>>)>(&TMPro::TMP_Text::GetAttributeParameters)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parameters = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "GetAttributeParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, startIndex, length, parameters});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ConvertToFloat
// Il2CppName: ConvertToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, int, int)>(&TMPro::TMP_Text::ConvertToFloat)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ConvertToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, startIndex, length});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ConvertToFloat
// Il2CppName: ConvertToFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (TMPro::TMP_Text::*)(::ArrayW<::Il2CppChar>, int, int, ByRef<int>)>(&TMPro::TMP_Text::ConvertToFloat)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Char"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* lastIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ConvertToFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, startIndex, length, lastIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::ValidateHtmlTag
// Il2CppName: ValidateHtmlTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (TMPro::TMP_Text::*)(::ArrayW<::TMPro::TMP_Text::UnicodeChar>, int, ByRef<int>)>(&TMPro::TMP_Text::ValidateHtmlTag)> {
  static const MethodInfo* get() {
    static auto* chars = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("TMPro", "TMP_Text/UnicodeChar"), 1)->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* endIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "ValidateHtmlTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{chars, startIndex, endIndex});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (TMPro::TMP_Text::*)()>(&TMPro::TMP_Text::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::set_color
// Il2CppName: set_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color)>(&TMPro::TMP_Text::set_color)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "set_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::CrossFadeColor
// Il2CppName: CrossFadeColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(::UnityEngine::Color, float, bool, bool)>(&TMPro::TMP_Text::CrossFadeColor)> {
  static const MethodInfo* get() {
    static auto* targetColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignoreTimeScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useAlpha = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "CrossFadeColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetColor, duration, ignoreTimeScale, useAlpha});
  }
};
// Writing MetadataGetter for method: TMPro::TMP_Text::CrossFadeAlpha
// Il2CppName: CrossFadeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (TMPro::TMP_Text::*)(float, float, bool)>(&TMPro::TMP_Text::CrossFadeAlpha)> {
  static const MethodInfo* get() {
    static auto* alpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* ignoreTimeScale = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(TMPro::TMP_Text*), "CrossFadeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{alpha, duration, ignoreTimeScale});
  }
};
