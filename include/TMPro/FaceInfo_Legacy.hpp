// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: TMPro
namespace TMPro {
  // Forward declaring type: FaceInfo_Legacy
  class FaceInfo_Legacy;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::TMPro::FaceInfo_Legacy);
DEFINE_IL2CPP_ARG_TYPE(::TMPro::FaceInfo_Legacy*, "TMPro", "FaceInfo_Legacy");
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.FaceInfo_Legacy
  // [TokenAttribute] Offset: FFFFFFFF
  class FaceInfo_Legacy : public ::Il2CppObject {
    public:
    public:
    // public System.String Name
    // Size: 0x8
    // Offset: 0x10
    ::StringW Name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single PointSize
    // Size: 0x4
    // Offset: 0x18
    float PointSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Scale
    // Size: 0x4
    // Offset: 0x1C
    float Scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 CharacterCount
    // Size: 0x4
    // Offset: 0x20
    int CharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single LineHeight
    // Size: 0x4
    // Offset: 0x24
    float LineHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Baseline
    // Size: 0x4
    // Offset: 0x28
    float Baseline;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Ascender
    // Size: 0x4
    // Offset: 0x2C
    float Ascender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CapHeight
    // Size: 0x4
    // Offset: 0x30
    float CapHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Descender
    // Size: 0x4
    // Offset: 0x34
    float Descender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single CenterLine
    // Size: 0x4
    // Offset: 0x38
    float CenterLine;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SuperscriptOffset
    // Size: 0x4
    // Offset: 0x3C
    float SuperscriptOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SubscriptOffset
    // Size: 0x4
    // Offset: 0x40
    float SubscriptOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single SubSize
    // Size: 0x4
    // Offset: 0x44
    float SubSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Underline
    // Size: 0x4
    // Offset: 0x48
    float Underline;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single UnderlineThickness
    // Size: 0x4
    // Offset: 0x4C
    float UnderlineThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single strikethrough
    // Size: 0x4
    // Offset: 0x50
    float strikethrough;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single strikethroughThickness
    // Size: 0x4
    // Offset: 0x54
    float strikethroughThickness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single TabWidth
    // Size: 0x4
    // Offset: 0x58
    float TabWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single Padding
    // Size: 0x4
    // Offset: 0x5C
    float Padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single AtlasWidth
    // Size: 0x4
    // Offset: 0x60
    float AtlasWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single AtlasHeight
    // Size: 0x4
    // Offset: 0x64
    float AtlasHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.String Name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Name();
    // Get instance field reference: public System.Single PointSize
    [[deprecated("Use field access instead!")]] float& dyn_PointSize();
    // Get instance field reference: public System.Single Scale
    [[deprecated("Use field access instead!")]] float& dyn_Scale();
    // Get instance field reference: public System.Int32 CharacterCount
    [[deprecated("Use field access instead!")]] int& dyn_CharacterCount();
    // Get instance field reference: public System.Single LineHeight
    [[deprecated("Use field access instead!")]] float& dyn_LineHeight();
    // Get instance field reference: public System.Single Baseline
    [[deprecated("Use field access instead!")]] float& dyn_Baseline();
    // Get instance field reference: public System.Single Ascender
    [[deprecated("Use field access instead!")]] float& dyn_Ascender();
    // Get instance field reference: public System.Single CapHeight
    [[deprecated("Use field access instead!")]] float& dyn_CapHeight();
    // Get instance field reference: public System.Single Descender
    [[deprecated("Use field access instead!")]] float& dyn_Descender();
    // Get instance field reference: public System.Single CenterLine
    [[deprecated("Use field access instead!")]] float& dyn_CenterLine();
    // Get instance field reference: public System.Single SuperscriptOffset
    [[deprecated("Use field access instead!")]] float& dyn_SuperscriptOffset();
    // Get instance field reference: public System.Single SubscriptOffset
    [[deprecated("Use field access instead!")]] float& dyn_SubscriptOffset();
    // Get instance field reference: public System.Single SubSize
    [[deprecated("Use field access instead!")]] float& dyn_SubSize();
    // Get instance field reference: public System.Single Underline
    [[deprecated("Use field access instead!")]] float& dyn_Underline();
    // Get instance field reference: public System.Single UnderlineThickness
    [[deprecated("Use field access instead!")]] float& dyn_UnderlineThickness();
    // Get instance field reference: public System.Single strikethrough
    [[deprecated("Use field access instead!")]] float& dyn_strikethrough();
    // Get instance field reference: public System.Single strikethroughThickness
    [[deprecated("Use field access instead!")]] float& dyn_strikethroughThickness();
    // Get instance field reference: public System.Single TabWidth
    [[deprecated("Use field access instead!")]] float& dyn_TabWidth();
    // Get instance field reference: public System.Single Padding
    [[deprecated("Use field access instead!")]] float& dyn_Padding();
    // Get instance field reference: public System.Single AtlasWidth
    [[deprecated("Use field access instead!")]] float& dyn_AtlasWidth();
    // Get instance field reference: public System.Single AtlasHeight
    [[deprecated("Use field access instead!")]] float& dyn_AtlasHeight();
    // public System.Void .ctor()
    // Offset: 0x14A7C88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FaceInfo_Legacy* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::TMPro::FaceInfo_Legacy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FaceInfo_Legacy*, creationType>()));
    }
  }; // TMPro.FaceInfo_Legacy
  #pragma pack(pop)
  static check_size<sizeof(FaceInfo_Legacy), 100 + sizeof(float)> __TMPro_FaceInfo_LegacySizeCheck;
  static_assert(sizeof(FaceInfo_Legacy) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: TMPro::FaceInfo_Legacy::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
