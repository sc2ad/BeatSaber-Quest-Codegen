// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: DemoGUIMessage
  class DemoGUIMessage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::DemoGUIMessage);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::DemoGUIMessage*, "RootMotion", "DemoGUIMessage");
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.DemoGUIMessage
  // [TokenAttribute] Offset: FFFFFFFF
  class DemoGUIMessage : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String text
    // Size: 0x8
    // Offset: 0x18
    ::StringW text;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x20
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String text
    [[deprecated("Use field access instead!")]] ::StringW& dyn_text();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // public System.Void .ctor()
    // Offset: 0x22544E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DemoGUIMessage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::DemoGUIMessage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DemoGUIMessage*, creationType>()));
    }
    // private System.Void OnGUI()
    // Offset: 0x22543A0
    void OnGUI();
  }; // RootMotion.DemoGUIMessage
  #pragma pack(pop)
  static check_size<sizeof(DemoGUIMessage), 32 + sizeof(::UnityEngine::Color)> __RootMotion_DemoGUIMessageSizeCheck;
  static_assert(sizeof(DemoGUIMessage) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::DemoGUIMessage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::DemoGUIMessage::OnGUI
// Il2CppName: OnGUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::DemoGUIMessage::*)()>(&RootMotion::DemoGUIMessage::OnGUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::DemoGUIMessage*), "OnGUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
