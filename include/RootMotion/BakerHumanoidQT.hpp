// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Avatar
  class Avatar;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Completed forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: BakerHumanoidQT
  class BakerHumanoidQT;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::BakerHumanoidQT);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::BakerHumanoidQT*, "RootMotion", "BakerHumanoidQT");
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x9D
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.BakerHumanoidQT
  // [TokenAttribute] Offset: FFFFFFFF
  class BakerHumanoidQT : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Transform transform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.String Qx
    // Size: 0x8
    // Offset: 0x18
    ::StringW Qx;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Qy
    // Size: 0x8
    // Offset: 0x20
    ::StringW Qy;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Qz
    // Size: 0x8
    // Offset: 0x28
    ::StringW Qz;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Qw
    // Size: 0x8
    // Offset: 0x30
    ::StringW Qw;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Tx
    // Size: 0x8
    // Offset: 0x38
    ::StringW Tx;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Ty
    // Size: 0x8
    // Offset: 0x40
    ::StringW Ty;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String Tz
    // Size: 0x8
    // Offset: 0x48
    ::StringW Tz;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.AnimationCurve rotX
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AnimationCurve* rotX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve rotY
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::AnimationCurve* rotY;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve rotZ
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::AnimationCurve* rotZ;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve rotW
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::AnimationCurve* rotW;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve posX
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::AnimationCurve* posX;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve posY
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AnimationCurve* posY;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.AnimationCurve posZ
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::AnimationCurve* posZ;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AvatarIKGoal goal
    // Size: 0x4
    // Offset: 0x88
    ::UnityEngine::AvatarIKGoal goal;
    // Field size check
    static_assert(sizeof(::UnityEngine::AvatarIKGoal) == 0x4);
    // private UnityEngine.Quaternion lastQ
    // Size: 0x10
    // Offset: 0x8C
    ::UnityEngine::Quaternion lastQ;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean lastQSet
    // Size: 0x1
    // Offset: 0x9C
    bool lastQSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transform();
    // Get instance field reference: private System.String Qx
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Qx();
    // Get instance field reference: private System.String Qy
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Qy();
    // Get instance field reference: private System.String Qz
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Qz();
    // Get instance field reference: private System.String Qw
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Qw();
    // Get instance field reference: private System.String Tx
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Tx();
    // Get instance field reference: private System.String Ty
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Ty();
    // Get instance field reference: private System.String Tz
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Tz();
    // Get instance field reference: public UnityEngine.AnimationCurve rotX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotX();
    // Get instance field reference: public UnityEngine.AnimationCurve rotY
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotY();
    // Get instance field reference: public UnityEngine.AnimationCurve rotZ
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotZ();
    // Get instance field reference: public UnityEngine.AnimationCurve rotW
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_rotW();
    // Get instance field reference: public UnityEngine.AnimationCurve posX
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_posX();
    // Get instance field reference: public UnityEngine.AnimationCurve posY
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_posY();
    // Get instance field reference: public UnityEngine.AnimationCurve posZ
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_posZ();
    // Get instance field reference: private UnityEngine.AvatarIKGoal goal
    [[deprecated("Use field access instead!")]] ::UnityEngine::AvatarIKGoal& dyn_goal();
    // Get instance field reference: private UnityEngine.Quaternion lastQ
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastQ();
    // Get instance field reference: private System.Boolean lastQSet
    [[deprecated("Use field access instead!")]] bool& dyn_lastQSet();
    // public System.Void .ctor(System.String name)
    // Offset: 0x22A189C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BakerHumanoidQT* New_ctor(::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BakerHumanoidQT*, creationType>(name)));
    }
    // public System.Void .ctor(UnityEngine.Transform transform, UnityEngine.AvatarIKGoal goal, System.String name)
    // Offset: 0x22A1AE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BakerHumanoidQT* New_ctor(::UnityEngine::Transform* transform, ::UnityEngine::AvatarIKGoal goal, ::StringW name) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::BakerHumanoidQT::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BakerHumanoidQT*, creationType>(transform, goal, name)));
    }
    // public System.Void Reset()
    // Offset: 0x22A19BC
    void Reset();
    // public System.Void SetIKKeyframes(System.Single time, UnityEngine.Avatar avatar, System.Single humanScale, UnityEngine.Vector3 bodyPosition, UnityEngine.Quaternion bodyRotation)
    // Offset: 0x22A1C20
    void SetIKKeyframes(float time, ::UnityEngine::Avatar* avatar, float humanScale, ::UnityEngine::Vector3 bodyPosition, ::UnityEngine::Quaternion bodyRotation);
    // public System.Void SetKeyframes(System.Single time, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x22A20C8
    void SetKeyframes(float time, ::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
    // public System.Void MoveLastKeyframes(System.Single time)
    // Offset: 0x22A21C4
    void MoveLastKeyframes(float time);
    // public System.Void SetLoopFrame(System.Single time)
    // Offset: 0x22A22C0
    void SetLoopFrame(float time);
    // private System.Void MoveLastKeyframe(System.Single time, UnityEngine.AnimationCurve curve)
    // Offset: 0x22A2238
    void MoveLastKeyframe(float time, ::UnityEngine::AnimationCurve* curve);
    // public System.Void MultiplyLength(UnityEngine.AnimationCurve curve, System.Single mlp)
    // Offset: 0x22A2580
    void MultiplyLength(::UnityEngine::AnimationCurve* curve, float mlp);
    // public System.Void SetCurves(ref UnityEngine.AnimationClip clip, System.Single maxError, System.Single lengthMlp)
    // Offset: 0x22A2634
    void SetCurves(ByRef<::UnityEngine::AnimationClip*> clip, float maxError, float lengthMlp);
  }; // RootMotion.BakerHumanoidQT
  #pragma pack(pop)
  static check_size<sizeof(BakerHumanoidQT), 156 + sizeof(bool)> __RootMotion_BakerHumanoidQTSizeCheck;
  static_assert(sizeof(BakerHumanoidQT) == 0x9D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)()>(&RootMotion::BakerHumanoidQT::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::SetIKKeyframes
// Il2CppName: SetIKKeyframes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(float, ::UnityEngine::Avatar*, float, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&RootMotion::BakerHumanoidQT::SetIKKeyframes)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* avatar = &::il2cpp_utils::GetClassFromName("UnityEngine", "Avatar")->byval_arg;
    static auto* humanScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bodyPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* bodyRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "SetIKKeyframes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, avatar, humanScale, bodyPosition, bodyRotation});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::SetKeyframes
// Il2CppName: SetKeyframes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(float, ::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&RootMotion::BakerHumanoidQT::SetKeyframes)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "SetKeyframes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, pos, rot});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::MoveLastKeyframes
// Il2CppName: MoveLastKeyframes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(float)>(&RootMotion::BakerHumanoidQT::MoveLastKeyframes)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "MoveLastKeyframes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::SetLoopFrame
// Il2CppName: SetLoopFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(float)>(&RootMotion::BakerHumanoidQT::SetLoopFrame)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "SetLoopFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::MoveLastKeyframe
// Il2CppName: MoveLastKeyframe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(float, ::UnityEngine::AnimationCurve*)>(&RootMotion::BakerHumanoidQT::MoveLastKeyframe)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "MoveLastKeyframe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, curve});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::MultiplyLength
// Il2CppName: MultiplyLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(::UnityEngine::AnimationCurve*, float)>(&RootMotion::BakerHumanoidQT::MultiplyLength)> {
  static const MethodInfo* get() {
    static auto* curve = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationCurve")->byval_arg;
    static auto* mlp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "MultiplyLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curve, mlp});
  }
};
// Writing MetadataGetter for method: RootMotion::BakerHumanoidQT::SetCurves
// Il2CppName: SetCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::BakerHumanoidQT::*)(ByRef<::UnityEngine::AnimationClip*>, float, float)>(&RootMotion::BakerHumanoidQT::SetCurves)> {
  static const MethodInfo* get() {
    static auto* clip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AnimationClip")->this_arg;
    static auto* maxError = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lengthMlp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BakerHumanoidQT*), "SetCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clip, maxError, lengthMlp});
  }
};
