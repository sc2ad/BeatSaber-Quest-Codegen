// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: BipedNaming
  class BipedNaming;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::BipedNaming);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::BipedNaming*, "RootMotion", "BipedNaming");
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.BipedNaming
  // [TokenAttribute] Offset: FFFFFFFF
  class BipedNaming : public ::Il2CppObject {
    public:
    // Nested type: ::RootMotion::BipedNaming::BoneType
    struct BoneType;
    // Nested type: ::RootMotion::BipedNaming::BoneSide
    struct BoneSide;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RootMotion.BipedNaming/RootMotion.BoneType
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BoneType
      constexpr BoneType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Unassigned
      static constexpr const int Unassigned = 0;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Unassigned
      static ::RootMotion::BipedNaming::BoneType _get_Unassigned();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Unassigned
      static void _set_Unassigned(::RootMotion::BipedNaming::BoneType value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Spine
      static constexpr const int Spine = 1;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Spine
      static ::RootMotion::BipedNaming::BoneType _get_Spine();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Spine
      static void _set_Spine(::RootMotion::BipedNaming::BoneType value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Head
      static constexpr const int Head = 2;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Head
      static ::RootMotion::BipedNaming::BoneType _get_Head();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Head
      static void _set_Head(::RootMotion::BipedNaming::BoneType value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Arm
      static constexpr const int Arm = 3;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Arm
      static ::RootMotion::BipedNaming::BoneType _get_Arm();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Arm
      static void _set_Arm(::RootMotion::BipedNaming::BoneType value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Leg
      static constexpr const int Leg = 4;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Leg
      static ::RootMotion::BipedNaming::BoneType _get_Leg();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Leg
      static void _set_Leg(::RootMotion::BipedNaming::BoneType value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Tail
      static constexpr const int Tail = 5;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Tail
      static ::RootMotion::BipedNaming::BoneType _get_Tail();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Tail
      static void _set_Tail(::RootMotion::BipedNaming::BoneType value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneType Eye
      static constexpr const int Eye = 6;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneType Eye
      static ::RootMotion::BipedNaming::BoneType _get_Eye();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneType Eye
      static void _set_Eye(::RootMotion::BipedNaming::BoneType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RootMotion.BipedNaming/RootMotion.BoneType
    #pragma pack(pop)
    static check_size<sizeof(BipedNaming::BoneType), 0 + sizeof(int)> __RootMotion_BipedNaming_BoneTypeSizeCheck;
    static_assert(sizeof(BipedNaming::BoneType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RootMotion.BipedNaming/RootMotion.BoneSide
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneSide/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BoneSide
      constexpr BoneSide(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneSide Center
      static constexpr const int Center = 0;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Center
      static ::RootMotion::BipedNaming::BoneSide _get_Center();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Center
      static void _set_Center(::RootMotion::BipedNaming::BoneSide value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneSide Left
      static constexpr const int Left = 1;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Left
      static ::RootMotion::BipedNaming::BoneSide _get_Left();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Left
      static void _set_Left(::RootMotion::BipedNaming::BoneSide value);
      // static field const value: static public RootMotion.BipedNaming/RootMotion.BoneSide Right
      static constexpr const int Right = 2;
      // Get static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Right
      static ::RootMotion::BipedNaming::BoneSide _get_Right();
      // Set static field: static public RootMotion.BipedNaming/RootMotion.BoneSide Right
      static void _set_Right(::RootMotion::BipedNaming::BoneSide value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RootMotion.BipedNaming/RootMotion.BoneSide
    #pragma pack(pop)
    static check_size<sizeof(BipedNaming::BoneSide), 0 + sizeof(int)> __RootMotion_BipedNaming_BoneSideSizeCheck;
    static_assert(sizeof(BipedNaming::BoneSide) == 0x4);
    // Get static field: static public System.String[] typeLeft
    static ::ArrayW<::StringW> _get_typeLeft();
    // Set static field: static public System.String[] typeLeft
    static void _set_typeLeft(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeRight
    static ::ArrayW<::StringW> _get_typeRight();
    // Set static field: static public System.String[] typeRight
    static void _set_typeRight(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeSpine
    static ::ArrayW<::StringW> _get_typeSpine();
    // Set static field: static public System.String[] typeSpine
    static void _set_typeSpine(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeHead
    static ::ArrayW<::StringW> _get_typeHead();
    // Set static field: static public System.String[] typeHead
    static void _set_typeHead(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeArm
    static ::ArrayW<::StringW> _get_typeArm();
    // Set static field: static public System.String[] typeArm
    static void _set_typeArm(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeLeg
    static ::ArrayW<::StringW> _get_typeLeg();
    // Set static field: static public System.String[] typeLeg
    static void _set_typeLeg(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeTail
    static ::ArrayW<::StringW> _get_typeTail();
    // Set static field: static public System.String[] typeTail
    static void _set_typeTail(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeEye
    static ::ArrayW<::StringW> _get_typeEye();
    // Set static field: static public System.String[] typeEye
    static void _set_typeEye(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExclude
    static ::ArrayW<::StringW> _get_typeExclude();
    // Set static field: static public System.String[] typeExclude
    static void _set_typeExclude(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExcludeSpine
    static ::ArrayW<::StringW> _get_typeExcludeSpine();
    // Set static field: static public System.String[] typeExcludeSpine
    static void _set_typeExcludeSpine(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExcludeHead
    static ::ArrayW<::StringW> _get_typeExcludeHead();
    // Set static field: static public System.String[] typeExcludeHead
    static void _set_typeExcludeHead(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExcludeArm
    static ::ArrayW<::StringW> _get_typeExcludeArm();
    // Set static field: static public System.String[] typeExcludeArm
    static void _set_typeExcludeArm(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExcludeLeg
    static ::ArrayW<::StringW> _get_typeExcludeLeg();
    // Set static field: static public System.String[] typeExcludeLeg
    static void _set_typeExcludeLeg(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExcludeTail
    static ::ArrayW<::StringW> _get_typeExcludeTail();
    // Set static field: static public System.String[] typeExcludeTail
    static void _set_typeExcludeTail(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] typeExcludeEye
    static ::ArrayW<::StringW> _get_typeExcludeEye();
    // Set static field: static public System.String[] typeExcludeEye
    static void _set_typeExcludeEye(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] pelvis
    static ::ArrayW<::StringW> _get_pelvis();
    // Set static field: static public System.String[] pelvis
    static void _set_pelvis(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] hand
    static ::ArrayW<::StringW> _get_hand();
    // Set static field: static public System.String[] hand
    static void _set_hand(::ArrayW<::StringW> value);
    // Get static field: static public System.String[] foot
    static ::ArrayW<::StringW> _get_foot();
    // Set static field: static public System.String[] foot
    static void _set_foot(::ArrayW<::StringW> value);
    // static private System.Void .cctor()
    // Offset: 0x224F440
    static void _cctor();
    // static public UnityEngine.Transform[] GetBonesOfType(RootMotion.BipedNaming/RootMotion.BoneType boneType, UnityEngine.Transform[] bones)
    // Offset: 0x224E1E4
    static ::ArrayW<::UnityEngine::Transform*> GetBonesOfType(::RootMotion::BipedNaming::BoneType boneType, ::ArrayW<::UnityEngine::Transform*> bones);
    // static public UnityEngine.Transform[] GetBonesOfSide(RootMotion.BipedNaming/RootMotion.BoneSide boneSide, UnityEngine.Transform[] bones)
    // Offset: 0x224E4E4
    static ::ArrayW<::UnityEngine::Transform*> GetBonesOfSide(::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::UnityEngine::Transform*> bones);
    // static public UnityEngine.Transform[] GetBonesOfTypeAndSide(RootMotion.BipedNaming/RootMotion.BoneType boneType, RootMotion.BipedNaming/RootMotion.BoneSide boneSide, UnityEngine.Transform[] bones)
    // Offset: 0x224E734
    static ::ArrayW<::UnityEngine::Transform*> GetBonesOfTypeAndSide(::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::UnityEngine::Transform*> bones);
    // static public UnityEngine.Transform GetFirstBoneOfTypeAndSide(RootMotion.BipedNaming/RootMotion.BoneType boneType, RootMotion.BipedNaming/RootMotion.BoneSide boneSide, UnityEngine.Transform[] bones)
    // Offset: 0x224E7B8
    static ::UnityEngine::Transform* GetFirstBoneOfTypeAndSide(::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::UnityEngine::Transform*> bones);
    // static public UnityEngine.Transform GetNamingMatch(UnityEngine.Transform[] transforms, params System.String[][] namings)
    // Offset: 0x224E864
    static ::UnityEngine::Transform* GetNamingMatch(::ArrayW<::UnityEngine::Transform*> transforms, ::ArrayW<::ArrayW<::StringW>> namings);
    // static public RootMotion.BipedNaming/RootMotion.BoneType GetBoneType(System.String boneName)
    // Offset: 0x224E394
    static ::RootMotion::BipedNaming::BoneType GetBoneType(::StringW boneName);
    // static public RootMotion.BipedNaming/RootMotion.BoneSide GetBoneSide(System.String boneName)
    // Offset: 0x224E694
    static ::RootMotion::BipedNaming::BoneSide GetBoneSide(::StringW boneName);
    // static public UnityEngine.Transform GetBone(UnityEngine.Transform[] transforms, RootMotion.BipedNaming/RootMotion.BoneType boneType, RootMotion.BipedNaming/RootMotion.BoneSide boneSide, params System.String[][] namings)
    // Offset: 0x224F0A4
    static ::UnityEngine::Transform* GetBone(::ArrayW<::UnityEngine::Transform*> transforms, ::RootMotion::BipedNaming::BoneType boneType, ::RootMotion::BipedNaming::BoneSide boneSide, ::ArrayW<::ArrayW<::StringW>> namings);
    // static private System.Boolean isLeft(System.String boneName)
    // Offset: 0x224EEBC
    static bool isLeft(::StringW boneName);
    // static private System.Boolean isRight(System.String boneName)
    // Offset: 0x224EFB0
    static bool isRight(::StringW boneName);
    // static private System.Boolean isSpine(System.String boneName)
    // Offset: 0x224EA84
    static bool isSpine(::StringW boneName);
    // static private System.Boolean isHead(System.String boneName)
    // Offset: 0x224EB38
    static bool isHead(::StringW boneName);
    // static private System.Boolean isArm(System.String boneName)
    // Offset: 0x224EBEC
    static bool isArm(::StringW boneName);
    // static private System.Boolean isLeg(System.String boneName)
    // Offset: 0x224ECA0
    static bool isLeg(::StringW boneName);
    // static private System.Boolean isTail(System.String boneName)
    // Offset: 0x224ED54
    static bool isTail(::StringW boneName);
    // static private System.Boolean isEye(System.String boneName)
    // Offset: 0x224EE08
    static bool isEye(::StringW boneName);
    // static private System.Boolean isTypeExclude(System.String boneName)
    // Offset: 0x224F2B8
    static bool isTypeExclude(::StringW boneName);
    // static private System.Boolean matchesNaming(System.String boneName, System.String[] namingConvention)
    // Offset: 0x224E998
    static bool matchesNaming(::StringW boneName, ::ArrayW<::StringW> namingConvention);
    // static private System.Boolean excludesNaming(System.String boneName, System.String[] namingConvention)
    // Offset: 0x224F228
    static bool excludesNaming(::StringW boneName, ::ArrayW<::StringW> namingConvention);
    // static private System.Boolean matchesLastLetter(System.String boneName, System.String[] namingConvention)
    // Offset: 0x224F328
    static bool matchesLastLetter(::StringW boneName, ::ArrayW<::StringW> namingConvention);
    // static private System.Boolean LastLetterIs(System.String boneName, System.String letter)
    // Offset: 0x224F400
    static bool LastLetterIs(::StringW boneName, ::StringW letter);
    // static private System.String firstLetter(System.String boneName)
    // Offset: 0x224F1AC
    static ::StringW firstLetter(::StringW boneName);
    // static private System.String lastLetter(System.String boneName)
    // Offset: 0x224F134
    static ::StringW lastLetter(::StringW boneName);
  }; // RootMotion.BipedNaming
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::BipedNaming::BoneSide, "RootMotion", "BipedNaming/BoneSide");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::BipedNaming::BoneType, "RootMotion", "BipedNaming/BoneType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::BipedNaming::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&RootMotion::BipedNaming::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetBonesOfType
// Il2CppName: GetBonesOfType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (*)(::RootMotion::BipedNaming::BoneType, ::ArrayW<::UnityEngine::Transform*>)>(&RootMotion::BipedNaming::GetBonesOfType)> {
  static const MethodInfo* get() {
    static auto* boneType = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneType")->byval_arg;
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetBonesOfType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneType, bones});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetBonesOfSide
// Il2CppName: GetBonesOfSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (*)(::RootMotion::BipedNaming::BoneSide, ::ArrayW<::UnityEngine::Transform*>)>(&RootMotion::BipedNaming::GetBonesOfSide)> {
  static const MethodInfo* get() {
    static auto* boneSide = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneSide")->byval_arg;
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetBonesOfSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneSide, bones});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetBonesOfTypeAndSide
// Il2CppName: GetBonesOfTypeAndSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (*)(::RootMotion::BipedNaming::BoneType, ::RootMotion::BipedNaming::BoneSide, ::ArrayW<::UnityEngine::Transform*>)>(&RootMotion::BipedNaming::GetBonesOfTypeAndSide)> {
  static const MethodInfo* get() {
    static auto* boneType = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneType")->byval_arg;
    static auto* boneSide = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneSide")->byval_arg;
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetBonesOfTypeAndSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneType, boneSide, bones});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetFirstBoneOfTypeAndSide
// Il2CppName: GetFirstBoneOfTypeAndSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::RootMotion::BipedNaming::BoneType, ::RootMotion::BipedNaming::BoneSide, ::ArrayW<::UnityEngine::Transform*>)>(&RootMotion::BipedNaming::GetFirstBoneOfTypeAndSide)> {
  static const MethodInfo* get() {
    static auto* boneType = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneType")->byval_arg;
    static auto* boneSide = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneSide")->byval_arg;
    static auto* bones = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetFirstBoneOfTypeAndSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneType, boneSide, bones});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetNamingMatch
// Il2CppName: GetNamingMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::ArrayW<::UnityEngine::Transform*>, ::ArrayW<::ArrayW<::StringW>>)>(&RootMotion::BipedNaming::GetNamingMatch)> {
  static const MethodInfo* get() {
    static auto* transforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* namings = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetNamingMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transforms, namings});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetBoneType
// Il2CppName: GetBoneType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::BipedNaming::BoneType (*)(::StringW)>(&RootMotion::BipedNaming::GetBoneType)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetBoneType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetBoneSide
// Il2CppName: GetBoneSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::BipedNaming::BoneSide (*)(::StringW)>(&RootMotion::BipedNaming::GetBoneSide)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetBoneSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::GetBone
// Il2CppName: GetBone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (*)(::ArrayW<::UnityEngine::Transform*>, ::RootMotion::BipedNaming::BoneType, ::RootMotion::BipedNaming::BoneSide, ::ArrayW<::ArrayW<::StringW>>)>(&RootMotion::BipedNaming::GetBone)> {
  static const MethodInfo* get() {
    static auto* transforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    static auto* boneType = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneType")->byval_arg;
    static auto* boneSide = &::il2cpp_utils::GetClassFromName("RootMotion", "BipedNaming/BoneSide")->byval_arg;
    static auto* namings = &il2cpp_functions::array_class_get(il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "GetBone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transforms, boneType, boneSide, namings});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isLeft
// Il2CppName: isLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isLeft)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isRight
// Il2CppName: isRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isRight)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isSpine
// Il2CppName: isSpine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isSpine)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isSpine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isHead
// Il2CppName: isHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isHead)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isArm
// Il2CppName: isArm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isArm)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isArm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isLeg
// Il2CppName: isLeg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isLeg)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isLeg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isTail
// Il2CppName: isTail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isTail)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isTail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isEye
// Il2CppName: isEye
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isEye)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isEye", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::isTypeExclude
// Il2CppName: isTypeExclude
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&RootMotion::BipedNaming::isTypeExclude)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "isTypeExclude", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::matchesNaming
// Il2CppName: matchesNaming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::ArrayW<::StringW>)>(&RootMotion::BipedNaming::matchesNaming)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namingConvention = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "matchesNaming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName, namingConvention});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::excludesNaming
// Il2CppName: excludesNaming
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::ArrayW<::StringW>)>(&RootMotion::BipedNaming::excludesNaming)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namingConvention = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "excludesNaming", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName, namingConvention});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::matchesLastLetter
// Il2CppName: matchesLastLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::ArrayW<::StringW>)>(&RootMotion::BipedNaming::matchesLastLetter)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* namingConvention = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "matchesLastLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName, namingConvention});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::LastLetterIs
// Il2CppName: LastLetterIs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&RootMotion::BipedNaming::LastLetterIs)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* letter = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "LastLetterIs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName, letter});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::firstLetter
// Il2CppName: firstLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&RootMotion::BipedNaming::firstLetter)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "firstLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
// Writing MetadataGetter for method: RootMotion::BipedNaming::lastLetter
// Il2CppName: lastLetter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&RootMotion::BipedNaming::lastLetter)> {
  static const MethodInfo* get() {
    static auto* boneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::BipedNaming*), "lastLetter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneName});
  }
};
