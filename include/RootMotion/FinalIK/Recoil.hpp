// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.OffsetModifier
#include "RootMotion/FinalIK/OffsetModifier.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: AimIK
  class AimIK;
  // Forward declaring type: IKEffector
  class IKEffector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: Recoil
  class Recoil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::Recoil);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::Recoil*, "RootMotion.FinalIK", "Recoil");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.Recoil
  // [TokenAttribute] Offset: FFFFFFFF
  class Recoil : public ::RootMotion::FinalIK::OffsetModifier {
    public:
    // Writing base type padding for base size: 0x2C to desired offset: 0x30
    char ___base_padding[0x4] = {};
    // Nested type: ::RootMotion::FinalIK::Recoil::RecoilOffset
    class RecoilOffset;
    // Nested type: ::RootMotion::FinalIK::Recoil::Handedness
    struct Handedness;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness
    // [TokenAttribute] Offset: FFFFFFFF
    struct Handedness/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Handedness
      constexpr Handedness(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
      static constexpr const int Right = 0;
      // Get static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
      static ::RootMotion::FinalIK::Recoil::Handedness _get_Right();
      // Set static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Right
      static void _set_Right(::RootMotion::FinalIK::Recoil::Handedness value);
      // static field const value: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
      static constexpr const int Left = 1;
      // Get static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
      static ::RootMotion::FinalIK::Recoil::Handedness _get_Left();
      // Set static field: static public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness Left
      static void _set_Left(::RootMotion::FinalIK::Recoil::Handedness value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness
    #pragma pack(pop)
    static check_size<sizeof(Recoil::Handedness), 0 + sizeof(int)> __RootMotion_FinalIK_Recoil_HandednessSizeCheck;
    static_assert(sizeof(Recoil::Handedness) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x1147E24
    // public RootMotion.FinalIK.AimIK aimIK
    // Size: 0x8
    // Offset: 0x30
    ::RootMotion::FinalIK::AimIK* aimIK;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::AimIK*) == 0x8);
    // [TooltipAttribute] Offset: 0x1147E5C
    // public System.Boolean aimIKSolvedLast
    // Size: 0x1
    // Offset: 0x38
    bool aimIKSolvedLast;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: aimIKSolvedLast and: handedness
    char __padding1[0x3] = {};
    // [TooltipAttribute] Offset: 0x1147E94
    // public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness handedness
    // Size: 0x4
    // Offset: 0x3C
    ::RootMotion::FinalIK::Recoil::Handedness handedness;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::Recoil::Handedness) == 0x4);
    // [TooltipAttribute] Offset: 0x1147ECC
    // public System.Boolean twoHanded
    // Size: 0x1
    // Offset: 0x40
    bool twoHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: twoHanded and: recoilWeight
    char __padding3[0x7] = {};
    // [TooltipAttribute] Offset: 0x1147F04
    // public UnityEngine.AnimationCurve recoilWeight
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::AnimationCurve* recoilWeight;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // [TooltipAttribute] Offset: 0x1147F3C
    // public System.Single magnitudeRandom
    // Size: 0x4
    // Offset: 0x50
    float magnitudeRandom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x1147F74
    // public UnityEngine.Vector3 rotationRandom
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 rotationRandom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0x1147FAC
    // public UnityEngine.Vector3 handRotationOffset
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 handRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0x1147FE4
    // public System.Single blendTime
    // Size: 0x4
    // Offset: 0x6C
    float blendTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x114801C
    // [TooltipAttribute] Offset: 0x114801C
    // public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset[] offsets
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset*> offsets;
    // Field size check
    static_assert(sizeof(::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset*>) == 0x8);
    // public UnityEngine.Quaternion rotationOffset
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Quaternion rotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single magnitudeMlp
    // Size: 0x4
    // Offset: 0x88
    float magnitudeMlp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single endTime
    // Size: 0x4
    // Offset: 0x8C
    float endTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion handRotation
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Quaternion handRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion secondaryHandRelativeRotation
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Quaternion secondaryHandRelativeRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion randomRotation
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Quaternion randomRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single length
    // Size: 0x4
    // Offset: 0xC0
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean initiated
    // Size: 0x1
    // Offset: 0xC4
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initiated and: blendWeight
    char __padding17[0x3] = {};
    // private System.Single blendWeight
    // Size: 0x4
    // Offset: 0xC8
    float blendWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single w
    // Size: 0x4
    // Offset: 0xCC
    float w;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion primaryHandRotation
    // Size: 0x10
    // Offset: 0xD0
    ::UnityEngine::Quaternion primaryHandRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean handRotationsSet
    // Size: 0x1
    // Offset: 0xE0
    bool handRotationsSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: handRotationsSet and: aimIKAxis
    char __padding21[0x3] = {};
    // private UnityEngine.Vector3 aimIKAxis
    // Size: 0xC
    // Offset: 0xE4
    ::UnityEngine::Vector3 aimIKAxis;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: public RootMotion.FinalIK.AimIK aimIK
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::AimIK*& dyn_aimIK();
    // Get instance field reference: public System.Boolean aimIKSolvedLast
    [[deprecated("Use field access instead!")]] bool& dyn_aimIKSolvedLast();
    // Get instance field reference: public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.Handedness handedness
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Recoil::Handedness& dyn_handedness();
    // Get instance field reference: public System.Boolean twoHanded
    [[deprecated("Use field access instead!")]] bool& dyn_twoHanded();
    // Get instance field reference: public UnityEngine.AnimationCurve recoilWeight
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_recoilWeight();
    // Get instance field reference: public System.Single magnitudeRandom
    [[deprecated("Use field access instead!")]] float& dyn_magnitudeRandom();
    // Get instance field reference: public UnityEngine.Vector3 rotationRandom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rotationRandom();
    // Get instance field reference: public UnityEngine.Vector3 handRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_handRotationOffset();
    // Get instance field reference: public System.Single blendTime
    [[deprecated("Use field access instead!")]] float& dyn_blendTime();
    // Get instance field reference: public RootMotion.FinalIK.Recoil/RootMotion.FinalIK.RecoilOffset[] offsets
    [[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::Recoil::RecoilOffset*>& dyn_offsets();
    // Get instance field reference: public UnityEngine.Quaternion rotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_rotationOffset();
    // Get instance field reference: private System.Single magnitudeMlp
    [[deprecated("Use field access instead!")]] float& dyn_magnitudeMlp();
    // Get instance field reference: private System.Single endTime
    [[deprecated("Use field access instead!")]] float& dyn_endTime();
    // Get instance field reference: private UnityEngine.Quaternion handRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_handRotation();
    // Get instance field reference: private UnityEngine.Quaternion secondaryHandRelativeRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_secondaryHandRelativeRotation();
    // Get instance field reference: private UnityEngine.Quaternion randomRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_randomRotation();
    // Get instance field reference: private System.Single length
    [[deprecated("Use field access instead!")]] float& dyn_length();
    // Get instance field reference: private System.Boolean initiated
    [[deprecated("Use field access instead!")]] bool& dyn_initiated();
    // Get instance field reference: private System.Single blendWeight
    [[deprecated("Use field access instead!")]] float& dyn_blendWeight();
    // Get instance field reference: private System.Single w
    [[deprecated("Use field access instead!")]] float& dyn_w();
    // Get instance field reference: private UnityEngine.Quaternion primaryHandRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_primaryHandRotation();
    // Get instance field reference: private System.Boolean handRotationsSet
    [[deprecated("Use field access instead!")]] bool& dyn_handRotationsSet();
    // Get instance field reference: private UnityEngine.Vector3 aimIKAxis
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_aimIKAxis();
    // public System.Boolean get_isFinished()
    // Offset: 0x206763C
    bool get_isFinished();
    // private RootMotion.FinalIK.IKEffector get_primaryHandEffector()
    // Offset: 0x20686A8
    ::RootMotion::FinalIK::IKEffector* get_primaryHandEffector();
    // private RootMotion.FinalIK.IKEffector get_secondaryHandEffector()
    // Offset: 0x20686E8
    ::RootMotion::FinalIK::IKEffector* get_secondaryHandEffector();
    // private UnityEngine.Transform get_primaryHand()
    // Offset: 0x2068668
    ::UnityEngine::Transform* get_primaryHand();
    // private UnityEngine.Transform get_secondaryHand()
    // Offset: 0x2068688
    ::UnityEngine::Transform* get_secondaryHand();
    // public System.Void SetHandRotations(UnityEngine.Quaternion leftHandRotation, UnityEngine.Quaternion rightHandRotation)
    // Offset: 0x206766C
    void SetHandRotations(::UnityEngine::Quaternion leftHandRotation, ::UnityEngine::Quaternion rightHandRotation);
    // public System.Void Fire(System.Single magnitude)
    // Offset: 0x2067698
    void Fire(float magnitude);
    // private System.Void AfterFBBIK()
    // Offset: 0x2068728
    void AfterFBBIK();
    // private System.Void AfterAimIK()
    // Offset: 0x2068880
    void AfterAimIK();
    // public System.Void .ctor()
    // Offset: 0x2068A54
    // Implemented from: RootMotion.FinalIK.OffsetModifier
    // Base method: System.Void OffsetModifier::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Recoil* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Recoil::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Recoil*, creationType>()));
    }
    // protected override System.Void OnModifyOffset()
    // Offset: 0x2067914
    // Implemented from: RootMotion.FinalIK.OffsetModifier
    // Base method: System.Void OffsetModifier::OnModifyOffset()
    void OnModifyOffset();
    // protected override System.Void OnDestroy()
    // Offset: 0x20688BC
    // Implemented from: RootMotion.FinalIK.OffsetModifier
    // Base method: System.Void OffsetModifier::OnDestroy()
    void OnDestroy();
  }; // RootMotion.FinalIK.Recoil
  #pragma pack(pop)
  static check_size<sizeof(Recoil), 228 + sizeof(::UnityEngine::Vector3)> __RootMotion_FinalIK_RecoilSizeCheck;
  static_assert(sizeof(Recoil) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::Recoil::Handedness, "RootMotion.FinalIK", "Recoil/Handedness");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::get_isFinished
// Il2CppName: get_isFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::get_isFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "get_isFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::get_primaryHandEffector
// Il2CppName: get_primaryHandEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKEffector* (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::get_primaryHandEffector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "get_primaryHandEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::get_secondaryHandEffector
// Il2CppName: get_secondaryHandEffector
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::FinalIK::IKEffector* (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::get_secondaryHandEffector)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "get_secondaryHandEffector", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::get_primaryHand
// Il2CppName: get_primaryHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::get_primaryHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "get_primaryHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::get_secondaryHand
// Il2CppName: get_secondaryHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::get_secondaryHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "get_secondaryHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::SetHandRotations
// Il2CppName: SetHandRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Recoil::*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&RootMotion::FinalIK::Recoil::SetHandRotations)> {
  static const MethodInfo* get() {
    static auto* leftHandRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* rightHandRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "SetHandRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leftHandRotation, rightHandRotation});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::Fire
// Il2CppName: Fire
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Recoil::*)(float)>(&RootMotion::FinalIK::Recoil::Fire)> {
  static const MethodInfo* get() {
    static auto* magnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "Fire", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{magnitude});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::AfterFBBIK
// Il2CppName: AfterFBBIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::AfterFBBIK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "AfterFBBIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::AfterAimIK
// Il2CppName: AfterAimIK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::AfterAimIK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "AfterAimIK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::OnModifyOffset
// Il2CppName: OnModifyOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::OnModifyOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "OnModifyOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Recoil::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Recoil::*)()>(&RootMotion::FinalIK::Recoil::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Recoil*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
