// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKConstraintBend
  class IKConstraintBend;
  // Forward declaring type: IKSolverFullBody
  class IKSolverFullBody;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: FBIKChain
  class FBIKChain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::FBIKChain);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::FBIKChain*, "RootMotion.FinalIK", "FBIKChain");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x84
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.FBIKChain
  // [TokenAttribute] Offset: FFFFFFFF
  class FBIKChain : public ::Il2CppObject {
    public:
    // Nested type: ::RootMotion::FinalIK::FBIKChain::ChildConstraint
    class ChildConstraint;
    // Nested type: ::RootMotion::FinalIK::FBIKChain::Smoothing
    struct Smoothing;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing
    // [TokenAttribute] Offset: FFFFFFFF
    struct Smoothing/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Smoothing
      constexpr Smoothing(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
      static constexpr const int None = 0;
      // Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
      static ::RootMotion::FinalIK::FBIKChain::Smoothing _get_None();
      // Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing None
      static void _set_None(::RootMotion::FinalIK::FBIKChain::Smoothing value);
      // static field const value: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
      static constexpr const int Exponential = 1;
      // Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
      static ::RootMotion::FinalIK::FBIKChain::Smoothing _get_Exponential();
      // Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Exponential
      static void _set_Exponential(::RootMotion::FinalIK::FBIKChain::Smoothing value);
      // static field const value: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
      static constexpr const int Cubic = 2;
      // Get static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
      static ::RootMotion::FinalIK::FBIKChain::Smoothing _get_Cubic();
      // Set static field: static public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing Cubic
      static void _set_Cubic(::RootMotion::FinalIK::FBIKChain::Smoothing value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing
    #pragma pack(pop)
    static check_size<sizeof(FBIKChain::Smoothing), 0 + sizeof(int)> __RootMotion_FinalIK_FBIKChain_SmoothingSizeCheck;
    static_assert(sizeof(FBIKChain::Smoothing) == 0x4);
    public:
    // [RangeAttribute] Offset: 0x1146250
    // public System.Single pin
    // Size: 0x4
    // Offset: 0x10
    float pin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x1146268
    // public System.Single pull
    // Size: 0x4
    // Offset: 0x14
    float pull;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x1146280
    // public System.Single push
    // Size: 0x4
    // Offset: 0x18
    float push;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x1146298
    // public System.Single pushParent
    // Size: 0x4
    // Offset: 0x1C
    float pushParent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0x11462B0
    // public System.Single reach
    // Size: 0x4
    // Offset: 0x20
    float reach;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing reachSmoothing
    // Size: 0x4
    // Offset: 0x24
    ::RootMotion::FinalIK::FBIKChain::Smoothing reachSmoothing;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::FBIKChain::Smoothing) == 0x4);
    // public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing pushSmoothing
    // Size: 0x4
    // Offset: 0x28
    ::RootMotion::FinalIK::FBIKChain::Smoothing pushSmoothing;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::FBIKChain::Smoothing) == 0x4);
    // Padding between fields: pushSmoothing and: nodes
    char __padding6[0x4] = {};
    // public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node[] nodes
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::RootMotion::FinalIK::IKSolver::Node*> nodes;
    // Field size check
    static_assert(sizeof(::ArrayW<::RootMotion::FinalIK::IKSolver::Node*>) == 0x8);
    // public System.Int32[] children
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int> children;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint[] childConstraints
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::RootMotion::FinalIK::FBIKChain::ChildConstraint*> childConstraints;
    // Field size check
    static_assert(sizeof(::ArrayW<::RootMotion::FinalIK::FBIKChain::ChildConstraint*>) == 0x8);
    // public RootMotion.FinalIK.IKConstraintBend bendConstraint
    // Size: 0x8
    // Offset: 0x48
    ::RootMotion::FinalIK::IKConstraintBend* bendConstraint;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::IKConstraintBend*) == 0x8);
    // private System.Single rootLength
    // Size: 0x4
    // Offset: 0x50
    float rootLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean initiated
    // Size: 0x1
    // Offset: 0x54
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initiated and: length
    char __padding12[0x3] = {};
    // private System.Single length
    // Size: 0x4
    // Offset: 0x58
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single distance
    // Size: 0x4
    // Offset: 0x5C
    float distance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point p
    // Size: 0x8
    // Offset: 0x60
    ::RootMotion::FinalIK::IKSolver::Point* p;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::IKSolver::Point*) == 0x8);
    // private System.Single reachForce
    // Size: 0x4
    // Offset: 0x68
    float reachForce;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single pullParentSum
    // Size: 0x4
    // Offset: 0x6C
    float pullParentSum;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single[] crossFades
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<float> crossFades;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // private System.Single sqrMag1
    // Size: 0x4
    // Offset: 0x78
    float sqrMag1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single sqrMag2
    // Size: 0x4
    // Offset: 0x7C
    float sqrMag2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single sqrMagDif
    // Size: 0x4
    // Offset: 0x80
    float sqrMagDif;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // static field const value: static private System.Single maxLimbLength
    static constexpr const float maxLimbLength = 0.99999;
    // Get static field: static private System.Single maxLimbLength
    static float _get_maxLimbLength();
    // Set static field: static private System.Single maxLimbLength
    static void _set_maxLimbLength(float value);
    // Get instance field reference: public System.Single pin
    [[deprecated("Use field access instead!")]] float& dyn_pin();
    // Get instance field reference: public System.Single pull
    [[deprecated("Use field access instead!")]] float& dyn_pull();
    // Get instance field reference: public System.Single push
    [[deprecated("Use field access instead!")]] float& dyn_push();
    // Get instance field reference: public System.Single pushParent
    [[deprecated("Use field access instead!")]] float& dyn_pushParent();
    // Get instance field reference: public System.Single reach
    [[deprecated("Use field access instead!")]] float& dyn_reach();
    // Get instance field reference: public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing reachSmoothing
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FBIKChain::Smoothing& dyn_reachSmoothing();
    // Get instance field reference: public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.Smoothing pushSmoothing
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::FBIKChain::Smoothing& dyn_pushSmoothing();
    // Get instance field reference: public RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node[] nodes
    [[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::IKSolver::Node*>& dyn_nodes();
    // Get instance field reference: public System.Int32[] children
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_children();
    // Get instance field reference: public RootMotion.FinalIK.FBIKChain/RootMotion.FinalIK.ChildConstraint[] childConstraints
    [[deprecated("Use field access instead!")]] ::ArrayW<::RootMotion::FinalIK::FBIKChain::ChildConstraint*>& dyn_childConstraints();
    // Get instance field reference: public RootMotion.FinalIK.IKConstraintBend bendConstraint
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKConstraintBend*& dyn_bendConstraint();
    // Get instance field reference: private System.Single rootLength
    [[deprecated("Use field access instead!")]] float& dyn_rootLength();
    // Get instance field reference: private System.Boolean initiated
    [[deprecated("Use field access instead!")]] bool& dyn_initiated();
    // Get instance field reference: private System.Single length
    [[deprecated("Use field access instead!")]] float& dyn_length();
    // Get instance field reference: private System.Single distance
    [[deprecated("Use field access instead!")]] float& dyn_distance();
    // Get instance field reference: private RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Point p
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::IKSolver::Point*& dyn_p();
    // Get instance field reference: private System.Single reachForce
    [[deprecated("Use field access instead!")]] float& dyn_reachForce();
    // Get instance field reference: private System.Single pullParentSum
    [[deprecated("Use field access instead!")]] float& dyn_pullParentSum();
    // Get instance field reference: private System.Single[] crossFades
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_crossFades();
    // Get instance field reference: private System.Single sqrMag1
    [[deprecated("Use field access instead!")]] float& dyn_sqrMag1();
    // Get instance field reference: private System.Single sqrMag2
    [[deprecated("Use field access instead!")]] float& dyn_sqrMag2();
    // Get instance field reference: private System.Single sqrMagDif
    [[deprecated("Use field access instead!")]] float& dyn_sqrMagDif();
    // public System.Void .ctor()
    // Offset: 0x22B38AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FBIKChain* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FBIKChain*, creationType>()));
    }
    // public System.Void .ctor(System.Single pin, System.Single pull, params UnityEngine.Transform[] nodeTransforms)
    // Offset: 0x22B3978
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FBIKChain* New_ctor(float pin, float pull, ::ArrayW<::UnityEngine::Transform*> nodeTransforms) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::FBIKChain::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FBIKChain*, creationType>(pin, pull, nodeTransforms)));
    }
    // public System.Void SetNodes(params UnityEngine.Transform[] boneTransforms)
    // Offset: 0x22B3A84
    void SetNodes(::ArrayW<::UnityEngine::Transform*> boneTransforms);
    // public System.Int32 GetNodeIndex(UnityEngine.Transform boneTransform)
    // Offset: 0x22B3BA8
    int GetNodeIndex(::UnityEngine::Transform* boneTransform);
    // public System.Boolean IsValid(ref System.String message)
    // Offset: 0x22B3C84
    bool IsValid(ByRef<::StringW> message);
    // public System.Void Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B3D88
    void Initiate(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void ReadPose(RootMotion.FinalIK.IKSolverFullBody solver, System.Boolean fullBody)
    // Offset: 0x22B44A8
    void ReadPose(::RootMotion::FinalIK::IKSolverFullBody* solver, bool fullBody);
    // private System.Void CalculateBoneLengths(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B3F18
    void CalculateBoneLengths(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void Reach(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B4B94
    void Reach(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // public UnityEngine.Vector3 Push(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B4F38
    ::UnityEngine::Vector3 Push(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void SolveTrigonometric(RootMotion.FinalIK.IKSolverFullBody solver, System.Boolean calculateBendDirection)
    // Offset: 0x22B531C
    void SolveTrigonometric(::RootMotion::FinalIK::IKSolverFullBody* solver, bool calculateBendDirection);
    // public System.Void Stage1(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B58A0
    void Stage1(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void Stage2(RootMotion.FinalIK.IKSolverFullBody solver, UnityEngine.Vector3 position)
    // Offset: 0x22B5E70
    void Stage2(::RootMotion::FinalIK::IKSolverFullBody* solver, ::UnityEngine::Vector3 position);
    // public System.Void SolveConstraintSystems(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B6108
    void SolveConstraintSystems(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // private UnityEngine.Vector3 SolveFABRIKJoint(UnityEngine.Vector3 pos1, UnityEngine.Vector3 pos2, System.Single length)
    // Offset: 0x22B5D68
    ::UnityEngine::Vector3 SolveFABRIKJoint(::UnityEngine::Vector3 pos1, ::UnityEngine::Vector3 pos2, float length);
    // protected UnityEngine.Vector3 GetDirToBendPoint(UnityEngine.Vector3 direction, UnityEngine.Vector3 bendDirection, System.Single directionMagnitude)
    // Offset: 0x22B5688
    ::UnityEngine::Vector3 GetDirToBendPoint(::UnityEngine::Vector3 direction, ::UnityEngine::Vector3 bendDirection, float directionMagnitude);
    // private System.Void SolveChildConstraints(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x22B5CF0
    void SolveChildConstraints(::RootMotion::FinalIK::IKSolverFullBody* solver);
    // private System.Void SolveLinearConstraint(RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node node1, RootMotion.FinalIK.IKSolver/RootMotion.FinalIK.Node node2, System.Single crossFade, System.Single distance)
    // Offset: 0x22B61F0
    void SolveLinearConstraint(::RootMotion::FinalIK::IKSolver::Node* node1, ::RootMotion::FinalIK::IKSolver::Node* node2, float crossFade, float distance);
    // public System.Void ForwardReach(UnityEngine.Vector3 position)
    // Offset: 0x22B5C10
    void ForwardReach(::UnityEngine::Vector3 position);
    // private System.Void BackwardReach(UnityEngine.Vector3 position)
    // Offset: 0x22B5FF0
    void BackwardReach(::UnityEngine::Vector3 position);
  }; // RootMotion.FinalIK.FBIKChain
  #pragma pack(pop)
  static check_size<sizeof(FBIKChain), 128 + sizeof(float)> __RootMotion_FinalIK_FBIKChainSizeCheck;
  static_assert(sizeof(FBIKChain) == 0x84);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::FBIKChain::Smoothing, "RootMotion.FinalIK", "FBIKChain/Smoothing");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::SetNodes
// Il2CppName: SetNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::ArrayW<::UnityEngine::Transform*>)>(&RootMotion::FinalIK::FBIKChain::SetNodes)> {
  static const MethodInfo* get() {
    static auto* boneTransforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "SetNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneTransforms});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::GetNodeIndex
// Il2CppName: GetNodeIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RootMotion::FinalIK::FBIKChain::*)(::UnityEngine::Transform*)>(&RootMotion::FinalIK::FBIKChain::GetNodeIndex)> {
  static const MethodInfo* get() {
    static auto* boneTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "GetNodeIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boneTransform});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::IsValid
// Il2CppName: IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RootMotion::FinalIK::FBIKChain::*)(ByRef<::StringW>)>(&RootMotion::FinalIK::FBIKChain::IsValid)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::Initiate)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::ReadPose
// Il2CppName: ReadPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*, bool)>(&RootMotion::FinalIK::FBIKChain::ReadPose)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    static auto* fullBody = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "ReadPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver, fullBody});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::CalculateBoneLengths
// Il2CppName: CalculateBoneLengths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::CalculateBoneLengths)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "CalculateBoneLengths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::Reach
// Il2CppName: Reach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::Reach)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "Reach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::Push
// Il2CppName: Push
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::Push)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "Push", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::SolveTrigonometric
// Il2CppName: SolveTrigonometric
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*, bool)>(&RootMotion::FinalIK::FBIKChain::SolveTrigonometric)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    static auto* calculateBendDirection = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "SolveTrigonometric", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver, calculateBendDirection});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::Stage1
// Il2CppName: Stage1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::Stage1)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "Stage1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::Stage2
// Il2CppName: Stage2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*, ::UnityEngine::Vector3)>(&RootMotion::FinalIK::FBIKChain::Stage2)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "Stage2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver, position});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::SolveConstraintSystems
// Il2CppName: SolveConstraintSystems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::SolveConstraintSystems)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "SolveConstraintSystems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint
// Il2CppName: SolveFABRIKJoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::FBIKChain::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&RootMotion::FinalIK::FBIKChain::SolveFABRIKJoint)> {
  static const MethodInfo* get() {
    static auto* pos1 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* pos2 = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "SolveFABRIKJoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos1, pos2, length});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::GetDirToBendPoint
// Il2CppName: GetDirToBendPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::FBIKChain::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, float)>(&RootMotion::FinalIK::FBIKChain::GetDirToBendPoint)> {
  static const MethodInfo* get() {
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* bendDirection = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* directionMagnitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "GetDirToBendPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{direction, bendDirection, directionMagnitude});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::SolveChildConstraints
// Il2CppName: SolveChildConstraints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolverFullBody*)>(&RootMotion::FinalIK::FBIKChain::SolveChildConstraints)> {
  static const MethodInfo* get() {
    static auto* solver = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolverFullBody")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "SolveChildConstraints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{solver});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::SolveLinearConstraint
// Il2CppName: SolveLinearConstraint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::RootMotion::FinalIK::IKSolver::Node*, ::RootMotion::FinalIK::IKSolver::Node*, float, float)>(&RootMotion::FinalIK::FBIKChain::SolveLinearConstraint)> {
  static const MethodInfo* get() {
    static auto* node1 = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolver/Node")->byval_arg;
    static auto* node2 = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "IKSolver/Node")->byval_arg;
    static auto* crossFade = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "SolveLinearConstraint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node1, node2, crossFade, distance});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::ForwardReach
// Il2CppName: ForwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::UnityEngine::Vector3)>(&RootMotion::FinalIK::FBIKChain::ForwardReach)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "ForwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::FBIKChain::BackwardReach
// Il2CppName: BackwardReach
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::FBIKChain::*)(::UnityEngine::Vector3)>(&RootMotion::FinalIK::FBIKChain::BackwardReach)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::FBIKChain*), "BackwardReach", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
