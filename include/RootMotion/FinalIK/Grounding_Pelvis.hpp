// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.Grounding
#include "RootMotion/FinalIK/Grounding.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::Grounding::Pelvis);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::Grounding::Pelvis*, "RootMotion.FinalIK", "Grounding/Pelvis");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis
  // [TokenAttribute] Offset: FFFFFFFF
  class Grounding::Pelvis : public ::Il2CppObject {
    public:
    public:
    // private UnityEngine.Vector3 <IKOffset>k__BackingField
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 IKOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single <heightOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float heightOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private RootMotion.FinalIK.Grounding grounding
    // Size: 0x8
    // Offset: 0x20
    ::RootMotion::FinalIK::Grounding* grounding;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::Grounding*) == 0x8);
    // private UnityEngine.Vector3 lastRootPosition
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 lastRootPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single damperF
    // Size: 0x4
    // Offset: 0x34
    float damperF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean initiated
    // Size: 0x1
    // Offset: 0x38
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initiated and: lastTime
    char __padding5[0x3] = {};
    // private System.Single lastTime
    // Size: 0x4
    // Offset: 0x3C
    float lastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Vector3 <IKOffset>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_$IKOffset$k__BackingField();
    // Get instance field reference: private System.Single <heightOffset>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$heightOffset$k__BackingField();
    // Get instance field reference: private RootMotion.FinalIK.Grounding grounding
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::Grounding*& dyn_grounding();
    // Get instance field reference: private UnityEngine.Vector3 lastRootPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRootPosition();
    // Get instance field reference: private System.Single damperF
    [[deprecated("Use field access instead!")]] float& dyn_damperF();
    // Get instance field reference: private System.Boolean initiated
    [[deprecated("Use field access instead!")]] bool& dyn_initiated();
    // Get instance field reference: private System.Single lastTime
    [[deprecated("Use field access instead!")]] float& dyn_lastTime();
    // public UnityEngine.Vector3 get_IKOffset()
    // Offset: 0x222595C
    ::UnityEngine::Vector3 get_IKOffset();
    // private System.Void set_IKOffset(UnityEngine.Vector3 value)
    // Offset: 0x2225968
    void set_IKOffset(::UnityEngine::Vector3 value);
    // public System.Single get_heightOffset()
    // Offset: 0x2225974
    float get_heightOffset();
    // private System.Void set_heightOffset(System.Single value)
    // Offset: 0x222597C
    void set_heightOffset(float value);
    // public System.Void .ctor()
    // Offset: 0x22233D4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Grounding::Pelvis* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::Grounding::Pelvis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Grounding::Pelvis*, creationType>()));
    }
    // public System.Void Initiate(RootMotion.FinalIK.Grounding grounding)
    // Offset: 0x22234C0
    void Initiate(::RootMotion::FinalIK::Grounding* grounding);
    // public System.Void Reset()
    // Offset: 0x2224028
    void Reset();
    // public System.Void OnEnable()
    // Offset: 0x2225984
    void OnEnable();
    // public System.Void Process(System.Single lowestOffset, System.Single highestOffset, System.Boolean isGrounded)
    // Offset: 0x2223DBC
    void Process(float lowestOffset, float highestOffset, bool isGrounded);
  }; // RootMotion.FinalIK.Grounding/RootMotion.FinalIK.Pelvis
  #pragma pack(pop)
  static check_size<sizeof(Grounding::Pelvis), 60 + sizeof(float)> __RootMotion_FinalIK_Grounding_PelvisSizeCheck;
  static_assert(sizeof(Grounding::Pelvis) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset
// Il2CppName: get_IKOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::Grounding::Pelvis::*)()>(&RootMotion::FinalIK::Grounding::Pelvis::get_IKOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "get_IKOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset
// Il2CppName: set_IKOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Grounding::Pelvis::*)(::UnityEngine::Vector3)>(&RootMotion::FinalIK::Grounding::Pelvis::set_IKOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "set_IKOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset
// Il2CppName: get_heightOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (RootMotion::FinalIK::Grounding::Pelvis::*)()>(&RootMotion::FinalIK::Grounding::Pelvis::get_heightOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "get_heightOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset
// Il2CppName: set_heightOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Grounding::Pelvis::*)(float)>(&RootMotion::FinalIK::Grounding::Pelvis::set_heightOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "set_heightOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::Initiate
// Il2CppName: Initiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Grounding::Pelvis::*)(::RootMotion::FinalIK::Grounding*)>(&RootMotion::FinalIK::Grounding::Pelvis::Initiate)> {
  static const MethodInfo* get() {
    static auto* grounding = &::il2cpp_utils::GetClassFromName("RootMotion.FinalIK", "Grounding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "Initiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grounding});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Grounding::Pelvis::*)()>(&RootMotion::FinalIK::Grounding::Pelvis::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Grounding::Pelvis::*)()>(&RootMotion::FinalIK::Grounding::Pelvis::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::Grounding::Pelvis::Process
// Il2CppName: Process
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::Grounding::Pelvis::*)(float, float, bool)>(&RootMotion::FinalIK::Grounding::Pelvis::Process)> {
  static const MethodInfo* get() {
    static auto* lowestOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* highestOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isGrounded = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::Grounding::Pelvis*), "Process", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lowestOffset, highestOffset, isGrounded});
  }
};
