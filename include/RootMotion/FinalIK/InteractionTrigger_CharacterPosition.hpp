// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.InteractionTrigger
#include "RootMotion/FinalIK/InteractionTrigger.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::InteractionTrigger::CharacterPosition);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::InteractionTrigger::CharacterPosition*, "RootMotion.FinalIK", "InteractionTrigger/CharacterPosition");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition
  // [TokenAttribute] Offset: FFFFFFFF
  class InteractionTrigger::CharacterPosition : public ::Il2CppObject {
    public:
    public:
    // [TooltipAttribute] Offset: 0x1108400
    // public System.Boolean use
    // Size: 0x1
    // Offset: 0x10
    bool use;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: use and: offset
    char __padding0[0x3] = {};
    // [TooltipAttribute] Offset: 0x1108438
    // public UnityEngine.Vector2 offset
    // Size: 0x8
    // Offset: 0x14
    ::UnityEngine::Vector2 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // [TooltipAttribute] Offset: 0x1108470
    // [RangeAttribute] Offset: 0x1108470
    // public System.Single angleOffset
    // Size: 0x4
    // Offset: 0x1C
    float angleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x11084CC
    // [RangeAttribute] Offset: 0x11084CC
    // public System.Single maxAngle
    // Size: 0x4
    // Offset: 0x20
    float maxAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x1108524
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x24
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x110855C
    // public System.Boolean orbit
    // Size: 0x1
    // Offset: 0x28
    bool orbit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x1108594
    // public System.Boolean fixYAxis
    // Size: 0x1
    // Offset: 0x29
    bool fixYAxis;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean use
    [[deprecated("Use field access instead!")]] bool& dyn_use();
    // Get instance field reference: public UnityEngine.Vector2 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_offset();
    // Get instance field reference: public System.Single angleOffset
    [[deprecated("Use field access instead!")]] float& dyn_angleOffset();
    // Get instance field reference: public System.Single maxAngle
    [[deprecated("Use field access instead!")]] float& dyn_maxAngle();
    // Get instance field reference: public System.Single radius
    [[deprecated("Use field access instead!")]] float& dyn_radius();
    // Get instance field reference: public System.Boolean orbit
    [[deprecated("Use field access instead!")]] bool& dyn_orbit();
    // Get instance field reference: public System.Boolean fixYAxis
    [[deprecated("Use field access instead!")]] bool& dyn_fixYAxis();
    // public UnityEngine.Vector3 get_offset3D()
    // Offset: 0x1FA585C
    ::UnityEngine::Vector3 get_offset3D();
    // public UnityEngine.Vector3 get_direction3D()
    // Offset: 0x1FA5898
    ::UnityEngine::Vector3 get_direction3D();
    // public System.Void .ctor()
    // Offset: 0x1FA600C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InteractionTrigger::CharacterPosition* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::InteractionTrigger::CharacterPosition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InteractionTrigger::CharacterPosition*, creationType>()));
    }
    // public System.Boolean IsInRange(UnityEngine.Transform character, UnityEngine.Transform trigger, out System.Single error)
    // Offset: 0x1FA5990
    bool IsInRange(::UnityEngine::Transform* character, ::UnityEngine::Transform* trigger, ByRef<float> error);
  }; // RootMotion.FinalIK.InteractionTrigger/RootMotion.FinalIK.CharacterPosition
  #pragma pack(pop)
  static check_size<sizeof(InteractionTrigger::CharacterPosition), 41 + sizeof(bool)> __RootMotion_FinalIK_InteractionTrigger_CharacterPositionSizeCheck;
  static_assert(sizeof(InteractionTrigger::CharacterPosition) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_offset3D
// Il2CppName: get_offset3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::InteractionTrigger::CharacterPosition::*)()>(&RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_offset3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::InteractionTrigger::CharacterPosition*), "get_offset3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_direction3D
// Il2CppName: get_direction3D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (RootMotion::FinalIK::InteractionTrigger::CharacterPosition::*)()>(&RootMotion::FinalIK::InteractionTrigger::CharacterPosition::get_direction3D)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::InteractionTrigger::CharacterPosition*), "get_direction3D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::InteractionTrigger::CharacterPosition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::InteractionTrigger::CharacterPosition::IsInRange
// Il2CppName: IsInRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (RootMotion::FinalIK::InteractionTrigger::CharacterPosition::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*, ByRef<float>)>(&RootMotion::FinalIK::InteractionTrigger::CharacterPosition::IsInRange)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* trigger = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* error = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::InteractionTrigger::CharacterPosition*), "IsInRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, trigger, error});
  }
};
