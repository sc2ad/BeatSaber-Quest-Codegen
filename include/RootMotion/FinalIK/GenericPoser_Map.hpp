// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: RootMotion.FinalIK.GenericPoser
#include "RootMotion/FinalIK/GenericPoser.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::GenericPoser::Map);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::GenericPoser::Map*, "RootMotion.FinalIK", "GenericPoser/Map");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map
  // [TokenAttribute] Offset: FFFFFFFF
  class GenericPoser::Map : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Transform bone
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* bone;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 defaultLocalPosition
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 defaultLocalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion defaultLocalRotation
    // Size: 0x10
    // Offset: 0x2C
    ::UnityEngine::Quaternion defaultLocalRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: public UnityEngine.Transform bone
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_bone();
    // Get instance field reference: public UnityEngine.Transform target
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_target();
    // Get instance field reference: private UnityEngine.Vector3 defaultLocalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_defaultLocalPosition();
    // Get instance field reference: private UnityEngine.Quaternion defaultLocalRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_defaultLocalRotation();
    // public System.Void .ctor(UnityEngine.Transform bone, UnityEngine.Transform target)
    // Offset: 0x228A6F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericPoser::Map* New_ctor(::UnityEngine::Transform* bone, ::UnityEngine::Transform* target) {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::GenericPoser::Map::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericPoser::Map*, creationType>(bone, target)));
    }
    // public System.Void StoreDefaultState()
    // Offset: 0x228AAF4
    void StoreDefaultState();
    // public System.Void FixTransform()
    // Offset: 0x228AAA8
    void FixTransform();
    // public System.Void Update(System.Single localRotationWeight, System.Single localPositionWeight)
    // Offset: 0x228A8A0
    void Update(float localRotationWeight, float localPositionWeight);
  }; // RootMotion.FinalIK.GenericPoser/RootMotion.FinalIK.Map
  #pragma pack(pop)
  static check_size<sizeof(GenericPoser::Map), 44 + sizeof(::UnityEngine::Quaternion)> __RootMotion_FinalIK_GenericPoser_MapSizeCheck;
  static_assert(sizeof(GenericPoser::Map) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::GenericPoser::Map::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::GenericPoser::Map::StoreDefaultState
// Il2CppName: StoreDefaultState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::GenericPoser::Map::*)()>(&RootMotion::FinalIK::GenericPoser::Map::StoreDefaultState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::GenericPoser::Map*), "StoreDefaultState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::GenericPoser::Map::FixTransform
// Il2CppName: FixTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::GenericPoser::Map::*)()>(&RootMotion::FinalIK::GenericPoser::Map::FixTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::GenericPoser::Map*), "FixTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::GenericPoser::Map::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::GenericPoser::Map::*)(float, float)>(&RootMotion::FinalIK::GenericPoser::Map::Update)> {
  static const MethodInfo* get() {
    static auto* localRotationWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* localPositionWeight = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::GenericPoser::Map*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localRotationWeight, localPositionWeight});
  }
};
