// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
}
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: VRIK
  class VRIK;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: VRIKLODController
  class VRIKLODController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::FinalIK::VRIKLODController);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::FinalIK::VRIKLODController*, "RootMotion.FinalIK", "VRIKLODController");
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.VRIKLODController
  // [TokenAttribute] Offset: FFFFFFFF
  class VRIKLODController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Renderer LODRenderer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Renderer* LODRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // public System.Single LODDistance
    // Size: 0x4
    // Offset: 0x20
    float LODDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean allowCulled
    // Size: 0x1
    // Offset: 0x24
    bool allowCulled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowCulled and: ik
    char __padding2[0x3] = {};
    // private RootMotion.FinalIK.VRIK ik
    // Size: 0x8
    // Offset: 0x28
    ::RootMotion::FinalIK::VRIK* ik;
    // Field size check
    static_assert(sizeof(::RootMotion::FinalIK::VRIK*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Renderer LODRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn_LODRenderer();
    // Get instance field reference: public System.Single LODDistance
    [[deprecated("Use field access instead!")]] float& dyn_LODDistance();
    // Get instance field reference: public System.Boolean allowCulled
    [[deprecated("Use field access instead!")]] bool& dyn_allowCulled();
    // Get instance field reference: private RootMotion.FinalIK.VRIK ik
    [[deprecated("Use field access instead!")]] ::RootMotion::FinalIK::VRIK*& dyn_ik();
    // public System.Void .ctor()
    // Offset: 0x1FB4F88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRIKLODController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::FinalIK::VRIKLODController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRIKLODController*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x1FB4D74
    void Start();
    // private System.Void Update()
    // Offset: 0x1FB4DCC
    void Update();
    // private System.Int32 GetLODLevel()
    // Offset: 0x1FB4E00
    int GetLODLevel();
  }; // RootMotion.FinalIK.VRIKLODController
  #pragma pack(pop)
  static check_size<sizeof(VRIKLODController), 40 + sizeof(::RootMotion::FinalIK::VRIK*)> __RootMotion_FinalIK_VRIKLODControllerSizeCheck;
  static_assert(sizeof(VRIKLODController) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::FinalIK::VRIKLODController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::FinalIK::VRIKLODController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::VRIKLODController::*)()>(&RootMotion::FinalIK::VRIKLODController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::VRIKLODController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::VRIKLODController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (RootMotion::FinalIK::VRIKLODController::*)()>(&RootMotion::FinalIK::VRIKLODController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::VRIKLODController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: RootMotion::FinalIK::VRIKLODController::GetLODLevel
// Il2CppName: GetLODLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (RootMotion::FinalIK::VRIKLODController::*)()>(&RootMotion::FinalIK::VRIKLODController::GetLODLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(RootMotion::FinalIK::VRIKLODController*), "GetLODLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
