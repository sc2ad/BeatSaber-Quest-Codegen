// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: Axis
  struct Axis;
}
// Completed forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: AxisTools
  class AxisTools;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::RootMotion::AxisTools);
DEFINE_IL2CPP_ARG_TYPE(::RootMotion::AxisTools*, "RootMotion", "AxisTools");
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.AxisTools
  // [TokenAttribute] Offset: FFFFFFFF
  class AxisTools : public ::Il2CppObject {
    public:
    // public System.Void .ctor()
    // Offset: 0x22A1664
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AxisTools* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::RootMotion::AxisTools::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AxisTools*, creationType>()));
    }
    // static public UnityEngine.Vector3 ToVector3(RootMotion.Axis axis)
    // Offset: 0x22A0EF0
    static ::UnityEngine::Vector3 ToVector3(::RootMotion::Axis axis);
    // static public RootMotion.Axis ToAxis(UnityEngine.Vector3 v)
    // Offset: 0x22A0FA8
    static ::RootMotion::Axis ToAxis(::UnityEngine::Vector3 v);
    // static public RootMotion.Axis GetAxisToPoint(UnityEngine.Transform t, UnityEngine.Vector3 worldPosition)
    // Offset: 0x22A1054
    static ::RootMotion::Axis GetAxisToPoint(::UnityEngine::Transform* t, ::UnityEngine::Vector3 worldPosition);
    // static public RootMotion.Axis GetAxisToDirection(UnityEngine.Transform t, UnityEngine.Vector3 direction)
    // Offset: 0x22A1238
    static ::RootMotion::Axis GetAxisToDirection(::UnityEngine::Transform* t, ::UnityEngine::Vector3 direction);
    // static public UnityEngine.Vector3 GetAxisVectorToPoint(UnityEngine.Transform t, UnityEngine.Vector3 worldPosition)
    // Offset: 0x22A1170
    static ::UnityEngine::Vector3 GetAxisVectorToPoint(::UnityEngine::Transform* t, ::UnityEngine::Vector3 worldPosition);
    // static public UnityEngine.Vector3 GetAxisVectorToDirection(UnityEngine.Transform t, UnityEngine.Vector3 direction)
    // Offset: 0x22A1354
    static ::UnityEngine::Vector3 GetAxisVectorToDirection(::UnityEngine::Transform* t, ::UnityEngine::Vector3 direction);
    // static public UnityEngine.Vector3 GetAxisVectorToDirection(UnityEngine.Quaternion r, UnityEngine.Vector3 direction)
    // Offset: 0x22A139C
    static ::UnityEngine::Vector3 GetAxisVectorToDirection(::UnityEngine::Quaternion r, ::UnityEngine::Vector3 direction);
  }; // RootMotion.AxisTools
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: RootMotion::AxisTools::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: RootMotion::AxisTools::ToVector3
// Il2CppName: ToVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::RootMotion::Axis)>(&RootMotion::AxisTools::ToVector3)> {
  static const MethodInfo* get() {
    static auto* axis = &::il2cpp_utils::GetClassFromName("RootMotion", "Axis")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "ToVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{axis});
  }
};
// Writing MetadataGetter for method: RootMotion::AxisTools::ToAxis
// Il2CppName: ToAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::Axis (*)(::UnityEngine::Vector3)>(&RootMotion::AxisTools::ToAxis)> {
  static const MethodInfo* get() {
    static auto* v = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "ToAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{v});
  }
};
// Writing MetadataGetter for method: RootMotion::AxisTools::GetAxisToPoint
// Il2CppName: GetAxisToPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::Axis (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&RootMotion::AxisTools::GetAxisToPoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "GetAxisToPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, worldPosition});
  }
};
// Writing MetadataGetter for method: RootMotion::AxisTools::GetAxisToDirection
// Il2CppName: GetAxisToDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::RootMotion::Axis (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&RootMotion::AxisTools::GetAxisToDirection)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "GetAxisToDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, direction});
  }
};
// Writing MetadataGetter for method: RootMotion::AxisTools::GetAxisVectorToPoint
// Il2CppName: GetAxisVectorToPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&RootMotion::AxisTools::GetAxisVectorToPoint)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* worldPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "GetAxisVectorToPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, worldPosition});
  }
};
// Writing MetadataGetter for method: RootMotion::AxisTools::GetAxisVectorToDirection
// Il2CppName: GetAxisVectorToDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Transform*, ::UnityEngine::Vector3)>(&RootMotion::AxisTools::GetAxisVectorToDirection)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "GetAxisVectorToDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t, direction});
  }
};
// Writing MetadataGetter for method: RootMotion::AxisTools::GetAxisVectorToDirection
// Il2CppName: GetAxisVectorToDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::UnityEngine::Quaternion, ::UnityEngine::Vector3)>(&RootMotion::AxisTools::GetAxisVectorToDirection)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(RootMotion::AxisTools*), "GetAxisVectorToDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, direction});
  }
};
