// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: HoudiniEngineUnity.HAPI_AttributeInfo
#include "HoudiniEngineUnity/HAPI_AttributeInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_AttributeData
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_AttributeData : public ::Il2CppObject/*, public HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_AttributeData*>*/ {
    public:
    // Nested type: HoudiniEngineUnity::HEU_AttributeData::AttributeType
    struct AttributeType;
    // Nested type: HoudiniEngineUnity::HEU_AttributeData::AttributeState
    struct AttributeState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_AttributeData/AttributeType
    // [TokenAttribute] Offset: FFFFFFFF
    struct AttributeType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: AttributeType
      constexpr AttributeType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType UNDEFINED
      static constexpr const int UNDEFINED = -1;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType UNDEFINED
      static HoudiniEngineUnity::HEU_AttributeData::AttributeType _get_UNDEFINED();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType UNDEFINED
      static void _set_UNDEFINED(HoudiniEngineUnity::HEU_AttributeData::AttributeType value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType BOOL
      static constexpr const int BOOL = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType BOOL
      static HoudiniEngineUnity::HEU_AttributeData::AttributeType _get_BOOL();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType BOOL
      static void _set_BOOL(HoudiniEngineUnity::HEU_AttributeData::AttributeType value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType INT
      static constexpr const int INT = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType INT
      static HoudiniEngineUnity::HEU_AttributeData::AttributeType _get_INT();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType INT
      static void _set_INT(HoudiniEngineUnity::HEU_AttributeData::AttributeType value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType FLOAT
      static constexpr const int FLOAT = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType FLOAT
      static HoudiniEngineUnity::HEU_AttributeData::AttributeType _get_FLOAT();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType FLOAT
      static void _set_FLOAT(HoudiniEngineUnity::HEU_AttributeData::AttributeType value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType STRING
      static constexpr const int STRING = 3;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType STRING
      static HoudiniEngineUnity::HEU_AttributeData::AttributeType _get_STRING();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType STRING
      static void _set_STRING(HoudiniEngineUnity::HEU_AttributeData::AttributeType value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType MAX
      static constexpr const int MAX = 4;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType MAX
      static HoudiniEngineUnity::HEU_AttributeData::AttributeType _get_MAX();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeType MAX
      static void _set_MAX(HoudiniEngineUnity::HEU_AttributeData::AttributeType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_AttributeData/AttributeType
    #pragma pack(pop)
    static check_size<sizeof(HEU_AttributeData::AttributeType), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_AttributeData_AttributeTypeSizeCheck;
    static_assert(sizeof(HEU_AttributeData::AttributeType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_AttributeData/AttributeState
    // [TokenAttribute] Offset: FFFFFFFF
    struct AttributeState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: AttributeState
      constexpr AttributeState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState INVALID
      static constexpr const int INVALID = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState INVALID
      static HoudiniEngineUnity::HEU_AttributeData::AttributeState _get_INVALID();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState INVALID
      static void _set_INVALID(HoudiniEngineUnity::HEU_AttributeData::AttributeState value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState SYNCED
      static constexpr const int SYNCED = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState SYNCED
      static HoudiniEngineUnity::HEU_AttributeData::AttributeState _get_SYNCED();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState SYNCED
      static void _set_SYNCED(HoudiniEngineUnity::HEU_AttributeData::AttributeState value);
      // static field const value: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState LOCAL_DIRTY
      static constexpr const int LOCAL_DIRTY = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState LOCAL_DIRTY
      static HoudiniEngineUnity::HEU_AttributeData::AttributeState _get_LOCAL_DIRTY();
      // Set static field: static public HoudiniEngineUnity.HEU_AttributeData/AttributeState LOCAL_DIRTY
      static void _set_LOCAL_DIRTY(HoudiniEngineUnity::HEU_AttributeData::AttributeState value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_AttributeData/AttributeState
    #pragma pack(pop)
    static check_size<sizeof(HEU_AttributeData::AttributeState), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_AttributeData_AttributeStateSizeCheck;
    static_assert(sizeof(HEU_AttributeData::AttributeState) == 0x4);
    // public HoudiniEngineUnity.HAPI_AttributeInfo _attributeInfo
    // Size: 0x24
    // Offset: 0x10
    HoudiniEngineUnity::HAPI_AttributeInfo attributeInfo;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HAPI_AttributeInfo) == 0x24);
    // Padding between fields: attributeInfo and: name
    char __padding0[0x4] = {};
    // public System.String _name
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public HoudiniEngineUnity.HEU_AttributeData/AttributeType _attributeType
    // Size: 0x4
    // Offset: 0x40
    HoudiniEngineUnity::HEU_AttributeData::AttributeType attributeType;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_AttributeData::AttributeType) == 0x4);
    // Padding between fields: attributeType and: intValues
    char __padding2[0x4] = {};
    // public System.Int32[] _intValues
    // Size: 0x8
    // Offset: 0x48
    ::Array<int>* intValues;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // public System.Single[] _floatValues
    // Size: 0x8
    // Offset: 0x50
    ::Array<float>* floatValues;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // public System.String[] _stringValues
    // Size: 0x8
    // Offset: 0x58
    ::Array<::Il2CppString*>* stringValues;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // public HoudiniEngineUnity.HEU_AttributeData/AttributeState _attributeState
    // Size: 0x4
    // Offset: 0x60
    HoudiniEngineUnity::HEU_AttributeData::AttributeState attributeState;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_AttributeData::AttributeState) == 0x4);
    // Creating value type constructor for type: HEU_AttributeData
    HEU_AttributeData(HoudiniEngineUnity::HAPI_AttributeInfo attributeInfo_ = {}, ::Il2CppString* name_ = {}, HoudiniEngineUnity::HEU_AttributeData::AttributeType attributeType_ = {}, ::Array<int>* intValues_ = {}, ::Array<float>* floatValues_ = {}, ::Array<::Il2CppString*>* stringValues_ = {}, HoudiniEngineUnity::HEU_AttributeData::AttributeState attributeState_ = {}) noexcept : attributeInfo{attributeInfo_}, name{name_}, attributeType{attributeType_}, intValues{intValues_}, floatValues{floatValues_}, stringValues{stringValues_}, attributeState{attributeState_} {}
    // Creating interface conversion operator: operator HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_AttributeData*>
    operator HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_AttributeData*>() noexcept {
      return *reinterpret_cast<HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_AttributeData*>*>(this);
    }
    // Get instance field reference: public HoudiniEngineUnity.HAPI_AttributeInfo _attributeInfo
    HoudiniEngineUnity::HAPI_AttributeInfo& dyn__attributeInfo();
    // Get instance field reference: public System.String _name
    ::Il2CppString*& dyn__name();
    // Get instance field reference: public HoudiniEngineUnity.HEU_AttributeData/AttributeType _attributeType
    HoudiniEngineUnity::HEU_AttributeData::AttributeType& dyn__attributeType();
    // Get instance field reference: public System.Int32[] _intValues
    ::Array<int>*& dyn__intValues();
    // Get instance field reference: public System.Single[] _floatValues
    ::Array<float>*& dyn__floatValues();
    // Get instance field reference: public System.String[] _stringValues
    ::Array<::Il2CppString*>*& dyn__stringValues();
    // Get instance field reference: public HoudiniEngineUnity.HEU_AttributeData/AttributeState _attributeState
    HoudiniEngineUnity::HEU_AttributeData::AttributeState& dyn__attributeState();
    // public System.Boolean IsColorAttribute()
    // Offset: 0x143DCDC
    bool IsColorAttribute();
    // public System.Void CopyValuesTo(HoudiniEngineUnity.HEU_AttributeData destAttrData)
    // Offset: 0x143DD54
    void CopyValuesTo(HoudiniEngineUnity::HEU_AttributeData* destAttrData);
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_AttributeData other)
    // Offset: 0x143DE74
    bool IsEquivalentTo(HoudiniEngineUnity::HEU_AttributeData* other);
    // public System.Void .ctor()
    // Offset: 0x143E0EC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_AttributeData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_AttributeData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_AttributeData*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_AttributeData
  #pragma pack(pop)
  static check_size<sizeof(HEU_AttributeData), 96 + sizeof(HoudiniEngineUnity::HEU_AttributeData::AttributeState)> __HoudiniEngineUnity_HEU_AttributeDataSizeCheck;
  static_assert(sizeof(HEU_AttributeData) == 0x64);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_AttributeData*, "HoudiniEngineUnity", "HEU_AttributeData");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_AttributeData::AttributeType, "HoudiniEngineUnity", "HEU_AttributeData/AttributeType");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_AttributeData::AttributeState, "HoudiniEngineUnity", "HEU_AttributeData/AttributeState");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributeData::IsColorAttribute
// Il2CppName: IsColorAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributeData::*)()>(&HoudiniEngineUnity::HEU_AttributeData::IsColorAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributeData*), "IsColorAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributeData::CopyValuesTo
// Il2CppName: CopyValuesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributeData::*)(HoudiniEngineUnity::HEU_AttributeData*)>(&HoudiniEngineUnity::HEU_AttributeData::CopyValuesTo)> {
  static const MethodInfo* get() {
    static auto* destAttrData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributeData*), "CopyValuesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destAttrData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributeData::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributeData::*)(HoudiniEngineUnity::HEU_AttributeData*)>(&HoudiniEngineUnity::HEU_AttributeData::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributeData*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributeData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
