// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: HoudiniEngineUnity.HAPI_GeoInfo
#include "HoudiniEngineUnity/HAPI_GeoInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_PartData
  class HEU_PartData;
  // Forward declaring type: HEU_ObjectNode
  class HEU_ObjectNode;
  // Forward declaring type: HEU_InputNode
  class HEU_InputNode;
  // Forward declaring type: HEU_Curve
  class HEU_Curve;
  // Forward declaring type: HEU_VolumeCache
  class HEU_VolumeCache;
  // Skipping declaration: HAPI_GeoType because it is already included!
  // Forward declaring type: HEU_HoudiniAsset
  class HEU_HoudiniAsset;
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HAPI_PartInfo
  struct HAPI_PartInfo;
  // Forward declaring type: HAPI_Transform
  struct HAPI_Transform;
  // Forward declaring type: HEU_MaterialData
  class HEU_MaterialData;
  // Forward declaring type: HEU_GeneratedOutput
  class HEU_GeneratedOutput;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_GeoNode
  class HEU_GeoNode;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_GeoNode);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_GeoNode*, "HoudiniEngineUnity", "HEU_GeoNode");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_GeoNode
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_GeoNode : public ::UnityEngine::ScriptableObject/*, public ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_GeoNode*>, public ::UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    public:
    // private HoudiniEngineUnity.HAPI_GeoInfo _geoInfo
    // Size: 0x24
    // Offset: 0x18
    ::HoudiniEngineUnity::HAPI_GeoInfo geoInfo;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HAPI_GeoInfo) == 0x24);
    // Padding between fields: geoInfo and: geoName
    char __padding0[0x4] = {};
    // private System.String _geoName
    // Size: 0x8
    // Offset: 0x40
    ::StringW geoName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> _parts
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* parts;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*) == 0x8);
    // private HoudiniEngineUnity.HEU_ObjectNode _containerObjectNode
    // Size: 0x8
    // Offset: 0x50
    ::HoudiniEngineUnity::HEU_ObjectNode* containerObjectNode;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_ObjectNode*) == 0x8);
    // private HoudiniEngineUnity.HEU_InputNode _inputNode
    // Size: 0x8
    // Offset: 0x58
    ::HoudiniEngineUnity::HEU_InputNode* inputNode;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_InputNode*) == 0x8);
    // private HoudiniEngineUnity.HEU_Curve _geoCurve
    // Size: 0x8
    // Offset: 0x60
    ::HoudiniEngineUnity::HEU_Curve* geoCurve;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_Curve*) == 0x8);
    // private HoudiniEngineUnity.HEU_VolumeCache _volumeCache
    // Size: 0x8
    // Offset: 0x68
    ::HoudiniEngineUnity::HEU_VolumeCache* volumeCache;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_VolumeCache*) == 0x8);
    // private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeCache> _volumeCaches
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>* volumeCaches;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_GeoNode*>
    operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_GeoNode*>() noexcept {
      return *reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_GeoNode*>*>(this);
    }
    // Creating interface conversion operator: i_HEU_GeoNode
    inline ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_GeoNode*>* i_HEU_GeoNode() noexcept {
      return reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_GeoNode*>*>(this);
    }
    // Creating interface conversion operator: operator ::UnityEngine::ISerializationCallbackReceiver
    operator ::UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: i_ISerializationCallbackReceiver
    inline ::UnityEngine::ISerializationCallbackReceiver* i_ISerializationCallbackReceiver() noexcept {
      return reinterpret_cast<::UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HoudiniEngineUnity.HAPI_GeoInfo _geoInfo
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HAPI_GeoInfo& dyn__geoInfo();
    // Get instance field reference: private System.String _geoName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__geoName();
    // Get instance field reference: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> _parts
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*& dyn__parts();
    // Get instance field reference: private HoudiniEngineUnity.HEU_ObjectNode _containerObjectNode
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_ObjectNode*& dyn__containerObjectNode();
    // Get instance field reference: private HoudiniEngineUnity.HEU_InputNode _inputNode
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_InputNode*& dyn__inputNode();
    // Get instance field reference: private HoudiniEngineUnity.HEU_Curve _geoCurve
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_Curve*& dyn__geoCurve();
    // Get instance field reference: private HoudiniEngineUnity.HEU_VolumeCache _volumeCache
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_VolumeCache*& dyn__volumeCache();
    // Get instance field reference: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeCache> _volumeCaches
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>*& dyn__volumeCaches();
    // public System.Int32 get_GeoID()
    // Offset: 0x178A238
    int get_GeoID();
    // public System.String get_GeoName()
    // Offset: 0x179B140
    ::StringW get_GeoName();
    // public HoudiniEngineUnity.HAPI_GeoType get_GeoType()
    // Offset: 0x179B148
    ::HoudiniEngineUnity::HAPI_GeoType get_GeoType();
    // public System.Boolean get_Editable()
    // Offset: 0x179B150
    bool get_Editable();
    // public System.Boolean get_Displayable()
    // Offset: 0x179B158
    bool get_Displayable();
    // public HoudiniEngineUnity.HEU_ObjectNode get_ObjectNode()
    // Offset: 0x179B1EC
    ::HoudiniEngineUnity::HEU_ObjectNode* get_ObjectNode();
    // public HoudiniEngineUnity.HEU_HoudiniAsset get_ParentAsset()
    // Offset: 0x179B1F4
    ::HoudiniEngineUnity::HEU_HoudiniAsset* get_ParentAsset();
    // public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeCache> get_VolumeCaches()
    // Offset: 0x179B284
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>* get_VolumeCaches();
    // public System.Void .ctor()
    // Offset: 0x179B28C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_GeoNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_GeoNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_GeoNode*, creationType>()));
    }
    // public System.Boolean IsVisible()
    // Offset: 0x179B160
    bool IsVisible();
    // public System.Boolean IsIntermediate()
    // Offset: 0x179B17C
    bool IsIntermediate();
    // public System.Boolean IsIntermediateOrEditable()
    // Offset: 0x179B18C
    bool IsIntermediateOrEditable();
    // public System.Boolean IsGeoInputType()
    // Offset: 0x179B1BC
    bool IsGeoInputType();
    // public System.Boolean IsGeoCurveType()
    // Offset: 0x179B1DC
    bool IsGeoCurveType();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x179B348
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x179B34C
    void OnAfterDeserialize();
    // public System.Void DestroyAllData(System.Boolean bIsRebuild)
    // Offset: 0x179B420
    void DestroyAllData(bool bIsRebuild);
    // public System.Void RemoveAndDestroyPart(HoudiniEngineUnity.HEU_PartData part)
    // Offset: 0x179B760
    void RemoveAndDestroyPart(::HoudiniEngineUnity::HEU_PartData* part);
    // public System.Void Reset()
    // Offset: 0x179B2B4
    void Reset();
    // public System.Void Initialize(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HAPI_GeoInfo geoInfo, HoudiniEngineUnity.HEU_ObjectNode containerObjectNode)
    // Offset: 0x179B7D4
    void Initialize(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HAPI_GeoInfo geoInfo, ::HoudiniEngineUnity::HEU_ObjectNode* containerObjectNode);
    // public System.Boolean DoesThisRequirePotentialCook()
    // Offset: 0x179B928
    bool DoesThisRequirePotentialCook();
    // public System.Void UpdateGeo(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179B994
    void UpdateGeo(::HoudiniEngineUnity::HEU_SessionBase* session);
    // public System.Void ProcessUnityScriptAttribute(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179CA9C
    void ProcessUnityScriptAttribute(::HoudiniEngineUnity::HEU_SessionBase* session);
    // private System.Void ProcessPart(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 partID, ref HoudiniEngineUnity.HAPI_PartInfo partInfo, ref HoudiniEngineUnity.HEU_PartData partData)
    // Offset: 0x179C17C
    void ProcessPart(::HoudiniEngineUnity::HEU_SessionBase* session, int partID, ByRef<::HoudiniEngineUnity::HAPI_PartInfo> partInfo, ByRef<::HoudiniEngineUnity::HEU_PartData*> partData);
    // private System.Void SetupGameObjectAndTransform(HoudiniEngineUnity.HEU_PartData partData, HoudiniEngineUnity.HEU_HoudiniAsset parentAsset)
    // Offset: 0x179CC28
    void SetupGameObjectAndTransform(::HoudiniEngineUnity::HEU_PartData* partData, ::HoudiniEngineUnity::HEU_HoudiniAsset* parentAsset);
    // public System.Void GetPartsByOutputType(System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> meshParts, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> volumeParts)
    // Offset: 0x179CFCC
    void GetPartsByOutputType(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* meshParts, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* volumeParts);
    // public System.Void GeneratePartInstances(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179D0E0
    void GeneratePartInstances(::HoudiniEngineUnity::HEU_SessionBase* session);
    // public System.Void GenerateAttributesStore(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179D210
    void GenerateAttributesStore(::HoudiniEngineUnity::HEU_SessionBase* session);
    // private System.Void ProcessGeoCurve(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179BF64
    void ProcessGeoCurve(::HoudiniEngineUnity::HEU_SessionBase* session);
    // private System.Void SetupGeoCurveGameObjectAndTransform(HoudiniEngineUnity.HEU_Curve curve)
    // Offset: 0x179D2C4
    void SetupGeoCurveGameObjectAndTransform(::HoudiniEngineUnity::HEU_Curve* curve);
    // public System.Void ClearObjectInstances()
    // Offset: 0x179D460
    void ClearObjectInstances();
    // public System.Void SetGeoInfo(HoudiniEngineUnity.HAPI_GeoInfo geoInfo)
    // Offset: 0x179D500
    void SetGeoInfo(::HoudiniEngineUnity::HAPI_GeoInfo geoInfo);
    // public System.String GeneratePartFullName(System.String partName)
    // Offset: 0x179CE5C
    ::StringW GeneratePartFullName(::StringW partName);
    // public System.String GenerateGeoCurveName()
    // Offset: 0x179D5AC
    ::StringW GenerateGeoCurveName();
    // public System.Boolean HasGeoNodeChanged(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179D5B4
    bool HasGeoNodeChanged(::HoudiniEngineUnity::HEU_SessionBase* session);
    // public System.Void ApplyHAPITransform(ref HoudiniEngineUnity.HAPI_Transform hapiTransform)
    // Offset: 0x179D6B4
    void ApplyHAPITransform(ByRef<::HoudiniEngineUnity::HAPI_Transform> hapiTransform);
    // public System.Void GetDebugInfo(System.Text.StringBuilder sb)
    // Offset: 0x179D7BC
    void GetDebugInfo(::System::Text::StringBuilder* sb);
    // public System.Boolean IsUsingMaterial(HoudiniEngineUnity.HEU_MaterialData materialData)
    // Offset: 0x179DAEC
    bool IsUsingMaterial(::HoudiniEngineUnity::HEU_MaterialData* materialData);
    // public System.Void GetClonableParts(System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> clonableParts)
    // Offset: 0x179DC04
    void GetClonableParts(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* clonableParts);
    // public System.Void GetOutputGameObjects(System.Collections.Generic.List`1<UnityEngine.GameObject> outputObjects)
    // Offset: 0x179DD0C
    void GetOutputGameObjects(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* outputObjects);
    // public System.Void GetOutput(System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_GeneratedOutput> outputs)
    // Offset: 0x179DE14
    void GetOutput(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_GeneratedOutput*>* outputs);
    // public HoudiniEngineUnity.HEU_PartData GetHDAPartWithGameObject(UnityEngine.GameObject outputGameObject)
    // Offset: 0x179DF1C
    ::HoudiniEngineUnity::HEU_PartData* GetHDAPartWithGameObject(::UnityEngine::GameObject* outputGameObject);
    // public HoudiniEngineUnity.HEU_PartData GetPartFromPartID(System.Int32 partID)
    // Offset: 0x179E074
    ::HoudiniEngineUnity::HEU_PartData* GetPartFromPartID(int partID);
    // public System.Void GetCurves(System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_Curve> curves, System.Boolean bEditableOnly)
    // Offset: 0x179E160
    void GetCurves(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_Curve*>* curves, bool bEditableOnly);
    // public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> GetParts()
    // Offset: 0x179E33C
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* GetParts();
    // public System.Boolean HasAttribInstancer()
    // Offset: 0x179E344
    bool HasAttribInstancer();
    // public System.Void SetAttributeModifiersOnPartOutputs(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x179E444
    void SetAttributeModifiersOnPartOutputs(::HoudiniEngineUnity::HEU_SessionBase* session);
    // public System.Void CalculateVisiblity(System.Boolean bParentVisibility)
    // Offset: 0x179E6BC
    void CalculateVisiblity(bool bParentVisibility);
    // public System.Void HideAllGeometry()
    // Offset: 0x179E7D8
    void HideAllGeometry();
    // public System.Void CalculateColliderState()
    // Offset: 0x179E880
    void CalculateColliderState();
    // public System.Void DisableAllColliders()
    // Offset: 0x179E924
    void DisableAllColliders();
    // public System.Void ProcessVolumeParts(HoudiniEngineUnity.HEU_SessionBase session, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> volumeParts, System.Boolean bRebuild)
    // Offset: 0x179E9CC
    void ProcessVolumeParts(::HoudiniEngineUnity::HEU_SessionBase* session, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* volumeParts, bool bRebuild);
    // public HoudiniEngineUnity.HEU_VolumeCache GetVolumeCacheByTileIndex(System.Int32 tileIndex)
    // Offset: 0x179F0E4
    ::HoudiniEngineUnity::HEU_VolumeCache* GetVolumeCacheByTileIndex(int tileIndex);
    // public System.Void DestroyVolumeCache()
    // Offset: 0x179B5F4
    void DestroyVolumeCache();
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_GeoNode other)
    // Offset: 0x179F2F0
    bool IsEquivalentTo(::HoudiniEngineUnity::HEU_GeoNode* other);
    // public override System.String ToString()
    // Offset: 0x179F278
    // Implemented from: UnityEngine.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // HoudiniEngineUnity.HEU_GeoNode
  #pragma pack(pop)
  static check_size<sizeof(HEU_GeoNode), 112 + sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>*)> __HoudiniEngineUnity_HEU_GeoNodeSizeCheck;
  static_assert(sizeof(HEU_GeoNode) == 0x78);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_GeoID
// Il2CppName: get_GeoID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_GeoID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_GeoID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_GeoName
// Il2CppName: get_GeoName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_GeoName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_GeoName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_GeoType
// Il2CppName: get_GeoType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HAPI_GeoType (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_GeoType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_GeoType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_Editable
// Il2CppName: get_Editable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_Editable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_Editable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_Displayable
// Il2CppName: get_Displayable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_Displayable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_Displayable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_ObjectNode
// Il2CppName: get_ObjectNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_ObjectNode* (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_ObjectNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_ObjectNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_ParentAsset
// Il2CppName: get_ParentAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_HoudiniAsset* (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_ParentAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_ParentAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::get_VolumeCaches
// Il2CppName: get_VolumeCaches
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>* (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::get_VolumeCaches)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "get_VolumeCaches", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsVisible
// Il2CppName: IsVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::IsVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsIntermediate
// Il2CppName: IsIntermediate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::IsIntermediate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsIntermediate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsIntermediateOrEditable
// Il2CppName: IsIntermediateOrEditable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::IsIntermediateOrEditable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsIntermediateOrEditable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsGeoInputType
// Il2CppName: IsGeoInputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::IsGeoInputType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsGeoInputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsGeoCurveType
// Il2CppName: IsGeoCurveType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::IsGeoCurveType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsGeoCurveType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::DestroyAllData
// Il2CppName: DestroyAllData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(bool)>(&HoudiniEngineUnity::HEU_GeoNode::DestroyAllData)> {
  static const MethodInfo* get() {
    static auto* bIsRebuild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "DestroyAllData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsRebuild});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::RemoveAndDestroyPart
// Il2CppName: RemoveAndDestroyPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_PartData*)>(&HoudiniEngineUnity::HEU_GeoNode::RemoveAndDestroyPart)> {
  static const MethodInfo* get() {
    static auto* part = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "RemoveAndDestroyPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{part});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HAPI_GeoInfo, ::HoudiniEngineUnity::HEU_ObjectNode*)>(&HoudiniEngineUnity::HEU_GeoNode::Initialize)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GeoInfo")->byval_arg;
    static auto* containerObjectNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ObjectNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoInfo, containerObjectNode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::DoesThisRequirePotentialCook
// Il2CppName: DoesThisRequirePotentialCook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::DoesThisRequirePotentialCook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "DoesThisRequirePotentialCook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::UpdateGeo
// Il2CppName: UpdateGeo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::UpdateGeo)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "UpdateGeo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ProcessUnityScriptAttribute
// Il2CppName: ProcessUnityScriptAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::ProcessUnityScriptAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ProcessUnityScriptAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ProcessPart
// Il2CppName: ProcessPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, ByRef<::HoudiniEngineUnity::HAPI_PartInfo>, ByRef<::HoudiniEngineUnity::HEU_PartData*>)>(&HoudiniEngineUnity::HEU_GeoNode::ProcessPart)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")->this_arg;
    static auto* partData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ProcessPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, partID, partInfo, partData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::SetupGameObjectAndTransform
// Il2CppName: SetupGameObjectAndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_PartData*, ::HoudiniEngineUnity::HEU_HoudiniAsset*)>(&HoudiniEngineUnity::HEU_GeoNode::SetupGameObjectAndTransform)> {
  static const MethodInfo* get() {
    static auto* partData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")->byval_arg;
    static auto* parentAsset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "SetupGameObjectAndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partData, parentAsset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetPartsByOutputType
// Il2CppName: GetPartsByOutputType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*)>(&HoudiniEngineUnity::HEU_GeoNode::GetPartsByOutputType)> {
  static const MethodInfo* get() {
    static auto* meshParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")})->byval_arg;
    static auto* volumeParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetPartsByOutputType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshParts, volumeParts});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GeneratePartInstances
// Il2CppName: GeneratePartInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::GeneratePartInstances)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GeneratePartInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GenerateAttributesStore
// Il2CppName: GenerateAttributesStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::GenerateAttributesStore)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GenerateAttributesStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ProcessGeoCurve
// Il2CppName: ProcessGeoCurve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::ProcessGeoCurve)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ProcessGeoCurve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::SetupGeoCurveGameObjectAndTransform
// Il2CppName: SetupGeoCurveGameObjectAndTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_Curve*)>(&HoudiniEngineUnity::HEU_GeoNode::SetupGeoCurveGameObjectAndTransform)> {
  static const MethodInfo* get() {
    static auto* curve = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_Curve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "SetupGeoCurveGameObjectAndTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curve});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ClearObjectInstances
// Il2CppName: ClearObjectInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::ClearObjectInstances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ClearObjectInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::SetGeoInfo
// Il2CppName: SetGeoInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HAPI_GeoInfo)>(&HoudiniEngineUnity::HEU_GeoNode::SetGeoInfo)> {
  static const MethodInfo* get() {
    static auto* geoInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GeoInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "SetGeoInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geoInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GeneratePartFullName
// Il2CppName: GeneratePartFullName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_GeoNode::*)(::StringW)>(&HoudiniEngineUnity::HEU_GeoNode::GeneratePartFullName)> {
  static const MethodInfo* get() {
    static auto* partName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GeneratePartFullName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GenerateGeoCurveName
// Il2CppName: GenerateGeoCurveName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::GenerateGeoCurveName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GenerateGeoCurveName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::HasGeoNodeChanged
// Il2CppName: HasGeoNodeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::HasGeoNodeChanged)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "HasGeoNodeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ApplyHAPITransform
// Il2CppName: ApplyHAPITransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(ByRef<::HoudiniEngineUnity::HAPI_Transform>)>(&HoudiniEngineUnity::HEU_GeoNode::ApplyHAPITransform)> {
  static const MethodInfo* get() {
    static auto* hapiTransform = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ApplyHAPITransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hapiTransform});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetDebugInfo
// Il2CppName: GetDebugInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::System::Text::StringBuilder*)>(&HoudiniEngineUnity::HEU_GeoNode::GetDebugInfo)> {
  static const MethodInfo* get() {
    static auto* sb = &::il2cpp_utils::GetClassFromName("System.Text", "StringBuilder")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetDebugInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sb});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsUsingMaterial
// Il2CppName: IsUsingMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_MaterialData*)>(&HoudiniEngineUnity::HEU_GeoNode::IsUsingMaterial)> {
  static const MethodInfo* get() {
    static auto* materialData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsUsingMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetClonableParts
// Il2CppName: GetClonableParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*)>(&HoudiniEngineUnity::HEU_GeoNode::GetClonableParts)> {
  static const MethodInfo* get() {
    static auto* clonableParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetClonableParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clonableParts});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetOutputGameObjects
// Il2CppName: GetOutputGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)>(&HoudiniEngineUnity::HEU_GeoNode::GetOutputGameObjects)> {
  static const MethodInfo* get() {
    static auto* outputObjects = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetOutputGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputObjects});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetOutput
// Il2CppName: GetOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_GeneratedOutput*>*)>(&HoudiniEngineUnity::HEU_GeoNode::GetOutput)> {
  static const MethodInfo* get() {
    static auto* outputs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_GeneratedOutput")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputs});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetHDAPartWithGameObject
// Il2CppName: GetHDAPartWithGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_PartData* (HoudiniEngineUnity::HEU_GeoNode::*)(::UnityEngine::GameObject*)>(&HoudiniEngineUnity::HEU_GeoNode::GetHDAPartWithGameObject)> {
  static const MethodInfo* get() {
    static auto* outputGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetHDAPartWithGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outputGameObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetPartFromPartID
// Il2CppName: GetPartFromPartID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_PartData* (HoudiniEngineUnity::HEU_GeoNode::*)(int)>(&HoudiniEngineUnity::HEU_GeoNode::GetPartFromPartID)> {
  static const MethodInfo* get() {
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetPartFromPartID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetCurves
// Il2CppName: GetCurves
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_Curve*>*, bool)>(&HoudiniEngineUnity::HEU_GeoNode::GetCurves)> {
  static const MethodInfo* get() {
    static auto* curves = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_Curve")})->byval_arg;
    static auto* bEditableOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetCurves", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{curves, bEditableOnly});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetParts
// Il2CppName: GetParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::GetParts)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::HasAttribInstancer
// Il2CppName: HasAttribInstancer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::HasAttribInstancer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "HasAttribInstancer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::SetAttributeModifiersOnPartOutputs
// Il2CppName: SetAttributeModifiersOnPartOutputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_GeoNode::SetAttributeModifiersOnPartOutputs)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "SetAttributeModifiersOnPartOutputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::CalculateVisiblity
// Il2CppName: CalculateVisiblity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(bool)>(&HoudiniEngineUnity::HEU_GeoNode::CalculateVisiblity)> {
  static const MethodInfo* get() {
    static auto* bParentVisibility = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "CalculateVisiblity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bParentVisibility});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::HideAllGeometry
// Il2CppName: HideAllGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::HideAllGeometry)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "HideAllGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::CalculateColliderState
// Il2CppName: CalculateColliderState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::CalculateColliderState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "CalculateColliderState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::DisableAllColliders
// Il2CppName: DisableAllColliders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::DisableAllColliders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "DisableAllColliders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ProcessVolumeParts
// Il2CppName: ProcessVolumeParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_SessionBase*, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*, bool)>(&HoudiniEngineUnity::HEU_GeoNode::ProcessVolumeParts)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* volumeParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")})->byval_arg;
    static auto* bRebuild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ProcessVolumeParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, volumeParts, bRebuild});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::GetVolumeCacheByTileIndex
// Il2CppName: GetVolumeCacheByTileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_VolumeCache* (HoudiniEngineUnity::HEU_GeoNode::*)(int)>(&HoudiniEngineUnity::HEU_GeoNode::GetVolumeCacheByTileIndex)> {
  static const MethodInfo* get() {
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "GetVolumeCacheByTileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::DestroyVolumeCache
// Il2CppName: DestroyVolumeCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::DestroyVolumeCache)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "DestroyVolumeCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_GeoNode::*)(::HoudiniEngineUnity::HEU_GeoNode*)>(&HoudiniEngineUnity::HEU_GeoNode::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_GeoNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_GeoNode::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_GeoNode::*)()>(&HoudiniEngineUnity::HEU_GeoNode::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_GeoNode*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
