// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_CookLogs
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_CookLogs : public ::Il2CppObject {
    public:
    // private System.Text.StringBuilder _cookLogs
    // Size: 0x8
    // Offset: 0x10
    System::Text::StringBuilder* cookLogs;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // private System.Int32 _currentCookLogCount
    // Size: 0x4
    // Offset: 0x18
    int currentCookLogCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentCookLogCount and: lastLogStr
    char __padding1[0x4] = {};
    // private System.String _lastLogStr
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* lastLogStr;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean _uniqueStrOnly
    // Size: 0x1
    // Offset: 0x28
    bool uniqueStrOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HEU_CookLogs
    HEU_CookLogs(System::Text::StringBuilder* cookLogs_ = {}, int currentCookLogCount_ = {}, ::Il2CppString* lastLogStr_ = {}, bool uniqueStrOnly_ = {}) noexcept : cookLogs{cookLogs_}, currentCookLogCount{currentCookLogCount_}, lastLogStr{lastLogStr_}, uniqueStrOnly{uniqueStrOnly_} {}
    // Get static field: static private HoudiniEngineUnity.HEU_CookLogs _instance
    static HoudiniEngineUnity::HEU_CookLogs* _get__instance();
    // Set static field: static private HoudiniEngineUnity.HEU_CookLogs _instance
    static void _set__instance(HoudiniEngineUnity::HEU_CookLogs* value);
    // static field const value: static private System.Int32 MAX_COOK_LOG_COUNT
    static constexpr const int MAX_COOK_LOG_COUNT = 9001;
    // Get static field: static private System.Int32 MAX_COOK_LOG_COUNT
    static int _get_MAX_COOK_LOG_COUNT();
    // Set static field: static private System.Int32 MAX_COOK_LOG_COUNT
    static void _set_MAX_COOK_LOG_COUNT(int value);
    // static field const value: static public System.Int64 MaxLogSize
    static constexpr const int64_t MaxLogSize = 50000000;
    // Get static field: static public System.Int64 MaxLogSize
    static int64_t _get_MaxLogSize();
    // Set static field: static public System.Int64 MaxLogSize
    static void _set_MaxLogSize(int64_t value);
    // Get instance field reference: private System.Text.StringBuilder _cookLogs
    System::Text::StringBuilder*& dyn__cookLogs();
    // Get instance field reference: private System.Int32 _currentCookLogCount
    int& dyn__currentCookLogCount();
    // Get instance field reference: private System.String _lastLogStr
    ::Il2CppString*& dyn__lastLogStr();
    // Get instance field reference: private System.Boolean _uniqueStrOnly
    bool& dyn__uniqueStrOnly();
    // static public HoudiniEngineUnity.HEU_CookLogs get_Instance()
    // Offset: 0x1446978
    static HoudiniEngineUnity::HEU_CookLogs* get_Instance();
    // public System.String GetCookLogString()
    // Offset: 0x1446A74
    ::Il2CppString* GetCookLogString();
    // public System.Void AppendCookLog(System.String logStr)
    // Offset: 0x1446A94
    void AppendCookLog(::Il2CppString* logStr);
    // public System.Void ClearCookLog()
    // Offset: 0x1446D58
    void ClearCookLog();
    // public System.String GetCookLogFilePath()
    // Offset: 0x1446DBC
    ::Il2CppString* GetCookLogFilePath();
    // public System.Void DeleteCookingFile()
    // Offset: 0x1446E88
    void DeleteCookingFile();
    // public System.Void WriteToLogFile(System.String logStr, System.Boolean checkLastLogStr)
    // Offset: 0x1446B98
    void WriteToLogFile(::Il2CppString* logStr, bool checkLastLogStr);
    // public System.Int64 GetFileSizeOfLogFile()
    // Offset: 0x1446F18
    int64_t GetFileSizeOfLogFile();
    // public System.Void .ctor()
    // Offset: 0x14469F4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_CookLogs* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_CookLogs::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_CookLogs*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_CookLogs
  #pragma pack(pop)
  static check_size<sizeof(HEU_CookLogs), 40 + sizeof(bool)> __HoudiniEngineUnity_HEU_CookLogsSizeCheck;
  static_assert(sizeof(HEU_CookLogs) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_CookLogs*, "HoudiniEngineUnity", "HEU_CookLogs");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_CookLogs* (*)()>(&HoudiniEngineUnity::HEU_CookLogs::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::GetCookLogString
// Il2CppName: GetCookLogString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_CookLogs::*)()>(&HoudiniEngineUnity::HEU_CookLogs::GetCookLogString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "GetCookLogString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::AppendCookLog
// Il2CppName: AppendCookLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_CookLogs::*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_CookLogs::AppendCookLog)> {
  static const MethodInfo* get() {
    static auto* logStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "AppendCookLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logStr});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::ClearCookLog
// Il2CppName: ClearCookLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_CookLogs::*)()>(&HoudiniEngineUnity::HEU_CookLogs::ClearCookLog)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "ClearCookLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::GetCookLogFilePath
// Il2CppName: GetCookLogFilePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_CookLogs::*)()>(&HoudiniEngineUnity::HEU_CookLogs::GetCookLogFilePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "GetCookLogFilePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::DeleteCookingFile
// Il2CppName: DeleteCookingFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_CookLogs::*)()>(&HoudiniEngineUnity::HEU_CookLogs::DeleteCookingFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "DeleteCookingFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::WriteToLogFile
// Il2CppName: WriteToLogFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_CookLogs::*)(::Il2CppString*, bool)>(&HoudiniEngineUnity::HEU_CookLogs::WriteToLogFile)> {
  static const MethodInfo* get() {
    static auto* logStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* checkLastLogStr = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "WriteToLogFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logStr, checkLastLogStr});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::GetFileSizeOfLogFile
// Il2CppName: GetFileSizeOfLogFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (HoudiniEngineUnity::HEU_CookLogs::*)()>(&HoudiniEngineUnity::HEU_CookLogs::GetFileSizeOfLogFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_CookLogs*), "GetFileSizeOfLogFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_CookLogs::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
