// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HEU_MaterialData
#include "HoudiniEngineUnity/HEU_MaterialData.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HAPI_MaterialInfo
  struct HAPI_MaterialInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_MaterialFactory
  class HEU_MaterialFactory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_MaterialFactory);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_MaterialFactory*, "HoudiniEngineUnity", "HEU_MaterialFactory");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_MaterialFactory
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_MaterialFactory : public ::Il2CppObject {
    public:
    // Get static field: static public UnityEngine.Material _defaultStandardMaterial
    static ::UnityEngine::Material* _get__defaultStandardMaterial();
    // Set static field: static public UnityEngine.Material _defaultStandardMaterial
    static void _set__defaultStandardMaterial(::UnityEngine::Material* value);
    // static public UnityEngine.Shader FindShader(System.String shaderName)
    // Offset: 0x189CA7C
    static ::UnityEngine::Shader* FindShader(::StringW shaderName);
    // static public UnityEngine.Shader FindPluginShader(System.String shaderName)
    // Offset: 0x189BA14
    static ::UnityEngine::Shader* FindPluginShader(::StringW shaderName);
    // static public UnityEngine.Material GetNewMaterialWithShader(System.String assetCacheFolderPath, System.String shaderName, System.String materialName, System.Boolean bWriteToFile)
    // Offset: 0x189CACC
    static ::UnityEngine::Material* GetNewMaterialWithShader(::StringW assetCacheFolderPath, ::StringW shaderName, ::StringW materialName, bool bWriteToFile);
    // static public UnityEngine.Material CreateNewHoudiniStandardMaterial(System.String assetCacheFolderPath, System.String materialName, System.Boolean bWriteToFile)
    // Offset: 0x189CCC0
    static ::UnityEngine::Material* CreateNewHoudiniStandardMaterial(::StringW assetCacheFolderPath, ::StringW materialName, bool bWriteToFile);
    // static public System.Void WriteMaterialToAssetCache(UnityEngine.Material material, System.String assetCacheFolderPath, System.String materialName, System.Boolean bOverwriteExisting)
    // Offset: 0x189CD04
    static void WriteMaterialToAssetCache(::UnityEngine::Material* material, ::StringW assetCacheFolderPath, ::StringW materialName, bool bOverwriteExisting);
    // static public System.Boolean DoesMaterialExistInAssetCache(UnityEngine.Material material)
    // Offset: 0x189CDDC
    static bool DoesMaterialExistInAssetCache(::UnityEngine::Material* material);
    // static public System.Void DestroyNonAssetMaterial(UnityEngine.Material material, System.Boolean bRegisterUndo)
    // Offset: 0x189CE04
    static void DestroyNonAssetMaterial(::UnityEngine::Material* material, bool bRegisterUndo);
    // static public System.Void DeleteAssetMaterial(UnityEngine.Material material)
    // Offset: 0x189CEB4
    static void DeleteAssetMaterial(::UnityEngine::Material* material);
    // static public UnityEngine.Texture2D RenderAndExtractImageToTexture(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HAPI_MaterialInfo materialInfo, System.Int32 textureParmID, System.String textureName, System.String assetCacheFolderPath, System.Boolean isNormalMap, System.Boolean invertTexture)
    // Offset: 0x189C1D4
    static ::UnityEngine::Texture2D* RenderAndExtractImageToTexture(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HAPI_MaterialInfo materialInfo, int textureParmID, ::StringW textureName, ::StringW assetCacheFolderPath, bool isNormalMap, bool invertTexture);
    // static private UnityEngine.Texture2D ExtractHoudiniImageToTexturePNGJPEG(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HAPI_MaterialInfo materialInfo, System.String imagePlanes)
    // Offset: 0x189D1CC
    static ::UnityEngine::Texture2D* ExtractHoudiniImageToTexturePNGJPEG(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HAPI_MaterialInfo materialInfo, ::StringW imagePlanes);
    // static private UnityEngine.Texture2D ExtractHoudiniImageToTextureRaw(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HAPI_MaterialInfo materialInfo, System.String imagePlanes)
    // Offset: 0x189CEBC
    static ::UnityEngine::Texture2D* ExtractHoudiniImageToTextureRaw(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HAPI_MaterialInfo materialInfo, ::StringW imagePlanes);
    // static public UnityEngine.Texture2D ExtractHoudiniImageToTextureFile(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HAPI_MaterialInfo materialInfo, System.String imagePlanes, System.String assetCacheFolderPath)
    // Offset: 0x189D304
    static ::UnityEngine::Texture2D* ExtractHoudiniImageToTextureFile(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HAPI_MaterialInfo materialInfo, ::StringW imagePlanes, ::StringW assetCacheFolderPath);
    // static public UnityEngine.Material LoadUnityMaterial(System.String materialPath)
    // Offset: 0x189D4A4
    static ::UnityEngine::Material* LoadUnityMaterial(::StringW materialPath);
    // static public UnityEngine.Material LoadSubstanceMaterialWithName(System.String materialPath, System.String substanceName)
    // Offset: 0x189D710
    static ::UnityEngine::Material* LoadSubstanceMaterialWithName(::StringW materialPath, ::StringW substanceName);
    // static public UnityEngine.Material LoadSubstanceMaterialWithIndex(System.String materialPath, System.Int32 substanceMaterialIndex)
    // Offset: 0x189D8FC
    static ::UnityEngine::Material* LoadSubstanceMaterialWithIndex(::StringW materialPath, int substanceMaterialIndex);
    // static public System.Int32 GetUnitySubstanceMaterialKey(System.String unityMaterialPath, System.String substanceName, System.Int32 substanceIndex)
    // Offset: 0x189DB68
    static int GetUnitySubstanceMaterialKey(::StringW unityMaterialPath, ::StringW substanceName, int substanceIndex);
    // static public System.Int32 MaterialNameToKey(System.String materialName)
    // Offset: 0x189DC78
    static int MaterialNameToKey(::StringW materialName);
    // static public System.Void EnableGPUInstancing(UnityEngine.Material material)
    // Offset: 0x189DC94
    static void EnableGPUInstancing(::UnityEngine::Material* material);
    // static public System.Boolean MaterialHasGPUInstancingEnabled(UnityEngine.Material material)
    // Offset: 0x189DCB0
    static bool MaterialHasGPUInstancingEnabled(::UnityEngine::Material* material);
    // static public UnityEngine.Material CopyMaterial(UnityEngine.Material material)
    // Offset: 0x189DCC8
    static ::UnityEngine::Material* CopyMaterial(::UnityEngine::Material* material);
    // static public UnityEngine.Material GetDefaultStandardMaterial()
    // Offset: 0x189DD2C
    static ::UnityEngine::Material* GetDefaultStandardMaterial();
    // static public UnityEngine.Texture2D LoadTexture(System.String path)
    // Offset: 0x189DDE4
    static ::UnityEngine::Texture2D* LoadTexture(::StringW path);
    // static public UnityEngine.Texture2D WhiteTexture()
    // Offset: 0x189DF00
    static ::UnityEngine::Texture2D* WhiteTexture();
    // static public HoudiniEngineUnity.HEU_MaterialData CreateUnitySubstanceMaterialData(System.Int32 materialKey, System.String materialPath, System.String substanceName, System.Int32 substanceIndex, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_MaterialData> materialCache, System.String assetCacheFolderPath)
    // Offset: 0x189DF08
    static ::HoudiniEngineUnity::HEU_MaterialData* CreateUnitySubstanceMaterialData(int materialKey, ::StringW materialPath, ::StringW substanceName, int substanceIndex, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>* materialCache, ::StringW assetCacheFolderPath);
    // static public HoudiniEngineUnity.HEU_MaterialData CreateMaterialInCache(System.Int32 materialKey, System.String materialName, HoudiniEngineUnity.HEU_MaterialData/HoudiniEngineUnity.Source sourceType, System.Boolean bWriteToFile, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_MaterialData> materialCache, System.String assetCacheFolderPath)
    // Offset: 0x189E218
    static ::HoudiniEngineUnity::HEU_MaterialData* CreateMaterialInCache(int materialKey, ::StringW materialName, ::HoudiniEngineUnity::HEU_MaterialData::Source sourceType, bool bWriteToFile, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>* materialCache, ::StringW assetCacheFolderPath);
    // static public HoudiniEngineUnity.HEU_MaterialData GetOrCreateDefaultMaterialInCache(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.Boolean bWriteToFile, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_MaterialData> materialCache, System.String assetCacheFolderPath)
    // Offset: 0x189E330
    static ::HoudiniEngineUnity::HEU_MaterialData* GetOrCreateDefaultMaterialInCache(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, bool bWriteToFile, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>* materialCache, ::StringW assetCacheFolderPath);
    // static public HoudiniEngineUnity.HEU_MaterialData GetMaterialDataFromCache(System.Int32 materialKey, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_MaterialData> materialCache)
    // Offset: 0x189E4D0
    static ::HoudiniEngineUnity::HEU_MaterialData* GetMaterialDataFromCache(int materialKey, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>* materialCache);
    // static public System.String GenerateDefaultMaterialName(System.Int32 geoID, System.Int32 partID)
    // Offset: 0x189E42C
    static ::StringW GenerateDefaultMaterialName(int geoID, int partID);
    // static public HoudiniEngineUnity.HEU_MaterialData CreateHoudiniMaterialData(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 assetID, System.Int32 materialID, System.Int32 geoID, System.Int32 partID, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_MaterialData> materialCache, System.String assetCacheFolderPath)
    // Offset: 0x189E5E4
    static ::HoudiniEngineUnity::HEU_MaterialData* CreateHoudiniMaterialData(::HoudiniEngineUnity::HEU_SessionBase* session, int assetID, int materialID, int geoID, int partID, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>* materialCache, ::StringW assetCacheFolderPath);
    // static public System.Collections.Generic.Dictionary`2<System.Int32,HoudiniEngineUnity.HEU_MaterialData> GetMaterialDataMapFromCache(System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_MaterialData> materialCache)
    // Offset: 0x189E778
    static ::System::Collections::Generic::Dictionary_2<int, ::HoudiniEngineUnity::HEU_MaterialData*>* GetMaterialDataMapFromCache(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>* materialCache);
  }; // HoudiniEngineUnity.HEU_MaterialFactory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::FindShader
// Il2CppName: FindShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (*)(::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::FindShader)> {
  static const MethodInfo* get() {
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "FindShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::FindPluginShader
// Il2CppName: FindPluginShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Shader* (*)(::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::FindPluginShader)> {
  static const MethodInfo* get() {
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "FindPluginShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shaderName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GetNewMaterialWithShader
// Il2CppName: GetNewMaterialWithShader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::StringW, ::StringW, ::StringW, bool)>(&HoudiniEngineUnity::HEU_MaterialFactory::GetNewMaterialWithShader)> {
  static const MethodInfo* get() {
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* shaderName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* materialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bWriteToFile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GetNewMaterialWithShader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetCacheFolderPath, shaderName, materialName, bWriteToFile});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::CreateNewHoudiniStandardMaterial
// Il2CppName: CreateNewHoudiniStandardMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::StringW, ::StringW, bool)>(&HoudiniEngineUnity::HEU_MaterialFactory::CreateNewHoudiniStandardMaterial)> {
  static const MethodInfo* get() {
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* materialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bWriteToFile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "CreateNewHoudiniStandardMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetCacheFolderPath, materialName, bWriteToFile});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::WriteMaterialToAssetCache
// Il2CppName: WriteMaterialToAssetCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, ::StringW, ::StringW, bool)>(&HoudiniEngineUnity::HEU_MaterialFactory::WriteMaterialToAssetCache)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* materialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bOverwriteExisting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "WriteMaterialToAssetCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, assetCacheFolderPath, materialName, bOverwriteExisting});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::DoesMaterialExistInAssetCache
// Il2CppName: DoesMaterialExistInAssetCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Material*)>(&HoudiniEngineUnity::HEU_MaterialFactory::DoesMaterialExistInAssetCache)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "DoesMaterialExistInAssetCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::DestroyNonAssetMaterial
// Il2CppName: DestroyNonAssetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*, bool)>(&HoudiniEngineUnity::HEU_MaterialFactory::DestroyNonAssetMaterial)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* bRegisterUndo = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "DestroyNonAssetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material, bRegisterUndo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::DeleteAssetMaterial
// Il2CppName: DeleteAssetMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*)>(&HoudiniEngineUnity::HEU_MaterialFactory::DeleteAssetMaterial)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "DeleteAssetMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::RenderAndExtractImageToTexture
// Il2CppName: RenderAndExtractImageToTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HAPI_MaterialInfo, int, ::StringW, ::StringW, bool, bool)>(&HoudiniEngineUnity::HEU_MaterialFactory::RenderAndExtractImageToTexture)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* materialInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_MaterialInfo")->byval_arg;
    static auto* textureParmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textureName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* isNormalMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* invertTexture = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "RenderAndExtractImageToTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, materialInfo, textureParmID, textureName, assetCacheFolderPath, isNormalMap, invertTexture});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::ExtractHoudiniImageToTexturePNGJPEG
// Il2CppName: ExtractHoudiniImageToTexturePNGJPEG
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HAPI_MaterialInfo, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::ExtractHoudiniImageToTexturePNGJPEG)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* materialInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_MaterialInfo")->byval_arg;
    static auto* imagePlanes = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "ExtractHoudiniImageToTexturePNGJPEG", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, materialInfo, imagePlanes});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::ExtractHoudiniImageToTextureRaw
// Il2CppName: ExtractHoudiniImageToTextureRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HAPI_MaterialInfo, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::ExtractHoudiniImageToTextureRaw)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* materialInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_MaterialInfo")->byval_arg;
    static auto* imagePlanes = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "ExtractHoudiniImageToTextureRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, materialInfo, imagePlanes});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::ExtractHoudiniImageToTextureFile
// Il2CppName: ExtractHoudiniImageToTextureFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HAPI_MaterialInfo, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::ExtractHoudiniImageToTextureFile)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* materialInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_MaterialInfo")->byval_arg;
    static auto* imagePlanes = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "ExtractHoudiniImageToTextureFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, materialInfo, imagePlanes, assetCacheFolderPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::LoadUnityMaterial
// Il2CppName: LoadUnityMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::LoadUnityMaterial)> {
  static const MethodInfo* get() {
    static auto* materialPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "LoadUnityMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::LoadSubstanceMaterialWithName
// Il2CppName: LoadSubstanceMaterialWithName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::LoadSubstanceMaterialWithName)> {
  static const MethodInfo* get() {
    static auto* materialPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* substanceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "LoadSubstanceMaterialWithName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPath, substanceName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::LoadSubstanceMaterialWithIndex
// Il2CppName: LoadSubstanceMaterialWithIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::StringW, int)>(&HoudiniEngineUnity::HEU_MaterialFactory::LoadSubstanceMaterialWithIndex)> {
  static const MethodInfo* get() {
    static auto* materialPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* substanceMaterialIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "LoadSubstanceMaterialWithIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPath, substanceMaterialIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GetUnitySubstanceMaterialKey
// Il2CppName: GetUnitySubstanceMaterialKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW, ::StringW, int)>(&HoudiniEngineUnity::HEU_MaterialFactory::GetUnitySubstanceMaterialKey)> {
  static const MethodInfo* get() {
    static auto* unityMaterialPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* substanceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* substanceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GetUnitySubstanceMaterialKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{unityMaterialPath, substanceName, substanceIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::MaterialNameToKey
// Il2CppName: MaterialNameToKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::MaterialNameToKey)> {
  static const MethodInfo* get() {
    static auto* materialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "MaterialNameToKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::EnableGPUInstancing
// Il2CppName: EnableGPUInstancing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Material*)>(&HoudiniEngineUnity::HEU_MaterialFactory::EnableGPUInstancing)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "EnableGPUInstancing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::MaterialHasGPUInstancingEnabled
// Il2CppName: MaterialHasGPUInstancingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Material*)>(&HoudiniEngineUnity::HEU_MaterialFactory::MaterialHasGPUInstancingEnabled)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "MaterialHasGPUInstancingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::CopyMaterial
// Il2CppName: CopyMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)(::UnityEngine::Material*)>(&HoudiniEngineUnity::HEU_MaterialFactory::CopyMaterial)> {
  static const MethodInfo* get() {
    static auto* material = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "CopyMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{material});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GetDefaultStandardMaterial
// Il2CppName: GetDefaultStandardMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (*)()>(&HoudiniEngineUnity::HEU_MaterialFactory::GetDefaultStandardMaterial)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GetDefaultStandardMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::LoadTexture
// Il2CppName: LoadTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::LoadTexture)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "LoadTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::WhiteTexture
// Il2CppName: WhiteTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&HoudiniEngineUnity::HEU_MaterialFactory::WhiteTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "WhiteTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::CreateUnitySubstanceMaterialData
// Il2CppName: CreateUnitySubstanceMaterialData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_MaterialData* (*)(int, ::StringW, ::StringW, int, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>*, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::CreateUnitySubstanceMaterialData)> {
  static const MethodInfo* get() {
    static auto* materialKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* substanceName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* substanceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")})->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "CreateUnitySubstanceMaterialData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialKey, materialPath, substanceName, substanceIndex, materialCache, assetCacheFolderPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::CreateMaterialInCache
// Il2CppName: CreateMaterialInCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_MaterialData* (*)(int, ::StringW, ::HoudiniEngineUnity::HEU_MaterialData::Source, bool, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>*, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::CreateMaterialInCache)> {
  static const MethodInfo* get() {
    static auto* materialKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* sourceType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData/Source")->byval_arg;
    static auto* bWriteToFile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* materialCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")})->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "CreateMaterialInCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialKey, materialName, sourceType, bWriteToFile, materialCache, assetCacheFolderPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GetOrCreateDefaultMaterialInCache
// Il2CppName: GetOrCreateDefaultMaterialInCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_MaterialData* (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, bool, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>*, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::GetOrCreateDefaultMaterialInCache)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bWriteToFile = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* materialCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")})->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GetOrCreateDefaultMaterialInCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, bWriteToFile, materialCache, assetCacheFolderPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GetMaterialDataFromCache
// Il2CppName: GetMaterialDataFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_MaterialData* (*)(int, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>*)>(&HoudiniEngineUnity::HEU_MaterialFactory::GetMaterialDataFromCache)> {
  static const MethodInfo* get() {
    static auto* materialKey = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GetMaterialDataFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialKey, materialCache});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GenerateDefaultMaterialName
// Il2CppName: GenerateDefaultMaterialName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int)>(&HoudiniEngineUnity::HEU_MaterialFactory::GenerateDefaultMaterialName)> {
  static const MethodInfo* get() {
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GenerateDefaultMaterialName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{geoID, partID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::CreateHoudiniMaterialData
// Il2CppName: CreateHoudiniMaterialData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_MaterialData* (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, int, int, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>*, ::StringW)>(&HoudiniEngineUnity::HEU_MaterialFactory::CreateHoudiniMaterialData)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* assetID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")})->byval_arg;
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "CreateHoudiniMaterialData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, assetID, materialID, geoID, partID, materialCache, assetCacheFolderPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_MaterialFactory::GetMaterialDataMapFromCache
// Il2CppName: GetMaterialDataMapFromCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<int, ::HoudiniEngineUnity::HEU_MaterialData*>* (*)(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_MaterialData*>*)>(&HoudiniEngineUnity::HEU_MaterialFactory::GetMaterialDataMapFromCache)> {
  static const MethodInfo* get() {
    static auto* materialCache = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_MaterialData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_MaterialFactory*), "GetMaterialDataMapFromCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialCache});
  }
};
