// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: UnityEngine.TreeInstance
#include "UnityEngine/TreeInstance.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.Test_TreeInstance
  // [TokenAttribute] Offset: FFFFFFFF
  class Test_TreeInstance : public ::Il2CppObject/*, public HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::Test_TreeInstance*>*/ {
    public:
    // public UnityEngine.TreeInstance self
    // Size: 0x28
    // Offset: 0x10
    UnityEngine::TreeInstance self;
    // Field size check
    static_assert(sizeof(UnityEngine::TreeInstance) == 0x28);
    // Creating value type constructor for type: Test_TreeInstance
    Test_TreeInstance(UnityEngine::TreeInstance self_ = {}) noexcept : self{self_} {}
    // Creating interface conversion operator: operator HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::Test_TreeInstance*>
    operator HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::Test_TreeInstance*>() noexcept {
      return *reinterpret_cast<HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::Test_TreeInstance*>*>(this);
    }
    // Creating conversion operator: operator UnityEngine::TreeInstance
    constexpr operator UnityEngine::TreeInstance() const noexcept {
      return self;
    }
    // Get instance field reference: public UnityEngine.TreeInstance self
    UnityEngine::TreeInstance& dyn_self();
    // public System.Void .ctor(UnityEngine.TreeInstance self)
    // Offset: 0x25D42CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Test_TreeInstance* New_ctor(UnityEngine::TreeInstance self) {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_TreeInstance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Test_TreeInstance*, creationType>(self)));
    }
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.Test_TreeInstance other)
    // Offset: 0x25D4304
    bool IsEquivalentTo(HoudiniEngineUnity::Test_TreeInstance* other);
  }; // HoudiniEngineUnity.Test_TreeInstance
  #pragma pack(pop)
  static check_size<sizeof(Test_TreeInstance), 16 + sizeof(UnityEngine::TreeInstance)> __HoudiniEngineUnity_Test_TreeInstanceSizeCheck;
  static_assert(sizeof(Test_TreeInstance) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::Test_TreeInstance*, "HoudiniEngineUnity", "Test_TreeInstance");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_TreeInstance::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_TreeInstance::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::Test_TreeInstance::*)(HoudiniEngineUnity::Test_TreeInstance*)>(&HoudiniEngineUnity::Test_TreeInstance::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "Test_TreeInstance")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::Test_TreeInstance*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
