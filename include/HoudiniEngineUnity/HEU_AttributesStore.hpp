// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: HoudiniEngineUnity.HEU_AttributeData
#include "HoudiniEngineUnity/HEU_AttributeData.hpp"
// Including type: HoudiniEngineUnity.HEU_ToolsInfo
#include "HoudiniEngineUnity/HEU_ToolsInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_HoudiniAsset
  class HEU_HoudiniAsset;
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HAPI_PartInfo
  struct HAPI_PartInfo;
  // Forward declaring type: HAPI_PartType
  struct HAPI_PartType;
  // Skipping declaration: HAPI_AttributeInfo because it is already included!
  // Skipping declaration: HAPI_AttributeOwner because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshCollider
  class MeshCollider;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_AttributesStore
  class HEU_AttributesStore;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_AttributesStore);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_AttributesStore*, "HoudiniEngineUnity", "HEU_AttributesStore");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x92
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_AttributesStore
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_AttributesStore : public ::UnityEngine::ScriptableObject/*, public ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_AttributesStore*>*/ {
    public:
    // Nested type: ::HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueFunc
    class SetAttributeValueFunc;
    public:
    // private System.Int32 _geoID
    // Size: 0x4
    // Offset: 0x18
    int geoID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _partID
    // Size: 0x4
    // Offset: 0x1C
    int partID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String _geoName
    // Size: 0x8
    // Offset: 0x20
    ::StringW geoName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_AttributeData> _attributeDatas
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>* attributeDatas;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>*) == 0x8);
    // private System.Boolean _hasColorAttribute
    // Size: 0x1
    // Offset: 0x30
    bool hasColorAttribute;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasColorAttribute and: localMaterial
    char __padding4[0x7] = {};
    // private UnityEngine.Material _localMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* localMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Transform _outputTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* outputTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3[] _positionAttributeValues
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector3> positionAttributeValues;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32[] _vertexIndices
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<int> vertexIndices;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // private UnityEngine.GameObject _outputGameObject
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* outputGameObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Mesh _outputMesh
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Mesh* outputMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material[] _outputMaterials
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Material*> outputMaterials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // private UnityEngine.MeshCollider _outputCollider
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::MeshCollider* outputCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshCollider*) == 0x8);
    // private UnityEngine.Mesh _outputColliderMesh
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Mesh* outputColliderMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.MeshCollider _outputMeshCollider
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::MeshCollider* outputMeshCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshCollider*) == 0x8);
    // private UnityEngine.MeshCollider _localMeshCollider
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::MeshCollider* localMeshCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshCollider*) == 0x8);
    // private System.Boolean _outputMeshRendererInitiallyEnabled
    // Size: 0x1
    // Offset: 0x90
    bool outputMeshRendererInitiallyEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _outputMeshColliderInitiallyEnabled
    // Size: 0x1
    // Offset: 0x91
    bool outputMeshColliderInitiallyEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_AttributesStore*>
    operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_AttributesStore*>() noexcept {
      return *reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_AttributesStore*>*>(this);
    }
    // Creating interface conversion operator: i_HEU_AttributesStore
    inline ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_AttributesStore*>* i_HEU_AttributesStore() noexcept {
      return reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_AttributesStore*>*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _geoID
    [[deprecated("Use field access instead!")]] int& dyn__geoID();
    // Get instance field reference: private System.Int32 _partID
    [[deprecated("Use field access instead!")]] int& dyn__partID();
    // Get instance field reference: private System.String _geoName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__geoName();
    // Get instance field reference: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_AttributeData> _attributeDatas
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>*& dyn__attributeDatas();
    // Get instance field reference: private System.Boolean _hasColorAttribute
    [[deprecated("Use field access instead!")]] bool& dyn__hasColorAttribute();
    // Get instance field reference: private UnityEngine.Material _localMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__localMaterial();
    // Get instance field reference: private UnityEngine.Transform _outputTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__outputTransform();
    // Get instance field reference: private UnityEngine.Vector3[] _positionAttributeValues
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__positionAttributeValues();
    // Get instance field reference: private System.Int32[] _vertexIndices
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__vertexIndices();
    // Get instance field reference: private UnityEngine.GameObject _outputGameObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__outputGameObject();
    // Get instance field reference: private UnityEngine.Mesh _outputMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__outputMesh();
    // Get instance field reference: private UnityEngine.Material[] _outputMaterials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn__outputMaterials();
    // Get instance field reference: private UnityEngine.MeshCollider _outputCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshCollider*& dyn__outputCollider();
    // Get instance field reference: private UnityEngine.Mesh _outputColliderMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__outputColliderMesh();
    // Get instance field reference: private UnityEngine.MeshCollider _outputMeshCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshCollider*& dyn__outputMeshCollider();
    // Get instance field reference: private UnityEngine.MeshCollider _localMeshCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshCollider*& dyn__localMeshCollider();
    // Get instance field reference: private System.Boolean _outputMeshRendererInitiallyEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__outputMeshRendererInitiallyEnabled();
    // Get instance field reference: private System.Boolean _outputMeshColliderInitiallyEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__outputMeshColliderInitiallyEnabled();
    // public System.Int32 get_GeoID()
    // Offset: 0x16EF2C0
    int get_GeoID();
    // public System.Int32 get_PartID()
    // Offset: 0x16EF2C8
    int get_PartID();
    // public System.String get_GeoName()
    // Offset: 0x16EF2D0
    ::StringW get_GeoName();
    // public UnityEngine.Transform get_OutputTransform()
    // Offset: 0x16EF2E0
    ::UnityEngine::Transform* get_OutputTransform();
    // public UnityEngine.Mesh get_OutputMesh()
    // Offset: 0x16EF2E8
    ::UnityEngine::Mesh* get_OutputMesh();
    // public System.Void .ctor()
    // Offset: 0x16F37E8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_AttributesStore* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_AttributesStore::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_AttributesStore*, creationType>()));
    }
    // public System.Boolean HasColorAttribute()
    // Offset: 0x16EF2D8
    bool HasColorAttribute();
    // public System.Void DestroyAllData(HoudiniEngineUnity.HEU_HoudiniAsset asset)
    // Offset: 0x16EF2F0
    void DestroyAllData(::HoudiniEngineUnity::HEU_HoudiniAsset* asset);
    // public System.Void SyncAllAttributesFrom(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_HoudiniAsset asset, System.Int32 geoID, ref HoudiniEngineUnity.HAPI_PartInfo partInfo, UnityEngine.GameObject outputGameObject)
    // Offset: 0x16EF3AC
    void SyncAllAttributesFrom(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HEU_HoudiniAsset* asset, int geoID, ByRef<::HoudiniEngineUnity::HAPI_PartInfo> partInfo, ::UnityEngine::GameObject* outputGameObject);
    // public System.Void SetupMeshAndMaterials(HoudiniEngineUnity.HEU_HoudiniAsset asset, HoudiniEngineUnity.HAPI_PartType partType, UnityEngine.GameObject outputGameObject)
    // Offset: 0x16F02A0
    void SetupMeshAndMaterials(::HoudiniEngineUnity::HEU_HoudiniAsset* asset, ::HoudiniEngineUnity::HAPI_PartType partType, ::UnityEngine::GameObject* outputGameObject);
    // public System.Boolean HasDirtyAttributes()
    // Offset: 0x16F06B0
    bool HasDirtyAttributes();
    // public System.Void SyncDirtyAttributesToHoudini(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x16F07C8
    void SyncDirtyAttributesToHoudini(::HoudiniEngineUnity::HEU_SessionBase* session);
    // private System.Void PopulateAttributeData(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, HoudiniEngineUnity.HEU_AttributeData attributeData, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo)
    // Offset: 0x16EFB90
    void PopulateAttributeData(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::HoudiniEngineUnity::HEU_AttributeData* attributeData, ByRef<::HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo);
    // private System.Void GetAttributesList(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_AttributeData> attributesList, HoudiniEngineUnity.HAPI_AttributeOwner ownerType, System.Int32 attributeCount)
    // Offset: 0x16F0D00
    void GetAttributesList(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>* attributesList, ::HoudiniEngineUnity::HAPI_AttributeOwner ownerType, int attributeCount);
    // private System.Void UpdateAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, HoudiniEngineUnity.HEU_AttributeData attributeData)
    // Offset: 0x16F0EF8
    void UpdateAttribute(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::HoudiniEngineUnity::HEU_AttributeData* attributeData);
    // private System.Void UpdateAttributeList(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_AttributeData> attributeDataList)
    // Offset: 0x16F1360
    void UpdateAttributeList(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>* attributeDataList);
    // public System.Void RefreshUpstreamInputs(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x16F1470
    void RefreshUpstreamInputs(::HoudiniEngineUnity::HEU_SessionBase* session);
    // public System.Boolean UploadAttributeViaMeshInput(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID)
    // Offset: 0x16F0848
    bool UploadAttributeViaMeshInput(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID);
    // static private System.Void SetAttributeDataSyncd(HoudiniEngineUnity.HEU_AttributeData attributeData)
    // Offset: 0x16F0CE4
    static void SetAttributeDataSyncd(::HoudiniEngineUnity::HEU_AttributeData* attributeData);
    // static public System.Void SetAttributeDataDirty(HoudiniEngineUnity.HEU_AttributeData attributeData)
    // Offset: 0x16F14F8
    static void SetAttributeDataDirty(::HoudiniEngineUnity::HEU_AttributeData* attributeData);
    // public HoudiniEngineUnity.HEU_AttributeData CreateAttribute(System.String attributeName, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo)
    // Offset: 0x16EFAD4
    ::HoudiniEngineUnity::HEU_AttributeData* CreateAttribute(::StringW attributeName, ByRef<::HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo);
    // public HoudiniEngineUnity.HEU_AttributeData GetAttributeData(System.String name)
    // Offset: 0x16EF9A8
    ::HoudiniEngineUnity::HEU_AttributeData* GetAttributeData(::StringW name);
    // public HoudiniEngineUnity.HEU_AttributeData GetAttributeData(System.Int32 index)
    // Offset: 0x16F1514
    ::HoudiniEngineUnity::HEU_AttributeData* GetAttributeData(int index);
    // public System.Collections.Generic.List`1<System.String> GetAttributeNames()
    // Offset: 0x16F159C
    ::System::Collections::Generic::List_1<::StringW>* GetAttributeNames();
    // public System.Void EnablePaintCollider()
    // Offset: 0x16F16E0
    void EnablePaintCollider();
    // public System.Void DisablePaintCollider()
    // Offset: 0x16F1898
    void DisablePaintCollider();
    // public System.Void ShowPaintMesh()
    // Offset: 0x16F19C4
    void ShowPaintMesh();
    // public System.Void HidePaintMesh()
    // Offset: 0x16F1B08
    void HidePaintMesh();
    // public System.Boolean HasMeshForPainting()
    // Offset: 0x16F1C04
    bool HasMeshForPainting();
    // public UnityEngine.MeshCollider GetPaintMeshCollider()
    // Offset: 0x16F1C74
    ::UnityEngine::MeshCollider* GetPaintMeshCollider();
    // public System.Void PaintAttribute(HoudiniEngineUnity.HEU_AttributeData attributeData, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 attributeIndex, System.Single paintFactor, HoudiniEngineUnity.HEU_AttributesStore/HoudiniEngineUnity.SetAttributeValueFunc setAttrFunc)
    // Offset: 0x16F1CFC
    void PaintAttribute(::HoudiniEngineUnity::HEU_AttributeData* attributeData, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int attributeIndex, float paintFactor, ::HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueFunc* setAttrFunc);
    // static public System.Void SetAttributeEditValueInt(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 startIndex, System.Int32[] values)
    // Offset: 0x16F21DC
    static void SetAttributeEditValueInt(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int startIndex, ::ArrayW<int> values);
    // static public System.Void SetAttributeEditValueFloat(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 startIndex, System.Single[] values)
    // Offset: 0x16F2270
    static void SetAttributeEditValueFloat(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int startIndex, ::ArrayW<float> values);
    // static public System.Void SetAttributeEditValueString(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 startIndex, System.String[] values)
    // Offset: 0x16F2304
    static void SetAttributeEditValueString(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int startIndex, ::ArrayW<::StringW> values);
    // static public System.Void ReplaceAttributeValueInt(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F23EC
    static void ReplaceAttributeValueInt(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void AddAttributeValueInt(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F2574
    static void AddAttributeValueInt(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void SubtractAttributeValueInt(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F26B8
    static void SubtractAttributeValueInt(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void MultiplyAttributeValueInt(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F27FC
    static void MultiplyAttributeValueInt(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void ReplaceAttributeValueFloat(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F2988
    static void ReplaceAttributeValueFloat(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void AddAttributeValueFloat(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F2A44
    static void AddAttributeValueFloat(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void SubtractAttributeValueFloat(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F2AF4
    static void SubtractAttributeValueFloat(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void MultiplyAttributeValueFloat(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F2BA4
    static void MultiplyAttributeValueFloat(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // static public System.Void SetAttributeValueString(HoudiniEngineUnity.HEU_AttributeData attributeData, System.Int32 targetIndex, HoudiniEngineUnity.HEU_ToolsInfo sourceTools, System.Int32 sourceIndex, System.Single factor)
    // Offset: 0x16F2D1C
    static void SetAttributeValueString(::HoudiniEngineUnity::HEU_AttributeData* attributeData, int targetIndex, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools, int sourceIndex, float factor);
    // public System.Void FillAttribute(HoudiniEngineUnity.HEU_AttributeData attributeData, HoudiniEngineUnity.HEU_ToolsInfo sourceTools)
    // Offset: 0x16F2E14
    void FillAttribute(::HoudiniEngineUnity::HEU_AttributeData* attributeData, ::HoudiniEngineUnity::HEU_ToolsInfo* sourceTools);
    // public System.Boolean AreAttributesDirty()
    // Offset: 0x16F3064
    bool AreAttributesDirty();
    // public System.Void GetPositionAttributeValues(out UnityEngine.Vector3[] positionArray)
    // Offset: 0x16F3168
    void GetPositionAttributeValues(ByRef<::ArrayW<::UnityEngine::Vector3>> positionArray);
    // public System.Void GetVertexIndices(out System.Int32[] indices)
    // Offset: 0x16F3174
    void GetVertexIndices(ByRef<::ArrayW<int>> indices);
    // static public HoudiniEngineUnity.HEU_AttributesStore/HoudiniEngineUnity.SetAttributeValueFunc GetAttributeSetValueFunction(HoudiniEngineUnity.HEU_AttributeData/HoudiniEngineUnity.AttributeType attrType, HoudiniEngineUnity.HEU_ToolsInfo/HoudiniEngineUnity.PaintMergeMode paintMergeMode)
    // Offset: 0x16F2EB0
    static ::HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueFunc* GetAttributeSetValueFunction(::HoudiniEngineUnity::HEU_AttributeData::AttributeType attrType, ::HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode paintMergeMode);
    // public System.Void CopyAttributeValuesTo(HoudiniEngineUnity.HEU_AttributesStore destAttrStore)
    // Offset: 0x16F3190
    void CopyAttributeValuesTo(::HoudiniEngineUnity::HEU_AttributesStore* destAttrStore);
    // public System.Boolean IsValidStore(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x16F3320
    bool IsValidStore(::HoudiniEngineUnity::HEU_SessionBase* session);
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_AttributesStore other)
    // Offset: 0x16F3390
    bool IsEquivalentTo(::HoudiniEngineUnity::HEU_AttributesStore* other);
  }; // HoudiniEngineUnity.HEU_AttributesStore
  #pragma pack(pop)
  static check_size<sizeof(HEU_AttributesStore), 145 + sizeof(bool)> __HoudiniEngineUnity_HEU_AttributesStoreSizeCheck;
  static_assert(sizeof(HEU_AttributesStore) == 0x92);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::get_GeoID
// Il2CppName: get_GeoID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::get_GeoID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "get_GeoID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::get_PartID
// Il2CppName: get_PartID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::get_PartID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "get_PartID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::get_GeoName
// Il2CppName: get_GeoName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::get_GeoName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "get_GeoName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::get_OutputTransform
// Il2CppName: get_OutputTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::get_OutputTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "get_OutputTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::get_OutputMesh
// Il2CppName: get_OutputMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Mesh* (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::get_OutputMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "get_OutputMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::HasColorAttribute
// Il2CppName: HasColorAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::HasColorAttribute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "HasColorAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::DestroyAllData
// Il2CppName: DestroyAllData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_HoudiniAsset*)>(&HoudiniEngineUnity::HEU_AttributesStore::DestroyAllData)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "DestroyAllData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SyncAllAttributesFrom
// Il2CppName: SyncAllAttributesFrom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HEU_HoudiniAsset*, int, ByRef<::HoudiniEngineUnity::HAPI_PartInfo>, ::UnityEngine::GameObject*)>(&HoudiniEngineUnity::HEU_AttributesStore::SyncAllAttributesFrom)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")->this_arg;
    static auto* outputGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SyncAllAttributesFrom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, asset, geoID, partInfo, outputGameObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetupMeshAndMaterials
// Il2CppName: SetupMeshAndMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_HoudiniAsset*, ::HoudiniEngineUnity::HAPI_PartType, ::UnityEngine::GameObject*)>(&HoudiniEngineUnity::HEU_AttributesStore::SetupMeshAndMaterials)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    static auto* partType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartType")->byval_arg;
    static auto* outputGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetupMeshAndMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset, partType, outputGameObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::HasDirtyAttributes
// Il2CppName: HasDirtyAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::HasDirtyAttributes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "HasDirtyAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SyncDirtyAttributesToHoudini
// Il2CppName: SyncDirtyAttributesToHoudini
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_AttributesStore::SyncDirtyAttributesToHoudini)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SyncDirtyAttributesToHoudini", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::PopulateAttributeData
// Il2CppName: PopulateAttributeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::HoudiniEngineUnity::HEU_AttributeData*, ByRef<::HoudiniEngineUnity::HAPI_AttributeInfo>)>(&HoudiniEngineUnity::HEU_AttributesStore::PopulateAttributeData)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "PopulateAttributeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attributeData, attributeInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetAttributesList
// Il2CppName: GetAttributesList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>*, ::HoudiniEngineUnity::HAPI_AttributeOwner, int)>(&HoudiniEngineUnity::HEU_AttributesStore::GetAttributesList)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributesList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")})->byval_arg;
    static auto* ownerType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeOwner")->byval_arg;
    static auto* attributeCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetAttributesList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attributesList, ownerType, attributeCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::UpdateAttribute
// Il2CppName: UpdateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::HoudiniEngineUnity::HEU_AttributeData*)>(&HoudiniEngineUnity::HEU_AttributesStore::UpdateAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "UpdateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attributeData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::UpdateAttributeList
// Il2CppName: UpdateAttributeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_AttributeData*>*)>(&HoudiniEngineUnity::HEU_AttributesStore::UpdateAttributeList)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attributeDataList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "UpdateAttributeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attributeDataList});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::RefreshUpstreamInputs
// Il2CppName: RefreshUpstreamInputs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_AttributesStore::RefreshUpstreamInputs)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "RefreshUpstreamInputs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::UploadAttributeViaMeshInput
// Il2CppName: UploadAttributeViaMeshInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int)>(&HoudiniEngineUnity::HEU_AttributesStore::UploadAttributeViaMeshInput)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "UploadAttributeViaMeshInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetAttributeDataSyncd
// Il2CppName: SetAttributeDataSyncd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*)>(&HoudiniEngineUnity::HEU_AttributesStore::SetAttributeDataSyncd)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetAttributeDataSyncd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetAttributeDataDirty
// Il2CppName: SetAttributeDataDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*)>(&HoudiniEngineUnity::HEU_AttributesStore::SetAttributeDataDirty)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetAttributeDataDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::CreateAttribute
// Il2CppName: CreateAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_AttributeData* (HoudiniEngineUnity::HEU_AttributesStore::*)(::StringW, ByRef<::HoudiniEngineUnity::HAPI_AttributeInfo>)>(&HoudiniEngineUnity::HEU_AttributesStore::CreateAttribute)> {
  static const MethodInfo* get() {
    static auto* attributeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "CreateAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeName, attributeInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetAttributeData
// Il2CppName: GetAttributeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_AttributeData* (HoudiniEngineUnity::HEU_AttributesStore::*)(::StringW)>(&HoudiniEngineUnity::HEU_AttributesStore::GetAttributeData)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetAttributeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetAttributeData
// Il2CppName: GetAttributeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_AttributeData* (HoudiniEngineUnity::HEU_AttributesStore::*)(int)>(&HoudiniEngineUnity::HEU_AttributesStore::GetAttributeData)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetAttributeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetAttributeNames
// Il2CppName: GetAttributeNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::GetAttributeNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetAttributeNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::EnablePaintCollider
// Il2CppName: EnablePaintCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::EnablePaintCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "EnablePaintCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::DisablePaintCollider
// Il2CppName: DisablePaintCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::DisablePaintCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "DisablePaintCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::ShowPaintMesh
// Il2CppName: ShowPaintMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::ShowPaintMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "ShowPaintMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::HidePaintMesh
// Il2CppName: HidePaintMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::HidePaintMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "HidePaintMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::HasMeshForPainting
// Il2CppName: HasMeshForPainting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::HasMeshForPainting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "HasMeshForPainting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetPaintMeshCollider
// Il2CppName: GetPaintMeshCollider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::MeshCollider* (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::GetPaintMeshCollider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetPaintMeshCollider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::PaintAttribute
// Il2CppName: PaintAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_AttributeData*, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float, ::HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueFunc*)>(&HoudiniEngineUnity::HEU_AttributesStore::PaintAttribute)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* attributeIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paintFactor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* setAttrFunc = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributesStore/SetAttributeValueFunc")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "PaintAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, sourceTools, attributeIndex, paintFactor, setAttrFunc});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetAttributeEditValueInt
// Il2CppName: SetAttributeEditValueInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::ArrayW<int>)>(&HoudiniEngineUnity::HEU_AttributesStore::SetAttributeEditValueInt)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetAttributeEditValueInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, startIndex, values});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetAttributeEditValueFloat
// Il2CppName: SetAttributeEditValueFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::ArrayW<float>)>(&HoudiniEngineUnity::HEU_AttributesStore::SetAttributeEditValueFloat)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetAttributeEditValueFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, startIndex, values});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetAttributeEditValueString
// Il2CppName: SetAttributeEditValueString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::ArrayW<::StringW>)>(&HoudiniEngineUnity::HEU_AttributesStore::SetAttributeEditValueString)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* startIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetAttributeEditValueString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, startIndex, values});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::ReplaceAttributeValueInt
// Il2CppName: ReplaceAttributeValueInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::ReplaceAttributeValueInt)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "ReplaceAttributeValueInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::AddAttributeValueInt
// Il2CppName: AddAttributeValueInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::AddAttributeValueInt)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "AddAttributeValueInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SubtractAttributeValueInt
// Il2CppName: SubtractAttributeValueInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::SubtractAttributeValueInt)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SubtractAttributeValueInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::MultiplyAttributeValueInt
// Il2CppName: MultiplyAttributeValueInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::MultiplyAttributeValueInt)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "MultiplyAttributeValueInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::ReplaceAttributeValueFloat
// Il2CppName: ReplaceAttributeValueFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::ReplaceAttributeValueFloat)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "ReplaceAttributeValueFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::AddAttributeValueFloat
// Il2CppName: AddAttributeValueFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::AddAttributeValueFloat)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "AddAttributeValueFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SubtractAttributeValueFloat
// Il2CppName: SubtractAttributeValueFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::SubtractAttributeValueFloat)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SubtractAttributeValueFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::MultiplyAttributeValueFloat
// Il2CppName: MultiplyAttributeValueFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::MultiplyAttributeValueFloat)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "MultiplyAttributeValueFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueString
// Il2CppName: SetAttributeValueString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_AttributeData*, int, ::HoudiniEngineUnity::HEU_ToolsInfo*, int, float)>(&HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueString)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* targetIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    static auto* sourceIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* factor = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "SetAttributeValueString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, targetIndex, sourceTools, sourceIndex, factor});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::FillAttribute
// Il2CppName: FillAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_AttributeData*, ::HoudiniEngineUnity::HEU_ToolsInfo*)>(&HoudiniEngineUnity::HEU_AttributesStore::FillAttribute)> {
  static const MethodInfo* get() {
    static auto* attributeData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData")->byval_arg;
    static auto* sourceTools = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "FillAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attributeData, sourceTools});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::AreAttributesDirty
// Il2CppName: AreAttributesDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)()>(&HoudiniEngineUnity::HEU_AttributesStore::AreAttributesDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "AreAttributesDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetPositionAttributeValues
// Il2CppName: GetPositionAttributeValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(ByRef<::ArrayW<::UnityEngine::Vector3>>)>(&HoudiniEngineUnity::HEU_AttributesStore::GetPositionAttributeValues)> {
  static const MethodInfo* get() {
    static auto* positionArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetPositionAttributeValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionArray});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetVertexIndices
// Il2CppName: GetVertexIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(ByRef<::ArrayW<int>>)>(&HoudiniEngineUnity::HEU_AttributesStore::GetVertexIndices)> {
  static const MethodInfo* get() {
    static auto* indices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetVertexIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{indices});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::GetAttributeSetValueFunction
// Il2CppName: GetAttributeSetValueFunction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_AttributesStore::SetAttributeValueFunc* (*)(::HoudiniEngineUnity::HEU_AttributeData::AttributeType, ::HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode)>(&HoudiniEngineUnity::HEU_AttributesStore::GetAttributeSetValueFunction)> {
  static const MethodInfo* get() {
    static auto* attrType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributeData/AttributeType")->byval_arg;
    static auto* paintMergeMode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "GetAttributeSetValueFunction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{attrType, paintMergeMode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::CopyAttributeValuesTo
// Il2CppName: CopyAttributeValuesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_AttributesStore*)>(&HoudiniEngineUnity::HEU_AttributesStore::CopyAttributeValuesTo)> {
  static const MethodInfo* get() {
    static auto* destAttrStore = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributesStore")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "CopyAttributeValuesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destAttrStore});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::IsValidStore
// Il2CppName: IsValidStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_AttributesStore::IsValidStore)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "IsValidStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AttributesStore::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_AttributesStore::*)(::HoudiniEngineUnity::HEU_AttributesStore*)>(&HoudiniEngineUnity::HEU_AttributesStore::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AttributesStore")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AttributesStore*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
