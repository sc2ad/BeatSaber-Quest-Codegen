// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: HoudiniEngineUnity.HAPI_PDG_WorkitemResultInfo
#include "HoudiniEngineUnity/HAPI_PDG_WorkitemResultInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_WorkItemTally
  class HEU_WorkItemTally;
  // Forward declaring type: HEU_HoudiniAsset
  class HEU_HoudiniAsset;
  // Forward declaring type: HEU_TOPNetworkData
  class HEU_TOPNetworkData;
  // Forward declaring type: HEU_CookedEventData
  class HEU_CookedEventData;
  // Forward declaring type: HEU_ReloadEventData
  class HEU_ReloadEventData;
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HEU_TOPNodeData
  class HEU_TOPNodeData;
  // Forward declaring type: HEU_TOPWorkResult
  class HEU_TOPWorkResult;
  // Forward declaring type: HAPI_PDG_WorkitemInfo
  struct HAPI_PDG_WorkitemInfo;
  // Forward declaring type: HAPI_NodeInfo
  struct HAPI_NodeInfo;
  // Forward declaring type: TOPNodeTags
  class TOPNodeTags;
  // Skipping declaration: LinkState because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_PDGAssetLink
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: EFA7F8
  class HEU_PDGAssetLink : public UnityEngine::MonoBehaviour/*, public UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // Nested type: HoudiniEngineUnity::HEU_PDGAssetLink::LinkState
    struct LinkState;
    // Nested type: HoudiniEngineUnity::HEU_PDGAssetLink::UpdateUIDelegate
    class UpdateUIDelegate;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_PDGAssetLink/LinkState
    // [TokenAttribute] Offset: FFFFFFFF
    struct LinkState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: LinkState
      constexpr LinkState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState INACTIVE
      static constexpr const int INACTIVE = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState INACTIVE
      static HoudiniEngineUnity::HEU_PDGAssetLink::LinkState _get_INACTIVE();
      // Set static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState INACTIVE
      static void _set_INACTIVE(HoudiniEngineUnity::HEU_PDGAssetLink::LinkState value);
      // static field const value: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState LINKING
      static constexpr const int LINKING = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState LINKING
      static HoudiniEngineUnity::HEU_PDGAssetLink::LinkState _get_LINKING();
      // Set static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState LINKING
      static void _set_LINKING(HoudiniEngineUnity::HEU_PDGAssetLink::LinkState value);
      // static field const value: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState LINKED
      static constexpr const int LINKED = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState LINKED
      static HoudiniEngineUnity::HEU_PDGAssetLink::LinkState _get_LINKED();
      // Set static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState LINKED
      static void _set_LINKED(HoudiniEngineUnity::HEU_PDGAssetLink::LinkState value);
      // static field const value: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState ERROR_NOT_LINKED
      static constexpr const int ERROR_NOT_LINKED = 3;
      // Get static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState ERROR_NOT_LINKED
      static HoudiniEngineUnity::HEU_PDGAssetLink::LinkState _get_ERROR_NOT_LINKED();
      // Set static field: static public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState ERROR_NOT_LINKED
      static void _set_ERROR_NOT_LINKED(HoudiniEngineUnity::HEU_PDGAssetLink::LinkState value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_PDGAssetLink/LinkState
    #pragma pack(pop)
    static check_size<sizeof(HEU_PDGAssetLink::LinkState), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_PDGAssetLink_LinkStateSizeCheck;
    static_assert(sizeof(HEU_PDGAssetLink::LinkState) == 0x4);
    // private System.String _assetPath
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* assetPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.GameObject _assetGO
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::GameObject* assetGO;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private System.String _assetName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* assetName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _assetID
    // Size: 0x4
    // Offset: 0x30
    int assetID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: assetID and: heu
    char __padding3[0x4] = {};
    // private HoudiniEngineUnity.HEU_HoudiniAsset _heu
    // Size: 0x8
    // Offset: 0x38
    HoudiniEngineUnity::HEU_HoudiniAsset* heu;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_HoudiniAsset*) == 0x8);
    // private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TOPNetworkData> _topNetworks
    // Size: 0x8
    // Offset: 0x40
    System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNetworkData*>* topNetworks;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNetworkData*>*) == 0x8);
    // public System.String[] _topNetworkNames
    // Size: 0x8
    // Offset: 0x48
    ::Array<::Il2CppString*>* topNetworkNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private System.Int32 _selectedTOPNetwork
    // Size: 0x4
    // Offset: 0x50
    int selectedTOPNetwork;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private HoudiniEngineUnity.HEU_PDGAssetLink/LinkState _linkState
    // Size: 0x4
    // Offset: 0x54
    HoudiniEngineUnity::HEU_PDGAssetLink::LinkState linkState;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_PDGAssetLink::LinkState) == 0x4);
    // public System.Boolean _autoCook
    // Size: 0x1
    // Offset: 0x58
    bool autoCook;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean _useHEngineData
    // Size: 0x1
    // Offset: 0x59
    bool useHEngineData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useHEngineData and: repaintUIDelegate
    char __padding10[0x6] = {};
    // public HoudiniEngineUnity.HEU_PDGAssetLink/UpdateUIDelegate _repaintUIDelegate
    // Size: 0x8
    // Offset: 0x60
    HoudiniEngineUnity::HEU_PDGAssetLink::UpdateUIDelegate* repaintUIDelegate;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_PDGAssetLink::UpdateUIDelegate*) == 0x8);
    // private System.Int32 _numWorkItems
    // Size: 0x4
    // Offset: 0x68
    int numWorkItems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numWorkItems and: workItemTally
    char __padding12[0x4] = {};
    // public HoudiniEngineUnity.HEU_WorkItemTally _workItemTally
    // Size: 0x8
    // Offset: 0x70
    HoudiniEngineUnity::HEU_WorkItemTally* workItemTally;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_WorkItemTally*) == 0x8);
    // public UnityEngine.GameObject _loadRootGameObject
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::GameObject* loadRootGameObject;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private System.String _outputCachePathRoot
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppString* outputCachePathRoot;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: HEU_PDGAssetLink
    HEU_PDGAssetLink(::Il2CppString* assetPath_ = {}, UnityEngine::GameObject* assetGO_ = {}, ::Il2CppString* assetName_ = {}, int assetID_ = {}, HoudiniEngineUnity::HEU_HoudiniAsset* heu_ = {}, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNetworkData*>* topNetworks_ = {}, ::Array<::Il2CppString*>* topNetworkNames_ = {}, int selectedTOPNetwork_ = {}, HoudiniEngineUnity::HEU_PDGAssetLink::LinkState linkState_ = {}, bool autoCook_ = {}, bool useHEngineData_ = {}, HoudiniEngineUnity::HEU_PDGAssetLink::UpdateUIDelegate* repaintUIDelegate_ = {}, int numWorkItems_ = {}, HoudiniEngineUnity::HEU_WorkItemTally* workItemTally_ = {}, UnityEngine::GameObject* loadRootGameObject_ = {}, ::Il2CppString* outputCachePathRoot_ = {}) noexcept : assetPath{assetPath_}, assetGO{assetGO_}, assetName{assetName_}, assetID{assetID_}, heu{heu_}, topNetworks{topNetworks_}, topNetworkNames{topNetworkNames_}, selectedTOPNetwork{selectedTOPNetwork_}, linkState{linkState_}, autoCook{autoCook_}, useHEngineData{useHEngineData_}, repaintUIDelegate{repaintUIDelegate_}, numWorkItems{numWorkItems_}, workItemTally{workItemTally_}, loadRootGameObject{loadRootGameObject_}, outputCachePathRoot{outputCachePathRoot_} {}
    // Creating interface conversion operator: operator UnityEngine::ISerializationCallbackReceiver
    operator UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String _assetPath
    ::Il2CppString*& dyn__assetPath();
    // Get instance field reference: private UnityEngine.GameObject _assetGO
    UnityEngine::GameObject*& dyn__assetGO();
    // Get instance field reference: private System.String _assetName
    ::Il2CppString*& dyn__assetName();
    // Get instance field reference: private System.Int32 _assetID
    int& dyn__assetID();
    // Get instance field reference: private HoudiniEngineUnity.HEU_HoudiniAsset _heu
    HoudiniEngineUnity::HEU_HoudiniAsset*& dyn__heu();
    // Get instance field reference: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TOPNetworkData> _topNetworks
    System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNetworkData*>*& dyn__topNetworks();
    // Get instance field reference: public System.String[] _topNetworkNames
    ::Array<::Il2CppString*>*& dyn__topNetworkNames();
    // Get instance field reference: private System.Int32 _selectedTOPNetwork
    int& dyn__selectedTOPNetwork();
    // Get instance field reference: private HoudiniEngineUnity.HEU_PDGAssetLink/LinkState _linkState
    HoudiniEngineUnity::HEU_PDGAssetLink::LinkState& dyn__linkState();
    // Get instance field reference: public System.Boolean _autoCook
    bool& dyn__autoCook();
    // Get instance field reference: public System.Boolean _useHEngineData
    bool& dyn__useHEngineData();
    // Get instance field reference: public HoudiniEngineUnity.HEU_PDGAssetLink/UpdateUIDelegate _repaintUIDelegate
    HoudiniEngineUnity::HEU_PDGAssetLink::UpdateUIDelegate*& dyn__repaintUIDelegate();
    // Get instance field reference: private System.Int32 _numWorkItems
    int& dyn__numWorkItems();
    // Get instance field reference: public HoudiniEngineUnity.HEU_WorkItemTally _workItemTally
    HoudiniEngineUnity::HEU_WorkItemTally*& dyn__workItemTally();
    // Get instance field reference: public UnityEngine.GameObject _loadRootGameObject
    UnityEngine::GameObject*& dyn__loadRootGameObject();
    // Get instance field reference: private System.String _outputCachePathRoot
    ::Il2CppString*& dyn__outputCachePathRoot();
    // private System.Void Awake()
    // Offset: 0x17A0A30
    void Awake();
    // public System.Void OnBeforeSerialize()
    // Offset: 0x17A0A38
    void OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x17A0A3C
    void OnAfterDeserialize();
    // private System.Void HandleInitialLoad()
    // Offset: 0x17A0A34
    void HandleInitialLoad();
    // private System.Void OnDestroy()
    // Offset: 0x17A0A40
    void OnDestroy();
    // public System.Void Setup(HoudiniEngineUnity.HEU_HoudiniAsset hdaAsset)
    // Offset: 0x17A0AC4
    void Setup(HoudiniEngineUnity::HEU_HoudiniAsset* hdaAsset);
    // private System.Void NotifyAssetCooked(HoudiniEngineUnity.HEU_HoudiniAsset asset, System.Boolean bSuccess, System.Collections.Generic.List`1<UnityEngine.GameObject> generatedOutputs)
    // Offset: 0x17A10FC
    void NotifyAssetCooked(HoudiniEngineUnity::HEU_HoudiniAsset* asset, bool bSuccess, System::Collections::Generic::List_1<UnityEngine::GameObject*>* generatedOutputs);
    // private System.Void NotifyAssetCooked(HoudiniEngineUnity.HEU_CookedEventData cookedEventData)
    // Offset: 0x17A1304
    void NotifyAssetCooked(HoudiniEngineUnity::HEU_CookedEventData* cookedEventData);
    // private System.Void NotifyAssetCooked(HoudiniEngineUnity.HEU_ReloadEventData reloadEventData)
    // Offset: 0x17A1314
    void NotifyAssetCooked(HoudiniEngineUnity::HEU_ReloadEventData* reloadEventData);
    // public System.Void Reset()
    // Offset: 0x17A0D48
    void Reset();
    // public System.Void Refresh()
    // Offset: 0x17A0D4C
    void Refresh();
    // private System.Void PopulateFromHDA()
    // Offset: 0x17A119C
    void PopulateFromHDA();
    // public System.Boolean PopulateTOPNetworks()
    // Offset: 0x17A158C
    bool PopulateTOPNetworks();
    // static public System.Boolean PopulateTOPNodes(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_TOPNetworkData topNetwork, System.Int32[] topNodeIDs, System.Boolean useHEngineData)
    // Offset: 0x17A1D40
    static bool PopulateTOPNodes(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_TOPNetworkData* topNetwork, ::Array<int>* topNodeIDs, bool useHEngineData);
    // public System.Void SelectTOPNetwork(System.Int32 newIndex)
    // Offset: 0x17A2280
    void SelectTOPNetwork(int newIndex);
    // public System.Void SelectTOPNode(HoudiniEngineUnity.HEU_TOPNetworkData network, System.Int32 newIndex)
    // Offset: 0x17A22EC
    void SelectTOPNode(HoudiniEngineUnity::HEU_TOPNetworkData* network, int newIndex);
    // public HoudiniEngineUnity.HEU_TOPNetworkData GetSelectedTOPNetwork()
    // Offset: 0x17A235C
    HoudiniEngineUnity::HEU_TOPNetworkData* GetSelectedTOPNetwork();
    // public HoudiniEngineUnity.HEU_TOPNodeData GetSelectedTOPNode()
    // Offset: 0x17A23EC
    HoudiniEngineUnity::HEU_TOPNodeData* GetSelectedTOPNode();
    // public HoudiniEngineUnity.HEU_TOPNetworkData GetTOPNetwork(System.Int32 index)
    // Offset: 0x17A2364
    HoudiniEngineUnity::HEU_TOPNetworkData* GetTOPNetwork(int index);
    // static public HoudiniEngineUnity.HEU_TOPNetworkData GetTOPNetworkByName(System.String name, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TOPNetworkData> topNetworks)
    // Offset: 0x17A1C68
    static HoudiniEngineUnity::HEU_TOPNetworkData* GetTOPNetworkByName(::Il2CppString* name, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNetworkData*>* topNetworks);
    // static public HoudiniEngineUnity.HEU_TOPNodeData GetTOPNodeByName(System.String name, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TOPNodeData> topNodes)
    // Offset: 0x17A20A4
    static HoudiniEngineUnity::HEU_TOPNodeData* GetTOPNodeByName(::Il2CppString* name, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNodeData*>* topNodes);
    // private System.Void ClearAllTOPData()
    // Offset: 0x17A1324
    void ClearAllTOPData();
    // static private System.Void ClearTOPNetworkWorkItemResults(HoudiniEngineUnity.HEU_TOPNetworkData topNetwork)
    // Offset: 0x17A2480
    static void ClearTOPNetworkWorkItemResults(HoudiniEngineUnity::HEU_TOPNetworkData* topNetwork);
    // static public System.Void ClearTOPNodeWorkItemResults(HoudiniEngineUnity.HEU_TOPNodeData topNode)
    // Offset: 0x17A217C
    static void ClearTOPNodeWorkItemResults(HoudiniEngineUnity::HEU_TOPNodeData* topNode);
    // static public System.Void ClearWorkItemResultByID(HoudiniEngineUnity.HEU_TOPNodeData topNode, System.Int32 workItemID)
    // Offset: 0x17A2744
    static void ClearWorkItemResultByID(HoudiniEngineUnity::HEU_TOPNodeData* topNode, int workItemID);
    // static private System.Void ClearWorkItemResult(HoudiniEngineUnity.HEU_TOPNodeData topNode, HoudiniEngineUnity.HEU_TOPWorkResult result)
    // Offset: 0x17A2884
    static void ClearWorkItemResult(HoudiniEngineUnity::HEU_TOPNodeData* topNode, HoudiniEngineUnity::HEU_TOPWorkResult* result);
    // public System.Void UpdateTOPNodeResultsVisibility(HoudiniEngineUnity.HEU_TOPNodeData topNode)
    // Offset: 0x17A290C
    void UpdateTOPNodeResultsVisibility(HoudiniEngineUnity::HEU_TOPNodeData* topNode);
    // static private HoudiniEngineUnity.HEU_TOPWorkResult GetWorkResultByID(HoudiniEngineUnity.HEU_TOPNodeData topNode, System.Int32 workItemID)
    // Offset: 0x17A276C
    static HoudiniEngineUnity::HEU_TOPWorkResult* GetWorkResultByID(HoudiniEngineUnity::HEU_TOPNodeData* topNode, int workItemID);
    // static private System.Void DestroyWorkItemResultData(HoudiniEngineUnity.HEU_TOPNodeData topNode, HoudiniEngineUnity.HEU_TOPWorkResult result)
    // Offset: 0x17A256C
    static void DestroyWorkItemResultData(HoudiniEngineUnity::HEU_TOPNodeData* topNode, HoudiniEngineUnity::HEU_TOPWorkResult* result);
    // public System.Void DirtyTOPNode(HoudiniEngineUnity.HEU_TOPNodeData topNode)
    // Offset: 0x17A29A8
    void DirtyTOPNode(HoudiniEngineUnity::HEU_TOPNodeData* topNode);
    // public System.Void CookTOPNode(HoudiniEngineUnity.HEU_TOPNodeData topNode)
    // Offset: 0x17A29DC
    void CookTOPNode(HoudiniEngineUnity::HEU_TOPNodeData* topNode);
    // public System.Void DirtyAll()
    // Offset: 0x17A2A10
    void DirtyAll();
    // public System.Void CookOutput()
    // Offset: 0x17A1128
    void CookOutput();
    // public System.Void PauseCook()
    // Offset: 0x17A2AF0
    void PauseCook();
    // public System.Void CancelCook()
    // Offset: 0x17A2B68
    void CancelCook();
    // public HoudiniEngineUnity.HEU_SessionBase GetHAPISession()
    // Offset: 0x17A19DC
    HoudiniEngineUnity::HEU_SessionBase* GetHAPISession();
    // public System.Void LoadResults(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_TOPNodeData topNode, HoudiniEngineUnity.HAPI_PDG_WorkitemInfo workItemInfo, HoudiniEngineUnity.HAPI_PDG_WorkitemResultInfo[] resultInfos, System.Int32 workItemID)
    // Offset: 0x17A2BE0
    void LoadResults(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_TOPNodeData* topNode, HoudiniEngineUnity::HAPI_PDG_WorkitemInfo workItemInfo, ::Array<HoudiniEngineUnity::HAPI_PDG_WorkitemResultInfo>* resultInfos, int workItemID);
    // private UnityEngine.Transform GetLoadRootTransform()
    // Offset: 0x17A3120
    UnityEngine::Transform* GetLoadRootTransform();
    // public HoudiniEngineUnity.HEU_TOPNodeData GetTOPNode(System.Int32 nodeID)
    // Offset: 0x17A3200
    HoudiniEngineUnity::HEU_TOPNodeData* GetTOPNode(int nodeID);
    // public System.Void RepaintUI()
    // Offset: 0x17A157C
    void RepaintUI();
    // public System.Void UpdateWorkItemTally()
    // Offset: 0x17A35B0
    void UpdateWorkItemTally();
    // public System.Void ResetTOPNetworkWorkItemTally(HoudiniEngineUnity.HEU_TOPNetworkData topNetwork)
    // Offset: 0x17A2A3C
    void ResetTOPNetworkWorkItemTally(HoudiniEngineUnity::HEU_TOPNetworkData* topNetwork);
    // public System.String GetTOPNodeStatus(HoudiniEngineUnity.HEU_TOPNodeData topNode)
    // Offset: 0x17A395C
    ::Il2CppString* GetTOPNodeStatus(HoudiniEngineUnity::HEU_TOPNodeData* topNode);
    // static private System.Void ParseHEngineData(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 topNodeID, ref HoudiniEngineUnity.HAPI_NodeInfo nodeInfo, ref HoudiniEngineUnity.TOPNodeTags nodeTags)
    // Offset: 0x17A1A78
    static void ParseHEngineData(HoudiniEngineUnity::HEU_SessionBase* session, int topNodeID, ByRef<HoudiniEngineUnity::HAPI_NodeInfo> nodeInfo, ByRef<HoudiniEngineUnity::TOPNodeTags*> nodeTags);
    // public System.String get_AssetName()
    // Offset: 0x17A3A28
    ::Il2CppString* get_AssetName();
    // public System.Int32 get_SelectedTOPNetwork()
    // Offset: 0x17A3A30
    int get_SelectedTOPNetwork();
    // public HoudiniEngineUnity.HEU_PDGAssetLink/LinkState get_AssetLinkState()
    // Offset: 0x17A3A38
    HoudiniEngineUnity::HEU_PDGAssetLink::LinkState get_AssetLinkState();
    // public System.Void .ctor()
    // Offset: 0x17A3A40
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_PDGAssetLink* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_PDGAssetLink::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_PDGAssetLink*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_PDGAssetLink
  #pragma pack(pop)
  static check_size<sizeof(HEU_PDGAssetLink), 128 + sizeof(::Il2CppString*)> __HoudiniEngineUnity_HEU_PDGAssetLinkSizeCheck;
  static_assert(sizeof(HEU_PDGAssetLink) == 0x88);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_PDGAssetLink*, "HoudiniEngineUnity", "HEU_PDGAssetLink");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_PDGAssetLink::LinkState, "HoudiniEngineUnity", "HEU_PDGAssetLink/LinkState");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::OnBeforeSerialize
// Il2CppName: OnBeforeSerialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::OnBeforeSerialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "OnBeforeSerialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::OnAfterDeserialize
// Il2CppName: OnAfterDeserialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::OnAfterDeserialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "OnAfterDeserialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::HandleInitialLoad
// Il2CppName: HandleInitialLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::HandleInitialLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "HandleInitialLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_HoudiniAsset*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::Setup)> {
  static const MethodInfo* get() {
    static auto* hdaAsset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hdaAsset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::NotifyAssetCooked
// Il2CppName: NotifyAssetCooked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_HoudiniAsset*, bool, System::Collections::Generic::List_1<UnityEngine::GameObject*>*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::NotifyAssetCooked)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    static auto* bSuccess = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* generatedOutputs = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "NotifyAssetCooked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset, bSuccess, generatedOutputs});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::NotifyAssetCooked
// Il2CppName: NotifyAssetCooked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_CookedEventData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::NotifyAssetCooked)> {
  static const MethodInfo* get() {
    static auto* cookedEventData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_CookedEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "NotifyAssetCooked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cookedEventData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::NotifyAssetCooked
// Il2CppName: NotifyAssetCooked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_ReloadEventData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::NotifyAssetCooked)> {
  static const MethodInfo* get() {
    static auto* reloadEventData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ReloadEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "NotifyAssetCooked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reloadEventData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::PopulateFromHDA
// Il2CppName: PopulateFromHDA
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::PopulateFromHDA)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "PopulateFromHDA", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::PopulateTOPNetworks
// Il2CppName: PopulateTOPNetworks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::PopulateTOPNetworks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "PopulateTOPNetworks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::PopulateTOPNodes
// Il2CppName: PopulateTOPNodes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(HoudiniEngineUnity::HEU_SessionBase*, HoudiniEngineUnity::HEU_TOPNetworkData*, ::Array<int>*, bool)>(&HoudiniEngineUnity::HEU_PDGAssetLink::PopulateTOPNodes)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* topNetwork = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNetworkData")->byval_arg;
    static auto* topNodeIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* useHEngineData = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "PopulateTOPNodes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, topNetwork, topNodeIDs, useHEngineData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::SelectTOPNetwork
// Il2CppName: SelectTOPNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::SelectTOPNetwork)> {
  static const MethodInfo* get() {
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "SelectTOPNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::SelectTOPNode
// Il2CppName: SelectTOPNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_TOPNetworkData*, int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::SelectTOPNode)> {
  static const MethodInfo* get() {
    static auto* network = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNetworkData")->byval_arg;
    static auto* newIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "SelectTOPNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{network, newIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetSelectedTOPNetwork
// Il2CppName: GetSelectedTOPNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPNetworkData* (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetSelectedTOPNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetSelectedTOPNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetSelectedTOPNode
// Il2CppName: GetSelectedTOPNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPNodeData* (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetSelectedTOPNode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetSelectedTOPNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNetwork
// Il2CppName: GetTOPNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPNetworkData* (HoudiniEngineUnity::HEU_PDGAssetLink::*)(int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNetwork)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetTOPNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNetworkByName
// Il2CppName: GetTOPNetworkByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPNetworkData* (*)(::Il2CppString*, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNetworkData*>*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNetworkByName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* topNetworks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNetworkData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetTOPNetworkByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, topNetworks});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNodeByName
// Il2CppName: GetTOPNodeByName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPNodeData* (*)(::Il2CppString*, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNodeData*>*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNodeByName)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* topNodes = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetTOPNodeByName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, topNodes});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ClearAllTOPData
// Il2CppName: ClearAllTOPData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::ClearAllTOPData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ClearAllTOPData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ClearTOPNetworkWorkItemResults
// Il2CppName: ClearTOPNetworkWorkItemResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(HoudiniEngineUnity::HEU_TOPNetworkData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::ClearTOPNetworkWorkItemResults)> {
  static const MethodInfo* get() {
    static auto* topNetwork = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNetworkData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ClearTOPNetworkWorkItemResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNetwork});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ClearTOPNodeWorkItemResults
// Il2CppName: ClearTOPNodeWorkItemResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(HoudiniEngineUnity::HEU_TOPNodeData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::ClearTOPNodeWorkItemResults)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ClearTOPNodeWorkItemResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ClearWorkItemResultByID
// Il2CppName: ClearWorkItemResultByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(HoudiniEngineUnity::HEU_TOPNodeData*, int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::ClearWorkItemResultByID)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    static auto* workItemID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ClearWorkItemResultByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode, workItemID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ClearWorkItemResult
// Il2CppName: ClearWorkItemResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(HoudiniEngineUnity::HEU_TOPNodeData*, HoudiniEngineUnity::HEU_TOPWorkResult*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::ClearWorkItemResult)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPWorkResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ClearWorkItemResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode, result});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::UpdateTOPNodeResultsVisibility
// Il2CppName: UpdateTOPNodeResultsVisibility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_TOPNodeData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::UpdateTOPNodeResultsVisibility)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "UpdateTOPNodeResultsVisibility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetWorkResultByID
// Il2CppName: GetWorkResultByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPWorkResult* (*)(HoudiniEngineUnity::HEU_TOPNodeData*, int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetWorkResultByID)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    static auto* workItemID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetWorkResultByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode, workItemID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::DestroyWorkItemResultData
// Il2CppName: DestroyWorkItemResultData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(HoudiniEngineUnity::HEU_TOPNodeData*, HoudiniEngineUnity::HEU_TOPWorkResult*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::DestroyWorkItemResultData)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPWorkResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "DestroyWorkItemResultData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode, result});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::DirtyTOPNode
// Il2CppName: DirtyTOPNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_TOPNodeData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::DirtyTOPNode)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "DirtyTOPNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::CookTOPNode
// Il2CppName: CookTOPNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_TOPNodeData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::CookTOPNode)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "CookTOPNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::DirtyAll
// Il2CppName: DirtyAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::DirtyAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "DirtyAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::CookOutput
// Il2CppName: CookOutput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::CookOutput)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "CookOutput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::PauseCook
// Il2CppName: PauseCook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::PauseCook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "PauseCook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::CancelCook
// Il2CppName: CancelCook
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::CancelCook)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "CancelCook", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetHAPISession
// Il2CppName: GetHAPISession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_SessionBase* (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetHAPISession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetHAPISession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::LoadResults
// Il2CppName: LoadResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_SessionBase*, HoudiniEngineUnity::HEU_TOPNodeData*, HoudiniEngineUnity::HAPI_PDG_WorkitemInfo, ::Array<HoudiniEngineUnity::HAPI_PDG_WorkitemResultInfo>*, int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::LoadResults)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    static auto* workItemInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PDG_WorkitemInfo")->byval_arg;
    static auto* resultInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PDG_WorkitemResultInfo"), 1)->byval_arg;
    static auto* workItemID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "LoadResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, topNode, workItemInfo, resultInfos, workItemID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetLoadRootTransform
// Il2CppName: GetLoadRootTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Transform* (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetLoadRootTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetLoadRootTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNode
// Il2CppName: GetTOPNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_TOPNodeData* (HoudiniEngineUnity::HEU_PDGAssetLink::*)(int)>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNode)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetTOPNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::RepaintUI
// Il2CppName: RepaintUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::RepaintUI)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "RepaintUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::UpdateWorkItemTally
// Il2CppName: UpdateWorkItemTally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::UpdateWorkItemTally)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "UpdateWorkItemTally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ResetTOPNetworkWorkItemTally
// Il2CppName: ResetTOPNetworkWorkItemTally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_TOPNetworkData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::ResetTOPNetworkWorkItemTally)> {
  static const MethodInfo* get() {
    static auto* topNetwork = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNetworkData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ResetTOPNetworkWorkItemTally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNetwork});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNodeStatus
// Il2CppName: GetTOPNodeStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_PDGAssetLink::*)(HoudiniEngineUnity::HEU_TOPNodeData*)>(&HoudiniEngineUnity::HEU_PDGAssetLink::GetTOPNodeStatus)> {
  static const MethodInfo* get() {
    static auto* topNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_TOPNodeData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "GetTOPNodeStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topNode});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::ParseHEngineData
// Il2CppName: ParseHEngineData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(HoudiniEngineUnity::HEU_SessionBase*, int, ByRef<HoudiniEngineUnity::HAPI_NodeInfo>, ByRef<HoudiniEngineUnity::TOPNodeTags*>)>(&HoudiniEngineUnity::HEU_PDGAssetLink::ParseHEngineData)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* topNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_NodeInfo")->this_arg;
    static auto* nodeTags = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "TOPNodeTags")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "ParseHEngineData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, topNodeID, nodeInfo, nodeTags});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::get_AssetName
// Il2CppName: get_AssetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::get_AssetName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "get_AssetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::get_SelectedTOPNetwork
// Il2CppName: get_SelectedTOPNetwork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::get_SelectedTOPNetwork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "get_SelectedTOPNetwork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::get_AssetLinkState
// Il2CppName: get_AssetLinkState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_PDGAssetLink::LinkState (HoudiniEngineUnity::HEU_PDGAssetLink::*)()>(&HoudiniEngineUnity::HEU_PDGAssetLink::get_AssetLinkState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_PDGAssetLink*), "get_AssetLinkState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_PDGAssetLink::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
