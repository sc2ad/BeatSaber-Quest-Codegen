// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: HoudiniEngineUnity.HAPI_VolumeType
#include "HoudiniEngineUnity/HAPI_VolumeType.hpp"
// Including type: HoudiniEngineUnity.HAPI_StorageType
#include "HoudiniEngineUnity/HAPI_StorageType.hpp"
// Including type: HoudiniEngineUnity.HAPI_Transform
#include "HoudiniEngineUnity/HAPI_Transform.hpp"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x64
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.HAPI_VolumeInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct HAPI_VolumeInfo/*, public System::ValueType*/ {
    public:
    // public System.Int32 nameSH
    // Size: 0x4
    // Offset: 0x0
    int nameSH;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public HoudiniEngineUnity.HAPI_VolumeType type
    // Size: 0x4
    // Offset: 0x4
    HoudiniEngineUnity::HAPI_VolumeType type;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HAPI_VolumeType) == 0x4);
    // public System.Int32 xLength
    // Size: 0x4
    // Offset: 0x8
    int xLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 yLength
    // Size: 0x4
    // Offset: 0xC
    int yLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 zLength
    // Size: 0x4
    // Offset: 0x10
    int zLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minX
    // Size: 0x4
    // Offset: 0x14
    int minX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minY
    // Size: 0x4
    // Offset: 0x18
    int minY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minZ
    // Size: 0x4
    // Offset: 0x1C
    int minZ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tupleSize
    // Size: 0x4
    // Offset: 0x20
    int tupleSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public HoudiniEngineUnity.HAPI_StorageType storage
    // Size: 0x4
    // Offset: 0x24
    HoudiniEngineUnity::HAPI_StorageType storage;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HAPI_StorageType) == 0x4);
    // public System.Int32 tileSize
    // Size: 0x4
    // Offset: 0x28
    int tileSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: tileSize and: transform
    char __padding10[0x4] = {};
    // public HoudiniEngineUnity.HAPI_Transform transform
    // Size: 0x24
    // Offset: 0x30
    HoudiniEngineUnity::HAPI_Transform transform;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HAPI_Transform) == 0x24);
    // Padding between fields: transform and: hasTaper
    char __padding11[0x4] = {};
    // public System.Boolean hasTaper
    // Size: 0x1
    // Offset: 0x58
    bool hasTaper;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasTaper and: xTaper
    char __padding12[0x3] = {};
    // public System.Single xTaper
    // Size: 0x4
    // Offset: 0x5C
    float xTaper;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single yTaper
    // Size: 0x4
    // Offset: 0x60
    float yTaper;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: HAPI_VolumeInfo
    constexpr HAPI_VolumeInfo(int nameSH_ = {}, HoudiniEngineUnity::HAPI_VolumeType type_ = {}, int xLength_ = {}, int yLength_ = {}, int zLength_ = {}, int minX_ = {}, int minY_ = {}, int minZ_ = {}, int tupleSize_ = {}, HoudiniEngineUnity::HAPI_StorageType storage_ = {}, int tileSize_ = {}, HoudiniEngineUnity::HAPI_Transform transform_ = {}, bool hasTaper_ = {}, float xTaper_ = {}, float yTaper_ = {}) noexcept : nameSH{nameSH_}, type{type_}, xLength{xLength_}, yLength{yLength_}, zLength{zLength_}, minX{minX_}, minY{minY_}, minZ{minZ_}, tupleSize{tupleSize_}, storage{storage_}, tileSize{tileSize_}, transform{transform_}, hasTaper{hasTaper_}, xTaper{xTaper_}, yTaper{yTaper_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 nameSH
    int& dyn_nameSH();
    // Get instance field reference: public HoudiniEngineUnity.HAPI_VolumeType type
    HoudiniEngineUnity::HAPI_VolumeType& dyn_type();
    // Get instance field reference: public System.Int32 xLength
    int& dyn_xLength();
    // Get instance field reference: public System.Int32 yLength
    int& dyn_yLength();
    // Get instance field reference: public System.Int32 zLength
    int& dyn_zLength();
    // Get instance field reference: public System.Int32 minX
    int& dyn_minX();
    // Get instance field reference: public System.Int32 minY
    int& dyn_minY();
    // Get instance field reference: public System.Int32 minZ
    int& dyn_minZ();
    // Get instance field reference: public System.Int32 tupleSize
    int& dyn_tupleSize();
    // Get instance field reference: public HoudiniEngineUnity.HAPI_StorageType storage
    HoudiniEngineUnity::HAPI_StorageType& dyn_storage();
    // Get instance field reference: public System.Int32 tileSize
    int& dyn_tileSize();
    // Get instance field reference: public HoudiniEngineUnity.HAPI_Transform transform
    HoudiniEngineUnity::HAPI_Transform& dyn_transform();
    // Get instance field reference: public System.Boolean hasTaper
    bool& dyn_hasTaper();
    // Get instance field reference: public System.Single xTaper
    float& dyn_xTaper();
    // Get instance field reference: public System.Single yTaper
    float& dyn_yTaper();
  }; // HoudiniEngineUnity.HAPI_VolumeInfo
  #pragma pack(pop)
  static check_size<sizeof(HAPI_VolumeInfo), 96 + sizeof(float)> __HoudiniEngineUnity_HAPI_VolumeInfoSizeCheck;
  static_assert(sizeof(HAPI_VolumeInfo) == 0x64);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HAPI_VolumeInfo, "HoudiniEngineUnity", "HAPI_VolumeInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
