// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_TOPNodeData
  class HEU_TOPNodeData;
  // Forward declaring type: TOPNodeTags
  class TOPNodeTags;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_TOPNetworkData
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_TOPNetworkData : public ::Il2CppObject {
    public:
    // public System.Int32 _nodeID
    // Size: 0x4
    // Offset: 0x10
    int nodeID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nodeID and: nodeName
    char __padding0[0x4] = {};
    // public System.String _nodeName
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* nodeName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TOPNodeData> _topNodes
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNodeData*>* topNodes;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNodeData*>*) == 0x8);
    // public System.String[] _topNodeNames
    // Size: 0x8
    // Offset: 0x28
    ::Array<::Il2CppString*>* topNodeNames;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // public System.Int32 _selectedTOPIndex
    // Size: 0x4
    // Offset: 0x30
    int selectedTOPIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: selectedTOPIndex and: parentName
    char __padding4[0x4] = {};
    // public System.String _parentName
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* parentName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public HoudiniEngineUnity.TOPNodeTags _tags
    // Size: 0x8
    // Offset: 0x40
    HoudiniEngineUnity::TOPNodeTags* tags;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::TOPNodeTags*) == 0x8);
    // Creating value type constructor for type: HEU_TOPNetworkData
    HEU_TOPNetworkData(int nodeID_ = {}, ::Il2CppString* nodeName_ = {}, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNodeData*>* topNodes_ = {}, ::Array<::Il2CppString*>* topNodeNames_ = {}, int selectedTOPIndex_ = {}, ::Il2CppString* parentName_ = {}, HoudiniEngineUnity::TOPNodeTags* tags_ = {}) noexcept : nodeID{nodeID_}, nodeName{nodeName_}, topNodes{topNodes_}, topNodeNames{topNodeNames_}, selectedTOPIndex{selectedTOPIndex_}, parentName{parentName_}, tags{tags_} {}
    // Get instance field reference: public System.Int32 _nodeID
    int& dyn__nodeID();
    // Get instance field reference: public System.String _nodeName
    ::Il2CppString*& dyn__nodeName();
    // Get instance field reference: public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_TOPNodeData> _topNodes
    System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_TOPNodeData*>*& dyn__topNodes();
    // Get instance field reference: public System.String[] _topNodeNames
    ::Array<::Il2CppString*>*& dyn__topNodeNames();
    // Get instance field reference: public System.Int32 _selectedTOPIndex
    int& dyn__selectedTOPIndex();
    // Get instance field reference: public System.String _parentName
    ::Il2CppString*& dyn__parentName();
    // Get instance field reference: public HoudiniEngineUnity.TOPNodeTags _tags
    HoudiniEngineUnity::TOPNodeTags*& dyn__tags();
    // public System.Void .ctor()
    // Offset: 0x17D9AC4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_TOPNetworkData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_TOPNetworkData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_TOPNetworkData*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_TOPNetworkData
  #pragma pack(pop)
  static check_size<sizeof(HEU_TOPNetworkData), 64 + sizeof(HoudiniEngineUnity::TOPNodeTags*)> __HoudiniEngineUnity_HEU_TOPNetworkDataSizeCheck;
  static_assert(sizeof(HEU_TOPNetworkData) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_TOPNetworkData*, "HoudiniEngineUnity", "HEU_TOPNetworkData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TOPNetworkData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
