// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HEU_InputInterfaceMesh
#include "HoudiniEngineUnity/HEU_InputInterfaceMesh.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_InputInterfaceMesh/HEU_InputDataMesh
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_InputInterfaceMesh::HEU_InputDataMesh : public ::Il2CppObject {
    public:
    // public UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // public UnityEngine.Material[] _materials
    // Size: 0x8
    // Offset: 0x18
    ::Array<UnityEngine::Material*>* materials;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Material*>*) == 0x8);
    // public System.String _meshPath
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* meshPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String _meshName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* meshName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Int32 _numVertices
    // Size: 0x4
    // Offset: 0x30
    int numVertices;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _numSubMeshes
    // Size: 0x4
    // Offset: 0x34
    int numSubMeshes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32[] _indexStart
    // Size: 0x8
    // Offset: 0x38
    ::Array<uint>* indexStart;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // public System.UInt32[] _indexCount
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint>* indexCount;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // public System.Single _LODScreenTransition
    // Size: 0x4
    // Offset: 0x48
    float LODScreenTransition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: LODScreenTransition and: transform
    char __padding8[0x4] = {};
    // public UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: HEU_InputDataMesh
    HEU_InputDataMesh(UnityEngine::Mesh* mesh_ = {}, ::Array<UnityEngine::Material*>* materials_ = {}, ::Il2CppString* meshPath_ = {}, ::Il2CppString* meshName_ = {}, int numVertices_ = {}, int numSubMeshes_ = {}, ::Array<uint>* indexStart_ = {}, ::Array<uint>* indexCount_ = {}, float LODScreenTransition_ = {}, UnityEngine::Transform* transform_ = {}) noexcept : mesh{mesh_}, materials{materials_}, meshPath{meshPath_}, meshName{meshName_}, numVertices{numVertices_}, numSubMeshes{numSubMeshes_}, indexStart{indexStart_}, indexCount{indexCount_}, LODScreenTransition{LODScreenTransition_}, transform{transform_} {}
    // Get instance field reference: public UnityEngine.Mesh _mesh
    UnityEngine::Mesh*& dyn__mesh();
    // Get instance field reference: public UnityEngine.Material[] _materials
    ::Array<UnityEngine::Material*>*& dyn__materials();
    // Get instance field reference: public System.String _meshPath
    ::Il2CppString*& dyn__meshPath();
    // Get instance field reference: public System.String _meshName
    ::Il2CppString*& dyn__meshName();
    // Get instance field reference: public System.Int32 _numVertices
    int& dyn__numVertices();
    // Get instance field reference: public System.Int32 _numSubMeshes
    int& dyn__numSubMeshes();
    // Get instance field reference: public System.UInt32[] _indexStart
    ::Array<uint>*& dyn__indexStart();
    // Get instance field reference: public System.UInt32[] _indexCount
    ::Array<uint>*& dyn__indexCount();
    // Get instance field reference: public System.Single _LODScreenTransition
    float& dyn__LODScreenTransition();
    // Get instance field reference: public UnityEngine.Transform _transform
    UnityEngine::Transform*& dyn__transform();
    // public System.Void .ctor()
    // Offset: 0x1520978
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_InputInterfaceMesh::HEU_InputDataMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_InputInterfaceMesh::HEU_InputDataMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_InputInterfaceMesh::HEU_InputDataMesh*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_InputInterfaceMesh/HEU_InputDataMesh
  #pragma pack(pop)
  static check_size<sizeof(HEU_InputInterfaceMesh::HEU_InputDataMesh), 80 + sizeof(UnityEngine::Transform*)> __HoudiniEngineUnity_HEU_InputInterfaceMesh_HEU_InputDataMeshSizeCheck;
  static_assert(sizeof(HEU_InputInterfaceMesh::HEU_InputDataMesh) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_InputInterfaceMesh::HEU_InputDataMesh*, "HoudiniEngineUnity", "HEU_InputInterfaceMesh/HEU_InputDataMesh");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_InputInterfaceMesh::HEU_InputDataMesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
