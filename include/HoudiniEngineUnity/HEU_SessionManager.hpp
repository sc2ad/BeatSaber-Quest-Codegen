// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HAPI_ObjectInfo
#include "HoudiniEngineUnity/HAPI_ObjectInfo.hpp"
// Including type: HoudiniEngineUnity.HAPI_Transform
#include "HoudiniEngineUnity/HAPI_Transform.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HEU_SessionData
  class HEU_SessionData;
  // Forward declaring type: HAPI_License
  struct HAPI_License;
  // Forward declaring type: HAPI_GroupType
  struct HAPI_GroupType;
  // Skipping declaration: HAPI_RSTOrder because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_SessionManager
  class HEU_SessionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_SessionManager);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_SessionManager*, "HoudiniEngineUnity", "HEU_SessionManager");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_SessionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_SessionManager : public ::Il2CppObject {
    public:
    // Nested type: ::HoudiniEngineUnity::HEU_SessionManager::CreateSessionFromTypeDelegate
    class CreateSessionFromTypeDelegate;
    // Get static field: static private HoudiniEngineUnity.HEU_SessionBase _defaultSession
    static ::HoudiniEngineUnity::HEU_SessionBase* _get__defaultSession();
    // Set static field: static private HoudiniEngineUnity.HEU_SessionBase _defaultSession
    static void _set__defaultSession(::HoudiniEngineUnity::HEU_SessionBase* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int64,HoudiniEngineUnity.HEU_SessionBase> _sessionMap
    static ::System::Collections::Generic::Dictionary_2<int64_t, ::HoudiniEngineUnity::HEU_SessionBase*>* _get__sessionMap();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int64,HoudiniEngineUnity.HEU_SessionBase> _sessionMap
    static void _set__sessionMap(::System::Collections::Generic::Dictionary_2<int64_t, ::HoudiniEngineUnity::HEU_SessionBase*>* value);
    // Get static field: static public HoudiniEngineUnity.HEU_SessionManager/HoudiniEngineUnity.CreateSessionFromTypeDelegate _createSessionFromTypeDelegate
    static ::HoudiniEngineUnity::HEU_SessionManager::CreateSessionFromTypeDelegate* _get__createSessionFromTypeDelegate();
    // Set static field: static public HoudiniEngineUnity.HEU_SessionManager/HoudiniEngineUnity.CreateSessionFromTypeDelegate _createSessionFromTypeDelegate
    static void _set__createSessionFromTypeDelegate(::HoudiniEngineUnity::HEU_SessionManager::CreateSessionFromTypeDelegate* value);
    // static private System.Void .cctor()
    // Offset: 0x1B0B700
    static void _cctor();
    // static public HoudiniEngineUnity.HEU_SessionBase CreateSessionObject()
    // Offset: 0x1B08BE4
    static ::HoudiniEngineUnity::HEU_SessionBase* CreateSessionObject();
    // static public HoudiniEngineUnity.HEU_SessionBase CreateSessionFromType(System.Type type)
    // Offset: 0x1B08C48
    static ::HoudiniEngineUnity::HEU_SessionBase* CreateSessionFromType(::System::Type* type);
    // static public HoudiniEngineUnity.HEU_SessionBase GetDefaultSession()
    // Offset: 0x1B08CAC
    static ::HoudiniEngineUnity::HEU_SessionBase* GetDefaultSession();
    // static public System.Void RegisterSession(System.Int64 sessionID, HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B08E0C
    static void RegisterSession(int64_t sessionID, ::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public System.Void UnregisterSession(System.Int64 sessionID)
    // Offset: 0x1B08F4C
    static void UnregisterSession(int64_t sessionID);
    // static public HoudiniEngineUnity.HEU_SessionBase GetSessionWithID(System.Int64 sessionID)
    // Offset: 0x1B08FD4
    static ::HoudiniEngineUnity::HEU_SessionBase* GetSessionWithID(int64_t sessionID);
    // static public System.Void SaveAllSessionData()
    // Offset: 0x1B08EA4
    static void SaveAllSessionData();
    // static public System.Void LoadAllSessionData()
    // Offset: 0x1B06524
    static void LoadAllSessionData();
    // static private System.Void InternalValidateSceneAssets()
    // Offset: 0x1B09070
    static void InternalValidateSceneAssets();
    // static public HoudiniEngineUnity.HEU_SessionBase GetOrCreateDefaultSession(System.Boolean bNotifyUserError)
    // Offset: 0x1B091C0
    static ::HoudiniEngineUnity::HEU_SessionBase* GetOrCreateDefaultSession(bool bNotifyUserError);
    // static public System.Boolean CreateInProcessSession()
    // Offset: 0x1B0959C
    static bool CreateInProcessSession();
    // static public System.Boolean CreateThriftSocketSession(System.String hostName, System.Int32 serverPort, System.Boolean autoClose, System.Single timeout, System.Boolean logError)
    // Offset: 0x1B09700
    static bool CreateThriftSocketSession(::StringW hostName, int serverPort, bool autoClose, float timeout, bool logError);
    // static public System.Boolean CreateThriftPipeSession(System.String pipeName, System.Boolean autoClose, System.Single timeout, System.Boolean logError)
    // Offset: 0x1B09460
    static bool CreateThriftPipeSession(::StringW pipeName, bool autoClose, float timeout, bool logError);
    // static public System.Boolean CreateCustomSession()
    // Offset: 0x1B097D4
    static bool CreateCustomSession();
    // static public System.Boolean ConnectThriftSocketSession(System.String hostName, System.Int32 serverPort, System.Boolean autoClose, System.Single timeout)
    // Offset: 0x1B09868
    static bool ConnectThriftSocketSession(::StringW hostName, int serverPort, bool autoClose, float timeout);
    // static public System.Boolean ConnectThriftPipeSession(System.String pipeName, System.Boolean autoClose, System.Single timeout)
    // Offset: 0x1B09934
    static bool ConnectThriftPipeSession(::StringW pipeName, bool autoClose, float timeout);
    // static public System.Void RecreateDefaultSessionData()
    // Offset: 0x1B099F8
    static void RecreateDefaultSessionData();
    // static public System.Boolean ConnectSessionSyncUsingThriftSocket(System.String hostName, System.Int32 serverPort, System.Boolean autoClose, System.Single timeout, System.Boolean logError)
    // Offset: 0x1B09A68
    static bool ConnectSessionSyncUsingThriftSocket(::StringW hostName, int serverPort, bool autoClose, float timeout, bool logError);
    // static public System.Boolean ConnectSessionSyncUsingThriftPipe(System.String pipeName, System.Boolean autoClose, System.Single timeout, System.Boolean logError)
    // Offset: 0x1B09B6C
    static bool ConnectSessionSyncUsingThriftPipe(::StringW pipeName, bool autoClose, float timeout, bool logError);
    // static public System.Boolean InitializeDefaultSession()
    // Offset: 0x1B09C60
    static bool InitializeDefaultSession();
    // static public System.Boolean CloseDefaultSession()
    // Offset: 0x1B09D18
    static bool CloseDefaultSession();
    // static public System.Void CloseAllSessions()
    // Offset: 0x1B09DF4
    static void CloseAllSessions();
    // static private System.Void CheckAndCloseExistingSession()
    // Offset: 0x1B09630
    static void CheckAndCloseExistingSession();
    // static public HoudiniEngineUnity.HEU_SessionData GetSessionData()
    // Offset: 0x1B0A080
    static ::HoudiniEngineUnity::HEU_SessionData* GetSessionData();
    // static public System.String GetSessionInfo()
    // Offset: 0x1B0A0E8
    static ::StringW GetSessionInfo();
    // static public System.Boolean LoadStoredDefaultSession()
    // Offset: 0x1B08D54
    static bool LoadStoredDefaultSession();
    // static public System.Boolean RestartSession()
    // Offset: 0x1B0A170
    static bool RestartSession();
    // static public System.Boolean ValidatePluginSession(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B0A2CC
    static bool ValidatePluginSession(::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public System.String GetLastSessionError()
    // Offset: 0x1B09524
    static ::StringW GetLastSessionError();
    // static public System.Boolean CheckVersionMatch()
    // Offset: 0x1B0A35C
    static bool CheckVersionMatch();
    // static public System.Boolean ClearConnectionError()
    // Offset: 0x1B0A3DC
    static bool ClearConnectionError();
    // static public System.String GetConnectionError(System.Boolean clear)
    // Offset: 0x1B07E64
    static ::StringW GetConnectionError(bool clear);
    // static public System.Boolean IsHARSProcessRunning(System.Int32 processID)
    // Offset: 0x1B0A3E4
    static bool IsHARSProcessRunning(int processID);
    // static public System.Boolean LoadSessionFromHIP(System.Boolean bCookNodes, HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B0A480
    static bool LoadSessionFromHIP(bool bCookNodes, ::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public System.Boolean SaveSessionToHIP(System.Boolean bLockNodes, HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B0A558
    static bool SaveSessionToHIP(bool bLockNodes, ::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public System.String GetHoudiniPathOnMacOS(System.String houdiniPath)
    // Offset: 0x1B0A630
    static ::StringW GetHoudiniPathOnMacOS(::StringW houdiniPath);
    // static public System.Boolean OpenHoudini(System.String args)
    // Offset: 0x1B0A634
    static bool OpenHoudini(::StringW args);
    // static public System.Boolean OpenSessionInHoudini(HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B0A6DC
    static bool OpenSessionInHoudini(::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public HoudiniEngineUnity.HAPI_License GetCurrentLicense(System.Boolean bLogError)
    // Offset: 0x1B0A988
    static ::HoudiniEngineUnity::HAPI_License GetCurrentLicense(bool bLogError);
    // static public System.String GetString(System.Int32 stringHandle, HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B0AA34
    static ::StringW GetString(int stringHandle, ::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public System.String[] GetStringValuesFromStringIndices(System.Int32[] strIndices)
    // Offset: 0x1B0AB24
    static ::ArrayW<::StringW> GetStringValuesFromStringIndices(::ArrayW<int> strIndices);
    // static public System.String[] GetGroupNames(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.Boolean isInstanced)
    // Offset: 0x1B0ACCC
    static ::ArrayW<::StringW> GetGroupNames(::HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, int partID, ::HoudiniEngineUnity::HAPI_GroupType groupType, bool isInstanced);
    // static public System.Boolean GetGroupMembership(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.String groupName, ref System.Int32[] membership, System.Boolean isInstanced)
    // Offset: 0x1B0AF28
    static bool GetGroupMembership(::HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, int partID, ::HoudiniEngineUnity::HAPI_GroupType groupType, ::StringW groupName, ByRef<::ArrayW<int>> membership, bool isInstanced);
    // static public System.String GetNodeName(System.Int32 nodeID, HoudiniEngineUnity.HEU_SessionBase session)
    // Offset: 0x1B0B06C
    static ::StringW GetNodeName(int nodeID, ::HoudiniEngineUnity::HEU_SessionBase* session);
    // static public System.Boolean GetNodeInputName(System.Int32 nodeID, System.Int32 inputIndex, out System.String inputName)
    // Offset: 0x1B0B178
    static bool GetNodeInputName(int nodeID, int inputIndex, ByRef<::StringW> inputName);
    // static public System.Boolean GetComposedChildNodeList(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 parentNodeID, System.Int32 nodeTypeFilter, System.Int32 nodeFlagFilter, System.Boolean bRecursive, out System.Int32[] childNodeIDs)
    // Offset: 0x1B0B268
    static bool GetComposedChildNodeList(::HoudiniEngineUnity::HEU_SessionBase* session, int parentNodeID, int nodeTypeFilter, int nodeFlagFilter, bool bRecursive, ByRef<::ArrayW<int>> childNodeIDs);
    // static public System.Boolean GetComposedObjectListMemorySafe(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, out HoudiniEngineUnity.HAPI_ObjectInfo[] objectInfos, System.Int32 start, System.Int32 length)
    // Offset: 0x1B0B368
    static bool GetComposedObjectListMemorySafe(::HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, ByRef<::ArrayW<::HoudiniEngineUnity::HAPI_ObjectInfo>> objectInfos, int start, int length);
    // static public System.Boolean GetComposedObjectTransformsMemorySafe(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, HoudiniEngineUnity.HAPI_RSTOrder rstOrder, out HoudiniEngineUnity.HAPI_Transform[] transforms, System.Int32 start, System.Int32 length)
    // Offset: 0x1B0B420
    static bool GetComposedObjectTransformsMemorySafe(::HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, ::HoudiniEngineUnity::HAPI_RSTOrder rstOrder, ByRef<::ArrayW<::HoudiniEngineUnity::HAPI_Transform>> transforms, int start, int length);
    // static public System.String GetUniqueMaterialShopName(System.Int32 assetID, System.Int32 materialID)
    // Offset: 0x1B0B4E8
    static ::StringW GetUniqueMaterialShopName(int assetID, int materialID);
  }; // HoudiniEngineUnity.HEU_SessionManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CreateSessionObject
// Il2CppName: CreateSessionObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionBase* (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CreateSessionObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CreateSessionObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CreateSessionFromType
// Il2CppName: CreateSessionFromType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionBase* (*)(::System::Type*)>(&HoudiniEngineUnity::HEU_SessionManager::CreateSessionFromType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CreateSessionFromType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetDefaultSession
// Il2CppName: GetDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionBase* (*)()>(&HoudiniEngineUnity::HEU_SessionManager::GetDefaultSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::RegisterSession
// Il2CppName: RegisterSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t, ::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::RegisterSession)> {
  static const MethodInfo* get() {
    static auto* sessionID = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "RegisterSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionID, session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::UnregisterSession
// Il2CppName: UnregisterSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int64_t)>(&HoudiniEngineUnity::HEU_SessionManager::UnregisterSession)> {
  static const MethodInfo* get() {
    static auto* sessionID = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "UnregisterSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetSessionWithID
// Il2CppName: GetSessionWithID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionBase* (*)(int64_t)>(&HoudiniEngineUnity::HEU_SessionManager::GetSessionWithID)> {
  static const MethodInfo* get() {
    static auto* sessionID = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetSessionWithID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::SaveAllSessionData
// Il2CppName: SaveAllSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::SaveAllSessionData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "SaveAllSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::LoadAllSessionData
// Il2CppName: LoadAllSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::LoadAllSessionData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "LoadAllSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::InternalValidateSceneAssets
// Il2CppName: InternalValidateSceneAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::InternalValidateSceneAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "InternalValidateSceneAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetOrCreateDefaultSession
// Il2CppName: GetOrCreateDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionBase* (*)(bool)>(&HoudiniEngineUnity::HEU_SessionManager::GetOrCreateDefaultSession)> {
  static const MethodInfo* get() {
    static auto* bNotifyUserError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetOrCreateDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bNotifyUserError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CreateInProcessSession
// Il2CppName: CreateInProcessSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CreateInProcessSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CreateInProcessSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CreateThriftSocketSession
// Il2CppName: CreateThriftSocketSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int, bool, float, bool)>(&HoudiniEngineUnity::HEU_SessionManager::CreateThriftSocketSession)> {
  static const MethodInfo* get() {
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* logError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CreateThriftSocketSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostName, serverPort, autoClose, timeout, logError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CreateThriftPipeSession
// Il2CppName: CreateThriftPipeSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, bool, float, bool)>(&HoudiniEngineUnity::HEU_SessionManager::CreateThriftPipeSession)> {
  static const MethodInfo* get() {
    static auto* pipeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* logError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CreateThriftPipeSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipeName, autoClose, timeout, logError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CreateCustomSession
// Il2CppName: CreateCustomSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CreateCustomSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CreateCustomSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::ConnectThriftSocketSession
// Il2CppName: ConnectThriftSocketSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int, bool, float)>(&HoudiniEngineUnity::HEU_SessionManager::ConnectThriftSocketSession)> {
  static const MethodInfo* get() {
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "ConnectThriftSocketSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostName, serverPort, autoClose, timeout});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::ConnectThriftPipeSession
// Il2CppName: ConnectThriftPipeSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, bool, float)>(&HoudiniEngineUnity::HEU_SessionManager::ConnectThriftPipeSession)> {
  static const MethodInfo* get() {
    static auto* pipeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "ConnectThriftPipeSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipeName, autoClose, timeout});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::RecreateDefaultSessionData
// Il2CppName: RecreateDefaultSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::RecreateDefaultSessionData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "RecreateDefaultSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::ConnectSessionSyncUsingThriftSocket
// Il2CppName: ConnectSessionSyncUsingThriftSocket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, int, bool, float, bool)>(&HoudiniEngineUnity::HEU_SessionManager::ConnectSessionSyncUsingThriftSocket)> {
  static const MethodInfo* get() {
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* logError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "ConnectSessionSyncUsingThriftSocket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hostName, serverPort, autoClose, timeout, logError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::ConnectSessionSyncUsingThriftPipe
// Il2CppName: ConnectSessionSyncUsingThriftPipe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, bool, float, bool)>(&HoudiniEngineUnity::HEU_SessionManager::ConnectSessionSyncUsingThriftPipe)> {
  static const MethodInfo* get() {
    static auto* pipeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* logError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "ConnectSessionSyncUsingThriftPipe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pipeName, autoClose, timeout, logError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::InitializeDefaultSession
// Il2CppName: InitializeDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::InitializeDefaultSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "InitializeDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CloseDefaultSession
// Il2CppName: CloseDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CloseDefaultSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CloseDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CloseAllSessions
// Il2CppName: CloseAllSessions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CloseAllSessions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CloseAllSessions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CheckAndCloseExistingSession
// Il2CppName: CheckAndCloseExistingSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CheckAndCloseExistingSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CheckAndCloseExistingSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetSessionData
// Il2CppName: GetSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionData* (*)()>(&HoudiniEngineUnity::HEU_SessionManager::GetSessionData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetSessionInfo
// Il2CppName: GetSessionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&HoudiniEngineUnity::HEU_SessionManager::GetSessionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetSessionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::LoadStoredDefaultSession
// Il2CppName: LoadStoredDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::LoadStoredDefaultSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "LoadStoredDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::RestartSession
// Il2CppName: RestartSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::RestartSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "RestartSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::ValidatePluginSession
// Il2CppName: ValidatePluginSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::ValidatePluginSession)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "ValidatePluginSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetLastSessionError
// Il2CppName: GetLastSessionError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&HoudiniEngineUnity::HEU_SessionManager::GetLastSessionError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetLastSessionError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::CheckVersionMatch
// Il2CppName: CheckVersionMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::CheckVersionMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "CheckVersionMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::ClearConnectionError
// Il2CppName: ClearConnectionError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&HoudiniEngineUnity::HEU_SessionManager::ClearConnectionError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "ClearConnectionError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetConnectionError
// Il2CppName: GetConnectionError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(bool)>(&HoudiniEngineUnity::HEU_SessionManager::GetConnectionError)> {
  static const MethodInfo* get() {
    static auto* clear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetConnectionError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clear});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::IsHARSProcessRunning
// Il2CppName: IsHARSProcessRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&HoudiniEngineUnity::HEU_SessionManager::IsHARSProcessRunning)> {
  static const MethodInfo* get() {
    static auto* processID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "IsHARSProcessRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::LoadSessionFromHIP
// Il2CppName: LoadSessionFromHIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, ::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::LoadSessionFromHIP)> {
  static const MethodInfo* get() {
    static auto* bCookNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "LoadSessionFromHIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bCookNodes, session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::SaveSessionToHIP
// Il2CppName: SaveSessionToHIP
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, ::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::SaveSessionToHIP)> {
  static const MethodInfo* get() {
    static auto* bLockNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "SaveSessionToHIP", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bLockNodes, session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetHoudiniPathOnMacOS
// Il2CppName: GetHoudiniPathOnMacOS
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(::StringW)>(&HoudiniEngineUnity::HEU_SessionManager::GetHoudiniPathOnMacOS)> {
  static const MethodInfo* get() {
    static auto* houdiniPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetHoudiniPathOnMacOS", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{houdiniPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::OpenHoudini
// Il2CppName: OpenHoudini
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW)>(&HoudiniEngineUnity::HEU_SessionManager::OpenHoudini)> {
  static const MethodInfo* get() {
    static auto* args = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "OpenHoudini", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{args});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::OpenSessionInHoudini
// Il2CppName: OpenSessionInHoudini
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::OpenSessionInHoudini)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "OpenSessionInHoudini", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetCurrentLicense
// Il2CppName: GetCurrentLicense
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HAPI_License (*)(bool)>(&HoudiniEngineUnity::HEU_SessionManager::GetCurrentLicense)> {
  static const MethodInfo* get() {
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetCurrentLicense", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, ::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::GetString)> {
  static const MethodInfo* get() {
    static auto* stringHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringHandle, session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetStringValuesFromStringIndices
// Il2CppName: GetStringValuesFromStringIndices
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::ArrayW<int>)>(&HoudiniEngineUnity::HEU_SessionManager::GetStringValuesFromStringIndices)> {
  static const MethodInfo* get() {
    static auto* strIndices = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetStringValuesFromStringIndices", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{strIndices});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetGroupNames
// Il2CppName: GetGroupNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::HoudiniEngineUnity::HAPI_GroupType, bool)>(&HoudiniEngineUnity::HEU_SessionManager::GetGroupNames)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* isInstanced = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetGroupNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, partID, groupType, isInstanced});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetGroupMembership
// Il2CppName: GetGroupMembership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::HoudiniEngineUnity::HAPI_GroupType, ::StringW, ByRef<::ArrayW<int>>, bool)>(&HoudiniEngineUnity::HEU_SessionManager::GetGroupMembership)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* membership = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* isInstanced = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetGroupMembership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, partID, groupType, groupName, membership, isInstanced});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetNodeName
// Il2CppName: GetNodeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, ::HoudiniEngineUnity::HEU_SessionBase*)>(&HoudiniEngineUnity::HEU_SessionManager::GetNodeName)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetNodeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, session});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetNodeInputName
// Il2CppName: GetNodeInputName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, int, ByRef<::StringW>)>(&HoudiniEngineUnity::HEU_SessionManager::GetNodeInputName)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputName = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetNodeInputName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, inputIndex, inputName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetComposedChildNodeList
// Il2CppName: GetComposedChildNodeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, int, bool, ByRef<::ArrayW<int>>)>(&HoudiniEngineUnity::HEU_SessionManager::GetComposedChildNodeList)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeTypeFilter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeFlagFilter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bRecursive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* childNodeIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetComposedChildNodeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, parentNodeID, nodeTypeFilter, nodeFlagFilter, bRecursive, childNodeIDs});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetComposedObjectListMemorySafe
// Il2CppName: GetComposedObjectListMemorySafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, ByRef<::ArrayW<::HoudiniEngineUnity::HAPI_ObjectInfo>>, int, int)>(&HoudiniEngineUnity::HEU_SessionManager::GetComposedObjectListMemorySafe)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* objectInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ObjectInfo"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetComposedObjectListMemorySafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, objectInfos, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetComposedObjectTransformsMemorySafe
// Il2CppName: GetComposedObjectTransformsMemorySafe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::HoudiniEngineUnity::HEU_SessionBase*, int, ::HoudiniEngineUnity::HAPI_RSTOrder, ByRef<::ArrayW<::HoudiniEngineUnity::HAPI_Transform>>, int, int)>(&HoudiniEngineUnity::HEU_SessionManager::GetComposedObjectTransformsMemorySafe)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rstOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_RSTOrder")->byval_arg;
    static auto* transforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Transform"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetComposedObjectTransformsMemorySafe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, rstOrder, transforms, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionManager::GetUniqueMaterialShopName
// Il2CppName: GetUniqueMaterialShopName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)(int, int)>(&HoudiniEngineUnity::HEU_SessionManager::GetUniqueMaterialShopName)> {
  static const MethodInfo* get() {
    static auto* assetID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionManager*), "GetUniqueMaterialShopName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetID, materialID});
  }
};
