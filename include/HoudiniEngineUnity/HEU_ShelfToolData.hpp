// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_ShelfToolData
  class HEU_ShelfToolData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_ShelfToolData);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_ShelfToolData*, "HoudiniEngineUnity", "HEU_ShelfToolData");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_ShelfToolData
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_ShelfToolData : public ::Il2CppObject {
    public:
    // Nested type: ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType
    struct ToolType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ToolType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ToolType
      constexpr ToolType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType GENERATOR
      static constexpr const int GENERATOR = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType GENERATOR
      static ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_GENERATOR();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType GENERATOR
      static void _set_GENERATOR(::HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType OPERATOR_SINGLE
      static constexpr const int OPERATOR_SINGLE = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType OPERATOR_SINGLE
      static ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_OPERATOR_SINGLE();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType OPERATOR_SINGLE
      static void _set_OPERATOR_SINGLE(::HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType OPERATOR_MULTI
      static constexpr const int OPERATOR_MULTI = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType OPERATOR_MULTI
      static ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_OPERATOR_MULTI();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType OPERATOR_MULTI
      static void _set_OPERATOR_MULTI(::HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType BATCH
      static constexpr const int BATCH = 3;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType BATCH
      static ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_BATCH();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType BATCH
      static void _set_BATCH(::HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType
    #pragma pack(pop)
    static check_size<sizeof(HEU_ShelfToolData::ToolType), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_ShelfToolData_ToolTypeSizeCheck;
    static_assert(sizeof(HEU_ShelfToolData::ToolType) == 0x4);
    public:
    // public System.String _name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType _toolType
    // Size: 0x4
    // Offset: 0x18
    ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType toolType;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_ShelfToolData::ToolType) == 0x4);
    // Padding between fields: toolType and: toolTip
    char __padding1[0x4] = {};
    // public System.String _toolTip
    // Size: 0x8
    // Offset: 0x20
    ::StringW toolTip;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _iconPath
    // Size: 0x8
    // Offset: 0x28
    ::StringW iconPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _assetPath
    // Size: 0x8
    // Offset: 0x30
    ::StringW assetPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _helpURL
    // Size: 0x8
    // Offset: 0x38
    ::StringW helpURL;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String[] _targets
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::StringW> targets;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String _jsonPath
    // Size: 0x8
    // Offset: 0x48
    ::StringW jsonPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: public HoudiniEngineUnity.HEU_ShelfToolData/HoudiniEngineUnity.ToolType _toolType
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_ShelfToolData::ToolType& dyn__toolType();
    // Get instance field reference: public System.String _toolTip
    [[deprecated("Use field access instead!")]] ::StringW& dyn__toolTip();
    // Get instance field reference: public System.String _iconPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__iconPath();
    // Get instance field reference: public System.String _assetPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__assetPath();
    // Get instance field reference: public System.String _helpURL
    [[deprecated("Use field access instead!")]] ::StringW& dyn__helpURL();
    // Get instance field reference: public System.String[] _targets
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__targets();
    // Get instance field reference: public System.String _jsonPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__jsonPath();
    // public System.Void .ctor()
    // Offset: 0x1B0BBE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_ShelfToolData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_ShelfToolData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_ShelfToolData*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_ShelfToolData
  #pragma pack(pop)
  static check_size<sizeof(HEU_ShelfToolData), 72 + sizeof(::StringW)> __HoudiniEngineUnity_HEU_ShelfToolDataSizeCheck;
  static_assert(sizeof(HEU_ShelfToolData) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_ShelfToolData::ToolType, "HoudiniEngineUnity", "HEU_ShelfToolData/ToolType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ShelfToolData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
