// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_ShelfToolData
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_ShelfToolData : public ::Il2CppObject {
    public:
    // Nested type: HoudiniEngineUnity::HEU_ShelfToolData::ToolType
    struct ToolType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_ShelfToolData/ToolType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ToolType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ToolType
      constexpr ToolType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType GENERATOR
      static constexpr const int GENERATOR = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType GENERATOR
      static HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_GENERATOR();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType GENERATOR
      static void _set_GENERATOR(HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType OPERATOR_SINGLE
      static constexpr const int OPERATOR_SINGLE = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType OPERATOR_SINGLE
      static HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_OPERATOR_SINGLE();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType OPERATOR_SINGLE
      static void _set_OPERATOR_SINGLE(HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType OPERATOR_MULTI
      static constexpr const int OPERATOR_MULTI = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType OPERATOR_MULTI
      static HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_OPERATOR_MULTI();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType OPERATOR_MULTI
      static void _set_OPERATOR_MULTI(HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType BATCH
      static constexpr const int BATCH = 3;
      // Get static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType BATCH
      static HoudiniEngineUnity::HEU_ShelfToolData::ToolType _get_BATCH();
      // Set static field: static public HoudiniEngineUnity.HEU_ShelfToolData/ToolType BATCH
      static void _set_BATCH(HoudiniEngineUnity::HEU_ShelfToolData::ToolType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_ShelfToolData/ToolType
    #pragma pack(pop)
    static check_size<sizeof(HEU_ShelfToolData::ToolType), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_ShelfToolData_ToolTypeSizeCheck;
    static_assert(sizeof(HEU_ShelfToolData::ToolType) == 0x4);
    // public System.String _name
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public HoudiniEngineUnity.HEU_ShelfToolData/ToolType _toolType
    // Size: 0x4
    // Offset: 0x18
    HoudiniEngineUnity::HEU_ShelfToolData::ToolType toolType;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_ShelfToolData::ToolType) == 0x4);
    // Padding between fields: toolType and: toolTip
    char __padding1[0x4] = {};
    // public System.String _toolTip
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* toolTip;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String _iconPath
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* iconPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String _assetPath
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* assetPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String _helpURL
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* helpURL;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String[] _targets
    // Size: 0x8
    // Offset: 0x40
    ::Array<::Il2CppString*>* targets;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // public System.String _jsonPath
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* jsonPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: HEU_ShelfToolData
    HEU_ShelfToolData(::Il2CppString* name_ = {}, HoudiniEngineUnity::HEU_ShelfToolData::ToolType toolType_ = {}, ::Il2CppString* toolTip_ = {}, ::Il2CppString* iconPath_ = {}, ::Il2CppString* assetPath_ = {}, ::Il2CppString* helpURL_ = {}, ::Array<::Il2CppString*>* targets_ = {}, ::Il2CppString* jsonPath_ = {}) noexcept : name{name_}, toolType{toolType_}, toolTip{toolTip_}, iconPath{iconPath_}, assetPath{assetPath_}, helpURL{helpURL_}, targets{targets_}, jsonPath{jsonPath_} {}
    // Get instance field reference: public System.String _name
    ::Il2CppString*& dyn__name();
    // Get instance field reference: public HoudiniEngineUnity.HEU_ShelfToolData/ToolType _toolType
    HoudiniEngineUnity::HEU_ShelfToolData::ToolType& dyn__toolType();
    // Get instance field reference: public System.String _toolTip
    ::Il2CppString*& dyn__toolTip();
    // Get instance field reference: public System.String _iconPath
    ::Il2CppString*& dyn__iconPath();
    // Get instance field reference: public System.String _assetPath
    ::Il2CppString*& dyn__assetPath();
    // Get instance field reference: public System.String _helpURL
    ::Il2CppString*& dyn__helpURL();
    // Get instance field reference: public System.String[] _targets
    ::Array<::Il2CppString*>*& dyn__targets();
    // Get instance field reference: public System.String _jsonPath
    ::Il2CppString*& dyn__jsonPath();
    // public System.Void .ctor()
    // Offset: 0x17D64BC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_ShelfToolData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ShelfToolData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_ShelfToolData*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_ShelfToolData
  #pragma pack(pop)
  static check_size<sizeof(HEU_ShelfToolData), 72 + sizeof(::Il2CppString*)> __HoudiniEngineUnity_HEU_ShelfToolDataSizeCheck;
  static_assert(sizeof(HEU_ShelfToolData) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ShelfToolData*, "HoudiniEngineUnity", "HEU_ShelfToolData");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ShelfToolData::ToolType, "HoudiniEngineUnity", "HEU_ShelfToolData/ToolType");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ShelfToolData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
