// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0xD
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.HAPI_VolumeTileInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct HAPI_VolumeTileInfo/*, public System::ValueType*/ {
    public:
    // public System.Int32 minX
    // Size: 0x4
    // Offset: 0x0
    int minX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minY
    // Size: 0x4
    // Offset: 0x4
    int minY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 minZ
    // Size: 0x4
    // Offset: 0x8
    int minZ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isValid
    // Size: 0x1
    // Offset: 0xC
    bool isValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HAPI_VolumeTileInfo
    constexpr HAPI_VolumeTileInfo(int minX_ = {}, int minY_ = {}, int minZ_ = {}, bool isValid_ = {}) noexcept : minX{minX_}, minY{minY_}, minZ{minZ_}, isValid{isValid_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 minX
    int& dyn_minX();
    // Get instance field reference: public System.Int32 minY
    int& dyn_minY();
    // Get instance field reference: public System.Int32 minZ
    int& dyn_minZ();
    // Get instance field reference: public System.Boolean isValid
    bool& dyn_isValid();
  }; // HoudiniEngineUnity.HAPI_VolumeTileInfo
  #pragma pack(pop)
  static check_size<sizeof(HAPI_VolumeTileInfo), 12 + sizeof(bool)> __HoudiniEngineUnity_HAPI_VolumeTileInfoSizeCheck;
  static_assert(sizeof(HAPI_VolumeTileInfo) == 0xD);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HAPI_VolumeTileInfo, "HoudiniEngineUnity", "HAPI_VolumeTileInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
