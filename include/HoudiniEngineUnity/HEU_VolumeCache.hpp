// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_GeoNode
  class HEU_GeoNode;
  // Forward declaring type: HEU_VolumeLayer
  class HEU_VolumeLayer;
  // Forward declaring type: HEU_VolumeScatterTrees
  class HEU_VolumeScatterTrees;
  // Forward declaring type: HEU_DetailProperties
  class HEU_DetailProperties;
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HEU_PartData
  class HEU_PartData;
  // Forward declaring type: HEU_HoudiniAsset
  class HEU_HoudiniAsset;
  // Forward declaring type: HEU_VolumeCachePreset
  class HEU_VolumeCachePreset;
  // Forward declaring type: HEU_DetailPrototype
  class HEU_DetailPrototype;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TerrainData
  class TerrainData;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: TerrainLayer
  class TerrainLayer;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_VolumeCache
  class HEU_VolumeCache;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_VolumeCache);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_VolumeCache*, "HoudiniEngineUnity", "HEU_VolumeCache");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_VolumeCache
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_VolumeCache : public ::UnityEngine::ScriptableObject/*, public ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeCache*>*/ {
    public:
    public:
    // private HoudiniEngineUnity.HEU_GeoNode _ownerNode
    // Size: 0x8
    // Offset: 0x18
    ::HoudiniEngineUnity::HEU_GeoNode* ownerNode;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_GeoNode*) == 0x8);
    // private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeLayer> _layers
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeLayer*>* layers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*) == 0x8);
    // private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeLayer> _updatedLayers
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeLayer*>* updatedLayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*) == 0x8);
    // private System.Int32 _tileIndex
    // Size: 0x4
    // Offset: 0x30
    int tileIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isDirty
    // Size: 0x1
    // Offset: 0x34
    bool isDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDirty and: geoName
    char __padding4[0x3] = {};
    // private System.String _geoName
    // Size: 0x8
    // Offset: 0x38
    ::StringW geoName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _objName
    // Size: 0x8
    // Offset: 0x40
    ::StringW objName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean _uiExpanded
    // Size: 0x1
    // Offset: 0x48
    bool uiExpanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uiExpanded and: terrainData
    char __padding7[0x7] = {};
    // private UnityEngine.TerrainData _terrainData
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::TerrainData* terrainData;
    // Field size check
    static_assert(sizeof(::UnityEngine::TerrainData*) == 0x8);
    // private HoudiniEngineUnity.HEU_VolumeScatterTrees _scatterTrees
    // Size: 0x8
    // Offset: 0x58
    ::HoudiniEngineUnity::HEU_VolumeScatterTrees* scatterTrees;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_VolumeScatterTrees*) == 0x8);
    // private HoudiniEngineUnity.HEU_DetailProperties _detailProperties
    // Size: 0x8
    // Offset: 0x60
    ::HoudiniEngineUnity::HEU_DetailProperties* detailProperties;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_DetailProperties*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeCache*>
    operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeCache*>() noexcept {
      return *reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeCache*>*>(this);
    }
    // Creating interface conversion operator: i_HEU_VolumeCache
    inline ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeCache*>* i_HEU_VolumeCache() noexcept {
      return reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeCache*>*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HoudiniEngineUnity.HEU_GeoNode _ownerNode
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_GeoNode*& dyn__ownerNode();
    // Get instance field reference: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeLayer> _layers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*& dyn__layers();
    // Get instance field reference: private System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeLayer> _updatedLayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*& dyn__updatedLayers();
    // Get instance field reference: private System.Int32 _tileIndex
    [[deprecated("Use field access instead!")]] int& dyn__tileIndex();
    // Get instance field reference: private System.Boolean _isDirty
    [[deprecated("Use field access instead!")]] bool& dyn__isDirty();
    // Get instance field reference: private System.String _geoName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__geoName();
    // Get instance field reference: private System.String _objName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__objName();
    // Get instance field reference: public System.Boolean _uiExpanded
    [[deprecated("Use field access instead!")]] bool& dyn__uiExpanded();
    // Get instance field reference: private UnityEngine.TerrainData _terrainData
    [[deprecated("Use field access instead!")]] ::UnityEngine::TerrainData*& dyn__terrainData();
    // Get instance field reference: private HoudiniEngineUnity.HEU_VolumeScatterTrees _scatterTrees
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_VolumeScatterTrees*& dyn__scatterTrees();
    // Get instance field reference: private HoudiniEngineUnity.HEU_DetailProperties _detailProperties
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_DetailProperties*& dyn__detailProperties();
    // public System.Boolean get_IsDirty()
    // Offset: 0x1A61E64
    bool get_IsDirty();
    // public System.Void set_IsDirty(System.Boolean value)
    // Offset: 0x1A61E6C
    void set_IsDirty(bool value);
    // public System.Int32 get_TileIndex()
    // Offset: 0x1A61E78
    int get_TileIndex();
    // public System.String get_ObjectName()
    // Offset: 0x1A61E80
    ::StringW get_ObjectName();
    // public System.String get_GeoName()
    // Offset: 0x1A61E88
    ::StringW get_GeoName();
    // public System.Boolean get_UIExpanded()
    // Offset: 0x1A61E90
    bool get_UIExpanded();
    // public System.Void set_UIExpanded(System.Boolean value)
    // Offset: 0x1A61E98
    void set_UIExpanded(bool value);
    // public System.Void .ctor()
    // Offset: 0x1A65884
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_VolumeCache* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_VolumeCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_VolumeCache*, creationType>()));
    }
    // static public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeCache> UpdateVolumeCachesFromParts(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_GeoNode ownerNode, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_PartData> volumeParts, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_VolumeCache> volumeCaches)
    // Offset: 0x1A61EA4
    static ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>* UpdateVolumeCachesFromParts(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HEU_GeoNode* ownerNode, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>* volumeParts, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>* volumeCaches);
    // public System.Void Initialize(HoudiniEngineUnity.HEU_GeoNode ownerNode, System.Int32 tileIndex)
    // Offset: 0x1A629DC
    void Initialize(::HoudiniEngineUnity::HEU_GeoNode* ownerNode, int tileIndex);
    // public System.Void ResetParameters()
    // Offset: 0x1A62A28
    void ResetParameters();
    // public HoudiniEngineUnity.HEU_VolumeLayer GetLayer(System.String layerName)
    // Offset: 0x1A62C24
    ::HoudiniEngineUnity::HEU_VolumeLayer* GetLayer(::StringW layerName);
    // public System.Void StartUpdateLayers()
    // Offset: 0x1A6264C
    void StartUpdateLayers();
    // public System.Void FinishUpdateLayers()
    // Offset: 0x1A62A1C
    void FinishUpdateLayers();
    // private System.Void GetPartLayerAttributes(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, HoudiniEngineUnity.HEU_VolumeLayer layer)
    // Offset: 0x1A62D50
    void GetPartLayerAttributes(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::HoudiniEngineUnity::HEU_VolumeLayer* layer);
    // private System.Boolean LoadLayerTextureFromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, out UnityEngine.Texture2D outTexture)
    // Offset: 0x1A62EA0
    bool LoadLayerTextureFromAttribute(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<::UnityEngine::Texture2D*> outTexture);
    // private System.Boolean LoadLayerFloatFromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref System.Single floatValue)
    // Offset: 0x1A630BC
    bool LoadLayerFloatFromAttribute(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<float> floatValue);
    // private System.Boolean LoadLayerColorFromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref UnityEngine.Color colorValue)
    // Offset: 0x1A631E8
    bool LoadLayerColorFromAttribute(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<::UnityEngine::Color> colorValue);
    // private System.Boolean LoadLayerVector2FromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref UnityEngine.Vector2 vectorValue)
    // Offset: 0x1A633B8
    bool LoadLayerVector2FromAttribute(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::StringW attrName, ByRef<::UnityEngine::Vector2> vectorValue);
    // public System.Void UpdateLayerFromPart(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_PartData part)
    // Offset: 0x1A626B4
    void UpdateLayerFromPart(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HEU_PartData* part);
    // public System.Void GenerateTerrainWithAlphamaps(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_HoudiniAsset houdiniAsset, System.Boolean bRebuild)
    // Offset: 0x1A63528
    void GenerateTerrainWithAlphamaps(::HoudiniEngineUnity::HEU_SessionBase* session, ::HoudiniEngineUnity::HEU_HoudiniAsset* houdiniAsset, bool bRebuild);
    // public System.Void LoadLayerPropertiesFromAttributes(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, UnityEngine.TerrainLayer terrainLayer, System.Boolean bNewTerrainLayer, UnityEngine.Texture2D defaultTexture)
    // Offset: 0x1A64DDC
    void LoadLayerPropertiesFromAttributes(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::UnityEngine::TerrainLayer* terrainLayer, bool bNewTerrainLayer, ::UnityEngine::Texture2D* defaultTexture);
    // public System.Void PopulateScatterTrees(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.Int32 pointCount, System.Boolean throwWarningIfNoTileAttribute)
    // Offset: 0x1A65158
    void PopulateScatterTrees(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, int pointCount, bool throwWarningIfNoTileAttribute);
    // public System.Void PopulateDetailPrototype(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, HoudiniEngineUnity.HEU_VolumeLayer layer)
    // Offset: 0x1A6517C
    void PopulateDetailPrototype(::HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::HoudiniEngineUnity::HEU_VolumeLayer* layer);
    // public System.Void PopulatePreset(HoudiniEngineUnity.HEU_VolumeCachePreset cachePreset)
    // Offset: 0x1A651A8
    void PopulatePreset(::HoudiniEngineUnity::HEU_VolumeCachePreset* cachePreset);
    // public System.Boolean ApplyPreset(HoudiniEngineUnity.HEU_VolumeCachePreset volumeCachePreset)
    // Offset: 0x1A64ADC
    bool ApplyPreset(::HoudiniEngineUnity::HEU_VolumeCachePreset* volumeCachePreset);
    // public System.Void CopyValuesTo(HoudiniEngineUnity.HEU_VolumeCache destCache)
    // Offset: 0x1A653A4
    void CopyValuesTo(::HoudiniEngineUnity::HEU_VolumeCache* destCache);
    // static public System.Void CopyDetailProperties(HoudiniEngineUnity.HEU_DetailProperties srcProp, HoudiniEngineUnity.HEU_DetailProperties destProp)
    // Offset: 0x1A6557C
    static void CopyDetailProperties(::HoudiniEngineUnity::HEU_DetailProperties* srcProp, ::HoudiniEngineUnity::HEU_DetailProperties* destProp);
    // static public System.Void CopyLayer(HoudiniEngineUnity.HEU_VolumeLayer srcLayer, HoudiniEngineUnity.HEU_VolumeLayer destLayer)
    // Offset: 0x1A62B50
    static void CopyLayer(::HoudiniEngineUnity::HEU_VolumeLayer* srcLayer, ::HoudiniEngineUnity::HEU_VolumeLayer* destLayer);
    // static public System.Void CopyPrototype(HoudiniEngineUnity.HEU_DetailPrototype srcProto, HoudiniEngineUnity.HEU_DetailPrototype destProto)
    // Offset: 0x1A655B0
    static void CopyPrototype(::HoudiniEngineUnity::HEU_DetailPrototype* srcProto, ::HoudiniEngineUnity::HEU_DetailPrototype* destProto);
    // static public UnityEngine.Texture2D LoadDefaultSplatTexture()
    // Offset: 0x1A64D44
    static ::UnityEngine::Texture2D* LoadDefaultSplatTexture();
    // static public UnityEngine.Texture2D LoadAssetTexture(System.String path)
    // Offset: 0x1A62FB4
    static ::UnityEngine::Texture2D* LoadAssetTexture(::StringW path);
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_VolumeCache other)
    // Offset: 0x1A65614
    bool IsEquivalentTo(::HoudiniEngineUnity::HEU_VolumeCache* other);
  }; // HoudiniEngineUnity.HEU_VolumeCache
  #pragma pack(pop)
  static check_size<sizeof(HEU_VolumeCache), 96 + sizeof(::HoudiniEngineUnity::HEU_DetailProperties*)> __HoudiniEngineUnity_HEU_VolumeCacheSizeCheck;
  static_assert(sizeof(HEU_VolumeCache) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::get_IsDirty
// Il2CppName: get_IsDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::get_IsDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "get_IsDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::set_IsDirty
// Il2CppName: set_IsDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(bool)>(&HoudiniEngineUnity::HEU_VolumeCache::set_IsDirty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "set_IsDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::get_TileIndex
// Il2CppName: get_TileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::get_TileIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "get_TileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::get_ObjectName
// Il2CppName: get_ObjectName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::get_ObjectName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "get_ObjectName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::get_GeoName
// Il2CppName: get_GeoName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::get_GeoName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "get_GeoName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::get_UIExpanded
// Il2CppName: get_UIExpanded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::get_UIExpanded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "get_UIExpanded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::set_UIExpanded
// Il2CppName: set_UIExpanded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(bool)>(&HoudiniEngineUnity::HEU_VolumeCache::set_UIExpanded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "set_UIExpanded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::UpdateVolumeCachesFromParts
// Il2CppName: UpdateVolumeCachesFromParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>* (*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HEU_GeoNode*, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_PartData*>*, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_VolumeCache*>*)>(&HoudiniEngineUnity::HEU_VolumeCache::UpdateVolumeCachesFromParts)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* ownerNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_GeoNode")->byval_arg;
    static auto* volumeParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")})->byval_arg;
    static auto* volumeCaches = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeCache")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "UpdateVolumeCachesFromParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, ownerNode, volumeParts, volumeCaches});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::Initialize
// Il2CppName: Initialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_GeoNode*, int)>(&HoudiniEngineUnity::HEU_VolumeCache::Initialize)> {
  static const MethodInfo* get() {
    static auto* ownerNode = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_GeoNode")->byval_arg;
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "Initialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ownerNode, tileIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::ResetParameters
// Il2CppName: ResetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::ResetParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "ResetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::GetLayer
// Il2CppName: GetLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_VolumeLayer* (HoudiniEngineUnity::HEU_VolumeCache::*)(::StringW)>(&HoudiniEngineUnity::HEU_VolumeCache::GetLayer)> {
  static const MethodInfo* get() {
    static auto* layerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "GetLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::StartUpdateLayers
// Il2CppName: StartUpdateLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::StartUpdateLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "StartUpdateLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::FinishUpdateLayers
// Il2CppName: FinishUpdateLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)()>(&HoudiniEngineUnity::HEU_VolumeCache::FinishUpdateLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "FinishUpdateLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::GetPartLayerAttributes
// Il2CppName: GetPartLayerAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::HoudiniEngineUnity::HEU_VolumeLayer*)>(&HoudiniEngineUnity::HEU_VolumeCache::GetPartLayerAttributes)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "GetPartLayerAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, layer});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadLayerTextureFromAttribute
// Il2CppName: LoadLayerTextureFromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::StringW, ByRef<::UnityEngine::Texture2D*>)>(&HoudiniEngineUnity::HEU_VolumeCache::LoadLayerTextureFromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* outTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadLayerTextureFromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, outTexture});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadLayerFloatFromAttribute
// Il2CppName: LoadLayerFloatFromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::StringW, ByRef<float>)>(&HoudiniEngineUnity::HEU_VolumeCache::LoadLayerFloatFromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* floatValue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadLayerFloatFromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, floatValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadLayerColorFromAttribute
// Il2CppName: LoadLayerColorFromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::StringW, ByRef<::UnityEngine::Color>)>(&HoudiniEngineUnity::HEU_VolumeCache::LoadLayerColorFromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* colorValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadLayerColorFromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, colorValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadLayerVector2FromAttribute
// Il2CppName: LoadLayerVector2FromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::StringW, ByRef<::UnityEngine::Vector2>)>(&HoudiniEngineUnity::HEU_VolumeCache::LoadLayerVector2FromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* vectorValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadLayerVector2FromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, vectorValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::UpdateLayerFromPart
// Il2CppName: UpdateLayerFromPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HEU_PartData*)>(&HoudiniEngineUnity::HEU_VolumeCache::UpdateLayerFromPart)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* part = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_PartData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "UpdateLayerFromPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, part});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::GenerateTerrainWithAlphamaps
// Il2CppName: GenerateTerrainWithAlphamaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, ::HoudiniEngineUnity::HEU_HoudiniAsset*, bool)>(&HoudiniEngineUnity::HEU_VolumeCache::GenerateTerrainWithAlphamaps)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* houdiniAsset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    static auto* bRebuild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "GenerateTerrainWithAlphamaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, houdiniAsset, bRebuild});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadLayerPropertiesFromAttributes
// Il2CppName: LoadLayerPropertiesFromAttributes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::UnityEngine::TerrainLayer*, bool, ::UnityEngine::Texture2D*)>(&HoudiniEngineUnity::HEU_VolumeCache::LoadLayerPropertiesFromAttributes)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* terrainLayer = &::il2cpp_utils::GetClassFromName("UnityEngine", "TerrainLayer")->byval_arg;
    static auto* bNewTerrainLayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* defaultTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadLayerPropertiesFromAttributes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, terrainLayer, bNewTerrainLayer, defaultTexture});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::PopulateScatterTrees
// Il2CppName: PopulateScatterTrees
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, int, bool)>(&HoudiniEngineUnity::HEU_VolumeCache::PopulateScatterTrees)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pointCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* throwWarningIfNoTileAttribute = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "PopulateScatterTrees", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, pointCount, throwWarningIfNoTileAttribute});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::PopulateDetailPrototype
// Il2CppName: PopulateDetailPrototype
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_SessionBase*, int, int, ::HoudiniEngineUnity::HEU_VolumeLayer*)>(&HoudiniEngineUnity::HEU_VolumeCache::PopulateDetailPrototype)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layer = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "PopulateDetailPrototype", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, layer});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::PopulatePreset
// Il2CppName: PopulatePreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_VolumeCachePreset*)>(&HoudiniEngineUnity::HEU_VolumeCache::PopulatePreset)> {
  static const MethodInfo* get() {
    static auto* cachePreset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeCachePreset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "PopulatePreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cachePreset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::ApplyPreset
// Il2CppName: ApplyPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_VolumeCachePreset*)>(&HoudiniEngineUnity::HEU_VolumeCache::ApplyPreset)> {
  static const MethodInfo* get() {
    static auto* volumeCachePreset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeCachePreset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "ApplyPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{volumeCachePreset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::CopyValuesTo
// Il2CppName: CopyValuesTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_VolumeCache*)>(&HoudiniEngineUnity::HEU_VolumeCache::CopyValuesTo)> {
  static const MethodInfo* get() {
    static auto* destCache = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "CopyValuesTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destCache});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::CopyDetailProperties
// Il2CppName: CopyDetailProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_DetailProperties*, ::HoudiniEngineUnity::HEU_DetailProperties*)>(&HoudiniEngineUnity::HEU_VolumeCache::CopyDetailProperties)> {
  static const MethodInfo* get() {
    static auto* srcProp = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_DetailProperties")->byval_arg;
    static auto* destProp = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_DetailProperties")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "CopyDetailProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcProp, destProp});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::CopyLayer
// Il2CppName: CopyLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_VolumeLayer*, ::HoudiniEngineUnity::HEU_VolumeLayer*)>(&HoudiniEngineUnity::HEU_VolumeCache::CopyLayer)> {
  static const MethodInfo* get() {
    static auto* srcLayer = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeLayer")->byval_arg;
    static auto* destLayer = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "CopyLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcLayer, destLayer});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::CopyPrototype
// Il2CppName: CopyPrototype
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::HoudiniEngineUnity::HEU_DetailPrototype*, ::HoudiniEngineUnity::HEU_DetailPrototype*)>(&HoudiniEngineUnity::HEU_VolumeCache::CopyPrototype)> {
  static const MethodInfo* get() {
    static auto* srcProto = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_DetailPrototype")->byval_arg;
    static auto* destProto = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_DetailPrototype")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "CopyPrototype", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcProto, destProto});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadDefaultSplatTexture
// Il2CppName: LoadDefaultSplatTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)()>(&HoudiniEngineUnity::HEU_VolumeCache::LoadDefaultSplatTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadDefaultSplatTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::LoadAssetTexture
// Il2CppName: LoadAssetTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::StringW)>(&HoudiniEngineUnity::HEU_VolumeCache::LoadAssetTexture)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "LoadAssetTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeCache::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeCache::*)(::HoudiniEngineUnity::HEU_VolumeCache*)>(&HoudiniEngineUnity::HEU_VolumeCache::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeCache")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeCache*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
