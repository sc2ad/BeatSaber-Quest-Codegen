// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HAPI_BoxInfo
  struct HAPI_BoxInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HAPI_BoxInfo, "HoudiniEngineUnity", "HAPI_BoxInfo");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.HAPI_BoxInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct HAPI_BoxInfo/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single[] center
    // Size: 0x8
    // Offset: 0x0
    ::ArrayW<float> center;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] size
    // Size: 0x8
    // Offset: 0x8
    ::ArrayW<float> size;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[] rotation
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<float> rotation;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating value type constructor for type: HAPI_BoxInfo
    constexpr HAPI_BoxInfo(::ArrayW<float> center_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::ArrayW<float> size_ = ::ArrayW<float>(static_cast<void*>(nullptr)), ::ArrayW<float> rotation_ = ::ArrayW<float>(static_cast<void*>(nullptr))) noexcept : center{center_}, size{size_}, rotation{rotation_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single[] center
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_center();
    // Get instance field reference: public System.Single[] size
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_size();
    // Get instance field reference: public System.Single[] rotation
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_rotation();
    // public System.Void .ctor(System.Boolean initialize_fields)
    // Offset: 0x1702884
    HAPI_BoxInfo(bool initialize_fields);
  }; // HoudiniEngineUnity.HAPI_BoxInfo
  #pragma pack(pop)
  static check_size<sizeof(HAPI_BoxInfo), 16 + sizeof(::ArrayW<float>)> __HoudiniEngineUnity_HAPI_BoxInfoSizeCheck;
  static_assert(sizeof(HAPI_BoxInfo) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_BoxInfo::HAPI_BoxInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
