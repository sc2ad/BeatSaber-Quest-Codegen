// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.IEquivableWrapperClass`1
#include "HoudiniEngineUnity/IEquivableWrapperClass_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.Test_AnimationCurve
  // [TokenAttribute] Offset: FFFFFFFF
  class Test_AnimationCurve : public ::Il2CppObject/*, public HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_AnimationCurve*>*/ {
    public:
    // public UnityEngine.AnimationCurve self
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::AnimationCurve* self;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // Creating value type constructor for type: Test_AnimationCurve
    Test_AnimationCurve(UnityEngine::AnimationCurve* self_ = {}) noexcept : self{self_} {}
    // Creating interface conversion operator: operator HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_AnimationCurve*>
    operator HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_AnimationCurve*>() noexcept {
      return *reinterpret_cast<HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_AnimationCurve*>*>(this);
    }
    // Creating conversion operator: operator UnityEngine::AnimationCurve*
    constexpr operator UnityEngine::AnimationCurve*() const noexcept {
      return self;
    }
    // Get instance field reference: public UnityEngine.AnimationCurve self
    UnityEngine::AnimationCurve*& dyn_self();
    // public System.Void .ctor(UnityEngine.AnimationCurve self)
    // Offset: 0x1708584
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Test_AnimationCurve* New_ctor(UnityEngine::AnimationCurve* self) {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_AnimationCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Test_AnimationCurve*, creationType>(self)));
    }
    // public System.Boolean IsNull()
    // Offset: 0x17085B0
    bool IsNull();
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.Test_AnimationCurve other)
    // Offset: 0x17085C0
    bool IsEquivalentTo(HoudiniEngineUnity::Test_AnimationCurve* other);
  }; // HoudiniEngineUnity.Test_AnimationCurve
  #pragma pack(pop)
  static check_size<sizeof(Test_AnimationCurve), 16 + sizeof(UnityEngine::AnimationCurve*)> __HoudiniEngineUnity_Test_AnimationCurveSizeCheck;
  static_assert(sizeof(Test_AnimationCurve) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::Test_AnimationCurve*, "HoudiniEngineUnity", "Test_AnimationCurve");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_AnimationCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_AnimationCurve::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::Test_AnimationCurve::*)()>(&HoudiniEngineUnity::Test_AnimationCurve::IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::Test_AnimationCurve*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_AnimationCurve::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::Test_AnimationCurve::*)(HoudiniEngineUnity::Test_AnimationCurve*)>(&HoudiniEngineUnity::Test_AnimationCurve::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "Test_AnimationCurve")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::Test_AnimationCurve*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
