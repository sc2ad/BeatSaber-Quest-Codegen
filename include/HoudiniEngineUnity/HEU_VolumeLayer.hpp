// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: HoudiniEngineUnity.HFLayerType
#include "HoudiniEngineUnity/HFLayerType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_PartData
  class HEU_PartData;
  // Forward declaring type: HEU_DetailPrototype
  class HEU_DetailPrototype;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TerrainLayer
  class TerrainLayer;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_VolumeLayer
  class HEU_VolumeLayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_VolumeLayer);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_VolumeLayer*, "HoudiniEngineUnity", "HEU_VolumeLayer");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_VolumeLayer
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_VolumeLayer : public ::Il2CppObject/*, public ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*/ {
    public:
    public:
    // public System.String _layerName
    // Size: 0x8
    // Offset: 0x10
    ::StringW layerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public HoudiniEngineUnity.HEU_PartData _part
    // Size: 0x8
    // Offset: 0x18
    ::HoudiniEngineUnity::HEU_PartData* part;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_PartData*) == 0x8);
    // public System.Single _strength
    // Size: 0x4
    // Offset: 0x20
    float strength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean _uiExpanded
    // Size: 0x1
    // Offset: 0x24
    bool uiExpanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uiExpanded and: tile
    char __padding3[0x3] = {};
    // public System.Int32 _tile
    // Size: 0x4
    // Offset: 0x28
    int tile;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _xLength
    // Size: 0x4
    // Offset: 0x2C
    int xLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _yLength
    // Size: 0x4
    // Offset: 0x30
    int yLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean _hasLayerAttributes
    // Size: 0x1
    // Offset: 0x34
    bool hasLayerAttributes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasLayerAttributes and: terrainLayer
    char __padding7[0x3] = {};
    // public UnityEngine.TerrainLayer _terrainLayer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::TerrainLayer* terrainLayer;
    // Field size check
    static_assert(sizeof(::UnityEngine::TerrainLayer*) == 0x8);
    // public HoudiniEngineUnity.HFLayerType _layerType
    // Size: 0x4
    // Offset: 0x40
    ::HoudiniEngineUnity::HFLayerType layerType;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HFLayerType) == 0x4);
    // Padding between fields: layerType and: detailPrototype
    char __padding9[0x4] = {};
    // public HoudiniEngineUnity.HEU_DetailPrototype _detailPrototype
    // Size: 0x8
    // Offset: 0x48
    ::HoudiniEngineUnity::HEU_DetailPrototype* detailPrototype;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_DetailPrototype*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeLayer*>
    operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeLayer*>() noexcept {
      return *reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*>(this);
    }
    // Creating interface conversion operator: i_HEU_VolumeLayer
    inline ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeLayer*>* i_HEU_VolumeLayer() noexcept {
      return reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_VolumeLayer*>*>(this);
    }
    // Get instance field reference: public System.String _layerName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__layerName();
    // Get instance field reference: public HoudiniEngineUnity.HEU_PartData _part
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_PartData*& dyn__part();
    // Get instance field reference: public System.Single _strength
    [[deprecated("Use field access instead!")]] float& dyn__strength();
    // Get instance field reference: public System.Boolean _uiExpanded
    [[deprecated("Use field access instead!")]] bool& dyn__uiExpanded();
    // Get instance field reference: public System.Int32 _tile
    [[deprecated("Use field access instead!")]] int& dyn__tile();
    // Get instance field reference: public System.Int32 _xLength
    [[deprecated("Use field access instead!")]] int& dyn__xLength();
    // Get instance field reference: public System.Int32 _yLength
    [[deprecated("Use field access instead!")]] int& dyn__yLength();
    // Get instance field reference: public System.Boolean _hasLayerAttributes
    [[deprecated("Use field access instead!")]] bool& dyn__hasLayerAttributes();
    // Get instance field reference: public UnityEngine.TerrainLayer _terrainLayer
    [[deprecated("Use field access instead!")]] ::UnityEngine::TerrainLayer*& dyn__terrainLayer();
    // Get instance field reference: public HoudiniEngineUnity.HFLayerType _layerType
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HFLayerType& dyn__layerType();
    // Get instance field reference: public HoudiniEngineUnity.HEU_DetailPrototype _detailPrototype
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_DetailPrototype*& dyn__detailPrototype();
    // public System.Void .ctor()
    // Offset: 0x1A62B40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_VolumeLayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_VolumeLayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_VolumeLayer*, creationType>()));
    }
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_VolumeLayer other)
    // Offset: 0x1A6596C
    bool IsEquivalentTo(::HoudiniEngineUnity::HEU_VolumeLayer* other);
  }; // HoudiniEngineUnity.HEU_VolumeLayer
  #pragma pack(pop)
  static check_size<sizeof(HEU_VolumeLayer), 72 + sizeof(::HoudiniEngineUnity::HEU_DetailPrototype*)> __HoudiniEngineUnity_HEU_VolumeLayerSizeCheck;
  static_assert(sizeof(HEU_VolumeLayer) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeLayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_VolumeLayer::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_VolumeLayer::*)(::HoudiniEngineUnity::HEU_VolumeLayer*)>(&HoudiniEngineUnity::HEU_VolumeLayer::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_VolumeLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_VolumeLayer*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
