// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.HAPI_Viewport
  // [TokenAttribute] Offset: FFFFFFFF
  struct HAPI_Viewport/*, public System::ValueType*/ {
    public:
    // public System.Single[] position
    // Size: 0x8
    // Offset: 0x0
    ::Array<float>* position;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // public System.Single[] rotationQuaternion
    // Size: 0x8
    // Offset: 0x8
    ::Array<float>* rotationQuaternion;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // public System.Single offset
    // Size: 0x4
    // Offset: 0x10
    float offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: HAPI_Viewport
    constexpr HAPI_Viewport(::Array<float>* position_ = {}, ::Array<float>* rotationQuaternion_ = {}, float offset_ = {}) noexcept : position{position_}, rotationQuaternion{rotationQuaternion_}, offset{offset_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single[] position
    ::Array<float>*& dyn_position();
    // Get instance field reference: public System.Single[] rotationQuaternion
    ::Array<float>*& dyn_rotationQuaternion();
    // Get instance field reference: public System.Single offset
    float& dyn_offset();
    // public System.Void .ctor(System.Boolean initializeFields)
    // Offset: 0x1439EB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    HAPI_Viewport(bool initializeFields) {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HAPI_Viewport::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initializeFields)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, initializeFields);
    }
    // public System.Void Init()
    // Offset: 0x1439F44
    void Init();
  }; // HoudiniEngineUnity.HAPI_Viewport
  #pragma pack(pop)
  static check_size<sizeof(HAPI_Viewport), 16 + sizeof(float)> __HoudiniEngineUnity_HAPI_ViewportSizeCheck;
  static_assert(sizeof(HAPI_Viewport) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HAPI_Viewport, "HoudiniEngineUnity", "HAPI_Viewport");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_Viewport::HAPI_Viewport
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_Viewport::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HAPI_Viewport::*)()>(&HoudiniEngineUnity::HAPI_Viewport::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_Viewport), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
