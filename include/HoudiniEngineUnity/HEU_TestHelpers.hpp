// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: IEquivable`1<T>
  template<typename T>
  class IEquivable_1;
  // Forward declaring type: IEquivableWrapperClass`1<T>
  template<typename T>
  class IEquivableWrapperClass_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueType
  class ValueType;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_TestHelpers
  class HEU_TestHelpers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_TestHelpers);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_TestHelpers*, "HoudiniEngineUnity", "HEU_TestHelpers");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_TestHelpers
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_TestHelpers : public ::Il2CppObject {
    public:
    // Nested type: ::HoudiniEngineUnity::HEU_TestHelpers::RequireStruct_1<T>
    template<typename T>
    class RequireStruct_1;
    // Nested type: ::HoudiniEngineUnity::HEU_TestHelpers::RequireClass_1<T>
    template<typename T>
    class RequireClass_1;
    // public System.Void .ctor()
    // Offset: 0x1B39294
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_TestHelpers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_TestHelpers*, creationType>()));
    }
    // static public System.Boolean AssertTrueLogEquivalent(T a, T b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3, HoudiniEngineUnity.HEU_TestHelpers/HoudiniEngineUnity.RequireStruct`1<T> _)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(T a, T b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3, ::HoudiniEngineUnity::HEU_TestHelpers::RequireStruct_1<T>* _) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3), ::il2cpp_utils::ExtractType(_)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3, _);
    }
    // static public System.Boolean AssertTrueLogEquivalent(UnityEngine.GameObject a, UnityEngine.GameObject b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0x1B38470
    static bool AssertTrueLogEquivalent(::UnityEngine::GameObject* a, ::UnityEngine::GameObject* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3);
    // static public System.Boolean AssertTrueLogEquivalent(HoudiniEngineUnity.IEquivable`1<T> a, HoudiniEngineUnity.IEquivable`1<T> b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::HoudiniEngineUnity::IEquivable_1<T>* a, ::HoudiniEngineUnity::IEquivable_1<T>* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Boolean AssertTrueLogEquivalent(HoudiniEngineUnity.IEquivableWrapperClass`1<T> a, HoudiniEngineUnity.IEquivableWrapperClass`1<T> b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::HoudiniEngineUnity::IEquivableWrapperClass_1<T>* a, ::HoudiniEngineUnity::IEquivableWrapperClass_1<T>* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Boolean AssertTrueLogEquivalent(System.String a, System.String b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0x1B39044
    static bool AssertTrueLogEquivalent(::StringW a, ::StringW b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3);
    // static public System.Boolean AssertTrueLogEquivalent(System.Collections.Generic.List`1<T> a, System.Collections.Generic.List`1<T> b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3, HoudiniEngineUnity.HEU_TestHelpers/HoudiniEngineUnity.RequireStruct`1<T> _)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::System::Collections::Generic::List_1<T>* a, ::System::Collections::Generic::List_1<T>* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3, ::HoudiniEngineUnity::HEU_TestHelpers::RequireStruct_1<T>* _) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3), ::il2cpp_utils::ExtractType(_)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3, _);
    }
    // static public System.Boolean AssertTrueLogEquivalent(System.Collections.Generic.List`1<T> a, System.Collections.Generic.List`1<T> b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3, HoudiniEngineUnity.HEU_TestHelpers/HoudiniEngineUnity.RequireClass`1<T> _)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::System::Collections::Generic::List_1<T>* a, ::System::Collections::Generic::List_1<T>* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3, ::HoudiniEngineUnity::HEU_TestHelpers::RequireClass_1<T>* _) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3), ::il2cpp_utils::ExtractType(_)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3, _);
    }
    // static public System.Boolean AssertTrueLogEquivalent(System.Collections.Generic.List`1<HoudiniEngineUnity.IEquivable`1<T>> a, System.Collections.Generic.List`1<HoudiniEngineUnity.IEquivable`1<T>> b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::System::Collections::Generic::List_1<::HoudiniEngineUnity::IEquivable_1<T>*>* a, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::IEquivable_1<T>*>* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Boolean AssertTrueLogEquivalent(System.Collections.Generic.List`1<HoudiniEngineUnity.IEquivableWrapperClass`1<T>> a, System.Collections.Generic.List`1<HoudiniEngineUnity.IEquivableWrapperClass`1<T>> b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::System::Collections::Generic::List_1<::HoudiniEngineUnity::IEquivableWrapperClass_1<T>*>* a, ::System::Collections::Generic::List_1<::HoudiniEngineUnity::IEquivableWrapperClass_1<T>*>* b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Boolean AssertTrueLogEquivalent(T[] a, T[] b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::ArrayW<T> a, ::ArrayW<T> b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static_assert(std::is_convertible_v<T, ::System::ValueType*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Boolean AssertTrueLogEquivalent(System.String[] a, System.String[] b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0x1B3913C
    static bool AssertTrueLogEquivalent(::ArrayW<::StringW> a, ::ArrayW<::StringW> b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3);
    // static public System.Boolean AssertTrueLogEquivalent(HoudiniEngineUnity.IEquivable`1<T>[] a, HoudiniEngineUnity.IEquivable`1<T>[] b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::ArrayW<::HoudiniEngineUnity::IEquivable_1<T>*> a, ::ArrayW<::HoudiniEngineUnity::IEquivable_1<T>*> b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Boolean AssertTrueLogEquivalent(HoudiniEngineUnity.IEquivableWrapperClass`1<T>[] a, HoudiniEngineUnity.IEquivableWrapperClass`1<T>[] b, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool AssertTrueLogEquivalent(::ArrayW<::HoudiniEngineUnity::IEquivableWrapperClass_1<T>*> a, ::ArrayW<::HoudiniEngineUnity::IEquivableWrapperClass_1<T>*> b, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "AssertTrueLogEquivalent", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(result), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject), ::il2cpp_utils::ExtractType(optional1), ::il2cpp_utils::ExtractType(optional2), ::il2cpp_utils::ExtractType(optional3)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(result), header, subject, optional1, optional2, optional3);
    }
    // static public System.Void PrintTestLogAndSetResult(System.Boolean expression, ref System.Boolean result, System.String header, System.String subject, System.String optional1, System.String optional2, System.String optional3)
    // Offset: 0x1B38EF0
    static void PrintTestLogAndSetResult(bool expression, ByRef<bool> result, ::StringW header, ::StringW subject, ::StringW optional1, ::StringW optional2, ::StringW optional3);
    // static public System.Boolean ShouldBeTested(T a, T b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool ShouldBeTested(T a, T b, ByRef<bool> bResult, ::StringW header, ::StringW subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "ShouldBeTested", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(bResult), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(bResult), header, subject);
    }
    // static public System.Boolean ShouldBeTested(UnityEngine.GameObject a, UnityEngine.GameObject b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0x1B38594
    static bool ShouldBeTested(::UnityEngine::GameObject* a, ::UnityEngine::GameObject* b, ByRef<bool> bResult, ::StringW header, ::StringW subject);
    // static public System.Boolean ShouldBeTested(HoudiniEngineUnity.IEquivable`1<T> a, HoudiniEngineUnity.IEquivable`1<T> b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool ShouldBeTested(::HoudiniEngineUnity::IEquivable_1<T>* a, ::HoudiniEngineUnity::IEquivable_1<T>* b, ByRef<bool> bResult, ::StringW header, ::StringW subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "ShouldBeTested", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(bResult), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(bResult), header, subject);
    }
    // static public System.Boolean ShouldBeTested(HoudiniEngineUnity.IEquivableWrapperClass`1<T> a, HoudiniEngineUnity.IEquivableWrapperClass`1<T> b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool ShouldBeTested(::HoudiniEngineUnity::IEquivableWrapperClass_1<T>* a, ::HoudiniEngineUnity::IEquivableWrapperClass_1<T>* b, ByRef<bool> bResult, ::StringW header, ::StringW subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "ShouldBeTested", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(bResult), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(bResult), header, subject);
    }
    // static private System.Boolean ShouldBeTested(System.Collections.Generic.List`1<T> a, System.Collections.Generic.List`1<T> b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool ShouldBeTested(::System::Collections::Generic::List_1<T>* a, ::System::Collections::Generic::List_1<T>* b, ByRef<bool> bResult, ::StringW header, ::StringW subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "ShouldBeTested", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(bResult), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(bResult), header, subject);
    }
    // static public System.Boolean ShouldBeTested(T[] a, T[] b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool ShouldBeTested(::ArrayW<T> a, ::ArrayW<T> b, ByRef<bool> bResult, ::StringW header, ::StringW subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_TestHelpers", "ShouldBeTested", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(a), ::il2cpp_utils::ExtractType(b), ::il2cpp_utils::ExtractType(bResult), ::il2cpp_utils::ExtractType(header), ::il2cpp_utils::ExtractType(subject)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, a, b, byref(bResult), header, subject);
    }
    // static public System.Boolean ShouldBeTested(System.String a, System.String b, ref System.Boolean bResult, System.String header, System.String subject)
    // Offset: 0x1B390E4
    static bool ShouldBeTested(::StringW a, ::StringW b, ByRef<bool> bResult, ::StringW header, ::StringW subject);
    // static public System.Boolean TestOutputObjectEquivalence(UnityEngine.GameObject a, UnityEngine.GameObject b)
    // Offset: 0x1B38900
    static bool TestOutputObjectEquivalence(::UnityEngine::GameObject* a, ::UnityEngine::GameObject* b);
  }; // HoudiniEngineUnity.HEU_TestHelpers
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*, ::UnityEngine::GameObject*, ByRef<bool>, ::StringW, ::StringW, ::StringW, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "AssertTrueLogEquivalent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, result, header, subject, optional1, optional2, optional3});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<bool>, ::StringW, ::StringW, ::StringW, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "AssertTrueLogEquivalent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, result, header, subject, optional1, optional2, optional3});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::ArrayW<::StringW>, ::ArrayW<::StringW>, ByRef<bool>, ::StringW, ::StringW, ::StringW, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent)> {
  static const MethodInfo* get() {
    static auto* a = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* b = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "AssertTrueLogEquivalent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, result, header, subject, optional1, optional2, optional3});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::AssertTrueLogEquivalent
// Il2CppName: AssertTrueLogEquivalent
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::PrintTestLogAndSetResult
// Il2CppName: PrintTestLogAndSetResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool, ByRef<bool>, ::StringW, ::StringW, ::StringW, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_TestHelpers::PrintTestLogAndSetResult)> {
  static const MethodInfo* get() {
    static auto* expression = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional1 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional2 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* optional3 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "PrintTestLogAndSetResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{expression, result, header, subject, optional1, optional2, optional3});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*, ::UnityEngine::GameObject*, ByRef<bool>, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* bResult = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "ShouldBeTested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, bResult, header, subject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested
// Il2CppName: ShouldBeTested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ByRef<bool>, ::StringW, ::StringW)>(&HoudiniEngineUnity::HEU_TestHelpers::ShouldBeTested)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bResult = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* header = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subject = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "ShouldBeTested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b, bResult, header, subject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_TestHelpers::TestOutputObjectEquivalence
// Il2CppName: TestOutputObjectEquivalence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::GameObject*, ::UnityEngine::GameObject*)>(&HoudiniEngineUnity::HEU_TestHelpers::TestOutputObjectEquivalence)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_TestHelpers*), "TestOutputObjectEquivalence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
