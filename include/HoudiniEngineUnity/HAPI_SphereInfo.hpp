// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.HAPI_SphereInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct HAPI_SphereInfo/*, public System::ValueType*/ {
    public:
    // public System.Single[] center
    // Size: 0x8
    // Offset: 0x0
    ::Array<float>* center;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // public System.Single radius
    // Size: 0x4
    // Offset: 0x8
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: HAPI_SphereInfo
    constexpr HAPI_SphereInfo(::Array<float>* center_ = {}, float radius_ = {}) noexcept : center{center_}, radius{radius_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single[] center
    ::Array<float>*& dyn_center();
    // Get instance field reference: public System.Single radius
    float& dyn_radius();
    // public System.Void .ctor(System.Boolean initialize_fields)
    // Offset: 0x1439B34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    HAPI_SphereInfo(bool initialize_fields) {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HAPI_SphereInfo::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initialize_fields)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, initialize_fields);
    }
  }; // HoudiniEngineUnity.HAPI_SphereInfo
  #pragma pack(pop)
  static check_size<sizeof(HAPI_SphereInfo), 8 + sizeof(float)> __HoudiniEngineUnity_HAPI_SphereInfoSizeCheck;
  static_assert(sizeof(HAPI_SphereInfo) == 0xC);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HAPI_SphereInfo, "HoudiniEngineUnity", "HAPI_SphereInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_SphereInfo::HAPI_SphereInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
