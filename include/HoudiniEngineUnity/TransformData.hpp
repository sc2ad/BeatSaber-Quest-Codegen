// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.TransformData
  // [TokenAttribute] Offset: FFFFFFFF
  struct TransformData/*, public System::ValueType*/ {
    public:
    // public UnityEngine.Vector3 position
    // Size: 0xC
    // Offset: 0x0
    UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotation
    // Size: 0x10
    // Offset: 0xC
    UnityEngine::Quaternion rotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 localPosition
    // Size: 0xC
    // Offset: 0x1C
    UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 localScale
    // Size: 0xC
    // Offset: 0x28
    UnityEngine::Vector3 localScale;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion localRotation
    // Size: 0x10
    // Offset: 0x34
    UnityEngine::Quaternion localRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // Padding between fields: localRotation and: parent
    char __padding4[0x4] = {};
    // public UnityEngine.Transform parent
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Transform* parent;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: TransformData
    constexpr TransformData(UnityEngine::Vector3 position_ = {}, UnityEngine::Quaternion rotation_ = {}, UnityEngine::Vector3 localPosition_ = {}, UnityEngine::Vector3 localScale_ = {}, UnityEngine::Quaternion localRotation_ = {}, UnityEngine::Transform* parent_ = {}) noexcept : position{position_}, rotation{rotation_}, localPosition{localPosition_}, localScale{localScale_}, localRotation{localRotation_}, parent{parent_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public UnityEngine.Vector3 position
    UnityEngine::Vector3& dyn_position();
    // Get instance field reference: public UnityEngine.Quaternion rotation
    UnityEngine::Quaternion& dyn_rotation();
    // Get instance field reference: public UnityEngine.Vector3 localPosition
    UnityEngine::Vector3& dyn_localPosition();
    // Get instance field reference: public UnityEngine.Vector3 localScale
    UnityEngine::Vector3& dyn_localScale();
    // Get instance field reference: public UnityEngine.Quaternion localRotation
    UnityEngine::Quaternion& dyn_localRotation();
    // Get instance field reference: public UnityEngine.Transform parent
    UnityEngine::Transform*& dyn_parent();
    // public System.Void .ctor(UnityEngine.Transform other)
    // Offset: 0x25D47A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    TransformData(UnityEngine::Transform* other) {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::TransformData::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(other)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, other);
    }
    // public System.Void CopyTo(UnityEngine.Transform other, System.Boolean copyParent)
    // Offset: 0x25D4840
    void CopyTo(UnityEngine::Transform* other, bool copyParent);
    // public System.Void CopyToLocal(UnityEngine.Transform other, System.Boolean copyParent)
    // Offset: 0x25D48D0
    void CopyToLocal(UnityEngine::Transform* other, bool copyParent);
  }; // HoudiniEngineUnity.TransformData
  #pragma pack(pop)
  static check_size<sizeof(TransformData), 72 + sizeof(UnityEngine::Transform*)> __HoudiniEngineUnity_TransformDataSizeCheck;
  static_assert(sizeof(TransformData) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::TransformData, "HoudiniEngineUnity", "TransformData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::TransformData::TransformData
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::TransformData::CopyTo
// Il2CppName: CopyTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::TransformData::*)(UnityEngine::Transform*, bool)>(&HoudiniEngineUnity::TransformData::CopyTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* copyParent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::TransformData), "CopyTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, copyParent});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::TransformData::CopyToLocal
// Il2CppName: CopyToLocal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::TransformData::*)(UnityEngine::Transform*, bool)>(&HoudiniEngineUnity::TransformData::CopyToLocal)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* copyParent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::TransformData), "CopyToLocal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other, copyParent});
  }
};
