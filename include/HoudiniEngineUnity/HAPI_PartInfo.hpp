// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: HoudiniEngineUnity.HAPI_PartType
#include "HoudiniEngineUnity/HAPI_PartType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HAPI_AttributeOwner
  struct HAPI_AttributeOwner;
  // Forward declaring type: HAPI_GroupType
  struct HAPI_GroupType;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x2D
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: HoudiniEngineUnity.HAPI_PartInfo
  // [TokenAttribute] Offset: FFFFFFFF
  struct HAPI_PartInfo/*, public System::ValueType*/ {
    public:
    // public System.Int32 id
    // Size: 0x4
    // Offset: 0x0
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 nameSH
    // Size: 0x4
    // Offset: 0x4
    int nameSH;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public HoudiniEngineUnity.HAPI_PartType type
    // Size: 0x4
    // Offset: 0x8
    HoudiniEngineUnity::HAPI_PartType type;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HAPI_PartType) == 0x4);
    // public System.Int32 faceCount
    // Size: 0x4
    // Offset: 0xC
    int faceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 vertexCount
    // Size: 0x4
    // Offset: 0x10
    int vertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pointCount
    // Size: 0x4
    // Offset: 0x14
    int pointCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32[] attributeCounts
    // Size: 0x8
    // Offset: 0x18
    ::Array<int>* attributeCounts;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // public System.Boolean isInstanced
    // Size: 0x1
    // Offset: 0x20
    bool isInstanced;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInstanced and: instancedPartCount
    char __padding7[0x3] = {};
    // public System.Int32 instancedPartCount
    // Size: 0x4
    // Offset: 0x24
    int instancedPartCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 instanceCount
    // Size: 0x4
    // Offset: 0x28
    int instanceCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean hasChanged
    // Size: 0x1
    // Offset: 0x2C
    bool hasChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HAPI_PartInfo
    constexpr HAPI_PartInfo(int id_ = {}, int nameSH_ = {}, HoudiniEngineUnity::HAPI_PartType type_ = {}, int faceCount_ = {}, int vertexCount_ = {}, int pointCount_ = {}, ::Array<int>* attributeCounts_ = {}, bool isInstanced_ = {}, int instancedPartCount_ = {}, int instanceCount_ = {}, bool hasChanged_ = {}) noexcept : id{id_}, nameSH{nameSH_}, type{type_}, faceCount{faceCount_}, vertexCount{vertexCount_}, pointCount{pointCount_}, attributeCounts{attributeCounts_}, isInstanced{isInstanced_}, instancedPartCount{instancedPartCount_}, instanceCount{instanceCount_}, hasChanged{hasChanged_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public System.Int32 id
    int& dyn_id();
    // Get instance field reference: public System.Int32 nameSH
    int& dyn_nameSH();
    // Get instance field reference: public HoudiniEngineUnity.HAPI_PartType type
    HoudiniEngineUnity::HAPI_PartType& dyn_type();
    // Get instance field reference: public System.Int32 faceCount
    int& dyn_faceCount();
    // Get instance field reference: public System.Int32 vertexCount
    int& dyn_vertexCount();
    // Get instance field reference: public System.Int32 pointCount
    int& dyn_pointCount();
    // Get instance field reference: public System.Int32[] attributeCounts
    ::Array<int>*& dyn_attributeCounts();
    // Get instance field reference: public System.Boolean isInstanced
    bool& dyn_isInstanced();
    // Get instance field reference: public System.Int32 instancedPartCount
    int& dyn_instancedPartCount();
    // Get instance field reference: public System.Int32 instanceCount
    int& dyn_instanceCount();
    // Get instance field reference: public System.Boolean hasChanged
    bool& dyn_hasChanged();
    // public System.Int32 getElementCountByAttributeOwner(HoudiniEngineUnity.HAPI_AttributeOwner owner)
    // Offset: 0x1439938
    int getElementCountByAttributeOwner(HoudiniEngineUnity::HAPI_AttributeOwner owner);
    // public System.Int32 getElementCountByGroupType(HoudiniEngineUnity.HAPI_GroupType type)
    // Offset: 0x1439980
    int getElementCountByGroupType(HoudiniEngineUnity::HAPI_GroupType type);
    // public System.Void init()
    // Offset: 0x14399A8
    void init();
    // public System.Int32 get_pointAttributeCount()
    // Offset: 0x1437E10
    int get_pointAttributeCount();
    // public System.Void set_pointAttributeCount(System.Int32 value)
    // Offset: 0x1439A08
    void set_pointAttributeCount(int value);
    // public System.Int32 get_primitiveAttributeCount()
    // Offset: 0x1437DC8
    int get_primitiveAttributeCount();
    // public System.Void set_primitiveAttributeCount(System.Int32 value)
    // Offset: 0x1439A54
    void set_primitiveAttributeCount(int value);
    // public System.Int32 get_vertexAttributeCount()
    // Offset: 0x1437E58
    int get_vertexAttributeCount();
    // public System.Void set_vertexAttributeCount(System.Int32 value)
    // Offset: 0x1439AA0
    void set_vertexAttributeCount(int value);
    // public System.Int32 get_detailAttributeCount()
    // Offset: 0x1437B14
    int get_detailAttributeCount();
    // public System.Void set_detailAttributeCount(System.Int32 value)
    // Offset: 0x1439AE8
    void set_detailAttributeCount(int value);
  }; // HoudiniEngineUnity.HAPI_PartInfo
  #pragma pack(pop)
  static check_size<sizeof(HAPI_PartInfo), 44 + sizeof(bool)> __HoudiniEngineUnity_HAPI_PartInfoSizeCheck;
  static_assert(sizeof(HAPI_PartInfo) == 0x2D);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HAPI_PartInfo, "HoudiniEngineUnity", "HAPI_PartInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::getElementCountByAttributeOwner
// Il2CppName: getElementCountByAttributeOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HAPI_PartInfo::*)(HoudiniEngineUnity::HAPI_AttributeOwner)>(&HoudiniEngineUnity::HAPI_PartInfo::getElementCountByAttributeOwner)> {
  static const MethodInfo* get() {
    static auto* owner = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeOwner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "getElementCountByAttributeOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{owner});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::getElementCountByGroupType
// Il2CppName: getElementCountByGroupType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HAPI_PartInfo::*)(HoudiniEngineUnity::HAPI_GroupType)>(&HoudiniEngineUnity::HAPI_PartInfo::getElementCountByGroupType)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "getElementCountByGroupType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::init
// Il2CppName: init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HAPI_PartInfo::*)()>(&HoudiniEngineUnity::HAPI_PartInfo::init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::get_pointAttributeCount
// Il2CppName: get_pointAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HAPI_PartInfo::*)()>(&HoudiniEngineUnity::HAPI_PartInfo::get_pointAttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "get_pointAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::set_pointAttributeCount
// Il2CppName: set_pointAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HAPI_PartInfo::*)(int)>(&HoudiniEngineUnity::HAPI_PartInfo::set_pointAttributeCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "set_pointAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::get_primitiveAttributeCount
// Il2CppName: get_primitiveAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HAPI_PartInfo::*)()>(&HoudiniEngineUnity::HAPI_PartInfo::get_primitiveAttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "get_primitiveAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::set_primitiveAttributeCount
// Il2CppName: set_primitiveAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HAPI_PartInfo::*)(int)>(&HoudiniEngineUnity::HAPI_PartInfo::set_primitiveAttributeCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "set_primitiveAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::get_vertexAttributeCount
// Il2CppName: get_vertexAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HAPI_PartInfo::*)()>(&HoudiniEngineUnity::HAPI_PartInfo::get_vertexAttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "get_vertexAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::set_vertexAttributeCount
// Il2CppName: set_vertexAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HAPI_PartInfo::*)(int)>(&HoudiniEngineUnity::HAPI_PartInfo::set_vertexAttributeCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "set_vertexAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::get_detailAttributeCount
// Il2CppName: get_detailAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HAPI_PartInfo::*)()>(&HoudiniEngineUnity::HAPI_PartInfo::get_detailAttributeCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "get_detailAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HAPI_PartInfo::set_detailAttributeCount
// Il2CppName: set_detailAttributeCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HAPI_PartInfo::*)(int)>(&HoudiniEngineUnity::HAPI_PartInfo::set_detailAttributeCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HAPI_PartInfo), "set_detailAttributeCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
