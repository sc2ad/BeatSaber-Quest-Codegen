// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: HoudiniEngineUnity.HFLayerType
#include "HoudiniEngineUnity/HFLayerType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_LoadBufferVolumeLayer
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_LoadBufferVolumeLayer : public ::Il2CppObject {
    public:
    // public System.String _layerName
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* layerName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Int32 _partID
    // Size: 0x4
    // Offset: 0x18
    int partID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _heightMapWidth
    // Size: 0x4
    // Offset: 0x1C
    int heightMapWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _heightMapHeight
    // Size: 0x4
    // Offset: 0x20
    int heightMapHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single _strength
    // Size: 0x4
    // Offset: 0x24
    float strength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String _diffuseTexturePath
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* diffuseTexturePath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String _maskTexturePath
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* maskTexturePath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Single _metallic
    // Size: 0x4
    // Offset: 0x38
    float metallic;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: metallic and: normalTexturePath
    char __padding7[0x4] = {};
    // public System.String _normalTexturePath
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* normalTexturePath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Single _normalScale
    // Size: 0x4
    // Offset: 0x48
    float normalScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _smoothness
    // Size: 0x4
    // Offset: 0x4C
    float smoothness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color _specularColor
    // Size: 0x10
    // Offset: 0x50
    UnityEngine::Color specularColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public UnityEngine.Vector2 _tileSize
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Vector2 tileSize;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // public UnityEngine.Vector2 _tileOffset
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Vector2 tileOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // public System.Boolean _uiExpanded
    // Size: 0x1
    // Offset: 0x70
    bool uiExpanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: uiExpanded and: tile
    char __padding14[0x3] = {};
    // public System.Int32 _tile
    // Size: 0x4
    // Offset: 0x74
    int tile;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single[] _normalizedHeights
    // Size: 0x8
    // Offset: 0x78
    ::Array<float>* normalizedHeights;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // public System.Single _minHeight
    // Size: 0x4
    // Offset: 0x80
    float minHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _maxHeight
    // Size: 0x4
    // Offset: 0x84
    float maxHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _heightRange
    // Size: 0x4
    // Offset: 0x88
    float heightRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _terrainSizeX
    // Size: 0x4
    // Offset: 0x8C
    float terrainSizeX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _terrainSizeY
    // Size: 0x4
    // Offset: 0x90
    float terrainSizeY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x94
    UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 _minBounds
    // Size: 0xC
    // Offset: 0xA0
    UnityEngine::Vector3 minBounds;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 _maxBounds
    // Size: 0xC
    // Offset: 0xAC
    UnityEngine::Vector3 maxBounds;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 _center
    // Size: 0xC
    // Offset: 0xB8
    UnityEngine::Vector3 center;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Padding between fields: center and: layerPath
    char __padding25[0x4] = {};
    // public System.String _layerPath
    // Size: 0x8
    // Offset: 0xC8
    ::Il2CppString* layerPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Boolean _hasLayerAttributes
    // Size: 0x1
    // Offset: 0xD0
    bool hasLayerAttributes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasLayerAttributes and: layerType
    char __padding27[0x3] = {};
    // public HoudiniEngineUnity.HFLayerType _layerType
    // Size: 0x4
    // Offset: 0xD4
    HoudiniEngineUnity::HFLayerType layerType;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HFLayerType) == 0x4);
    // Creating value type constructor for type: HEU_LoadBufferVolumeLayer
    HEU_LoadBufferVolumeLayer(::Il2CppString* layerName_ = {}, int partID_ = {}, int heightMapWidth_ = {}, int heightMapHeight_ = {}, float strength_ = {}, ::Il2CppString* diffuseTexturePath_ = {}, ::Il2CppString* maskTexturePath_ = {}, float metallic_ = {}, ::Il2CppString* normalTexturePath_ = {}, float normalScale_ = {}, float smoothness_ = {}, UnityEngine::Color specularColor_ = {}, UnityEngine::Vector2 tileSize_ = {}, UnityEngine::Vector2 tileOffset_ = {}, bool uiExpanded_ = {}, int tile_ = {}, ::Array<float>* normalizedHeights_ = {}, float minHeight_ = {}, float maxHeight_ = {}, float heightRange_ = {}, float terrainSizeX_ = {}, float terrainSizeY_ = {}, UnityEngine::Vector3 position_ = {}, UnityEngine::Vector3 minBounds_ = {}, UnityEngine::Vector3 maxBounds_ = {}, UnityEngine::Vector3 center_ = {}, ::Il2CppString* layerPath_ = {}, bool hasLayerAttributes_ = {}, HoudiniEngineUnity::HFLayerType layerType_ = {}) noexcept : layerName{layerName_}, partID{partID_}, heightMapWidth{heightMapWidth_}, heightMapHeight{heightMapHeight_}, strength{strength_}, diffuseTexturePath{diffuseTexturePath_}, maskTexturePath{maskTexturePath_}, metallic{metallic_}, normalTexturePath{normalTexturePath_}, normalScale{normalScale_}, smoothness{smoothness_}, specularColor{specularColor_}, tileSize{tileSize_}, tileOffset{tileOffset_}, uiExpanded{uiExpanded_}, tile{tile_}, normalizedHeights{normalizedHeights_}, minHeight{minHeight_}, maxHeight{maxHeight_}, heightRange{heightRange_}, terrainSizeX{terrainSizeX_}, terrainSizeY{terrainSizeY_}, position{position_}, minBounds{minBounds_}, maxBounds{maxBounds_}, center{center_}, layerPath{layerPath_}, hasLayerAttributes{hasLayerAttributes_}, layerType{layerType_} {}
    // Get instance field reference: public System.String _layerName
    ::Il2CppString*& dyn__layerName();
    // Get instance field reference: public System.Int32 _partID
    int& dyn__partID();
    // Get instance field reference: public System.Int32 _heightMapWidth
    int& dyn__heightMapWidth();
    // Get instance field reference: public System.Int32 _heightMapHeight
    int& dyn__heightMapHeight();
    // Get instance field reference: public System.Single _strength
    float& dyn__strength();
    // Get instance field reference: public System.String _diffuseTexturePath
    ::Il2CppString*& dyn__diffuseTexturePath();
    // Get instance field reference: public System.String _maskTexturePath
    ::Il2CppString*& dyn__maskTexturePath();
    // Get instance field reference: public System.Single _metallic
    float& dyn__metallic();
    // Get instance field reference: public System.String _normalTexturePath
    ::Il2CppString*& dyn__normalTexturePath();
    // Get instance field reference: public System.Single _normalScale
    float& dyn__normalScale();
    // Get instance field reference: public System.Single _smoothness
    float& dyn__smoothness();
    // Get instance field reference: public UnityEngine.Color _specularColor
    UnityEngine::Color& dyn__specularColor();
    // Get instance field reference: public UnityEngine.Vector2 _tileSize
    UnityEngine::Vector2& dyn__tileSize();
    // Get instance field reference: public UnityEngine.Vector2 _tileOffset
    UnityEngine::Vector2& dyn__tileOffset();
    // Get instance field reference: public System.Boolean _uiExpanded
    bool& dyn__uiExpanded();
    // Get instance field reference: public System.Int32 _tile
    int& dyn__tile();
    // Get instance field reference: public System.Single[] _normalizedHeights
    ::Array<float>*& dyn__normalizedHeights();
    // Get instance field reference: public System.Single _minHeight
    float& dyn__minHeight();
    // Get instance field reference: public System.Single _maxHeight
    float& dyn__maxHeight();
    // Get instance field reference: public System.Single _heightRange
    float& dyn__heightRange();
    // Get instance field reference: public System.Single _terrainSizeX
    float& dyn__terrainSizeX();
    // Get instance field reference: public System.Single _terrainSizeY
    float& dyn__terrainSizeY();
    // Get instance field reference: public UnityEngine.Vector3 _position
    UnityEngine::Vector3& dyn__position();
    // Get instance field reference: public UnityEngine.Vector3 _minBounds
    UnityEngine::Vector3& dyn__minBounds();
    // Get instance field reference: public UnityEngine.Vector3 _maxBounds
    UnityEngine::Vector3& dyn__maxBounds();
    // Get instance field reference: public UnityEngine.Vector3 _center
    UnityEngine::Vector3& dyn__center();
    // Get instance field reference: public System.String _layerPath
    ::Il2CppString*& dyn__layerPath();
    // Get instance field reference: public System.Boolean _hasLayerAttributes
    bool& dyn__hasLayerAttributes();
    // Get instance field reference: public HoudiniEngineUnity.HFLayerType _layerType
    HoudiniEngineUnity::HFLayerType& dyn__layerType();
    // public System.Void .ctor()
    // Offset: 0x152AF30
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_LoadBufferVolumeLayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_LoadBufferVolumeLayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_LoadBufferVolumeLayer*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_LoadBufferVolumeLayer
  #pragma pack(pop)
  static check_size<sizeof(HEU_LoadBufferVolumeLayer), 212 + sizeof(HoudiniEngineUnity::HFLayerType)> __HoudiniEngineUnity_HEU_LoadBufferVolumeLayerSizeCheck;
  static_assert(sizeof(HEU_LoadBufferVolumeLayer) == 0xD8);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_LoadBufferVolumeLayer*, "HoudiniEngineUnity", "HEU_LoadBufferVolumeLayer");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_LoadBufferVolumeLayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
