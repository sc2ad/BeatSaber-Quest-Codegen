// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_ToolsInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_ToolsInfo : public UnityEngine::ScriptableObject/*, public HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_ToolsInfo*>*/ {
    public:
    // Nested type: HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode
    struct PaintMergeMode;
    // Nested type: HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility
    struct PaintMeshVisibility;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct PaintMergeMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: PaintMergeMode
      constexpr PaintMergeMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode REPLACE
      static constexpr const int REPLACE = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode REPLACE
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode _get_REPLACE();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode REPLACE
      static void _set_REPLACE(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value);
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode ADD
      static constexpr const int ADD = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode ADD
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode _get_ADD();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode ADD
      static void _set_ADD(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value);
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode SUBTRACT
      static constexpr const int SUBTRACT = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode SUBTRACT
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode _get_SUBTRACT();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode SUBTRACT
      static void _set_SUBTRACT(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value);
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode MULTIPLY
      static constexpr const int MULTIPLY = 3;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode MULTIPLY
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode _get_MULTIPLY();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode MULTIPLY
      static void _set_MULTIPLY(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode
    #pragma pack(pop)
    static check_size<sizeof(HEU_ToolsInfo::PaintMergeMode), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_ToolsInfo_PaintMergeModeSizeCheck;
    static_assert(sizeof(HEU_ToolsInfo::PaintMergeMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility
    // [TokenAttribute] Offset: FFFFFFFF
    struct PaintMeshVisibility/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: PaintMeshVisibility
      constexpr PaintMeshVisibility(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility AUTO
      static constexpr const int AUTO = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility AUTO
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility _get_AUTO();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility AUTO
      static void _set_AUTO(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility value);
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility SHOW
      static constexpr const int SHOW = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility SHOW
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility _get_SHOW();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility SHOW
      static void _set_SHOW(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility value);
      // static field const value: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility HIDE
      static constexpr const int HIDE = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility HIDE
      static HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility _get_HIDE();
      // Set static field: static public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility HIDE
      static void _set_HIDE(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility
    #pragma pack(pop)
    static check_size<sizeof(HEU_ToolsInfo::PaintMeshVisibility), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_ToolsInfo_PaintMeshVisibilitySizeCheck;
    static_assert(sizeof(HEU_ToolsInfo::PaintMeshVisibility) == 0x4);
    // public System.Single _paintBrushSize
    // Size: 0x4
    // Offset: 0x18
    float paintBrushSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _paintBrushOpacity
    // Size: 0x4
    // Offset: 0x1C
    float paintBrushOpacity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32[] _paintIntValue
    // Size: 0x8
    // Offset: 0x20
    ::Array<int>* paintIntValue;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // public System.Single[] _paintFloatValue
    // Size: 0x8
    // Offset: 0x28
    ::Array<float>* paintFloatValue;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // public System.String[] _paintStringValue
    // Size: 0x8
    // Offset: 0x30
    ::Array<::Il2CppString*>* paintStringValue;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // public System.Int32 _lastAttributesGeoID
    // Size: 0x4
    // Offset: 0x38
    int lastAttributesGeoID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _lastAttributesPartID
    // Size: 0x4
    // Offset: 0x3C
    int lastAttributesPartID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.String _lastAttributeNodeName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* lastAttributeNodeName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String _lastAttributeName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* lastAttributeName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public UnityEngine.Color _brushHandleColor
    // Size: 0x10
    // Offset: 0x50
    UnityEngine::Color brushHandleColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public UnityEngine.Color _affectedAreaPaintColor
    // Size: 0x10
    // Offset: 0x60
    UnityEngine::Color affectedAreaPaintColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public System.Boolean _liveUpdate
    // Size: 0x1
    // Offset: 0x70
    bool liveUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean _isPainting
    // Size: 0x1
    // Offset: 0x71
    bool isPainting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPainting and: editPointBoxSize
    char __padding12[0x2] = {};
    // public System.Single _editPointBoxSize
    // Size: 0x4
    // Offset: 0x74
    float editPointBoxSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Color _editPointBoxUnselectedColor
    // Size: 0x10
    // Offset: 0x78
    UnityEngine::Color editPointBoxUnselectedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public UnityEngine.Color _editPointBoxSelectedColor
    // Size: 0x10
    // Offset: 0x88
    UnityEngine::Color editPointBoxSelectedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public System.Boolean _recacheRequired
    // Size: 0x1
    // Offset: 0x98
    bool recacheRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recacheRequired and: paintMergeMode
    char __padding16[0x3] = {};
    // public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode _paintMergeMode
    // Size: 0x4
    // Offset: 0x9C
    HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode paintMergeMode;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode) == 0x4);
    // public System.Boolean _showOnlyEditGeometry
    // Size: 0x1
    // Offset: 0xA0
    bool showOnlyEditGeometry;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean _alwaysCookUpstream
    // Size: 0x1
    // Offset: 0xA1
    bool alwaysCookUpstream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alwaysCookUpstream and: paintMeshVisiblity
    char __padding19[0x2] = {};
    // public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility _paintMeshVisiblity
    // Size: 0x4
    // Offset: 0xA4
    HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility paintMeshVisiblity;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility) == 0x4);
    // Creating value type constructor for type: HEU_ToolsInfo
    HEU_ToolsInfo(float paintBrushSize_ = {}, float paintBrushOpacity_ = {}, ::Array<int>* paintIntValue_ = {}, ::Array<float>* paintFloatValue_ = {}, ::Array<::Il2CppString*>* paintStringValue_ = {}, int lastAttributesGeoID_ = {}, int lastAttributesPartID_ = {}, ::Il2CppString* lastAttributeNodeName_ = {}, ::Il2CppString* lastAttributeName_ = {}, UnityEngine::Color brushHandleColor_ = {}, UnityEngine::Color affectedAreaPaintColor_ = {}, bool liveUpdate_ = {}, bool isPainting_ = {}, float editPointBoxSize_ = {}, UnityEngine::Color editPointBoxUnselectedColor_ = {}, UnityEngine::Color editPointBoxSelectedColor_ = {}, bool recacheRequired_ = {}, HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode paintMergeMode_ = {}, bool showOnlyEditGeometry_ = {}, bool alwaysCookUpstream_ = {}, HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility paintMeshVisiblity_ = {}) noexcept : paintBrushSize{paintBrushSize_}, paintBrushOpacity{paintBrushOpacity_}, paintIntValue{paintIntValue_}, paintFloatValue{paintFloatValue_}, paintStringValue{paintStringValue_}, lastAttributesGeoID{lastAttributesGeoID_}, lastAttributesPartID{lastAttributesPartID_}, lastAttributeNodeName{lastAttributeNodeName_}, lastAttributeName{lastAttributeName_}, brushHandleColor{brushHandleColor_}, affectedAreaPaintColor{affectedAreaPaintColor_}, liveUpdate{liveUpdate_}, isPainting{isPainting_}, editPointBoxSize{editPointBoxSize_}, editPointBoxUnselectedColor{editPointBoxUnselectedColor_}, editPointBoxSelectedColor{editPointBoxSelectedColor_}, recacheRequired{recacheRequired_}, paintMergeMode{paintMergeMode_}, showOnlyEditGeometry{showOnlyEditGeometry_}, alwaysCookUpstream{alwaysCookUpstream_}, paintMeshVisiblity{paintMeshVisiblity_} {}
    // Creating interface conversion operator: operator HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_ToolsInfo*>
    operator HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_ToolsInfo*>() noexcept {
      return *reinterpret_cast<HoudiniEngineUnity::IEquivable_1<HoudiniEngineUnity::HEU_ToolsInfo*>*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single _paintBrushSize
    float& dyn__paintBrushSize();
    // Get instance field reference: public System.Single _paintBrushOpacity
    float& dyn__paintBrushOpacity();
    // Get instance field reference: public System.Int32[] _paintIntValue
    ::Array<int>*& dyn__paintIntValue();
    // Get instance field reference: public System.Single[] _paintFloatValue
    ::Array<float>*& dyn__paintFloatValue();
    // Get instance field reference: public System.String[] _paintStringValue
    ::Array<::Il2CppString*>*& dyn__paintStringValue();
    // Get instance field reference: public System.Int32 _lastAttributesGeoID
    int& dyn__lastAttributesGeoID();
    // Get instance field reference: public System.Int32 _lastAttributesPartID
    int& dyn__lastAttributesPartID();
    // Get instance field reference: public System.String _lastAttributeNodeName
    ::Il2CppString*& dyn__lastAttributeNodeName();
    // Get instance field reference: public System.String _lastAttributeName
    ::Il2CppString*& dyn__lastAttributeName();
    // Get instance field reference: public UnityEngine.Color _brushHandleColor
    UnityEngine::Color& dyn__brushHandleColor();
    // Get instance field reference: public UnityEngine.Color _affectedAreaPaintColor
    UnityEngine::Color& dyn__affectedAreaPaintColor();
    // Get instance field reference: public System.Boolean _liveUpdate
    bool& dyn__liveUpdate();
    // Get instance field reference: public System.Boolean _isPainting
    bool& dyn__isPainting();
    // Get instance field reference: public System.Single _editPointBoxSize
    float& dyn__editPointBoxSize();
    // Get instance field reference: public UnityEngine.Color _editPointBoxUnselectedColor
    UnityEngine::Color& dyn__editPointBoxUnselectedColor();
    // Get instance field reference: public UnityEngine.Color _editPointBoxSelectedColor
    UnityEngine::Color& dyn__editPointBoxSelectedColor();
    // Get instance field reference: public System.Boolean _recacheRequired
    bool& dyn__recacheRequired();
    // Get instance field reference: public HoudiniEngineUnity.HEU_ToolsInfo/PaintMergeMode _paintMergeMode
    HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode& dyn__paintMergeMode();
    // Get instance field reference: public System.Boolean _showOnlyEditGeometry
    bool& dyn__showOnlyEditGeometry();
    // Get instance field reference: public System.Boolean _alwaysCookUpstream
    bool& dyn__alwaysCookUpstream();
    // Get instance field reference: public HoudiniEngineUnity.HEU_ToolsInfo/PaintMeshVisibility _paintMeshVisiblity
    HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility& dyn__paintMeshVisiblity();
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_ToolsInfo other)
    // Offset: 0x16FAF54
    bool IsEquivalentTo(HoudiniEngineUnity::HEU_ToolsInfo* other);
    // public System.Void .ctor()
    // Offset: 0x16FB438
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_ToolsInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ToolsInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_ToolsInfo*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_ToolsInfo
  #pragma pack(pop)
  static check_size<sizeof(HEU_ToolsInfo), 164 + sizeof(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility)> __HoudiniEngineUnity_HEU_ToolsInfoSizeCheck;
  static_assert(sizeof(HEU_ToolsInfo) == 0xA8);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ToolsInfo*, "HoudiniEngineUnity", "HEU_ToolsInfo");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ToolsInfo::PaintMergeMode, "HoudiniEngineUnity", "HEU_ToolsInfo/PaintMergeMode");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ToolsInfo::PaintMeshVisibility, "HoudiniEngineUnity", "HEU_ToolsInfo/PaintMeshVisibility");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ToolsInfo::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ToolsInfo::*)(HoudiniEngineUnity::HEU_ToolsInfo*)>(&HoudiniEngineUnity::HEU_ToolsInfo::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ToolsInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ToolsInfo*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ToolsInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
