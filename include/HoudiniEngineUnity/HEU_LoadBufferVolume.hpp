// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HEU_LoadBufferBase
#include "HoudiniEngineUnity/HEU_LoadBufferBase.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_LoadBufferVolumeLayer
  class HEU_LoadBufferVolumeLayer;
  // Forward declaring type: HEU_VolumeScatterTrees
  class HEU_VolumeScatterTrees;
  // Forward declaring type: HEU_DetailPrototype
  class HEU_DetailPrototype;
  // Forward declaring type: HEU_DetailProperties
  class HEU_DetailProperties;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_LoadBufferVolume
  class HEU_LoadBufferVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_LoadBufferVolume);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_LoadBufferVolume*, "HoudiniEngineUnity", "HEU_LoadBufferVolume");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_LoadBufferVolume
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_LoadBufferVolume : public ::HoudiniEngineUnity::HEU_LoadBufferBase {
    public:
    public:
    // public System.Int32 _tileIndex
    // Size: 0x4
    // Offset: 0x30
    int tileIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: tileIndex and: splatLayers
    char __padding0[0x4] = {};
    // public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_LoadBufferVolumeLayer> _splatLayers
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_LoadBufferVolumeLayer*>* splatLayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_LoadBufferVolumeLayer*>*) == 0x8);
    // public System.Int32 _heightMapWidth
    // Size: 0x4
    // Offset: 0x40
    int heightMapWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _heightMapHeight
    // Size: 0x4
    // Offset: 0x44
    int heightMapHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single[,] _heightMap
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> heightMap;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single[,,] _splatMaps
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<float> splatMaps;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.Single _terrainSizeX
    // Size: 0x4
    // Offset: 0x58
    float terrainSizeX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _terrainSizeY
    // Size: 0x4
    // Offset: 0x5C
    float terrainSizeY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _heightRange
    // Size: 0x4
    // Offset: 0x60
    float heightRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.String _terrainDataPath
    // Size: 0x8
    // Offset: 0x70
    ::StringW terrainDataPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _terrainDataExportPath
    // Size: 0x8
    // Offset: 0x78
    ::StringW terrainDataExportPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public HoudiniEngineUnity.HEU_VolumeScatterTrees _scatterTrees
    // Size: 0x8
    // Offset: 0x80
    ::HoudiniEngineUnity::HEU_VolumeScatterTrees* scatterTrees;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_VolumeScatterTrees*) == 0x8);
    // public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_DetailPrototype> _detailPrototypes
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_DetailPrototype*>* detailPrototypes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_DetailPrototype*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32[,]> _detailMaps
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<::ArrayW<int>>* detailMaps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::ArrayW<int>>*) == 0x8);
    // public HoudiniEngineUnity.HEU_DetailProperties _detailProperties
    // Size: 0x8
    // Offset: 0x98
    ::HoudiniEngineUnity::HEU_DetailProperties* detailProperties;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_DetailProperties*) == 0x8);
    // public System.String _specifiedTerrainMaterialName
    // Size: 0x8
    // Offset: 0xA0
    ::StringW specifiedTerrainMaterialName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Int32 _tileIndex
    [[deprecated("Use field access instead!")]] int& dyn__tileIndex();
    // Get instance field reference: public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_LoadBufferVolumeLayer> _splatLayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_LoadBufferVolumeLayer*>*& dyn__splatLayers();
    // Get instance field reference: public System.Int32 _heightMapWidth
    [[deprecated("Use field access instead!")]] int& dyn__heightMapWidth();
    // Get instance field reference: public System.Int32 _heightMapHeight
    [[deprecated("Use field access instead!")]] int& dyn__heightMapHeight();
    // Get instance field reference: public System.Single[,] _heightMap
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__heightMap();
    // Get instance field reference: public System.Single[,,] _splatMaps
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__splatMaps();
    // Get instance field reference: public System.Single _terrainSizeX
    [[deprecated("Use field access instead!")]] float& dyn__terrainSizeX();
    // Get instance field reference: public System.Single _terrainSizeY
    [[deprecated("Use field access instead!")]] float& dyn__terrainSizeY();
    // Get instance field reference: public System.Single _heightRange
    [[deprecated("Use field access instead!")]] float& dyn__heightRange();
    // Get instance field reference: public UnityEngine.Vector3 _position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__position();
    // Get instance field reference: public System.String _terrainDataPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__terrainDataPath();
    // Get instance field reference: public System.String _terrainDataExportPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn__terrainDataExportPath();
    // Get instance field reference: public HoudiniEngineUnity.HEU_VolumeScatterTrees _scatterTrees
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_VolumeScatterTrees*& dyn__scatterTrees();
    // Get instance field reference: public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_DetailPrototype> _detailPrototypes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::HoudiniEngineUnity::HEU_DetailPrototype*>*& dyn__detailPrototypes();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32[,]> _detailMaps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::ArrayW<int>>*& dyn__detailMaps();
    // Get instance field reference: public HoudiniEngineUnity.HEU_DetailProperties _detailProperties
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_DetailProperties*& dyn__detailProperties();
    // Get instance field reference: public System.String _specifiedTerrainMaterialName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__specifiedTerrainMaterialName();
    // public System.Void .ctor()
    // Offset: 0x189A920
    // Implemented from: HoudiniEngineUnity.HEU_LoadBufferBase
    // Base method: System.Void HEU_LoadBufferBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_LoadBufferVolume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_LoadBufferVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_LoadBufferVolume*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_LoadBufferVolume
  #pragma pack(pop)
  static check_size<sizeof(HEU_LoadBufferVolume), 160 + sizeof(::StringW)> __HoudiniEngineUnity_HEU_LoadBufferVolumeSizeCheck;
  static_assert(sizeof(HEU_LoadBufferVolume) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_LoadBufferVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
