// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HEU_ThreadedTask
#include "HoudiniEngineUnity/HEU_ThreadedTask.hpp"
// Including type: HoudiniEngineUnity.HEU_GenerateOptions
#include "HoudiniEngineUnity/HEU_GenerateOptions.hpp"
// Including type: HoudiniEngineUnity.HAPI_PartInfo
#include "HoudiniEngineUnity/HAPI_PartInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Skipping declaration: LoadType because it is already included!
  // Forward declaring type: HEU_LoadBufferVolume
  class HEU_LoadBufferVolume;
  // Forward declaring type: HEU_BaseSync
  class HEU_BaseSync;
  // Forward declaring type: HEU_SessionBase
  class HEU_SessionBase;
  // Forward declaring type: HAPI_ObjectInfo
  struct HAPI_ObjectInfo;
  // Forward declaring type: HEU_LoadBufferMesh
  class HEU_LoadBufferMesh;
  // Forward declaring type: HEU_LoadBufferInstancer
  class HEU_LoadBufferInstancer;
  // Forward declaring type: HEU_LoadBufferBase
  class HEU_LoadBufferBase;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_ThreadedTaskLoadGeo : public HoudiniEngineUnity::HEU_ThreadedTask {
    public:
    // Nested type: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType
    struct LoadType;
    // Nested type: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData
    class HEU_LoadData;
    // Nested type: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject
    class HEU_LoadObject;
    // Nested type: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallbackType
    struct HEU_LoadCallbackType;
    // Nested type: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback
    class HEU_LoadCallback;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType
    // [TokenAttribute] Offset: FFFFFFFF
    struct LoadType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: LoadType
      constexpr LoadType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType FILE
      static constexpr const int FILE = 0;
      // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType FILE
      static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType _get_FILE();
      // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType FILE
      static void _set_FILE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType NODE
      static constexpr const int NODE = 1;
      // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType NODE
      static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType _get_NODE();
      // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType NODE
      static void _set_NODE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType value);
      // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType ASSET
      static constexpr const int ASSET = 2;
      // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType ASSET
      static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType _get_ASSET();
      // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType ASSET
      static void _set_ASSET(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType
    #pragma pack(pop)
    static check_size<sizeof(HEU_ThreadedTaskLoadGeo::LoadType), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_ThreadedTaskLoadGeo_LoadTypeSizeCheck;
    static_assert(sizeof(HEU_ThreadedTaskLoadGeo::LoadType) == 0x4);
    // Size: 0x38
    #pragma pack(push, 1)
    // Autogenerated type: HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData
    // [TokenAttribute] Offset: FFFFFFFF
    class HEU_LoadData : public ::Il2CppObject {
      public:
      // Nested type: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus
      struct LoadStatus;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus
      // [TokenAttribute] Offset: FFFFFFFF
      struct LoadStatus/*, public System::Enum*/ {
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // Creating value type constructor for type: LoadStatus
        constexpr LoadStatus(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator System::Enum
        operator System::Enum() noexcept {
          return *reinterpret_cast<System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus NONE
        static constexpr const int NONE = 0;
        // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus NONE
        static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus _get_NONE();
        // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus NONE
        static void _set_NONE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus value);
        // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus STARTED
        static constexpr const int STARTED = 1;
        // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus STARTED
        static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus _get_STARTED();
        // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus STARTED
        static void _set_STARTED(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus value);
        // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus SUCCESS
        static constexpr const int SUCCESS = 2;
        // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus SUCCESS
        static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus _get_SUCCESS();
        // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus SUCCESS
        static void _set_SUCCESS(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus value);
        // static field const value: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus ERROR
        static constexpr const int ERROR = 3;
        // Get static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus ERROR
        static HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus _get_ERROR();
        // Set static field: static public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus ERROR
        static void _set_ERROR(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus value);
        // Get instance field reference: public System.Int32 value__
        int& dyn_value__();
      }; // HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus
      #pragma pack(pop)
      static check_size<sizeof(HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus), 0 + sizeof(int)> __HoudiniEngineUnity_HEU_ThreadedTaskLoadGeo_HEU_LoadData_LoadStatusSizeCheck;
      static_assert(sizeof(HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus) == 0x4);
      // public System.Int32 _cookNodeID
      // Size: 0x4
      // Offset: 0x10
      int cookNodeID;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus _loadStatus
      // Size: 0x4
      // Offset: 0x14
      HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus loadStatus;
      // Field size check
      static_assert(sizeof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus) == 0x4);
      // public System.Text.StringBuilder _logStr
      // Size: 0x8
      // Offset: 0x18
      System::Text::StringBuilder* logStr;
      // Field size check
      static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
      // public HoudiniEngineUnity.HEU_SessionBase _session
      // Size: 0x8
      // Offset: 0x20
      HoudiniEngineUnity::HEU_SessionBase* session;
      // Field size check
      static_assert(sizeof(HoudiniEngineUnity::HEU_SessionBase*) == 0x8);
      // public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadObject> _loadedObjects
      // Size: 0x8
      // Offset: 0x28
      System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject*>* loadedObjects;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject*>*) == 0x8);
      // public System.Collections.Generic.Dictionary`2<System.Int32,HoudiniEngineUnity.HEU_LoadBufferBase> _idBuffersMap
      // Size: 0x8
      // Offset: 0x30
      System::Collections::Generic::Dictionary_2<int, HoudiniEngineUnity::HEU_LoadBufferBase*>* idBuffersMap;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, HoudiniEngineUnity::HEU_LoadBufferBase*>*) == 0x8);
      // Creating value type constructor for type: HEU_LoadData
      HEU_LoadData(int cookNodeID_ = {}, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus loadStatus_ = {}, System::Text::StringBuilder* logStr_ = {}, HoudiniEngineUnity::HEU_SessionBase* session_ = {}, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject*>* loadedObjects_ = {}, System::Collections::Generic::Dictionary_2<int, HoudiniEngineUnity::HEU_LoadBufferBase*>* idBuffersMap_ = {}) noexcept : cookNodeID{cookNodeID_}, loadStatus{loadStatus_}, logStr{logStr_}, session{session_}, loadedObjects{loadedObjects_}, idBuffersMap{idBuffersMap_} {}
      // Get instance field reference: public System.Int32 _cookNodeID
      int& dyn__cookNodeID();
      // Get instance field reference: public HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus _loadStatus
      HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus& dyn__loadStatus();
      // Get instance field reference: public System.Text.StringBuilder _logStr
      System::Text::StringBuilder*& dyn__logStr();
      // Get instance field reference: public HoudiniEngineUnity.HEU_SessionBase _session
      HoudiniEngineUnity::HEU_SessionBase*& dyn__session();
      // Get instance field reference: public System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadObject> _loadedObjects
      System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject*>*& dyn__loadedObjects();
      // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,HoudiniEngineUnity.HEU_LoadBufferBase> _idBuffersMap
      System::Collections::Generic::Dictionary_2<int, HoudiniEngineUnity::HEU_LoadBufferBase*>*& dyn__idBuffersMap();
      // public System.Void .ctor()
      // Offset: 0x16F6704
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static HEU_ThreadedTaskLoadGeo::HEU_LoadData* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<HEU_ThreadedTaskLoadGeo::HEU_LoadData*, creationType>()));
      }
    }; // HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData
    #pragma pack(pop)
    static check_size<sizeof(HEU_ThreadedTaskLoadGeo::HEU_LoadData), 48 + sizeof(System::Collections::Generic::Dictionary_2<int, HoudiniEngineUnity::HEU_LoadBufferBase*>*)> __HoudiniEngineUnity_HEU_ThreadedTaskLoadGeo_HEU_LoadDataSizeCheck;
    static_assert(sizeof(HEU_ThreadedTaskLoadGeo::HEU_LoadData) == 0x38);
    // private HoudiniEngineUnity.HEU_BaseSync _ownerSync
    // Size: 0x8
    // Offset: 0x38
    HoudiniEngineUnity::HEU_BaseSync* ownerSync;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_BaseSync*) == 0x8);
    // private HoudiniEngineUnity.HEU_SessionBase _session
    // Size: 0x8
    // Offset: 0x40
    HoudiniEngineUnity::HEU_SessionBase* session;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_SessionBase*) == 0x8);
    // private HoudiniEngineUnity.HEU_GenerateOptions _generateOptions
    // Size: 0x5
    // Offset: 0x48
    HoudiniEngineUnity::HEU_GenerateOptions generateOptions;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_GenerateOptions) == 0x5);
    // Padding between fields: generateOptions and: loadType
    char __padding2[0x3] = {};
    // private HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType _loadType
    // Size: 0x4
    // Offset: 0x50
    HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType loadType;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType) == 0x4);
    // Padding between fields: loadType and: filePath
    char __padding3[0x4] = {};
    // private System.String _filePath
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* filePath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData _loadData
    // Size: 0x8
    // Offset: 0x60
    HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData* loadData;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData*) == 0x8);
    // private HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadCallback _loadCallback
    // Size: 0x8
    // Offset: 0x68
    HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback* loadCallback;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback*) == 0x8);
    // Creating value type constructor for type: HEU_ThreadedTaskLoadGeo
    HEU_ThreadedTaskLoadGeo(HoudiniEngineUnity::HEU_BaseSync* ownerSync_ = {}, HoudiniEngineUnity::HEU_SessionBase* session_ = {}, HoudiniEngineUnity::HEU_GenerateOptions generateOptions_ = {}, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType loadType_ = {}, ::Il2CppString* filePath_ = {}, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData* loadData_ = {}, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback* loadCallback_ = {}) noexcept : ownerSync{ownerSync_}, session{session_}, generateOptions{generateOptions_}, loadType{loadType_}, filePath{filePath_}, loadData{loadData_}, loadCallback{loadCallback_} {}
    // Get instance field reference: private HoudiniEngineUnity.HEU_BaseSync _ownerSync
    HoudiniEngineUnity::HEU_BaseSync*& dyn__ownerSync();
    // Get instance field reference: private HoudiniEngineUnity.HEU_SessionBase _session
    HoudiniEngineUnity::HEU_SessionBase*& dyn__session();
    // Get instance field reference: private HoudiniEngineUnity.HEU_GenerateOptions _generateOptions
    HoudiniEngineUnity::HEU_GenerateOptions& dyn__generateOptions();
    // Get instance field reference: private HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType _loadType
    HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType& dyn__loadType();
    // Get instance field reference: private System.String _filePath
    ::Il2CppString*& dyn__filePath();
    // Get instance field reference: private HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData _loadData
    HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData*& dyn__loadData();
    // Get instance field reference: private HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadCallback _loadCallback
    HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback*& dyn__loadCallback();
    // public System.Void SetupLoad(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_BaseSync ownerSync, HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/LoadType loadType, System.Int32 cookNodeID, System.String name, System.String filePath)
    // Offset: 0x16F6610
    void SetupLoad(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_BaseSync* ownerSync, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType loadType, int cookNodeID, ::Il2CppString* name, ::Il2CppString* filePath);
    // public System.Void SetupLoadNode(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_BaseSync ownerSync, System.Int32 cookNodeID, System.String name)
    // Offset: 0x16F670C
    void SetupLoadNode(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_BaseSync* ownerSync, int cookNodeID, ::Il2CppString* name);
    // public System.Void SetupLoadFile(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_BaseSync ownerSync, System.Int32 cookNodeID, System.String filePath)
    // Offset: 0x16F6720
    void SetupLoadFile(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_BaseSync* ownerSync, int cookNodeID, ::Il2CppString* filePath);
    // public System.Void SetupLoadAsset(HoudiniEngineUnity.HEU_SessionBase session, HoudiniEngineUnity.HEU_BaseSync ownerSync, System.String assetPath, System.String name)
    // Offset: 0x16F6734
    void SetupLoadAsset(HoudiniEngineUnity::HEU_SessionBase* session, HoudiniEngineUnity::HEU_BaseSync* ownerSync, ::Il2CppString* assetPath, ::Il2CppString* name);
    // public System.Void SetLoadCallback(HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadCallback loadCallback)
    // Offset: 0x16F6748
    void SetLoadCallback(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback* loadCallback);
    // protected System.Boolean CookNode(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 cookNodeID)
    // Offset: 0x16F6F64
    bool CookNode(HoudiniEngineUnity::HEU_SessionBase* session, int cookNodeID);
    // protected System.Boolean LoadObjectBuffers(HoudiniEngineUnity.HEU_SessionBase session, ref HoudiniEngineUnity.HAPI_ObjectInfo objectInfo)
    // Offset: 0x16F713C
    bool LoadObjectBuffers(HoudiniEngineUnity::HEU_SessionBase* session, ByRef<HoudiniEngineUnity::HAPI_ObjectInfo> objectInfo);
    // protected System.Boolean LoadNodeBuffer(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadObject loadObject)
    // Offset: 0x16F72BC
    bool LoadNodeBuffer(HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject* loadObject);
    // protected System.Void BuildBufferIDsMap(HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData loadData)
    // Offset: 0x16F937C
    void BuildBufferIDsMap(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData* loadData);
    // public System.Boolean DoFileLoad()
    // Offset: 0x16F9790
    bool DoFileLoad();
    // public System.Boolean DoAssetLoad()
    // Offset: 0x16F9C14
    bool DoAssetLoad();
    // private System.Boolean QueryParts(System.Int32 nodeID, ref System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> meshParts, ref System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> volumeParts, ref System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> instancerParts, ref System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> curveParts, ref System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> scatterInstancerParts)
    // Offset: 0x16F759C
    bool QueryParts(int nodeID, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*> meshParts, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*> volumeParts, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*> instancerParts, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*> curveParts, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*> scatterInstancerParts);
    // private System.String CreateLogString(HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus status, System.String logStr)
    // Offset: 0x16FA0B8
    ::Il2CppString* CreateLogString(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus status, ::Il2CppString* logStr);
    // private System.Void AppendLog(HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus status, System.String logStr)
    // Offset: 0x16F6A64
    void AppendLog(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus status, ::Il2CppString* logStr);
    // private System.Void SetLog(HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus status, System.String logStr)
    // Offset: 0x16FA168
    void SetLog(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus status, ::Il2CppString* logStr);
    // private System.Boolean CreateFileNode(out System.Int32 fileNodeID)
    // Offset: 0x16F9A64
    bool CreateFileNode(ByRef<int> fileNodeID);
    // public System.Int32 GetCookNodeID()
    // Offset: 0x16FA288
    int GetCookNodeID();
    // private System.Int32 GetDisplayNodeID(System.Int32 objNodeID)
    // Offset: 0x16F9AF4
    int GetDisplayNodeID(int objNodeID);
    // private System.Boolean SetFileParm(System.Int32 fileNodeID, System.String filePath)
    // Offset: 0x16F9B4C
    bool SetFileParm(int fileNodeID, ::Il2CppString* filePath);
    // private System.Void Sleep()
    // Offset: 0x16F7130
    void Sleep();
    // public System.Boolean GenerateTerrainBuffers(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> volumeParts, System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> scatterInstancerParts, out System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_LoadBufferVolume> volumeBuffers)
    // Offset: 0x16F7D24
    bool GenerateTerrainBuffers(HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>* volumeParts, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>* scatterInstancerParts, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferVolume*>*> volumeBuffers);
    // private System.Void LoadStringFromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref System.String strValue)
    // Offset: 0x16FA2A4
    void LoadStringFromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::Il2CppString* attrName, ByRef<::Il2CppString*> strValue);
    // private System.Void LoadFloatFromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref System.Single floatValue)
    // Offset: 0x16FA338
    void LoadFloatFromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::Il2CppString* attrName, ByRef<float> floatValue);
    // private System.Void LoadLayerColorFromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref UnityEngine.Color colorValue)
    // Offset: 0x16FA458
    void LoadLayerColorFromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::Il2CppString* attrName, ByRef<UnityEngine::Color> colorValue);
    // private System.Void LoadLayerVector2FromAttribute(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String attrName, ref UnityEngine.Vector2 vectorValue)
    // Offset: 0x16FA61C
    void LoadLayerVector2FromAttribute(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::Il2CppString* attrName, ByRef<UnityEngine::Vector2> vectorValue);
    // public System.Boolean GenerateMeshBuffers(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> meshParts, System.Boolean bSplitPoints, System.Boolean bUseLODGroups, System.Boolean bGenerateUVs, System.Boolean bGenerateTangents, System.Boolean bGenerateNormals, out System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_LoadBufferMesh> meshBuffers)
    // Offset: 0x16F7920
    bool GenerateMeshBuffers(HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>* meshParts, bool bSplitPoints, bool bUseLODGroups, bool bGenerateUVs, bool bGenerateTangents, bool bGenerateNormals, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferMesh*>*> meshBuffers);
    // public System.Boolean GenerateInstancerBuffers(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 nodeID, System.Collections.Generic.List`1<HoudiniEngineUnity.HAPI_PartInfo> instancerParts, out System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_LoadBufferInstancer> instancerBuffers)
    // Offset: 0x16F905C
    bool GenerateInstancerBuffers(HoudiniEngineUnity::HEU_SessionBase* session, int nodeID, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>* instancerParts, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferInstancer*>*> instancerBuffers);
    // private HoudiniEngineUnity.HEU_LoadBufferInstancer GeneratePartsInstancerBuffer(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String partName, HoudiniEngineUnity.HAPI_PartInfo partInfo)
    // Offset: 0x16FA898
    HoudiniEngineUnity::HEU_LoadBufferInstancer* GeneratePartsInstancerBuffer(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::Il2CppString* partName, HoudiniEngineUnity::HAPI_PartInfo partInfo);
    // private HoudiniEngineUnity.HEU_LoadBufferInstancer GeneratePointAttributeInstancerBuffer(HoudiniEngineUnity.HEU_SessionBase session, System.Int32 geoID, System.Int32 partID, System.String partName, HoudiniEngineUnity.HAPI_PartInfo partInfo)
    // Offset: 0x16FAB10
    HoudiniEngineUnity::HEU_LoadBufferInstancer* GeneratePointAttributeInstancerBuffer(HoudiniEngineUnity::HEU_SessionBase* session, int geoID, int partID, ::Il2CppString* partName, HoudiniEngineUnity::HAPI_PartInfo partInfo);
    // static public HoudiniEngineUnity.HEU_LoadBufferVolume GetLoadBufferVolumeFromTileIndex(System.Int32 tileIndex, System.Collections.Generic.List`1<HoudiniEngineUnity.HEU_LoadBufferVolume> buffers)
    // Offset: 0x16FA784
    static HoudiniEngineUnity::HEU_LoadBufferVolume* GetLoadBufferVolumeFromTileIndex(int tileIndex, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferVolume*>* buffers);
    // protected override System.Void DoWork()
    // Offset: 0x16F6750
    // Implemented from: HoudiniEngineUnity.HEU_ThreadedTask
    // Base method: System.Void HEU_ThreadedTask::DoWork()
    void DoWork();
    // protected override System.Void OnComplete()
    // Offset: 0x16F9F74
    // Implemented from: HoudiniEngineUnity.HEU_ThreadedTask
    // Base method: System.Void HEU_ThreadedTask::OnComplete()
    void OnComplete();
    // protected override System.Void OnStopped()
    // Offset: 0x16FA014
    // Implemented from: HoudiniEngineUnity.HEU_ThreadedTask
    // Base method: System.Void HEU_ThreadedTask::OnStopped()
    void OnStopped();
    // protected override System.Void CleanUp()
    // Offset: 0x16FA0AC
    // Implemented from: HoudiniEngineUnity.HEU_ThreadedTask
    // Base method: System.Void HEU_ThreadedTask::CleanUp()
    void CleanUp();
    // public System.Void .ctor()
    // Offset: 0x16FAE90
    // Implemented from: HoudiniEngineUnity.HEU_ThreadedTask
    // Base method: System.Void HEU_ThreadedTask::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_ThreadedTaskLoadGeo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_ThreadedTaskLoadGeo*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_ThreadedTaskLoadGeo
  #pragma pack(pop)
  static check_size<sizeof(HEU_ThreadedTaskLoadGeo), 104 + sizeof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback*)> __HoudiniEngineUnity_HEU_ThreadedTaskLoadGeoSizeCheck;
  static_assert(sizeof(HEU_ThreadedTaskLoadGeo) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*, "HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType, "HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/LoadType");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData*, "HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadData");
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus, "HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoad
// Il2CppName: SetupLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, HoudiniEngineUnity::HEU_BaseSync*, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadType, int, ::Il2CppString*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoad)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* ownerSync = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_BaseSync")->byval_arg;
    static auto* loadType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/LoadType")->byval_arg;
    static auto* cookNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetupLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, ownerSync, loadType, cookNodeID, name, filePath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoadNode
// Il2CppName: SetupLoadNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, HoudiniEngineUnity::HEU_BaseSync*, int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoadNode)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* ownerSync = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_BaseSync")->byval_arg;
    static auto* cookNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetupLoadNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, ownerSync, cookNodeID, name});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoadFile
// Il2CppName: SetupLoadFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, HoudiniEngineUnity::HEU_BaseSync*, int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoadFile)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* ownerSync = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_BaseSync")->byval_arg;
    static auto* cookNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetupLoadFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, ownerSync, cookNodeID, filePath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoadAsset
// Il2CppName: SetupLoadAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, HoudiniEngineUnity::HEU_BaseSync*, ::Il2CppString*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetupLoadAsset)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* ownerSync = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_BaseSync")->byval_arg;
    static auto* assetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetupLoadAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, ownerSync, assetPath, name});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetLoadCallback
// Il2CppName: SetLoadCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadCallback*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetLoadCallback)> {
  static const MethodInfo* get() {
    static auto* loadCallback = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadCallback")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetLoadCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loadCallback});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CookNode
// Il2CppName: CookNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CookNode)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* cookNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "CookNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, cookNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadObjectBuffers
// Il2CppName: LoadObjectBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, ByRef<HoudiniEngineUnity::HAPI_ObjectInfo>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadObjectBuffers)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* objectInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ObjectInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "LoadObjectBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, objectInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadNodeBuffer
// Il2CppName: LoadNodeBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadObject*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadNodeBuffer)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* loadObject = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "LoadNodeBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, loadObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::BuildBufferIDsMap
// Il2CppName: BuildBufferIDsMap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::BuildBufferIDsMap)> {
  static const MethodInfo* get() {
    static auto* loadData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "BuildBufferIDsMap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{loadData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::DoFileLoad
// Il2CppName: DoFileLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::DoFileLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "DoFileLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::DoAssetLoad
// Il2CppName: DoAssetLoad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::DoAssetLoad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "DoAssetLoad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::QueryParts
// Il2CppName: QueryParts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(int, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*>, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*>, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*>, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*>, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::QueryParts)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->this_arg;
    static auto* volumeParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->this_arg;
    static auto* instancerParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->this_arg;
    static auto* curveParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->this_arg;
    static auto* scatterInstancerParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "QueryParts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, meshParts, volumeParts, instancerParts, curveParts, scatterInstancerParts});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CreateLogString
// Il2CppName: CreateLogString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CreateLogString)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus")->byval_arg;
    static auto* logStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "CreateLogString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, logStr});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::AppendLog
// Il2CppName: AppendLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::AppendLog)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus")->byval_arg;
    static auto* logStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "AppendLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, logStr});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetLog
// Il2CppName: SetLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::HEU_LoadData::LoadStatus, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetLog)> {
  static const MethodInfo* get() {
    static auto* status = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ThreadedTaskLoadGeo/HEU_LoadData/LoadStatus")->byval_arg;
    static auto* logStr = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{status, logStr});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CreateFileNode
// Il2CppName: CreateFileNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(ByRef<int>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CreateFileNode)> {
  static const MethodInfo* get() {
    static auto* fileNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "CreateFileNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GetCookNodeID
// Il2CppName: GetCookNodeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GetCookNodeID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GetCookNodeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GetDisplayNodeID
// Il2CppName: GetDisplayNodeID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(int)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GetDisplayNodeID)> {
  static const MethodInfo* get() {
    static auto* objNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GetDisplayNodeID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetFileParm
// Il2CppName: SetFileParm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::SetFileParm)> {
  static const MethodInfo* get() {
    static auto* fileNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* filePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "SetFileParm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileNodeID, filePath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::Sleep
// Il2CppName: Sleep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::Sleep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "Sleep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GenerateTerrainBuffers
// Il2CppName: GenerateTerrainBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferVolume*>*>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GenerateTerrainBuffers)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volumeParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->byval_arg;
    static auto* scatterInstancerParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->byval_arg;
    static auto* volumeBuffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_LoadBufferVolume")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GenerateTerrainBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, volumeParts, scatterInstancerParts, volumeBuffers});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadStringFromAttribute
// Il2CppName: LoadStringFromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, int, ::Il2CppString*, ByRef<::Il2CppString*>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadStringFromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* strValue = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "LoadStringFromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, strValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadFloatFromAttribute
// Il2CppName: LoadFloatFromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, int, ::Il2CppString*, ByRef<float>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadFloatFromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* floatValue = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "LoadFloatFromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, floatValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadLayerColorFromAttribute
// Il2CppName: LoadLayerColorFromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, int, ::Il2CppString*, ByRef<UnityEngine::Color>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadLayerColorFromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* colorValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "LoadLayerColorFromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, colorValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadLayerVector2FromAttribute
// Il2CppName: LoadLayerVector2FromAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, int, ::Il2CppString*, ByRef<UnityEngine::Vector2>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::LoadLayerVector2FromAttribute)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* attrName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* vectorValue = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "LoadLayerVector2FromAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, attrName, vectorValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GenerateMeshBuffers
// Il2CppName: GenerateMeshBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*, bool, bool, bool, bool, bool, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferMesh*>*>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GenerateMeshBuffers)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* meshParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->byval_arg;
    static auto* bSplitPoints = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bUseLODGroups = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bGenerateUVs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bGenerateTangents = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bGenerateNormals = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* meshBuffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_LoadBufferMesh")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GenerateMeshBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, meshParts, bSplitPoints, bUseLODGroups, bGenerateUVs, bGenerateTangents, bGenerateNormals, meshBuffers});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GenerateInstancerBuffers
// Il2CppName: GenerateInstancerBuffers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, System::Collections::Generic::List_1<HoudiniEngineUnity::HAPI_PartInfo>*, ByRef<System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferInstancer*>*>)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GenerateInstancerBuffers)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instancerParts = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")})->byval_arg;
    static auto* instancerBuffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_LoadBufferInstancer")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GenerateInstancerBuffers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, nodeID, instancerParts, instancerBuffers});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GeneratePartsInstancerBuffer
// Il2CppName: GeneratePartsInstancerBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_LoadBufferInstancer* (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, int, ::Il2CppString*, HoudiniEngineUnity::HAPI_PartInfo)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GeneratePartsInstancerBuffer)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* partInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GeneratePartsInstancerBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, partName, partInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GeneratePointAttributeInstancerBuffer
// Il2CppName: GeneratePointAttributeInstancerBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_LoadBufferInstancer* (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)(HoudiniEngineUnity::HEU_SessionBase*, int, int, ::Il2CppString*, HoudiniEngineUnity::HAPI_PartInfo)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GeneratePointAttributeInstancerBuffer)> {
  static const MethodInfo* get() {
    static auto* session = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionBase")->byval_arg;
    static auto* geoID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* partInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GeneratePointAttributeInstancerBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{session, geoID, partID, partName, partInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GetLoadBufferVolumeFromTileIndex
// Il2CppName: GetLoadBufferVolumeFromTileIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_LoadBufferVolume* (*)(int, System::Collections::Generic::List_1<HoudiniEngineUnity::HEU_LoadBufferVolume*>*)>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::GetLoadBufferVolumeFromTileIndex)> {
  static const MethodInfo* get() {
    static auto* tileIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* buffers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_LoadBufferVolume")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "GetLoadBufferVolumeFromTileIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tileIndex, buffers});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::DoWork
// Il2CppName: DoWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::DoWork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "DoWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::OnComplete
// Il2CppName: OnComplete
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::OnComplete)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "OnComplete", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::OnStopped
// Il2CppName: OnStopped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::OnStopped)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "OnStopped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CleanUp
// Il2CppName: CleanUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::*)()>(&HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::CleanUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo*), "CleanUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ThreadedTaskLoadGeo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
