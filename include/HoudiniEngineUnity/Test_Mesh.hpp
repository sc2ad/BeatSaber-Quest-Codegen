// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.IEquivableWrapperClass`1
#include "HoudiniEngineUnity/IEquivableWrapperClass_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.Test_Mesh
  // [TokenAttribute] Offset: FFFFFFFF
  class Test_Mesh : public ::Il2CppObject/*, public HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_Mesh*>*/ {
    public:
    // public UnityEngine.Mesh self
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Mesh* self;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // Creating value type constructor for type: Test_Mesh
    Test_Mesh(UnityEngine::Mesh* self_ = {}) noexcept : self{self_} {}
    // Creating interface conversion operator: operator HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_Mesh*>
    operator HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_Mesh*>() noexcept {
      return *reinterpret_cast<HoudiniEngineUnity::IEquivableWrapperClass_1<HoudiniEngineUnity::Test_Mesh*>*>(this);
    }
    // Creating conversion operator: operator UnityEngine::Mesh*
    constexpr operator UnityEngine::Mesh*() const noexcept {
      return self;
    }
    // Get instance field reference: public UnityEngine.Mesh self
    UnityEngine::Mesh*& dyn_self();
    // public System.Void .ctor(UnityEngine.Mesh self)
    // Offset: 0x25D0E74
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Test_Mesh* New_ctor(UnityEngine::Mesh* self) {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::Test_Mesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Test_Mesh*, creationType>(self)));
    }
    // public System.Boolean IsNull()
    // Offset: 0x25D0EA0
    bool IsNull();
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.Test_Mesh other)
    // Offset: 0x25D0F10
    bool IsEquivalentTo(HoudiniEngineUnity::Test_Mesh* other);
  }; // HoudiniEngineUnity.Test_Mesh
  #pragma pack(pop)
  static check_size<sizeof(Test_Mesh), 16 + sizeof(UnityEngine::Mesh*)> __HoudiniEngineUnity_Test_MeshSizeCheck;
  static_assert(sizeof(Test_Mesh) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::Test_Mesh*, "HoudiniEngineUnity", "Test_Mesh");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_Mesh::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_Mesh::IsNull
// Il2CppName: IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::Test_Mesh::*)()>(&HoudiniEngineUnity::Test_Mesh::IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::Test_Mesh*), "IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::Test_Mesh::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::Test_Mesh::*)(HoudiniEngineUnity::Test_Mesh*)>(&HoudiniEngineUnity::Test_Mesh::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "Test_Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::Test_Mesh*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
