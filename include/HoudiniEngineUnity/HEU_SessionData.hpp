// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HAPI_Session
#include "HoudiniEngineUnity/HAPI_Session.hpp"
// Including type: HoudiniEngineUnity.SessionConnectionState
#include "HoudiniEngineUnity/SessionConnectionState.hpp"
// Including type: HoudiniEngineUnity.SessionMode
#include "HoudiniEngineUnity/SessionMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_SessionSyncData
  class HEU_SessionSyncData;
  // Skipping declaration: HAPI_SessionType because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_SessionData
  class HEU_SessionData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_SessionData);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_SessionData*, "HoudiniEngineUnity", "HEU_SessionData");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_SessionData
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_SessionData : public ::Il2CppObject {
    public:
    public:
    // public HoudiniEngineUnity.HAPI_Session _HAPISession
    // Size: 0x10
    // Offset: 0x10
    ::HoudiniEngineUnity::HAPI_Session HAPISession;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HAPI_Session) == 0x10);
    // private System.Int32 _serverProcessID
    // Size: 0x4
    // Offset: 0x20
    int serverProcessID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x24
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: pipeName
    char __padding2[0x3] = {};
    // private System.String _pipeName
    // Size: 0x8
    // Offset: 0x28
    ::StringW pipeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Int32 _port
    // Size: 0x4
    // Offset: 0x30
    int port;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: port and: sessionClassType
    char __padding4[0x4] = {};
    // private System.String _sessionClassType
    // Size: 0x8
    // Offset: 0x38
    ::StringW sessionClassType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _isDefaultSession
    // Size: 0x1
    // Offset: 0x40
    bool isDefaultSession;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDefaultSession and: sessionSync
    char __padding6[0x7] = {};
    // private HoudiniEngineUnity.HEU_SessionSyncData _sessionSync
    // Size: 0x8
    // Offset: 0x48
    ::HoudiniEngineUnity::HEU_SessionSyncData* sessionSync;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_SessionSyncData*) == 0x8);
    // private HoudiniEngineUnity.SessionConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x50
    ::HoudiniEngineUnity::SessionConnectionState connectionState;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::SessionConnectionState) == 0x4);
    // private HoudiniEngineUnity.SessionMode _sessionMode
    // Size: 0x4
    // Offset: 0x54
    ::HoudiniEngineUnity::SessionMode sessionMode;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::SessionMode) == 0x4);
    public:
    // Get static field: static public System.Int64 INVALID_SESSION_ID
    static int64_t _get_INVALID_SESSION_ID();
    // Set static field: static public System.Int64 INVALID_SESSION_ID
    static void _set_INVALID_SESSION_ID(int64_t value);
    // Get instance field reference: public HoudiniEngineUnity.HAPI_Session _HAPISession
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HAPI_Session& dyn__HAPISession();
    // Get instance field reference: private System.Int32 _serverProcessID
    [[deprecated("Use field access instead!")]] int& dyn__serverProcessID();
    // Get instance field reference: private System.Boolean _initialized
    [[deprecated("Use field access instead!")]] bool& dyn__initialized();
    // Get instance field reference: private System.String _pipeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__pipeName();
    // Get instance field reference: private System.Int32 _port
    [[deprecated("Use field access instead!")]] int& dyn__port();
    // Get instance field reference: private System.String _sessionClassType
    [[deprecated("Use field access instead!")]] ::StringW& dyn__sessionClassType();
    // Get instance field reference: private System.Boolean _isDefaultSession
    [[deprecated("Use field access instead!")]] bool& dyn__isDefaultSession();
    // Get instance field reference: private HoudiniEngineUnity.HEU_SessionSyncData _sessionSync
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_SessionSyncData*& dyn__sessionSync();
    // Get instance field reference: private HoudiniEngineUnity.SessionConnectionState _connectionState
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::SessionConnectionState& dyn__connectionState();
    // Get instance field reference: private HoudiniEngineUnity.SessionMode _sessionMode
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::SessionMode& dyn__sessionMode();
    // public System.Int64 get_SessionID()
    // Offset: 0x1B2CA30
    int64_t get_SessionID();
    // public System.Void set_SessionID(System.Int64 value)
    // Offset: 0x1B2C0D4
    void set_SessionID(int64_t value);
    // public System.Int32 get_ProcessID()
    // Offset: 0x1B2CA98
    int get_ProcessID();
    // public System.Void set_ProcessID(System.Int32 value)
    // Offset: 0x1B2CAA0
    void set_ProcessID(int value);
    // public HoudiniEngineUnity.HAPI_SessionType get_SessionType()
    // Offset: 0x1B2CAA8
    ::HoudiniEngineUnity::HAPI_SessionType get_SessionType();
    // public System.Void set_SessionType(HoudiniEngineUnity.HAPI_SessionType value)
    // Offset: 0x1B2CAB0
    void set_SessionType(::HoudiniEngineUnity::HAPI_SessionType value);
    // public System.Boolean get_IsInitialized()
    // Offset: 0x1B2CAB8
    bool get_IsInitialized();
    // public System.Void set_IsInitialized(System.Boolean value)
    // Offset: 0x1B2CAC0
    void set_IsInitialized(bool value);
    // public System.Boolean get_IsValidSessionID()
    // Offset: 0x1B2CACC
    bool get_IsValidSessionID();
    // public System.String get_PipeName()
    // Offset: 0x1B2CAD4
    ::StringW get_PipeName();
    // public System.Void set_PipeName(System.String value)
    // Offset: 0x1B2CB1C
    void set_PipeName(::StringW value);
    // public System.Int32 get_Port()
    // Offset: 0x1B2CB24
    int get_Port();
    // public System.Void set_Port(System.Int32 value)
    // Offset: 0x1B2CB2C
    void set_Port(int value);
    // public System.Type get_SessionClassType()
    // Offset: 0x1B2CB34
    ::System::Type* get_SessionClassType();
    // public System.Void set_SessionClassType(System.Type value)
    // Offset: 0x1B2CBE0
    void set_SessionClassType(::System::Type* value);
    // public System.Boolean get_IsDefaultSession()
    // Offset: 0x1B2CC1C
    bool get_IsDefaultSession();
    // public System.Void set_IsDefaultSession(System.Boolean value)
    // Offset: 0x1B2CC24
    void set_IsDefaultSession(bool value);
    // public System.Boolean get_IsSessionSync()
    // Offset: 0x1B2BC8C
    bool get_IsSessionSync();
    // public HoudiniEngineUnity.SessionConnectionState get_ThisConnectionMode()
    // Offset: 0x1B2CC30
    ::HoudiniEngineUnity::SessionConnectionState get_ThisConnectionMode();
    // public System.Void set_ThisConnectionMode(HoudiniEngineUnity.SessionConnectionState value)
    // Offset: 0x1B2CC38
    void set_ThisConnectionMode(::HoudiniEngineUnity::SessionConnectionState value);
    // public HoudiniEngineUnity.SessionMode get_ThisSessionMode()
    // Offset: 0x1B2CC40
    ::HoudiniEngineUnity::SessionMode get_ThisSessionMode();
    // public System.Void set_ThisSessionMode(HoudiniEngineUnity.SessionMode value)
    // Offset: 0x1B2CC48
    void set_ThisSessionMode(::HoudiniEngineUnity::SessionMode value);
    // public System.Void .ctor()
    // Offset: 0x1B2CC50
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_SessionData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_SessionData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_SessionData*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1B2CC60
    static void _cctor();
    // public HoudiniEngineUnity.HEU_SessionSyncData GetOrCreateSessionSync()
    // Offset: 0x1B2C904
    ::HoudiniEngineUnity::HEU_SessionSyncData* GetOrCreateSessionSync();
    // public HoudiniEngineUnity.HEU_SessionSyncData GetSessionSync()
    // Offset: 0x1B2CA20
    ::HoudiniEngineUnity::HEU_SessionSyncData* GetSessionSync();
    // public System.Void SetSessionSync(HoudiniEngineUnity.HEU_SessionSyncData syncData)
    // Offset: 0x1B2CA28
    void SetSessionSync(::HoudiniEngineUnity::HEU_SessionSyncData* syncData);
  }; // HoudiniEngineUnity.HEU_SessionData
  #pragma pack(pop)
  static check_size<sizeof(HEU_SessionData), 84 + sizeof(::HoudiniEngineUnity::SessionMode)> __HoudiniEngineUnity_HEU_SessionDataSizeCheck;
  static_assert(sizeof(HEU_SessionData) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_SessionID
// Il2CppName: get_SessionID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_SessionID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_SessionID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_SessionID
// Il2CppName: set_SessionID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(int64_t)>(&HoudiniEngineUnity::HEU_SessionData::set_SessionID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_SessionID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_ProcessID
// Il2CppName: get_ProcessID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_ProcessID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_ProcessID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_ProcessID
// Il2CppName: set_ProcessID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(int)>(&HoudiniEngineUnity::HEU_SessionData::set_ProcessID)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_ProcessID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_SessionType
// Il2CppName: get_SessionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HAPI_SessionType (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_SessionType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_SessionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_SessionType
// Il2CppName: set_SessionType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(::HoudiniEngineUnity::HAPI_SessionType)>(&HoudiniEngineUnity::HEU_SessionData::set_SessionType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_SessionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_SessionType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_IsInitialized
// Il2CppName: get_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_IsInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_IsInitialized
// Il2CppName: set_IsInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(bool)>(&HoudiniEngineUnity::HEU_SessionData::set_IsInitialized)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_IsInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_IsValidSessionID
// Il2CppName: get_IsValidSessionID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_IsValidSessionID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_IsValidSessionID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_PipeName
// Il2CppName: get_PipeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_PipeName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_PipeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_PipeName
// Il2CppName: set_PipeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(::StringW)>(&HoudiniEngineUnity::HEU_SessionData::set_PipeName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_PipeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_Port
// Il2CppName: get_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_Port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_Port
// Il2CppName: set_Port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(int)>(&HoudiniEngineUnity::HEU_SessionData::set_Port)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_Port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_SessionClassType
// Il2CppName: get_SessionClassType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Type* (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_SessionClassType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_SessionClassType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_SessionClassType
// Il2CppName: set_SessionClassType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(::System::Type*)>(&HoudiniEngineUnity::HEU_SessionData::set_SessionClassType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_SessionClassType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_IsDefaultSession
// Il2CppName: get_IsDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_IsDefaultSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_IsDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_IsDefaultSession
// Il2CppName: set_IsDefaultSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(bool)>(&HoudiniEngineUnity::HEU_SessionData::set_IsDefaultSession)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_IsDefaultSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_IsSessionSync
// Il2CppName: get_IsSessionSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_IsSessionSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_IsSessionSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_ThisConnectionMode
// Il2CppName: get_ThisConnectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::SessionConnectionState (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_ThisConnectionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_ThisConnectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_ThisConnectionMode
// Il2CppName: set_ThisConnectionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(::HoudiniEngineUnity::SessionConnectionState)>(&HoudiniEngineUnity::HEU_SessionData::set_ThisConnectionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "SessionConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_ThisConnectionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::get_ThisSessionMode
// Il2CppName: get_ThisSessionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::SessionMode (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::get_ThisSessionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "get_ThisSessionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::set_ThisSessionMode
// Il2CppName: set_ThisSessionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(::HoudiniEngineUnity::SessionMode)>(&HoudiniEngineUnity::HEU_SessionData::set_ThisSessionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "SessionMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "set_ThisSessionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_SessionData::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::GetOrCreateSessionSync
// Il2CppName: GetOrCreateSessionSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionSyncData* (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::GetOrCreateSessionSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "GetOrCreateSessionSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::GetSessionSync
// Il2CppName: GetSessionSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HoudiniEngineUnity::HEU_SessionSyncData* (HoudiniEngineUnity::HEU_SessionData::*)()>(&HoudiniEngineUnity::HEU_SessionData::GetSessionSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "GetSessionSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionData::SetSessionSync
// Il2CppName: SetSessionSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionData::*)(::HoudiniEngineUnity::HEU_SessionSyncData*)>(&HoudiniEngineUnity::HEU_SessionData::SetSessionSync)> {
  static const MethodInfo* get() {
    static auto* syncData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionSyncData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionData*), "SetSessionSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syncData});
  }
};
