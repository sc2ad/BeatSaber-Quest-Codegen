// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.HAPI_Result
#include "HoudiniEngineUnity/HAPI_Result.hpp"
// Including type: HoudiniEngineUnity.HAPI_ObjectInfo
#include "HoudiniEngineUnity/HAPI_ObjectInfo.hpp"
// Including type: HoudiniEngineUnity.HAPI_Transform
#include "HoudiniEngineUnity/HAPI_Transform.hpp"
// Including type: HoudiniEngineUnity.HAPI_ParmInfo
#include "HoudiniEngineUnity/HAPI_ParmInfo.hpp"
// Including type: HoudiniEngineUnity.HAPI_ParmChoiceInfo
#include "HoudiniEngineUnity/HAPI_ParmChoiceInfo.hpp"
// Including type: HoudiniEngineUnity.HAPI_HandleInfo
#include "HoudiniEngineUnity/HAPI_HandleInfo.hpp"
// Including type: HoudiniEngineUnity.HAPI_HandleBindingInfo
#include "HoudiniEngineUnity/HAPI_HandleBindingInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_SessionData
  class HEU_SessionData;
  // Forward declaring type: SessionConnectionState
  struct SessionConnectionState;
  // Forward declaring type: SessionMode
  struct SessionMode;
  // Forward declaring type: HEU_HoudiniAsset
  class HEU_HoudiniAsset;
  // Forward declaring type: HAPI_State
  struct HAPI_State;
  // Forward declaring type: HAPI_StatusType
  struct HAPI_StatusType;
  // Forward declaring type: HAPI_StatusVerbosity
  struct HAPI_StatusVerbosity;
  // Forward declaring type: HAPI_EnvIntType
  struct HAPI_EnvIntType;
  // Forward declaring type: HAPI_SessionEnvIntType
  struct HAPI_SessionEnvIntType;
  // Forward declaring type: HAPI_CookOptions
  struct HAPI_CookOptions;
  // Forward declaring type: HAPI_AssetInfo
  struct HAPI_AssetInfo;
  // Forward declaring type: HAPI_NodeInfo
  struct HAPI_NodeInfo;
  // Forward declaring type: HAPI_PartInfo
  struct HAPI_PartInfo;
  // Skipping declaration: HAPI_RSTOrder because it is already included!
  // Forward declaring type: HAPI_GeoInfo
  struct HAPI_GeoInfo;
  // Forward declaring type: HAPI_TransformEuler
  struct HAPI_TransformEuler;
  // Forward declaring type: HAPI_AttributeOwner
  struct HAPI_AttributeOwner;
  // Forward declaring type: HAPI_AttributeInfo
  struct HAPI_AttributeInfo;
  // Forward declaring type: HAPI_GroupType
  struct HAPI_GroupType;
  // Forward declaring type: HAPI_BoxInfo
  struct HAPI_BoxInfo;
  // Forward declaring type: HAPI_SphereInfo
  struct HAPI_SphereInfo;
  // Forward declaring type: HAPI_CurveInfo
  struct HAPI_CurveInfo;
  // Forward declaring type: HAPI_MaterialInfo
  struct HAPI_MaterialInfo;
  // Forward declaring type: HAPI_ImageInfo
  struct HAPI_ImageInfo;
  // Forward declaring type: HAPI_HeightFieldSampling
  struct HAPI_HeightFieldSampling;
  // Forward declaring type: HAPI_VolumeInfo
  struct HAPI_VolumeInfo;
  // Forward declaring type: HAPI_VolumeTileInfo
  struct HAPI_VolumeTileInfo;
  // Forward declaring type: HAPI_CacheProperty
  struct HAPI_CacheProperty;
  // Forward declaring type: HAPI_XYZOrder
  struct HAPI_XYZOrder;
  // Forward declaring type: HAPI_Viewport
  struct HAPI_Viewport;
  // Forward declaring type: HAPI_SessionSyncInfo
  struct HAPI_SessionSyncInfo;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_SessionBase
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_SessionBase : public ::Il2CppObject {
    public:
    // protected HoudiniEngineUnity.HEU_SessionData _sessionData
    // Size: 0x8
    // Offset: 0x10
    HoudiniEngineUnity::HEU_SessionData* sessionData;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HEU_SessionData*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xEFBB70
    // private System.Boolean <UserNotifiedSessionInvalid>k__BackingField
    // Size: 0x1
    // Offset: 0x18
    bool UserNotifiedSessionInvalid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UserNotifiedSessionInvalid and: sessionErrorMsg
    char __padding1[0x7] = {};
    // private System.String _sessionErrorMsg
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* sessionErrorMsg;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xEFBB80
    // private System.Boolean <LogErrorOverride>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool LogErrorOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xEFBB90
    // private System.Boolean <ThrowErrorOverride>k__BackingField
    // Size: 0x1
    // Offset: 0x29
    bool ThrowErrorOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ThrowErrorOverride and: LastCallResultCode
    char __padding4[0x2] = {};
    // [CompilerGeneratedAttribute] Offset: 0xEFBBA0
    // private HoudiniEngineUnity.HAPI_Result <LastCallResultCode>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    HoudiniEngineUnity::HAPI_Result LastCallResultCode;
    // Field size check
    static_assert(sizeof(HoudiniEngineUnity::HAPI_Result) == 0x4);
    // Creating value type constructor for type: HEU_SessionBase
    HEU_SessionBase(HoudiniEngineUnity::HEU_SessionData* sessionData_ = {}, bool UserNotifiedSessionInvalid_ = {}, ::Il2CppString* sessionErrorMsg_ = {}, bool LogErrorOverride_ = {}, bool ThrowErrorOverride_ = {}, HoudiniEngineUnity::HAPI_Result LastCallResultCode_ = {}) noexcept : sessionData{sessionData_}, UserNotifiedSessionInvalid{UserNotifiedSessionInvalid_}, sessionErrorMsg{sessionErrorMsg_}, LogErrorOverride{LogErrorOverride_}, ThrowErrorOverride{ThrowErrorOverride_}, LastCallResultCode{LastCallResultCode_} {}
    // Get instance field reference: protected HoudiniEngineUnity.HEU_SessionData _sessionData
    HoudiniEngineUnity::HEU_SessionData*& dyn__sessionData();
    // Get instance field reference: private System.Boolean <UserNotifiedSessionInvalid>k__BackingField
    bool& dyn_$UserNotifiedSessionInvalid$k__BackingField();
    // Get instance field reference: private System.String _sessionErrorMsg
    ::Il2CppString*& dyn__sessionErrorMsg();
    // Get instance field reference: private System.Boolean <LogErrorOverride>k__BackingField
    bool& dyn_$LogErrorOverride$k__BackingField();
    // Get instance field reference: private System.Boolean <ThrowErrorOverride>k__BackingField
    bool& dyn_$ThrowErrorOverride$k__BackingField();
    // Get instance field reference: private HoudiniEngineUnity.HAPI_Result <LastCallResultCode>k__BackingField
    HoudiniEngineUnity::HAPI_Result& dyn_$LastCallResultCode$k__BackingField();
    // public System.Boolean get_UserNotifiedSessionInvalid()
    // Offset: 0x17D23B8
    bool get_UserNotifiedSessionInvalid();
    // public System.Void set_UserNotifiedSessionInvalid(System.Boolean value)
    // Offset: 0x17D23C0
    void set_UserNotifiedSessionInvalid(bool value);
    // public HoudiniEngineUnity.SessionConnectionState get_ConnectionState()
    // Offset: 0x17D23CC
    HoudiniEngineUnity::SessionConnectionState get_ConnectionState();
    // public System.Void set_ConnectionState(HoudiniEngineUnity.SessionConnectionState value)
    // Offset: 0x17D23E4
    void set_ConnectionState(HoudiniEngineUnity::SessionConnectionState value);
    // public HoudiniEngineUnity.SessionMode get_ThisSessionMode()
    // Offset: 0x17D23F4
    HoudiniEngineUnity::SessionMode get_ThisSessionMode();
    // public System.Void set_ThisSessionMode(HoudiniEngineUnity.SessionMode value)
    // Offset: 0x17D240C
    void set_ThisSessionMode(HoudiniEngineUnity::SessionMode value);
    // public System.String GetSessionErrorMsg()
    // Offset: 0x17D241C
    ::Il2CppString* GetSessionErrorMsg();
    // public System.Boolean get_LogErrorOverride()
    // Offset: 0x17D2424
    bool get_LogErrorOverride();
    // public System.Void set_LogErrorOverride(System.Boolean value)
    // Offset: 0x17D242C
    void set_LogErrorOverride(bool value);
    // public System.Boolean get_ThrowErrorOverride()
    // Offset: 0x17D2438
    bool get_ThrowErrorOverride();
    // public System.Void set_ThrowErrorOverride(System.Boolean value)
    // Offset: 0x17D2440
    void set_ThrowErrorOverride(bool value);
    // public System.Boolean IsSessionSync()
    // Offset: 0x17D244C
    bool IsSessionSync();
    // public HoudiniEngineUnity.HAPI_Result get_LastCallResultCode()
    // Offset: 0x17D247C
    HoudiniEngineUnity::HAPI_Result get_LastCallResultCode();
    // public System.Void set_LastCallResultCode(HoudiniEngineUnity.HAPI_Result value)
    // Offset: 0x17D2484
    void set_LastCallResultCode(HoudiniEngineUnity::HAPI_Result value);
    // public HoudiniEngineUnity.HEU_HoudiniAsset GetRegisteredAssetFromID(System.Int32 id)
    // Offset: 0x17D248C
    HoudiniEngineUnity::HEU_HoudiniAsset* GetRegisteredAssetFromID(int id);
    // public System.Boolean IsAssetRegistered(HoudiniEngineUnity.HEU_HoudiniAsset asset)
    // Offset: 0x17D2494
    bool IsAssetRegistered(HoudiniEngineUnity::HEU_HoudiniAsset* asset);
    // public System.Void RegisterAsset(HoudiniEngineUnity.HEU_HoudiniAsset asset)
    // Offset: 0x17D249C
    void RegisterAsset(HoudiniEngineUnity::HEU_HoudiniAsset* asset);
    // public System.Void UnregisterAsset(System.Int32 id)
    // Offset: 0x17D24A0
    void UnregisterAsset(int id);
    // public System.Void ReregisterOnAwake(HoudiniEngineUnity.HEU_HoudiniAsset asset)
    // Offset: 0x17D24A4
    void ReregisterOnAwake(HoudiniEngineUnity::HEU_HoudiniAsset* asset);
    // public System.Void SetSessionErrorMsg(System.String msg, System.Boolean bLogError)
    // Offset: 0x17D24D4
    void SetSessionErrorMsg(::Il2CppString* msg, bool bLogError);
    // public System.Void SetSessionConnectionErrorMsg(System.String introMsg, HoudiniEngineUnity.HAPI_Result result, System.Boolean bIsHARSRunning, System.Boolean bLogError)
    // Offset: 0x17D24F4
    void SetSessionConnectionErrorMsg(::Il2CppString* introMsg, HoudiniEngineUnity::HAPI_Result result, bool bIsHARSRunning, bool bLogError);
    // public System.Void SetLibraryErrorMsg(System.Boolean bLogError)
    // Offset: 0x17D2788
    void SetLibraryErrorMsg(bool bLogError);
    // protected System.Boolean CreateSessionData(System.Boolean bOverwriteExisting, System.Boolean bIsDefaultSession)
    // Offset: 0x17D2838
    bool CreateSessionData(bool bOverwriteExisting, bool bIsDefaultSession);
    // public System.Boolean CreateInProcessSession(System.Boolean bIsDefaultSession)
    // Offset: 0x17D2840
    bool CreateInProcessSession(bool bIsDefaultSession);
    // public System.Boolean CreateThriftSocketSession(System.Boolean bIsDefaultSession, System.String hostName, System.Int32 serverPort, System.Boolean autoClose, System.Single timeout, System.Boolean bLogError)
    // Offset: 0x17D2848
    bool CreateThriftSocketSession(bool bIsDefaultSession, ::Il2CppString* hostName, int serverPort, bool autoClose, float timeout, bool bLogError);
    // public System.Boolean CreateThriftPipeSession(System.Boolean bIsDefaultSession, System.String pipeName, System.Boolean autoClose, System.Single timeout, System.Boolean bLogError)
    // Offset: 0x17D2850
    bool CreateThriftPipeSession(bool bIsDefaultSession, ::Il2CppString* pipeName, bool autoClose, float timeout, bool bLogError);
    // public System.Boolean CreateCustomSession(System.Boolean bIsDefaultSession)
    // Offset: 0x17D2858
    bool CreateCustomSession(bool bIsDefaultSession);
    // public System.Boolean ConnectThriftSocketSession(System.Boolean bIsDefaultSession, System.String hostName, System.Int32 serverPort, System.Boolean autoClose, System.Single timeout, System.Boolean logError, System.Boolean autoInitialize)
    // Offset: 0x17D2860
    bool ConnectThriftSocketSession(bool bIsDefaultSession, ::Il2CppString* hostName, int serverPort, bool autoClose, float timeout, bool logError, bool autoInitialize);
    // public System.Boolean ConnectThriftPipeSession(System.Boolean bIsDefaultSession, System.String pipeName, System.Boolean autoClose, System.Single timeout, System.Boolean logError, System.Boolean autoInitialize)
    // Offset: 0x17D2868
    bool ConnectThriftPipeSession(bool bIsDefaultSession, ::Il2CppString* pipeName, bool autoClose, float timeout, bool logError, bool autoInitialize);
    // public System.Boolean CloseSession()
    // Offset: 0x17D2870
    bool CloseSession();
    // protected System.Boolean CheckAndCloseExistingSession()
    // Offset: 0x17D2878
    bool CheckAndCloseExistingSession();
    // protected System.Void ClearSessionInfo()
    // Offset: 0x17D2880
    void ClearSessionInfo();
    // public System.Void SetSessionData(HoudiniEngineUnity.HEU_SessionData sessionData)
    // Offset: 0x17D28BC
    void SetSessionData(HoudiniEngineUnity::HEU_SessionData* sessionData);
    // public HoudiniEngineUnity.HEU_SessionData GetSessionData()
    // Offset: 0x17D28C4
    HoudiniEngineUnity::HEU_SessionData* GetSessionData();
    // public System.String GetSessionInfo()
    // Offset: 0x17D28CC
    ::Il2CppString* GetSessionInfo();
    // public System.Boolean IsSessionValid()
    // Offset: 0x17D2914
    bool IsSessionValid();
    // public System.Boolean RestartSession()
    // Offset: 0x17D291C
    bool RestartSession();
    // public System.String GetLastSessionError()
    // Offset: 0x17D2924
    ::Il2CppString* GetLastSessionError();
    // public System.Boolean CheckVersionMatch()
    // Offset: 0x17D292C
    bool CheckVersionMatch();
    // public System.Boolean InitializeSession(HoudiniEngineUnity.HEU_SessionData sessionData)
    // Offset: 0x17D2934
    bool InitializeSession(HoudiniEngineUnity::HEU_SessionData* sessionData);
    // public System.Boolean HandleStatusResult(HoudiniEngineUnity.HAPI_Result result, System.String prependMsg, System.Boolean bThrowError, System.Boolean bLogError)
    // Offset: 0x17D293C
    bool HandleStatusResult(HoudiniEngineUnity::HAPI_Result result, ::Il2CppString* prependMsg, bool bThrowError, bool bLogError);
    // public System.Void SetServerEnvString(System.String name, System.String value)
    // Offset: 0x17D2944
    void SetServerEnvString(::Il2CppString* name, ::Il2CppString* value);
    // public System.Boolean GetServerEnvString(System.String name, out System.String value)
    // Offset: 0x17D2948
    bool GetServerEnvString(::Il2CppString* name, ByRef<::Il2CppString*> value);
    // public System.Boolean GetServerEnvVarCount(out System.Int32 env_count)
    // Offset: 0x17D2954
    bool GetServerEnvVarCount(ByRef<int> env_count);
    // public System.Boolean GetCallResult(out HoudiniEngineUnity.HAPI_Result result)
    // Offset: 0x17D2960
    bool GetCallResult(ByRef<HoudiniEngineUnity::HAPI_Result> result);
    // public System.Boolean GetCookResult(out HoudiniEngineUnity.HAPI_Result result)
    // Offset: 0x17D296C
    bool GetCookResult(ByRef<HoudiniEngineUnity::HAPI_Result> result);
    // public System.Boolean GetCookState(out HoudiniEngineUnity.HAPI_State state)
    // Offset: 0x17D2978
    bool GetCookState(ByRef<HoudiniEngineUnity::HAPI_State> state);
    // public System.String GetStatusString(HoudiniEngineUnity.HAPI_StatusType statusType, HoudiniEngineUnity.HAPI_StatusVerbosity verbosity)
    // Offset: 0x17D2984
    ::Il2CppString* GetStatusString(HoudiniEngineUnity::HAPI_StatusType statusType, HoudiniEngineUnity::HAPI_StatusVerbosity verbosity);
    // public System.String ComposeNodeCookResult(System.Int32 nodeId, HoudiniEngineUnity.HAPI_StatusVerbosity verbosity)
    // Offset: 0x17D29CC
    ::Il2CppString* ComposeNodeCookResult(int nodeId, HoudiniEngineUnity::HAPI_StatusVerbosity verbosity);
    // public System.Int32 GetEnvInt(HoudiniEngineUnity.HAPI_EnvIntType intType)
    // Offset: 0x17D2A14
    int GetEnvInt(HoudiniEngineUnity::HAPI_EnvIntType intType);
    // public System.Int32 GetSessionEnvInt(HoudiniEngineUnity.HAPI_SessionEnvIntType intType, System.Boolean bLogError)
    // Offset: 0x17D2A1C
    int GetSessionEnvInt(HoudiniEngineUnity::HAPI_SessionEnvIntType intType, bool bLogError);
    // public System.Boolean GetString(System.Int32 stringHandle, ref System.String resultString, System.Int32 bufferLength)
    // Offset: 0x17D2A24
    bool GetString(int stringHandle, ByRef<::Il2CppString*> resultString, int bufferLength);
    // public System.Int32 GetStringBufferLength(System.Int32 stringHandle)
    // Offset: 0x17D2A2C
    int GetStringBufferLength(int stringHandle);
    // public System.Int32 CheckForSpecificErrors(System.Int32 nodeID, System.Int32 errorsToCheck)
    // Offset: 0x17D2A34
    int CheckForSpecificErrors(int nodeID, int errorsToCheck);
    // public System.Single GetTime()
    // Offset: 0x17D2A3C
    float GetTime();
    // public System.Boolean SetTime(System.Single time)
    // Offset: 0x17D2A44
    bool SetTime(float time);
    // public System.Boolean GetUseHoudiniTime()
    // Offset: 0x17D2A4C
    bool GetUseHoudiniTime();
    // public System.Boolean SetUseHoudiniTime(System.Boolean enable)
    // Offset: 0x17D2A54
    bool SetUseHoudiniTime(bool enable);
    // public System.Boolean LoadAssetLibraryFromFile(System.String assetPath, System.Boolean bAllowOverwrite, out System.Int32 libraryID)
    // Offset: 0x17D2A5C
    bool LoadAssetLibraryFromFile(::Il2CppString* assetPath, bool bAllowOverwrite, ByRef<int> libraryID);
    // public System.Boolean LoadAssetLibraryFromMemory(System.Byte[] buffer, System.Boolean bAllowOverwrite, out System.Int32 libraryID)
    // Offset: 0x17D2A68
    bool LoadAssetLibraryFromMemory(::Array<uint8_t>* buffer, bool bAllowOverwrite, ByRef<int> libraryID);
    // public System.Boolean CreateNode(System.Int32 parentNodeID, System.String operatorName, System.String nodeLabel, System.Boolean bCookOnCreation, out System.Int32 newNodeID)
    // Offset: 0x17D2A74
    bool CreateNode(int parentNodeID, ::Il2CppString* operatorName, ::Il2CppString* nodeLabel, bool bCookOnCreation, ByRef<int> newNodeID);
    // public System.Void DeleteNode(System.Int32 nodeID)
    // Offset: 0x17D2A84
    void DeleteNode(int nodeID);
    // public System.Boolean CookNode(System.Int32 nodeID, System.Boolean bCookTemplatedGeos, System.Boolean bSplitGeosByGroup)
    // Offset: 0x17D2A88
    bool CookNode(int nodeID, bool bCookTemplatedGeos, bool bSplitGeosByGroup);
    // public System.Boolean CookNodeWithOptions(System.Int32 nodeID, HoudiniEngineUnity.HAPI_CookOptions cookOptions)
    // Offset: 0x17D2A90
    bool CookNodeWithOptions(int nodeID, HoudiniEngineUnity::HAPI_CookOptions cookOptions);
    // public System.Boolean RenameNode(System.Int32 nodeID, System.String newName)
    // Offset: 0x17D2A98
    bool RenameNode(int nodeID, ::Il2CppString* newName);
    // public System.Boolean ConnectNodeInput(System.Int32 nodeID, System.Int32 inputIndex, System.Int32 nodeIDToConnect, System.Int32 outputIndex)
    // Offset: 0x17D2AA0
    bool ConnectNodeInput(int nodeID, int inputIndex, int nodeIDToConnect, int outputIndex);
    // public System.Boolean DisconnectNodeInput(System.Int32 nodeID, System.Int32 inputIndex, System.Boolean bLogError)
    // Offset: 0x17D2AA8
    bool DisconnectNodeInput(int nodeID, int inputIndex, bool bLogError);
    // public System.Boolean QueryNodeInput(System.Int32 nodeID, System.Int32 inputIndex, out System.Int32 connectedNodeID, System.Boolean bLogError)
    // Offset: 0x17D2AB0
    bool QueryNodeInput(int nodeID, int inputIndex, ByRef<int> connectedNodeID, bool bLogError);
    // public System.Boolean GetNodeInputName(System.Int32 nodeID, System.Int32 inputIndex, out System.Int32 nodeNameIndex)
    // Offset: 0x17D2AC0
    bool GetNodeInputName(int nodeID, int inputIndex, ByRef<int> nodeNameIndex);
    // public System.Boolean GetAvailableAssetCount(System.Int32 libraryID, out System.Int32 assetCount)
    // Offset: 0x17D2ACC
    bool GetAvailableAssetCount(int libraryID, ByRef<int> assetCount);
    // public System.Boolean GetAvailableAssets(System.Int32 libraryID, ref System.Int32[] assetNames, System.Int32 assetCount)
    // Offset: 0x17D2AD8
    bool GetAvailableAssets(int libraryID, ByRef<::Array<int>*> assetNames, int assetCount);
    // public System.Boolean GetAssetInfo(System.Int32 nodeID, ref HoudiniEngineUnity.HAPI_AssetInfo assetInfo)
    // Offset: 0x17D2AE0
    bool GetAssetInfo(int nodeID, ByRef<HoudiniEngineUnity::HAPI_AssetInfo> assetInfo);
    // public System.Boolean GetNodeInfo(System.Int32 nodeID, ref HoudiniEngineUnity.HAPI_NodeInfo nodeInfo, System.Boolean bLogError)
    // Offset: 0x17D2AE8
    bool GetNodeInfo(int nodeID, ByRef<HoudiniEngineUnity::HAPI_NodeInfo> nodeInfo, bool bLogError);
    // public System.Boolean GetNodePath(System.Int32 nodeID, System.Int32 relativeNodeID, out System.String path)
    // Offset: 0x17D2AF0
    bool GetNodePath(int nodeID, int relativeNodeID, ByRef<::Il2CppString*> path);
    // public System.Boolean IsNodeValid(System.Int32 nodeID, System.Int32 uniqueNodeID)
    // Offset: 0x17D2AFC
    bool IsNodeValid(int nodeID, int uniqueNodeID);
    // public System.Boolean ComposeChildNodeList(System.Int32 parentNodeID, System.Int32 nodeTypeFilter, System.Int32 nodeFlagFilter, System.Boolean bRecursive, ref System.Int32 count)
    // Offset: 0x17D2B04
    bool ComposeChildNodeList(int parentNodeID, int nodeTypeFilter, int nodeFlagFilter, bool bRecursive, ByRef<int> count);
    // public System.Boolean GetComposedChildNodeList(System.Int32 parentNodeID, System.Int32[] childNodeIDs, System.Int32 count)
    // Offset: 0x17D2B0C
    bool GetComposedChildNodeList(int parentNodeID, ::Array<int>* childNodeIDs, int count);
    // public System.Boolean LoadHIPFile(System.String fileName, System.Boolean bCookOnLoad)
    // Offset: 0x17D2B14
    bool LoadHIPFile(::Il2CppString* fileName, bool bCookOnLoad);
    // public System.Boolean SaveHIPFile(System.String fileName, System.Boolean bLockNodes)
    // Offset: 0x17D2B1C
    bool SaveHIPFile(::Il2CppString* fileName, bool bLockNodes);
    // public System.Boolean GetObjectInfo(System.Int32 nodeID, ref HoudiniEngineUnity.HAPI_ObjectInfo objectInfo)
    // Offset: 0x17D2B24
    bool GetObjectInfo(int nodeID, ByRef<HoudiniEngineUnity::HAPI_ObjectInfo> objectInfo);
    // public System.Boolean GetObjectTransform(System.Int32 nodeID, System.Int32 relativeToNodeID, HoudiniEngineUnity.HAPI_RSTOrder rstOrder, ref HoudiniEngineUnity.HAPI_Transform hapiTransform)
    // Offset: 0x17D2B2C
    bool GetObjectTransform(int nodeID, int relativeToNodeID, HoudiniEngineUnity::HAPI_RSTOrder rstOrder, ByRef<HoudiniEngineUnity::HAPI_Transform> hapiTransform);
    // public System.Boolean SetObjectTransform(System.Int32 nodeID, ref HoudiniEngineUnity.HAPI_TransformEuler hapiTransform)
    // Offset: 0x17D2B34
    bool SetObjectTransform(int nodeID, ByRef<HoudiniEngineUnity::HAPI_TransformEuler> hapiTransform);
    // public System.Boolean ComposeObjectList(System.Int32 nodeID, out System.Int32 objectCount)
    // Offset: 0x17D2B3C
    bool ComposeObjectList(int nodeID, ByRef<int> objectCount);
    // public System.Boolean GetComposedObjectList(System.Int32 nodeID, out HoudiniEngineUnity.HAPI_ObjectInfo[] objectInfos, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2B48
    bool GetComposedObjectList(int nodeID, ByRef<::Array<HoudiniEngineUnity::HAPI_ObjectInfo>*> objectInfos, int start, int length);
    // public System.Boolean GetComposedObjectTransforms(System.Int32 nodeID, HoudiniEngineUnity.HAPI_RSTOrder rstOrder, out HoudiniEngineUnity.HAPI_Transform[] transforms, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2B50
    bool GetComposedObjectTransforms(int nodeID, HoudiniEngineUnity::HAPI_RSTOrder rstOrder, ByRef<::Array<HoudiniEngineUnity::HAPI_Transform>*> transforms, int start, int length);
    // public System.Boolean GetDisplayGeoInfo(System.Int32 nodeID, ref HoudiniEngineUnity.HAPI_GeoInfo geoInfo, System.Boolean bLogError)
    // Offset: 0x17D2B58
    bool GetDisplayGeoInfo(int nodeID, ByRef<HoudiniEngineUnity::HAPI_GeoInfo> geoInfo, bool bLogError);
    // public System.Boolean GetGeoInfo(System.Int32 nodeID, ref HoudiniEngineUnity.HAPI_GeoInfo geoInfo, System.Boolean bLogError)
    // Offset: 0x17D2B60
    bool GetGeoInfo(int nodeID, ByRef<HoudiniEngineUnity::HAPI_GeoInfo> geoInfo, bool bLogError);
    // public System.Boolean GetPartInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_PartInfo partInfo)
    // Offset: 0x17D2B68
    bool GetPartInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_PartInfo> partInfo);
    // public System.Boolean GetAttributeInfo(System.Int32 nodeID, System.Int32 partID, System.String name, HoudiniEngineUnity.HAPI_AttributeOwner owner, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo)
    // Offset: 0x17D2B70
    bool GetAttributeInfo(int nodeID, int partID, ::Il2CppString* name, HoudiniEngineUnity::HAPI_AttributeOwner owner, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo);
    // public System.Boolean GetAttributeNames(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_AttributeOwner owner, ref System.String[] attributeNames, System.Int32 count)
    // Offset: 0x17D2B78
    bool GetAttributeNames(int nodeID, int partID, HoudiniEngineUnity::HAPI_AttributeOwner owner, ByRef<::Array<::Il2CppString*>*> attributeNames, int count);
    // public System.Boolean GetAttributeStringData(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Int32[] dataArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2B80
    bool GetAttributeStringData(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<int>*> dataArray, int start, int length);
    // public System.Boolean GetAttributeFloatData(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Single[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2B88
    bool GetAttributeFloatData(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<float>*> data, int start, int length);
    // public System.Boolean GetAttributeFloat64Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Double[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2B90
    bool GetAttributeFloat64Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<double>*> data, int start, int length);
    // public System.Boolean GetAttributeIntData(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Int32[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2B98
    bool GetAttributeIntData(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<int>*> data, int start, int length);
    // public System.Boolean GetAttributeUInt8Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Byte[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BA0
    bool GetAttributeUInt8Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<uint8_t>*> data, int start, int length);
    // public System.Boolean GetAttributeInt8Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.SByte[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BA8
    bool GetAttributeInt8Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<int8_t>*> data, int start, int length);
    // public System.Boolean GetAttributeInt16Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Int16[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BB0
    bool GetAttributeInt16Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<int16_t>*> data, int start, int length);
    // public System.Boolean GetAttributeInt64Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attributeInfo, out System.Int64[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BB8
    bool GetAttributeInt64Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attributeInfo, ByRef<::Array<int64_t>*> data, int start, int length);
    // public System.Boolean GetGroupNames(System.Int32 nodeID, HoudiniEngineUnity.HAPI_GroupType groupType, ref System.Int32[] names, System.Int32 count)
    // Offset: 0x17D2BC0
    bool GetGroupNames(int nodeID, HoudiniEngineUnity::HAPI_GroupType groupType, ByRef<::Array<int>*> names, int count);
    // public System.Boolean GetGroupMembership(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.String groupName, ref System.Boolean membershipArrayAllEqual, out System.Int32[] membershipArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BC8
    bool GetGroupMembership(int nodeID, int partID, HoudiniEngineUnity::HAPI_GroupType groupType, ::Il2CppString* groupName, ByRef<bool> membershipArrayAllEqual, ByRef<::Array<int>*> membershipArray, int start, int length);
    // public System.Boolean GetGroupCountOnPackedInstancePart(System.Int32 nodeID, System.Int32 partID, out System.Int32 pointGroupCount, out System.Int32 primitiveGroupCount)
    // Offset: 0x17D2BD0
    bool GetGroupCountOnPackedInstancePart(int nodeID, int partID, ByRef<int> pointGroupCount, ByRef<int> primitiveGroupCount);
    // public System.Boolean GetGroupNamesOnPackedInstancePart(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, ref System.Int32[] groupNamesArray, System.Int32 groupCount)
    // Offset: 0x17D2BE0
    bool GetGroupNamesOnPackedInstancePart(int nodeID, int partID, HoudiniEngineUnity::HAPI_GroupType groupType, ByRef<::Array<int>*> groupNamesArray, int groupCount);
    // public System.Boolean GetGroupMembershipOnPackedInstancePart(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.String groupName, ref System.Boolean membershipArrayAllEqual, out System.Int32[] membershipArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BE8
    bool GetGroupMembershipOnPackedInstancePart(int nodeID, int partID, HoudiniEngineUnity::HAPI_GroupType groupType, ::Il2CppString* groupName, ByRef<bool> membershipArrayAllEqual, ByRef<::Array<int>*> membershipArray, int start, int length);
    // public System.Boolean GetInstancedPartIds(System.Int32 nodeID, System.Int32 partID, out System.Int32[] instancedPartsArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BF0
    bool GetInstancedPartIds(int nodeID, int partID, ByRef<::Array<int>*> instancedPartsArray, int start, int length);
    // public System.Boolean GetInstancerPartTransforms(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_RSTOrder rstOrder, out HoudiniEngineUnity.HAPI_Transform[] transformsArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2BF8
    bool GetInstancerPartTransforms(int nodeID, int partID, HoudiniEngineUnity::HAPI_RSTOrder rstOrder, ByRef<::Array<HoudiniEngineUnity::HAPI_Transform>*> transformsArray, int start, int length);
    // public System.Boolean GetInstanceTransformsOnPart(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_RSTOrder rstOrder, out HoudiniEngineUnity.HAPI_Transform[] transformsArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C00
    bool GetInstanceTransformsOnPart(int nodeID, int partID, HoudiniEngineUnity::HAPI_RSTOrder rstOrder, ByRef<::Array<HoudiniEngineUnity::HAPI_Transform>*> transformsArray, int start, int length);
    // public System.Boolean GetInstancedObjectIds(System.Int32 nodeID, out System.Int32[] instanced_node_id_array, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C08
    bool GetInstancedObjectIds(int nodeID, ByRef<::Array<int>*> instanced_node_id_array, int start, int length);
    // public System.Boolean GetFaceCounts(System.Int32 nodeID, System.Int32 partID, out System.Int32[] faceCounts, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C10
    bool GetFaceCounts(int nodeID, int partID, ByRef<::Array<int>*> faceCounts, int start, int length);
    // public System.Boolean GetFaceCounts(System.Int32 nodeID, System.Int32 partID, out System.Int32[] faceCounts, System.Int32 start, System.Int32 length, System.Boolean bLogError)
    // Offset: 0x17D2C18
    bool GetFaceCounts(int nodeID, int partID, ByRef<::Array<int>*> faceCounts, int start, int length, bool bLogError);
    // public System.Boolean GetVertexList(System.Int32 nodeID, System.Int32 partID, out System.Int32[] vertexList, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C20
    bool GetVertexList(int nodeID, int partID, ByRef<::Array<int>*> vertexList, int start, int length);
    // public System.Boolean GetBoxInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_BoxInfo boxInfo)
    // Offset: 0x17D2C28
    bool GetBoxInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_BoxInfo> boxInfo);
    // public System.Boolean GetSphereInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_SphereInfo sphereInfo)
    // Offset: 0x17D2C30
    bool GetSphereInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_SphereInfo> sphereInfo);
    // public System.Boolean GetCurveInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_CurveInfo curveInfo)
    // Offset: 0x17D2C38
    bool GetCurveInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_CurveInfo> curveInfo);
    // public System.Boolean GetCurveCounts(System.Int32 nodeID, System.Int32 partID, out System.Int32[] counts, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C40
    bool GetCurveCounts(int nodeID, int partID, ByRef<::Array<int>*> counts, int start, int length);
    // public System.Boolean GetCurveOrders(System.Int32 nodeID, System.Int32 partID, out System.Int32[] orders, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C48
    bool GetCurveOrders(int nodeID, int partID, ByRef<::Array<int>*> orders, int start, int length);
    // public System.Boolean GetCurveKnots(System.Int32 nodeID, System.Int32 partID, out System.Single[] knots, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C50
    bool GetCurveKnots(int nodeID, int partID, ByRef<::Array<float>*> knots, int start, int length);
    // public System.Boolean SetPartInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_PartInfo partInfo)
    // Offset: 0x17D2C58
    bool SetPartInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_PartInfo> partInfo);
    // public System.Boolean SetFaceCount(System.Int32 nodeID, System.Int32 partID, System.Int32[] faceCounts, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C60
    bool SetFaceCount(int nodeID, int partID, ::Array<int>* faceCounts, int start, int length);
    // public System.Boolean SetVertexList(System.Int32 nodeID, System.Int32 partID, System.Int32[] vertexList, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C68
    bool SetVertexList(int nodeID, int partID, ::Array<int>* vertexList, int start, int length);
    // public System.Boolean SetAttributeIntData(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo, System.Int32[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C70
    bool SetAttributeIntData(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo, ::Array<int>* data, int start, int length);
    // public System.Boolean SetAttributeInt8Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo, System.SByte[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C78
    bool SetAttributeInt8Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo, ::Array<int8_t>* data, int start, int length);
    // public System.Boolean SetAttributeInt16Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo, System.Int16[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C80
    bool SetAttributeInt16Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo, ::Array<int16_t>* data, int start, int length);
    // public System.Boolean SetAttributeInt64Data(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo, System.Int64[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C88
    bool SetAttributeInt64Data(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo, ::Array<int64_t>* data, int start, int length);
    // public System.Boolean SetAttributeFloatData(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo, System.Single[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C90
    bool SetAttributeFloatData(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo, ::Array<float>* data, int start, int length);
    // public System.Boolean SetAttributeStringData(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo, System.String[] data, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2C98
    bool SetAttributeStringData(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo, ::Array<::Il2CppString*>* data, int start, int length);
    // public System.Boolean AddAttribute(System.Int32 nodeID, System.Int32 partID, System.String name, ref HoudiniEngineUnity.HAPI_AttributeInfo attrInfo)
    // Offset: 0x17D2CA0
    bool AddAttribute(int nodeID, int partID, ::Il2CppString* name, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo> attrInfo);
    // public System.Boolean AddGroup(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.String groupName)
    // Offset: 0x17D2CA8
    bool AddGroup(int nodeID, int partID, HoudiniEngineUnity::HAPI_GroupType groupType, ::Il2CppString* groupName);
    // public System.Boolean DeleteGroup(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.String groupName)
    // Offset: 0x17D2CB0
    bool DeleteGroup(int nodeID, int partID, HoudiniEngineUnity::HAPI_GroupType groupType, ::Il2CppString* groupName);
    // public System.Boolean SetGroupMembership(System.Int32 nodeID, System.Int32 partID, HoudiniEngineUnity.HAPI_GroupType groupType, System.String groupName, out System.Int32[] membershipArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2CB8
    bool SetGroupMembership(int nodeID, int partID, HoudiniEngineUnity::HAPI_GroupType groupType, ::Il2CppString* groupName, ByRef<::Array<int>*> membershipArray, int start, int length);
    // public System.Boolean CommitGeo(System.Int32 nodeID)
    // Offset: 0x17D2CC0
    bool CommitGeo(int nodeID);
    // public System.Boolean RevertGeo(System.Int32 nodeID)
    // Offset: 0x17D2CC8
    bool RevertGeo(int nodeID);
    // public System.Boolean SetCurveInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_CurveInfo curveInfo)
    // Offset: 0x17D2CD0
    bool SetCurveInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_CurveInfo> curveInfo);
    // public System.Boolean SetCurveCounts(System.Int32 nodeID, System.Int32 partID, System.Int32[] counts, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2CD8
    bool SetCurveCounts(int nodeID, int partID, ::Array<int>* counts, int start, int length);
    // public System.Boolean SetCurveOrders(System.Int32 nodeID, System.Int32 partID, System.Int32[] orders, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2CE0
    bool SetCurveOrders(int nodeID, int partID, ::Array<int>* orders, int start, int length);
    // public System.Boolean SetCurveKnots(System.Int32 nodeID, System.Int32 partID, System.Single[] knots, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2CE8
    bool SetCurveKnots(int nodeID, int partID, ::Array<float>* knots, int start, int length);
    // public System.Boolean GetMaterialOnPart(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_MaterialInfo materialInfo)
    // Offset: 0x17D2CF0
    bool GetMaterialOnPart(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_MaterialInfo> materialInfo);
    // public System.Boolean GetMaterialNodeIDsOnFaces(System.Int32 nodeID, System.Int32 partID, ref System.Boolean bSingleFaceMaterial, out System.Int32[] materialNodeIDs, System.Int32 faceCount)
    // Offset: 0x17D2CF8
    bool GetMaterialNodeIDsOnFaces(int nodeID, int partID, ByRef<bool> bSingleFaceMaterial, ByRef<::Array<int>*> materialNodeIDs, int faceCount);
    // public System.Boolean GetMaterialInfo(System.Int32 materialNodeID, ref HoudiniEngineUnity.HAPI_MaterialInfo materialInfo, System.Boolean bLogError)
    // Offset: 0x17D2D00
    bool GetMaterialInfo(int materialNodeID, ByRef<HoudiniEngineUnity::HAPI_MaterialInfo> materialInfo, bool bLogError);
    // public System.Boolean GetImageInfo(System.Int32 materialNodeID, ref HoudiniEngineUnity.HAPI_ImageInfo imageInfo)
    // Offset: 0x17D2D08
    bool GetImageInfo(int materialNodeID, ByRef<HoudiniEngineUnity::HAPI_ImageInfo> imageInfo);
    // public System.Boolean SetImageInfo(System.Int32 materialNodeID, ref HoudiniEngineUnity.HAPI_ImageInfo imageInfo)
    // Offset: 0x17D2D10
    bool SetImageInfo(int materialNodeID, ByRef<HoudiniEngineUnity::HAPI_ImageInfo> imageInfo);
    // public System.Boolean RenderTextureToImage(System.Int32 materialNodeID, System.Int32 parmID, System.Boolean bLogError)
    // Offset: 0x17D2D18
    bool RenderTextureToImage(int materialNodeID, int parmID, bool bLogError);
    // public System.Boolean RenderCOPToImage(System.Int32 copNodeID)
    // Offset: 0x17D2D20
    bool RenderCOPToImage(int copNodeID);
    // public System.Boolean ExtractImageToMemory(System.Int32 nodeID, System.String fileFormat, System.String imagePlanes, out System.Byte[] buffer)
    // Offset: 0x17D2D28
    bool ExtractImageToMemory(int nodeID, ::Il2CppString* fileFormat, ::Il2CppString* imagePlanes, ByRef<::Array<uint8_t>*> buffer);
    // public System.Boolean GetImagePlanes(System.Int32 nodeID, out System.Int32[] imagePlanes, System.Int32 numImagePlanes)
    // Offset: 0x17D2D84
    bool GetImagePlanes(int nodeID, ByRef<::Array<int>*> imagePlanes, int numImagePlanes);
    // public System.Boolean ExtractImageToFile(System.Int32 nodeID, System.String fileFormat, System.String imagePlanes, System.String destinationFolderPath, out System.String destinationFilePath)
    // Offset: 0x17D2DD8
    bool ExtractImageToFile(int nodeID, ::Il2CppString* fileFormat, ::Il2CppString* imagePlanes, ::Il2CppString* destinationFolderPath, ByRef<::Il2CppString*> destinationFilePath);
    // public System.Boolean GetParams(System.Int32 nodeID, out HoudiniEngineUnity.HAPI_ParmInfo[] parmInfos, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2DE4
    bool GetParams(int nodeID, ByRef<::Array<HoudiniEngineUnity::HAPI_ParmInfo>*> parmInfos, int start, int length);
    // public System.Boolean GetParmTagName(System.Int32 nodeID, System.Int32 parmID, System.Int32 tagIndex, out System.Int32 tagName)
    // Offset: 0x17D2DEC
    bool GetParmTagName(int nodeID, int parmID, int tagIndex, ByRef<int> tagName);
    // public System.Boolean GetParmTagValue(System.Int32 nodeID, System.Int32 parmID, System.String tagName, out System.Int32 tagValue)
    // Offset: 0x17D2DF8
    bool GetParmTagValue(int nodeID, int parmID, ::Il2CppString* tagName, ByRef<int> tagValue);
    // public System.Boolean ParmHasTag(System.Int32 nodeID, System.Int32 parmID, System.String tagName, ref System.Boolean hasTag)
    // Offset: 0x17D2E04
    bool ParmHasTag(int nodeID, int parmID, ::Il2CppString* tagName, ByRef<bool> hasTag);
    // public System.Boolean GetParamIntValues(System.Int32 nodeID, out System.Int32[] values, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2E0C
    bool GetParamIntValues(int nodeID, ByRef<::Array<int>*> values, int start, int length);
    // public System.Boolean GetParamIntValue(System.Int32 nodeID, System.String parmName, System.Int32 index, out System.Int32 value)
    // Offset: 0x17D2E14
    bool GetParamIntValue(int nodeID, ::Il2CppString* parmName, int index, ByRef<int> value);
    // public System.Boolean GetParamFloatValues(System.Int32 nodeID, out System.Single[] values, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2E20
    bool GetParamFloatValues(int nodeID, ByRef<::Array<float>*> values, int start, int length);
    // public System.Boolean GetParamFloatValue(System.Int32 nodeID, System.String parmName, System.Int32 index, out System.Single value)
    // Offset: 0x17D2E28
    bool GetParamFloatValue(int nodeID, ::Il2CppString* parmName, int index, ByRef<float> value);
    // public System.Boolean GetParamStringValues(System.Int32 nodeID, out System.Int32[] values, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2E34
    bool GetParamStringValues(int nodeID, ByRef<::Array<int>*> values, int start, int length);
    // public System.Boolean GetParamStringValue(System.Int32 nodeID, System.String parmName, System.Int32 index, out System.Int32 value)
    // Offset: 0x17D2E3C
    bool GetParamStringValue(int nodeID, ::Il2CppString* parmName, int index, ByRef<int> value);
    // public System.Boolean GetParamNodeValue(System.Int32 nodeID, System.String paramName, out System.Int32 nodeValue)
    // Offset: 0x17D2E48
    bool GetParamNodeValue(int nodeID, ::Il2CppString* paramName, ByRef<int> nodeValue);
    // public System.Boolean GetParamChoiceValues(System.Int32 nodeID, out HoudiniEngineUnity.HAPI_ParmChoiceInfo[] values, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2E58
    bool GetParamChoiceValues(int nodeID, ByRef<::Array<HoudiniEngineUnity::HAPI_ParmChoiceInfo>*> values, int start, int length);
    // public System.Boolean SetParamIntValues(System.Int32 nodeID, ref System.Int32[] values, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2E60
    bool SetParamIntValues(int nodeID, ByRef<::Array<int>*> values, int start, int length);
    // public System.Boolean SetParamIntValue(System.Int32 nodeID, System.String paramName, System.Int32 index, System.Int32 value)
    // Offset: 0x17D2E68
    bool SetParamIntValue(int nodeID, ::Il2CppString* paramName, int index, int value);
    // public System.Boolean SetParamFloatValues(System.Int32 nodeID, ref System.Single[] values, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2E70
    bool SetParamFloatValues(int nodeID, ByRef<::Array<float>*> values, int start, int length);
    // public System.Boolean SetParamFloatValue(System.Int32 nodeID, System.String paramName, System.Int32 index, System.Single value)
    // Offset: 0x17D2E78
    bool SetParamFloatValue(int nodeID, ::Il2CppString* paramName, int index, float value);
    // public System.Boolean SetParamStringValue(System.Int32 nodeID, System.String strValue, System.Int32 parmID, System.Int32 index)
    // Offset: 0x17D2E80
    bool SetParamStringValue(int nodeID, ::Il2CppString* strValue, int parmID, int index);
    // public System.Boolean SetParamStringValue(System.Int32 nodeID, System.String parmName, System.String parmValue, System.Int32 index)
    // Offset: 0x17D2E88
    bool SetParamStringValue(int nodeID, ::Il2CppString* parmName, ::Il2CppString* parmValue, int index);
    // public System.Boolean SetParamNodeValue(System.Int32 nodeID, System.String paramName, System.Int32 nodeValueID)
    // Offset: 0x17D2E90
    bool SetParamNodeValue(int nodeID, ::Il2CppString* paramName, int nodeValueID);
    // public System.Boolean InsertMultiparmInstance(System.Int32 nodeID, System.Int32 parmID, System.Int32 instancePosition)
    // Offset: 0x17D2E98
    bool InsertMultiparmInstance(int nodeID, int parmID, int instancePosition);
    // public System.Boolean RemoveMultiParmInstance(System.Int32 nodeID, System.Int32 parmID, System.Int32 instancePosition)
    // Offset: 0x17D2EA0
    bool RemoveMultiParmInstance(int nodeID, int parmID, int instancePosition);
    // public System.Boolean GetParmWithTag(System.Int32 nodeID, System.String tagName, ref System.Int32 parmID)
    // Offset: 0x17D2EA8
    bool GetParmWithTag(int nodeID, ::Il2CppString* tagName, ByRef<int> parmID);
    // public System.Boolean RevertParmToDefault(System.Int32 nodeID, System.String parm_name, System.Int32 index)
    // Offset: 0x17D2EB0
    bool RevertParmToDefault(int nodeID, ::Il2CppString* parm_name, int index);
    // public System.Boolean RevertParmToDefaults(System.Int32 nodeID, System.String parm_name)
    // Offset: 0x17D2EB8
    bool RevertParmToDefaults(int nodeID, ::Il2CppString* parm_name);
    // public System.Boolean GetParmIDFromName(System.Int32 nodeID, System.String parmName, out System.Int32 parmID)
    // Offset: 0x17D2EC0
    bool GetParmIDFromName(int nodeID, ::Il2CppString* parmName, ByRef<int> parmID);
    // public System.Boolean GetParmStringValue(System.Int32 nodeID, System.String parmName, System.Int32 index, System.Boolean evaluate, out System.Int32 value)
    // Offset: 0x17D2ED0
    bool GetParmStringValue(int nodeID, ::Il2CppString* parmName, int index, bool evaluate, ByRef<int> value);
    // public System.Boolean CreateInputNode(out System.Int32 nodeID, System.String name)
    // Offset: 0x17D2EDC
    bool CreateInputNode(ByRef<int> nodeID, ::Il2CppString* name);
    // public System.Boolean CreateHeightFieldInput(System.Int32 parentNodeID, System.String name, System.Int32 xSize, System.Int32 ySize, System.Single voxelSize, HoudiniEngineUnity.HAPI_HeightFieldSampling sampling, out System.Int32 heightfieldNodeID, out System.Int32 heightNodeID, out System.Int32 maskNodeID, out System.Int32 mergeNodeID)
    // Offset: 0x17D2EEC
    bool CreateHeightFieldInput(int parentNodeID, ::Il2CppString* name, int xSize, int ySize, float voxelSize, HoudiniEngineUnity::HAPI_HeightFieldSampling sampling, ByRef<int> heightfieldNodeID, ByRef<int> heightNodeID, ByRef<int> maskNodeID, ByRef<int> mergeNodeID);
    // public System.Boolean CreateHeightfieldInputVolumeNode(System.Int32 parentNodeID, out System.Int32 newNodeID, System.String name, System.Int32 xSize, System.Int32 ySize, System.Single voxelSize)
    // Offset: 0x17D2F0C
    bool CreateHeightfieldInputVolumeNode(int parentNodeID, ByRef<int> newNodeID, ::Il2CppString* name, int xSize, int ySize, float voxelSize);
    // public System.Boolean GetPreset(System.Int32 nodeID, out System.Byte[] presetData)
    // Offset: 0x17D2F1C
    bool GetPreset(int nodeID, ByRef<::Array<uint8_t>*> presetData);
    // public System.Boolean SetPreset(System.Int32 nodeID, System.Byte[] presetData)
    // Offset: 0x17D2F78
    bool SetPreset(int nodeID, ::Array<uint8_t>* presetData);
    // public System.Boolean GetVolumeInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_VolumeInfo volumeInfo)
    // Offset: 0x17D2F80
    bool GetVolumeInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_VolumeInfo> volumeInfo);
    // public System.Boolean GetHeightFieldData(System.Int32 nodeID, System.Int32 partID, System.Single[] valuesArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D2F88
    bool GetHeightFieldData(int nodeID, int partID, ::Array<float>* valuesArray, int start, int length);
    // public System.Boolean SetVolumeInfo(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_VolumeInfo volumeInfo)
    // Offset: 0x17D2F90
    bool SetVolumeInfo(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_VolumeInfo> volumeInfo);
    // public System.Boolean SetVolumeTileFloatData(System.Int32 nodeID, System.Int32 partID, ref HoudiniEngineUnity.HAPI_VolumeTileInfo tileInfo, System.Single[] valuesArray, System.Int32 length)
    // Offset: 0x17D2F98
    bool SetVolumeTileFloatData(int nodeID, int partID, ByRef<HoudiniEngineUnity::HAPI_VolumeTileInfo> tileInfo, ::Array<float>* valuesArray, int length);
    // public System.Boolean GetVolumeBounds(System.Int32 nodeID, System.Int32 partID, out System.Single x_min, out System.Single y_min, out System.Single z_min, out System.Single x_max, out System.Single y_max, out System.Single z_max, out System.Single x_center, out System.Single y_center, out System.Single z_center)
    // Offset: 0x17D2FEC
    bool GetVolumeBounds(int nodeID, int partID, ByRef<float> x_min, ByRef<float> y_min, ByRef<float> z_min, ByRef<float> x_max, ByRef<float> y_max, ByRef<float> z_max, ByRef<float> x_center, ByRef<float> y_center, ByRef<float> z_center);
    // public System.Boolean SetHeightFieldData(System.Int32 nodeID, System.Int32 partID, System.String name, System.Single[] valuesArray, System.Int32 start, System.Int32 length)
    // Offset: 0x17D3020
    bool SetHeightFieldData(int nodeID, int partID, ::Il2CppString* name, ::Array<float>* valuesArray, int start, int length);
    // public System.Boolean GetActiveCacheCount(out System.Int32 activeCacheCount)
    // Offset: 0x17D3028
    bool GetActiveCacheCount(ByRef<int> activeCacheCount);
    // public System.Boolean GetActiveCacheNames(out System.Int32[] cacheNamesArray, System.Int32 activeCacheCount)
    // Offset: 0x17D3034
    bool GetActiveCacheNames(ByRef<::Array<int>*> cacheNamesArray, int activeCacheCount);
    // public System.Boolean GetCacheProperty(System.String cacheName, HoudiniEngineUnity.HAPI_CacheProperty cacheProperty, out System.Int32 propertyValue)
    // Offset: 0x17D303C
    bool GetCacheProperty(::Il2CppString* cacheName, HoudiniEngineUnity::HAPI_CacheProperty cacheProperty, ByRef<int> propertyValue);
    // public System.Boolean SetCacheProperty(System.String cacheName, HoudiniEngineUnity.HAPI_CacheProperty cacheProperty, System.Int32 propertyValue)
    // Offset: 0x17D3048
    bool SetCacheProperty(::Il2CppString* cacheName, HoudiniEngineUnity::HAPI_CacheProperty cacheProperty, int propertyValue);
    // public System.Boolean SaveGeoToFile(System.Int32 nodeID, System.String fileName)
    // Offset: 0x17D3050
    bool SaveGeoToFile(int nodeID, ::Il2CppString* fileName);
    // public System.Boolean LoadGeoFromFile(System.Int32 nodeID, System.String file_name)
    // Offset: 0x17D3058
    bool LoadGeoFromFile(int nodeID, ::Il2CppString* file_name);
    // public System.Boolean SaveNodeToFile(System.Int32 nodeID, System.String fileName)
    // Offset: 0x17D3060
    bool SaveNodeToFile(int nodeID, ::Il2CppString* fileName);
    // public System.Boolean LoadNodeFromFile(System.String file_name, System.Int32 parentNodeID, System.String nodeLabel, System.Boolean cook_on_load, out System.Int32 newNodeID)
    // Offset: 0x17D3068
    bool LoadNodeFromFile(::Il2CppString* file_name, int parentNodeID, ::Il2CppString* nodeLabel, bool cook_on_load, ByRef<int> newNodeID);
    // public System.Boolean GetGeoSize(System.Int32 nodeID, System.String format, out System.Int32 size)
    // Offset: 0x17D3078
    bool GetGeoSize(int nodeID, ::Il2CppString* format, ByRef<int> size);
    // public System.Boolean GetHandleInfo(System.Int32 nodeID, out HoudiniEngineUnity.HAPI_HandleInfo[] handleInfos, System.Int32 start, System.Int32 length)
    // Offset: 0x17D3084
    bool GetHandleInfo(int nodeID, ByRef<::Array<HoudiniEngineUnity::HAPI_HandleInfo>*> handleInfos, int start, int length);
    // public System.Boolean GetHandleBindingInfo(System.Int32 nodeID, System.Int32 handleIndex, out HoudiniEngineUnity.HAPI_HandleBindingInfo[] handleBindingInfos, System.Int32 start, System.Int32 length)
    // Offset: 0x17D308C
    bool GetHandleBindingInfo(int nodeID, int handleIndex, ByRef<::Array<HoudiniEngineUnity::HAPI_HandleBindingInfo>*> handleBindingInfos, int start, int length);
    // public System.Boolean ConvertTransform(ref HoudiniEngineUnity.HAPI_TransformEuler inTransform, HoudiniEngineUnity.HAPI_RSTOrder RSTOrder, HoudiniEngineUnity.HAPI_XYZOrder ROTOrder, out HoudiniEngineUnity.HAPI_TransformEuler outTransform)
    // Offset: 0x17D3094
    bool ConvertTransform(ByRef<HoudiniEngineUnity::HAPI_TransformEuler> inTransform, HoudiniEngineUnity::HAPI_RSTOrder RSTOrder, HoudiniEngineUnity::HAPI_XYZOrder ROTOrder, ByRef<HoudiniEngineUnity::HAPI_TransformEuler> outTransform);
    // public System.Boolean GetTotalCookCount(System.Int32 nodeID, System.Int32 nodeTypeFilter, System.Int32 nodeFlagFilter, System.Boolean includeChildren, out System.Int32 count)
    // Offset: 0x17D30A8
    bool GetTotalCookCount(int nodeID, int nodeTypeFilter, int nodeFlagFilter, bool includeChildren, ByRef<int> count);
    // public System.Boolean SetSessionSync(System.Boolean enable)
    // Offset: 0x17D30B4
    bool SetSessionSync(bool enable);
    // public System.Boolean GetViewport(ref HoudiniEngineUnity.HAPI_Viewport viewport)
    // Offset: 0x17D30BC
    bool GetViewport(ByRef<HoudiniEngineUnity::HAPI_Viewport> viewport);
    // public System.Boolean SetViewport(ref HoudiniEngineUnity.HAPI_Viewport viewport)
    // Offset: 0x17D30C4
    bool SetViewport(ByRef<HoudiniEngineUnity::HAPI_Viewport> viewport);
    // public System.Boolean GetSessionSyncInfo(ref HoudiniEngineUnity.HAPI_SessionSyncInfo syncInfo)
    // Offset: 0x17D30CC
    bool GetSessionSyncInfo(ByRef<HoudiniEngineUnity::HAPI_SessionSyncInfo> syncInfo);
    // public System.Boolean SetSessionSyncInfo(ref HoudiniEngineUnity.HAPI_SessionSyncInfo syncInfo)
    // Offset: 0x17D30D4
    bool SetSessionSyncInfo(ByRef<HoudiniEngineUnity::HAPI_SessionSyncInfo> syncInfo);
    // public System.Boolean SetNodeDisplay(System.Int32 node_id, System.Int32 onOff)
    // Offset: 0x17D30DC
    bool SetNodeDisplay(int node_id, int onOff);
    // public System.Void .ctor()
    // Offset: 0x17D24A8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_SessionBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_SessionBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_SessionBase*, creationType>()));
    }
  }; // HoudiniEngineUnity.HEU_SessionBase
  #pragma pack(pop)
  static check_size<sizeof(HEU_SessionBase), 44 + sizeof(HoudiniEngineUnity::HAPI_Result)> __HoudiniEngineUnity_HEU_SessionBaseSizeCheck;
  static_assert(sizeof(HEU_SessionBase) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_SessionBase*, "HoudiniEngineUnity", "HEU_SessionBase");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::get_UserNotifiedSessionInvalid
// Il2CppName: get_UserNotifiedSessionInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::get_UserNotifiedSessionInvalid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "get_UserNotifiedSessionInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::set_UserNotifiedSessionInvalid
// Il2CppName: set_UserNotifiedSessionInvalid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::set_UserNotifiedSessionInvalid)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "set_UserNotifiedSessionInvalid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::get_ConnectionState
// Il2CppName: get_ConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::SessionConnectionState (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::get_ConnectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "get_ConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::set_ConnectionState
// Il2CppName: set_ConnectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::SessionConnectionState)>(&HoudiniEngineUnity::HEU_SessionBase::set_ConnectionState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "SessionConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "set_ConnectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::get_ThisSessionMode
// Il2CppName: get_ThisSessionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::SessionMode (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::get_ThisSessionMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "get_ThisSessionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::set_ThisSessionMode
// Il2CppName: set_ThisSessionMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::SessionMode)>(&HoudiniEngineUnity::HEU_SessionBase::set_ThisSessionMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "SessionMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "set_ThisSessionMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetSessionErrorMsg
// Il2CppName: GetSessionErrorMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::GetSessionErrorMsg)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetSessionErrorMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::get_LogErrorOverride
// Il2CppName: get_LogErrorOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::get_LogErrorOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "get_LogErrorOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::set_LogErrorOverride
// Il2CppName: set_LogErrorOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::set_LogErrorOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "set_LogErrorOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::get_ThrowErrorOverride
// Il2CppName: get_ThrowErrorOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::get_ThrowErrorOverride)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "get_ThrowErrorOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::set_ThrowErrorOverride
// Il2CppName: set_ThrowErrorOverride
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::set_ThrowErrorOverride)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "set_ThrowErrorOverride", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::IsSessionSync
// Il2CppName: IsSessionSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::IsSessionSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "IsSessionSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::get_LastCallResultCode
// Il2CppName: get_LastCallResultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HAPI_Result (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::get_LastCallResultCode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "get_LastCallResultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::set_LastCallResultCode
// Il2CppName: set_LastCallResultCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HAPI_Result)>(&HoudiniEngineUnity::HEU_SessionBase::set_LastCallResultCode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Result")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "set_LastCallResultCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetRegisteredAssetFromID
// Il2CppName: GetRegisteredAssetFromID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_HoudiniAsset* (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::GetRegisteredAssetFromID)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetRegisteredAssetFromID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::IsAssetRegistered
// Il2CppName: IsAssetRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HEU_HoudiniAsset*)>(&HoudiniEngineUnity::HEU_SessionBase::IsAssetRegistered)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "IsAssetRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RegisterAsset
// Il2CppName: RegisterAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HEU_HoudiniAsset*)>(&HoudiniEngineUnity::HEU_SessionBase::RegisterAsset)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RegisterAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::UnregisterAsset
// Il2CppName: UnregisterAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::UnregisterAsset)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "UnregisterAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ReregisterOnAwake
// Il2CppName: ReregisterOnAwake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HEU_HoudiniAsset*)>(&HoudiniEngineUnity::HEU_SessionBase::ReregisterOnAwake)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_HoudiniAsset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ReregisterOnAwake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetSessionErrorMsg
// Il2CppName: SetSessionErrorMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, bool)>(&HoudiniEngineUnity::HEU_SessionBase::SetSessionErrorMsg)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetSessionErrorMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetSessionConnectionErrorMsg
// Il2CppName: SetSessionConnectionErrorMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, HoudiniEngineUnity::HAPI_Result, bool, bool)>(&HoudiniEngineUnity::HEU_SessionBase::SetSessionConnectionErrorMsg)> {
  static const MethodInfo* get() {
    static auto* introMsg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* result = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Result")->byval_arg;
    static auto* bIsHARSRunning = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetSessionConnectionErrorMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{introMsg, result, bIsHARSRunning, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetLibraryErrorMsg
// Il2CppName: SetLibraryErrorMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::SetLibraryErrorMsg)> {
  static const MethodInfo* get() {
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetLibraryErrorMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateSessionData
// Il2CppName: CreateSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool, bool)>(&HoudiniEngineUnity::HEU_SessionBase::CreateSessionData)> {
  static const MethodInfo* get() {
    static auto* bOverwriteExisting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bOverwriteExisting, bIsDefaultSession});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateInProcessSession
// Il2CppName: CreateInProcessSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::CreateInProcessSession)> {
  static const MethodInfo* get() {
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateInProcessSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsDefaultSession});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateThriftSocketSession
// Il2CppName: CreateThriftSocketSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool, ::Il2CppString*, int, bool, float, bool)>(&HoudiniEngineUnity::HEU_SessionBase::CreateThriftSocketSession)> {
  static const MethodInfo* get() {
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateThriftSocketSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsDefaultSession, hostName, serverPort, autoClose, timeout, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateThriftPipeSession
// Il2CppName: CreateThriftPipeSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool, ::Il2CppString*, bool, float, bool)>(&HoudiniEngineUnity::HEU_SessionBase::CreateThriftPipeSession)> {
  static const MethodInfo* get() {
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pipeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateThriftPipeSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsDefaultSession, pipeName, autoClose, timeout, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateCustomSession
// Il2CppName: CreateCustomSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::CreateCustomSession)> {
  static const MethodInfo* get() {
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateCustomSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsDefaultSession});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ConnectThriftSocketSession
// Il2CppName: ConnectThriftSocketSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool, ::Il2CppString*, int, bool, float, bool, bool)>(&HoudiniEngineUnity::HEU_SessionBase::ConnectThriftSocketSession)> {
  static const MethodInfo* get() {
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* serverPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* logError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoInitialize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ConnectThriftSocketSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsDefaultSession, hostName, serverPort, autoClose, timeout, logError, autoInitialize});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ConnectThriftPipeSession
// Il2CppName: ConnectThriftPipeSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool, ::Il2CppString*, bool, float, bool, bool)>(&HoudiniEngineUnity::HEU_SessionBase::ConnectThriftPipeSession)> {
  static const MethodInfo* get() {
    static auto* bIsDefaultSession = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pipeName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* autoClose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timeout = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* logError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* autoInitialize = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ConnectThriftPipeSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bIsDefaultSession, pipeName, autoClose, timeout, logError, autoInitialize});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CloseSession
// Il2CppName: CloseSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::CloseSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CloseSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CheckAndCloseExistingSession
// Il2CppName: CheckAndCloseExistingSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::CheckAndCloseExistingSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CheckAndCloseExistingSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ClearSessionInfo
// Il2CppName: ClearSessionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::ClearSessionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ClearSessionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetSessionData
// Il2CppName: SetSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HEU_SessionData*)>(&HoudiniEngineUnity::HEU_SessionBase::SetSessionData)> {
  static const MethodInfo* get() {
    static auto* sessionData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetSessionData
// Il2CppName: GetSessionData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<HoudiniEngineUnity::HEU_SessionData* (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::GetSessionData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetSessionData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetSessionInfo
// Il2CppName: GetSessionInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::GetSessionInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetSessionInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::IsSessionValid
// Il2CppName: IsSessionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::IsSessionValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "IsSessionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RestartSession
// Il2CppName: RestartSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::RestartSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RestartSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetLastSessionError
// Il2CppName: GetLastSessionError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::GetLastSessionError)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetLastSessionError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CheckVersionMatch
// Il2CppName: CheckVersionMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::CheckVersionMatch)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CheckVersionMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::InitializeSession
// Il2CppName: InitializeSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HEU_SessionData*)>(&HoudiniEngineUnity::HEU_SessionBase::InitializeSession)> {
  static const MethodInfo* get() {
    static auto* sessionData = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_SessionData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "InitializeSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::HandleStatusResult
// Il2CppName: HandleStatusResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HAPI_Result, ::Il2CppString*, bool, bool)>(&HoudiniEngineUnity::HEU_SessionBase::HandleStatusResult)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Result")->byval_arg;
    static auto* prependMsg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bThrowError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "HandleStatusResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result, prependMsg, bThrowError, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetServerEnvString
// Il2CppName: SetServerEnvString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::SetServerEnvString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetServerEnvString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetServerEnvString
// Il2CppName: GetServerEnvString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, ByRef<::Il2CppString*>)>(&HoudiniEngineUnity::HEU_SessionBase::GetServerEnvString)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetServerEnvString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetServerEnvVarCount
// Il2CppName: GetServerEnvVarCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetServerEnvVarCount)> {
  static const MethodInfo* get() {
    static auto* env_count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetServerEnvVarCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{env_count});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCallResult
// Il2CppName: GetCallResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_Result>)>(&HoudiniEngineUnity::HEU_SessionBase::GetCallResult)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Result")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCallResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCookResult
// Il2CppName: GetCookResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_Result>)>(&HoudiniEngineUnity::HEU_SessionBase::GetCookResult)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Result")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCookResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCookState
// Il2CppName: GetCookState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_State>)>(&HoudiniEngineUnity::HEU_SessionBase::GetCookState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_State")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCookState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetStatusString
// Il2CppName: GetStatusString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HAPI_StatusType, HoudiniEngineUnity::HAPI_StatusVerbosity)>(&HoudiniEngineUnity::HEU_SessionBase::GetStatusString)> {
  static const MethodInfo* get() {
    static auto* statusType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_StatusType")->byval_arg;
    static auto* verbosity = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_StatusVerbosity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetStatusString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{statusType, verbosity});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ComposeNodeCookResult
// Il2CppName: ComposeNodeCookResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (HoudiniEngineUnity::HEU_SessionBase::*)(int, HoudiniEngineUnity::HAPI_StatusVerbosity)>(&HoudiniEngineUnity::HEU_SessionBase::ComposeNodeCookResult)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* verbosity = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_StatusVerbosity")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ComposeNodeCookResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, verbosity});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetEnvInt
// Il2CppName: GetEnvInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HAPI_EnvIntType)>(&HoudiniEngineUnity::HEU_SessionBase::GetEnvInt)> {
  static const MethodInfo* get() {
    static auto* intType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_EnvIntType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetEnvInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{intType});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetSessionEnvInt
// Il2CppName: GetSessionEnvInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_SessionBase::*)(HoudiniEngineUnity::HAPI_SessionEnvIntType, bool)>(&HoudiniEngineUnity::HEU_SessionBase::GetSessionEnvInt)> {
  static const MethodInfo* get() {
    static auto* intType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_SessionEnvIntType")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetSessionEnvInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{intType, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Il2CppString*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetString)> {
  static const MethodInfo* get() {
    static auto* stringHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resultString = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* bufferLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringHandle, resultString, bufferLength});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetStringBufferLength
// Il2CppName: GetStringBufferLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::GetStringBufferLength)> {
  static const MethodInfo* get() {
    static auto* stringHandle = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetStringBufferLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stringHandle});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CheckForSpecificErrors
// Il2CppName: CheckForSpecificErrors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_SessionBase::*)(int, int)>(&HoudiniEngineUnity::HEU_SessionBase::CheckForSpecificErrors)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorsToCheck = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CheckForSpecificErrors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, errorsToCheck});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetTime
// Il2CppName: GetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::GetTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetTime
// Il2CppName: SetTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(float)>(&HoudiniEngineUnity::HEU_SessionBase::SetTime)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetUseHoudiniTime
// Il2CppName: GetUseHoudiniTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)()>(&HoudiniEngineUnity::HEU_SessionBase::GetUseHoudiniTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetUseHoudiniTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetUseHoudiniTime
// Il2CppName: SetUseHoudiniTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::SetUseHoudiniTime)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetUseHoudiniTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::LoadAssetLibraryFromFile
// Il2CppName: LoadAssetLibraryFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::LoadAssetLibraryFromFile)> {
  static const MethodInfo* get() {
    static auto* assetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bAllowOverwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* libraryID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "LoadAssetLibraryFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetPath, bAllowOverwrite, libraryID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::LoadAssetLibraryFromMemory
// Il2CppName: LoadAssetLibraryFromMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Array<uint8_t>*, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::LoadAssetLibraryFromMemory)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* bAllowOverwrite = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* libraryID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "LoadAssetLibraryFromMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, bAllowOverwrite, libraryID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateNode
// Il2CppName: CreateNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ::Il2CppString*, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::CreateNode)> {
  static const MethodInfo* get() {
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* operatorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nodeLabel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bCookOnCreation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* newNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentNodeID, operatorName, nodeLabel, bCookOnCreation, newNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::DeleteNode
// Il2CppName: DeleteNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::DeleteNode)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "DeleteNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CookNode
// Il2CppName: CookNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, bool, bool)>(&HoudiniEngineUnity::HEU_SessionBase::CookNode)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bCookTemplatedGeos = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* bSplitGeosByGroup = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CookNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, bCookTemplatedGeos, bSplitGeosByGroup});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CookNodeWithOptions
// Il2CppName: CookNodeWithOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, HoudiniEngineUnity::HAPI_CookOptions)>(&HoudiniEngineUnity::HEU_SessionBase::CookNodeWithOptions)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cookOptions = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_CookOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CookNodeWithOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, cookOptions});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RenameNode
// Il2CppName: RenameNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::RenameNode)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RenameNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, newName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ConnectNodeInput
// Il2CppName: ConnectNodeInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::ConnectNodeInput)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeIDToConnect = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* outputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ConnectNodeInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, inputIndex, nodeIDToConnect, outputIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::DisconnectNodeInput
// Il2CppName: DisconnectNodeInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, bool)>(&HoudiniEngineUnity::HEU_SessionBase::DisconnectNodeInput)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "DisconnectNodeInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, inputIndex, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::QueryNodeInput
// Il2CppName: QueryNodeInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<int>, bool)>(&HoudiniEngineUnity::HEU_SessionBase::QueryNodeInput)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connectedNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "QueryNodeInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, inputIndex, connectedNodeID, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetNodeInputName
// Il2CppName: GetNodeInputName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetNodeInputName)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* inputIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeNameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetNodeInputName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, inputIndex, nodeNameIndex});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAvailableAssetCount
// Il2CppName: GetAvailableAssetCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetAvailableAssetCount)> {
  static const MethodInfo* get() {
    static auto* libraryID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* assetCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAvailableAssetCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{libraryID, assetCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAvailableAssets
// Il2CppName: GetAvailableAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<int>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAvailableAssets)> {
  static const MethodInfo* get() {
    static auto* libraryID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* assetNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* assetCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAvailableAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{libraryID, assetNames, assetCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAssetInfo
// Il2CppName: GetAssetInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_AssetInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetAssetInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* assetInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AssetInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAssetInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, assetInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetNodeInfo
// Il2CppName: GetNodeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_NodeInfo>, bool)>(&HoudiniEngineUnity::HEU_SessionBase::GetNodeInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_NodeInfo")->this_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetNodeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, nodeInfo, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetNodePath
// Il2CppName: GetNodePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Il2CppString*>)>(&HoudiniEngineUnity::HEU_SessionBase::GetNodePath)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* relativeNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetNodePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, relativeNodeID, path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::IsNodeValid
// Il2CppName: IsNodeValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int)>(&HoudiniEngineUnity::HEU_SessionBase::IsNodeValid)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* uniqueNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "IsNodeValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, uniqueNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ComposeChildNodeList
// Il2CppName: ComposeChildNodeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, int, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::ComposeChildNodeList)> {
  static const MethodInfo* get() {
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeTypeFilter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeFlagFilter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bRecursive = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ComposeChildNodeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentNodeID, nodeTypeFilter, nodeFlagFilter, bRecursive, count});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetComposedChildNodeList
// Il2CppName: GetComposedChildNodeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Array<int>*, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetComposedChildNodeList)> {
  static const MethodInfo* get() {
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* childNodeIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetComposedChildNodeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentNodeID, childNodeIDs, count});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::LoadHIPFile
// Il2CppName: LoadHIPFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, bool)>(&HoudiniEngineUnity::HEU_SessionBase::LoadHIPFile)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bCookOnLoad = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "LoadHIPFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName, bCookOnLoad});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SaveHIPFile
// Il2CppName: SaveHIPFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, bool)>(&HoudiniEngineUnity::HEU_SessionBase::SaveHIPFile)> {
  static const MethodInfo* get() {
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* bLockNodes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SaveHIPFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fileName, bLockNodes});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetObjectInfo
// Il2CppName: GetObjectInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_ObjectInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetObjectInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* objectInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ObjectInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetObjectInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, objectInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetObjectTransform
// Il2CppName: GetObjectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_RSTOrder, ByRef<HoudiniEngineUnity::HAPI_Transform>)>(&HoudiniEngineUnity::HEU_SessionBase::GetObjectTransform)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* relativeToNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rstOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_RSTOrder")->byval_arg;
    static auto* hapiTransform = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Transform")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetObjectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, relativeToNodeID, rstOrder, hapiTransform});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetObjectTransform
// Il2CppName: SetObjectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_TransformEuler>)>(&HoudiniEngineUnity::HEU_SessionBase::SetObjectTransform)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* hapiTransform = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_TransformEuler")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetObjectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, hapiTransform});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ComposeObjectList
// Il2CppName: ComposeObjectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::ComposeObjectList)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* objectCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ComposeObjectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, objectCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetComposedObjectList
// Il2CppName: GetComposedObjectList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<HoudiniEngineUnity::HAPI_ObjectInfo>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetComposedObjectList)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* objectInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ObjectInfo"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetComposedObjectList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, objectInfos, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetComposedObjectTransforms
// Il2CppName: GetComposedObjectTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, HoudiniEngineUnity::HAPI_RSTOrder, ByRef<::Array<HoudiniEngineUnity::HAPI_Transform>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetComposedObjectTransforms)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rstOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_RSTOrder")->byval_arg;
    static auto* transforms = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Transform"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetComposedObjectTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, rstOrder, transforms, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetDisplayGeoInfo
// Il2CppName: GetDisplayGeoInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_GeoInfo>, bool)>(&HoudiniEngineUnity::HEU_SessionBase::GetDisplayGeoInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geoInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GeoInfo")->this_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetDisplayGeoInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, geoInfo, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGeoInfo
// Il2CppName: GetGeoInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_GeoInfo>, bool)>(&HoudiniEngineUnity::HEU_SessionBase::GetGeoInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* geoInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GeoInfo")->this_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGeoInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, geoInfo, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetPartInfo
// Il2CppName: GetPartInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_PartInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetPartInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetPartInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, partInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeInfo
// Il2CppName: GetAttributeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, HoudiniEngineUnity::HAPI_AttributeOwner, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeOwner")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, owner, attributeInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeNames
// Il2CppName: GetAttributeNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_AttributeOwner, ByRef<::Array<::Il2CppString*>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeNames)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* owner = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeOwner")->byval_arg;
    static auto* attributeNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->this_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, owner, attributeNames, count});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeStringData
// Il2CppName: GetAttributeStringData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeStringData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* dataArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeStringData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, dataArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeFloatData
// Il2CppName: GetAttributeFloatData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<float>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeFloatData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeFloatData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeFloat64Data
// Il2CppName: GetAttributeFloat64Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<double>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeFloat64Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Double"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeFloat64Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeIntData
// Il2CppName: GetAttributeIntData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeIntData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeIntData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeUInt8Data
// Il2CppName: GetAttributeUInt8Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<uint8_t>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeUInt8Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeUInt8Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeInt8Data
// Il2CppName: GetAttributeInt8Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<int8_t>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeInt8Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "SByte"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeInt8Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeInt16Data
// Il2CppName: GetAttributeInt16Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<int16_t>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeInt16Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeInt16Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetAttributeInt64Data
// Il2CppName: GetAttributeInt64Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ByRef<::Array<int64_t>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetAttributeInt64Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attributeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetAttributeInt64Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attributeInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGroupNames
// Il2CppName: GetGroupNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, HoudiniEngineUnity::HAPI_GroupType, ByRef<::Array<int>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetGroupNames)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* names = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGroupNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, groupType, names, count});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGroupMembership
// Il2CppName: GetGroupMembership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_GroupType, ::Il2CppString*, ByRef<bool>, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetGroupMembership)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* membershipArrayAllEqual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* membershipArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGroupMembership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, groupType, groupName, membershipArrayAllEqual, membershipArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGroupCountOnPackedInstancePart
// Il2CppName: GetGroupCountOnPackedInstancePart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<int>, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetGroupCountOnPackedInstancePart)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pointGroupCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* primitiveGroupCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGroupCountOnPackedInstancePart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, pointGroupCount, primitiveGroupCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGroupNamesOnPackedInstancePart
// Il2CppName: GetGroupNamesOnPackedInstancePart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_GroupType, ByRef<::Array<int>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetGroupNamesOnPackedInstancePart)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupNamesArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* groupCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGroupNamesOnPackedInstancePart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, groupType, groupNamesArray, groupCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGroupMembershipOnPackedInstancePart
// Il2CppName: GetGroupMembershipOnPackedInstancePart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_GroupType, ::Il2CppString*, ByRef<bool>, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetGroupMembershipOnPackedInstancePart)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* membershipArrayAllEqual = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* membershipArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGroupMembershipOnPackedInstancePart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, groupType, groupName, membershipArrayAllEqual, membershipArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetInstancedPartIds
// Il2CppName: GetInstancedPartIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetInstancedPartIds)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instancedPartsArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetInstancedPartIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, instancedPartsArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetInstancerPartTransforms
// Il2CppName: GetInstancerPartTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_RSTOrder, ByRef<::Array<HoudiniEngineUnity::HAPI_Transform>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetInstancerPartTransforms)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rstOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_RSTOrder")->byval_arg;
    static auto* transformsArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Transform"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetInstancerPartTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, rstOrder, transformsArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetInstanceTransformsOnPart
// Il2CppName: GetInstanceTransformsOnPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_RSTOrder, ByRef<::Array<HoudiniEngineUnity::HAPI_Transform>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetInstanceTransformsOnPart)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rstOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_RSTOrder")->byval_arg;
    static auto* transformsArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Transform"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetInstanceTransformsOnPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, rstOrder, transformsArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetInstancedObjectIds
// Il2CppName: GetInstancedObjectIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetInstancedObjectIds)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instanced_node_id_array = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetInstancedObjectIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, instanced_node_id_array, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetFaceCounts
// Il2CppName: GetFaceCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetFaceCounts)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceCounts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetFaceCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, faceCounts, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetFaceCounts
// Il2CppName: GetFaceCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<int>*>, int, int, bool)>(&HoudiniEngineUnity::HEU_SessionBase::GetFaceCounts)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceCounts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetFaceCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, faceCounts, start, length, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetVertexList
// Il2CppName: GetVertexList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetVertexList)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetVertexList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, vertexList, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetBoxInfo
// Il2CppName: GetBoxInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_BoxInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetBoxInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* boxInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_BoxInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetBoxInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, boxInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetSphereInfo
// Il2CppName: GetSphereInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_SphereInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetSphereInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sphereInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_SphereInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetSphereInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, sphereInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCurveInfo
// Il2CppName: GetCurveInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_CurveInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetCurveInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* curveInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_CurveInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCurveInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, curveInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCurveCounts
// Il2CppName: GetCurveCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetCurveCounts)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* counts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCurveCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, counts, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCurveOrders
// Il2CppName: GetCurveOrders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetCurveOrders)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* orders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCurveOrders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, orders, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCurveKnots
// Il2CppName: GetCurveKnots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<float>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetCurveKnots)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* knots = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCurveKnots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, knots, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetPartInfo
// Il2CppName: SetPartInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_PartInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::SetPartInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_PartInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetPartInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, partInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetFaceCount
// Il2CppName: SetFaceCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Array<int>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetFaceCount)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* faceCounts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetFaceCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, faceCounts, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetVertexList
// Il2CppName: SetVertexList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Array<int>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetVertexList)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* vertexList = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetVertexList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, vertexList, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetAttributeIntData
// Il2CppName: SetAttributeIntData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ::Array<int>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetAttributeIntData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetAttributeIntData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetAttributeInt8Data
// Il2CppName: SetAttributeInt8Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ::Array<int8_t>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetAttributeInt8Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "SByte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetAttributeInt8Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetAttributeInt16Data
// Il2CppName: SetAttributeInt16Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ::Array<int16_t>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetAttributeInt16Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int16"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetAttributeInt16Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetAttributeInt64Data
// Il2CppName: SetAttributeInt64Data
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ::Array<int64_t>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetAttributeInt64Data)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int64"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetAttributeInt64Data", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetAttributeFloatData
// Il2CppName: SetAttributeFloatData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ::Array<float>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetAttributeFloatData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetAttributeFloatData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetAttributeStringData
// Il2CppName: SetAttributeStringData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>, ::Array<::Il2CppString*>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetAttributeStringData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetAttributeStringData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo, data, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::AddAttribute
// Il2CppName: AddAttribute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<HoudiniEngineUnity::HAPI_AttributeInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::AddAttribute)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* attrInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_AttributeInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "AddAttribute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, attrInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::AddGroup
// Il2CppName: AddGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_GroupType, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::AddGroup)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "AddGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, groupType, groupName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::DeleteGroup
// Il2CppName: DeleteGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_GroupType, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::DeleteGroup)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "DeleteGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, groupType, groupName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetGroupMembership
// Il2CppName: SetGroupMembership
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, HoudiniEngineUnity::HAPI_GroupType, ::Il2CppString*, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetGroupMembership)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* groupType = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_GroupType")->byval_arg;
    static auto* groupName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* membershipArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetGroupMembership", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, groupType, groupName, membershipArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CommitGeo
// Il2CppName: CommitGeo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::CommitGeo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CommitGeo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RevertGeo
// Il2CppName: RevertGeo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::RevertGeo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RevertGeo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetCurveInfo
// Il2CppName: SetCurveInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_CurveInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::SetCurveInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* curveInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_CurveInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetCurveInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, curveInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetCurveCounts
// Il2CppName: SetCurveCounts
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Array<int>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetCurveCounts)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* counts = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetCurveCounts", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, counts, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetCurveOrders
// Il2CppName: SetCurveOrders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Array<int>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetCurveOrders)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* orders = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetCurveOrders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, orders, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetCurveKnots
// Il2CppName: SetCurveKnots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Array<float>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetCurveKnots)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* knots = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetCurveKnots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, knots, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetMaterialOnPart
// Il2CppName: GetMaterialOnPart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_MaterialInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetMaterialOnPart)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_MaterialInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetMaterialOnPart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, materialInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetMaterialNodeIDsOnFaces
// Il2CppName: GetMaterialNodeIDsOnFaces
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<bool>, ByRef<::Array<int>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetMaterialNodeIDsOnFaces)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bSingleFaceMaterial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* materialNodeIDs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* faceCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetMaterialNodeIDsOnFaces", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, bSingleFaceMaterial, materialNodeIDs, faceCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetMaterialInfo
// Il2CppName: GetMaterialInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_MaterialInfo>, bool)>(&HoudiniEngineUnity::HEU_SessionBase::GetMaterialInfo)> {
  static const MethodInfo* get() {
    static auto* materialNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* materialInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_MaterialInfo")->this_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetMaterialInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialNodeID, materialInfo, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetImageInfo
// Il2CppName: GetImageInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_ImageInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetImageInfo)> {
  static const MethodInfo* get() {
    static auto* materialNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* imageInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ImageInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetImageInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialNodeID, imageInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetImageInfo
// Il2CppName: SetImageInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<HoudiniEngineUnity::HAPI_ImageInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::SetImageInfo)> {
  static const MethodInfo* get() {
    static auto* materialNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* imageInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ImageInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetImageInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialNodeID, imageInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RenderTextureToImage
// Il2CppName: RenderTextureToImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, bool)>(&HoudiniEngineUnity::HEU_SessionBase::RenderTextureToImage)> {
  static const MethodInfo* get() {
    static auto* materialNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* bLogError = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RenderTextureToImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialNodeID, parmID, bLogError});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RenderCOPToImage
// Il2CppName: RenderCOPToImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int)>(&HoudiniEngineUnity::HEU_SessionBase::RenderCOPToImage)> {
  static const MethodInfo* get() {
    static auto* copNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RenderCOPToImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{copNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ExtractImageToMemory
// Il2CppName: ExtractImageToMemory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ::Il2CppString*, ByRef<::Array<uint8_t>*>)>(&HoudiniEngineUnity::HEU_SessionBase::ExtractImageToMemory)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* imagePlanes = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ExtractImageToMemory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, fileFormat, imagePlanes, buffer});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetImagePlanes
// Il2CppName: GetImagePlanes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<int>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetImagePlanes)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* imagePlanes = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* numImagePlanes = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetImagePlanes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, imagePlanes, numImagePlanes});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ExtractImageToFile
// Il2CppName: ExtractImageToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, ByRef<::Il2CppString*>)>(&HoudiniEngineUnity::HEU_SessionBase::ExtractImageToFile)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileFormat = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* imagePlanes = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* destinationFilePath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ExtractImageToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, fileFormat, imagePlanes, destinationFolderPath, destinationFilePath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParams
// Il2CppName: GetParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<HoudiniEngineUnity::HAPI_ParmInfo>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetParams)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ParmInfo"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmInfos, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParmTagName
// Il2CppName: GetParmTagName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, int, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParmTagName)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagName = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParmTagName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmID, tagIndex, tagName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParmTagValue
// Il2CppName: GetParmTagValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParmTagValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* tagValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParmTagValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmID, tagName, tagValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ParmHasTag
// Il2CppName: ParmHasTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ByRef<bool>)>(&HoudiniEngineUnity::HEU_SessionBase::ParmHasTag)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hasTag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ParmHasTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmID, tagName, hasTag});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamIntValues
// Il2CppName: GetParamIntValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamIntValues)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamIntValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, values, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamIntValue
// Il2CppName: GetParamIntValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamIntValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamIntValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmName, index, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamFloatValues
// Il2CppName: GetParamFloatValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<float>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamFloatValues)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamFloatValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, values, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamFloatValue
// Il2CppName: GetParamFloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, ByRef<float>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamFloatValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamFloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmName, index, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamStringValues
// Il2CppName: GetParamStringValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamStringValues)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamStringValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, values, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamStringValue
// Il2CppName: GetParamStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamStringValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmName, index, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamNodeValue
// Il2CppName: GetParamNodeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamNodeValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nodeValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamNodeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, paramName, nodeValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParamChoiceValues
// Il2CppName: GetParamChoiceValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<HoudiniEngineUnity::HAPI_ParmChoiceInfo>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetParamChoiceValues)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_ParmChoiceInfo"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParamChoiceValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, values, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamIntValues
// Il2CppName: SetParamIntValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<int>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamIntValues)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamIntValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, values, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamIntValue
// Il2CppName: SetParamIntValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamIntValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamIntValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, paramName, index, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamFloatValues
// Il2CppName: SetParamFloatValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<float>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamFloatValues)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* values = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamFloatValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, values, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamFloatValue
// Il2CppName: SetParamFloatValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, float)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamFloatValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamFloatValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, paramName, index, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamStringValue
// Il2CppName: SetParamStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamStringValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* strValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, strValue, parmID, index});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamStringValue
// Il2CppName: SetParamStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ::Il2CppString*, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamStringValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parmValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmName, parmValue, index});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetParamNodeValue
// Il2CppName: SetParamNodeValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetParamNodeValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* paramName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* nodeValueID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetParamNodeValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, paramName, nodeValueID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::InsertMultiparmInstance
// Il2CppName: InsertMultiparmInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::InsertMultiparmInstance)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instancePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "InsertMultiparmInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmID, instancePosition});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RemoveMultiParmInstance
// Il2CppName: RemoveMultiParmInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::RemoveMultiParmInstance)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* instancePosition = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RemoveMultiParmInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmID, instancePosition});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParmWithTag
// Il2CppName: GetParmWithTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParmWithTag)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tagName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParmWithTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, tagName, parmID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RevertParmToDefault
// Il2CppName: RevertParmToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int)>(&HoudiniEngineUnity::HEU_SessionBase::RevertParmToDefault)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parm_name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RevertParmToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parm_name, index});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::RevertParmToDefaults
// Il2CppName: RevertParmToDefaults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::RevertParmToDefaults)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parm_name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "RevertParmToDefaults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parm_name});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParmIDFromName
// Il2CppName: GetParmIDFromName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParmIDFromName)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parmID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParmIDFromName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmName, parmID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetParmStringValue
// Il2CppName: GetParmStringValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetParmStringValue)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* parmName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* evaluate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetParmStringValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, parmName, index, evaluate, value});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateInputNode
// Il2CppName: CreateInputNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<int>, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::CreateInputNode)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateInputNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, name});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateHeightFieldInput
// Il2CppName: CreateHeightFieldInput
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, int, int, float, HoudiniEngineUnity::HAPI_HeightFieldSampling, ByRef<int>, ByRef<int>, ByRef<int>, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::CreateHeightFieldInput)> {
  static const MethodInfo* get() {
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voxelSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sampling = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_HeightFieldSampling")->byval_arg;
    static auto* heightfieldNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* heightNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* maskNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* mergeNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateHeightFieldInput", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentNodeID, name, xSize, ySize, voxelSize, sampling, heightfieldNodeID, heightNodeID, maskNodeID, mergeNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::CreateHeightfieldInputVolumeNode
// Il2CppName: CreateHeightfieldInputVolumeNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<int>, ::Il2CppString*, int, int, float)>(&HoudiniEngineUnity::HEU_SessionBase::CreateHeightfieldInputVolumeNode)> {
  static const MethodInfo* get() {
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* newNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* xSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* ySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* voxelSize = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "CreateHeightfieldInputVolumeNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{parentNodeID, newNodeID, name, xSize, ySize, voxelSize});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetPreset
// Il2CppName: GetPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<uint8_t>*>)>(&HoudiniEngineUnity::HEU_SessionBase::GetPreset)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* presetData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, presetData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetPreset
// Il2CppName: SetPreset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Array<uint8_t>*)>(&HoudiniEngineUnity::HEU_SessionBase::SetPreset)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* presetData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetPreset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, presetData});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetVolumeInfo
// Il2CppName: GetVolumeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_VolumeInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetVolumeInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volumeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_VolumeInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetVolumeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, volumeInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetHeightFieldData
// Il2CppName: GetHeightFieldData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Array<float>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetHeightFieldData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* valuesArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetHeightFieldData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, valuesArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetVolumeInfo
// Il2CppName: SetVolumeInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_VolumeInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::SetVolumeInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volumeInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_VolumeInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetVolumeInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, volumeInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetVolumeTileFloatData
// Il2CppName: SetVolumeTileFloatData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<HoudiniEngineUnity::HAPI_VolumeTileInfo>, ::Array<float>*, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetVolumeTileFloatData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tileInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_VolumeTileInfo")->this_arg;
    static auto* valuesArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetVolumeTileFloatData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, tileInfo, valuesArray, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetVolumeBounds
// Il2CppName: GetVolumeBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>, ByRef<float>)>(&HoudiniEngineUnity::HEU_SessionBase::GetVolumeBounds)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* x_min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y_min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* z_min = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_max = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y_max = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* z_max = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* x_center = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* y_center = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* z_center = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetVolumeBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, x_min, y_min, z_min, x_max, y_max, z_max, x_center, y_center, z_center});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetHeightFieldData
// Il2CppName: SetHeightFieldData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ::Il2CppString*, ::Array<float>*, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetHeightFieldData)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* partID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* valuesArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetHeightFieldData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, partID, name, valuesArray, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetActiveCacheCount
// Il2CppName: GetActiveCacheCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetActiveCacheCount)> {
  static const MethodInfo* get() {
    static auto* activeCacheCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetActiveCacheCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeCacheCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetActiveCacheNames
// Il2CppName: GetActiveCacheNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<::Array<int>*>, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetActiveCacheNames)> {
  static const MethodInfo* get() {
    static auto* cacheNamesArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->this_arg;
    static auto* activeCacheCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetActiveCacheNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cacheNamesArray, activeCacheCount});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetCacheProperty
// Il2CppName: GetCacheProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, HoudiniEngineUnity::HAPI_CacheProperty, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetCacheProperty)> {
  static const MethodInfo* get() {
    static auto* cacheName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cacheProperty = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_CacheProperty")->byval_arg;
    static auto* propertyValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetCacheProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cacheName, cacheProperty, propertyValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetCacheProperty
// Il2CppName: SetCacheProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, HoudiniEngineUnity::HAPI_CacheProperty, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetCacheProperty)> {
  static const MethodInfo* get() {
    static auto* cacheName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cacheProperty = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_CacheProperty")->byval_arg;
    static auto* propertyValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetCacheProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cacheName, cacheProperty, propertyValue});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SaveGeoToFile
// Il2CppName: SaveGeoToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::SaveGeoToFile)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SaveGeoToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, fileName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::LoadGeoFromFile
// Il2CppName: LoadGeoFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::LoadGeoFromFile)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* file_name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "LoadGeoFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, file_name});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SaveNodeToFile
// Il2CppName: SaveNodeToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_SessionBase::SaveNodeToFile)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* fileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SaveNodeToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, fileName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::LoadNodeFromFile
// Il2CppName: LoadNodeFromFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(::Il2CppString*, int, ::Il2CppString*, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::LoadNodeFromFile)> {
  static const MethodInfo* get() {
    static auto* file_name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* parentNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeLabel = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cook_on_load = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* newNodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "LoadNodeFromFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{file_name, parentNodeID, nodeLabel, cook_on_load, newNodeID});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetGeoSize
// Il2CppName: GetGeoSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ::Il2CppString*, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetGeoSize)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* size = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetGeoSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, format, size});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetHandleInfo
// Il2CppName: GetHandleInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, ByRef<::Array<HoudiniEngineUnity::HAPI_HandleInfo>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetHandleInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handleInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_HandleInfo"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetHandleInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, handleInfos, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetHandleBindingInfo
// Il2CppName: GetHandleBindingInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, ByRef<::Array<HoudiniEngineUnity::HAPI_HandleBindingInfo>*>, int, int)>(&HoudiniEngineUnity::HEU_SessionBase::GetHandleBindingInfo)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handleIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handleBindingInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_HandleBindingInfo"), 1)->this_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetHandleBindingInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, handleIndex, handleBindingInfos, start, length});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::ConvertTransform
// Il2CppName: ConvertTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_TransformEuler>, HoudiniEngineUnity::HAPI_RSTOrder, HoudiniEngineUnity::HAPI_XYZOrder, ByRef<HoudiniEngineUnity::HAPI_TransformEuler>)>(&HoudiniEngineUnity::HEU_SessionBase::ConvertTransform)> {
  static const MethodInfo* get() {
    static auto* inTransform = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_TransformEuler")->this_arg;
    static auto* RSTOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_RSTOrder")->byval_arg;
    static auto* ROTOrder = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_XYZOrder")->byval_arg;
    static auto* outTransform = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_TransformEuler")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "ConvertTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inTransform, RSTOrder, ROTOrder, outTransform});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetTotalCookCount
// Il2CppName: GetTotalCookCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int, int, bool, ByRef<int>)>(&HoudiniEngineUnity::HEU_SessionBase::GetTotalCookCount)> {
  static const MethodInfo* get() {
    static auto* nodeID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeTypeFilter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeFlagFilter = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* includeChildren = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetTotalCookCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeID, nodeTypeFilter, nodeFlagFilter, includeChildren, count});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetSessionSync
// Il2CppName: SetSessionSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(bool)>(&HoudiniEngineUnity::HEU_SessionBase::SetSessionSync)> {
  static const MethodInfo* get() {
    static auto* enable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetSessionSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enable});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetViewport
// Il2CppName: GetViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_Viewport>)>(&HoudiniEngineUnity::HEU_SessionBase::GetViewport)> {
  static const MethodInfo* get() {
    static auto* viewport = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Viewport")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewport});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetViewport
// Il2CppName: SetViewport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_Viewport>)>(&HoudiniEngineUnity::HEU_SessionBase::SetViewport)> {
  static const MethodInfo* get() {
    static auto* viewport = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_Viewport")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetViewport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewport});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::GetSessionSyncInfo
// Il2CppName: GetSessionSyncInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_SessionSyncInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::GetSessionSyncInfo)> {
  static const MethodInfo* get() {
    static auto* syncInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_SessionSyncInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "GetSessionSyncInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syncInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetSessionSyncInfo
// Il2CppName: SetSessionSyncInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(ByRef<HoudiniEngineUnity::HAPI_SessionSyncInfo>)>(&HoudiniEngineUnity::HEU_SessionBase::SetSessionSyncInfo)> {
  static const MethodInfo* get() {
    static auto* syncInfo = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HAPI_SessionSyncInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetSessionSyncInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{syncInfo});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::SetNodeDisplay
// Il2CppName: SetNodeDisplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_SessionBase::*)(int, int)>(&HoudiniEngineUnity::HEU_SessionBase::SetNodeDisplay)> {
  static const MethodInfo* get() {
    static auto* node_id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* onOff = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_SessionBase*), "SetNodeDisplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node_id, onOff});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_SessionBase::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
