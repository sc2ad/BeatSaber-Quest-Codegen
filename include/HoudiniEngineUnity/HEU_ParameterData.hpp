// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HoudiniEngineUnity.IEquivable`1
#include "HoudiniEngineUnity/IEquivable_1.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: HoudiniEngineUnity.HAPI_ParmInfo
#include "HoudiniEngineUnity/HAPI_ParmInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Gradient
  class Gradient;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: GUIContent
  class GUIContent;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_InputNode
  class HEU_InputNode;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Forward declaring type: HEU_ParameterData
  class HEU_ParameterData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::HoudiniEngineUnity::HEU_ParameterData);
DEFINE_IL2CPP_ARG_TYPE(::HoudiniEngineUnity::HEU_ParameterData*, "HoudiniEngineUnity", "HEU_ParameterData");
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x149
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_ParameterData
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_ParameterData : public ::Il2CppObject/*, public ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_ParameterData*>*/ {
    public:
    public:
    // public System.Int32 _unityIndex
    // Size: 0x4
    // Offset: 0x10
    int unityIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: unityIndex and: name
    char __padding0[0x4] = {};
    // public System.String _name
    // Size: 0x8
    // Offset: 0x18
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _labelName
    // Size: 0x8
    // Offset: 0x20
    ::StringW labelName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String _help
    // Size: 0x8
    // Offset: 0x28
    ::StringW help;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> _childParameterIDs
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<int>* childParameterIDs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Int32 _choiceValue
    // Size: 0x4
    // Offset: 0x38
    int choiceValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: choiceValue and: intValues
    char __padding5[0x4] = {};
    // public System.Int32[] _intValues
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> intValues;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Single[] _floatValues
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<float> floatValues;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    // public System.String[] _stringValues
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> stringValues;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Boolean _toggle
    // Size: 0x1
    // Offset: 0x58
    bool toggle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: toggle and: color
    char __padding9[0x3] = {};
    // public UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // Padding between fields: color and: gradient
    char __padding10[0x4] = {};
    // public UnityEngine.Gradient _gradient
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Gradient* gradient;
    // Field size check
    static_assert(sizeof(::UnityEngine::Gradient*) == 0x8);
    // public UnityEngine.AnimationCurve _animCurve
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::AnimationCurve* animCurve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // public UnityEngine.GUIContent[] _choiceLabels
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::UnityEngine::GUIContent*> choiceLabels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GUIContent*>) == 0x8);
    // public System.String[] _choiceStringValues
    // Size: 0x8
    // Offset: 0x88
    ::ArrayW<::StringW> choiceStringValues;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.Int32[] _choiceIntValues
    // Size: 0x8
    // Offset: 0x90
    ::ArrayW<int> choiceIntValues;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public HoudiniEngineUnity.HAPI_ParmInfo _parmInfo
    // Size: 0x90
    // Offset: 0x98
    ::HoudiniEngineUnity::HAPI_ParmInfo parmInfo;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HAPI_ParmInfo) == 0x90);
    // public System.Boolean _showChildren
    // Size: 0x1
    // Offset: 0x128
    bool showChildren;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showChildren and: fileTypeInfo
    char __padding17[0x7] = {};
    // public System.String _fileTypeInfo
    // Size: 0x8
    // Offset: 0x130
    ::StringW fileTypeInfo;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 _folderListChildrenProcessed
    // Size: 0x4
    // Offset: 0x138
    int folderListChildrenProcessed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 _tabSelectedIndex
    // Size: 0x4
    // Offset: 0x13C
    int tabSelectedIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public HoudiniEngineUnity.HEU_InputNode _paramInputNode
    // Size: 0x8
    // Offset: 0x140
    ::HoudiniEngineUnity::HEU_InputNode* paramInputNode;
    // Field size check
    static_assert(sizeof(::HoudiniEngineUnity::HEU_InputNode*) == 0x8);
    // public System.Boolean _hasAssetPathTag
    // Size: 0x1
    // Offset: 0x148
    bool hasAssetPathTag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_ParameterData*>
    operator ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_ParameterData*>() noexcept {
      return *reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_ParameterData*>*>(this);
    }
    // Creating interface conversion operator: i_HEU_ParameterData
    inline ::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_ParameterData*>* i_HEU_ParameterData() noexcept {
      return reinterpret_cast<::HoudiniEngineUnity::IEquivable_1<::HoudiniEngineUnity::HEU_ParameterData*>*>(this);
    }
    // Get instance field reference: public System.Int32 _unityIndex
    [[deprecated("Use field access instead!")]] int& dyn__unityIndex();
    // Get instance field reference: public System.String _name
    [[deprecated("Use field access instead!")]] ::StringW& dyn__name();
    // Get instance field reference: public System.String _labelName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__labelName();
    // Get instance field reference: public System.String _help
    [[deprecated("Use field access instead!")]] ::StringW& dyn__help();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> _childParameterIDs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn__childParameterIDs();
    // Get instance field reference: public System.Int32 _choiceValue
    [[deprecated("Use field access instead!")]] int& dyn__choiceValue();
    // Get instance field reference: public System.Int32[] _intValues
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__intValues();
    // Get instance field reference: public System.Single[] _floatValues
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn__floatValues();
    // Get instance field reference: public System.String[] _stringValues
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__stringValues();
    // Get instance field reference: public System.Boolean _toggle
    [[deprecated("Use field access instead!")]] bool& dyn__toggle();
    // Get instance field reference: public UnityEngine.Color _color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__color();
    // Get instance field reference: public UnityEngine.Gradient _gradient
    [[deprecated("Use field access instead!")]] ::UnityEngine::Gradient*& dyn__gradient();
    // Get instance field reference: public UnityEngine.AnimationCurve _animCurve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__animCurve();
    // Get instance field reference: public UnityEngine.GUIContent[] _choiceLabels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GUIContent*>& dyn__choiceLabels();
    // Get instance field reference: public System.String[] _choiceStringValues
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__choiceStringValues();
    // Get instance field reference: public System.Int32[] _choiceIntValues
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__choiceIntValues();
    // Get instance field reference: public HoudiniEngineUnity.HAPI_ParmInfo _parmInfo
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HAPI_ParmInfo& dyn__parmInfo();
    // Get instance field reference: public System.Boolean _showChildren
    [[deprecated("Use field access instead!")]] bool& dyn__showChildren();
    // Get instance field reference: public System.String _fileTypeInfo
    [[deprecated("Use field access instead!")]] ::StringW& dyn__fileTypeInfo();
    // Get instance field reference: public System.Int32 _folderListChildrenProcessed
    [[deprecated("Use field access instead!")]] int& dyn__folderListChildrenProcessed();
    // Get instance field reference: public System.Int32 _tabSelectedIndex
    [[deprecated("Use field access instead!")]] int& dyn__tabSelectedIndex();
    // Get instance field reference: public HoudiniEngineUnity.HEU_InputNode _paramInputNode
    [[deprecated("Use field access instead!")]] ::HoudiniEngineUnity::HEU_InputNode*& dyn__paramInputNode();
    // Get instance field reference: public System.Boolean _hasAssetPathTag
    [[deprecated("Use field access instead!")]] bool& dyn__hasAssetPathTag();
    // public System.Int32 get_ParmID()
    // Offset: 0x1AF06AC
    int get_ParmID();
    // public System.Int32 get_ParentID()
    // Offset: 0x1AF06B4
    int get_ParentID();
    // public System.Int32 get_ChildIndex()
    // Offset: 0x1AF06BC
    int get_ChildIndex();
    // public System.Int32 get_ParmSize()
    // Offset: 0x1AF06C4
    int get_ParmSize();
    // public System.Int32 get_IntMin()
    // Offset: 0x1AF0730
    int get_IntMin();
    // public System.Int32 get_IntMax()
    // Offset: 0x1AF07A4
    int get_IntMax();
    // public System.Int32 get_IntUIMin()
    // Offset: 0x1AF0818
    int get_IntUIMin();
    // public System.Int32 get_IntUIMax()
    // Offset: 0x1AF088C
    int get_IntUIMax();
    // public System.Single get_FloatMin()
    // Offset: 0x1AF0900
    float get_FloatMin();
    // public System.Single get_FloatMax()
    // Offset: 0x1AF0908
    float get_FloatMax();
    // public System.Single get_FloatUIMin()
    // Offset: 0x1AF0910
    float get_FloatUIMin();
    // public System.Single get_FloatUIMax()
    // Offset: 0x1AF0918
    float get_FloatUIMax();
    // public System.Void .ctor()
    // Offset: 0x1AF1020
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_ParameterData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::HoudiniEngineUnity::HEU_ParameterData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_ParameterData*, creationType>()));
    }
    // public System.Boolean IsInt()
    // Offset: 0x1AF06CC
    bool IsInt();
    // public System.Boolean IsFloat()
    // Offset: 0x1AF06DC
    bool IsFloat();
    // public System.Boolean IsString()
    // Offset: 0x1AF06EC
    bool IsString();
    // public System.Boolean IsPathFile()
    // Offset: 0x1AF06FC
    bool IsPathFile();
    // public System.Boolean HasMin()
    // Offset: 0x1AF0710
    bool HasMin();
    // public System.Boolean HasMax()
    // Offset: 0x1AF0718
    bool HasMax();
    // public System.Boolean HasUIMin()
    // Offset: 0x1AF0720
    bool HasUIMin();
    // public System.Boolean HasUIMax()
    // Offset: 0x1AF0728
    bool HasUIMax();
    // public System.Boolean IsContainer()
    // Offset: 0x1AF0920
    bool IsContainer();
    // public System.Boolean IsMultiParam()
    // Offset: 0x1AF097C
    bool IsMultiParam();
    // public System.Boolean IsRamp()
    // Offset: 0x1AF098C
    bool IsRamp();
    // public System.Boolean IsToggle()
    // Offset: 0x1AF099C
    bool IsToggle();
    // public System.Boolean IsColor()
    // Offset: 0x1AF09AC
    bool IsColor();
    // public UnityEngine.Vector3 ToVector3()
    // Offset: 0x1AF09BC
    ::UnityEngine::Vector3 ToVector3();
    // public System.Boolean IsAssetPath()
    // Offset: 0x1AF0A80
    bool IsAssetPath();
    // public System.Boolean IsEquivalentTo(HoudiniEngineUnity.HEU_ParameterData other)
    // Offset: 0x1AF0A88
    bool IsEquivalentTo(::HoudiniEngineUnity::HEU_ParameterData* other);
  }; // HoudiniEngineUnity.HEU_ParameterData
  #pragma pack(pop)
  static check_size<sizeof(HEU_ParameterData), 328 + sizeof(bool)> __HoudiniEngineUnity_HEU_ParameterDataSizeCheck;
  static_assert(sizeof(HEU_ParameterData) == 0x149);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_ParmID
// Il2CppName: get_ParmID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_ParmID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_ParmID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_ParentID
// Il2CppName: get_ParentID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_ParentID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_ParentID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_ChildIndex
// Il2CppName: get_ChildIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_ChildIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_ChildIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_ParmSize
// Il2CppName: get_ParmSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_ParmSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_ParmSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_IntMin
// Il2CppName: get_IntMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_IntMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_IntMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_IntMax
// Il2CppName: get_IntMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_IntMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_IntMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_IntUIMin
// Il2CppName: get_IntUIMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_IntUIMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_IntUIMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_IntUIMax
// Il2CppName: get_IntUIMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_IntUIMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_IntUIMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_FloatMin
// Il2CppName: get_FloatMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_FloatMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_FloatMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_FloatMax
// Il2CppName: get_FloatMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_FloatMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_FloatMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_FloatUIMin
// Il2CppName: get_FloatUIMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_FloatUIMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_FloatUIMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::get_FloatUIMax
// Il2CppName: get_FloatUIMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::get_FloatUIMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "get_FloatUIMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsInt
// Il2CppName: IsInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsFloat
// Il2CppName: IsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsString
// Il2CppName: IsString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsPathFile
// Il2CppName: IsPathFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsPathFile)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsPathFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::HasMin
// Il2CppName: HasMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::HasMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "HasMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::HasMax
// Il2CppName: HasMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::HasMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "HasMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::HasUIMin
// Il2CppName: HasUIMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::HasUIMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "HasUIMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::HasUIMax
// Il2CppName: HasUIMax
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::HasUIMax)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "HasUIMax", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsContainer
// Il2CppName: IsContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsMultiParam
// Il2CppName: IsMultiParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsMultiParam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsMultiParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsRamp
// Il2CppName: IsRamp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsRamp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsRamp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsToggle
// Il2CppName: IsToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsToggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsColor
// Il2CppName: IsColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::ToVector3
// Il2CppName: ToVector3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::ToVector3)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "ToVector3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsAssetPath
// Il2CppName: IsAssetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)()>(&HoudiniEngineUnity::HEU_ParameterData::IsAssetPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_ParameterData::IsEquivalentTo
// Il2CppName: IsEquivalentTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (HoudiniEngineUnity::HEU_ParameterData::*)(::HoudiniEngineUnity::HEU_ParameterData*)>(&HoudiniEngineUnity::HEU_ParameterData::IsEquivalentTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_ParameterData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_ParameterData*), "IsEquivalentTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
