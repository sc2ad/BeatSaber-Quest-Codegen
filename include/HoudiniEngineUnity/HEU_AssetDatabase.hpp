// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: HoudiniEngineUnity
namespace HoudiniEngineUnity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: HoudiniEngineUnity.HEU_AssetDatabase
  // [TokenAttribute] Offset: FFFFFFFF
  class HEU_AssetDatabase : public ::Il2CppObject {
    public:
    // Nested type: HoudiniEngineUnity::HEU_AssetDatabase::HEU_ImportAssetOptions
    struct HEU_ImportAssetOptions;
    // Creating value type constructor for type: HEU_AssetDatabase
    HEU_AssetDatabase() noexcept {}
    // static public System.String GetAssetCachePath()
    // Offset: 0x1439FC0
    static ::Il2CppString* GetAssetCachePath();
    // static public System.String GetUnityProjectPath()
    // Offset: 0x143A01C
    static ::Il2CppString* GetUnityProjectPath();
    // static public System.String GetAssetRelativePath(System.String inFullPath)
    // Offset: 0x143A084
    static ::Il2CppString* GetAssetRelativePath(::Il2CppString* inFullPath);
    // static public System.String GetPackagesRelativePath(System.String inFullPath)
    // Offset: 0x143A19C
    static ::Il2CppString* GetPackagesRelativePath(::Il2CppString* inFullPath);
    // static public System.String GetValidAssetPath(System.String inPath)
    // Offset: 0x143A294
    static ::Il2CppString* GetValidAssetPath(::Il2CppString* inPath);
    // static public System.String GetAssetPath(UnityEngine.Object asset)
    // Offset: 0x143A450
    static ::Il2CppString* GetAssetPath(UnityEngine::Object* asset);
    // static public System.String GetAssetPathWithSubAssetSupport(UnityEngine.Object asset)
    // Offset: 0x143A4A4
    static ::Il2CppString* GetAssetPathWithSubAssetSupport(UnityEngine::Object* asset);
    // static public System.Void GetSubAssetPathFromPath(System.String fullPath, out System.String mainPath, out System.String subPath)
    // Offset: 0x143A4F8
    static void GetSubAssetPathFromPath(::Il2CppString* fullPath, ByRef<::Il2CppString*> mainPath, ByRef<::Il2CppString*> subPath);
    // static private System.String GetAssetRelativePathStart()
    // Offset: 0x143A5E4
    static ::Il2CppString* GetAssetRelativePathStart();
    // static private System.String GetPackagesRelativePathStart()
    // Offset: 0x143A660
    static ::Il2CppString* GetPackagesRelativePathStart();
    // static public System.String GetAssetFullPath(System.String inPath)
    // Offset: 0x14369A8
    static ::Il2CppString* GetAssetFullPath(::Il2CppString* inPath);
    // static public System.Boolean IsPathRelativeToAssets(System.String inPath)
    // Offset: 0x143A6DC
    static bool IsPathRelativeToAssets(::Il2CppString* inPath);
    // static public System.Boolean IsPathRelativeToPackages(System.String inPath)
    // Offset: 0x143A710
    static bool IsPathRelativeToPackages(::Il2CppString* inPath);
    // static public System.String GetAssetRootPath(UnityEngine.Object asset)
    // Offset: 0x143A744
    static ::Il2CppString* GetAssetRootPath(UnityEngine::Object* asset);
    // static public System.String GetUniqueAssetPath(System.String path)
    // Offset: 0x143A798
    static ::Il2CppString* GetUniqueAssetPath(::Il2CppString* path);
    // static public System.String GetAssetOrScenePath(UnityEngine.Object inputObject)
    // Offset: 0x143A7EC
    static ::Il2CppString* GetAssetOrScenePath(UnityEngine::Object* inputObject);
    // static public System.Boolean IsPathInAssetCache(System.String path)
    // Offset: 0x143A840
    static bool IsPathInAssetCache(::Il2CppString* path);
    // static public System.Boolean IsPathInAssetCacheBakedFolder(System.String path)
    // Offset: 0x143A89C
    static bool IsPathInAssetCacheBakedFolder(::Il2CppString* path);
    // static public System.Boolean IsPathInAssetCacheWorkingFolder(System.String path)
    // Offset: 0x143A8F0
    static bool IsPathInAssetCacheWorkingFolder(::Il2CppString* path);
    // static public System.Boolean IsAssetInAssetCacheBakedFolder(UnityEngine.Object asset)
    // Offset: 0x143A944
    static bool IsAssetInAssetCacheBakedFolder(UnityEngine::Object* asset);
    // static public System.Boolean IsAssetInAssetCacheWorkingFolder(UnityEngine.Object asset)
    // Offset: 0x143A998
    static bool IsAssetInAssetCacheWorkingFolder(UnityEngine::Object* asset);
    // static public System.String CreateAssetCacheFolder(System.String suggestedAssetPath, System.Int32 hash)
    // Offset: 0x143A9EC
    static ::Il2CppString* CreateAssetCacheFolder(::Il2CppString* suggestedAssetPath, int hash);
    // static public System.Void DeleteAssetCacheFolder(System.String assetCacheFolderPath)
    // Offset: 0x143AA40
    static void DeleteAssetCacheFolder(::Il2CppString* assetCacheFolderPath);
    // static public System.Void DeleteAsset(UnityEngine.Object asset)
    // Offset: 0x143AA8C
    static void DeleteAsset(UnityEngine::Object* asset);
    // static public System.Void DeleteAssetAtPath(System.String path)
    // Offset: 0x143AAD8
    static void DeleteAssetAtPath(::Il2CppString* path);
    // static public System.Void DeleteAssetIfInBakedFolder(UnityEngine.Object asset)
    // Offset: 0x143AB24
    static void DeleteAssetIfInBakedFolder(UnityEngine::Object* asset);
    // static public System.Boolean ContainsAsset(UnityEngine.Object assetObject)
    // Offset: 0x143AB70
    static bool ContainsAsset(UnityEngine::Object* assetObject);
    // static public System.Boolean CopyAsset(System.String path, System.String newPath)
    // Offset: 0x143ABC4
    static bool CopyAsset(::Il2CppString* path, ::Il2CppString* newPath);
    // static public UnityEngine.Object CopyAndLoadAssetWithRelativePath(UnityEngine.Object srcAsset, System.String copyAssetFolder, System.String relativePath, System.Type type, System.Boolean bOverwriteExisting)
    // Offset: 0x143AC18
    static UnityEngine::Object* CopyAndLoadAssetWithRelativePath(UnityEngine::Object* srcAsset, ::Il2CppString* copyAssetFolder, ::Il2CppString* relativePath, System::Type* type, bool bOverwriteExisting);
    // static public UnityEngine.Object CopyAndLoadAssetFromAssetCachePath(UnityEngine.Object srcAsset, System.String copyPath, System.Type type, System.Boolean bOverwriteExisting)
    // Offset: 0x143AC6C
    static UnityEngine::Object* CopyAndLoadAssetFromAssetCachePath(UnityEngine::Object* srcAsset, ::Il2CppString* copyPath, System::Type* type, bool bOverwriteExisting);
    // static public UnityEngine.Object CopyAndLoadAssetAtAnyPath(UnityEngine.Object srcAsset, System.String copyPath, System.Type type, System.Boolean bOverwriteExisting)
    // Offset: 0x143ACC0
    static UnityEngine::Object* CopyAndLoadAssetAtAnyPath(UnityEngine::Object* srcAsset, ::Il2CppString* copyPath, System::Type* type, bool bOverwriteExisting);
    // static public UnityEngine.Object CopyAndLoadAssetAtGivenPath(UnityEngine.Object srcAsset, System.String targetPath, System.Type type)
    // Offset: 0x143AD14
    static UnityEngine::Object* CopyAndLoadAssetAtGivenPath(UnityEngine::Object* srcAsset, ::Il2CppString* targetPath, System::Type* type);
    // static public UnityEngine.Object CopyUniqueAndLoadAssetAtAnyPath(UnityEngine.Object srcAsset, System.String copyPath, System.Type type)
    // Offset: 0x143AD68
    static UnityEngine::Object* CopyUniqueAndLoadAssetAtAnyPath(UnityEngine::Object* srcAsset, ::Il2CppString* copyPath, System::Type* type);
    // static public System.Void CreateObjectInAssetCacheFolder(UnityEngine.Object objectToCreate, System.String assetCacheRoot, System.String relativeFolderPath, System.String assetFileName, System.Type type, System.Boolean bOverwriteExisting)
    // Offset: 0x143ADBC
    static void CreateObjectInAssetCacheFolder(UnityEngine::Object* objectToCreate, ::Il2CppString* assetCacheRoot, ::Il2CppString* relativeFolderPath, ::Il2CppString* assetFileName, System::Type* type, bool bOverwriteExisting);
    // static public System.Void CreateAsset(UnityEngine.Object asset, System.String path)
    // Offset: 0x143AE08
    static void CreateAsset(UnityEngine::Object* asset, ::Il2CppString* path);
    // static public System.Void CreateAddObjectInAssetCacheFolder(System.String assetName, System.String assetObjectFileName, UnityEngine.Object objectToAdd, System.String relativeFolderPath, ref System.String exportRootPath, ref UnityEngine.Object assetDBObject)
    // Offset: 0x143AE54
    static void CreateAddObjectInAssetCacheFolder(::Il2CppString* assetName, ::Il2CppString* assetObjectFileName, UnityEngine::Object* objectToAdd, ::Il2CppString* relativeFolderPath, ByRef<::Il2CppString*> exportRootPath, ByRef<UnityEngine::Object*> assetDBObject);
    // static public System.Void AddObjectToAsset(UnityEngine.Object objectToAdd, UnityEngine.Object assetObject)
    // Offset: 0x143AEA0
    static void AddObjectToAsset(UnityEngine::Object* objectToAdd, UnityEngine::Object* assetObject);
    // static public System.Void SaveAndRefreshDatabase()
    // Offset: 0x143AEEC
    static void SaveAndRefreshDatabase();
    // static public System.Void SaveAssetDatabase()
    // Offset: 0x143AEF0
    static void SaveAssetDatabase();
    // static public System.Void RefreshAssetDatabase()
    // Offset: 0x143AEF4
    static void RefreshAssetDatabase();
    // static public UnityEngine.Object LoadAssetAtPath(System.String assetPath, System.Type type)
    // Offset: 0x143AEF8
    static UnityEngine::Object* LoadAssetAtPath(::Il2CppString* assetPath, System::Type* type);
    // static public UnityEngine.Object LoadSubAssetAtPath(System.String mainPath, System.String subAssetPath)
    // Offset: 0x143AF4C
    static UnityEngine::Object* LoadSubAssetAtPath(::Il2CppString* mainPath, ::Il2CppString* subAssetPath);
    // static public UnityEngine.Object[] LoadAllAssetsAtPath(System.String assetPath)
    // Offset: 0x143AFB8
    static ::Array<UnityEngine::Object*>* LoadAllAssetsAtPath(::Il2CppString* assetPath);
    // static public UnityEngine.Object[] LoadAllAssetRepresentationsAtPath(System.String assetPath)
    // Offset: 0x143AF64
    static ::Array<UnityEngine::Object*>* LoadAllAssetRepresentationsAtPath(::Il2CppString* assetPath);
    // static public System.Void ImportAsset(System.String assetPath, HoudiniEngineUnity.HEU_AssetDatabase/HEU_ImportAssetOptions heuOptions)
    // Offset: 0x143B00C
    static void ImportAsset(::Il2CppString* assetPath, HoudiniEngineUnity::HEU_AssetDatabase::HEU_ImportAssetOptions heuOptions);
    // static public System.String GetAssetWorkingPath()
    // Offset: 0x143B058
    static ::Il2CppString* GetAssetWorkingPath();
    // static public System.String GetAssetBakedPath()
    // Offset: 0x143B0AC
    static ::Il2CppString* GetAssetBakedPath();
    // static public System.String GetAssetBakedPathWithAssetName(System.String assetName)
    // Offset: 0x143B100
    static ::Il2CppString* GetAssetBakedPathWithAssetName(::Il2CppString* assetName);
    // static public System.String CreateUniqueBakePath(System.String assetName)
    // Offset: 0x143B154
    static ::Il2CppString* CreateUniqueBakePath(::Il2CppString* assetName);
    // static public System.Void CreatePathWithFolders(System.String inPath)
    // Offset: 0x143B1A8
    static void CreatePathWithFolders(::Il2CppString* inPath);
    // static public System.String AppendMeshesPathToAssetFolder(System.String inAssetCacheFolder)
    // Offset: 0x143B1F4
    static ::Il2CppString* AppendMeshesPathToAssetFolder(::Il2CppString* inAssetCacheFolder);
    // static public System.String AppendTexturesPathToAssetFolder(System.String inAssetCacheFolder)
    // Offset: 0x143B300
    static ::Il2CppString* AppendTexturesPathToAssetFolder(::Il2CppString* inAssetCacheFolder);
    // static public System.String AppendMaterialsPathToAssetFolder(System.String inAssetCacheFolder)
    // Offset: 0x143B40C
    static ::Il2CppString* AppendMaterialsPathToAssetFolder(::Il2CppString* inAssetCacheFolder);
    // static public System.String AppendTerrainPathToAssetFolder(System.String inAssetCacheFolder)
    // Offset: 0x143B518
    static ::Il2CppString* AppendTerrainPathToAssetFolder(::Il2CppString* inAssetCacheFolder);
    // static public System.String[] GetAssetSubFolders()
    // Offset: 0x143B624
    static ::Array<::Il2CppString*>* GetAssetSubFolders();
    // static public System.String AppendPrefabPath(System.String inAssetCacheFolder, System.String assetName)
    // Offset: 0x143B768
    static ::Il2CppString* AppendPrefabPath(::Il2CppString* inAssetCacheFolder, ::Il2CppString* assetName);
    // static public System.String AppendMeshesAssetFileName(System.String assetName)
    // Offset: 0x143B884
    static ::Il2CppString* AppendMeshesAssetFileName(::Il2CppString* assetName);
    // static public System.Boolean IsSubAsset(UnityEngine.Object obj)
    // Offset: 0x143B8D8
    static bool IsSubAsset(UnityEngine::Object* obj);
    // static public System.String[] GetAssetPathsFromAssetBundle(System.String assetBundleFileName)
    // Offset: 0x143B8E0
    static ::Array<::Il2CppString*>* GetAssetPathsFromAssetBundle(::Il2CppString* assetBundleFileName);
    // static public System.Boolean IsAssetSavedInScene(UnityEngine.GameObject go)
    // Offset: 0x143B8E8
    static bool IsAssetSavedInScene(UnityEngine::GameObject* go);
    // static public System.Void SelectAssetAtPath(System.String path)
    // Offset: 0x143B93C
    static void SelectAssetAtPath(::Il2CppString* path);
    // static public System.Void PrintDependencies(UnityEngine.GameObject targetGO)
    // Offset: 0x143B940
    static void PrintDependencies(UnityEngine::GameObject* targetGO);
    // static public System.String GetUniqueAssetPathForUnityAsset(UnityEngine.Object obj)
    // Offset: 0x143B944
    static ::Il2CppString* GetUniqueAssetPathForUnityAsset(UnityEngine::Object* obj);
    // static public T LoadUnityAssetFromUniqueAssetPath(System.String assetPath)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T LoadUnityAssetFromUniqueAssetPath(::Il2CppString* assetPath) {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_AssetDatabase::LoadUnityAssetFromUniqueAssetPath");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_AssetDatabase", "LoadUnityAssetFromUniqueAssetPath", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(assetPath)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, assetPath);
    }
    // static public T GetBuiltinExtraResource(System.String resourceName)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T GetBuiltinExtraResource(::Il2CppString* resourceName) {
      static_assert(std::is_convertible_v<T, UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("HoudiniEngineUnity::HEU_AssetDatabase::GetBuiltinExtraResource");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("HoudiniEngineUnity", "HEU_AssetDatabase", "GetBuiltinExtraResource", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(resourceName)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, resourceName);
    }
  }; // HoudiniEngineUnity.HEU_AssetDatabase
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(HoudiniEngineUnity::HEU_AssetDatabase*, "HoudiniEngineUnity", "HEU_AssetDatabase");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetCachePath
// Il2CppName: GetAssetCachePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetCachePath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetCachePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetUnityProjectPath
// Il2CppName: GetUnityProjectPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetUnityProjectPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetUnityProjectPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetRelativePath
// Il2CppName: GetAssetRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetRelativePath)> {
  static const MethodInfo* get() {
    static auto* inFullPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inFullPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetPackagesRelativePath
// Il2CppName: GetPackagesRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetPackagesRelativePath)> {
  static const MethodInfo* get() {
    static auto* inFullPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetPackagesRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inFullPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetValidAssetPath
// Il2CppName: GetValidAssetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetValidAssetPath)> {
  static const MethodInfo* get() {
    static auto* inPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetValidAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetPath
// Il2CppName: GetAssetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetPath)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetPathWithSubAssetSupport
// Il2CppName: GetAssetPathWithSubAssetSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetPathWithSubAssetSupport)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetPathWithSubAssetSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetSubAssetPathFromPath
// Il2CppName: GetSubAssetPathFromPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ByRef<::Il2CppString*>, ByRef<::Il2CppString*>)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetSubAssetPathFromPath)> {
  static const MethodInfo* get() {
    static auto* fullPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* mainPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* subPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetSubAssetPathFromPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fullPath, mainPath, subPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetRelativePathStart
// Il2CppName: GetAssetRelativePathStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetRelativePathStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetRelativePathStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetPackagesRelativePathStart
// Il2CppName: GetPackagesRelativePathStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetPackagesRelativePathStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetPackagesRelativePathStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetFullPath
// Il2CppName: GetAssetFullPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetFullPath)> {
  static const MethodInfo* get() {
    static auto* inPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetFullPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsPathRelativeToAssets
// Il2CppName: IsPathRelativeToAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsPathRelativeToAssets)> {
  static const MethodInfo* get() {
    static auto* inPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsPathRelativeToAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsPathRelativeToPackages
// Il2CppName: IsPathRelativeToPackages
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsPathRelativeToPackages)> {
  static const MethodInfo* get() {
    static auto* inPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsPathRelativeToPackages", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetRootPath
// Il2CppName: GetAssetRootPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetRootPath)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetRootPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetUniqueAssetPath
// Il2CppName: GetUniqueAssetPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetUniqueAssetPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetUniqueAssetPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetOrScenePath
// Il2CppName: GetAssetOrScenePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetOrScenePath)> {
  static const MethodInfo* get() {
    static auto* inputObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetOrScenePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inputObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsPathInAssetCache
// Il2CppName: IsPathInAssetCache
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsPathInAssetCache)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsPathInAssetCache", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsPathInAssetCacheBakedFolder
// Il2CppName: IsPathInAssetCacheBakedFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsPathInAssetCacheBakedFolder)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsPathInAssetCacheBakedFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsPathInAssetCacheWorkingFolder
// Il2CppName: IsPathInAssetCacheWorkingFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsPathInAssetCacheWorkingFolder)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsPathInAssetCacheWorkingFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsAssetInAssetCacheBakedFolder
// Il2CppName: IsAssetInAssetCacheBakedFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsAssetInAssetCacheBakedFolder)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsAssetInAssetCacheBakedFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsAssetInAssetCacheWorkingFolder
// Il2CppName: IsAssetInAssetCacheWorkingFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsAssetInAssetCacheWorkingFolder)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsAssetInAssetCacheWorkingFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CreateAssetCacheFolder
// Il2CppName: CreateAssetCacheFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, int)>(&HoudiniEngineUnity::HEU_AssetDatabase::CreateAssetCacheFolder)> {
  static const MethodInfo* get() {
    static auto* suggestedAssetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hash = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CreateAssetCacheFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{suggestedAssetPath, hash});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::DeleteAssetCacheFolder
// Il2CppName: DeleteAssetCacheFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::DeleteAssetCacheFolder)> {
  static const MethodInfo* get() {
    static auto* assetCacheFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "DeleteAssetCacheFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetCacheFolderPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::DeleteAsset
// Il2CppName: DeleteAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::DeleteAsset)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "DeleteAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::DeleteAssetAtPath
// Il2CppName: DeleteAssetAtPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::DeleteAssetAtPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "DeleteAssetAtPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::DeleteAssetIfInBakedFolder
// Il2CppName: DeleteAssetIfInBakedFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::DeleteAssetIfInBakedFolder)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "DeleteAssetIfInBakedFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::ContainsAsset
// Il2CppName: ContainsAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::ContainsAsset)> {
  static const MethodInfo* get() {
    static auto* assetObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "ContainsAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CopyAsset
// Il2CppName: CopyAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::Il2CppString*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::CopyAsset)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* newPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CopyAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path, newPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetWithRelativePath
// Il2CppName: CopyAndLoadAssetWithRelativePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, ::Il2CppString*, ::Il2CppString*, System::Type*, bool)>(&HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetWithRelativePath)> {
  static const MethodInfo* get() {
    static auto* srcAsset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* copyAssetFolder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bOverwriteExisting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CopyAndLoadAssetWithRelativePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcAsset, copyAssetFolder, relativePath, type, bOverwriteExisting});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetFromAssetCachePath
// Il2CppName: CopyAndLoadAssetFromAssetCachePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, ::Il2CppString*, System::Type*, bool)>(&HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetFromAssetCachePath)> {
  static const MethodInfo* get() {
    static auto* srcAsset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* copyPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bOverwriteExisting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CopyAndLoadAssetFromAssetCachePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcAsset, copyPath, type, bOverwriteExisting});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetAtAnyPath
// Il2CppName: CopyAndLoadAssetAtAnyPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, ::Il2CppString*, System::Type*, bool)>(&HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetAtAnyPath)> {
  static const MethodInfo* get() {
    static auto* srcAsset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* copyPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bOverwriteExisting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CopyAndLoadAssetAtAnyPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcAsset, copyPath, type, bOverwriteExisting});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetAtGivenPath
// Il2CppName: CopyAndLoadAssetAtGivenPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, ::Il2CppString*, System::Type*)>(&HoudiniEngineUnity::HEU_AssetDatabase::CopyAndLoadAssetAtGivenPath)> {
  static const MethodInfo* get() {
    static auto* srcAsset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* targetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CopyAndLoadAssetAtGivenPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcAsset, targetPath, type});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CopyUniqueAndLoadAssetAtAnyPath
// Il2CppName: CopyUniqueAndLoadAssetAtAnyPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(UnityEngine::Object*, ::Il2CppString*, System::Type*)>(&HoudiniEngineUnity::HEU_AssetDatabase::CopyUniqueAndLoadAssetAtAnyPath)> {
  static const MethodInfo* get() {
    static auto* srcAsset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* copyPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CopyUniqueAndLoadAssetAtAnyPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{srcAsset, copyPath, type});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CreateObjectInAssetCacheFolder
// Il2CppName: CreateObjectInAssetCacheFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*, ::Il2CppString*, ::Il2CppString*, ::Il2CppString*, System::Type*, bool)>(&HoudiniEngineUnity::HEU_AssetDatabase::CreateObjectInAssetCacheFolder)> {
  static const MethodInfo* get() {
    static auto* objectToCreate = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* assetCacheRoot = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* relativeFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* bOverwriteExisting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CreateObjectInAssetCacheFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectToCreate, assetCacheRoot, relativeFolderPath, assetFileName, type, bOverwriteExisting});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CreateAsset
// Il2CppName: CreateAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::CreateAsset)> {
  static const MethodInfo* get() {
    static auto* asset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CreateAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asset, path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CreateAddObjectInAssetCacheFolder
// Il2CppName: CreateAddObjectInAssetCacheFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, ::Il2CppString*, UnityEngine::Object*, ::Il2CppString*, ByRef<::Il2CppString*>, ByRef<UnityEngine::Object*>)>(&HoudiniEngineUnity::HEU_AssetDatabase::CreateAddObjectInAssetCacheFolder)> {
  static const MethodInfo* get() {
    static auto* assetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetObjectFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* objectToAdd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* relativeFolderPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* exportRootPath = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    static auto* assetDBObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CreateAddObjectInAssetCacheFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetName, assetObjectFileName, objectToAdd, relativeFolderPath, exportRootPath, assetDBObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AddObjectToAsset
// Il2CppName: AddObjectToAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::Object*, UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AddObjectToAsset)> {
  static const MethodInfo* get() {
    static auto* objectToAdd = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    static auto* assetObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AddObjectToAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{objectToAdd, assetObject});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::SaveAndRefreshDatabase
// Il2CppName: SaveAndRefreshDatabase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::SaveAndRefreshDatabase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "SaveAndRefreshDatabase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::SaveAssetDatabase
// Il2CppName: SaveAssetDatabase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::SaveAssetDatabase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "SaveAssetDatabase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::RefreshAssetDatabase
// Il2CppName: RefreshAssetDatabase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::RefreshAssetDatabase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "RefreshAssetDatabase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::LoadAssetAtPath
// Il2CppName: LoadAssetAtPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*, System::Type*)>(&HoudiniEngineUnity::HEU_AssetDatabase::LoadAssetAtPath)> {
  static const MethodInfo* get() {
    static auto* assetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "LoadAssetAtPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetPath, type});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::LoadSubAssetAtPath
// Il2CppName: LoadSubAssetAtPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Object* (*)(::Il2CppString*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::LoadSubAssetAtPath)> {
  static const MethodInfo* get() {
    static auto* mainPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* subAssetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "LoadSubAssetAtPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainPath, subAssetPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::LoadAllAssetsAtPath
// Il2CppName: LoadAllAssetsAtPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::LoadAllAssetsAtPath)> {
  static const MethodInfo* get() {
    static auto* assetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "LoadAllAssetsAtPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::LoadAllAssetRepresentationsAtPath
// Il2CppName: LoadAllAssetRepresentationsAtPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Object*>* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::LoadAllAssetRepresentationsAtPath)> {
  static const MethodInfo* get() {
    static auto* assetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "LoadAllAssetRepresentationsAtPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::ImportAsset
// Il2CppName: ImportAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*, HoudiniEngineUnity::HEU_AssetDatabase::HEU_ImportAssetOptions)>(&HoudiniEngineUnity::HEU_AssetDatabase::ImportAsset)> {
  static const MethodInfo* get() {
    static auto* assetPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* heuOptions = &::il2cpp_utils::GetClassFromName("HoudiniEngineUnity", "HEU_AssetDatabase/HEU_ImportAssetOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "ImportAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetPath, heuOptions});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetWorkingPath
// Il2CppName: GetAssetWorkingPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetWorkingPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetWorkingPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetBakedPath
// Il2CppName: GetAssetBakedPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetBakedPath)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetBakedPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetBakedPathWithAssetName
// Il2CppName: GetAssetBakedPathWithAssetName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetBakedPathWithAssetName)> {
  static const MethodInfo* get() {
    static auto* assetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetBakedPathWithAssetName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CreateUniqueBakePath
// Il2CppName: CreateUniqueBakePath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::CreateUniqueBakePath)> {
  static const MethodInfo* get() {
    static auto* assetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CreateUniqueBakePath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::CreatePathWithFolders
// Il2CppName: CreatePathWithFolders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::CreatePathWithFolders)> {
  static const MethodInfo* get() {
    static auto* inPath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "CreatePathWithFolders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inPath});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AppendMeshesPathToAssetFolder
// Il2CppName: AppendMeshesPathToAssetFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AppendMeshesPathToAssetFolder)> {
  static const MethodInfo* get() {
    static auto* inAssetCacheFolder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AppendMeshesPathToAssetFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inAssetCacheFolder});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AppendTexturesPathToAssetFolder
// Il2CppName: AppendTexturesPathToAssetFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AppendTexturesPathToAssetFolder)> {
  static const MethodInfo* get() {
    static auto* inAssetCacheFolder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AppendTexturesPathToAssetFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inAssetCacheFolder});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AppendMaterialsPathToAssetFolder
// Il2CppName: AppendMaterialsPathToAssetFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AppendMaterialsPathToAssetFolder)> {
  static const MethodInfo* get() {
    static auto* inAssetCacheFolder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AppendMaterialsPathToAssetFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inAssetCacheFolder});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AppendTerrainPathToAssetFolder
// Il2CppName: AppendTerrainPathToAssetFolder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AppendTerrainPathToAssetFolder)> {
  static const MethodInfo* get() {
    static auto* inAssetCacheFolder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AppendTerrainPathToAssetFolder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inAssetCacheFolder});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetSubFolders
// Il2CppName: GetAssetSubFolders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)()>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetSubFolders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetSubFolders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AppendPrefabPath
// Il2CppName: AppendPrefabPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*, ::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AppendPrefabPath)> {
  static const MethodInfo* get() {
    static auto* inAssetCacheFolder = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* assetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AppendPrefabPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{inAssetCacheFolder, assetName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::AppendMeshesAssetFileName
// Il2CppName: AppendMeshesAssetFileName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::AppendMeshesAssetFileName)> {
  static const MethodInfo* get() {
    static auto* assetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "AppendMeshesAssetFileName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsSubAsset
// Il2CppName: IsSubAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsSubAsset)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsSubAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetAssetPathsFromAssetBundle
// Il2CppName: GetAssetPathsFromAssetBundle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<::Il2CppString*>* (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetAssetPathsFromAssetBundle)> {
  static const MethodInfo* get() {
    static auto* assetBundleFileName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetAssetPathsFromAssetBundle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundleFileName});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::IsAssetSavedInScene
// Il2CppName: IsAssetSavedInScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::GameObject*)>(&HoudiniEngineUnity::HEU_AssetDatabase::IsAssetSavedInScene)> {
  static const MethodInfo* get() {
    static auto* go = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "IsAssetSavedInScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{go});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::SelectAssetAtPath
// Il2CppName: SelectAssetAtPath
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Il2CppString*)>(&HoudiniEngineUnity::HEU_AssetDatabase::SelectAssetAtPath)> {
  static const MethodInfo* get() {
    static auto* path = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "SelectAssetAtPath", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{path});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::PrintDependencies
// Il2CppName: PrintDependencies
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(UnityEngine::GameObject*)>(&HoudiniEngineUnity::HEU_AssetDatabase::PrintDependencies)> {
  static const MethodInfo* get() {
    static auto* targetGO = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "PrintDependencies", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetGO});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetUniqueAssetPathForUnityAsset
// Il2CppName: GetUniqueAssetPathForUnityAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(UnityEngine::Object*)>(&HoudiniEngineUnity::HEU_AssetDatabase::GetUniqueAssetPathForUnityAsset)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(HoudiniEngineUnity::HEU_AssetDatabase*), "GetUniqueAssetPathForUnityAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::LoadUnityAssetFromUniqueAssetPath
// Il2CppName: LoadUnityAssetFromUniqueAssetPath
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: HoudiniEngineUnity::HEU_AssetDatabase::GetBuiltinExtraResource
// Il2CppName: GetBuiltinExtraResource
// Cannot write MetadataGetter for generic methods!
