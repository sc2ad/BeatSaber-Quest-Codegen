// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: CSCore.IWriteable
#include "CSCore/IWriteable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: CSCore
namespace CSCore {
  // Forward declaring type: WaveFormat
  class WaveFormat;
  // Forward declaring type: IWaveSource
  class IWaveSource;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: BinaryWriter
  class BinaryWriter;
}
// Completed forward declares
// Type namespace: CSCore.Codecs.WAV
namespace CSCore::Codecs::WAV {
  // Forward declaring type: WaveWriter
  class WaveWriter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CSCore::Codecs::WAV::WaveWriter);
DEFINE_IL2CPP_ARG_TYPE(::CSCore::Codecs::WAV::WaveWriter*, "CSCore.Codecs.WAV", "WaveWriter");
// Type namespace: CSCore.Codecs.WAV
namespace CSCore::Codecs::WAV {
  // Size: 0x3A
  #pragma pack(push, 1)
  // Autogenerated type: CSCore.Codecs.WAV.WaveWriter
  // [TokenAttribute] Offset: FFFFFFFF
  class WaveWriter : public ::Il2CppObject/*, public ::System::IDisposable, public ::CSCore::IWriteable*/ {
    public:
    public:
    // private readonly CSCore.WaveFormat _waveFormat
    // Size: 0x8
    // Offset: 0x10
    ::CSCore::WaveFormat* waveFormat;
    // Field size check
    static_assert(sizeof(::CSCore::WaveFormat*) == 0x8);
    // private readonly System.Int64 _waveStartPosition
    // Size: 0x8
    // Offset: 0x18
    int64_t waveStartPosition;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 _dataLength
    // Size: 0x4
    // Offset: 0x20
    int dataLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isDisposed
    // Size: 0x1
    // Offset: 0x24
    bool isDisposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDisposed and: stream
    char __padding3[0x3] = {};
    // private System.IO.Stream _stream
    // Size: 0x8
    // Offset: 0x28
    ::System::IO::Stream* stream;
    // Field size check
    static_assert(sizeof(::System::IO::Stream*) == 0x8);
    // private System.IO.BinaryWriter _writer
    // Size: 0x8
    // Offset: 0x30
    ::System::IO::BinaryWriter* writer;
    // Field size check
    static_assert(sizeof(::System::IO::BinaryWriter*) == 0x8);
    // private System.Boolean _isDisposing
    // Size: 0x1
    // Offset: 0x38
    bool isDisposing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean _closeStream
    // Size: 0x1
    // Offset: 0x39
    bool closeStream;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator ::CSCore::IWriteable
    operator ::CSCore::IWriteable() noexcept {
      return *reinterpret_cast<::CSCore::IWriteable*>(this);
    }
    // Get instance field reference: private readonly CSCore.WaveFormat _waveFormat
    [[deprecated("Use field access instead!")]] ::CSCore::WaveFormat*& dyn__waveFormat();
    // Get instance field reference: private readonly System.Int64 _waveStartPosition
    [[deprecated("Use field access instead!")]] int64_t& dyn__waveStartPosition();
    // Get instance field reference: private System.Int32 _dataLength
    [[deprecated("Use field access instead!")]] int& dyn__dataLength();
    // Get instance field reference: private System.Boolean _isDisposed
    [[deprecated("Use field access instead!")]] bool& dyn__isDisposed();
    // Get instance field reference: private System.IO.Stream _stream
    [[deprecated("Use field access instead!")]] ::System::IO::Stream*& dyn__stream();
    // Get instance field reference: private System.IO.BinaryWriter _writer
    [[deprecated("Use field access instead!")]] ::System::IO::BinaryWriter*& dyn__writer();
    // Get instance field reference: private System.Boolean _isDisposing
    [[deprecated("Use field access instead!")]] bool& dyn__isDisposing();
    // Get instance field reference: private readonly System.Boolean _closeStream
    [[deprecated("Use field access instead!")]] bool& dyn__closeStream();
    // public System.Boolean get_IsDisposed()
    // Offset: 0x1034324
    bool get_IsDisposed();
    // public System.Boolean get_IsDisposing()
    // Offset: 0x103432C
    bool get_IsDisposing();
    // public System.Void .ctor(System.String fileName, CSCore.WaveFormat waveFormat)
    // Offset: 0x1034334
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveWriter* New_ctor(::StringW fileName, ::CSCore::WaveFormat* waveFormat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::Codecs::WAV::WaveWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveWriter*, creationType>(fileName, waveFormat)));
    }
    // public System.Void .ctor(System.IO.Stream stream, CSCore.WaveFormat waveFormat)
    // Offset: 0x1034378
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveWriter* New_ctor(::System::IO::Stream* stream, ::CSCore::WaveFormat* waveFormat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::Codecs::WAV::WaveWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveWriter*, creationType>(stream, waveFormat)));
    }
    // public System.Void Dispose()
    // Offset: 0x10345C8
    void Dispose();
    // static public System.Void WriteToFile(System.String filename, CSCore.IWaveSource source, System.Boolean deleteFileIfAlreadyExists, System.Int32 maxlength)
    // Offset: 0x1034644
    static void WriteToFile(::StringW filename, ::CSCore::IWaveSource* source, bool deleteFileIfAlreadyExists, int maxlength);
    // public System.Void WriteSample(System.Single sample)
    // Offset: 0x1034A28
    void WriteSample(float sample);
    // public System.Void WriteSamples(System.Single[] samples, System.Int32 offset, System.Int32 count)
    // Offset: 0x10351DC
    void WriteSamples(::ArrayW<float> samples, int offset, int count);
    // public System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x10349C0
    void Write(::ArrayW<uint8_t> buffer, int offset, int count);
    // public System.Void Write(System.Byte value)
    // Offset: 0x1034F48
    void Write(uint8_t value);
    // public System.Void Write(System.Int16 value)
    // Offset: 0x1034F94
    void Write(int16_t value);
    // public System.Void Write(System.Int32 value)
    // Offset: 0x1034FE4
    void Write(int value);
    // public System.Void Write(System.Single value)
    // Offset: 0x1035184
    void Write(float value);
    // private System.Void WriteHeader()
    // Offset: 0x1034518
    void WriteHeader();
    // private System.Void WriteRiffHeader()
    // Offset: 0x1035260
    void WriteRiffHeader();
    // private System.Void WriteFmtChunk()
    // Offset: 0x103535C
    void WriteFmtChunk();
    // private System.Void WriteDataChunk()
    // Offset: 0x10355CC
    void WriteDataChunk();
    // private System.Void CheckObjectDisposed()
    // Offset: 0x1034D74
    void CheckObjectDisposed();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x103566C
    void Dispose(bool disposing);
    // protected override System.Void Finalize()
    // Offset: 0x103580C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // CSCore.Codecs.WAV.WaveWriter
  #pragma pack(pop)
  static check_size<sizeof(WaveWriter), 57 + sizeof(bool)> __CSCore_Codecs_WAV_WaveWriterSizeCheck;
  static_assert(sizeof(WaveWriter) == 0x3A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::get_IsDisposed
// Il2CppName: get_IsDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::get_IsDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "get_IsDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::get_IsDisposing
// Il2CppName: get_IsDisposing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::get_IsDisposing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "get_IsDisposing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteToFile
// Il2CppName: WriteToFile
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW, ::CSCore::IWaveSource*, bool, int)>(&CSCore::Codecs::WAV::WaveWriter::WriteToFile)> {
  static const MethodInfo* get() {
    static auto* filename = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("CSCore", "IWaveSource")->byval_arg;
    static auto* deleteFileIfAlreadyExists = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* maxlength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteToFile", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{filename, source, deleteFileIfAlreadyExists, maxlength});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteSample
// Il2CppName: WriteSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(float)>(&CSCore::Codecs::WAV::WaveWriter::WriteSample)> {
  static const MethodInfo* get() {
    static auto* sample = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sample});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteSamples
// Il2CppName: WriteSamples
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(::ArrayW<float>, int, int)>(&CSCore::Codecs::WAV::WaveWriter::WriteSamples)> {
  static const MethodInfo* get() {
    static auto* samples = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Single"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteSamples", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{samples, offset, count});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(::ArrayW<uint8_t>, int, int)>(&CSCore::Codecs::WAV::WaveWriter::Write)> {
  static const MethodInfo* get() {
    static auto* buffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buffer, offset, count});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(uint8_t)>(&CSCore::Codecs::WAV::WaveWriter::Write)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(int16_t)>(&CSCore::Codecs::WAV::WaveWriter::Write)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int16")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(int)>(&CSCore::Codecs::WAV::WaveWriter::Write)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(float)>(&CSCore::Codecs::WAV::WaveWriter::Write)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteHeader
// Il2CppName: WriteHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::WriteHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteRiffHeader
// Il2CppName: WriteRiffHeader
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::WriteRiffHeader)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteRiffHeader", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteFmtChunk
// Il2CppName: WriteFmtChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::WriteFmtChunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteFmtChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::WriteDataChunk
// Il2CppName: WriteDataChunk
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::WriteDataChunk)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "WriteDataChunk", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::CheckObjectDisposed
// Il2CppName: CheckObjectDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::CheckObjectDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "CheckObjectDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)(bool)>(&CSCore::Codecs::WAV::WaveWriter::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: CSCore::Codecs::WAV::WaveWriter::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::Codecs::WAV::WaveWriter::*)()>(&CSCore::Codecs::WAV::WaveWriter::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::Codecs::WAV::WaveWriter*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
