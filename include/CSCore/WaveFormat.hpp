// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: CSCore.AudioEncoding
#include "CSCore/AudioEncoding.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: CSCore
namespace CSCore {
  // Forward declaring type: WaveFormat
  class WaveFormat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CSCore::WaveFormat);
DEFINE_IL2CPP_ARG_TYPE(::CSCore::WaveFormat*, "CSCore", "WaveFormat");
// Type namespace: CSCore
namespace CSCore {
  // Size: 0x22
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: CSCore.WaveFormat
  // [TokenAttribute] Offset: FFFFFFFF
  class WaveFormat : public ::Il2CppObject/*, public ::System::IEquatable_1<::CSCore::WaveFormat*>, public ::System::ICloneable*/ {
    public:
    public:
    // private CSCore.AudioEncoding _encoding
    // Size: 0x2
    // Offset: 0x10
    ::CSCore::AudioEncoding encoding;
    // Field size check
    static_assert(sizeof(::CSCore::AudioEncoding) == 0x2);
    // private System.Int16 _channels
    // Size: 0x2
    // Offset: 0x12
    int16_t channels;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int32 _sampleRate
    // Size: 0x4
    // Offset: 0x14
    int sampleRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _bytesPerSecond
    // Size: 0x4
    // Offset: 0x18
    int bytesPerSecond;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int16 _blockAlign
    // Size: 0x2
    // Offset: 0x1C
    int16_t blockAlign;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _bitsPerSample
    // Size: 0x2
    // Offset: 0x1E
    int16_t bitsPerSample;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private System.Int16 _extraSize
    // Size: 0x2
    // Offset: 0x20
    int16_t extraSize;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    public:
    // Creating interface conversion operator: operator ::System::IEquatable_1<::CSCore::WaveFormat*>
    operator ::System::IEquatable_1<::CSCore::WaveFormat*>() noexcept {
      return *reinterpret_cast<::System::IEquatable_1<::CSCore::WaveFormat*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::ICloneable
    operator ::System::ICloneable() noexcept {
      return *reinterpret_cast<::System::ICloneable*>(this);
    }
    // Get instance field reference: private CSCore.AudioEncoding _encoding
    [[deprecated("Use field access instead!")]] ::CSCore::AudioEncoding& dyn__encoding();
    // Get instance field reference: private System.Int16 _channels
    [[deprecated("Use field access instead!")]] int16_t& dyn__channels();
    // Get instance field reference: private System.Int32 _sampleRate
    [[deprecated("Use field access instead!")]] int& dyn__sampleRate();
    // Get instance field reference: private System.Int32 _bytesPerSecond
    [[deprecated("Use field access instead!")]] int& dyn__bytesPerSecond();
    // Get instance field reference: private System.Int16 _blockAlign
    [[deprecated("Use field access instead!")]] int16_t& dyn__blockAlign();
    // Get instance field reference: private System.Int16 _bitsPerSample
    [[deprecated("Use field access instead!")]] int16_t& dyn__bitsPerSample();
    // Get instance field reference: private System.Int16 _extraSize
    [[deprecated("Use field access instead!")]] int16_t& dyn__extraSize();
    // public System.Int32 get_Channels()
    // Offset: 0x1035880
    int get_Channels();
    // protected internal System.Void set_Channels(System.Int32 value)
    // Offset: 0x1035888
    void set_Channels(int value);
    // public System.Int32 get_SampleRate()
    // Offset: 0x103589C
    int get_SampleRate();
    // protected internal System.Void set_SampleRate(System.Int32 value)
    // Offset: 0x10358A4
    void set_SampleRate(int value);
    // public System.Int32 get_BytesPerSecond()
    // Offset: 0x10358B8
    int get_BytesPerSecond();
    // protected internal System.Void set_BytesPerSecond(System.Int32 value)
    // Offset: 0x10358C0
    void set_BytesPerSecond(int value);
    // public System.Int32 get_BlockAlign()
    // Offset: 0x10358C8
    int get_BlockAlign();
    // protected internal System.Void set_BlockAlign(System.Int32 value)
    // Offset: 0x10358D0
    void set_BlockAlign(int value);
    // public System.Int32 get_BitsPerSample()
    // Offset: 0x10358D8
    int get_BitsPerSample();
    // protected internal System.Void set_BitsPerSample(System.Int32 value)
    // Offset: 0x10358E0
    void set_BitsPerSample(int value);
    // public System.Int32 get_ExtraSize()
    // Offset: 0x10358F4
    int get_ExtraSize();
    // protected internal System.Void set_ExtraSize(System.Int32 value)
    // Offset: 0x10358FC
    void set_ExtraSize(int value);
    // public System.Int32 get_BytesPerSample()
    // Offset: 0x1035904
    int get_BytesPerSample();
    // public System.Int32 get_BytesPerBlock()
    // Offset: 0x1035934
    int get_BytesPerBlock();
    // public CSCore.AudioEncoding get_WaveFormatTag()
    // Offset: 0x1035978
    ::CSCore::AudioEncoding get_WaveFormatTag();
    // protected internal System.Void set_WaveFormatTag(CSCore.AudioEncoding value)
    // Offset: 0x1035980
    void set_WaveFormatTag(::CSCore::AudioEncoding value);
    // public System.Void .ctor()
    // Offset: 0x1035988
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormat*, creationType>()));
    }
    // public System.Void .ctor(System.Int32 sampleRate, System.Int32 bits, System.Int32 channels)
    // Offset: 0x10359A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormat* New_ctor(int sampleRate, int bits, int channels) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormat*, creationType>(sampleRate, bits, channels)));
    }
    // public System.Void .ctor(System.Int32 sampleRate, System.Int32 bits, System.Int32 channels, CSCore.AudioEncoding encoding)
    // Offset: 0x10359AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormat* New_ctor(int sampleRate, int bits, int channels, ::CSCore::AudioEncoding encoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormat*, creationType>(sampleRate, bits, channels, encoding)));
    }
    // public System.Void .ctor(System.Int32 sampleRate, System.Int32 bits, System.Int32 channels, CSCore.AudioEncoding encoding, System.Int32 extraSize)
    // Offset: 0x10359B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormat* New_ctor(int sampleRate, int bits, int channels, ::CSCore::AudioEncoding encoding, int extraSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormat*, creationType>(sampleRate, bits, channels, encoding, extraSize)));
    }
    // public System.Int64 MillisecondsToBytes(System.Double milliseconds)
    // Offset: 0x1035AF4
    int64_t MillisecondsToBytes(double milliseconds);
    // public System.Double BytesToMilliseconds(System.Int64 bytes)
    // Offset: 0x1035B5C
    double BytesToMilliseconds(int64_t bytes);
    // public System.Boolean Equals(CSCore.WaveFormat other)
    // Offset: 0x1035BC0
    bool Equals(::CSCore::WaveFormat* other);
    // public System.Object Clone()
    // Offset: 0x1035FC4
    ::Il2CppObject* Clone();
    // System.Void SetWaveFormatTagInternal(CSCore.AudioEncoding waveFormatTag)
    // Offset: 0x1035FCC
    void SetWaveFormatTagInternal(::CSCore::AudioEncoding waveFormatTag);
    // System.Void SetBitsPerSampleAndFormatProperties(System.Int32 bitsPerSample)
    // Offset: 0x1035FDC
    void SetBitsPerSampleAndFormatProperties(int bitsPerSample);
    // protected internal System.Void UpdateProperties()
    // Offset: 0x1036018
    void UpdateProperties();
    // private System.Text.StringBuilder GetInformation()
    // Offset: 0x1035D68
    ::System::Text::StringBuilder* GetInformation();
    // public override System.String ToString()
    // Offset: 0x1035D44
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // CSCore.WaveFormat
  #pragma pack(pop)
  static check_size<sizeof(WaveFormat), 32 + sizeof(int16_t)> __CSCore_WaveFormatSizeCheck;
  static_assert(sizeof(WaveFormat) == 0x22);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CSCore::WaveFormat::get_Channels
// Il2CppName: get_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_Channels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_Channels
// Il2CppName: set_Channels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::set_Channels)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_Channels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_SampleRate
// Il2CppName: get_SampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_SampleRate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_SampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_SampleRate
// Il2CppName: set_SampleRate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::set_SampleRate)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_SampleRate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_BytesPerSecond
// Il2CppName: get_BytesPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_BytesPerSecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_BytesPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_BytesPerSecond
// Il2CppName: set_BytesPerSecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::set_BytesPerSecond)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_BytesPerSecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_BlockAlign
// Il2CppName: get_BlockAlign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_BlockAlign)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_BlockAlign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_BlockAlign
// Il2CppName: set_BlockAlign
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::set_BlockAlign)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_BlockAlign", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_BitsPerSample
// Il2CppName: get_BitsPerSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_BitsPerSample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_BitsPerSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_BitsPerSample
// Il2CppName: set_BitsPerSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::set_BitsPerSample)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_BitsPerSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_ExtraSize
// Il2CppName: get_ExtraSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_ExtraSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_ExtraSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_ExtraSize
// Il2CppName: set_ExtraSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::set_ExtraSize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_ExtraSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_BytesPerSample
// Il2CppName: get_BytesPerSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_BytesPerSample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_BytesPerSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_BytesPerBlock
// Il2CppName: get_BytesPerBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_BytesPerBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_BytesPerBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::get_WaveFormatTag
// Il2CppName: get_WaveFormatTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CSCore::AudioEncoding (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::get_WaveFormatTag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "get_WaveFormatTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::set_WaveFormatTag
// Il2CppName: set_WaveFormatTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(::CSCore::AudioEncoding)>(&CSCore::WaveFormat::set_WaveFormatTag)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("CSCore", "AudioEncoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "set_WaveFormatTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormat::MillisecondsToBytes
// Il2CppName: MillisecondsToBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (CSCore::WaveFormat::*)(double)>(&CSCore::WaveFormat::MillisecondsToBytes)> {
  static const MethodInfo* get() {
    static auto* milliseconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "MillisecondsToBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{milliseconds});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::BytesToMilliseconds
// Il2CppName: BytesToMilliseconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (CSCore::WaveFormat::*)(int64_t)>(&CSCore::WaveFormat::BytesToMilliseconds)> {
  static const MethodInfo* get() {
    static auto* bytes = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "BytesToMilliseconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bytes});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (CSCore::WaveFormat::*)(::CSCore::WaveFormat*)>(&CSCore::WaveFormat::Equals)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("CSCore", "WaveFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::SetWaveFormatTagInternal
// Il2CppName: SetWaveFormatTagInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(::CSCore::AudioEncoding)>(&CSCore::WaveFormat::SetWaveFormatTagInternal)> {
  static const MethodInfo* get() {
    static auto* waveFormatTag = &::il2cpp_utils::GetClassFromName("CSCore", "AudioEncoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "SetWaveFormatTagInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waveFormatTag});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::SetBitsPerSampleAndFormatProperties
// Il2CppName: SetBitsPerSampleAndFormatProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)(int)>(&CSCore::WaveFormat::SetBitsPerSampleAndFormatProperties)> {
  static const MethodInfo* get() {
    static auto* bitsPerSample = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "SetBitsPerSampleAndFormatProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bitsPerSample});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::UpdateProperties
// Il2CppName: UpdateProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::UpdateProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "UpdateProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::GetInformation
// Il2CppName: GetInformation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Text::StringBuilder* (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::GetInformation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "GetInformation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormat::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CSCore::WaveFormat::*)()>(&CSCore::WaveFormat::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormat*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
