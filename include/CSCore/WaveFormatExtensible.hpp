// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: CSCore.WaveFormat
#include "CSCore/WaveFormat.hpp"
// Including type: CSCore.ChannelMask
#include "CSCore/ChannelMask.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: CSCore
namespace CSCore {
  // Skipping declaration: AudioEncoding because it is already included!
}
// Completed forward declares
// Type namespace: CSCore
namespace CSCore {
  // Forward declaring type: WaveFormatExtensible
  class WaveFormatExtensible;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::CSCore::WaveFormatExtensible);
DEFINE_IL2CPP_ARG_TYPE(::CSCore::WaveFormatExtensible*, "CSCore", "WaveFormatExtensible");
// Type namespace: CSCore
namespace CSCore {
  // Size: 0x38
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: CSCore.WaveFormatExtensible
  // [TokenAttribute] Offset: FFFFFFFF
  class WaveFormatExtensible : public ::CSCore::WaveFormat {
    public:
    public:
    // private System.Int16 _samplesUnion
    // Size: 0x2
    // Offset: 0x22
    int16_t samplesUnion;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // private CSCore.ChannelMask _channelMask
    // Size: 0x4
    // Offset: 0x24
    ::CSCore::ChannelMask channelMask;
    // Field size check
    static_assert(sizeof(::CSCore::ChannelMask) == 0x4);
    // private System.Guid _subFormat
    // Size: 0x10
    // Offset: 0x28
    ::System::Guid subFormat;
    // Field size check
    static_assert(sizeof(::System::Guid) == 0x10);
    public:
    // static field const value: static System.Int32 WaveFormatExtensibleExtraSize
    static constexpr const int WaveFormatExtensibleExtraSize = 22;
    // Get static field: static System.Int32 WaveFormatExtensibleExtraSize
    static int _get_WaveFormatExtensibleExtraSize();
    // Set static field: static System.Int32 WaveFormatExtensibleExtraSize
    static void _set_WaveFormatExtensibleExtraSize(int value);
    // Get instance field reference: private System.Int16 _samplesUnion
    [[deprecated("Use field access instead!")]] int16_t& dyn__samplesUnion();
    // Get instance field reference: private CSCore.ChannelMask _channelMask
    [[deprecated("Use field access instead!")]] ::CSCore::ChannelMask& dyn__channelMask();
    // Get instance field reference: private System.Guid _subFormat
    [[deprecated("Use field access instead!")]] ::System::Guid& dyn__subFormat();
    // public System.Int32 get_ValidBitsPerSample()
    // Offset: 0x10361B0
    int get_ValidBitsPerSample();
    // protected internal System.Void set_ValidBitsPerSample(System.Int32 value)
    // Offset: 0x10361B8
    void set_ValidBitsPerSample(int value);
    // public System.Int32 get_SamplesPerBlock()
    // Offset: 0x10361C0
    int get_SamplesPerBlock();
    // protected internal System.Void set_SamplesPerBlock(System.Int32 value)
    // Offset: 0x10361C8
    void set_SamplesPerBlock(int value);
    // public CSCore.ChannelMask get_ChannelMask()
    // Offset: 0x10361D0
    ::CSCore::ChannelMask get_ChannelMask();
    // protected internal System.Void set_ChannelMask(CSCore.ChannelMask value)
    // Offset: 0x10361D8
    void set_ChannelMask(::CSCore::ChannelMask value);
    // public System.Guid get_SubFormat()
    // Offset: 0x10361E0
    ::System::Guid get_SubFormat();
    // protected internal System.Void set_SubFormat(System.Guid value)
    // Offset: 0x10361EC
    void set_SubFormat(::System::Guid value);
    // public System.Void .ctor(System.Int32 sampleRate, System.Int32 bits, System.Int32 channels, System.Guid subFormat)
    // Offset: 0x103620C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormatExtensible* New_ctor(int sampleRate, int bits, int channels, ::System::Guid subFormat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormatExtensible::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormatExtensible*, creationType>(sampleRate, bits, channels, subFormat)));
    }
    // public System.Void .ctor(System.Int32 sampleRate, System.Int32 bits, System.Int32 channels, System.Guid subFormat, CSCore.ChannelMask channelMask)
    // Offset: 0x1036294
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormatExtensible* New_ctor(int sampleRate, int bits, int channels, ::System::Guid subFormat, ::CSCore::ChannelMask channelMask) {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormatExtensible::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormatExtensible*, creationType>(sampleRate, bits, channels, subFormat, channelMask)));
    }
    // static public System.Guid SubTypeFromWaveFormat(CSCore.WaveFormat waveFormat)
    // Offset: 0x10360B4
    static ::System::Guid SubTypeFromWaveFormat(::CSCore::WaveFormat* waveFormat);
    // public CSCore.WaveFormat ToWaveFormat()
    // Offset: 0x10364BC
    ::CSCore::WaveFormat* ToWaveFormat();
    // System.Void .ctor()
    // Offset: 0x10361F4
    // Implemented from: CSCore.WaveFormat
    // Base method: System.Void WaveFormat::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaveFormatExtensible* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::CSCore::WaveFormatExtensible::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaveFormatExtensible*, creationType>()));
    }
    // public override System.Object Clone()
    // Offset: 0x10365B8
    // Implemented from: CSCore.WaveFormat
    // Base method: System.Object WaveFormat::Clone()
    ::Il2CppObject* Clone();
    // override System.Void SetWaveFormatTagInternal(CSCore.AudioEncoding waveFormatTag)
    // Offset: 0x10365C0
    // Implemented from: CSCore.WaveFormat
    // Base method: System.Void WaveFormat::SetWaveFormatTagInternal(CSCore.AudioEncoding waveFormatTag)
    void SetWaveFormatTagInternal(::CSCore::AudioEncoding waveFormatTag);
    // public override System.String ToString()
    // Offset: 0x1036638
    // Implemented from: CSCore.WaveFormat
    // Base method: System.String WaveFormat::ToString()
    ::StringW ToString();
  }; // CSCore.WaveFormatExtensible
  #pragma pack(pop)
  static check_size<sizeof(WaveFormatExtensible), 40 + sizeof(::System::Guid)> __CSCore_WaveFormatExtensibleSizeCheck;
  static_assert(sizeof(WaveFormatExtensible) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::get_ValidBitsPerSample
// Il2CppName: get_ValidBitsPerSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::get_ValidBitsPerSample)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "get_ValidBitsPerSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::set_ValidBitsPerSample
// Il2CppName: set_ValidBitsPerSample
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormatExtensible::*)(int)>(&CSCore::WaveFormatExtensible::set_ValidBitsPerSample)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "set_ValidBitsPerSample", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::get_SamplesPerBlock
// Il2CppName: get_SamplesPerBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::get_SamplesPerBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "get_SamplesPerBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::set_SamplesPerBlock
// Il2CppName: set_SamplesPerBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormatExtensible::*)(int)>(&CSCore::WaveFormatExtensible::set_SamplesPerBlock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "set_SamplesPerBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::get_ChannelMask
// Il2CppName: get_ChannelMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CSCore::ChannelMask (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::get_ChannelMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "get_ChannelMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::set_ChannelMask
// Il2CppName: set_ChannelMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormatExtensible::*)(::CSCore::ChannelMask)>(&CSCore::WaveFormatExtensible::set_ChannelMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("CSCore", "ChannelMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "set_ChannelMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::get_SubFormat
// Il2CppName: get_SubFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::get_SubFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "get_SubFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::set_SubFormat
// Il2CppName: set_SubFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormatExtensible::*)(::System::Guid)>(&CSCore::WaveFormatExtensible::set_SubFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Guid")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "set_SubFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::SubTypeFromWaveFormat
// Il2CppName: SubTypeFromWaveFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Guid (*)(::CSCore::WaveFormat*)>(&CSCore::WaveFormatExtensible::SubTypeFromWaveFormat)> {
  static const MethodInfo* get() {
    static auto* waveFormat = &::il2cpp_utils::GetClassFromName("CSCore", "WaveFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "SubTypeFromWaveFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waveFormat});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::ToWaveFormat
// Il2CppName: ToWaveFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::CSCore::WaveFormat* (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::ToWaveFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "ToWaveFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::Clone
// Il2CppName: Clone
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::Clone)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "Clone", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::SetWaveFormatTagInternal
// Il2CppName: SetWaveFormatTagInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (CSCore::WaveFormatExtensible::*)(::CSCore::AudioEncoding)>(&CSCore::WaveFormatExtensible::SetWaveFormatTagInternal)> {
  static const MethodInfo* get() {
    static auto* waveFormatTag = &::il2cpp_utils::GetClassFromName("CSCore", "AudioEncoding")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "SetWaveFormatTagInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{waveFormatTag});
  }
};
// Writing MetadataGetter for method: CSCore::WaveFormatExtensible::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (CSCore::WaveFormatExtensible::*)()>(&CSCore::WaveFormatExtensible::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(CSCore::WaveFormatExtensible*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
