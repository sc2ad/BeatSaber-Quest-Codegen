// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Animator
  class Animator;
}
// Completed forward declares
// Type namespace: OVRTouchSample
namespace OVRTouchSample {
  // Forward declaring type: TouchController
  class TouchController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::OVRTouchSample::TouchController);
DEFINE_IL2CPP_ARG_TYPE(::OVRTouchSample::TouchController*, "OVRTouchSample", "TouchController");
// Type namespace: OVRTouchSample
namespace OVRTouchSample {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: OVRTouchSample.TouchController
  // [TokenAttribute] Offset: FFFFFFFF
  class TouchController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private OVRInput/Controller m_controller
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::OVRInput::Controller m_controller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // Padding between fields: m_controller and: m_animator
    char __padding0[0x4] = {};
    // private UnityEngine.Animator m_animator
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Animator* m_animator;
    // Field size check
    static_assert(sizeof(::UnityEngine::Animator*) == 0x8);
    // private System.Boolean m_restoreOnInputAcquired
    // Size: 0x1
    // Offset: 0x28
    bool m_restoreOnInputAcquired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private OVRInput/Controller m_controller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_m_controller();
    // Get instance field reference: private UnityEngine.Animator m_animator
    [[deprecated("Use field access instead!")]] ::UnityEngine::Animator*& dyn_m_animator();
    // Get instance field reference: private System.Boolean m_restoreOnInputAcquired
    [[deprecated("Use field access instead!")]] bool& dyn_m_restoreOnInputAcquired();
    // public System.Void .ctor()
    // Offset: 0xCB2930
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::OVRTouchSample::TouchController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchController*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0xCB261C
    void Update();
    // private System.Void OnInputFocusLost()
    // Offset: 0xCB2890
    void OnInputFocusLost();
    // private System.Void OnInputFocusAcquired()
    // Offset: 0xCB28EC
    void OnInputFocusAcquired();
  }; // OVRTouchSample.TouchController
  #pragma pack(pop)
  static check_size<sizeof(TouchController), 40 + sizeof(bool)> __OVRTouchSample_TouchControllerSizeCheck;
  static_assert(sizeof(TouchController) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: OVRTouchSample::TouchController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: OVRTouchSample::TouchController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRTouchSample::TouchController::*)()>(&OVRTouchSample::TouchController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTouchSample::TouchController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRTouchSample::TouchController::OnInputFocusLost
// Il2CppName: OnInputFocusLost
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRTouchSample::TouchController::*)()>(&OVRTouchSample::TouchController::OnInputFocusLost)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTouchSample::TouchController*), "OnInputFocusLost", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: OVRTouchSample::TouchController::OnInputFocusAcquired
// Il2CppName: OnInputFocusAcquired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (OVRTouchSample::TouchController::*)()>(&OVRTouchSample::TouchController::OnInputFocusAcquired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(OVRTouchSample::TouchController*), "OnInputFocusAcquired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
