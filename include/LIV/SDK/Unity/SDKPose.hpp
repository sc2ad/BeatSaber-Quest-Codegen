// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: LIV.SDK.Unity.SDKMatrix4x4
#include "LIV/SDK/Unity/SDKMatrix4x4.hpp"
// Including type: LIV.SDK.Unity.SDKVector3
#include "LIV/SDK/Unity/SDKVector3.hpp"
// Including type: LIV.SDK.Unity.SDKQuaternion
#include "LIV/SDK/Unity/SDKQuaternion.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SDKPose
  struct SDKPose;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::SDKPose, "LIV.SDK.Unity", "SDKPose");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x70
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: LIV.SDK.Unity.SDKPose
  // [TokenAttribute] Offset: FFFFFFFF
  struct SDKPose/*, public ::System::ValueType*/ {
    public:
    public:
    // public LIV.SDK.Unity.SDKMatrix4x4 projectionMatrix
    // Size: 0x40
    // Offset: 0x0
    ::LIV::SDK::Unity::SDKMatrix4x4 projectionMatrix;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKMatrix4x4) == 0x40);
    // public LIV.SDK.Unity.SDKVector3 localPosition
    // Size: 0xC
    // Offset: 0x40
    ::LIV::SDK::Unity::SDKVector3 localPosition;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKVector3) == 0xC);
    // public LIV.SDK.Unity.SDKQuaternion localRotation
    // Size: 0x10
    // Offset: 0x4C
    ::LIV::SDK::Unity::SDKQuaternion localRotation;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKQuaternion) == 0x10);
    // public System.Single verticalFieldOfView
    // Size: 0x4
    // Offset: 0x5C
    float verticalFieldOfView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nearClipPlane
    // Size: 0x4
    // Offset: 0x60
    float nearClipPlane;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single farClipPlane
    // Size: 0x4
    // Offset: 0x64
    float farClipPlane;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 unused0
    // Size: 0x4
    // Offset: 0x68
    int unused0;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 unused1
    // Size: 0x4
    // Offset: 0x6C
    int unused1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SDKPose
    constexpr SDKPose(::LIV::SDK::Unity::SDKMatrix4x4 projectionMatrix_ = {}, ::LIV::SDK::Unity::SDKVector3 localPosition_ = {}, ::LIV::SDK::Unity::SDKQuaternion localRotation_ = {}, float verticalFieldOfView_ = {}, float nearClipPlane_ = {}, float farClipPlane_ = {}, int unused0_ = {}, int unused1_ = {}) noexcept : projectionMatrix{projectionMatrix_}, localPosition{localPosition_}, localRotation{localRotation_}, verticalFieldOfView{verticalFieldOfView_}, nearClipPlane{nearClipPlane_}, farClipPlane{farClipPlane_}, unused0{unused0_}, unused1{unused1_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public LIV.SDK.Unity.SDKMatrix4x4 projectionMatrix
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKMatrix4x4& dyn_projectionMatrix();
    // Get instance field reference: public LIV.SDK.Unity.SDKVector3 localPosition
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKVector3& dyn_localPosition();
    // Get instance field reference: public LIV.SDK.Unity.SDKQuaternion localRotation
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKQuaternion& dyn_localRotation();
    // Get instance field reference: public System.Single verticalFieldOfView
    [[deprecated("Use field access instead!")]] float& dyn_verticalFieldOfView();
    // Get instance field reference: public System.Single nearClipPlane
    [[deprecated("Use field access instead!")]] float& dyn_nearClipPlane();
    // Get instance field reference: public System.Single farClipPlane
    [[deprecated("Use field access instead!")]] float& dyn_farClipPlane();
    // Get instance field reference: public System.Int32 unused0
    [[deprecated("Use field access instead!")]] int& dyn_unused0();
    // Get instance field reference: public System.Int32 unused1
    [[deprecated("Use field access instead!")]] int& dyn_unused1();
    // static public LIV.SDK.Unity.SDKPose get_empty()
    // Offset: 0x2A62BA8
    static ::LIV::SDK::Unity::SDKPose get_empty();
    // public override System.String ToString()
    // Offset: 0x2A63B1C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // LIV.SDK.Unity.SDKPose
  #pragma pack(pop)
  static check_size<sizeof(SDKPose), 108 + sizeof(int)> __LIV_SDK_Unity_SDKPoseSizeCheck;
  static_assert(sizeof(SDKPose) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKPose::get_empty
// Il2CppName: get_empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKPose (*)()>(&LIV::SDK::Unity::SDKPose::get_empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKPose), "get_empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKPose::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LIV::SDK::Unity::SDKPose::*)()>(&LIV::SDK::Unity::SDKPose::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKPose), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
