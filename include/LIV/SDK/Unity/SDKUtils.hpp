// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: TEXTURE_COLOR_SPACE
  struct TEXTURE_COLOR_SPACE;
  // Forward declaring type: RENDERING_PIPELINE
  struct RENDERING_PIPELINE;
  // Forward declaring type: TEXTURE_DEVICE
  struct TEXTURE_DEVICE;
  // Forward declaring type: SDKPose
  struct SDKPose;
  // Forward declaring type: SDKInputFrame
  struct SDKInputFrame;
  // Forward declaring type: SDKTrackedSpace
  struct SDKTrackedSpace;
  // Forward declaring type: SDKRender
  class SDKRender;
  // Forward declaring type: FEATURES
  struct FEATURES;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: RenderTextureReadWrite
  struct RenderTextureReadWrite;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: RenderingPath
  struct RenderingPath;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: RenderTextureFormat
  struct RenderTextureFormat;
  // Forward declaring type: MonoBehaviour
  class MonoBehaviour;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SDKUtils
  class SDKUtils;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LIV::SDK::Unity::SDKUtils);
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::SDKUtils*, "LIV.SDK.Unity", "SDKUtils");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.SDKUtils
  // [TokenAttribute] Offset: FFFFFFFF
  class SDKUtils : public ::Il2CppObject {
    public:
    // static public LIV.SDK.Unity.TEXTURE_COLOR_SPACE get_GetDefaultColorSpace()
    // Offset: 0x2B1E7F0
    static ::LIV::SDK::Unity::TEXTURE_COLOR_SPACE get_GetDefaultColorSpace();
    // static public System.Void CreateClipPlane(UnityEngine.Mesh mesh, System.Int32 resX, System.Int32 resY, System.Boolean useQuads, System.Single skirtLength)
    // Offset: 0x2B1C8DC
    static void CreateClipPlane(::UnityEngine::Mesh* mesh, int resX, int resY, bool useQuads, float skirtLength);
    // static public UnityEngine.RenderTextureReadWrite GetReadWriteFromColorSpace(LIV.SDK.Unity.TEXTURE_COLOR_SPACE colorSpace)
    // Offset: 0x2B1E7D8
    static ::UnityEngine::RenderTextureReadWrite GetReadWriteFromColorSpace(::LIV::SDK::Unity::TEXTURE_COLOR_SPACE colorSpace);
    // static public LIV.SDK.Unity.TEXTURE_COLOR_SPACE GetColorSpace(UnityEngine.RenderTexture renderTexture)
    // Offset: 0x2B1DF9C
    static ::LIV::SDK::Unity::TEXTURE_COLOR_SPACE GetColorSpace(::UnityEngine::RenderTexture* renderTexture);
    // static public LIV.SDK.Unity.RENDERING_PIPELINE GetRenderingPipeline(UnityEngine.RenderingPath renderingPath)
    // Offset: 0x2B1E820
    static ::LIV::SDK::Unity::RENDERING_PIPELINE GetRenderingPipeline(::UnityEngine::RenderingPath renderingPath);
    // static public LIV.SDK.Unity.TEXTURE_DEVICE GetDevice()
    // Offset: 0x2B1DF38
    static ::LIV::SDK::Unity::TEXTURE_DEVICE GetDevice();
    // static public System.Boolean ContainsFlag(System.UInt64 flags, System.UInt64 flag)
    // Offset: 0x2B1684C
    static bool ContainsFlag(uint64_t flags, uint64_t flag);
    // static public System.UInt64 SetFlag(System.UInt64 flags, System.UInt64 flag, System.Boolean enabled)
    // Offset: 0x2B158D0
    static uint64_t SetFlag(uint64_t flags, uint64_t flag, bool enabled);
    // static public System.Void GetCameraPositionAndRotation(LIV.SDK.Unity.SDKPose pose, UnityEngine.Matrix4x4 originLocalToWorldMatrix, out UnityEngine.Vector3 position, out UnityEngine.Quaternion rotation)
    // Offset: 0x2B1E840
    static void GetCameraPositionAndRotation(::LIV::SDK::Unity::SDKPose pose, ::UnityEngine::Matrix4x4 originLocalToWorldMatrix, ByRef<::UnityEngine::Vector3> position, ByRef<::UnityEngine::Quaternion> rotation);
    // static public System.Void CleanCameraBehaviours(UnityEngine.Camera camera, System.String[] excludeBehaviours)
    // Offset: 0x2B1C5C8
    static void CleanCameraBehaviours(::UnityEngine::Camera* camera, ::ArrayW<::StringW> excludeBehaviours);
    // static public System.Void SetCamera(UnityEngine.Camera camera, UnityEngine.Transform cameraTransform, LIV.SDK.Unity.SDKInputFrame inputFrame, UnityEngine.Matrix4x4 originLocalToWorldMatrix, System.Int32 layerMask)
    // Offset: 0x2B1A954
    static void SetCamera(::UnityEngine::Camera* camera, ::UnityEngine::Transform* cameraTransform, ::LIV::SDK::Unity::SDKInputFrame inputFrame, ::UnityEngine::Matrix4x4 originLocalToWorldMatrix, int layerMask);
    // static public UnityEngine.Quaternion RotateQuaternionByMatrix(UnityEngine.Matrix4x4 matrix, UnityEngine.Quaternion rotation)
    // Offset: 0x2B1D600
    static ::UnityEngine::Quaternion RotateQuaternionByMatrix(::UnityEngine::Matrix4x4 matrix, ::UnityEngine::Quaternion rotation);
    // static public LIV.SDK.Unity.SDKTrackedSpace GetTrackedSpace(UnityEngine.Transform transform)
    // Offset: 0x2B1E920
    static ::LIV::SDK::Unity::SDKTrackedSpace GetTrackedSpace(::UnityEngine::Transform* transform);
    // static public System.Boolean DestroyObject(ref T reference)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool DestroyObject(ByRef<T> reference) {
      static_assert(std::is_convertible_v<T, ::UnityEngine::Object*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKUtils::DestroyObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKUtils", "DestroyObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(reference));
    }
    // static public System.Boolean DisposeObject(ref T reference)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    static bool DisposeObject(ByRef<T> reference) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::System::IDisposable>);
      static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKUtils::DisposeObject");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("LIV.SDK.Unity", "SDKUtils", "DisposeObject", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(reference)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(static_cast<Il2CppObject*>(nullptr), ___generic__method, byref(reference));
    }
    // static public System.Boolean CreateTexture(ref UnityEngine.RenderTexture renderTexture, System.Int32 width, System.Int32 height, System.Int32 depth, UnityEngine.RenderTextureFormat format)
    // Offset: 0x2B1DC04
    static bool CreateTexture(ByRef<::UnityEngine::RenderTexture*> renderTexture, int width, int height, int depth, ::UnityEngine::RenderTextureFormat format);
    // static public System.Void DestroyTexture(ref UnityEngine.RenderTexture _renderTexture)
    // Offset: 0x2B1D060
    static void DestroyTexture(ByRef<::UnityEngine::RenderTexture*> _renderTexture);
    // static public System.Void ApplyUserSpaceTransform(LIV.SDK.Unity.SDKRender render)
    // Offset: 0x2B1AC18
    static void ApplyUserSpaceTransform(::LIV::SDK::Unity::SDKRender* render);
    // static public System.Void CreateBridgeOutputFrame(LIV.SDK.Unity.SDKRender render)
    // Offset: 0x2B1BCE4
    static void CreateBridgeOutputFrame(::LIV::SDK::Unity::SDKRender* render);
    // static public System.Boolean FeatureEnabled(LIV.SDK.Unity.FEATURES features, LIV.SDK.Unity.FEATURES feature)
    // Offset: 0x2B19E84
    static bool FeatureEnabled(::LIV::SDK::Unity::FEATURES features, ::LIV::SDK::Unity::FEATURES feature);
    // static public System.Void DisableStandardAssets(UnityEngine.Camera cameraInstance, ref UnityEngine.MonoBehaviour[] behaviours, ref System.Boolean[] wasBehaviourEnabled)
    // Offset: 0x2B1C1B0
    static void DisableStandardAssets(::UnityEngine::Camera* cameraInstance, ByRef<::ArrayW<::UnityEngine::MonoBehaviour*>> behaviours, ByRef<::ArrayW<bool>> wasBehaviourEnabled);
    // static public System.Void RestoreStandardAssets(ref UnityEngine.MonoBehaviour[] behaviours, ref System.Boolean[] wasBehaviourEnabled)
    // Offset: 0x2B1C490
    static void RestoreStandardAssets(ByRef<::ArrayW<::UnityEngine::MonoBehaviour*>> behaviours, ByRef<::ArrayW<bool>> wasBehaviourEnabled);
    // static public System.Void ForceForwardRendering(UnityEngine.Camera cameraInstance, UnityEngine.Mesh clipPlaneMesh, UnityEngine.Material forceForwardRenderingMaterial)
    // Offset: 0x2B1EBAC
    static void ForceForwardRendering(::UnityEngine::Camera* cameraInstance, ::UnityEngine::Mesh* clipPlaneMesh, ::UnityEngine::Material* forceForwardRenderingMaterial);
  }; // LIV.SDK.Unity.SDKUtils
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::get_GetDefaultColorSpace
// Il2CppName: get_GetDefaultColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::TEXTURE_COLOR_SPACE (*)()>(&LIV::SDK::Unity::SDKUtils::get_GetDefaultColorSpace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "get_GetDefaultColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::CreateClipPlane
// Il2CppName: CreateClipPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Mesh*, int, int, bool, float)>(&LIV::SDK::Unity::SDKUtils::CreateClipPlane)> {
  static const MethodInfo* get() {
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* resX = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* resY = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useQuads = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* skirtLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "CreateClipPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mesh, resX, resY, useQuads, skirtLength});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::GetReadWriteFromColorSpace
// Il2CppName: GetReadWriteFromColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RenderTextureReadWrite (*)(::LIV::SDK::Unity::TEXTURE_COLOR_SPACE)>(&LIV::SDK::Unity::SDKUtils::GetReadWriteFromColorSpace)> {
  static const MethodInfo* get() {
    static auto* colorSpace = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "TEXTURE_COLOR_SPACE")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "GetReadWriteFromColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorSpace});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::GetColorSpace
// Il2CppName: GetColorSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::TEXTURE_COLOR_SPACE (*)(::UnityEngine::RenderTexture*)>(&LIV::SDK::Unity::SDKUtils::GetColorSpace)> {
  static const MethodInfo* get() {
    static auto* renderTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "GetColorSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderTexture});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::GetRenderingPipeline
// Il2CppName: GetRenderingPipeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::RENDERING_PIPELINE (*)(::UnityEngine::RenderingPath)>(&LIV::SDK::Unity::SDKUtils::GetRenderingPipeline)> {
  static const MethodInfo* get() {
    static auto* renderingPath = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderingPath")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "GetRenderingPipeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderingPath});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::GetDevice
// Il2CppName: GetDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::TEXTURE_DEVICE (*)()>(&LIV::SDK::Unity::SDKUtils::GetDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "GetDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::ContainsFlag
// Il2CppName: ContainsFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, uint64_t)>(&LIV::SDK::Unity::SDKUtils::ContainsFlag)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "ContainsFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, flag});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::SetFlag
// Il2CppName: SetFlag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(uint64_t, uint64_t, bool)>(&LIV::SDK::Unity::SDKUtils::SetFlag)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* flag = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "SetFlag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags, flag, enabled});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::GetCameraPositionAndRotation
// Il2CppName: GetCameraPositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LIV::SDK::Unity::SDKPose, ::UnityEngine::Matrix4x4, ByRef<::UnityEngine::Vector3>, ByRef<::UnityEngine::Quaternion>)>(&LIV::SDK::Unity::SDKUtils::GetCameraPositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* pose = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "SDKPose")->byval_arg;
    static auto* originLocalToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "GetCameraPositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pose, originLocalToWorldMatrix, position, rotation});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::CleanCameraBehaviours
// Il2CppName: CleanCameraBehaviours
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::ArrayW<::StringW>)>(&LIV::SDK::Unity::SDKUtils::CleanCameraBehaviours)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* excludeBehaviours = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "CleanCameraBehaviours", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, excludeBehaviours});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::SetCamera
// Il2CppName: SetCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Transform*, ::LIV::SDK::Unity::SDKInputFrame, ::UnityEngine::Matrix4x4, int)>(&LIV::SDK::Unity::SDKUtils::SetCamera)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* inputFrame = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "SDKInputFrame")->byval_arg;
    static auto* originLocalToWorldMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "SetCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cameraTransform, inputFrame, originLocalToWorldMatrix, layerMask});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::RotateQuaternionByMatrix
// Il2CppName: RotateQuaternionByMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (*)(::UnityEngine::Matrix4x4, ::UnityEngine::Quaternion)>(&LIV::SDK::Unity::SDKUtils::RotateQuaternionByMatrix)> {
  static const MethodInfo* get() {
    static auto* matrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "RotateQuaternionByMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{matrix, rotation});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::GetTrackedSpace
// Il2CppName: GetTrackedSpace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKTrackedSpace (*)(::UnityEngine::Transform*)>(&LIV::SDK::Unity::SDKUtils::GetTrackedSpace)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "GetTrackedSpace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::DestroyObject
// Il2CppName: DestroyObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::DisposeObject
// Il2CppName: DisposeObject
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::CreateTexture
// Il2CppName: CreateTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::UnityEngine::RenderTexture*>, int, int, int, ::UnityEngine::RenderTextureFormat)>(&LIV::SDK::Unity::SDKUtils::CreateTexture)> {
  static const MethodInfo* get() {
    static auto* renderTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->this_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "CreateTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{renderTexture, width, height, depth, format});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::DestroyTexture
// Il2CppName: DestroyTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::UnityEngine::RenderTexture*>)>(&LIV::SDK::Unity::SDKUtils::DestroyTexture)> {
  static const MethodInfo* get() {
    static auto* _renderTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "DestroyTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_renderTexture});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::ApplyUserSpaceTransform
// Il2CppName: ApplyUserSpaceTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LIV::SDK::Unity::SDKRender*)>(&LIV::SDK::Unity::SDKUtils::ApplyUserSpaceTransform)> {
  static const MethodInfo* get() {
    static auto* render = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "SDKRender")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "ApplyUserSpaceTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{render});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::CreateBridgeOutputFrame
// Il2CppName: CreateBridgeOutputFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::LIV::SDK::Unity::SDKRender*)>(&LIV::SDK::Unity::SDKUtils::CreateBridgeOutputFrame)> {
  static const MethodInfo* get() {
    static auto* render = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "SDKRender")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "CreateBridgeOutputFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{render});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::FeatureEnabled
// Il2CppName: FeatureEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::LIV::SDK::Unity::FEATURES, ::LIV::SDK::Unity::FEATURES)>(&LIV::SDK::Unity::SDKUtils::FeatureEnabled)> {
  static const MethodInfo* get() {
    static auto* features = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "FEATURES")->byval_arg;
    static auto* feature = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "FEATURES")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "FeatureEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{features, feature});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::DisableStandardAssets
// Il2CppName: DisableStandardAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ByRef<::ArrayW<::UnityEngine::MonoBehaviour*>>, ByRef<::ArrayW<bool>>)>(&LIV::SDK::Unity::SDKUtils::DisableStandardAssets)> {
  static const MethodInfo* get() {
    static auto* cameraInstance = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* behaviours = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour"), 1)->this_arg;
    static auto* wasBehaviourEnabled = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "DisableStandardAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraInstance, behaviours, wasBehaviourEnabled});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::RestoreStandardAssets
// Il2CppName: RestoreStandardAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<::ArrayW<::UnityEngine::MonoBehaviour*>>, ByRef<::ArrayW<bool>>)>(&LIV::SDK::Unity::SDKUtils::RestoreStandardAssets)> {
  static const MethodInfo* get() {
    static auto* behaviours = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "MonoBehaviour"), 1)->this_arg;
    static auto* wasBehaviourEnabled = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Boolean"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "RestoreStandardAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{behaviours, wasBehaviourEnabled});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKUtils::ForceForwardRendering
// Il2CppName: ForceForwardRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Camera*, ::UnityEngine::Mesh*, ::UnityEngine::Material*)>(&LIV::SDK::Unity::SDKUtils::ForceForwardRendering)> {
  static const MethodInfo* get() {
    static auto* cameraInstance = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* clipPlaneMesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    static auto* forceForwardRenderingMaterial = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKUtils*), "ForceForwardRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraInstance, clipPlaneMesh, forceForwardRenderingMaterial});
  }
};
