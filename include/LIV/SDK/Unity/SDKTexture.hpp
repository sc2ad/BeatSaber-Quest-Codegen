// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: LIV.SDK.Unity.TEXTURE_ID
#include "LIV/SDK/Unity/TEXTURE_ID.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: LIV.SDK.Unity.TEXTURE_DEVICE
#include "LIV/SDK/Unity/TEXTURE_DEVICE.hpp"
// Including type: LIV.SDK.Unity.TEXTURE_TYPE
#include "LIV/SDK/Unity/TEXTURE_TYPE.hpp"
// Including type: LIV.SDK.Unity.TEXTURE_FORMAT
#include "LIV/SDK/Unity/TEXTURE_FORMAT.hpp"
// Including type: LIV.SDK.Unity.TEXTURE_COLOR_SPACE
#include "LIV/SDK/Unity/TEXTURE_COLOR_SPACE.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SDKTexture
  struct SDKTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::SDKTexture, "LIV.SDK.Unity", "SDKTexture");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x34
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: LIV.SDK.Unity.SDKTexture
  // [TokenAttribute] Offset: FFFFFFFF
  struct SDKTexture/*, public ::System::ValueType*/ {
    public:
    public:
    // public LIV.SDK.Unity.TEXTURE_ID id
    // Size: 0x4
    // Offset: 0x0
    ::LIV::SDK::Unity::TEXTURE_ID id;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::TEXTURE_ID) == 0x4);
    // Padding between fields: id and: texturePtr
    char __padding0[0x4] = {};
    // public System.IntPtr texturePtr
    // Size: 0x8
    // Offset: 0x8
    ::System::IntPtr texturePtr;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public System.IntPtr SharedHandle
    // Size: 0x8
    // Offset: 0x10
    ::System::IntPtr SharedHandle;
    // Field size check
    static_assert(sizeof(::System::IntPtr) == 0x8);
    // public LIV.SDK.Unity.TEXTURE_DEVICE device
    // Size: 0x4
    // Offset: 0x18
    ::LIV::SDK::Unity::TEXTURE_DEVICE device;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::TEXTURE_DEVICE) == 0x4);
    // public System.Int32 dummy
    // Size: 0x4
    // Offset: 0x1C
    int dummy;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public LIV.SDK.Unity.TEXTURE_TYPE type
    // Size: 0x4
    // Offset: 0x20
    ::LIV::SDK::Unity::TEXTURE_TYPE type;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::TEXTURE_TYPE) == 0x4);
    // public LIV.SDK.Unity.TEXTURE_FORMAT format
    // Size: 0x4
    // Offset: 0x24
    ::LIV::SDK::Unity::TEXTURE_FORMAT format;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::TEXTURE_FORMAT) == 0x4);
    // public LIV.SDK.Unity.TEXTURE_COLOR_SPACE colorSpace
    // Size: 0x4
    // Offset: 0x28
    ::LIV::SDK::Unity::TEXTURE_COLOR_SPACE colorSpace;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::TEXTURE_COLOR_SPACE) == 0x4);
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0x2C
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0x30
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: SDKTexture
    constexpr SDKTexture(::LIV::SDK::Unity::TEXTURE_ID id_ = {}, ::System::IntPtr texturePtr_ = {}, ::System::IntPtr SharedHandle_ = {}, ::LIV::SDK::Unity::TEXTURE_DEVICE device_ = {}, int dummy_ = {}, ::LIV::SDK::Unity::TEXTURE_TYPE type_ = {}, ::LIV::SDK::Unity::TEXTURE_FORMAT format_ = {}, ::LIV::SDK::Unity::TEXTURE_COLOR_SPACE colorSpace_ = {}, int width_ = {}, int height_ = {}) noexcept : id{id_}, texturePtr{texturePtr_}, SharedHandle{SharedHandle_}, device{device_}, dummy{dummy_}, type{type_}, format{format_}, colorSpace{colorSpace_}, width{width_}, height{height_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public LIV.SDK.Unity.TEXTURE_ID id
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::TEXTURE_ID& dyn_id();
    // Get instance field reference: public System.IntPtr texturePtr
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_texturePtr();
    // Get instance field reference: public System.IntPtr SharedHandle
    [[deprecated("Use field access instead!")]] ::System::IntPtr& dyn_SharedHandle();
    // Get instance field reference: public LIV.SDK.Unity.TEXTURE_DEVICE device
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::TEXTURE_DEVICE& dyn_device();
    // Get instance field reference: public System.Int32 dummy
    [[deprecated("Use field access instead!")]] int& dyn_dummy();
    // Get instance field reference: public LIV.SDK.Unity.TEXTURE_TYPE type
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::TEXTURE_TYPE& dyn_type();
    // Get instance field reference: public LIV.SDK.Unity.TEXTURE_FORMAT format
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::TEXTURE_FORMAT& dyn_format();
    // Get instance field reference: public LIV.SDK.Unity.TEXTURE_COLOR_SPACE colorSpace
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::TEXTURE_COLOR_SPACE& dyn_colorSpace();
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 height
    [[deprecated("Use field access instead!")]] int& dyn_height();
    // static public LIV.SDK.Unity.SDKTexture get_empty()
    // Offset: 0x2A62078
    static ::LIV::SDK::Unity::SDKTexture get_empty();
    // public override System.String ToString()
    // Offset: 0x2A68900
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // LIV.SDK.Unity.SDKTexture
  #pragma pack(pop)
  static check_size<sizeof(SDKTexture), 48 + sizeof(int)> __LIV_SDK_Unity_SDKTextureSizeCheck;
  static_assert(sizeof(SDKTexture) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKTexture::get_empty
// Il2CppName: get_empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKTexture (*)()>(&LIV::SDK::Unity::SDKTexture::get_empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKTexture), "get_empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKTexture::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LIV::SDK::Unity::SDKTexture::*)()>(&LIV::SDK::Unity::SDKTexture::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKTexture), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
