// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SDKVector3
  struct SDKVector3;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SDKQuaternion
  struct SDKQuaternion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::SDKQuaternion, "LIV.SDK.Unity", "SDKQuaternion");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: LIV.SDK.Unity.SDKQuaternion
  // [TokenAttribute] Offset: FFFFFFFF
  struct SDKQuaternion/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.Single x
    // Size: 0x4
    // Offset: 0x0
    float x;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single y
    // Size: 0x4
    // Offset: 0x4
    float y;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single z
    // Size: 0x4
    // Offset: 0x8
    float z;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single w
    // Size: 0x4
    // Offset: 0xC
    float w;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating value type constructor for type: SDKQuaternion
    constexpr SDKQuaternion(float x_ = {}, float y_ = {}, float z_ = {}, float w_ = {}) noexcept : x{x_}, y{y_}, z{z_}, w{w_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.Single x
    [[deprecated("Use field access instead!")]] float& dyn_x();
    // Get instance field reference: public System.Single y
    [[deprecated("Use field access instead!")]] float& dyn_y();
    // Get instance field reference: public System.Single z
    [[deprecated("Use field access instead!")]] float& dyn_z();
    // Get instance field reference: public System.Single w
    [[deprecated("Use field access instead!")]] float& dyn_w();
    // static public LIV.SDK.Unity.SDKQuaternion get_identity()
    // Offset: 0x2A62838
    static ::LIV::SDK::Unity::SDKQuaternion get_identity();
    // static public LIV.SDK.Unity.SDKQuaternion Euler(System.Single pitch, System.Single yaw, System.Single roll)
    // Offset: 0x2A64000
    static ::LIV::SDK::Unity::SDKQuaternion Euler(float pitch, float yaw, float roll);
    // public override System.String ToString()
    // Offset: 0x2A6422C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::StringW ToString();
  }; // LIV.SDK.Unity.SDKQuaternion
  #pragma pack(pop)
  static check_size<sizeof(SDKQuaternion), 12 + sizeof(float)> __LIV_SDK_Unity_SDKQuaternionSizeCheck;
  static_assert(sizeof(SDKQuaternion) == 0x10);
  // static public LIV.SDK.Unity.SDKQuaternion op_Multiply(LIV.SDK.Unity.SDKQuaternion lhs, LIV.SDK.Unity.SDKQuaternion rhs)
  // Offset: 0x2A64114
  ::LIV::SDK::Unity::SDKQuaternion operator*(const ::LIV::SDK::Unity::SDKQuaternion& lhs, const ::LIV::SDK::Unity::SDKQuaternion& rhs);
  // static public LIV.SDK.Unity.SDKVector3 op_Multiply(LIV.SDK.Unity.SDKQuaternion lhs, LIV.SDK.Unity.SDKVector3 rhs)
  // Offset: 0x2A64188
  ::LIV::SDK::Unity::SDKVector3 operator*(const ::LIV::SDK::Unity::SDKQuaternion& lhs, const ::LIV::SDK::Unity::SDKVector3& rhs);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKQuaternion::get_identity
// Il2CppName: get_identity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKQuaternion (*)()>(&LIV::SDK::Unity::SDKQuaternion::get_identity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKQuaternion), "get_identity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKQuaternion::Euler
// Il2CppName: Euler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKQuaternion (*)(float, float, float)>(&LIV::SDK::Unity::SDKQuaternion::Euler)> {
  static const MethodInfo* get() {
    static auto* pitch = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* yaw = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* roll = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKQuaternion), "Euler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pitch, yaw, roll});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKQuaternion::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LIV::SDK::Unity::SDKQuaternion::*)()>(&LIV::SDK::Unity::SDKQuaternion::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKQuaternion), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKQuaternion::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKQuaternion::operator*
// Il2CppName: op_Multiply
// Cannot perform method pointer template specialization from operators!
