// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Rendering.CameraEvent
#include "UnityEngine/Rendering/CameraEvent.hpp"
// Including type: LIV.SDK.Unity.SDKOutputFrame
#include "LIV/SDK/Unity/SDKOutputFrame.hpp"
// Including type: LIV.SDK.Unity.SDKInputFrame
#include "LIV/SDK/Unity/SDKInputFrame.hpp"
// Including type: LIV.SDK.Unity.SDKResolution
#include "LIV/SDK/Unity/SDKResolution.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Rendering
namespace UnityEngine::Rendering {
  // Forward declaring type: CommandBuffer
  class CommandBuffer;
  // Forward declaring type: ColorWriteMask
  struct ColorWriteMask;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Plane
  struct Plane;
}
// Forward declaring namespace: LIV::SDK::Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: LIV
  class LIV;
  // Forward declaring type: TEXTURE_ID
  struct TEXTURE_ID;
}
// Completed forward declares
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Forward declaring type: SDKRender
  class SDKRender;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LIV::SDK::Unity::SDKRender);
DEFINE_IL2CPP_ARG_TYPE(::LIV::SDK::Unity::SDKRender*, "LIV.SDK.Unity", "SDKRender");
// Type namespace: LIV.SDK.Unity
namespace LIV::SDK::Unity {
  // Size: 0x33C
  #pragma pack(push, 1)
  // Autogenerated type: LIV.SDK.Unity.SDKRender
  // [TokenAttribute] Offset: FFFFFFFF
  class SDKRender : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private UnityEngine.Rendering.CommandBuffer _clipPlaneCommandBuffer
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Rendering::CommandBuffer* clipPlaneCommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private UnityEngine.Rendering.CommandBuffer _combineAlphaCommandBuffer
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Rendering::CommandBuffer* combineAlphaCommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private UnityEngine.Rendering.CommandBuffer _captureTextureCommandBuffer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Rendering::CommandBuffer* captureTextureCommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private UnityEngine.Rendering.CommandBuffer _applyTextureCommandBuffer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rendering::CommandBuffer* applyTextureCommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private UnityEngine.Rendering.CommandBuffer _optimizedRenderingCommandBuffer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rendering::CommandBuffer* optimizedRenderingCommandBuffer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CommandBuffer*) == 0x8);
    // private UnityEngine.Rendering.CameraEvent _clipPlaneCameraEvent
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::Rendering::CameraEvent clipPlaneCameraEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CameraEvent) == 0x4);
    // private UnityEngine.Rendering.CameraEvent _optimizedRenderingCameraEvent
    // Size: 0x4
    // Offset: 0x3C
    ::UnityEngine::Rendering::CameraEvent optimizedRenderingCameraEvent;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rendering::CameraEvent) == 0x4);
    // private UnityEngine.Mesh _clipPlaneMesh
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Mesh* clipPlaneMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.Material _clipPlaneSimpleMaterial
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* clipPlaneSimpleMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _clipPlaneSimpleDebugMaterial
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* clipPlaneSimpleDebugMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _clipPlaneComplexMaterial
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Material* clipPlaneComplexMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _clipPlaneComplexDebugMaterial
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Material* clipPlaneComplexDebugMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _writeOpaqueToAlphaMaterial
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Material* writeOpaqueToAlphaMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _combineAlphaMaterial
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Material* combineAlphaMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _writeMaterial
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Material* writeMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _forceForwardRenderingMaterial
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Material* forceForwardRenderingMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.RenderTexture _backgroundRenderTexture
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::RenderTexture* backgroundRenderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture _foregroundRenderTexture
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::RenderTexture* foregroundRenderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture _optimizedRenderTexture
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::RenderTexture* optimizedRenderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.RenderTexture _complexClipPlaneRenderTexture
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::RenderTexture* complexClipPlaneRenderTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private LIV.SDK.Unity.LIV _liv
    // Size: 0x8
    // Offset: 0xA8
    ::LIV::SDK::Unity::LIV* liv;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::LIV*) == 0x8);
    // private LIV.SDK.Unity.SDKOutputFrame _outputFrame
    // Size: 0xAC
    // Offset: 0xB0
    ::LIV::SDK::Unity::SDKOutputFrame outputFrame;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKOutputFrame) == 0xAC);
    // Padding between fields: outputFrame and: inputFrame
    char __padding21[0x4] = {};
    // private LIV.SDK.Unity.SDKInputFrame _inputFrame
    // Size: 0x158
    // Offset: 0x160
    ::LIV::SDK::Unity::SDKInputFrame inputFrame;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKInputFrame) == 0x158);
    // private LIV.SDK.Unity.SDKResolution _resolution
    // Size: 0x8
    // Offset: 0x2B8
    ::LIV::SDK::Unity::SDKResolution resolution;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKResolution) == 0x8);
    // private UnityEngine.Camera _cameraInstance
    // Size: 0x8
    // Offset: 0x2C0
    ::UnityEngine::Camera* cameraInstance;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private LIV.SDK.Unity.SDKPose _requestedPose
    // Size: 0x70
    // Offset: 0x2C8
    ::LIV::SDK::Unity::SDKPose requestedPose;
    // Field size check
    static_assert(sizeof(::LIV::SDK::Unity::SDKPose) == 0x70);
    // private System.Int32 _requestedPoseFrameIndex
    // Size: 0x4
    // Offset: 0x338
    int requestedPoseFrameIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: private UnityEngine.Rendering.CommandBuffer _clipPlaneCommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn__clipPlaneCommandBuffer();
    // Get instance field reference: private UnityEngine.Rendering.CommandBuffer _combineAlphaCommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn__combineAlphaCommandBuffer();
    // Get instance field reference: private UnityEngine.Rendering.CommandBuffer _captureTextureCommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn__captureTextureCommandBuffer();
    // Get instance field reference: private UnityEngine.Rendering.CommandBuffer _applyTextureCommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn__applyTextureCommandBuffer();
    // Get instance field reference: private UnityEngine.Rendering.CommandBuffer _optimizedRenderingCommandBuffer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CommandBuffer*& dyn__optimizedRenderingCommandBuffer();
    // Get instance field reference: private UnityEngine.Rendering.CameraEvent _clipPlaneCameraEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CameraEvent& dyn__clipPlaneCameraEvent();
    // Get instance field reference: private UnityEngine.Rendering.CameraEvent _optimizedRenderingCameraEvent
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rendering::CameraEvent& dyn__optimizedRenderingCameraEvent();
    // Get instance field reference: private UnityEngine.Mesh _clipPlaneMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__clipPlaneMesh();
    // Get instance field reference: private UnityEngine.Material _clipPlaneSimpleMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__clipPlaneSimpleMaterial();
    // Get instance field reference: private UnityEngine.Material _clipPlaneSimpleDebugMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__clipPlaneSimpleDebugMaterial();
    // Get instance field reference: private UnityEngine.Material _clipPlaneComplexMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__clipPlaneComplexMaterial();
    // Get instance field reference: private UnityEngine.Material _clipPlaneComplexDebugMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__clipPlaneComplexDebugMaterial();
    // Get instance field reference: private UnityEngine.Material _writeOpaqueToAlphaMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__writeOpaqueToAlphaMaterial();
    // Get instance field reference: private UnityEngine.Material _combineAlphaMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__combineAlphaMaterial();
    // Get instance field reference: private UnityEngine.Material _writeMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__writeMaterial();
    // Get instance field reference: private UnityEngine.Material _forceForwardRenderingMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__forceForwardRenderingMaterial();
    // Get instance field reference: private UnityEngine.RenderTexture _backgroundRenderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__backgroundRenderTexture();
    // Get instance field reference: private UnityEngine.RenderTexture _foregroundRenderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__foregroundRenderTexture();
    // Get instance field reference: private UnityEngine.RenderTexture _optimizedRenderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__optimizedRenderTexture();
    // Get instance field reference: private UnityEngine.RenderTexture _complexClipPlaneRenderTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__complexClipPlaneRenderTexture();
    // Get instance field reference: private LIV.SDK.Unity.LIV _liv
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::LIV*& dyn__liv();
    // Get instance field reference: private LIV.SDK.Unity.SDKOutputFrame _outputFrame
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKOutputFrame& dyn__outputFrame();
    // Get instance field reference: private LIV.SDK.Unity.SDKInputFrame _inputFrame
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKInputFrame& dyn__inputFrame();
    // Get instance field reference: private LIV.SDK.Unity.SDKResolution _resolution
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKResolution& dyn__resolution();
    // Get instance field reference: private UnityEngine.Camera _cameraInstance
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__cameraInstance();
    // Get instance field reference: private LIV.SDK.Unity.SDKPose _requestedPose
    [[deprecated("Use field access instead!")]] ::LIV::SDK::Unity::SDKPose& dyn__requestedPose();
    // Get instance field reference: private System.Int32 _requestedPoseFrameIndex
    [[deprecated("Use field access instead!")]] int& dyn__requestedPoseFrameIndex();
    // private System.Boolean get_useDeferredRendering()
    // Offset: 0x2A645A8
    bool get_useDeferredRendering();
    // private System.Boolean get_interlacedRendering()
    // Offset: 0x2A64600
    bool get_interlacedRendering();
    // private System.Boolean get_canRenderBackground()
    // Offset: 0x2A64618
    bool get_canRenderBackground();
    // private System.Boolean get_canRenderForeground()
    // Offset: 0x2A646B4
    bool get_canRenderForeground();
    // private System.Boolean get_canRenderOptimized()
    // Offset: 0x2A64764
    bool get_canRenderOptimized();
    // public LIV.SDK.Unity.LIV get_liv()
    // Offset: 0x2A6788C
    ::LIV::SDK::Unity::LIV* get_liv();
    // public LIV.SDK.Unity.SDKOutputFrame get_outputFrame()
    // Offset: 0x2A67894
    ::LIV::SDK::Unity::SDKOutputFrame get_outputFrame();
    // public LIV.SDK.Unity.SDKInputFrame get_inputFrame()
    // Offset: 0x2A678A4
    ::LIV::SDK::Unity::SDKInputFrame get_inputFrame();
    // public LIV.SDK.Unity.SDKResolution get_resolution()
    // Offset: 0x2A678B4
    ::LIV::SDK::Unity::SDKResolution get_resolution();
    // public UnityEngine.Camera get_cameraInstance()
    // Offset: 0x2A678BC
    ::UnityEngine::Camera* get_cameraInstance();
    // public UnityEngine.Camera get_cameraReference()
    // Offset: 0x2A66CB4
    ::UnityEngine::Camera* get_cameraReference();
    // public UnityEngine.Camera get_hmdCamera()
    // Offset: 0x2A678C4
    ::UnityEngine::Camera* get_hmdCamera();
    // public UnityEngine.Transform get_stage()
    // Offset: 0x2A678E0
    ::UnityEngine::Transform* get_stage();
    // public UnityEngine.Transform get_stageTransform()
    // Offset: 0x2A678F8
    ::UnityEngine::Transform* get_stageTransform();
    // public UnityEngine.Matrix4x4 get_stageLocalToWorldMatrix()
    // Offset: 0x2A67914
    ::UnityEngine::Matrix4x4 get_stageLocalToWorldMatrix();
    // public UnityEngine.Matrix4x4 get_localToWorldMatrix()
    // Offset: 0x2A64FFC
    ::UnityEngine::Matrix4x4 get_localToWorldMatrix();
    // public System.Int32 get_spectatorLayerMask()
    // Offset: 0x2A650BC
    int get_spectatorLayerMask();
    // public System.Boolean get_disableStandardAssets()
    // Offset: 0x2A6691C
    bool get_disableStandardAssets();
    // public System.Boolean get_canSetPose()
    // Offset: 0x2A679FC
    bool get_canSetPose();
    // public System.Void .ctor(LIV.SDK.Unity.LIV liv)
    // Offset: 0x2A60C40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SDKRender* New_ctor(::LIV::SDK::Unity::LIV* liv) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LIV::SDK::Unity::SDKRender::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SDKRender*, creationType>(liv)));
    }
    // private UnityEngine.Material GetClipPlaneMaterial(System.Boolean debugClipPlane, System.Boolean complexClipPlane, UnityEngine.Rendering.ColorWriteMask colorWriteMask)
    // Offset: 0x2A643D0
    ::UnityEngine::Material* GetClipPlaneMaterial(bool debugClipPlane, bool complexClipPlane, ::UnityEngine::Rendering::ColorWriteMask colorWriteMask);
    // private UnityEngine.Material GetGroundClipPlaneMaterial(System.Boolean debugClipPlane, UnityEngine.Rendering.ColorWriteMask colorWriteMask)
    // Offset: 0x2A644FC
    ::UnityEngine::Material* GetGroundClipPlaneMaterial(bool debugClipPlane, ::UnityEngine::Rendering::ColorWriteMask colorWriteMask);
    // public System.Void UpdateCameraSettings()
    // Offset: 0x2A64DDC
    void UpdateCameraSettings();
    // public System.Void Render()
    // Offset: 0x2A61254
    void Render();
    // private System.Void RenderBackground()
    // Offset: 0x2A65818
    void RenderBackground();
    // private System.Void RenderForeground()
    // Offset: 0x2A65954
    void RenderForeground();
    // private System.Void RenderOptimized()
    // Offset: 0x2A65EE8
    void RenderOptimized();
    // private System.Void CreateAssets()
    // Offset: 0x2A647EC
    void CreateAssets();
    // private System.Void DestroyAssets()
    // Offset: 0x2A675F4
    void DestroyAssets();
    // public System.Void Dispose()
    // Offset: 0x2A60D8C
    void Dispose();
    // public System.Boolean SetPose(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Single verticalFieldOfView, System.Boolean useLocalSpace)
    // Offset: 0x2A67A1C
    bool SetPose(::UnityEngine::Vector3 position, ::UnityEngine::Quaternion rotation, float verticalFieldOfView, bool useLocalSpace);
    // public System.Void SetGroundPlane(System.Single distance, UnityEngine.Vector3 normal, System.Boolean useLocalSpace)
    // Offset: 0x2A67EAC
    void SetGroundPlane(float distance, ::UnityEngine::Vector3 normal, bool useLocalSpace);
    // public System.Void SetGroundPlane(UnityEngine.Plane plane, System.Boolean useLocalSpace)
    // Offset: 0x2A680A0
    void SetGroundPlane(::UnityEngine::Plane plane, bool useLocalSpace);
    // public System.Void SetGroundPlane(UnityEngine.Transform transform, System.Boolean useLocalSpace)
    // Offset: 0x2A6811C
    void SetGroundPlane(::UnityEngine::Transform* transform, bool useLocalSpace);
    // private System.Void ReleaseBridgePoseControl()
    // Offset: 0x2A67774
    void ReleaseBridgePoseControl();
    // private System.Void UpdateBridgeResolution()
    // Offset: 0x2A65338
    void UpdateBridgeResolution();
    // private System.Void UpdateBridgeInputFrame()
    // Offset: 0x2A64E74
    void UpdateBridgeInputFrame();
    // private System.Void InvokePreRender()
    // Offset: 0x2A657A8
    void InvokePreRender();
    // private System.Void IvokePostRender()
    // Offset: 0x2A663FC
    void IvokePostRender();
    // private System.Void InvokePreRenderBackground()
    // Offset: 0x2A666A0
    void InvokePreRenderBackground();
    // private System.Void InvokePostRenderBackground()
    // Offset: 0x2A66814
    void InvokePostRenderBackground();
    // private System.Void InvokePreRenderForeground()
    // Offset: 0x2A66AEC
    void InvokePreRenderForeground();
    // private System.Void InvokePostRenderForeground()
    // Offset: 0x2A66B5C
    void InvokePostRenderForeground();
    // private System.Void CreateBackgroundTexture()
    // Offset: 0x2A682F4
    void CreateBackgroundTexture();
    // private System.Void CreateForegroundTexture()
    // Offset: 0x2A684F8
    void CreateForegroundTexture();
    // private System.Void CreateOptimizedTexture()
    // Offset: 0x2A68590
    void CreateOptimizedTexture();
    // private System.Void CreateComplexClipPlaneTexture()
    // Offset: 0x2A68628
    void CreateComplexClipPlaneTexture();
    // private System.Void UpdateTextures()
    // Offset: 0x2A654E8
    void UpdateTextures();
    // private System.Void SendTextureToBridge(UnityEngine.RenderTexture texture, LIV.SDK.Unity.TEXTURE_ID id)
    // Offset: 0x2A66710
    void SendTextureToBridge(::UnityEngine::RenderTexture* texture, ::LIV::SDK::Unity::TEXTURE_ID id);
  }; // LIV.SDK.Unity.SDKRender
  #pragma pack(pop)
  static check_size<sizeof(SDKRender), 824 + sizeof(int)> __LIV_SDK_Unity_SDKRenderSizeCheck;
  static_assert(sizeof(SDKRender) == 0x33C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_useDeferredRendering
// Il2CppName: get_useDeferredRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_useDeferredRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_useDeferredRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_interlacedRendering
// Il2CppName: get_interlacedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_interlacedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_interlacedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_canRenderBackground
// Il2CppName: get_canRenderBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_canRenderBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_canRenderBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_canRenderForeground
// Il2CppName: get_canRenderForeground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_canRenderForeground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_canRenderForeground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_canRenderOptimized
// Il2CppName: get_canRenderOptimized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_canRenderOptimized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_canRenderOptimized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_liv
// Il2CppName: get_liv
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::LIV* (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_liv)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_liv", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_outputFrame
// Il2CppName: get_outputFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKOutputFrame (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_outputFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_outputFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_inputFrame
// Il2CppName: get_inputFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKInputFrame (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_inputFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_inputFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_resolution
// Il2CppName: get_resolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::LIV::SDK::Unity::SDKResolution (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_resolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_resolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_cameraInstance
// Il2CppName: get_cameraInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_cameraInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_cameraInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_cameraReference
// Il2CppName: get_cameraReference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_cameraReference)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_cameraReference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_hmdCamera
// Il2CppName: get_hmdCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Camera* (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_hmdCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_hmdCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_stage
// Il2CppName: get_stage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_stage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_stage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_stageTransform
// Il2CppName: get_stageTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_stageTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_stageTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_stageLocalToWorldMatrix
// Il2CppName: get_stageLocalToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_stageLocalToWorldMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_stageLocalToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_localToWorldMatrix
// Il2CppName: get_localToWorldMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_localToWorldMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_localToWorldMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_spectatorLayerMask
// Il2CppName: get_spectatorLayerMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_spectatorLayerMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_spectatorLayerMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_disableStandardAssets
// Il2CppName: get_disableStandardAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_disableStandardAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_disableStandardAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::get_canSetPose
// Il2CppName: get_canSetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::get_canSetPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "get_canSetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::GetClipPlaneMaterial
// Il2CppName: GetClipPlaneMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (LIV::SDK::Unity::SDKRender::*)(bool, bool, ::UnityEngine::Rendering::ColorWriteMask)>(&LIV::SDK::Unity::SDKRender::GetClipPlaneMaterial)> {
  static const MethodInfo* get() {
    static auto* debugClipPlane = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* complexClipPlane = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colorWriteMask = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ColorWriteMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "GetClipPlaneMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugClipPlane, complexClipPlane, colorWriteMask});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::GetGroundClipPlaneMaterial
// Il2CppName: GetGroundClipPlaneMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (LIV::SDK::Unity::SDKRender::*)(bool, ::UnityEngine::Rendering::ColorWriteMask)>(&LIV::SDK::Unity::SDKRender::GetGroundClipPlaneMaterial)> {
  static const MethodInfo* get() {
    static auto* debugClipPlane = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colorWriteMask = &::il2cpp_utils::GetClassFromName("UnityEngine.Rendering", "ColorWriteMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "GetGroundClipPlaneMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{debugClipPlane, colorWriteMask});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::UpdateCameraSettings
// Il2CppName: UpdateCameraSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::UpdateCameraSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "UpdateCameraSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::Render
// Il2CppName: Render
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::Render)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "Render", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::RenderBackground
// Il2CppName: RenderBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::RenderBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "RenderBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::RenderForeground
// Il2CppName: RenderForeground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::RenderForeground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "RenderForeground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::RenderOptimized
// Il2CppName: RenderOptimized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::RenderOptimized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "RenderOptimized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::CreateAssets
// Il2CppName: CreateAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::CreateAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "CreateAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::DestroyAssets
// Il2CppName: DestroyAssets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::DestroyAssets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "DestroyAssets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::SetPose
// Il2CppName: SetPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LIV::SDK::Unity::SDKRender::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion, float, bool)>(&LIV::SDK::Unity::SDKRender::SetPose)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* verticalFieldOfView = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* useLocalSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "SetPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position, rotation, verticalFieldOfView, useLocalSpace});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::SetGroundPlane
// Il2CppName: SetGroundPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)(float, ::UnityEngine::Vector3, bool)>(&LIV::SDK::Unity::SDKRender::SetGroundPlane)> {
  static const MethodInfo* get() {
    static auto* distance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* normal = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* useLocalSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "SetGroundPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distance, normal, useLocalSpace});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::SetGroundPlane
// Il2CppName: SetGroundPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)(::UnityEngine::Plane, bool)>(&LIV::SDK::Unity::SDKRender::SetGroundPlane)> {
  static const MethodInfo* get() {
    static auto* plane = &::il2cpp_utils::GetClassFromName("UnityEngine", "Plane")->byval_arg;
    static auto* useLocalSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "SetGroundPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{plane, useLocalSpace});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::SetGroundPlane
// Il2CppName: SetGroundPlane
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)(::UnityEngine::Transform*, bool)>(&LIV::SDK::Unity::SDKRender::SetGroundPlane)> {
  static const MethodInfo* get() {
    static auto* transform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* useLocalSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "SetGroundPlane", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transform, useLocalSpace});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::ReleaseBridgePoseControl
// Il2CppName: ReleaseBridgePoseControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::ReleaseBridgePoseControl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "ReleaseBridgePoseControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::UpdateBridgeResolution
// Il2CppName: UpdateBridgeResolution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::UpdateBridgeResolution)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "UpdateBridgeResolution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::UpdateBridgeInputFrame
// Il2CppName: UpdateBridgeInputFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::UpdateBridgeInputFrame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "UpdateBridgeInputFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::InvokePreRender
// Il2CppName: InvokePreRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::InvokePreRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "InvokePreRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::IvokePostRender
// Il2CppName: IvokePostRender
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::IvokePostRender)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "IvokePostRender", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::InvokePreRenderBackground
// Il2CppName: InvokePreRenderBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::InvokePreRenderBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "InvokePreRenderBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::InvokePostRenderBackground
// Il2CppName: InvokePostRenderBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::InvokePostRenderBackground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "InvokePostRenderBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::InvokePreRenderForeground
// Il2CppName: InvokePreRenderForeground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::InvokePreRenderForeground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "InvokePreRenderForeground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::InvokePostRenderForeground
// Il2CppName: InvokePostRenderForeground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::InvokePostRenderForeground)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "InvokePostRenderForeground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::CreateBackgroundTexture
// Il2CppName: CreateBackgroundTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::CreateBackgroundTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "CreateBackgroundTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::CreateForegroundTexture
// Il2CppName: CreateForegroundTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::CreateForegroundTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "CreateForegroundTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::CreateOptimizedTexture
// Il2CppName: CreateOptimizedTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::CreateOptimizedTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "CreateOptimizedTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::CreateComplexClipPlaneTexture
// Il2CppName: CreateComplexClipPlaneTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::CreateComplexClipPlaneTexture)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "CreateComplexClipPlaneTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::UpdateTextures
// Il2CppName: UpdateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)()>(&LIV::SDK::Unity::SDKRender::UpdateTextures)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "UpdateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LIV::SDK::Unity::SDKRender::SendTextureToBridge
// Il2CppName: SendTextureToBridge
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LIV::SDK::Unity::SDKRender::*)(::UnityEngine::RenderTexture*, ::LIV::SDK::Unity::TEXTURE_ID)>(&LIV::SDK::Unity::SDKRender::SendTextureToBridge)> {
  static const MethodInfo* get() {
    static auto* texture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* id = &::il2cpp_utils::GetClassFromName("LIV.SDK.Unity", "TEXTURE_ID")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LIV::SDK::Unity::SDKRender*), "SendTextureToBridge", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texture, id});
  }
};
