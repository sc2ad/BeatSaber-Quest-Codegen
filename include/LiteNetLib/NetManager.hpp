// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: NetSocket
  class NetSocket;
  // Skipping declaration: DeliveryMethod because it is already included!
  // Forward declaring type: INetEventListener
  class INetEventListener;
  // Forward declaring type: IDeliveryEventListener
  class IDeliveryEventListener;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: NetPacketPool
  class NetPacketPool;
  // Forward declaring type: NetStatistics
  class NetStatistics;
  // Forward declaring type: NatPunchModule
  class NatPunchModule;
  // Forward declaring type: NetPacket
  class NetPacket;
  // Skipping declaration: DisconnectReason because it is already included!
  // Forward declaring type: NetConnectRequestPacket
  class NetConnectRequestPacket;
  // Forward declaring type: ConnectionState
  struct ConnectionState;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: ReaderWriterLockSlim
  class ReaderWriterLockSlim;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: LiteNetLib::Layers
namespace LiteNetLib::Layers {
  // Forward declaring type: PacketLayerBase
  class PacketLayerBase;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Skipping declaration: SocketError because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.NetManager
  // [TokenAttribute] Offset: FFFFFFFF
  class NetManager : public ::Il2CppObject/*, public LiteNetLib::INetSocketListener, public System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>*/ {
    public:
    // Nested type: LiteNetLib::NetManager::IPEndPointComparer
    class IPEndPointComparer;
    // Nested type: LiteNetLib::NetManager::NetPeerEnumerator
    struct NetPeerEnumerator;
    // private readonly LiteNetLib.NetSocket _socket
    // Size: 0x8
    // Offset: 0x10
    LiteNetLib::NetSocket* socket;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetSocket*) == 0x8);
    // private System.Threading.Thread _logicThread
    // Size: 0x8
    // Offset: 0x18
    System::Threading::Thread* logicThread;
    // Field size check
    static_assert(sizeof(System::Threading::Thread*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetEvent> _netEventsQueue
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>* netEventsQueue;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>*) == 0x8);
    // private readonly System.Collections.Generic.Stack`1<LiteNetLib.NetEvent> _netEventsPool
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>* netEventsPool;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>*) == 0x8);
    // private readonly LiteNetLib.INetEventListener _netEventListener
    // Size: 0x8
    // Offset: 0x30
    LiteNetLib::INetEventListener* netEventListener;
    // Field size check
    static_assert(sizeof(LiteNetLib::INetEventListener*) == 0x8);
    // private readonly LiteNetLib.IDeliveryEventListener _deliveryEventListener
    // Size: 0x8
    // Offset: 0x38
    LiteNetLib::IDeliveryEventListener* deliveryEventListener;
    // Field size check
    static_assert(sizeof(LiteNetLib::IDeliveryEventListener*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.NetPeer> _peersDict
    // Size: 0x8
    // Offset: 0x40
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>* peersDict;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.ConnectionRequest> _requestsDict
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>* requestsDict;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>*) == 0x8);
    // private readonly System.Threading.ReaderWriterLockSlim _peersLock
    // Size: 0x8
    // Offset: 0x50
    System::Threading::ReaderWriterLockSlim* peersLock;
    // Field size check
    static_assert(sizeof(System::Threading::ReaderWriterLockSlim*) == 0x8);
    // private LiteNetLib.NetPeer _headPeer
    // Size: 0x8
    // Offset: 0x58
    LiteNetLib::NetPeer* headPeer;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPeer*) == 0x8);
    // private System.Int32 _connectedPeersCount
    // Size: 0x4
    // Offset: 0x60
    int connectedPeersCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: connectedPeersCount and: connectedPeerListCache
    char __padding10[0x4] = {};
    // private readonly System.Collections.Generic.List`1<LiteNetLib.NetPeer> _connectedPeerListCache
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* connectedPeerListCache;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*) == 0x8);
    // private LiteNetLib.NetPeer[] _peersArray
    // Size: 0x8
    // Offset: 0x70
    ::Array<LiteNetLib::NetPeer*>* peersArray;
    // Field size check
    static_assert(sizeof(::Array<LiteNetLib::NetPeer*>*) == 0x8);
    // readonly LiteNetLib.Layers.PacketLayerBase _extraPacketLayer
    // Size: 0x8
    // Offset: 0x78
    LiteNetLib::Layers::PacketLayerBase* extraPacketLayer;
    // Field size check
    static_assert(sizeof(LiteNetLib::Layers::PacketLayerBase*) == 0x8);
    // private System.Int32 _lastPeerId
    // Size: 0x4
    // Offset: 0x80
    int lastPeerId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastPeerId and: peerIds
    char __padding14[0x4] = {};
    // private readonly System.Collections.Generic.Queue`1<System.Int32> _peerIds
    // Size: 0x8
    // Offset: 0x88
    System::Collections::Generic::Queue_1<int>* peerIds;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Queue_1<int>*) == 0x8);
    // private System.Byte _channelsCount
    // Size: 0x1
    // Offset: 0x90
    uint8_t channelsCount;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: channelsCount and: NetPacketPool
    char __padding16[0x7] = {};
    // readonly LiteNetLib.NetPacketPool NetPacketPool
    // Size: 0x8
    // Offset: 0x98
    LiteNetLib::NetPacketPool* NetPacketPool;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPacketPool*) == 0x8);
    // public System.Boolean UnconnectedMessagesEnabled
    // Size: 0x1
    // Offset: 0xA0
    bool UnconnectedMessagesEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean NatPunchEnabled
    // Size: 0x1
    // Offset: 0xA1
    bool NatPunchEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: NatPunchEnabled and: UpdateTime
    char __padding19[0x2] = {};
    // public System.Int32 UpdateTime
    // Size: 0x4
    // Offset: 0xA4
    int UpdateTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 PingInterval
    // Size: 0x4
    // Offset: 0xA8
    int PingInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 DisconnectTimeout
    // Size: 0x4
    // Offset: 0xAC
    int DisconnectTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean SimulatePacketLoss
    // Size: 0x1
    // Offset: 0xB0
    bool SimulatePacketLoss;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean SimulateLatency
    // Size: 0x1
    // Offset: 0xB1
    bool SimulateLatency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: SimulateLatency and: SimulationPacketLossChance
    char __padding24[0x2] = {};
    // public System.Int32 SimulationPacketLossChance
    // Size: 0x4
    // Offset: 0xB4
    int SimulationPacketLossChance;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SimulationMinLatency
    // Size: 0x4
    // Offset: 0xB8
    int SimulationMinLatency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 SimulationMaxLatency
    // Size: 0x4
    // Offset: 0xBC
    int SimulationMaxLatency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean UnsyncedEvents
    // Size: 0x1
    // Offset: 0xC0
    bool UnsyncedEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean UnsyncedDeliveryEvent
    // Size: 0x1
    // Offset: 0xC1
    bool UnsyncedDeliveryEvent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean BroadcastReceiveEnabled
    // Size: 0x1
    // Offset: 0xC2
    bool BroadcastReceiveEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: BroadcastReceiveEnabled and: ReconnectDelay
    char __padding30[0x1] = {};
    // public System.Int32 ReconnectDelay
    // Size: 0x4
    // Offset: 0xC4
    int ReconnectDelay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 MaxConnectAttempts
    // Size: 0x4
    // Offset: 0xC8
    int MaxConnectAttempts;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean ReuseAddress
    // Size: 0x1
    // Offset: 0xCC
    bool ReuseAddress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ReuseAddress and: Statistics
    char __padding33[0x3] = {};
    // public readonly LiteNetLib.NetStatistics Statistics
    // Size: 0x8
    // Offset: 0xD0
    LiteNetLib::NetStatistics* Statistics;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetStatistics*) == 0x8);
    // public System.Boolean EnableStatistics
    // Size: 0x1
    // Offset: 0xD8
    bool EnableStatistics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: EnableStatistics and: NatPunchModule
    char __padding35[0x7] = {};
    // public readonly LiteNetLib.NatPunchModule NatPunchModule
    // Size: 0x8
    // Offset: 0xE0
    LiteNetLib::NatPunchModule* NatPunchModule;
    // Field size check
    static_assert(sizeof(LiteNetLib::NatPunchModule*) == 0x8);
    // public System.Boolean AutoRecycle
    // Size: 0x1
    // Offset: 0xE8
    bool AutoRecycle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IPv6Enabled
    // Size: 0x1
    // Offset: 0xE9
    bool IPv6Enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IPv6Enabled and: ThreadPriority
    char __padding38[0x2] = {};
    // public System.Threading.ThreadPriority ThreadPriority
    // Size: 0x4
    // Offset: 0xEC
    System::Threading::ThreadPriority ThreadPriority;
    // Field size check
    static_assert(sizeof(System::Threading::ThreadPriority) == 0x4);
    // Creating value type constructor for type: NetManager
    NetManager(LiteNetLib::NetSocket* socket_ = {}, System::Threading::Thread* logicThread_ = {}, System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>* netEventsQueue_ = {}, System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>* netEventsPool_ = {}, LiteNetLib::INetEventListener* netEventListener_ = {}, LiteNetLib::IDeliveryEventListener* deliveryEventListener_ = {}, System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>* peersDict_ = {}, System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>* requestsDict_ = {}, System::Threading::ReaderWriterLockSlim* peersLock_ = {}, LiteNetLib::NetPeer* headPeer_ = {}, int connectedPeersCount_ = {}, System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* connectedPeerListCache_ = {}, ::Array<LiteNetLib::NetPeer*>* peersArray_ = {}, LiteNetLib::Layers::PacketLayerBase* extraPacketLayer_ = {}, int lastPeerId_ = {}, System::Collections::Generic::Queue_1<int>* peerIds_ = {}, uint8_t channelsCount_ = {}, LiteNetLib::NetPacketPool* NetPacketPool_ = {}, bool UnconnectedMessagesEnabled_ = {}, bool NatPunchEnabled_ = {}, int UpdateTime_ = {}, int PingInterval_ = {}, int DisconnectTimeout_ = {}, bool SimulatePacketLoss_ = {}, bool SimulateLatency_ = {}, int SimulationPacketLossChance_ = {}, int SimulationMinLatency_ = {}, int SimulationMaxLatency_ = {}, bool UnsyncedEvents_ = {}, bool UnsyncedDeliveryEvent_ = {}, bool BroadcastReceiveEnabled_ = {}, int ReconnectDelay_ = {}, int MaxConnectAttempts_ = {}, bool ReuseAddress_ = {}, LiteNetLib::NetStatistics* Statistics_ = {}, bool EnableStatistics_ = {}, LiteNetLib::NatPunchModule* NatPunchModule_ = {}, bool AutoRecycle_ = {}, bool IPv6Enabled_ = {}, System::Threading::ThreadPriority ThreadPriority_ = {}) noexcept : socket{socket_}, logicThread{logicThread_}, netEventsQueue{netEventsQueue_}, netEventsPool{netEventsPool_}, netEventListener{netEventListener_}, deliveryEventListener{deliveryEventListener_}, peersDict{peersDict_}, requestsDict{requestsDict_}, peersLock{peersLock_}, headPeer{headPeer_}, connectedPeersCount{connectedPeersCount_}, connectedPeerListCache{connectedPeerListCache_}, peersArray{peersArray_}, extraPacketLayer{extraPacketLayer_}, lastPeerId{lastPeerId_}, peerIds{peerIds_}, channelsCount{channelsCount_}, NetPacketPool{NetPacketPool_}, UnconnectedMessagesEnabled{UnconnectedMessagesEnabled_}, NatPunchEnabled{NatPunchEnabled_}, UpdateTime{UpdateTime_}, PingInterval{PingInterval_}, DisconnectTimeout{DisconnectTimeout_}, SimulatePacketLoss{SimulatePacketLoss_}, SimulateLatency{SimulateLatency_}, SimulationPacketLossChance{SimulationPacketLossChance_}, SimulationMinLatency{SimulationMinLatency_}, SimulationMaxLatency{SimulationMaxLatency_}, UnsyncedEvents{UnsyncedEvents_}, UnsyncedDeliveryEvent{UnsyncedDeliveryEvent_}, BroadcastReceiveEnabled{BroadcastReceiveEnabled_}, ReconnectDelay{ReconnectDelay_}, MaxConnectAttempts{MaxConnectAttempts_}, ReuseAddress{ReuseAddress_}, Statistics{Statistics_}, EnableStatistics{EnableStatistics_}, NatPunchModule{NatPunchModule_}, AutoRecycle{AutoRecycle_}, IPv6Enabled{IPv6Enabled_}, ThreadPriority{ThreadPriority_} {}
    // Creating interface conversion operator: operator LiteNetLib::INetSocketListener
    operator LiteNetLib::INetSocketListener() noexcept {
      return *reinterpret_cast<LiteNetLib::INetSocketListener*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>
    operator System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>*>(this);
    }
    // Get instance field reference: private readonly LiteNetLib.NetSocket _socket
    LiteNetLib::NetSocket*& dyn__socket();
    // Get instance field reference: private System.Threading.Thread _logicThread
    System::Threading::Thread*& dyn__logicThread();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetEvent> _netEventsQueue
    System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>*& dyn__netEventsQueue();
    // Get instance field reference: private readonly System.Collections.Generic.Stack`1<LiteNetLib.NetEvent> _netEventsPool
    System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>*& dyn__netEventsPool();
    // Get instance field reference: private readonly LiteNetLib.INetEventListener _netEventListener
    LiteNetLib::INetEventListener*& dyn__netEventListener();
    // Get instance field reference: private readonly LiteNetLib.IDeliveryEventListener _deliveryEventListener
    LiteNetLib::IDeliveryEventListener*& dyn__deliveryEventListener();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.NetPeer> _peersDict
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>*& dyn__peersDict();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.ConnectionRequest> _requestsDict
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>*& dyn__requestsDict();
    // Get instance field reference: private readonly System.Threading.ReaderWriterLockSlim _peersLock
    System::Threading::ReaderWriterLockSlim*& dyn__peersLock();
    // Get instance field reference: private LiteNetLib.NetPeer _headPeer
    LiteNetLib::NetPeer*& dyn__headPeer();
    // Get instance field reference: private System.Int32 _connectedPeersCount
    int& dyn__connectedPeersCount();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<LiteNetLib.NetPeer> _connectedPeerListCache
    System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*& dyn__connectedPeerListCache();
    // Get instance field reference: private LiteNetLib.NetPeer[] _peersArray
    ::Array<LiteNetLib::NetPeer*>*& dyn__peersArray();
    // Get instance field reference: readonly LiteNetLib.Layers.PacketLayerBase _extraPacketLayer
    LiteNetLib::Layers::PacketLayerBase*& dyn__extraPacketLayer();
    // Get instance field reference: private System.Int32 _lastPeerId
    int& dyn__lastPeerId();
    // Get instance field reference: private readonly System.Collections.Generic.Queue`1<System.Int32> _peerIds
    System::Collections::Generic::Queue_1<int>*& dyn__peerIds();
    // Get instance field reference: private System.Byte _channelsCount
    uint8_t& dyn__channelsCount();
    // Get instance field reference: readonly LiteNetLib.NetPacketPool NetPacketPool
    LiteNetLib::NetPacketPool*& dyn_NetPacketPool();
    // Get instance field reference: public System.Boolean UnconnectedMessagesEnabled
    bool& dyn_UnconnectedMessagesEnabled();
    // Get instance field reference: public System.Boolean NatPunchEnabled
    bool& dyn_NatPunchEnabled();
    // Get instance field reference: public System.Int32 UpdateTime
    int& dyn_UpdateTime();
    // Get instance field reference: public System.Int32 PingInterval
    int& dyn_PingInterval();
    // Get instance field reference: public System.Int32 DisconnectTimeout
    int& dyn_DisconnectTimeout();
    // Get instance field reference: public System.Boolean SimulatePacketLoss
    bool& dyn_SimulatePacketLoss();
    // Get instance field reference: public System.Boolean SimulateLatency
    bool& dyn_SimulateLatency();
    // Get instance field reference: public System.Int32 SimulationPacketLossChance
    int& dyn_SimulationPacketLossChance();
    // Get instance field reference: public System.Int32 SimulationMinLatency
    int& dyn_SimulationMinLatency();
    // Get instance field reference: public System.Int32 SimulationMaxLatency
    int& dyn_SimulationMaxLatency();
    // Get instance field reference: public System.Boolean UnsyncedEvents
    bool& dyn_UnsyncedEvents();
    // Get instance field reference: public System.Boolean UnsyncedDeliveryEvent
    bool& dyn_UnsyncedDeliveryEvent();
    // Get instance field reference: public System.Boolean BroadcastReceiveEnabled
    bool& dyn_BroadcastReceiveEnabled();
    // Get instance field reference: public System.Int32 ReconnectDelay
    int& dyn_ReconnectDelay();
    // Get instance field reference: public System.Int32 MaxConnectAttempts
    int& dyn_MaxConnectAttempts();
    // Get instance field reference: public System.Boolean ReuseAddress
    bool& dyn_ReuseAddress();
    // Get instance field reference: public readonly LiteNetLib.NetStatistics Statistics
    LiteNetLib::NetStatistics*& dyn_Statistics();
    // Get instance field reference: public System.Boolean EnableStatistics
    bool& dyn_EnableStatistics();
    // Get instance field reference: public readonly LiteNetLib.NatPunchModule NatPunchModule
    LiteNetLib::NatPunchModule*& dyn_NatPunchModule();
    // Get instance field reference: public System.Boolean AutoRecycle
    bool& dyn_AutoRecycle();
    // Get instance field reference: public System.Boolean IPv6Enabled
    bool& dyn_IPv6Enabled();
    // Get instance field reference: public System.Threading.ThreadPriority ThreadPriority
    System::Threading::ThreadPriority& dyn_ThreadPriority();
    // public System.Boolean get_IsRunning()
    // Offset: 0x1DD65F8
    bool get_IsRunning();
    // public System.Int32 get_LocalPort()
    // Offset: 0x1DD6628
    int get_LocalPort();
    // public LiteNetLib.NetPeer get_FirstPeer()
    // Offset: 0x1DD6644
    LiteNetLib::NetPeer* get_FirstPeer();
    // public System.Byte get_ChannelsCount()
    // Offset: 0x1DD6668
    uint8_t get_ChannelsCount();
    // public System.Void set_ChannelsCount(System.Byte value)
    // Offset: 0x1DD6670
    void set_ChannelsCount(uint8_t value);
    // public System.Collections.Generic.List`1<LiteNetLib.NetPeer> get_ConnectedPeerList()
    // Offset: 0x1DD670C
    System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* get_ConnectedPeerList();
    // public LiteNetLib.NetPeer GetPeerById(System.Int32 id)
    // Offset: 0x1DD6804
    LiteNetLib::NetPeer* GetPeerById(int id);
    // public System.Int32 get_ConnectedPeersCount()
    // Offset: 0x1DD6840
    int get_ConnectedPeersCount();
    // private System.Boolean TryGetPeer(System.Net.IPEndPoint endPoint, out LiteNetLib.NetPeer peer)
    // Offset: 0x1DD6864
    bool TryGetPeer(System::Net::IPEndPoint* endPoint, ByRef<LiteNetLib::NetPeer*> peer);
    // private System.Void AddPeer(LiteNetLib.NetPeer peer)
    // Offset: 0x1DD6904
    void AddPeer(LiteNetLib::NetPeer* peer);
    // private System.Void RemovePeer(LiteNetLib.NetPeer peer)
    // Offset: 0x1DD6A5C
    void RemovePeer(LiteNetLib::NetPeer* peer);
    // private System.Void RemovePeerInternal(LiteNetLib.NetPeer peer)
    // Offset: 0x1DD6AA8
    void RemovePeerInternal(LiteNetLib::NetPeer* peer);
    // public System.Void .ctor(LiteNetLib.INetEventListener listener, LiteNetLib.Layers.PacketLayerBase extraPacketLayer)
    // Offset: 0x1DD6C30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetManager* New_ctor(LiteNetLib::INetEventListener* listener, LiteNetLib::Layers::PacketLayerBase* extraPacketLayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetManager*, creationType>(listener, extraPacketLayer)));
    }
    // System.Void ConnectionLatencyUpdated(LiteNetLib.NetPeer fromPeer, System.Int32 latency)
    // Offset: 0x1DD6FA0
    void ConnectionLatencyUpdated(LiteNetLib::NetPeer* fromPeer, int latency);
    // System.Void MessageDelivered(LiteNetLib.NetPeer fromPeer, System.Object userData)
    // Offset: 0x1DD72C8
    void MessageDelivered(LiteNetLib::NetPeer* fromPeer, ::Il2CppObject* userData);
    // System.Int32 SendRawAndRecycle(LiteNetLib.NetPacket packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DD7318
    int SendRawAndRecycle(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint);
    // System.Int32 SendRaw(LiteNetLib.NetPacket packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DD773C
    int SendRaw(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint);
    // System.Int32 SendRaw(System.Byte[] message, System.Int32 start, System.Int32 length, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DD7370
    int SendRaw(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint);
    // System.Void DisconnectPeerForce(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectReason reason, System.Net.Sockets.SocketError socketErrorCode, LiteNetLib.NetPacket eventData)
    // Offset: 0x1DD78D8
    void DisconnectPeerForce(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, LiteNetLib::NetPacket* eventData);
    // private System.Void DisconnectPeer(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectReason reason, System.Net.Sockets.SocketError socketErrorCode, System.Boolean force, System.Byte[] data, System.Int32 start, System.Int32 count, LiteNetLib.NetPacket eventData)
    // Offset: 0x1DD7924
    void DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, bool force, ::Array<uint8_t>* data, int start, int count, LiteNetLib::NetPacket* eventData);
    // private System.Void CreateEvent(LiteNetLib.NetEvent/EType type, LiteNetLib.NetPeer peer, System.Net.IPEndPoint remoteEndPoint, System.Net.Sockets.SocketError errorCode, System.Int32 latency, LiteNetLib.DisconnectReason disconnectReason, LiteNetLib.ConnectionRequest connectionRequest, LiteNetLib.DeliveryMethod deliveryMethod, LiteNetLib.NetPacket readerSource, System.Object userData)
    // Offset: 0x1DD6FE4
    void CreateEvent(LiteNetLib::NetEvent::EType type, LiteNetLib::NetPeer* peer, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError errorCode, int latency, LiteNetLib::DisconnectReason disconnectReason, LiteNetLib::ConnectionRequest* connectionRequest, LiteNetLib::DeliveryMethod deliveryMethod, LiteNetLib::NetPacket* readerSource, ::Il2CppObject* userData);
    // private System.Void ProcessEvent(LiteNetLib.NetEvent evt)
    // Offset: 0x1DD7CD4
    void ProcessEvent(LiteNetLib::NetEvent* evt);
    // System.Void RecycleEvent(LiteNetLib.NetEvent evt)
    // Offset: 0x1DD8240
    void RecycleEvent(LiteNetLib::NetEvent* evt);
    // private System.Void UpdateLogic()
    // Offset: 0x1DD8374
    void UpdateLogic();
    // private System.Void LiteNetLib.INetSocketListener.OnMessageReceived(System.Byte[] data, System.Int32 length, System.Net.Sockets.SocketError errorCode, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DD8810
    void LiteNetLib_INetSocketListener_OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint);
    // LiteNetLib.NetPeer OnConnectionSolved(LiteNetLib.ConnectionRequest request, System.Byte[] rejectData, System.Int32 start, System.Int32 length)
    // Offset: 0x1DCFB50
    LiteNetLib::NetPeer* OnConnectionSolved(LiteNetLib::ConnectionRequest* request, ::Array<uint8_t>* rejectData, int start, int length);
    // private System.Int32 GetNextPeerId()
    // Offset: 0x1DD9184
    int GetNextPeerId();
    // private System.Void ProcessConnectRequest(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPeer netPeer, LiteNetLib.NetConnectRequestPacket connRequest)
    // Offset: 0x1DD9590
    void ProcessConnectRequest(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPeer* netPeer, LiteNetLib::NetConnectRequestPacket* connRequest);
    // private System.Void DataReceived(System.Byte[] reusableBuffer, System.Int32 count, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DD8AC4
    void DataReceived(::Array<uint8_t>* reusableBuffer, int count, System::Net::IPEndPoint* remoteEndPoint);
    // System.Void CreateReceiveEvent(LiteNetLib.NetPacket packet, LiteNetLib.DeliveryMethod method, LiteNetLib.NetPeer fromPeer)
    // Offset: 0x1DDA2D8
    void CreateReceiveEvent(LiteNetLib::NetPacket* packet, LiteNetLib::DeliveryMethod method, LiteNetLib::NetPeer* fromPeer);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DDA51C
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DDA554
    void SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DDA548
    void SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, System.Byte channelNumber, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DDA65C
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, System.Byte channelNumber, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DDA688
    void SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DDA578
    void SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DDA6B4
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DDA7D4
    void SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DDA7FC
    void SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, System.Byte channelNumber, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DDA80C
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, System.Byte channelNumber, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DDA83C
    void SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DDA6E4
    void SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Boolean Start()
    // Offset: 0x1DDA864
    bool Start();
    // public System.Boolean Start(System.Net.IPAddress addressIPv4, System.Net.IPAddress addressIPv6, System.Int32 port)
    // Offset: 0x1DDA8F0
    bool Start(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port);
    // public System.Boolean Start(System.String addressIPv4, System.String addressIPv6, System.Int32 port)
    // Offset: 0x1DDADBC
    bool Start(::Il2CppString* addressIPv4, ::Il2CppString* addressIPv6, int port);
    // public System.Boolean Start(System.Int32 port)
    // Offset: 0x1DDA86C
    bool Start(int port);
    // public System.Boolean SendUnconnectedMessage(System.Byte[] message, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DDB024
    bool SendUnconnectedMessage(::Array<uint8_t>* message, System::Net::IPEndPoint* remoteEndPoint);
    // public System.Boolean SendUnconnectedMessage(LiteNetLib.Utils.NetDataWriter writer, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DDB09C
    bool SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* remoteEndPoint);
    // public System.Boolean SendUnconnectedMessage(System.Byte[] message, System.Int32 start, System.Int32 length, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DDB044
    bool SendUnconnectedMessage(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint);
    // public System.Boolean SendBroadcast(LiteNetLib.Utils.NetDataWriter writer, System.Int32 port)
    // Offset: 0x1DDB1AC
    bool SendBroadcast(LiteNetLib::Utils::NetDataWriter* writer, int port);
    // public System.Boolean SendBroadcast(System.Byte[] data, System.Int32 port)
    // Offset: 0x1DDB34C
    bool SendBroadcast(::Array<uint8_t>* data, int port);
    // public System.Boolean SendBroadcast(System.Byte[] data, System.Int32 start, System.Int32 length, System.Int32 port)
    // Offset: 0x1DDB1D4
    bool SendBroadcast(::Array<uint8_t>* data, int start, int length, int port);
    // public System.Void Flush()
    // Offset: 0x1DDB6DC
    void Flush();
    // public System.Void PollEvents()
    // Offset: 0x1DDB920
    void PollEvents();
    // public LiteNetLib.NetPeer Connect(System.String address, System.Int32 port, System.String key)
    // Offset: 0x1DDBA98
    LiteNetLib::NetPeer* Connect(::Il2CppString* address, int port, ::Il2CppString* key);
    // public LiteNetLib.NetPeer Connect(System.String address, System.Int32 port, LiteNetLib.Utils.NetDataWriter connectionData)
    // Offset: 0x1DDBB54
    LiteNetLib::NetPeer* Connect(::Il2CppString* address, int port, LiteNetLib::Utils::NetDataWriter* connectionData);
    // public LiteNetLib.NetPeer Connect(System.Net.IPEndPoint target, System.String key)
    // Offset: 0x1DDBE58
    LiteNetLib::NetPeer* Connect(System::Net::IPEndPoint* target, ::Il2CppString* key);
    // public LiteNetLib.NetPeer Connect(System.Net.IPEndPoint target, LiteNetLib.Utils.NetDataWriter connectionData)
    // Offset: 0x1DDBCAC
    LiteNetLib::NetPeer* Connect(System::Net::IPEndPoint* target, LiteNetLib::Utils::NetDataWriter* connectionData);
    // public System.Void Stop()
    // Offset: 0x1DDBFAC
    void Stop();
    // public System.Void Stop(System.Boolean sendDisconnectMessages)
    // Offset: 0x1DDBFB4
    void Stop(bool sendDisconnectMessages);
    // public System.Int32 GetPeersCount(LiteNetLib.ConnectionState peerState)
    // Offset: 0x1DDC2CC
    int GetPeersCount(LiteNetLib::ConnectionState peerState);
    // public System.Void GetPeersNonAlloc(System.Collections.Generic.List`1<LiteNetLib.NetPeer> peers, LiteNetLib.ConnectionState peerState)
    // Offset: 0x1DD6738
    void GetPeersNonAlloc(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* peers, LiteNetLib::ConnectionState peerState);
    // public System.Void DisconnectAll()
    // Offset: 0x1DDC344
    void DisconnectAll();
    // public System.Void DisconnectAll(System.Byte[] data, System.Int32 start, System.Int32 count)
    // Offset: 0x1DDC354
    void DisconnectAll(::Array<uint8_t>* data, int start, int count);
    // public System.Void DisconnectPeerForce(LiteNetLib.NetPeer peer)
    // Offset: 0x1DDC3F0
    void DisconnectPeerForce(LiteNetLib::NetPeer* peer);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer)
    // Offset: 0x1DDC428
    void DisconnectPeer(LiteNetLib::NetPeer* peer);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer, System.Byte[] data)
    // Offset: 0x1DDC498
    void DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer, LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x1DDC4D8
    void DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer, System.Byte[] data, System.Int32 start, System.Int32 count)
    // Offset: 0x1DDC460
    void DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data, int start, int count);
    // public LiteNetLib.NetManager/NetPeerEnumerator GetEnumerator()
    // Offset: 0x1DDC518
    LiteNetLib::NetManager::NetPeerEnumerator GetEnumerator();
    // private System.Collections.Generic.IEnumerator`1<LiteNetLib.NetPeer> System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator()
    // Offset: 0x1DDC548
    System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>* System_Collections_Generic_IEnumerable$LiteNetLib_NetPeer$_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1DDC5B0
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // LiteNetLib.NetManager
  #pragma pack(pop)
  static check_size<sizeof(NetManager), 236 + sizeof(System::Threading::ThreadPriority)> __LiteNetLib_NetManagerSizeCheck;
  static_assert(sizeof(NetManager) == 0xF0);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetManager*, "LiteNetLib", "NetManager");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LiteNetLib::NetManager::get_IsRunning
// Il2CppName: get_IsRunning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::get_IsRunning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "get_IsRunning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::get_LocalPort
// Il2CppName: get_LocalPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::get_LocalPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "get_LocalPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::get_FirstPeer
// Il2CppName: get_FirstPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::get_FirstPeer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "get_FirstPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::get_ChannelsCount
// Il2CppName: get_ChannelsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::get_ChannelsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "get_ChannelsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::set_ChannelsCount
// Il2CppName: set_ChannelsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(uint8_t)>(&LiteNetLib::NetManager::set_ChannelsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "set_ChannelsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::get_ConnectedPeerList
// Il2CppName: get_ConnectedPeerList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::get_ConnectedPeerList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "get_ConnectedPeerList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::GetPeerById
// Il2CppName: GetPeerById
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)(int)>(&LiteNetLib::NetManager::GetPeerById)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "GetPeerById", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::get_ConnectedPeersCount
// Il2CppName: get_ConnectedPeersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::get_ConnectedPeersCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "get_ConnectedPeersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::TryGetPeer
// Il2CppName: TryGetPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(System::Net::IPEndPoint*, ByRef<LiteNetLib::NetPeer*>)>(&LiteNetLib::NetManager::TryGetPeer)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "TryGetPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::AddPeer
// Il2CppName: AddPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::AddPeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "AddPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::RemovePeer
// Il2CppName: RemovePeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::RemovePeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "RemovePeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::RemovePeerInternal
// Il2CppName: RemovePeerInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::RemovePeerInternal)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "RemovePeerInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::NetManager::ConnectionLatencyUpdated
// Il2CppName: ConnectionLatencyUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, int)>(&LiteNetLib::NetManager::ConnectionLatencyUpdated)> {
  static const MethodInfo* get() {
    static auto* fromPeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "ConnectionLatencyUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPeer, latency});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::MessageDelivered
// Il2CppName: MessageDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, ::Il2CppObject*)>(&LiteNetLib::NetManager::MessageDelivered)> {
  static const MethodInfo* get() {
    static auto* fromPeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "MessageDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fromPeer, userData});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendRawAndRecycle
// Il2CppName: SendRawAndRecycle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)(LiteNetLib::NetPacket*, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::SendRawAndRecycle)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacket")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendRawAndRecycle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendRaw
// Il2CppName: SendRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)(LiteNetLib::NetPacket*, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::SendRaw)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacket")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendRaw
// Il2CppName: SendRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::SendRaw)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, start, length, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeerForce
// Il2CppName: DisconnectPeerForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, LiteNetLib::DisconnectReason, System::Net::Sockets::SocketError, LiteNetLib::NetPacket*)>(&LiteNetLib::NetManager::DisconnectPeerForce)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    static auto* socketErrorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    static auto* eventData = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeerForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, reason, socketErrorCode, eventData});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeer
// Il2CppName: DisconnectPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, LiteNetLib::DisconnectReason, System::Net::Sockets::SocketError, bool, ::Array<uint8_t>*, int, int, LiteNetLib::NetPacket*)>(&LiteNetLib::NetManager::DisconnectPeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    static auto* socketErrorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    static auto* force = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eventData = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, reason, socketErrorCode, force, data, start, count, eventData});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::CreateEvent
// Il2CppName: CreateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetEvent::EType, LiteNetLib::NetPeer*, System::Net::IPEndPoint*, System::Net::Sockets::SocketError, int, LiteNetLib::DisconnectReason, LiteNetLib::ConnectionRequest*, LiteNetLib::DeliveryMethod, LiteNetLib::NetPacket*, ::Il2CppObject*)>(&LiteNetLib::NetManager::CreateEvent)> {
  static const MethodInfo* get() {
    static auto* type = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetEvent/EType")->byval_arg;
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* disconnectReason = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectReason")->byval_arg;
    static auto* connectionRequest = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionRequest")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* readerSource = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacket")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "CreateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{type, peer, remoteEndPoint, errorCode, latency, disconnectReason, connectionRequest, deliveryMethod, readerSource, userData});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::ProcessEvent
// Il2CppName: ProcessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetEvent*)>(&LiteNetLib::NetManager::ProcessEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "ProcessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::RecycleEvent
// Il2CppName: RecycleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetEvent*)>(&LiteNetLib::NetManager::RecycleEvent)> {
  static const MethodInfo* get() {
    static auto* evt = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "RecycleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{evt});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::UpdateLogic
// Il2CppName: UpdateLogic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::UpdateLogic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "UpdateLogic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::LiteNetLib_INetSocketListener_OnMessageReceived
// Il2CppName: LiteNetLib.INetSocketListener.OnMessageReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, System::Net::Sockets::SocketError, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::LiteNetLib_INetSocketListener_OnMessageReceived)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* errorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "LiteNetLib.INetSocketListener.OnMessageReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, length, errorCode, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::OnConnectionSolved
// Il2CppName: OnConnectionSolved
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)(LiteNetLib::ConnectionRequest*, ::Array<uint8_t>*, int, int)>(&LiteNetLib::NetManager::OnConnectionSolved)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionRequest")->byval_arg;
    static auto* rejectData = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "OnConnectionSolved", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request, rejectData, start, length});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::GetNextPeerId
// Il2CppName: GetNextPeerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::GetNextPeerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "GetNextPeerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::ProcessConnectRequest
// Il2CppName: ProcessConnectRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(System::Net::IPEndPoint*, LiteNetLib::NetPeer*, LiteNetLib::NetConnectRequestPacket*)>(&LiteNetLib::NetManager::ProcessConnectRequest)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* netPeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* connRequest = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetConnectRequestPacket")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "ProcessConnectRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, netPeer, connRequest});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DataReceived
// Il2CppName: DataReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::DataReceived)> {
  static const MethodInfo* get() {
    static auto* reusableBuffer = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DataReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reusableBuffer, count, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::CreateReceiveEvent
// Il2CppName: CreateReceiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPacket*, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::CreateReceiveEvent)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacket")->byval_arg;
    static auto* method = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* fromPeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "CreateReceiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, method, fromPeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, options});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, LiteNetLib::DeliveryMethod)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, options});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, LiteNetLib::DeliveryMethod)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, start, length, options});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::Utils::NetDataWriter*, uint8_t, LiteNetLib::DeliveryMethod)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, channelNumber, options});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, uint8_t, LiteNetLib::DeliveryMethod)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channelNumber, options});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, uint8_t, LiteNetLib::DeliveryMethod)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, start, length, channelNumber, options});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludePeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, options, excludePeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludePeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, options, excludePeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludePeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, start, length, options, excludePeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::Utils::NetDataWriter*, uint8_t, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludePeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, channelNumber, options, excludePeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, uint8_t, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludePeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, channelNumber, options, excludePeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, uint8_t, LiteNetLib::DeliveryMethod, LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* channelNumber = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* options = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludePeer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, start, length, channelNumber, options, excludePeer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(System::Net::IPAddress*, System::Net::IPAddress*, int)>(&LiteNetLib::NetManager::Start)> {
  static const MethodInfo* get() {
    static auto* addressIPv4 = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* addressIPv6 = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{addressIPv4, addressIPv6, port});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(::Il2CppString*, ::Il2CppString*, int)>(&LiteNetLib::NetManager::Start)> {
  static const MethodInfo* get() {
    static auto* addressIPv4 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* addressIPv6 = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{addressIPv4, addressIPv6, port});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(int)>(&LiteNetLib::NetManager::Start)> {
  static const MethodInfo* get() {
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{port});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendUnconnectedMessage
// Il2CppName: SendUnconnectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(::Array<uint8_t>*, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::SendUnconnectedMessage)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendUnconnectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendUnconnectedMessage
// Il2CppName: SendUnconnectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(LiteNetLib::Utils::NetDataWriter*, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::SendUnconnectedMessage)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendUnconnectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendUnconnectedMessage
// Il2CppName: SendUnconnectedMessage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::SendUnconnectedMessage)> {
  static const MethodInfo* get() {
    static auto* message = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendUnconnectedMessage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, start, length, remoteEndPoint});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendBroadcast
// Il2CppName: SendBroadcast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(LiteNetLib::Utils::NetDataWriter*, int)>(&LiteNetLib::NetManager::SendBroadcast)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendBroadcast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, port});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendBroadcast
// Il2CppName: SendBroadcast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int)>(&LiteNetLib::NetManager::SendBroadcast)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendBroadcast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, port});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::SendBroadcast
// Il2CppName: SendBroadcast
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int, int)>(&LiteNetLib::NetManager::SendBroadcast)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "SendBroadcast", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, start, length, port});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Flush
// Il2CppName: Flush
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::Flush)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Flush", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::PollEvents
// Il2CppName: PollEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::PollEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "PollEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)(::Il2CppString*, int, ::Il2CppString*)>(&LiteNetLib::NetManager::Connect)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, port, key});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)(::Il2CppString*, int, LiteNetLib::Utils::NetDataWriter*)>(&LiteNetLib::NetManager::Connect)> {
  static const MethodInfo* get() {
    static auto* address = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connectionData = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{address, port, connectionData});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)(System::Net::IPEndPoint*, ::Il2CppString*)>(&LiteNetLib::NetManager::Connect)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* key = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, key});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::*)(System::Net::IPEndPoint*, LiteNetLib::Utils::NetDataWriter*)>(&LiteNetLib::NetManager::Connect)> {
  static const MethodInfo* get() {
    static auto* target = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* connectionData = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{target, connectionData});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::Stop)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::Stop
// Il2CppName: Stop
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(bool)>(&LiteNetLib::NetManager::Stop)> {
  static const MethodInfo* get() {
    static auto* sendDisconnectMessages = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "Stop", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sendDisconnectMessages});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::GetPeersCount
// Il2CppName: GetPeersCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::*)(LiteNetLib::ConnectionState)>(&LiteNetLib::NetManager::GetPeersCount)> {
  static const MethodInfo* get() {
    static auto* peerState = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "GetPeersCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peerState});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::GetPeersNonAlloc
// Il2CppName: GetPeersNonAlloc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>*, LiteNetLib::ConnectionState)>(&LiteNetLib::NetManager::GetPeersNonAlloc)> {
  static const MethodInfo* get() {
    static auto* peers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")})->byval_arg;
    static auto* peerState = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "GetPeersNonAlloc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peers, peerState});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectAll
// Il2CppName: DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::DisconnectAll)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectAll
// Il2CppName: DisconnectAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(::Array<uint8_t>*, int, int)>(&LiteNetLib::NetManager::DisconnectAll)> {
  static const MethodInfo* get() {
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{data, start, count});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeerForce
// Il2CppName: DisconnectPeerForce
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::DisconnectPeerForce)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeerForce", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeer
// Il2CppName: DisconnectPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*)>(&LiteNetLib::NetManager::DisconnectPeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeer
// Il2CppName: DisconnectPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, ::Array<uint8_t>*)>(&LiteNetLib::NetManager::DisconnectPeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, data});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeer
// Il2CppName: DisconnectPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, LiteNetLib::Utils::NetDataWriter*)>(&LiteNetLib::NetManager::DisconnectPeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, writer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::DisconnectPeer
// Il2CppName: DisconnectPeer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::*)(LiteNetLib::NetPeer*, ::Array<uint8_t>*, int, int)>(&LiteNetLib::NetManager::DisconnectPeer)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* data = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "DisconnectPeer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, data, start, count});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetManager::NetPeerEnumerator (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::System_Collections_Generic_IEnumerable$LiteNetLib_NetPeer$_GetEnumerator
// Il2CppName: System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>* (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::System_Collections_Generic_IEnumerable$LiteNetLib_NetPeer$_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (LiteNetLib::NetManager::*)()>(&LiteNetLib::NetManager::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
