// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: LiteNetLib.IDeliveryEventListener
#include "LiteNetLib/IDeliveryEventListener.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: DisconnectInfo
  struct DisconnectInfo;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
  // Forward declaring type: UnconnectedMessageType
  struct UnconnectedMessageType;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketError
  struct SocketError;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: EventBasedNetListener
  class EventBasedNetListener;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LiteNetLib::EventBasedNetListener);
DEFINE_IL2CPP_ARG_TYPE(::LiteNetLib::EventBasedNetListener*, "LiteNetLib", "EventBasedNetListener");
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.EventBasedNetListener
  // [TokenAttribute] Offset: FFFFFFFF
  class EventBasedNetListener : public ::Il2CppObject/*, public ::LiteNetLib::INetEventListener, public ::LiteNetLib::IDeliveryEventListener*/ {
    public:
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnPeerConnected
    class OnPeerConnected;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnPeerDisconnected
    class OnPeerDisconnected;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnNetworkError
    class OnNetworkError;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnNetworkReceive
    class OnNetworkReceive;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected
    class OnNetworkReceiveUnconnected;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate
    class OnNetworkLatencyUpdate;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnConnectionRequest
    class OnConnectionRequest;
    // Nested type: ::LiteNetLib::EventBasedNetListener::OnDeliveryEvent
    class OnDeliveryEvent;
    public:
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected PeerConnectedEvent
    // Size: 0x8
    // Offset: 0x10
    ::LiteNetLib::EventBasedNetListener::OnPeerConnected* PeerConnectedEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnPeerConnected*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected PeerDisconnectedEvent
    // Size: 0x8
    // Offset: 0x18
    ::LiteNetLib::EventBasedNetListener::OnPeerDisconnected* PeerDisconnectedEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnPeerDisconnected*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError NetworkErrorEvent
    // Size: 0x8
    // Offset: 0x20
    ::LiteNetLib::EventBasedNetListener::OnNetworkError* NetworkErrorEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnNetworkError*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive NetworkReceiveEvent
    // Size: 0x8
    // Offset: 0x28
    ::LiteNetLib::EventBasedNetListener::OnNetworkReceive* NetworkReceiveEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnNetworkReceive*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected NetworkReceiveUnconnectedEvent
    // Size: 0x8
    // Offset: 0x30
    ::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* NetworkReceiveUnconnectedEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate NetworkLatencyUpdateEvent
    // Size: 0x8
    // Offset: 0x38
    ::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* NetworkLatencyUpdateEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest ConnectionRequestEvent
    // Size: 0x8
    // Offset: 0x40
    ::LiteNetLib::EventBasedNetListener::OnConnectionRequest* ConnectionRequestEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnConnectionRequest*) == 0x8);
    // private LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent DeliveryEvent
    // Size: 0x8
    // Offset: 0x48
    ::LiteNetLib::EventBasedNetListener::OnDeliveryEvent* DeliveryEvent;
    // Field size check
    static_assert(sizeof(::LiteNetLib::EventBasedNetListener::OnDeliveryEvent*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::LiteNetLib::INetEventListener
    operator ::LiteNetLib::INetEventListener() noexcept {
      return *reinterpret_cast<::LiteNetLib::INetEventListener*>(this);
    }
    // Creating interface conversion operator: i_INetEventListener
    inline ::LiteNetLib::INetEventListener* i_INetEventListener() noexcept {
      return reinterpret_cast<::LiteNetLib::INetEventListener*>(this);
    }
    // Creating interface conversion operator: operator ::LiteNetLib::IDeliveryEventListener
    operator ::LiteNetLib::IDeliveryEventListener() noexcept {
      return *reinterpret_cast<::LiteNetLib::IDeliveryEventListener*>(this);
    }
    // Creating interface conversion operator: i_IDeliveryEventListener
    inline ::LiteNetLib::IDeliveryEventListener* i_IDeliveryEventListener() noexcept {
      return reinterpret_cast<::LiteNetLib::IDeliveryEventListener*>(this);
    }
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected PeerConnectedEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnPeerConnected*& dyn_PeerConnectedEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected PeerDisconnectedEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnPeerDisconnected*& dyn_PeerDisconnectedEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError NetworkErrorEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnNetworkError*& dyn_NetworkErrorEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive NetworkReceiveEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnNetworkReceive*& dyn_NetworkReceiveEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected NetworkReceiveUnconnectedEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected*& dyn_NetworkReceiveUnconnectedEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate NetworkLatencyUpdateEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate*& dyn_NetworkLatencyUpdateEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest ConnectionRequestEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnConnectionRequest*& dyn_ConnectionRequestEvent();
    // Get instance field reference: private LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent DeliveryEvent
    [[deprecated("Use field access instead!")]] ::LiteNetLib::EventBasedNetListener::OnDeliveryEvent*& dyn_DeliveryEvent();
    // public System.Void add_PeerConnectedEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected value)
    // Offset: 0x21B0280
    void add_PeerConnectedEvent(::LiteNetLib::EventBasedNetListener::OnPeerConnected* value);
    // public System.Void remove_PeerConnectedEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerConnected value)
    // Offset: 0x21B0324
    void remove_PeerConnectedEvent(::LiteNetLib::EventBasedNetListener::OnPeerConnected* value);
    // public System.Void add_PeerDisconnectedEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected value)
    // Offset: 0x21B03C8
    void add_PeerDisconnectedEvent(::LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value);
    // public System.Void remove_PeerDisconnectedEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnPeerDisconnected value)
    // Offset: 0x21B046C
    void remove_PeerDisconnectedEvent(::LiteNetLib::EventBasedNetListener::OnPeerDisconnected* value);
    // public System.Void add_NetworkErrorEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError value)
    // Offset: 0x21B0510
    void add_NetworkErrorEvent(::LiteNetLib::EventBasedNetListener::OnNetworkError* value);
    // public System.Void remove_NetworkErrorEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkError value)
    // Offset: 0x21B05B4
    void remove_NetworkErrorEvent(::LiteNetLib::EventBasedNetListener::OnNetworkError* value);
    // public System.Void add_NetworkReceiveEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive value)
    // Offset: 0x21B0658
    void add_NetworkReceiveEvent(::LiteNetLib::EventBasedNetListener::OnNetworkReceive* value);
    // public System.Void remove_NetworkReceiveEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceive value)
    // Offset: 0x21B06FC
    void remove_NetworkReceiveEvent(::LiteNetLib::EventBasedNetListener::OnNetworkReceive* value);
    // public System.Void add_NetworkReceiveUnconnectedEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected value)
    // Offset: 0x21B07A0
    void add_NetworkReceiveUnconnectedEvent(::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value);
    // public System.Void remove_NetworkReceiveUnconnectedEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkReceiveUnconnected value)
    // Offset: 0x21B0844
    void remove_NetworkReceiveUnconnectedEvent(::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected* value);
    // public System.Void add_NetworkLatencyUpdateEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate value)
    // Offset: 0x21B08E8
    void add_NetworkLatencyUpdateEvent(::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value);
    // public System.Void remove_NetworkLatencyUpdateEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnNetworkLatencyUpdate value)
    // Offset: 0x21B098C
    void remove_NetworkLatencyUpdateEvent(::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate* value);
    // public System.Void add_ConnectionRequestEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest value)
    // Offset: 0x21B0A30
    void add_ConnectionRequestEvent(::LiteNetLib::EventBasedNetListener::OnConnectionRequest* value);
    // public System.Void remove_ConnectionRequestEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnConnectionRequest value)
    // Offset: 0x21B0AD4
    void remove_ConnectionRequestEvent(::LiteNetLib::EventBasedNetListener::OnConnectionRequest* value);
    // public System.Void add_DeliveryEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent value)
    // Offset: 0x21B0B78
    void add_DeliveryEvent(::LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value);
    // public System.Void remove_DeliveryEvent(LiteNetLib.EventBasedNetListener/LiteNetLib.OnDeliveryEvent value)
    // Offset: 0x21B0C1C
    void remove_DeliveryEvent(::LiteNetLib::EventBasedNetListener::OnDeliveryEvent* value);
    // public System.Void .ctor()
    // Offset: 0x21B2CE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventBasedNetListener* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::EventBasedNetListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventBasedNetListener*, creationType>()));
    }
    // public System.Void ClearPeerConnectedEvent()
    // Offset: 0x21B0CC0
    void ClearPeerConnectedEvent();
    // public System.Void ClearPeerDisconnectedEvent()
    // Offset: 0x21B0CC8
    void ClearPeerDisconnectedEvent();
    // public System.Void ClearNetworkErrorEvent()
    // Offset: 0x21B0CD0
    void ClearNetworkErrorEvent();
    // public System.Void ClearNetworkReceiveEvent()
    // Offset: 0x21B0CD8
    void ClearNetworkReceiveEvent();
    // public System.Void ClearNetworkReceiveUnconnectedEvent()
    // Offset: 0x21B0CE0
    void ClearNetworkReceiveUnconnectedEvent();
    // public System.Void ClearNetworkLatencyUpdateEvent()
    // Offset: 0x21B0CE8
    void ClearNetworkLatencyUpdateEvent();
    // public System.Void ClearConnectionRequestEvent()
    // Offset: 0x21B0CF0
    void ClearConnectionRequestEvent();
    // public System.Void ClearDeliveryEvent()
    // Offset: 0x21B0CF8
    void ClearDeliveryEvent();
    // private System.Void LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer peer)
    // Offset: 0x21B0D00
    void LiteNetLib_INetEventListener_OnPeerConnected(::LiteNetLib::NetPeer* peer);
    // private System.Void LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    // Offset: 0x21B10A4
    void LiteNetLib_INetEventListener_OnPeerDisconnected(::LiteNetLib::NetPeer* peer, ::LiteNetLib::DisconnectInfo disconnectInfo);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketErrorCode)
    // Offset: 0x21B14D4
    void LiteNetLib_INetEventListener_OnNetworkError(::System::Net::IPEndPoint* endPoint, ::System::Net::Sockets::SocketError socketErrorCode);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x21B18F0
    void LiteNetLib_INetEventListener_OnNetworkReceive(::LiteNetLib::NetPeer* peer, ::LiteNetLib::NetPacketReader* reader, ::LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    // Offset: 0x21B1D10
    void LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(::System::Net::IPEndPoint* remoteEndPoint, ::LiteNetLib::NetPacketReader* reader, ::LiteNetLib::UnconnectedMessageType messageType);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latency)
    // Offset: 0x21B2130
    void LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(::LiteNetLib::NetPeer* peer, int latency);
    // private System.Void LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    // Offset: 0x21B254C
    void LiteNetLib_INetEventListener_OnConnectionRequest(::LiteNetLib::ConnectionRequest* request);
    // private System.Void LiteNetLib.IDeliveryEventListener.OnMessageDelivered(LiteNetLib.NetPeer peer, System.Object userData)
    // Offset: 0x21B28F0
    void LiteNetLib_IDeliveryEventListener_OnMessageDelivered(::LiteNetLib::NetPeer* peer, ::Il2CppObject* userData);
  }; // LiteNetLib.EventBasedNetListener
  #pragma pack(pop)
  static check_size<sizeof(EventBasedNetListener), 72 + sizeof(::LiteNetLib::EventBasedNetListener::OnDeliveryEvent*)> __LiteNetLib_EventBasedNetListenerSizeCheck;
  static_assert(sizeof(EventBasedNetListener) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_PeerConnectedEvent
// Il2CppName: add_PeerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnPeerConnected*)>(&LiteNetLib::EventBasedNetListener::add_PeerConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnPeerConnected")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_PeerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_PeerConnectedEvent
// Il2CppName: remove_PeerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnPeerConnected*)>(&LiteNetLib::EventBasedNetListener::remove_PeerConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnPeerConnected")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_PeerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_PeerDisconnectedEvent
// Il2CppName: add_PeerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnPeerDisconnected*)>(&LiteNetLib::EventBasedNetListener::add_PeerDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnPeerDisconnected")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_PeerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_PeerDisconnectedEvent
// Il2CppName: remove_PeerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnPeerDisconnected*)>(&LiteNetLib::EventBasedNetListener::remove_PeerDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnPeerDisconnected")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_PeerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_NetworkErrorEvent
// Il2CppName: add_NetworkErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkError*)>(&LiteNetLib::EventBasedNetListener::add_NetworkErrorEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_NetworkErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_NetworkErrorEvent
// Il2CppName: remove_NetworkErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkError*)>(&LiteNetLib::EventBasedNetListener::remove_NetworkErrorEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_NetworkErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_NetworkReceiveEvent
// Il2CppName: add_NetworkReceiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkReceive*)>(&LiteNetLib::EventBasedNetListener::add_NetworkReceiveEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkReceive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_NetworkReceiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_NetworkReceiveEvent
// Il2CppName: remove_NetworkReceiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkReceive*)>(&LiteNetLib::EventBasedNetListener::remove_NetworkReceiveEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkReceive")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_NetworkReceiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_NetworkReceiveUnconnectedEvent
// Il2CppName: add_NetworkReceiveUnconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected*)>(&LiteNetLib::EventBasedNetListener::add_NetworkReceiveUnconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkReceiveUnconnected")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_NetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_NetworkReceiveUnconnectedEvent
// Il2CppName: remove_NetworkReceiveUnconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkReceiveUnconnected*)>(&LiteNetLib::EventBasedNetListener::remove_NetworkReceiveUnconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkReceiveUnconnected")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_NetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_NetworkLatencyUpdateEvent
// Il2CppName: add_NetworkLatencyUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate*)>(&LiteNetLib::EventBasedNetListener::add_NetworkLatencyUpdateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkLatencyUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_NetworkLatencyUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_NetworkLatencyUpdateEvent
// Il2CppName: remove_NetworkLatencyUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnNetworkLatencyUpdate*)>(&LiteNetLib::EventBasedNetListener::remove_NetworkLatencyUpdateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnNetworkLatencyUpdate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_NetworkLatencyUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_ConnectionRequestEvent
// Il2CppName: add_ConnectionRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnConnectionRequest*)>(&LiteNetLib::EventBasedNetListener::add_ConnectionRequestEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnConnectionRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_ConnectionRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_ConnectionRequestEvent
// Il2CppName: remove_ConnectionRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnConnectionRequest*)>(&LiteNetLib::EventBasedNetListener::remove_ConnectionRequestEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnConnectionRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_ConnectionRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::add_DeliveryEvent
// Il2CppName: add_DeliveryEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnDeliveryEvent*)>(&LiteNetLib::EventBasedNetListener::add_DeliveryEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnDeliveryEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "add_DeliveryEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::remove_DeliveryEvent
// Il2CppName: remove_DeliveryEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::EventBasedNetListener::OnDeliveryEvent*)>(&LiteNetLib::EventBasedNetListener::remove_DeliveryEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("LiteNetLib", "EventBasedNetListener/OnDeliveryEvent")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "remove_DeliveryEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearPeerConnectedEvent
// Il2CppName: ClearPeerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearPeerConnectedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearPeerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearPeerDisconnectedEvent
// Il2CppName: ClearPeerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearPeerDisconnectedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearPeerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearNetworkErrorEvent
// Il2CppName: ClearNetworkErrorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearNetworkErrorEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearNetworkErrorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearNetworkReceiveEvent
// Il2CppName: ClearNetworkReceiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearNetworkReceiveEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearNetworkReceiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearNetworkReceiveUnconnectedEvent
// Il2CppName: ClearNetworkReceiveUnconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearNetworkReceiveUnconnectedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearNetworkReceiveUnconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearNetworkLatencyUpdateEvent
// Il2CppName: ClearNetworkLatencyUpdateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearNetworkLatencyUpdateEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearNetworkLatencyUpdateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearConnectionRequestEvent
// Il2CppName: ClearConnectionRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearConnectionRequestEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearConnectionRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::ClearDeliveryEvent
// Il2CppName: ClearDeliveryEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)()>(&LiteNetLib::EventBasedNetListener::ClearDeliveryEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "ClearDeliveryEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerConnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::NetPeer*)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerConnected)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerDisconnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::NetPeer*, ::LiteNetLib::DisconnectInfo)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnPeerDisconnected)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* disconnectInfo = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, disconnectInfo});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkError
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::System::Net::IPEndPoint*, ::System::Net::Sockets::SocketError)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkError)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* socketErrorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, socketErrorCode});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceive
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::NetPeer*, ::LiteNetLib::NetPacketReader*, ::LiteNetLib::DeliveryMethod)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceive)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacketReader")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, reader, deliveryMethod});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::System::Net::IPEndPoint*, ::LiteNetLib::NetPacketReader*, ::LiteNetLib::UnconnectedMessageType)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacketReader")->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("LiteNetLib", "UnconnectedMessageType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, reader, messageType});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::NetPeer*, int)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, latency});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnConnectionRequest
// Il2CppName: LiteNetLib.INetEventListener.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::ConnectionRequest*)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_INetEventListener_OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: LiteNetLib::EventBasedNetListener::LiteNetLib_IDeliveryEventListener_OnMessageDelivered
// Il2CppName: LiteNetLib.IDeliveryEventListener.OnMessageDelivered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::EventBasedNetListener::*)(::LiteNetLib::NetPeer*, ::Il2CppObject*)>(&LiteNetLib::EventBasedNetListener::LiteNetLib_IDeliveryEventListener_OnMessageDelivered)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* userData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::EventBasedNetListener*), "LiteNetLib.IDeliveryEventListener.OnMessageDelivered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, userData});
  }
};
