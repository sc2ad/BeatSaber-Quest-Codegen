// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ArraySegment`1<T>
  template<typename T>
  struct ArraySegment_1;
}
// Completed forward declares
// Type namespace: LiteNetLib.Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LiteNetLib::Utils::NetDataReader);
DEFINE_IL2CPP_ARG_TYPE(::LiteNetLib::Utils::NetDataReader*, "LiteNetLib.Utils", "NetDataReader");
// Type namespace: LiteNetLib.Utils
namespace LiteNetLib::Utils {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.Utils.NetDataReader
  // [TokenAttribute] Offset: FFFFFFFF
  class NetDataReader : public ::Il2CppObject {
    public:
    public:
    // protected System.Byte[] _data
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<uint8_t> data;
    // Field size check
    static_assert(sizeof(::ArrayW<uint8_t>) == 0x8);
    // protected System.Int32 _position
    // Size: 0x4
    // Offset: 0x18
    int position;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 _dataSize
    // Size: 0x4
    // Offset: 0x1C
    int dataSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _offset
    // Size: 0x4
    // Offset: 0x20
    int offset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: protected System.Byte[] _data
    [[deprecated("Use field access instead!")]] ::ArrayW<uint8_t>& dyn__data();
    // Get instance field reference: protected System.Int32 _position
    [[deprecated("Use field access instead!")]] int& dyn__position();
    // Get instance field reference: protected System.Int32 _dataSize
    [[deprecated("Use field access instead!")]] int& dyn__dataSize();
    // Get instance field reference: private System.Int32 _offset
    [[deprecated("Use field access instead!")]] int& dyn__offset();
    // public System.Byte[] get_RawData()
    // Offset: 0x21F41AC
    ::ArrayW<uint8_t> get_RawData();
    // public System.Int32 get_RawDataSize()
    // Offset: 0x21F41B4
    int get_RawDataSize();
    // public System.Int32 get_UserDataOffset()
    // Offset: 0x21F41BC
    int get_UserDataOffset();
    // public System.Int32 get_UserDataSize()
    // Offset: 0x21F41C4
    int get_UserDataSize();
    // public System.Boolean get_IsNull()
    // Offset: 0x21EA528
    bool get_IsNull();
    // public System.Int32 get_Position()
    // Offset: 0x21F41D0
    int get_Position();
    // public System.Boolean get_EndOfData()
    // Offset: 0x21F41D8
    bool get_EndOfData();
    // public System.Int32 get_AvailableBytes()
    // Offset: 0x21F41E8
    int get_AvailableBytes();
    // public System.Void .ctor()
    // Offset: 0x21E6B0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetDataReader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetDataReader*, creationType>()));
    }
    // public System.Void .ctor(System.Byte[] source)
    // Offset: 0x21F4280
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetDataReader* New_ctor(::ArrayW<uint8_t> source) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetDataReader*, creationType>(source)));
    }
    // public System.Void .ctor(System.Byte[] source, System.Int32 offset)
    // Offset: 0x21F42C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetDataReader* New_ctor(::ArrayW<uint8_t> source, int offset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetDataReader*, creationType>(source, offset)));
    }
    // public System.Void .ctor(System.Byte[] source, System.Int32 offset, System.Int32 maxSize)
    // Offset: 0x21E8180
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetDataReader* New_ctor(::ArrayW<uint8_t> source, int offset, int maxSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetDataReader*, creationType>(source, offset, maxSize)));
    }
    // public System.Void SkipBytes(System.Int32 count)
    // Offset: 0x21F41F4
    void SkipBytes(int count);
    // public System.Void SetSource(LiteNetLib.Utils.NetDataWriter dataWriter)
    // Offset: 0x21F4204
    void SetSource(::LiteNetLib::Utils::NetDataWriter* dataWriter);
    // public System.Void SetSource(System.Byte[] source)
    // Offset: 0x21F4230
    void SetSource(::ArrayW<uint8_t> source);
    // public System.Void SetSource(System.Byte[] source, System.Int32 offset)
    // Offset: 0x21F4258
    void SetSource(::ArrayW<uint8_t> source, int offset);
    // public System.Void SetSource(System.Byte[] source, System.Int32 offset, System.Int32 maxSize)
    // Offset: 0x21E6C04
    void SetSource(::ArrayW<uint8_t> source, int offset, int maxSize);
    // public System.Net.IPEndPoint GetNetEndPoint()
    // Offset: 0x21F4314
    ::System::Net::IPEndPoint* GetNetEndPoint();
    // public System.Byte GetByte()
    // Offset: 0x21F4514
    uint8_t GetByte();
    // public System.SByte GetSByte()
    // Offset: 0x21F4560
    int8_t GetSByte();
    // public System.Boolean[] GetBoolArray()
    // Offset: 0x21F45AC
    ::ArrayW<bool> GetBoolArray();
    // public System.UInt16[] GetUShortArray()
    // Offset: 0x21F468C
    ::ArrayW<uint16_t> GetUShortArray();
    // public System.Int16[] GetShortArray()
    // Offset: 0x21F4768
    ::ArrayW<int16_t> GetShortArray();
    // public System.Int64[] GetLongArray()
    // Offset: 0x21F4844
    ::ArrayW<int64_t> GetLongArray();
    // public System.UInt64[] GetULongArray()
    // Offset: 0x21F4920
    ::ArrayW<uint64_t> GetULongArray();
    // public System.Int32[] GetIntArray()
    // Offset: 0x21F49FC
    ::ArrayW<int> GetIntArray();
    // public System.UInt32[] GetUIntArray()
    // Offset: 0x21F4AD8
    ::ArrayW<uint> GetUIntArray();
    // public System.Single[] GetFloatArray()
    // Offset: 0x21F4BB4
    ::ArrayW<float> GetFloatArray();
    // public System.Double[] GetDoubleArray()
    // Offset: 0x21F4C90
    ::ArrayW<double> GetDoubleArray();
    // public System.String[] GetStringArray()
    // Offset: 0x21F4D6C
    ::ArrayW<::StringW> GetStringArray();
    // public System.String[] GetStringArray(System.Int32 maxStringLength)
    // Offset: 0x21F4E98
    ::ArrayW<::StringW> GetStringArray(int maxStringLength);
    // public System.Boolean GetBool()
    // Offset: 0x21F4FD4
    bool GetBool();
    // public System.Char GetChar()
    // Offset: 0x21F5028
    ::Il2CppChar GetChar();
    // public System.UInt16 GetUShort()
    // Offset: 0x21F50B4
    uint16_t GetUShort();
    // public System.Int16 GetShort()
    // Offset: 0x21F5140
    int16_t GetShort();
    // public System.Int64 GetLong()
    // Offset: 0x21F51CC
    int64_t GetLong();
    // public System.UInt64 GetULong()
    // Offset: 0x21F5258
    uint64_t GetULong();
    // public System.Int32 GetInt()
    // Offset: 0x21F4488
    int GetInt();
    // public System.UInt32 GetUInt()
    // Offset: 0x21F52E4
    uint GetUInt();
    // public System.Single GetFloat()
    // Offset: 0x21F5370
    float GetFloat();
    // public System.Double GetDouble()
    // Offset: 0x21F53FC
    double GetDouble();
    // public System.String GetString(System.Int32 maxLength)
    // Offset: 0x21F439C
    ::StringW GetString(int maxLength);
    // public System.String GetString()
    // Offset: 0x21E1D2C
    ::StringW GetString();
    // public System.ArraySegment`1<System.Byte> GetRemainingBytesSegment()
    // Offset: 0x21F5488
    ::System::ArraySegment_1<uint8_t> GetRemainingBytesSegment();
    // public T Get()
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    T Get() {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::LiteNetLib::Utils::INetSerializable>);
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::Utils::NetDataReader::Get");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Get", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<T, false>(this, ___generic__method);
    }
    // public System.Byte[] GetRemainingBytes()
    // Offset: 0x21F550C
    ::ArrayW<uint8_t> GetRemainingBytes();
    // public System.Void GetBytes(System.Byte[] destination, System.Int32 start, System.Int32 count)
    // Offset: 0x21F559C
    void GetBytes(::ArrayW<uint8_t> destination, int start, int count);
    // public System.Void GetBytes(System.Byte[] destination, System.Int32 count)
    // Offset: 0x21F55E8
    void GetBytes(::ArrayW<uint8_t> destination, int count);
    // public System.SByte[] GetSBytesWithLength()
    // Offset: 0x21F5634
    ::ArrayW<int8_t> GetSBytesWithLength();
    // public System.Byte[] GetBytesWithLength()
    // Offset: 0x21F56D4
    ::ArrayW<uint8_t> GetBytesWithLength();
    // public System.Byte PeekByte()
    // Offset: 0x21F5774
    uint8_t PeekByte();
    // public System.SByte PeekSByte()
    // Offset: 0x21F57B4
    int8_t PeekSByte();
    // public System.Boolean PeekBool()
    // Offset: 0x21F57F4
    bool PeekBool();
    // public System.Char PeekChar()
    // Offset: 0x21F583C
    ::Il2CppChar PeekChar();
    // public System.UInt16 PeekUShort()
    // Offset: 0x21F58B0
    uint16_t PeekUShort();
    // public System.Int16 PeekShort()
    // Offset: 0x21F5924
    int16_t PeekShort();
    // public System.Int64 PeekLong()
    // Offset: 0x21F5998
    int64_t PeekLong();
    // public System.UInt64 PeekULong()
    // Offset: 0x21F5A0C
    uint64_t PeekULong();
    // public System.Int32 PeekInt()
    // Offset: 0x21F5A80
    int PeekInt();
    // public System.UInt32 PeekUInt()
    // Offset: 0x21F5AF4
    uint PeekUInt();
    // public System.Single PeekFloat()
    // Offset: 0x21F5B68
    float PeekFloat();
    // public System.Double PeekDouble()
    // Offset: 0x21F5BDC
    double PeekDouble();
    // public System.String PeekString(System.Int32 maxLength)
    // Offset: 0x21F5C50
    ::StringW PeekString(int maxLength);
    // public System.String PeekString()
    // Offset: 0x21F5D70
    ::StringW PeekString();
    // public System.Boolean TryGetByte(out System.Byte result)
    // Offset: 0x21F5E4C
    bool TryGetByte(ByRef<uint8_t> result);
    // public System.Boolean TryGetSByte(out System.SByte result)
    // Offset: 0x21F5E94
    bool TryGetSByte(ByRef<int8_t> result);
    // public System.Boolean TryGetBool(out System.Boolean result)
    // Offset: 0x21F5EDC
    bool TryGetBool(ByRef<bool> result);
    // public System.Boolean TryGetChar(out System.Char result)
    // Offset: 0x21F5F24
    bool TryGetChar(ByRef<::Il2CppChar> result);
    // public System.Boolean TryGetShort(out System.Int16 result)
    // Offset: 0x21F5F6C
    bool TryGetShort(ByRef<int16_t> result);
    // public System.Boolean TryGetUShort(out System.UInt16 result)
    // Offset: 0x21F5FB4
    bool TryGetUShort(ByRef<uint16_t> result);
    // public System.Boolean TryGetInt(out System.Int32 result)
    // Offset: 0x21F5FFC
    bool TryGetInt(ByRef<int> result);
    // public System.Boolean TryGetUInt(out System.UInt32 result)
    // Offset: 0x21F6044
    bool TryGetUInt(ByRef<uint> result);
    // public System.Boolean TryGetLong(out System.Int64 result)
    // Offset: 0x21F608C
    bool TryGetLong(ByRef<int64_t> result);
    // public System.Boolean TryGetULong(out System.UInt64 result)
    // Offset: 0x21F60D4
    bool TryGetULong(ByRef<uint64_t> result);
    // public System.Boolean TryGetFloat(out System.Single result)
    // Offset: 0x21F611C
    bool TryGetFloat(ByRef<float> result);
    // public System.Boolean TryGetDouble(out System.Double result)
    // Offset: 0x21F6160
    bool TryGetDouble(ByRef<double> result);
    // public System.Boolean TryGetString(out System.String result)
    // Offset: 0x21F61A4
    bool TryGetString(ByRef<::StringW> result);
    // public System.Boolean TryGetStringArray(out System.String[] result)
    // Offset: 0x21F620C
    bool TryGetStringArray(ByRef<::ArrayW<::StringW>> result);
    // public System.Boolean TryGetBytesWithLength(out System.Byte[] result)
    // Offset: 0x21F6304
    bool TryGetBytesWithLength(ByRef<::ArrayW<uint8_t>> result);
    // public System.Void Clear()
    // Offset: 0x21EEF08
    void Clear();
  }; // LiteNetLib.Utils.NetDataReader
  #pragma pack(pop)
  static check_size<sizeof(NetDataReader), 32 + sizeof(int)> __LiteNetLib_Utils_NetDataReaderSizeCheck;
  static_assert(sizeof(NetDataReader) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_RawData
// Il2CppName: get_RawData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_RawData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_RawData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_RawDataSize
// Il2CppName: get_RawDataSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_RawDataSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_RawDataSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_UserDataOffset
// Il2CppName: get_UserDataOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_UserDataOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_UserDataOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_UserDataSize
// Il2CppName: get_UserDataSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_UserDataSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_UserDataSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_IsNull
// Il2CppName: get_IsNull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_IsNull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_IsNull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_Position
// Il2CppName: get_Position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_Position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_Position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_EndOfData
// Il2CppName: get_EndOfData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_EndOfData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_EndOfData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::get_AvailableBytes
// Il2CppName: get_AvailableBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::get_AvailableBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "get_AvailableBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::SkipBytes
// Il2CppName: SkipBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(int)>(&LiteNetLib::Utils::NetDataReader::SkipBytes)> {
  static const MethodInfo* get() {
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "SkipBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{count});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::SetSource
// Il2CppName: SetSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(::LiteNetLib::Utils::NetDataWriter*)>(&LiteNetLib::Utils::NetDataReader::SetSource)> {
  static const MethodInfo* get() {
    static auto* dataWriter = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "SetSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dataWriter});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::SetSource
// Il2CppName: SetSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(::ArrayW<uint8_t>)>(&LiteNetLib::Utils::NetDataReader::SetSource)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "SetSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::SetSource
// Il2CppName: SetSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(::ArrayW<uint8_t>, int)>(&LiteNetLib::Utils::NetDataReader::SetSource)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "SetSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, offset});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::SetSource
// Il2CppName: SetSource
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(::ArrayW<uint8_t>, int, int)>(&LiteNetLib::Utils::NetDataReader::SetSource)> {
  static const MethodInfo* get() {
    static auto* source = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxSize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "SetSource", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source, offset, maxSize});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetNetEndPoint
// Il2CppName: GetNetEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Net::IPEndPoint* (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetNetEndPoint)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetNetEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetByte
// Il2CppName: GetByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetByte)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetSByte
// Il2CppName: GetSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetSByte)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetBoolArray
// Il2CppName: GetBoolArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<bool> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetBoolArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetBoolArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetUShortArray
// Il2CppName: GetUShortArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint16_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetUShortArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetUShortArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetShortArray
// Il2CppName: GetShortArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int16_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetShortArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetShortArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetLongArray
// Il2CppName: GetLongArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int64_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetLongArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetLongArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetULongArray
// Il2CppName: GetULongArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint64_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetULongArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetULongArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetIntArray
// Il2CppName: GetIntArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetIntArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetIntArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetUIntArray
// Il2CppName: GetUIntArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetUIntArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetUIntArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetFloatArray
// Il2CppName: GetFloatArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetFloatArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetFloatArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetDoubleArray
// Il2CppName: GetDoubleArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<double> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetDoubleArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetDoubleArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetStringArray
// Il2CppName: GetStringArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetStringArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetStringArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetStringArray
// Il2CppName: GetStringArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (LiteNetLib::Utils::NetDataReader::*)(int)>(&LiteNetLib::Utils::NetDataReader::GetStringArray)> {
  static const MethodInfo* get() {
    static auto* maxStringLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetStringArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxStringLength});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetBool
// Il2CppName: GetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetBool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetChar
// Il2CppName: GetChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetUShort
// Il2CppName: GetUShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetUShort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetUShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetShort
// Il2CppName: GetShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetShort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetLong
// Il2CppName: GetLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetLong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetULong
// Il2CppName: GetULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetULong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetInt
// Il2CppName: GetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetUInt
// Il2CppName: GetUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetUInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetFloat
// Il2CppName: GetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetDouble
// Il2CppName: GetDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LiteNetLib::Utils::NetDataReader::*)(int)>(&LiteNetLib::Utils::NetDataReader::GetString)> {
  static const MethodInfo* get() {
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxLength});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetString
// Il2CppName: GetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetRemainingBytesSegment
// Il2CppName: GetRemainingBytesSegment
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::ArraySegment_1<uint8_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetRemainingBytesSegment)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetRemainingBytesSegment", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::Get
// Il2CppName: Get
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetRemainingBytes
// Il2CppName: GetRemainingBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetRemainingBytes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetRemainingBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(::ArrayW<uint8_t>, int, int)>(&LiteNetLib::Utils::NetDataReader::GetBytes)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* start = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, start, count});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetBytes
// Il2CppName: GetBytes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)(::ArrayW<uint8_t>, int)>(&LiteNetLib::Utils::NetDataReader::GetBytes)> {
  static const MethodInfo* get() {
    static auto* destination = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetBytes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination, count});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetSBytesWithLength
// Il2CppName: GetSBytesWithLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<int8_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetSBytesWithLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetSBytesWithLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::GetBytesWithLength
// Il2CppName: GetBytesWithLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::GetBytesWithLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "GetBytesWithLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekByte
// Il2CppName: PeekByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekByte)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekSByte
// Il2CppName: PeekSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int8_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekSByte)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekBool
// Il2CppName: PeekBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekBool)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekChar
// Il2CppName: PeekChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppChar (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekChar)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekUShort
// Il2CppName: PeekUShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint16_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekUShort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekUShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekShort
// Il2CppName: PeekShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int16_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekShort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekLong
// Il2CppName: PeekLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekLong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekULong
// Il2CppName: PeekULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekULong)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekInt
// Il2CppName: PeekInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekUInt
// Il2CppName: PeekUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekUInt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekFloat
// Il2CppName: PeekFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekFloat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekDouble
// Il2CppName: PeekDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekDouble)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekString
// Il2CppName: PeekString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LiteNetLib::Utils::NetDataReader::*)(int)>(&LiteNetLib::Utils::NetDataReader::PeekString)> {
  static const MethodInfo* get() {
    static auto* maxLength = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{maxLength});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::PeekString
// Il2CppName: PeekString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::PeekString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "PeekString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetByte
// Il2CppName: TryGetByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<uint8_t>)>(&LiteNetLib::Utils::NetDataReader::TryGetByte)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Byte")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetSByte
// Il2CppName: TryGetSByte
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<int8_t>)>(&LiteNetLib::Utils::NetDataReader::TryGetSByte)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "SByte")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetSByte", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetBool
// Il2CppName: TryGetBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<bool>)>(&LiteNetLib::Utils::NetDataReader::TryGetBool)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetChar
// Il2CppName: TryGetChar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<::Il2CppChar>)>(&LiteNetLib::Utils::NetDataReader::TryGetChar)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Char")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetChar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetShort
// Il2CppName: TryGetShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<int16_t>)>(&LiteNetLib::Utils::NetDataReader::TryGetShort)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int16")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetUShort
// Il2CppName: TryGetUShort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<uint16_t>)>(&LiteNetLib::Utils::NetDataReader::TryGetUShort)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt16")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetUShort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetInt
// Il2CppName: TryGetInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<int>)>(&LiteNetLib::Utils::NetDataReader::TryGetInt)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetUInt
// Il2CppName: TryGetUInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<uint>)>(&LiteNetLib::Utils::NetDataReader::TryGetUInt)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetUInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetLong
// Il2CppName: TryGetLong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<int64_t>)>(&LiteNetLib::Utils::NetDataReader::TryGetLong)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Int64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetLong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetULong
// Il2CppName: TryGetULong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<uint64_t>)>(&LiteNetLib::Utils::NetDataReader::TryGetULong)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetULong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetFloat
// Il2CppName: TryGetFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<float>)>(&LiteNetLib::Utils::NetDataReader::TryGetFloat)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetDouble
// Il2CppName: TryGetDouble
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<double>)>(&LiteNetLib::Utils::NetDataReader::TryGetDouble)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "Double")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetDouble", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetString
// Il2CppName: TryGetString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<::StringW>)>(&LiteNetLib::Utils::NetDataReader::TryGetString)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("System", "String")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetStringArray
// Il2CppName: TryGetStringArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<::ArrayW<::StringW>>)>(&LiteNetLib::Utils::NetDataReader::TryGetStringArray)> {
  static const MethodInfo* get() {
    static auto* result = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetStringArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::TryGetBytesWithLength
// Il2CppName: TryGetBytesWithLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::Utils::NetDataReader::*)(ByRef<::ArrayW<uint8_t>>)>(&LiteNetLib::Utils::NetDataReader::TryGetBytesWithLength)> {
  static const MethodInfo* get() {
    static auto* result = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->this_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "TryGetBytesWithLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: LiteNetLib::Utils::NetDataReader::Clear
// Il2CppName: Clear
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::Utils::NetDataReader::*)()>(&LiteNetLib::Utils::NetDataReader::Clear)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::Utils::NetDataReader*), "Clear", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
