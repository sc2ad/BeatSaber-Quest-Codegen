// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: System.Collections.Generic.IEqualityComparer`1
#include "System/Collections/Generic/IEqualityComparer_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::LiteNetLib::NetManager::IPEndPointComparer);
DEFINE_IL2CPP_ARG_TYPE(::LiteNetLib::NetManager::IPEndPointComparer*, "LiteNetLib", "NetManager/IPEndPointComparer");
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
  // [TokenAttribute] Offset: FFFFFFFF
  class NetManager::IPEndPointComparer : public ::Il2CppObject/*, public ::System::Collections::Generic::IEqualityComparer_1<::System::Net::IPEndPoint*>*/ {
    public:
    // Creating interface conversion operator: operator ::System::Collections::Generic::IEqualityComparer_1<::System::Net::IPEndPoint*>
    operator ::System::Collections::Generic::IEqualityComparer_1<::System::Net::IPEndPoint*>() noexcept {
      return *reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<::System::Net::IPEndPoint*>*>(this);
    }
    // Creating interface conversion operator: i_IPEndPoint
    inline ::System::Collections::Generic::IEqualityComparer_1<::System::Net::IPEndPoint*>* i_IPEndPoint() noexcept {
      return reinterpret_cast<::System::Collections::Generic::IEqualityComparer_1<::System::Net::IPEndPoint*>*>(this);
    }
    // public System.Void .ctor()
    // Offset: 0x21B651C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetManager::IPEndPointComparer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::LiteNetLib::NetManager::IPEndPointComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetManager::IPEndPointComparer*, creationType>()));
    }
    // public System.Boolean Equals(System.Net.IPEndPoint x, System.Net.IPEndPoint y)
    // Offset: 0x21BBB9C
    bool Equals(::System::Net::IPEndPoint* x, ::System::Net::IPEndPoint* y);
    // public System.Int32 GetHashCode(System.Net.IPEndPoint obj)
    // Offset: 0x21BBBFC
    int GetHashCode(::System::Net::IPEndPoint* obj);
  }; // LiteNetLib.NetManager/LiteNetLib.IPEndPointComparer
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LiteNetLib::NetManager::IPEndPointComparer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::NetManager::IPEndPointComparer::Equals
// Il2CppName: Equals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::IPEndPointComparer::*)(::System::Net::IPEndPoint*, ::System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::IPEndPointComparer::Equals)> {
  static const MethodInfo* get() {
    static auto* x = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* y = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::IPEndPointComparer*), "Equals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{x, y});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::IPEndPointComparer::GetHashCode
// Il2CppName: GetHashCode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (LiteNetLib::NetManager::IPEndPointComparer::*)(::System::Net::IPEndPoint*)>(&LiteNetLib::NetManager::IPEndPointComparer::GetHashCode)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::IPEndPointComparer*), "GetHashCode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
