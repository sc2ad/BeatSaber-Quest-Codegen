// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: LiteNetLib.NetManager/NetPeerEnumerator
  // [TokenAttribute] Offset: FFFFFFFF
  struct NetManager::NetPeerEnumerator/*, public System::ValueType, public System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*/ {
    public:
    // private readonly LiteNetLib.NetPeer _initialPeer
    // Size: 0x8
    // Offset: 0x0
    LiteNetLib::NetPeer* initialPeer;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPeer*) == 0x8);
    // private LiteNetLib.NetPeer _p
    // Size: 0x8
    // Offset: 0x8
    LiteNetLib::NetPeer* p;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPeer*) == 0x8);
    // Creating value type constructor for type: NetPeerEnumerator
    constexpr NetPeerEnumerator(LiteNetLib::NetPeer* initialPeer_ = {}, LiteNetLib::NetPeer* p_ = {}) noexcept : initialPeer{initialPeer_}, p{p_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>
    operator System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*>(this);
    }
    // Get instance field reference: private readonly LiteNetLib.NetPeer _initialPeer
    LiteNetLib::NetPeer*& dyn__initialPeer();
    // Get instance field reference: private LiteNetLib.NetPeer _p
    LiteNetLib::NetPeer*& dyn__p();
    // public System.Void .ctor(LiteNetLib.NetPeer p)
    // Offset: 0x1DDC540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    NetPeerEnumerator(LiteNetLib::NetPeer* p) {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetManager::NetPeerEnumerator::.ctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(p)})));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, p);
    }
    // public System.Void Dispose()
    // Offset: 0x1DDC698
    void Dispose();
    // public System.Boolean MoveNext()
    // Offset: 0x1DDC69C
    bool MoveNext();
    // public System.Void Reset()
    // Offset: 0x1DDC6DC
    void Reset();
    // public LiteNetLib.NetPeer get_Current()
    // Offset: 0x1DDC73C
    LiteNetLib::NetPeer* get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0x1DDC744
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // LiteNetLib.NetManager/NetPeerEnumerator
  #pragma pack(pop)
  static check_size<sizeof(NetManager::NetPeerEnumerator), 8 + sizeof(LiteNetLib::NetPeer*)> __LiteNetLib_NetManager_NetPeerEnumeratorSizeCheck;
  static_assert(sizeof(NetManager::NetPeerEnumerator) == 0x10);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetManager::NetPeerEnumerator, "LiteNetLib", "NetManager/NetPeerEnumerator");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: LiteNetLib::NetManager::NetPeerEnumerator::NetPeerEnumerator
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: LiteNetLib::NetManager::NetPeerEnumerator::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::NetPeerEnumerator::*)()>(&LiteNetLib::NetManager::NetPeerEnumerator::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::NetPeerEnumerator), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::NetPeerEnumerator::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (LiteNetLib::NetManager::NetPeerEnumerator::*)()>(&LiteNetLib::NetManager::NetPeerEnumerator::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::NetPeerEnumerator), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::NetPeerEnumerator::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (LiteNetLib::NetManager::NetPeerEnumerator::*)()>(&LiteNetLib::NetManager::NetPeerEnumerator::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::NetPeerEnumerator), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::NetPeerEnumerator::get_Current
// Il2CppName: get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::NetPeer* (LiteNetLib::NetManager::NetPeerEnumerator::*)()>(&LiteNetLib::NetManager::NetPeerEnumerator::get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::NetPeerEnumerator), "get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: LiteNetLib::NetManager::NetPeerEnumerator::System_Collections_IEnumerator_get_Current
// Il2CppName: System.Collections.IEnumerator.get_Current
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppObject* (LiteNetLib::NetManager::NetPeerEnumerator::*)()>(&LiteNetLib::NetManager::NetPeerEnumerator::System_Collections_IEnumerator_get_Current)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(LiteNetLib::NetManager::NetPeerEnumerator), "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
