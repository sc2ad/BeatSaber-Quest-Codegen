// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HEU_ScriptCallbackExample
  class HEU_ScriptCallbackExample;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HEU_ScriptCallbackExample);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HEU_ScriptCallbackExample*, "", "HEU_ScriptCallbackExample");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: HEU_ScriptCallbackExample
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class HEU_ScriptCallbackExample : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String _msg
    // Size: 0x8
    // Offset: 0x18
    ::StringW msg;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String _msg
    [[deprecated("Use field access instead!")]] ::StringW& dyn__msg();
    // public System.Void .ctor()
    // Offset: 0x1701684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HEU_ScriptCallbackExample* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HEU_ScriptCallbackExample::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HEU_ScriptCallbackExample*, creationType>()));
    }
    // private System.Void AssetCallbackWithMsg(System.String msg)
    // Offset: 0x170157C
    void AssetCallbackWithMsg(::StringW msg);
    // private System.Void AssetCallbackNoMsg()
    // Offset: 0x1701618
    void AssetCallbackNoMsg();
  }; // HEU_ScriptCallbackExample
  #pragma pack(pop)
  static check_size<sizeof(HEU_ScriptCallbackExample), 24 + sizeof(::StringW)> __GlobalNamespace_HEU_ScriptCallbackExampleSizeCheck;
  static_assert(sizeof(HEU_ScriptCallbackExample) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HEU_ScriptCallbackExample::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HEU_ScriptCallbackExample::AssetCallbackWithMsg
// Il2CppName: AssetCallbackWithMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HEU_ScriptCallbackExample::*)(::StringW)>(&GlobalNamespace::HEU_ScriptCallbackExample::AssetCallbackWithMsg)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HEU_ScriptCallbackExample*), "AssetCallbackWithMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HEU_ScriptCallbackExample::AssetCallbackNoMsg
// Il2CppName: AssetCallbackNoMsg
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HEU_ScriptCallbackExample::*)()>(&GlobalNamespace::HEU_ScriptCallbackExample::AssetCallbackNoMsg)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HEU_ScriptCallbackExample*), "AssetCallbackNoMsg", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
