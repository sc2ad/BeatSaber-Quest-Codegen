// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ProfanityFilter
#include "GlobalNamespace/ProfanityFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ProfanityFilter::TrieNode);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ProfanityFilter::TrieNode*, "", "ProfanityFilter/TrieNode");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: ProfanityFilter/TrieNode
  // [TokenAttribute] Offset: FFFFFFFF
  class ProfanityFilter::TrieNode : public ::Il2CppObject {
    public:
    public:
    // private System.Collections.Generic.Dictionary`2<System.Char,ProfanityFilter/TrieNode> _children
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::ProfanityFilter::TrieNode*>* children;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::ProfanityFilter::TrieNode*>*) == 0x8);
    // private System.Int32 _shortestWord
    // Size: 0x4
    // Offset: 0x18
    int shortestWord;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Char,ProfanityFilter/TrieNode> _children
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::Il2CppChar, ::GlobalNamespace::ProfanityFilter::TrieNode*>*& dyn__children();
    // Get instance field reference: private System.Int32 _shortestWord
    [[deprecated("Use field access instead!")]] int& dyn__shortestWord();
    // public System.Void .ctor()
    // Offset: 0x1A03380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProfanityFilter::TrieNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProfanityFilter::TrieNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProfanityFilter::TrieNode*, creationType>()));
    }
    // public System.Void AddWord(System.String word, System.Int32 index)
    // Offset: 0x1A03390
    void AddWord(::StringW word, int index);
    // public System.Boolean IsMatch(System.String word, System.Int32 index)
    // Offset: 0x1A037EC
    bool IsMatch(::StringW word, int index);
  }; // ProfanityFilter/TrieNode
  #pragma pack(pop)
  static check_size<sizeof(ProfanityFilter::TrieNode), 24 + sizeof(int)> __GlobalNamespace_ProfanityFilter_TrieNodeSizeCheck;
  static_assert(sizeof(ProfanityFilter::TrieNode) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ProfanityFilter::TrieNode::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ProfanityFilter::TrieNode::AddWord
// Il2CppName: AddWord
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ProfanityFilter::TrieNode::*)(::StringW, int)>(&GlobalNamespace::ProfanityFilter::TrieNode::AddWord)> {
  static const MethodInfo* get() {
    static auto* word = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProfanityFilter::TrieNode*), "AddWord", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{word, index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProfanityFilter::TrieNode::IsMatch
// Il2CppName: IsMatch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ProfanityFilter::TrieNode::*)(::StringW, int)>(&GlobalNamespace::ProfanityFilter::TrieNode::IsMatch)> {
  static const MethodInfo* get() {
    static auto* word = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProfanityFilter::TrieNode*), "IsMatch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{word, index});
  }
};
