// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: GameplayType because it is already included!
  // Skipping declaration: ScoringType because it is already included!
  // Skipping declaration: BeatmapDataItem because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteData
  class NoteData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteData*, "", "NoteData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: NoteData
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteData : public ::GlobalNamespace::BeatmapObjectData {
    public:
    // Nested type: ::GlobalNamespace::NoteData::GameplayType
    struct GameplayType;
    // Nested type: ::GlobalNamespace::NoteData::ScoringType
    struct ScoringType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: NoteData/GameplayType
    // [TokenAttribute] Offset: FFFFFFFF
    struct GameplayType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GameplayType
      constexpr GameplayType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NoteData/GameplayType Normal
      static constexpr const int Normal = 0;
      // Get static field: static public NoteData/GameplayType Normal
      static ::GlobalNamespace::NoteData::GameplayType _get_Normal();
      // Set static field: static public NoteData/GameplayType Normal
      static void _set_Normal(::GlobalNamespace::NoteData::GameplayType value);
      // static field const value: static public NoteData/GameplayType Bomb
      static constexpr const int Bomb = 1;
      // Get static field: static public NoteData/GameplayType Bomb
      static ::GlobalNamespace::NoteData::GameplayType _get_Bomb();
      // Set static field: static public NoteData/GameplayType Bomb
      static void _set_Bomb(::GlobalNamespace::NoteData::GameplayType value);
      // static field const value: static public NoteData/GameplayType BurstSliderHead
      static constexpr const int BurstSliderHead = 2;
      // Get static field: static public NoteData/GameplayType BurstSliderHead
      static ::GlobalNamespace::NoteData::GameplayType _get_BurstSliderHead();
      // Set static field: static public NoteData/GameplayType BurstSliderHead
      static void _set_BurstSliderHead(::GlobalNamespace::NoteData::GameplayType value);
      // static field const value: static public NoteData/GameplayType BurstSliderElement
      static constexpr const int BurstSliderElement = 3;
      // Get static field: static public NoteData/GameplayType BurstSliderElement
      static ::GlobalNamespace::NoteData::GameplayType _get_BurstSliderElement();
      // Set static field: static public NoteData/GameplayType BurstSliderElement
      static void _set_BurstSliderElement(::GlobalNamespace::NoteData::GameplayType value);
      // static field const value: static public NoteData/GameplayType BurstSliderElementFill
      static constexpr const int BurstSliderElementFill = 4;
      // Get static field: static public NoteData/GameplayType BurstSliderElementFill
      static ::GlobalNamespace::NoteData::GameplayType _get_BurstSliderElementFill();
      // Set static field: static public NoteData/GameplayType BurstSliderElementFill
      static void _set_BurstSliderElementFill(::GlobalNamespace::NoteData::GameplayType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // NoteData/GameplayType
    #pragma pack(pop)
    static check_size<sizeof(NoteData::GameplayType), 0 + sizeof(int)> __GlobalNamespace_NoteData_GameplayTypeSizeCheck;
    static_assert(sizeof(NoteData::GameplayType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: NoteData/ScoringType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ScoringType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ScoringType
      constexpr ScoringType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NoteData/ScoringType Ignore
      static constexpr const int Ignore = -1;
      // Get static field: static public NoteData/ScoringType Ignore
      static ::GlobalNamespace::NoteData::ScoringType _get_Ignore();
      // Set static field: static public NoteData/ScoringType Ignore
      static void _set_Ignore(::GlobalNamespace::NoteData::ScoringType value);
      // static field const value: static public NoteData/ScoringType NoScore
      static constexpr const int NoScore = 0;
      // Get static field: static public NoteData/ScoringType NoScore
      static ::GlobalNamespace::NoteData::ScoringType _get_NoScore();
      // Set static field: static public NoteData/ScoringType NoScore
      static void _set_NoScore(::GlobalNamespace::NoteData::ScoringType value);
      // static field const value: static public NoteData/ScoringType Normal
      static constexpr const int Normal = 1;
      // Get static field: static public NoteData/ScoringType Normal
      static ::GlobalNamespace::NoteData::ScoringType _get_Normal();
      // Set static field: static public NoteData/ScoringType Normal
      static void _set_Normal(::GlobalNamespace::NoteData::ScoringType value);
      // static field const value: static public NoteData/ScoringType SliderHead
      static constexpr const int SliderHead = 2;
      // Get static field: static public NoteData/ScoringType SliderHead
      static ::GlobalNamespace::NoteData::ScoringType _get_SliderHead();
      // Set static field: static public NoteData/ScoringType SliderHead
      static void _set_SliderHead(::GlobalNamespace::NoteData::ScoringType value);
      // static field const value: static public NoteData/ScoringType SliderTail
      static constexpr const int SliderTail = 3;
      // Get static field: static public NoteData/ScoringType SliderTail
      static ::GlobalNamespace::NoteData::ScoringType _get_SliderTail();
      // Set static field: static public NoteData/ScoringType SliderTail
      static void _set_SliderTail(::GlobalNamespace::NoteData::ScoringType value);
      // static field const value: static public NoteData/ScoringType BurstSliderHead
      static constexpr const int BurstSliderHead = 4;
      // Get static field: static public NoteData/ScoringType BurstSliderHead
      static ::GlobalNamespace::NoteData::ScoringType _get_BurstSliderHead();
      // Set static field: static public NoteData/ScoringType BurstSliderHead
      static void _set_BurstSliderHead(::GlobalNamespace::NoteData::ScoringType value);
      // static field const value: static public NoteData/ScoringType BurstSliderElement
      static constexpr const int BurstSliderElement = 5;
      // Get static field: static public NoteData/ScoringType BurstSliderElement
      static ::GlobalNamespace::NoteData::ScoringType _get_BurstSliderElement();
      // Set static field: static public NoteData/ScoringType BurstSliderElement
      static void _set_BurstSliderElement(::GlobalNamespace::NoteData::ScoringType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // NoteData/ScoringType
    #pragma pack(pop)
    static check_size<sizeof(NoteData::ScoringType), 0 + sizeof(int)> __GlobalNamespace_NoteData_ScoringTypeSizeCheck;
    static_assert(sizeof(NoteData::ScoringType) == 0x4);
    public:
    // private NoteData/GameplayType <gameplayType>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::NoteData::GameplayType gameplayType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteData::GameplayType) == 0x4);
    // private NoteData/ScoringType <scoringType>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::NoteData::ScoringType scoringType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteData::ScoringType) == 0x4);
    // private ColorType <colorType>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::ColorType colorType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorType) == 0x4);
    // private NoteCutDirection <cutDirection>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::NoteCutDirection cutDirection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteCutDirection) == 0x4);
    // private System.Single <timeToNextColorNote>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    float timeToNextColorNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <timeToPrevColorNote>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float timeToPrevColorNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <lineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    int lineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private NoteLineLayer <noteLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x3C
    ::GlobalNamespace::NoteLineLayer noteLineLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteLineLayer) == 0x4);
    // private NoteLineLayer <beforeJumpNoteLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::NoteLineLayer beforeJumpNoteLineLayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteLineLayer) == 0x4);
    // private System.Int32 <flipLineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x44
    int flipLineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single <flipYSide>k__BackingField
    // Size: 0x4
    // Offset: 0x48
    float flipYSide;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <cutDirectionAngleOffset>k__BackingField
    // Size: 0x4
    // Offset: 0x4C
    float cutDirectionAngleOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <cutSfxVolumeMultiplier>k__BackingField
    // Size: 0x4
    // Offset: 0x50
    float cutSfxVolumeMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private NoteData/GameplayType <gameplayType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::GameplayType& dyn_$gameplayType$k__BackingField();
    // Get instance field reference: private NoteData/ScoringType <scoringType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::ScoringType& dyn_$scoringType$k__BackingField();
    // Get instance field reference: private ColorType <colorType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorType& dyn_$colorType$k__BackingField();
    // Get instance field reference: private NoteCutDirection <cutDirection>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutDirection& dyn_$cutDirection$k__BackingField();
    // Get instance field reference: private System.Single <timeToNextColorNote>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$timeToNextColorNote$k__BackingField();
    // Get instance field reference: private System.Single <timeToPrevColorNote>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$timeToPrevColorNote$k__BackingField();
    // Get instance field reference: private System.Int32 <lineIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$lineIndex$k__BackingField();
    // Get instance field reference: private NoteLineLayer <noteLineLayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& dyn_$noteLineLayer$k__BackingField();
    // Get instance field reference: private NoteLineLayer <beforeJumpNoteLineLayer>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteLineLayer& dyn_$beforeJumpNoteLineLayer$k__BackingField();
    // Get instance field reference: private System.Int32 <flipLineIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$flipLineIndex$k__BackingField();
    // Get instance field reference: private System.Single <flipYSide>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$flipYSide$k__BackingField();
    // Get instance field reference: private System.Single <cutDirectionAngleOffset>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$cutDirectionAngleOffset$k__BackingField();
    // Get instance field reference: private System.Single <cutSfxVolumeMultiplier>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$cutSfxVolumeMultiplier$k__BackingField();
    // public NoteData/GameplayType get_gameplayType()
    // Offset: 0x283EC10
    ::GlobalNamespace::NoteData::GameplayType get_gameplayType();
    // private System.Void set_gameplayType(NoteData/GameplayType value)
    // Offset: 0x283EC18
    void set_gameplayType(::GlobalNamespace::NoteData::GameplayType value);
    // public NoteData/ScoringType get_scoringType()
    // Offset: 0x283EC20
    ::GlobalNamespace::NoteData::ScoringType get_scoringType();
    // private System.Void set_scoringType(NoteData/ScoringType value)
    // Offset: 0x283EC28
    void set_scoringType(::GlobalNamespace::NoteData::ScoringType value);
    // public ColorType get_colorType()
    // Offset: 0x283EC30
    ::GlobalNamespace::ColorType get_colorType();
    // private System.Void set_colorType(ColorType value)
    // Offset: 0x283EC38
    void set_colorType(::GlobalNamespace::ColorType value);
    // public NoteCutDirection get_cutDirection()
    // Offset: 0x283EC40
    ::GlobalNamespace::NoteCutDirection get_cutDirection();
    // private System.Void set_cutDirection(NoteCutDirection value)
    // Offset: 0x283EC48
    void set_cutDirection(::GlobalNamespace::NoteCutDirection value);
    // public System.Single get_timeToNextColorNote()
    // Offset: 0x283EC50
    float get_timeToNextColorNote();
    // public System.Void set_timeToNextColorNote(System.Single value)
    // Offset: 0x283EC58
    void set_timeToNextColorNote(float value);
    // public System.Single get_timeToPrevColorNote()
    // Offset: 0x283EC60
    float get_timeToPrevColorNote();
    // public System.Void set_timeToPrevColorNote(System.Single value)
    // Offset: 0x283EC68
    void set_timeToPrevColorNote(float value);
    // public System.Int32 get_lineIndex()
    // Offset: 0x283EC70
    int get_lineIndex();
    // private System.Void set_lineIndex(System.Int32 value)
    // Offset: 0x283EC78
    void set_lineIndex(int value);
    // public NoteLineLayer get_noteLineLayer()
    // Offset: 0x283EC80
    ::GlobalNamespace::NoteLineLayer get_noteLineLayer();
    // private System.Void set_noteLineLayer(NoteLineLayer value)
    // Offset: 0x283EC88
    void set_noteLineLayer(::GlobalNamespace::NoteLineLayer value);
    // public NoteLineLayer get_beforeJumpNoteLineLayer()
    // Offset: 0x283EC90
    ::GlobalNamespace::NoteLineLayer get_beforeJumpNoteLineLayer();
    // private System.Void set_beforeJumpNoteLineLayer(NoteLineLayer value)
    // Offset: 0x283EC98
    void set_beforeJumpNoteLineLayer(::GlobalNamespace::NoteLineLayer value);
    // public System.Int32 get_flipLineIndex()
    // Offset: 0x283ECA0
    int get_flipLineIndex();
    // private System.Void set_flipLineIndex(System.Int32 value)
    // Offset: 0x283ECA8
    void set_flipLineIndex(int value);
    // public System.Single get_flipYSide()
    // Offset: 0x283ECB0
    float get_flipYSide();
    // private System.Void set_flipYSide(System.Single value)
    // Offset: 0x283ECB8
    void set_flipYSide(float value);
    // public System.Single get_cutDirectionAngleOffset()
    // Offset: 0x283ECC0
    float get_cutDirectionAngleOffset();
    // private System.Void set_cutDirectionAngleOffset(System.Single value)
    // Offset: 0x283ECC8
    void set_cutDirectionAngleOffset(float value);
    // public System.Single get_cutSfxVolumeMultiplier()
    // Offset: 0x283ECD0
    float get_cutSfxVolumeMultiplier();
    // private System.Void set_cutSfxVolumeMultiplier(System.Single value)
    // Offset: 0x283ECD8
    void set_cutSfxVolumeMultiplier(float value);
    // protected System.Void .ctor(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, NoteLineLayer beforeJumpNoteLineLayer, NoteData/GameplayType gameplayType, NoteData/ScoringType scoringType, ColorType colorType, NoteCutDirection cutDirection, System.Single timeToNextColorNote, System.Single timeToPrevColorNote, System.Int32 flipLineIndex, System.Single flipYSide, System.Single cutDirectionAngleOffset, System.Single cutSfxVolumeMultiplier)
    // Offset: 0x283EDA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteData* New_ctor(float time, int lineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer, ::GlobalNamespace::NoteLineLayer beforeJumpNoteLineLayer, ::GlobalNamespace::NoteData::GameplayType gameplayType, ::GlobalNamespace::NoteData::ScoringType scoringType, ::GlobalNamespace::ColorType colorType, ::GlobalNamespace::NoteCutDirection cutDirection, float timeToNextColorNote, float timeToPrevColorNote, int flipLineIndex, float flipYSide, float cutDirectionAngleOffset, float cutSfxVolumeMultiplier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteData*, creationType>(time, lineIndex, noteLineLayer, beforeJumpNoteLineLayer, gameplayType, scoringType, colorType, cutDirection, timeToNextColorNote, timeToPrevColorNote, flipLineIndex, flipYSide, cutDirectionAngleOffset, cutSfxVolumeMultiplier)));
    }
    // static public NoteData CreateBombNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x283EE68
    static ::GlobalNamespace::NoteData* CreateBombNoteData(float time, int lineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer);
    // static public NoteData CreateBasicNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, ColorType colorType, NoteCutDirection cutDirection)
    // Offset: 0x283EF1C
    static ::GlobalNamespace::NoteData* CreateBasicNoteData(float time, int lineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer, ::GlobalNamespace::ColorType colorType, ::GlobalNamespace::NoteCutDirection cutDirection);
    // static public NoteData CreateBurstSliderNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, NoteLineLayer beforeJumpNoteLineLayer, ColorType colorType, NoteCutDirection cutDirection, System.Single cutSfxVolumeMultiplier)
    // Offset: 0x283EFDC
    static ::GlobalNamespace::NoteData* CreateBurstSliderNoteData(float time, int lineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer, ::GlobalNamespace::NoteLineLayer beforeJumpNoteLineLayer, ::GlobalNamespace::ColorType colorType, ::GlobalNamespace::NoteCutDirection cutDirection, float cutSfxVolumeMultiplier);
    // public NoteData CopyWith(System.Nullable`1<System.Single> time, System.Nullable`1<System.Int32> lineIndex, System.Nullable`1<NoteLineLayer> noteLineLayer, System.Nullable`1<NoteLineLayer> beforeJumpNoteLineLayer, System.Nullable`1<NoteData/GameplayType> gameplayType, System.Nullable`1<NoteData/ScoringType> scoringType, System.Nullable`1<ColorType> colorType, System.Nullable`1<NoteCutDirection> cutDirection, System.Nullable`1<System.Single> timeToNextColorNote, System.Nullable`1<System.Single> timeToPrevColorNote, System.Nullable`1<System.Int32> flipLineIndex, System.Nullable`1<System.Single> flipYSide, System.Nullable`1<System.Single> cutDirectionAngleOffset, System.Nullable`1<System.Single> cutSfxVolumeMultiplier)
    // Offset: 0x283F0A8
    ::GlobalNamespace::NoteData* CopyWith(::System::Nullable_1<float> time, ::System::Nullable_1<int> lineIndex, ::System::Nullable_1<::GlobalNamespace::NoteLineLayer> noteLineLayer, ::System::Nullable_1<::GlobalNamespace::NoteLineLayer> beforeJumpNoteLineLayer, ::System::Nullable_1<::GlobalNamespace::NoteData::GameplayType> gameplayType, ::System::Nullable_1<::GlobalNamespace::NoteData::ScoringType> scoringType, ::System::Nullable_1<::GlobalNamespace::ColorType> colorType, ::System::Nullable_1<::GlobalNamespace::NoteCutDirection> cutDirection, ::System::Nullable_1<float> timeToNextColorNote, ::System::Nullable_1<float> timeToPrevColorNote, ::System::Nullable_1<int> flipLineIndex, ::System::Nullable_1<float> flipYSide, ::System::Nullable_1<float> cutDirectionAngleOffset, ::System::Nullable_1<float> cutSfxVolumeMultiplier);
    // public System.Void SetBeforeJumpNoteLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x2839C20
    void SetBeforeJumpNoteLineLayer(::GlobalNamespace::NoteLineLayer lineLayer);
    // public System.Void ChangeToBurstSliderHead()
    // Offset: 0x2839C80
    void ChangeToBurstSliderHead();
    // public System.Void ChangeToGameNote()
    // Offset: 0x283F278
    void ChangeToGameNote();
    // public System.Void ChangeToSliderHead()
    // Offset: 0x2839DFC
    void ChangeToSliderHead();
    // public System.Void ChangeToSliderTail()
    // Offset: 0x2839E60
    void ChangeToSliderTail();
    // public System.Void SetNoteFlipToNote(NoteData targetNote)
    // Offset: 0x283A42C
    void SetNoteFlipToNote(::GlobalNamespace::NoteData* targetNote);
    // public System.Void SetCutDirectionAngleOffset(System.Single cutDirectionAngleOffset)
    // Offset: 0x2839DE8
    void SetCutDirectionAngleOffset(float cutDirectionAngleOffset);
    // public System.Void ResetNoteFlip()
    // Offset: 0x283F288
    void ResetNoteFlip();
    // public System.Void SetNoteToAnyCutDirection()
    // Offset: 0x283F2F8
    void SetNoteToAnyCutDirection();
    // public System.Void ChangeNoteCutDirection(NoteCutDirection newCutDirection)
    // Offset: 0x283F304
    void ChangeNoteCutDirection(::GlobalNamespace::NoteCutDirection newCutDirection);
    // public System.Void TransformNoteAOrBToRandomType()
    // Offset: 0x283F30C
    void TransformNoteAOrBToRandomType();
    // static public System.Int32 SubtypeIdentifier(ColorType colorType)
    // Offset: 0x283EE64
    static int SubtypeIdentifier(::GlobalNamespace::ColorType colorType);
    // public override BeatmapDataItem GetCopy()
    // Offset: 0x283ECE0
    // Implemented from: BeatmapDataItem
    // Base method: BeatmapDataItem BeatmapDataItem::GetCopy()
    ::GlobalNamespace::BeatmapDataItem* GetCopy();
    // public override System.Void Mirror(System.Int32 lineCount)
    // Offset: 0x283F294
    // Implemented from: BeatmapObjectData
    // Base method: System.Void BeatmapObjectData::Mirror(System.Int32 lineCount)
    void Mirror(int lineCount);
  }; // NoteData
  #pragma pack(pop)
  static check_size<sizeof(NoteData), 80 + sizeof(float)> __GlobalNamespace_NoteDataSizeCheck;
  static_assert(sizeof(NoteData) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteData::ScoringType, "", "NoteData/ScoringType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteData::GameplayType, "", "NoteData/GameplayType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_gameplayType
// Il2CppName: get_gameplayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData::GameplayType (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_gameplayType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_gameplayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_gameplayType
// Il2CppName: set_gameplayType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteData::GameplayType)>(&GlobalNamespace::NoteData::set_gameplayType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteData/GameplayType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_gameplayType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_scoringType
// Il2CppName: get_scoringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData::ScoringType (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_scoringType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_scoringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_scoringType
// Il2CppName: set_scoringType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteData::ScoringType)>(&GlobalNamespace::NoteData::set_scoringType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteData/ScoringType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_scoringType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_colorType
// Il2CppName: get_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorType (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_colorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_colorType
// Il2CppName: set_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::ColorType)>(&GlobalNamespace::NoteData::set_colorType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_cutDirection
// Il2CppName: get_cutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteCutDirection (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_cutDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_cutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_cutDirection
// Il2CppName: set_cutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::NoteData::set_cutDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_cutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_timeToNextColorNote
// Il2CppName: get_timeToNextColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_timeToNextColorNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_timeToNextColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_timeToNextColorNote
// Il2CppName: set_timeToNextColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_timeToNextColorNote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_timeToNextColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_timeToPrevColorNote
// Il2CppName: get_timeToPrevColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_timeToPrevColorNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_timeToPrevColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_timeToPrevColorNote
// Il2CppName: set_timeToPrevColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_timeToPrevColorNote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_timeToPrevColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_lineIndex
// Il2CppName: get_lineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_lineIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_lineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_lineIndex
// Il2CppName: set_lineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(int)>(&GlobalNamespace::NoteData::set_lineIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_lineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_noteLineLayer
// Il2CppName: get_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteLineLayer (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_noteLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_noteLineLayer
// Il2CppName: set_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::set_noteLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_beforeJumpNoteLineLayer
// Il2CppName: get_beforeJumpNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteLineLayer (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_beforeJumpNoteLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_beforeJumpNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_beforeJumpNoteLineLayer
// Il2CppName: set_beforeJumpNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::set_beforeJumpNoteLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_beforeJumpNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_flipLineIndex
// Il2CppName: get_flipLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_flipLineIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_flipLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_flipLineIndex
// Il2CppName: set_flipLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(int)>(&GlobalNamespace::NoteData::set_flipLineIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_flipLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_flipYSide
// Il2CppName: get_flipYSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_flipYSide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_flipYSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_flipYSide
// Il2CppName: set_flipYSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_flipYSide)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_flipYSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_cutDirectionAngleOffset
// Il2CppName: get_cutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_cutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_cutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_cutDirectionAngleOffset
// Il2CppName: set_cutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_cutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_cutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_cutSfxVolumeMultiplier
// Il2CppName: get_cutSfxVolumeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_cutSfxVolumeMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_cutSfxVolumeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_cutSfxVolumeMultiplier
// Il2CppName: set_cutSfxVolumeMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_cutSfxVolumeMultiplier)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_cutSfxVolumeMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBombNoteData
// Il2CppName: CreateBombNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData* (*)(float, int, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::CreateBombNoteData)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "CreateBombNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBasicNoteData
// Il2CppName: CreateBasicNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData* (*)(float, int, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::ColorType, ::GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::NoteData::CreateBasicNoteData)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    static auto* cutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "CreateBasicNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lineIndex, noteLineLayer, colorType, cutDirection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBurstSliderNoteData
// Il2CppName: CreateBurstSliderNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData* (*)(float, int, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::ColorType, ::GlobalNamespace::NoteCutDirection, float)>(&GlobalNamespace::NoteData::CreateBurstSliderNoteData)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* beforeJumpNoteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    static auto* cutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    static auto* cutSfxVolumeMultiplier = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "CreateBurstSliderNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lineIndex, noteLineLayer, beforeJumpNoteLineLayer, colorType, cutDirection, cutSfxVolumeMultiplier});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CopyWith
// Il2CppName: CopyWith
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData* (GlobalNamespace::NoteData::*)(::System::Nullable_1<float>, ::System::Nullable_1<int>, ::System::Nullable_1<::GlobalNamespace::NoteLineLayer>, ::System::Nullable_1<::GlobalNamespace::NoteLineLayer>, ::System::Nullable_1<::GlobalNamespace::NoteData::GameplayType>, ::System::Nullable_1<::GlobalNamespace::NoteData::ScoringType>, ::System::Nullable_1<::GlobalNamespace::ColorType>, ::System::Nullable_1<::GlobalNamespace::NoteCutDirection>, ::System::Nullable_1<float>, ::System::Nullable_1<float>, ::System::Nullable_1<int>, ::System::Nullable_1<float>, ::System::Nullable_1<float>, ::System::Nullable_1<float>)>(&GlobalNamespace::NoteData::CopyWith)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* lineIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteLineLayer")})->byval_arg;
    static auto* beforeJumpNoteLineLayer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteLineLayer")})->byval_arg;
    static auto* gameplayType = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData/GameplayType")})->byval_arg;
    static auto* scoringType = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData/ScoringType")})->byval_arg;
    static auto* colorType = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ColorType")})->byval_arg;
    static auto* cutDirection = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteCutDirection")})->byval_arg;
    static auto* timeToNextColorNote = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* timeToPrevColorNote = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* flipLineIndex = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    static auto* flipYSide = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* cutDirectionAngleOffset = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    static auto* cutSfxVolumeMultiplier = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "CopyWith", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lineIndex, noteLineLayer, beforeJumpNoteLineLayer, gameplayType, scoringType, colorType, cutDirection, timeToNextColorNote, timeToPrevColorNote, flipLineIndex, flipYSide, cutDirectionAngleOffset, cutSfxVolumeMultiplier});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetBeforeJumpNoteLineLayer
// Il2CppName: SetBeforeJumpNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::SetBeforeJumpNoteLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetBeforeJumpNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeToBurstSliderHead
// Il2CppName: ChangeToBurstSliderHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::ChangeToBurstSliderHead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ChangeToBurstSliderHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeToGameNote
// Il2CppName: ChangeToGameNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::ChangeToGameNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ChangeToGameNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeToSliderHead
// Il2CppName: ChangeToSliderHead
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::ChangeToSliderHead)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ChangeToSliderHead", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeToSliderTail
// Il2CppName: ChangeToSliderTail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::ChangeToSliderTail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ChangeToSliderTail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteFlipToNote
// Il2CppName: SetNoteFlipToNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteData*)>(&GlobalNamespace::NoteData::SetNoteFlipToNote)> {
  static const MethodInfo* get() {
    static auto* targetNote = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetNoteFlipToNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNote});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetCutDirectionAngleOffset
// Il2CppName: SetCutDirectionAngleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::SetCutDirectionAngleOffset)> {
  static const MethodInfo* get() {
    static auto* cutDirectionAngleOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetCutDirectionAngleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cutDirectionAngleOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ResetNoteFlip
// Il2CppName: ResetNoteFlip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::ResetNoteFlip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ResetNoteFlip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteToAnyCutDirection
// Il2CppName: SetNoteToAnyCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::SetNoteToAnyCutDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetNoteToAnyCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeNoteCutDirection
// Il2CppName: ChangeNoteCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(::GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::NoteData::ChangeNoteCutDirection)> {
  static const MethodInfo* get() {
    static auto* newCutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ChangeNoteCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCutDirection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::TransformNoteAOrBToRandomType
// Il2CppName: TransformNoteAOrBToRandomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::TransformNoteAOrBToRandomType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "TransformNoteAOrBToRandomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SubtypeIdentifier
// Il2CppName: SubtypeIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::GlobalNamespace::ColorType)>(&GlobalNamespace::NoteData::SubtypeIdentifier)> {
  static const MethodInfo* get() {
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SubtypeIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDataItem* (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::GetCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::Mirror
// Il2CppName: Mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(int)>(&GlobalNamespace::NoteData::Mirror)> {
  static const MethodInfo* get() {
    static auto* lineCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "Mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineCount});
  }
};
