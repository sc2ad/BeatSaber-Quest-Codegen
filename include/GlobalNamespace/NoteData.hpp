// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapObjectData
#include "GlobalNamespace/BeatmapObjectData.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteCutDirection
#include "GlobalNamespace/NoteCutDirection.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectType
  struct BeatmapObjectType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3E
  #pragma pack(push, 1)
  // Autogenerated type: NoteData
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteData : public GlobalNamespace::BeatmapObjectData {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xEAECA0
    // private ColorType <colorType>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::ColorType colorType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorType) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAECB0
    // private NoteCutDirection <cutDirection>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    GlobalNamespace::NoteCutDirection cutDirection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteCutDirection) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAECC0
    // private System.Single <timeToNextColorNote>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float timeToNextColorNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAECD0
    // private System.Single <timeToPrevColorNote>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float timeToPrevColorNote;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAECE0
    // private NoteLineLayer <noteLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::NoteLineLayer noteLineLayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteLineLayer) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAECF0
    // private NoteLineLayer <beforeJumpNoteLineLayer>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    GlobalNamespace::NoteLineLayer beforeJumpNoteLineLayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteLineLayer) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAED00
    // private System.Int32 <flipLineIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    int flipLineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAED10
    // private System.Single <flipYSide>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float flipYSide;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAED20
    // private System.Single <duration>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xEAED30
    // private System.Boolean <skipBeforeCutScoring>k__BackingField
    // Size: 0x1
    // Offset: 0x3C
    bool skipBeforeCutScoring;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xEAED40
    // private System.Boolean <skipAfterCutScoring>k__BackingField
    // Size: 0x1
    // Offset: 0x3D
    bool skipAfterCutScoring;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: NoteData
    NoteData(GlobalNamespace::ColorType colorType_ = {}, GlobalNamespace::NoteCutDirection cutDirection_ = {}, float timeToNextColorNote_ = {}, float timeToPrevColorNote_ = {}, GlobalNamespace::NoteLineLayer noteLineLayer_ = {}, GlobalNamespace::NoteLineLayer beforeJumpNoteLineLayer_ = {}, int flipLineIndex_ = {}, float flipYSide_ = {}, float duration_ = {}, bool skipBeforeCutScoring_ = {}, bool skipAfterCutScoring_ = {}) noexcept : colorType{colorType_}, cutDirection{cutDirection_}, timeToNextColorNote{timeToNextColorNote_}, timeToPrevColorNote{timeToPrevColorNote_}, noteLineLayer{noteLineLayer_}, beforeJumpNoteLineLayer{beforeJumpNoteLineLayer_}, flipLineIndex{flipLineIndex_}, flipYSide{flipYSide_}, duration{duration_}, skipBeforeCutScoring{skipBeforeCutScoring_}, skipAfterCutScoring{skipAfterCutScoring_} {}
    // Get instance field reference: private ColorType <colorType>k__BackingField
    GlobalNamespace::ColorType& dyn_$colorType$k__BackingField();
    // Get instance field reference: private NoteCutDirection <cutDirection>k__BackingField
    GlobalNamespace::NoteCutDirection& dyn_$cutDirection$k__BackingField();
    // Get instance field reference: private System.Single <timeToNextColorNote>k__BackingField
    float& dyn_$timeToNextColorNote$k__BackingField();
    // Get instance field reference: private System.Single <timeToPrevColorNote>k__BackingField
    float& dyn_$timeToPrevColorNote$k__BackingField();
    // Get instance field reference: private NoteLineLayer <noteLineLayer>k__BackingField
    GlobalNamespace::NoteLineLayer& dyn_$noteLineLayer$k__BackingField();
    // Get instance field reference: private NoteLineLayer <beforeJumpNoteLineLayer>k__BackingField
    GlobalNamespace::NoteLineLayer& dyn_$beforeJumpNoteLineLayer$k__BackingField();
    // Get instance field reference: private System.Int32 <flipLineIndex>k__BackingField
    int& dyn_$flipLineIndex$k__BackingField();
    // Get instance field reference: private System.Single <flipYSide>k__BackingField
    float& dyn_$flipYSide$k__BackingField();
    // Get instance field reference: private System.Single <duration>k__BackingField
    float& dyn_$duration$k__BackingField();
    // Get instance field reference: private System.Boolean <skipBeforeCutScoring>k__BackingField
    bool& dyn_$skipBeforeCutScoring$k__BackingField();
    // Get instance field reference: private System.Boolean <skipAfterCutScoring>k__BackingField
    bool& dyn_$skipAfterCutScoring$k__BackingField();
    // public ColorType get_colorType()
    // Offset: 0x2614C20
    GlobalNamespace::ColorType get_colorType();
    // private System.Void set_colorType(ColorType value)
    // Offset: 0x2614C28
    void set_colorType(GlobalNamespace::ColorType value);
    // public NoteCutDirection get_cutDirection()
    // Offset: 0x2614C30
    GlobalNamespace::NoteCutDirection get_cutDirection();
    // private System.Void set_cutDirection(NoteCutDirection value)
    // Offset: 0x2614C38
    void set_cutDirection(GlobalNamespace::NoteCutDirection value);
    // public System.Single get_timeToNextColorNote()
    // Offset: 0x2614C40
    float get_timeToNextColorNote();
    // public System.Void set_timeToNextColorNote(System.Single value)
    // Offset: 0x2614C48
    void set_timeToNextColorNote(float value);
    // public System.Single get_timeToPrevColorNote()
    // Offset: 0x2614C50
    float get_timeToPrevColorNote();
    // public System.Void set_timeToPrevColorNote(System.Single value)
    // Offset: 0x2614C58
    void set_timeToPrevColorNote(float value);
    // public NoteLineLayer get_noteLineLayer()
    // Offset: 0x2614C60
    GlobalNamespace::NoteLineLayer get_noteLineLayer();
    // private System.Void set_noteLineLayer(NoteLineLayer value)
    // Offset: 0x2614C68
    void set_noteLineLayer(GlobalNamespace::NoteLineLayer value);
    // public NoteLineLayer get_beforeJumpNoteLineLayer()
    // Offset: 0x2614C70
    GlobalNamespace::NoteLineLayer get_beforeJumpNoteLineLayer();
    // private System.Void set_beforeJumpNoteLineLayer(NoteLineLayer value)
    // Offset: 0x2614C78
    void set_beforeJumpNoteLineLayer(GlobalNamespace::NoteLineLayer value);
    // public System.Int32 get_flipLineIndex()
    // Offset: 0x2614C80
    int get_flipLineIndex();
    // private System.Void set_flipLineIndex(System.Int32 value)
    // Offset: 0x2614C88
    void set_flipLineIndex(int value);
    // public System.Single get_flipYSide()
    // Offset: 0x2614C90
    float get_flipYSide();
    // private System.Void set_flipYSide(System.Single value)
    // Offset: 0x2614C98
    void set_flipYSide(float value);
    // public System.Single get_duration()
    // Offset: 0x2614CA0
    float get_duration();
    // private System.Void set_duration(System.Single value)
    // Offset: 0x2614CA8
    void set_duration(float value);
    // public System.Boolean get_skipBeforeCutScoring()
    // Offset: 0x2614CB0
    bool get_skipBeforeCutScoring();
    // private System.Void set_skipBeforeCutScoring(System.Boolean value)
    // Offset: 0x2614CB8
    void set_skipBeforeCutScoring(bool value);
    // public System.Boolean get_skipAfterCutScoring()
    // Offset: 0x2614CC4
    bool get_skipAfterCutScoring();
    // private System.Void set_skipAfterCutScoring(System.Boolean value)
    // Offset: 0x2614CCC
    void set_skipAfterCutScoring(bool value);
    // public System.Void .ctor(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, NoteLineLayer beforeJumpNoteLineLayer, ColorType colorType, NoteCutDirection cutDirection, System.Single timeToNextColorNote, System.Single timeToPrevColorNote, System.Int32 flipLineIndex, System.Single flipYSide, System.Single duration, System.Boolean skipBeforeCutScoring, System.Boolean skipAfterCutScoring)
    // Offset: 0x2614D80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteData* New_ctor(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::NoteLineLayer beforeJumpNoteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection, float timeToNextColorNote, float timeToPrevColorNote, int flipLineIndex, float flipYSide, float duration, bool skipBeforeCutScoring, bool skipAfterCutScoring) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteData*, creationType>(time, lineIndex, noteLineLayer, beforeJumpNoteLineLayer, colorType, cutDirection, timeToNextColorNote, timeToPrevColorNote, flipLineIndex, flipYSide, duration, skipBeforeCutScoring, skipAfterCutScoring)));
    }
    // static public NoteData CreateBombNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x2614E3C
    static GlobalNamespace::NoteData* CreateBombNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer);
    // static public NoteData CreateBasicNoteData(System.Single time, System.Int32 lineIndex, NoteLineLayer noteLineLayer, ColorType colorType, NoteCutDirection cutDirection)
    // Offset: 0x2614EDC
    static GlobalNamespace::NoteData* CreateBasicNoteData(float time, int lineIndex, GlobalNamespace::NoteLineLayer noteLineLayer, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection);
    // public System.Void SetBeforeJumpNoteLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x261478C
    void SetBeforeJumpNoteLineLayer(GlobalNamespace::NoteLineLayer lineLayer);
    // public System.Void SetSkipBeforeCutScoring(System.Boolean applyBeforeCutScoring)
    // Offset: 0x2614F88
    void SetSkipBeforeCutScoring(bool applyBeforeCutScoring);
    // public System.Void SetSkipAfterCutScoring(System.Boolean applyAfterCutScoring)
    // Offset: 0x2614F94
    void SetSkipAfterCutScoring(bool applyAfterCutScoring);
    // public System.Void SetNoteFlipToNote(NoteData targetNote)
    // Offset: 0x2614710
    void SetNoteFlipToNote(GlobalNamespace::NoteData* targetNote);
    // public System.Void ResetNoteFlip()
    // Offset: 0x2614FA0
    void ResetNoteFlip();
    // public System.Void SetNoteToAnyCutDirection()
    // Offset: 0x2615000
    void SetNoteToAnyCutDirection();
    // public System.Void ChangeNoteCutDirection(NoteCutDirection newCutDirection)
    // Offset: 0x261500C
    void ChangeNoteCutDirection(GlobalNamespace::NoteCutDirection newCutDirection);
    // public System.Void TransformNoteAOrBToRandomType()
    // Offset: 0x2615014
    void TransformNoteAOrBToRandomType();
    // public override BeatmapObjectType get_beatmapObjectType()
    // Offset: 0x2614C18
    // Implemented from: BeatmapObjectData
    // Base method: BeatmapObjectType BeatmapObjectData::get_beatmapObjectType()
    GlobalNamespace::BeatmapObjectType get_beatmapObjectType();
    // public override BeatmapObjectData GetCopy()
    // Offset: 0x2614CD8
    // Implemented from: BeatmapObjectData
    // Base method: BeatmapObjectData BeatmapObjectData::GetCopy()
    GlobalNamespace::BeatmapObjectData* GetCopy();
    // public override System.Void Mirror(System.Int32 lineCount)
    // Offset: 0x2614FAC
    // Implemented from: BeatmapObjectData
    // Base method: System.Void BeatmapObjectData::Mirror(System.Int32 lineCount)
    void Mirror(int lineCount);
  }; // NoteData
  #pragma pack(pop)
  static check_size<sizeof(NoteData), 61 + sizeof(bool)> __GlobalNamespace_NoteDataSizeCheck;
  static_assert(sizeof(NoteData) == 0x3E);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteData*, "", "NoteData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_colorType
// Il2CppName: get_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ColorType (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_colorType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_colorType
// Il2CppName: set_colorType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::ColorType)>(&GlobalNamespace::NoteData::set_colorType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_colorType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_cutDirection
// Il2CppName: get_cutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteCutDirection (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_cutDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_cutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_cutDirection
// Il2CppName: set_cutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::NoteData::set_cutDirection)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_cutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_timeToNextColorNote
// Il2CppName: get_timeToNextColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_timeToNextColorNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_timeToNextColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_timeToNextColorNote
// Il2CppName: set_timeToNextColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_timeToNextColorNote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_timeToNextColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_timeToPrevColorNote
// Il2CppName: get_timeToPrevColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_timeToPrevColorNote)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_timeToPrevColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_timeToPrevColorNote
// Il2CppName: set_timeToPrevColorNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_timeToPrevColorNote)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_timeToPrevColorNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_noteLineLayer
// Il2CppName: get_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteLineLayer (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_noteLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_noteLineLayer
// Il2CppName: set_noteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::set_noteLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_noteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_beforeJumpNoteLineLayer
// Il2CppName: get_beforeJumpNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteLineLayer (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_beforeJumpNoteLineLayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_beforeJumpNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_beforeJumpNoteLineLayer
// Il2CppName: set_beforeJumpNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::set_beforeJumpNoteLineLayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_beforeJumpNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_flipLineIndex
// Il2CppName: get_flipLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_flipLineIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_flipLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_flipLineIndex
// Il2CppName: set_flipLineIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(int)>(&GlobalNamespace::NoteData::set_flipLineIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_flipLineIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_flipYSide
// Il2CppName: get_flipYSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_flipYSide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_flipYSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_flipYSide
// Il2CppName: set_flipYSide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_flipYSide)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_flipYSide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_duration
// Il2CppName: get_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_duration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_duration
// Il2CppName: set_duration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(float)>(&GlobalNamespace::NoteData::set_duration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_duration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_skipBeforeCutScoring
// Il2CppName: get_skipBeforeCutScoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_skipBeforeCutScoring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_skipBeforeCutScoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_skipBeforeCutScoring
// Il2CppName: set_skipBeforeCutScoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(bool)>(&GlobalNamespace::NoteData::set_skipBeforeCutScoring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_skipBeforeCutScoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_skipAfterCutScoring
// Il2CppName: get_skipAfterCutScoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_skipAfterCutScoring)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_skipAfterCutScoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::set_skipAfterCutScoring
// Il2CppName: set_skipAfterCutScoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(bool)>(&GlobalNamespace::NoteData::set_skipAfterCutScoring)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "set_skipAfterCutScoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBombNoteData
// Il2CppName: CreateBombNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteData* (*)(float, int, GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::CreateBombNoteData)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "CreateBombNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::CreateBasicNoteData
// Il2CppName: CreateBasicNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteData* (*)(float, int, GlobalNamespace::NoteLineLayer, GlobalNamespace::ColorType, GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::NoteData::CreateBasicNoteData)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "ColorType")->byval_arg;
    static auto* cutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "CreateBasicNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time, lineIndex, noteLineLayer, colorType, cutDirection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetBeforeJumpNoteLineLayer
// Il2CppName: SetBeforeJumpNoteLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::NoteData::SetBeforeJumpNoteLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetBeforeJumpNoteLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetSkipBeforeCutScoring
// Il2CppName: SetSkipBeforeCutScoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(bool)>(&GlobalNamespace::NoteData::SetSkipBeforeCutScoring)> {
  static const MethodInfo* get() {
    static auto* applyBeforeCutScoring = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetSkipBeforeCutScoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{applyBeforeCutScoring});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetSkipAfterCutScoring
// Il2CppName: SetSkipAfterCutScoring
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(bool)>(&GlobalNamespace::NoteData::SetSkipAfterCutScoring)> {
  static const MethodInfo* get() {
    static auto* applyAfterCutScoring = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetSkipAfterCutScoring", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{applyAfterCutScoring});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteFlipToNote
// Il2CppName: SetNoteFlipToNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::NoteData::SetNoteFlipToNote)> {
  static const MethodInfo* get() {
    static auto* targetNote = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetNoteFlipToNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetNote});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ResetNoteFlip
// Il2CppName: ResetNoteFlip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::ResetNoteFlip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ResetNoteFlip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::SetNoteToAnyCutDirection
// Il2CppName: SetNoteToAnyCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::SetNoteToAnyCutDirection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "SetNoteToAnyCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::ChangeNoteCutDirection
// Il2CppName: ChangeNoteCutDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(GlobalNamespace::NoteCutDirection)>(&GlobalNamespace::NoteData::ChangeNoteCutDirection)> {
  static const MethodInfo* get() {
    static auto* newCutDirection = &::il2cpp_utils::GetClassFromName("", "NoteCutDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "ChangeNoteCutDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCutDirection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::TransformNoteAOrBToRandomType
// Il2CppName: TransformNoteAOrBToRandomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::TransformNoteAOrBToRandomType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "TransformNoteAOrBToRandomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::get_beatmapObjectType
// Il2CppName: get_beatmapObjectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectType (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::get_beatmapObjectType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "get_beatmapObjectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectData* (GlobalNamespace::NoteData::*)()>(&GlobalNamespace::NoteData::GetCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteData::Mirror
// Il2CppName: Mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteData::*)(int)>(&GlobalNamespace::NoteData::Mirror)> {
  static const MethodInfo* get() {
    static auto* lineCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteData*), "Mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineCount});
  }
};
