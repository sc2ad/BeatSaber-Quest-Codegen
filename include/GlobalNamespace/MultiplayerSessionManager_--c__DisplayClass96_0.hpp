// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MultiplayerSessionManager
#include "GlobalNamespace/MultiplayerSessionManager.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0*, "", "MultiplayerSessionManager/<>c__DisplayClass96_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerSessionManager/<>c__DisplayClass96_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class MultiplayerSessionManager::$$c__DisplayClass96_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String userId
    // Size: 0x8
    // Offset: 0x10
    ::StringW userId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return userId;
    }
    // Get instance field reference: public System.String userId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_userId();
    // public System.Void .ctor()
    // Offset: 0x1744B60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerSessionManager::$$c__DisplayClass96_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerSessionManager::$$c__DisplayClass96_0*, creationType>()));
    }
    // System.Boolean <GetPlayerByUserId>b__0(IConnectedPlayer player)
    // Offset: 0x1744FA8
    bool $GetPlayerByUserId$b__0(::GlobalNamespace::IConnectedPlayer* player);
  }; // MultiplayerSessionManager/<>c__DisplayClass96_0
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerSessionManager::$$c__DisplayClass96_0), 16 + sizeof(::StringW)> __GlobalNamespace_MultiplayerSessionManager_$$c__DisplayClass96_0SizeCheck;
  static_assert(sizeof(MultiplayerSessionManager::$$c__DisplayClass96_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::$GetPlayerByUserId$b__0
// Il2CppName: <GetPlayerByUserId>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::*)(::GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0::$GetPlayerByUserId$b__0)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass96_0*), "<GetPlayerByUserId>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
