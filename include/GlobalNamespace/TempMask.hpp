// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TempMask
  class TempMask;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TempMask);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TempMask*, "", "TempMask");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: TempMask
  // [TokenAttribute] Offset: FFFFFFFF
  class TempMask : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::TempMask::$MaskOnDuringDate$d__10
    class $MaskOnDuringDate$d__10;
    public:
    // public System.Int32 year
    // Size: 0x4
    // Offset: 0x18
    int year;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 month
    // Size: 0x4
    // Offset: 0x1C
    int month;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 day
    // Size: 0x4
    // Offset: 0x20
    int day;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: day and: dayOn
    char __padding2[0x4] = {};
    // public System.DateTime dayOn
    // Size: 0x8
    // Offset: 0x28
    ::System::DateTime dayOn;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // public UnityEngine.MeshRenderer myRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* myRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private System.DateTime myDate
    // Size: 0x8
    // Offset: 0x38
    ::System::DateTime myDate;
    // Field size check
    static_assert(sizeof(::System::DateTime) == 0x8);
    // private VRRig myRig
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 year
    [[deprecated("Use field access instead!")]] int& dyn_year();
    // Get instance field reference: public System.Int32 month
    [[deprecated("Use field access instead!")]] int& dyn_month();
    // Get instance field reference: public System.Int32 day
    [[deprecated("Use field access instead!")]] int& dyn_day();
    // Get instance field reference: public System.DateTime dayOn
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_dayOn();
    // Get instance field reference: public UnityEngine.MeshRenderer myRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_myRenderer();
    // Get instance field reference: private System.DateTime myDate
    [[deprecated("Use field access instead!")]] ::System::DateTime& dyn_myDate();
    // Get instance field reference: private VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // public System.Void .ctor()
    // Offset: 0xCF838C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TempMask* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TempMask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TempMask*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xCF819C
    void Awake();
    // private System.Void OnEnable()
    // Offset: 0xCF82BC
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xCF8358
    void OnDisable();
    // private System.Collections.IEnumerator MaskOnDuringDate()
    // Offset: 0xCF82E8
    ::System::Collections::IEnumerator* MaskOnDuringDate();
  }; // TempMask
  #pragma pack(pop)
  static check_size<sizeof(TempMask), 64 + sizeof(::GlobalNamespace::VRRig*)> __GlobalNamespace_TempMaskSizeCheck;
  static_assert(sizeof(TempMask) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TempMask::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TempMask::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TempMask::*)()>(&GlobalNamespace::TempMask::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TempMask*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TempMask::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TempMask::*)()>(&GlobalNamespace::TempMask::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TempMask*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TempMask::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TempMask::*)()>(&GlobalNamespace::TempMask::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TempMask*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TempMask::MaskOnDuringDate
// Il2CppName: MaskOnDuringDate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TempMask::*)()>(&GlobalNamespace::TempMask::MaskOnDuringDate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TempMask*), "MaskOnDuringDate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
