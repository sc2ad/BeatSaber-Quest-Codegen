// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BGNet.Core.ITimeProvider
#include "BGNet/Core/ITimeProvider.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UtcTimeProvider
  class UtcTimeProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UtcTimeProvider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UtcTimeProvider*, "", "UtcTimeProvider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: UtcTimeProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class UtcTimeProvider : public ::Il2CppObject/*, public ::BGNet::Core::ITimeProvider*/ {
    public:
    // Creating interface conversion operator: operator ::BGNet::Core::ITimeProvider
    operator ::BGNet::Core::ITimeProvider() noexcept {
      return *reinterpret_cast<::BGNet::Core::ITimeProvider*>(this);
    }
    // Creating interface conversion operator: i_ITimeProvider
    inline ::BGNet::Core::ITimeProvider* i_ITimeProvider() noexcept {
      return reinterpret_cast<::BGNet::Core::ITimeProvider*>(this);
    }
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11018A4
    // Get static field: static private readonly System.DateTime _epoch
    static ::System::DateTime _get__epoch();
    // Set static field: static private readonly System.DateTime _epoch
    static void _set__epoch(::System::DateTime value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11018B4
    // Get static field: static public readonly UtcTimeProvider instance
    static ::GlobalNamespace::UtcTimeProvider* _get_instance();
    // Set static field: static public readonly UtcTimeProvider instance
    static void _set_instance(::GlobalNamespace::UtcTimeProvider* value);
    // public System.Void .ctor()
    // Offset: 0x1A09668
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UtcTimeProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UtcTimeProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UtcTimeProvider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1A09670
    static void _cctor();
    // public System.Int64 GetTimeMs()
    // Offset: 0x1A09638
    int64_t GetTimeMs();
    // public System.Int64 GetTicks()
    // Offset: 0x19F862C
    int64_t GetTicks();
  }; // UtcTimeProvider
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UtcTimeProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::UtcTimeProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::UtcTimeProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UtcTimeProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UtcTimeProvider::GetTimeMs
// Il2CppName: GetTimeMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (GlobalNamespace::UtcTimeProvider::*)()>(&GlobalNamespace::UtcTimeProvider::GetTimeMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UtcTimeProvider*), "GetTimeMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UtcTimeProvider::GetTicks
// Il2CppName: GetTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (GlobalNamespace::UtcTimeProvider::*)()>(&GlobalNamespace::UtcTimeProvider::GetTicks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UtcTimeProvider*), "GetTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
