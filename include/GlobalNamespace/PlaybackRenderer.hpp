// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: PosesRecordingData
#include "GlobalNamespace/PosesRecordingData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlaybackRenderer
  class PlaybackRenderer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlaybackRenderer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlaybackRenderer*, "", "PlaybackRenderer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PlaybackRenderer
  // [TokenAttribute] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: 10D59CC
  class PlaybackRenderer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot
    class PlaybackScreenshot;
    public:
    // private System.Action texturesReadyEvent
    // Size: 0x8
    // Offset: 0x18
    ::System::Action* texturesReadyEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.Shader _clearBackgroundShader
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Shader* clearBackgroundShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private System.Boolean _isSetup
    // Size: 0x1
    // Offset: 0x28
    bool isSetup;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isSetup and: hmd
    char __padding2[0x7] = {};
    // private UnityEngine.Transform _hmd
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* hmd;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private PosesRecordingData/ExternalCameraCalibration _cameraCalibration
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration* cameraCalibration;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*) == 0x8);
    // private UnityEngine.GameObject _clipQuad
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* clipQuad;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Material _clipMaterial
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Material* clipMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private PlaybackRenderer/PlaybackScreenshot[] _screenshots
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> screenshots;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Action texturesReadyEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_texturesReadyEvent();
    // Get instance field reference: private UnityEngine.Shader _clearBackgroundShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn__clearBackgroundShader();
    // Get instance field reference: private System.Boolean _isSetup
    [[deprecated("Use field access instead!")]] bool& dyn__isSetup();
    // Get instance field reference: private UnityEngine.Transform _hmd
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__hmd();
    // Get instance field reference: private UnityEngine.Camera _camera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn__camera();
    // Get instance field reference: private PosesRecordingData/ExternalCameraCalibration _cameraCalibration
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*& dyn__cameraCalibration();
    // Get instance field reference: private UnityEngine.GameObject _clipQuad
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__clipQuad();
    // Get instance field reference: private UnityEngine.Material _clipMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__clipMaterial();
    // Get instance field reference: private PlaybackRenderer/PlaybackScreenshot[] _screenshots
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>& dyn__screenshots();
    // public PlaybackRenderer/PlaybackScreenshot[] get_screenshots()
    // Offset: 0x134651C
    ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> get_screenshots();
    // public System.Void add_texturesReadyEvent(System.Action value)
    // Offset: 0x13463D4
    void add_texturesReadyEvent(::System::Action* value);
    // public System.Void remove_texturesReadyEvent(System.Action value)
    // Offset: 0x1346478
    void remove_texturesReadyEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x134729C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlaybackRenderer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlaybackRenderer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlaybackRenderer*, creationType>()));
    }
    // public System.Void Setup(UnityEngine.Camera hmdCamera, UnityEngine.Camera camera, PosesRecordingData/ExternalCameraCalibration cameraCalibration, System.Int32 textureWidth, System.Int32 textureHeight, PlaybackRenderer/PlaybackScreenshot[] screenshots)
    // Offset: 0x1346524
    void Setup(::UnityEngine::Camera* hmdCamera, ::UnityEngine::Camera* camera, ::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration* cameraCalibration, int textureWidth, int textureHeight, ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> screenshots);
    // private System.Void CreateClipQuad()
    // Offset: 0x13466CC
    void CreateClipQuad();
    // private System.Void InitCamera(UnityEngine.Camera camera, PosesRecordingData/ExternalCameraCalibration cameraCalibration)
    // Offset: 0x13465B0
    void InitCamera(::UnityEngine::Camera* camera, ::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration* cameraCalibration);
    // private System.Void CreateTextures(System.Int32 width, System.Int32 height)
    // Offset: 0x1346938
    void CreateTextures(int width, int height);
    // private System.Single GetDistanceToHMD()
    // Offset: 0x1346A84
    float GetDistanceToHMD();
    // private System.Void OrientClipQuad()
    // Offset: 0x1346CA8
    void OrientClipQuad();
    // private System.Void RenderForeground(PlaybackRenderer/PlaybackScreenshot screenshot)
    // Offset: 0x1346EC8
    void RenderForeground(::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot* screenshot);
    // private System.Void RenderBackground(PlaybackRenderer/PlaybackScreenshot screenshot)
    // Offset: 0x1347090
    void RenderBackground(::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot* screenshot);
    // protected System.Void LateUpdate()
    // Offset: 0x13471E8
    void LateUpdate();
  }; // PlaybackRenderer
  #pragma pack(pop)
  static check_size<sizeof(PlaybackRenderer), 88 + sizeof(::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>)> __GlobalNamespace_PlaybackRendererSizeCheck;
  static_assert(sizeof(PlaybackRenderer) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::get_screenshots
// Il2CppName: get_screenshots
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::get_screenshots)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "get_screenshots", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::add_texturesReadyEvent
// Il2CppName: add_texturesReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(::System::Action*)>(&GlobalNamespace::PlaybackRenderer::add_texturesReadyEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "add_texturesReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::remove_texturesReadyEvent
// Il2CppName: remove_texturesReadyEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(::System::Action*)>(&GlobalNamespace::PlaybackRenderer::remove_texturesReadyEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "remove_texturesReadyEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(::UnityEngine::Camera*, ::UnityEngine::Camera*, ::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*, int, int, ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>)>(&GlobalNamespace::PlaybackRenderer::Setup)> {
  static const MethodInfo* get() {
    static auto* hmdCamera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraCalibration = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/ExternalCameraCalibration")->byval_arg;
    static auto* textureWidth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* textureHeight = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* screenshots = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "PlaybackRenderer/PlaybackScreenshot"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hmdCamera, camera, cameraCalibration, textureWidth, textureHeight, screenshots});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::CreateClipQuad
// Il2CppName: CreateClipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::CreateClipQuad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "CreateClipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::InitCamera
// Il2CppName: InitCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(::UnityEngine::Camera*, ::GlobalNamespace::PosesRecordingData::ExternalCameraCalibration*)>(&GlobalNamespace::PlaybackRenderer::InitCamera)> {
  static const MethodInfo* get() {
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Camera")->byval_arg;
    static auto* cameraCalibration = &::il2cpp_utils::GetClassFromName("", "PosesRecordingData/ExternalCameraCalibration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "InitCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{camera, cameraCalibration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::CreateTextures
// Il2CppName: CreateTextures
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(int, int)>(&GlobalNamespace::PlaybackRenderer::CreateTextures)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "CreateTextures", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::GetDistanceToHMD
// Il2CppName: GetDistanceToHMD
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::GetDistanceToHMD)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "GetDistanceToHMD", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::OrientClipQuad
// Il2CppName: OrientClipQuad
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::OrientClipQuad)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "OrientClipQuad", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::RenderForeground
// Il2CppName: RenderForeground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*)>(&GlobalNamespace::PlaybackRenderer::RenderForeground)> {
  static const MethodInfo* get() {
    static auto* screenshot = &::il2cpp_utils::GetClassFromName("", "PlaybackRenderer/PlaybackScreenshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "RenderForeground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenshot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::RenderBackground
// Il2CppName: RenderBackground
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)(::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*)>(&GlobalNamespace::PlaybackRenderer::RenderBackground)> {
  static const MethodInfo* get() {
    static auto* screenshot = &::il2cpp_utils::GetClassFromName("", "PlaybackRenderer/PlaybackScreenshot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "RenderBackground", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{screenshot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlaybackRenderer::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlaybackRenderer::*)()>(&GlobalNamespace::PlaybackRenderer::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlaybackRenderer*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
