// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IBeatmapLevelPackCollection
#include "GlobalNamespace/IBeatmapLevelPackCollection.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelPackCollection
  class BeatmapLevelPackCollection;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapLevelPackCollection);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelPackCollection*, "", "BeatmapLevelPackCollection");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelPackCollection
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelPackCollection : public ::Il2CppObject/*, public ::GlobalNamespace::IBeatmapLevelPackCollection*/ {
    public:
    public:
    // private IBeatmapLevelPack[] _beatmapLevelPacks
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> beatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapLevelPackCollection
    operator ::GlobalNamespace::IBeatmapLevelPackCollection() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelPackCollection*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapLevelPackCollection
    inline ::GlobalNamespace::IBeatmapLevelPackCollection* i_IBeatmapLevelPackCollection() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapLevelPackCollection*>(this);
    }
    // Creating conversion operator: operator ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>
    constexpr operator ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>() const noexcept {
      return beatmapLevelPacks;
    }
    // Get instance field reference: private IBeatmapLevelPack[] _beatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& dyn__beatmapLevelPacks();
    // public IBeatmapLevelPack[] get_beatmapLevelPacks()
    // Offset: 0x153C8F8
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> get_beatmapLevelPacks();
    // public System.Void .ctor(IBeatmapLevelPack[] beatmapLevelPacks)
    // Offset: 0x153C900
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelPackCollection* New_ctor(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> beatmapLevelPacks) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelPackCollection*, creationType>(beatmapLevelPacks)));
    }
  }; // BeatmapLevelPackCollection
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelPackCollection), 16 + sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>)> __GlobalNamespace_BeatmapLevelPackCollectionSizeCheck;
  static_assert(sizeof(BeatmapLevelPackCollection) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackCollection::get_beatmapLevelPacks
// Il2CppName: get_beatmapLevelPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> (GlobalNamespace::BeatmapLevelPackCollection::*)()>(&GlobalNamespace::BeatmapLevelPackCollection::get_beatmapLevelPacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackCollection*), "get_beatmapLevelPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackCollection::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
