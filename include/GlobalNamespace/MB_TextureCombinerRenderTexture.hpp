// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Color32
  struct Color32;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB_TexSet
  class MB_TexSet;
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Forward declaring type: MB3_TextureCombinerNonTextureProperties
  class MB3_TextureCombinerNonTextureProperties;
  // Forward declaring type: MB3_TextureCombiner
  class MB3_TextureCombiner;
  // Forward declaring type: MeshBakerMaterialTexture
  class MeshBakerMaterialTexture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB_TextureCombinerRenderTexture
  class MB_TextureCombinerRenderTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB_TextureCombinerRenderTexture);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB_TextureCombinerRenderTexture*, "", "MB_TextureCombinerRenderTexture");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: MB_TextureCombinerRenderTexture
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_TextureCombinerRenderTexture : public ::Il2CppObject {
    public:
    public:
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x10
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // Padding between fields: LOG_LEVEL and: mat
    char __padding0[0x4] = {};
    // private UnityEngine.Material mat
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* mat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.RenderTexture _destinationTexture
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RenderTexture* destinationTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::RenderTexture*) == 0x8);
    // private UnityEngine.Camera myCamera
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Camera* myCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Int32 _padding
    // Size: 0x4
    // Offset: 0x30
    int padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isNormalMap
    // Size: 0x1
    // Offset: 0x34
    bool isNormalMap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _fixOutOfBoundsUVs
    // Size: 0x1
    // Offset: 0x35
    bool fixOutOfBoundsUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _doRenderAtlas
    // Size: 0x1
    // Offset: 0x36
    bool doRenderAtlas;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doRenderAtlas and: rs
    char __padding7[0x1] = {};
    // private UnityEngine.Rect[] rs
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Rect> rs;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rect>) == 0x8);
    // private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB_TexSet> textureSets
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>* textureSets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>*) == 0x8);
    // private System.Int32 indexOfTexSetToRender
    // Size: 0x4
    // Offset: 0x48
    int indexOfTexSetToRender;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: indexOfTexSetToRender and: texPropertyName
    char __padding10[0x4] = {};
    // private DigitalOpus.MB.Core.ShaderTextureProperty _texPropertyName
    // Size: 0x8
    // Offset: 0x50
    ::DigitalOpus::MB::Core::ShaderTextureProperty* texPropertyName;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::ShaderTextureProperty*) == 0x8);
    // private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties _resultMaterialTextureBlender
    // Size: 0x8
    // Offset: 0x58
    ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties* resultMaterialTextureBlender;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*) == 0x8);
    // private UnityEngine.Texture2D targTex
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Texture2D* targTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    public:
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: private UnityEngine.Material mat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_mat();
    // Get instance field reference: private UnityEngine.RenderTexture _destinationTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::RenderTexture*& dyn__destinationTexture();
    // Get instance field reference: private UnityEngine.Camera myCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_myCamera();
    // Get instance field reference: private System.Int32 _padding
    [[deprecated("Use field access instead!")]] int& dyn__padding();
    // Get instance field reference: private System.Boolean _isNormalMap
    [[deprecated("Use field access instead!")]] bool& dyn__isNormalMap();
    // Get instance field reference: private System.Boolean _fixOutOfBoundsUVs
    [[deprecated("Use field access instead!")]] bool& dyn__fixOutOfBoundsUVs();
    // Get instance field reference: private System.Boolean _doRenderAtlas
    [[deprecated("Use field access instead!")]] bool& dyn__doRenderAtlas();
    // Get instance field reference: private UnityEngine.Rect[] rs
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rect>& dyn_rs();
    // Get instance field reference: private System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB_TexSet> textureSets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>*& dyn_textureSets();
    // Get instance field reference: private System.Int32 indexOfTexSetToRender
    [[deprecated("Use field access instead!")]] int& dyn_indexOfTexSetToRender();
    // Get instance field reference: private DigitalOpus.MB.Core.ShaderTextureProperty _texPropertyName
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::ShaderTextureProperty*& dyn__texPropertyName();
    // Get instance field reference: private DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties _resultMaterialTextureBlender
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*& dyn__resultMaterialTextureBlender();
    // Get instance field reference: private UnityEngine.Texture2D targTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_targTex();
    // public System.Void .ctor()
    // Offset: 0x1B66DB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_TextureCombinerRenderTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB_TextureCombinerRenderTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_TextureCombinerRenderTexture*, creationType>()));
    }
    // public UnityEngine.Texture2D DoRenderAtlas(UnityEngine.GameObject gameObject, System.Int32 width, System.Int32 height, System.Int32 padding, UnityEngine.Rect[] rss, System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB_TexSet> textureSetss, System.Int32 indexOfTexSetToRenders, DigitalOpus.MB.Core.ShaderTextureProperty texPropertyname, DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender, System.Boolean isNormalMap, System.Boolean fixOutOfBoundsUVs, System.Boolean considerNonTextureProperties, DigitalOpus.MB.Core.MB3_TextureCombiner texCombiner, DigitalOpus.MB.Core.MB2_LogLevel LOG_LEV)
    // Offset: 0x1B6451C
    ::UnityEngine::Texture2D* DoRenderAtlas(::UnityEngine::GameObject* gameObject, int width, int height, int padding, ::ArrayW<::UnityEngine::Rect> rss, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>* textureSetss, int indexOfTexSetToRenders, ::DigitalOpus::MB::Core::ShaderTextureProperty* texPropertyname, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties* resultMaterialTextureBlender, bool isNormalMap, bool fixOutOfBoundsUVs, bool considerNonTextureProperties, ::DigitalOpus::MB::Core::MB3_TextureCombiner* texCombiner, ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEV);
    // public System.Void OnRenderObject()
    // Offset: 0x1B64B2C
    void OnRenderObject();
    // static public System.Void ConvertRenderTextureToTexture2D(UnityEngine.RenderTexture _destinationTexture, System.Boolean yIsFlipped, System.Boolean doLinearColorSpace, DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL, UnityEngine.Texture2D tempTexture)
    // Offset: 0x1B665A4
    static void ConvertRenderTextureToTexture2D(::UnityEngine::RenderTexture* _destinationTexture, bool yIsFlipped, bool doLinearColorSpace, ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL, ::UnityEngine::Texture2D* tempTexture);
    // private UnityEngine.Color32 ConvertNormalFormatFromUnity_ToStandard(UnityEngine.Color32 c)
    // Offset: 0x1B66C7C
    ::UnityEngine::Color32 ConvertNormalFormatFromUnity_ToStandard(::UnityEngine::Color32 c);
    // static public System.Boolean YisFlipped(DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL)
    // Offset: 0x1B654F0
    static bool YisFlipped(::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL);
    // private System.Void CopyScaledAndTiledToAtlas(DigitalOpus.MB.Core.MB_TexSet texSet, DigitalOpus.MB.Core.MeshBakerMaterialTexture source, UnityEngine.Vector2 obUVoffset, UnityEngine.Vector2 obUVscale, UnityEngine.Rect rec, DigitalOpus.MB.Core.ShaderTextureProperty texturePropertyName, DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties resultMatTexBlender, System.Boolean yIsFlipped)
    // Offset: 0x1B655E8
    void CopyScaledAndTiledToAtlas(::DigitalOpus::MB::Core::MB_TexSet* texSet, ::DigitalOpus::MB::Core::MeshBakerMaterialTexture* source, ::UnityEngine::Vector2 obUVoffset, ::UnityEngine::Vector2 obUVscale, ::UnityEngine::Rect rec, ::DigitalOpus::MB::Core::ShaderTextureProperty* texturePropertyName, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties* resultMatTexBlender, bool yIsFlipped);
    // static private System.Void _printTexture(UnityEngine.Texture2D t)
    // Offset: 0x1B66948
    static void _printTexture(::UnityEngine::Texture2D* t);
  }; // MB_TextureCombinerRenderTexture
  #pragma pack(pop)
  static check_size<sizeof(MB_TextureCombinerRenderTexture), 96 + sizeof(::UnityEngine::Texture2D*)> __GlobalNamespace_MB_TextureCombinerRenderTextureSizeCheck;
  static_assert(sizeof(MB_TextureCombinerRenderTexture) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::DoRenderAtlas
// Il2CppName: DoRenderAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (GlobalNamespace::MB_TextureCombinerRenderTexture::*)(::UnityEngine::GameObject*, int, int, int, ::ArrayW<::UnityEngine::Rect>, ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>*, int, ::DigitalOpus::MB::Core::ShaderTextureProperty*, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*, bool, bool, bool, ::DigitalOpus::MB::Core::MB3_TextureCombiner*, ::DigitalOpus::MB::Core::MB2_LogLevel)>(&GlobalNamespace::MB_TextureCombinerRenderTexture::DoRenderAtlas)> {
  static const MethodInfo* get() {
    static auto* gameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* padding = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rss = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Rect"), 1)->byval_arg;
    static auto* textureSetss = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TexSet")})->byval_arg;
    static auto* indexOfTexSetToRenders = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* texPropertyname = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    static auto* resultMaterialTextureBlender = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties")->byval_arg;
    static auto* isNormalMap = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fixOutOfBoundsUVs = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* considerNonTextureProperties = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* texCombiner = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner")->byval_arg;
    static auto* LOG_LEV = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "DoRenderAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameObject, width, height, padding, rss, textureSetss, indexOfTexSetToRenders, texPropertyname, resultMaterialTextureBlender, isNormalMap, fixOutOfBoundsUVs, considerNonTextureProperties, texCombiner, LOG_LEV});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::OnRenderObject
// Il2CppName: OnRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB_TextureCombinerRenderTexture::*)()>(&GlobalNamespace::MB_TextureCombinerRenderTexture::OnRenderObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "OnRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::ConvertRenderTextureToTexture2D
// Il2CppName: ConvertRenderTextureToTexture2D
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::RenderTexture*, bool, bool, ::DigitalOpus::MB::Core::MB2_LogLevel, ::UnityEngine::Texture2D*)>(&GlobalNamespace::MB_TextureCombinerRenderTexture::ConvertRenderTextureToTexture2D)> {
  static const MethodInfo* get() {
    static auto* _destinationTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "RenderTexture")->byval_arg;
    static auto* yIsFlipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* doLinearColorSpace = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* LOG_LEVEL = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    static auto* tempTexture = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "ConvertRenderTextureToTexture2D", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_destinationTexture, yIsFlipped, doLinearColorSpace, LOG_LEVEL, tempTexture});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::ConvertNormalFormatFromUnity_ToStandard
// Il2CppName: ConvertNormalFormatFromUnity_ToStandard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color32 (GlobalNamespace::MB_TextureCombinerRenderTexture::*)(::UnityEngine::Color32)>(&GlobalNamespace::MB_TextureCombinerRenderTexture::ConvertNormalFormatFromUnity_ToStandard)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "ConvertNormalFormatFromUnity_ToStandard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::YisFlipped
// Il2CppName: YisFlipped
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::DigitalOpus::MB::Core::MB2_LogLevel)>(&GlobalNamespace::MB_TextureCombinerRenderTexture::YisFlipped)> {
  static const MethodInfo* get() {
    static auto* LOG_LEVEL = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_LogLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "YisFlipped", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{LOG_LEVEL});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::CopyScaledAndTiledToAtlas
// Il2CppName: CopyScaledAndTiledToAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB_TextureCombinerRenderTexture::*)(::DigitalOpus::MB::Core::MB_TexSet*, ::DigitalOpus::MB::Core::MeshBakerMaterialTexture*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, ::UnityEngine::Rect, ::DigitalOpus::MB::Core::ShaderTextureProperty*, ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*, bool)>(&GlobalNamespace::MB_TextureCombinerRenderTexture::CopyScaledAndTiledToAtlas)> {
  static const MethodInfo* get() {
    static auto* texSet = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB_TexSet")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MeshBakerMaterialTexture")->byval_arg;
    static auto* obUVoffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* obUVscale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* rec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Rect")->byval_arg;
    static auto* texturePropertyName = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "ShaderTextureProperty")->byval_arg;
    static auto* resultMatTexBlender = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombinerNonTextureProperties")->byval_arg;
    static auto* yIsFlipped = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "CopyScaledAndTiledToAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{texSet, source, obUVoffset, obUVscale, rec, texturePropertyName, resultMatTexBlender, yIsFlipped});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureCombinerRenderTexture::_printTexture
// Il2CppName: _printTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::Texture2D*)>(&GlobalNamespace::MB_TextureCombinerRenderTexture::_printTexture)> {
  static const MethodInfo* get() {
    static auto* t = &::il2cpp_utils::GetClassFromName("UnityEngine", "Texture2D")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureCombinerRenderTexture*), "_printTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{t});
  }
};
