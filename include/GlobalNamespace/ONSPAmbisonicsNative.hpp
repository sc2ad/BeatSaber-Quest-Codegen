// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ONSPAmbisonicsNative
  class ONSPAmbisonicsNative;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ONSPAmbisonicsNative);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ONSPAmbisonicsNative*, "", "ONSPAmbisonicsNative");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: ONSPAmbisonicsNative
  // [TokenAttribute] Offset: FFFFFFFF
  class ONSPAmbisonicsNative : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus
    struct ovrAmbisonicsNativeStatus;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus
    // [TokenAttribute] Offset: FFFFFFFF
    struct ovrAmbisonicsNativeStatus/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ovrAmbisonicsNativeStatus
      constexpr ovrAmbisonicsNativeStatus(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus Uninitialized
      static constexpr const int Uninitialized = -1;
      // Get static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus Uninitialized
      static ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus _get_Uninitialized();
      // Set static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus Uninitialized
      static void _set_Uninitialized(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus value);
      // static field const value: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus NotEnabled
      static constexpr const int NotEnabled = 0;
      // Get static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus NotEnabled
      static ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus _get_NotEnabled();
      // Set static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus NotEnabled
      static void _set_NotEnabled(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus value);
      // static field const value: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus Success
      static constexpr const int Success = 1;
      // Get static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus Success
      static ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus _get_Success();
      // Set static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus Success
      static void _set_Success(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus value);
      // static field const value: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus StreamError
      static constexpr const int StreamError = 2;
      // Get static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus StreamError
      static ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus _get_StreamError();
      // Set static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus StreamError
      static void _set_StreamError(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus value);
      // static field const value: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus ProcessError
      static constexpr const int ProcessError = 3;
      // Get static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus ProcessError
      static ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus _get_ProcessError();
      // Set static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus ProcessError
      static void _set_ProcessError(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus value);
      // static field const value: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus MaxStatValue
      static constexpr const int MaxStatValue = 4;
      // Get static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus MaxStatValue
      static ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus _get_MaxStatValue();
      // Set static field: static public ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus MaxStatValue
      static void _set_MaxStatValue(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus
    #pragma pack(pop)
    static check_size<sizeof(ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus), 0 + sizeof(int)> __GlobalNamespace_ONSPAmbisonicsNative_ovrAmbisonicsNativeStatusSizeCheck;
    static_assert(sizeof(ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus) == 0x4);
    public:
    // private UnityEngine.AudioSource source
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioSource* source;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus currentStatus
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus currentStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus) == 0x4);
    // private System.Boolean useVirtualSpeakers
    // Size: 0x1
    // Offset: 0x24
    bool useVirtualSpeakers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private System.Int32 numFOAChannels
    static int _get_numFOAChannels();
    // Set static field: static private System.Int32 numFOAChannels
    static void _set_numFOAChannels(int value);
    // Get static field: static private System.Int32 paramVSpeakerMode
    static int _get_paramVSpeakerMode();
    // Set static field: static private System.Int32 paramVSpeakerMode
    static void _set_paramVSpeakerMode(int value);
    // Get static field: static private System.Int32 paramAmbiStat
    static int _get_paramAmbiStat();
    // Set static field: static private System.Int32 paramAmbiStat
    static void _set_paramAmbiStat(int value);
    // Get instance field reference: private UnityEngine.AudioSource source
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_source();
    // Get instance field reference: private ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus currentStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus& dyn_currentStatus();
    // Get instance field reference: private System.Boolean useVirtualSpeakers
    [[deprecated("Use field access instead!")]] bool& dyn_useVirtualSpeakers();
    // public System.Boolean get_UseVirtualSpeakers()
    // Offset: 0x137D230
    bool get_UseVirtualSpeakers();
    // public System.Void set_UseVirtualSpeakers(System.Boolean value)
    // Offset: 0x137D238
    void set_UseVirtualSpeakers(bool value);
    // public System.Void .ctor()
    // Offset: 0x137D6C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ONSPAmbisonicsNative* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ONSPAmbisonicsNative::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ONSPAmbisonicsNative*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x137D6D8
    static void _cctor();
    // private System.Void OnEnable()
    // Offset: 0x137D244
    void OnEnable();
    // private System.Void Update()
    // Offset: 0x137D478
    void Update();
  }; // ONSPAmbisonicsNative
  #pragma pack(pop)
  static check_size<sizeof(ONSPAmbisonicsNative), 36 + sizeof(bool)> __GlobalNamespace_ONSPAmbisonicsNativeSizeCheck;
  static_assert(sizeof(ONSPAmbisonicsNative) == 0x25);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ONSPAmbisonicsNative::ovrAmbisonicsNativeStatus, "", "ONSPAmbisonicsNative/ovrAmbisonicsNativeStatus");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ONSPAmbisonicsNative::get_UseVirtualSpeakers
// Il2CppName: get_UseVirtualSpeakers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ONSPAmbisonicsNative::*)()>(&GlobalNamespace::ONSPAmbisonicsNative::get_UseVirtualSpeakers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAmbisonicsNative*), "get_UseVirtualSpeakers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAmbisonicsNative::set_UseVirtualSpeakers
// Il2CppName: set_UseVirtualSpeakers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAmbisonicsNative::*)(bool)>(&GlobalNamespace::ONSPAmbisonicsNative::set_UseVirtualSpeakers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAmbisonicsNative*), "set_UseVirtualSpeakers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAmbisonicsNative::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ONSPAmbisonicsNative::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ONSPAmbisonicsNative::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAmbisonicsNative*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAmbisonicsNative::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAmbisonicsNative::*)()>(&GlobalNamespace::ONSPAmbisonicsNative::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAmbisonicsNative*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAmbisonicsNative::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAmbisonicsNative::*)()>(&GlobalNamespace::ONSPAmbisonicsNative::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAmbisonicsNative*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
