// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/UnityEngine.EmitParams
#include "UnityEngine/ParticleSystem_EmitParams.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BombExplosionEffect
  class BombExplosionEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BombExplosionEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BombExplosionEffect*, "", "BombExplosionEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14F
  #pragma pack(push, 1)
  // Autogenerated type: BombExplosionEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class BombExplosionEffect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.ParticleSystem _debrisPS
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::ParticleSystem* debrisPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem _explosionPS
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* explosionPS;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private System.Int32 _debrisCount
    // Size: 0x4
    // Offset: 0x28
    int debrisCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _explosionParticlesCount
    // Size: 0x4
    // Offset: 0x2C
    int explosionParticlesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
    // Size: 0x8F
    // Offset: 0x30
    ::UnityEngine::ParticleSystem::EmitParams emitParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmitParams) == 0x8F);
    // Padding between fields: emitParams and: explosionPSEmitParams
    char __padding4[0x1] = {};
    // private UnityEngine.ParticleSystem/UnityEngine.EmitParams _explosionPSEmitParams
    // Size: 0x8F
    // Offset: 0xC0
    ::UnityEngine::ParticleSystem::EmitParams explosionPSEmitParams;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem::EmitParams) == 0x8F);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.ParticleSystem _debrisPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn__debrisPS();
    // Get instance field reference: private UnityEngine.ParticleSystem _explosionPS
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn__explosionPS();
    // Get instance field reference: private System.Int32 _debrisCount
    [[deprecated("Use field access instead!")]] int& dyn__debrisCount();
    // Get instance field reference: private System.Int32 _explosionParticlesCount
    [[deprecated("Use field access instead!")]] int& dyn__explosionParticlesCount();
    // Get instance field reference: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _emitParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& dyn__emitParams();
    // Get instance field reference: private UnityEngine.ParticleSystem/UnityEngine.EmitParams _explosionPSEmitParams
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem::EmitParams& dyn__explosionPSEmitParams();
    // public System.Void .ctor()
    // Offset: 0x1351DCC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BombExplosionEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BombExplosionEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BombExplosionEffect*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1351CCC
    void Awake();
    // public System.Void SpawnExplosion(UnityEngine.Vector3 pos)
    // Offset: 0x1351D04
    void SpawnExplosion(::UnityEngine::Vector3 pos);
  }; // BombExplosionEffect
  #pragma pack(pop)
  static check_size<sizeof(BombExplosionEffect), 192 + sizeof(::UnityEngine::ParticleSystem::EmitParams)> __GlobalNamespace_BombExplosionEffectSizeCheck;
  static_assert(sizeof(BombExplosionEffect) == 0x14F);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BombExplosionEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BombExplosionEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BombExplosionEffect::*)()>(&GlobalNamespace::BombExplosionEffect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BombExplosionEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BombExplosionEffect::SpawnExplosion
// Il2CppName: SpawnExplosion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BombExplosionEffect::*)(::UnityEngine::Vector3)>(&GlobalNamespace::BombExplosionEffect::SpawnExplosion)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BombExplosionEffect*), "SpawnExplosion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos});
  }
};
