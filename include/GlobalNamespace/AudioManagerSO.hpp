// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Audio
namespace UnityEngine::Audio {
  // Forward declaring type: AudioMixer
  class AudioMixer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: AudioManagerSO
  // [TokenAttribute] Offset: FFFFFFFF
  class AudioManagerSO : public GlobalNamespace::PersistentScriptableObject {
    public:
    // private UnityEngine.Audio.AudioMixer _audioMixer
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Audio::AudioMixer* audioMixer;
    // Field size check
    static_assert(sizeof(UnityEngine::Audio::AudioMixer*) == 0x8);
    // private System.Single _spatializerPluginLatency
    // Size: 0x4
    // Offset: 0x20
    float spatializerPluginLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _spatializerSfxVolumeOffset
    // Size: 0x4
    // Offset: 0x24
    float spatializerSfxVolumeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _musicVolumeOffset
    // Size: 0x4
    // Offset: 0x28
    float musicVolumeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _sfxVolumeOffset
    // Size: 0x4
    // Offset: 0x2C
    float sfxVolumeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _sfxVolume
    // Size: 0x4
    // Offset: 0x30
    float sfxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _sfxEnabled
    // Size: 0x1
    // Offset: 0x34
    bool sfxEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: AudioManagerSO
    AudioManagerSO(UnityEngine::Audio::AudioMixer* audioMixer_ = {}, float spatializerPluginLatency_ = {}, float spatializerSfxVolumeOffset_ = {}, float musicVolumeOffset_ = {}, float sfxVolumeOffset_ = {}, float sfxVolume_ = {}, bool sfxEnabled_ = {}) noexcept : audioMixer{audioMixer_}, spatializerPluginLatency{spatializerPluginLatency_}, spatializerSfxVolumeOffset{spatializerSfxVolumeOffset_}, musicVolumeOffset{musicVolumeOffset_}, sfxVolumeOffset{sfxVolumeOffset_}, sfxVolume{sfxVolume_}, sfxEnabled{sfxEnabled_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single kDefaultMusicVolume
    static constexpr const float kDefaultMusicVolume = -4;
    // Get static field: static public System.Single kDefaultMusicVolume
    static float _get_kDefaultMusicVolume();
    // Set static field: static public System.Single kDefaultMusicVolume
    static void _set_kDefaultMusicVolume(float value);
    // static field const value: static private System.String kMsHrtfSpatializerPluginName
    static constexpr const char* kMsHrtfSpatializerPluginName = "MS HRTF Spatializer";
    // Get static field: static private System.String kMsHrtfSpatializerPluginName
    static ::Il2CppString* _get_kMsHrtfSpatializerPluginName();
    // Set static field: static private System.String kMsHrtfSpatializerPluginName
    static void _set_kMsHrtfSpatializerPluginName(::Il2CppString* value);
    // static field const value: static private System.String kSfxVolume
    static constexpr const char* kSfxVolume = "SFXVolume";
    // Get static field: static private System.String kSfxVolume
    static ::Il2CppString* _get_kSfxVolume();
    // Set static field: static private System.String kSfxVolume
    static void _set_kSfxVolume(::Il2CppString* value);
    // static field const value: static private System.String kMainVolume
    static constexpr const char* kMainVolume = "MainVolume";
    // Get static field: static private System.String kMainVolume
    static ::Il2CppString* _get_kMainVolume();
    // Set static field: static private System.String kMainVolume
    static void _set_kMainVolume(::Il2CppString* value);
    // static field const value: static private System.String kMusicVolume
    static constexpr const char* kMusicVolume = "MusicVolume";
    // Get static field: static private System.String kMusicVolume
    static ::Il2CppString* _get_kMusicVolume();
    // Set static field: static private System.String kMusicVolume
    static void _set_kMusicVolume(::Il2CppString* value);
    // static field const value: static private System.String kMusicPitch
    static constexpr const char* kMusicPitch = "MusicPitch";
    // Get static field: static private System.String kMusicPitch
    static ::Il2CppString* _get_kMusicPitch();
    // Set static field: static private System.String kMusicPitch
    static void _set_kMusicPitch(::Il2CppString* value);
    // static field const value: static private System.String kMusicPitchShifterWet
    static constexpr const char* kMusicPitchShifterWet = "MusicPitchShifterWet";
    // Get static field: static private System.String kMusicPitchShifterWet
    static ::Il2CppString* _get_kMusicPitchShifterWet();
    // Set static field: static private System.String kMusicPitchShifterWet
    static void _set_kMusicPitchShifterWet(::Il2CppString* value);
    // Get instance field reference: private UnityEngine.Audio.AudioMixer _audioMixer
    UnityEngine::Audio::AudioMixer*& dyn__audioMixer();
    // Get instance field reference: private System.Single _spatializerPluginLatency
    float& dyn__spatializerPluginLatency();
    // Get instance field reference: private System.Single _spatializerSfxVolumeOffset
    float& dyn__spatializerSfxVolumeOffset();
    // Get instance field reference: private System.Single _musicVolumeOffset
    float& dyn__musicVolumeOffset();
    // Get instance field reference: private System.Single _sfxVolumeOffset
    float& dyn__sfxVolumeOffset();
    // Get instance field reference: private System.Single _sfxVolume
    float& dyn__sfxVolume();
    // Get instance field reference: private System.Boolean _sfxEnabled
    bool& dyn__sfxEnabled();
    // public System.Single get_sfxLatency()
    // Offset: 0x1247DF8
    float get_sfxLatency();
    // public System.Void Init()
    // Offset: 0x1247E60
    void Init();
    // public System.Void set_mainVolume(System.Single value)
    // Offset: 0x1247F04
    void set_mainVolume(float value);
    // public System.Void set_musicVolume(System.Single value)
    // Offset: 0x1247F70
    void set_musicVolume(float value);
    // public System.Void set_sfxVolume(System.Single value)
    // Offset: 0x1247FE0
    void set_sfxVolume(float value);
    // public System.Boolean get_sfxEnabled()
    // Offset: 0x124806C
    bool get_sfxEnabled();
    // public System.Void set_sfxEnabled(System.Boolean value)
    // Offset: 0x1248074
    void set_sfxEnabled(bool value);
    // public System.Void set_musicPitch(System.Single value)
    // Offset: 0x1248094
    void set_musicPitch(float value);
    // public System.Void .ctor()
    // Offset: 0x1248164
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioManagerSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioManagerSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioManagerSO*, creationType>()));
    }
  }; // AudioManagerSO
  #pragma pack(pop)
  static check_size<sizeof(AudioManagerSO), 52 + sizeof(bool)> __GlobalNamespace_AudioManagerSOSizeCheck;
  static_assert(sizeof(AudioManagerSO) == 0x35);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AudioManagerSO*, "", "AudioManagerSO");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::get_sfxLatency
// Il2CppName: get_sfxLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::AudioManagerSO::*)()>(&GlobalNamespace::AudioManagerSO::get_sfxLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "get_sfxLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AudioManagerSO::*)()>(&GlobalNamespace::AudioManagerSO::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::set_mainVolume
// Il2CppName: set_mainVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AudioManagerSO::*)(float)>(&GlobalNamespace::AudioManagerSO::set_mainVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "set_mainVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::set_musicVolume
// Il2CppName: set_musicVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AudioManagerSO::*)(float)>(&GlobalNamespace::AudioManagerSO::set_musicVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "set_musicVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::set_sfxVolume
// Il2CppName: set_sfxVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AudioManagerSO::*)(float)>(&GlobalNamespace::AudioManagerSO::set_sfxVolume)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "set_sfxVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::get_sfxEnabled
// Il2CppName: get_sfxEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::AudioManagerSO::*)()>(&GlobalNamespace::AudioManagerSO::get_sfxEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "get_sfxEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::set_sfxEnabled
// Il2CppName: set_sfxEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AudioManagerSO::*)(bool)>(&GlobalNamespace::AudioManagerSO::set_sfxEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "set_sfxEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::set_musicPitch
// Il2CppName: set_musicPitch
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AudioManagerSO::*)(float)>(&GlobalNamespace::AudioManagerSO::set_musicPitch)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AudioManagerSO*), "set_musicPitch", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AudioManagerSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
