// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SliderInteractionEffect
#include "GlobalNamespace/SliderInteractionEffect.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: Saber
  class Saber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderParticleInteractionEffect
  class SliderParticleInteractionEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderParticleInteractionEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderParticleInteractionEffect*, "", "SliderParticleInteractionEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: SliderParticleInteractionEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderParticleInteractionEffect : public ::GlobalNamespace::SliderInteractionEffect {
    public:
    public:
    // private UnityEngine.ParticleSystem[] _particleSystems
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::ParticleSystem*> particleSystems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::ParticleSystem*>) == 0x8);
    // [InjectAttribute] Offset: 0x10DEB88
    // private readonly ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorManager*) == 0x8);
    // [InjectAttribute] Offset: 0x10DEB98
    // private readonly SaberManager _saberManager
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SaberManager* saberManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaberManager*) == 0x8);
    // private UnityEngine.Color _startColor
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Color startColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private Saber _saber
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::Saber* saber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Saber*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.ParticleSystem[] _particleSystems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::ParticleSystem*>& dyn__particleSystems();
    // Get instance field reference: private readonly ColorManager _colorManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& dyn__colorManager();
    // Get instance field reference: private readonly SaberManager _saberManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& dyn__saberManager();
    // Get instance field reference: private UnityEngine.Color _startColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__startColor();
    // Get instance field reference: private Saber _saber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Saber*& dyn__saber();
    // protected System.Void Update()
    // Offset: 0x13E9AD0
    void Update();
    // private System.Void SetPSStartColor(UnityEngine.Color color)
    // Offset: 0x13E99F0
    void SetPSStartColor(::UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x13E9CA8
    // Implemented from: SliderInteractionEffect
    // Base method: System.Void SliderInteractionEffect::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderParticleInteractionEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderParticleInteractionEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderParticleInteractionEffect*, creationType>()));
    }
    // protected override System.Void Start()
    // Offset: 0x13E995C
    // Implemented from: SliderInteractionEffect
    // Base method: System.Void SliderInteractionEffect::Start()
    void Start();
    // protected override System.Void StartEffect(System.Single saberInteractionParam)
    // Offset: 0x13E9B38
    // Implemented from: SliderInteractionEffect
    // Base method: System.Void SliderInteractionEffect::StartEffect(System.Single saberInteractionParam)
    void StartEffect(float saberInteractionParam);
    // protected override System.Void EndEffect()
    // Offset: 0x13E9C08
    // Implemented from: SliderInteractionEffect
    // Base method: System.Void SliderInteractionEffect::EndEffect()
    void EndEffect();
  }; // SliderParticleInteractionEffect
  #pragma pack(pop)
  static check_size<sizeof(SliderParticleInteractionEffect), 72 + sizeof(::GlobalNamespace::Saber*)> __GlobalNamespace_SliderParticleInteractionEffectSizeCheck;
  static_assert(sizeof(SliderParticleInteractionEffect) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderParticleInteractionEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderParticleInteractionEffect::*)()>(&GlobalNamespace::SliderParticleInteractionEffect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderParticleInteractionEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderParticleInteractionEffect::SetPSStartColor
// Il2CppName: SetPSStartColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderParticleInteractionEffect::*)(::UnityEngine::Color)>(&GlobalNamespace::SliderParticleInteractionEffect::SetPSStartColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderParticleInteractionEffect*), "SetPSStartColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderParticleInteractionEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderParticleInteractionEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderParticleInteractionEffect::*)()>(&GlobalNamespace::SliderParticleInteractionEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderParticleInteractionEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderParticleInteractionEffect::StartEffect
// Il2CppName: StartEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderParticleInteractionEffect::*)(float)>(&GlobalNamespace::SliderParticleInteractionEffect::StartEffect)> {
  static const MethodInfo* get() {
    static auto* saberInteractionParam = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderParticleInteractionEffect*), "StartEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saberInteractionParam});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderParticleInteractionEffect::EndEffect
// Il2CppName: EndEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderParticleInteractionEffect::*)()>(&GlobalNamespace::SliderParticleInteractionEffect::EndEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderParticleInteractionEffect*), "EndEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
