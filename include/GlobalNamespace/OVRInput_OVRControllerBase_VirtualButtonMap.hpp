// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: OVRInput/OVRControllerBase
#include "GlobalNamespace/OVRInput_OVRControllerBase.hpp"
// Including type: OVRInput/RawButton
#include "GlobalNamespace/OVRInput_RawButton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x94
  #pragma pack(push, 1)
  // Autogenerated type: OVRInput/OVRControllerBase/VirtualButtonMap
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRInput::OVRControllerBase::VirtualButtonMap : public ::Il2CppObject {
    public:
    // public OVRInput/RawButton None
    // Size: 0x4
    // Offset: 0x10
    GlobalNamespace::OVRInput::RawButton None;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton One
    // Size: 0x4
    // Offset: 0x14
    GlobalNamespace::OVRInput::RawButton One;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Two
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::OVRInput::RawButton Two;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Three
    // Size: 0x4
    // Offset: 0x1C
    GlobalNamespace::OVRInput::RawButton Three;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Four
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::OVRInput::RawButton Four;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Start
    // Size: 0x4
    // Offset: 0x24
    GlobalNamespace::OVRInput::RawButton Start;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Back
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::OVRInput::RawButton Back;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryShoulder
    // Size: 0x4
    // Offset: 0x2C
    GlobalNamespace::OVRInput::RawButton PrimaryShoulder;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryIndexTrigger
    // Size: 0x4
    // Offset: 0x30
    GlobalNamespace::OVRInput::RawButton PrimaryIndexTrigger;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryHandTrigger
    // Size: 0x4
    // Offset: 0x34
    GlobalNamespace::OVRInput::RawButton PrimaryHandTrigger;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryThumbstick
    // Size: 0x4
    // Offset: 0x38
    GlobalNamespace::OVRInput::RawButton PrimaryThumbstick;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryThumbstickUp
    // Size: 0x4
    // Offset: 0x3C
    GlobalNamespace::OVRInput::RawButton PrimaryThumbstickUp;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryThumbstickDown
    // Size: 0x4
    // Offset: 0x40
    GlobalNamespace::OVRInput::RawButton PrimaryThumbstickDown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryThumbstickLeft
    // Size: 0x4
    // Offset: 0x44
    GlobalNamespace::OVRInput::RawButton PrimaryThumbstickLeft;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryThumbstickRight
    // Size: 0x4
    // Offset: 0x48
    GlobalNamespace::OVRInput::RawButton PrimaryThumbstickRight;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton PrimaryTouchpad
    // Size: 0x4
    // Offset: 0x4C
    GlobalNamespace::OVRInput::RawButton PrimaryTouchpad;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryShoulder
    // Size: 0x4
    // Offset: 0x50
    GlobalNamespace::OVRInput::RawButton SecondaryShoulder;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryIndexTrigger
    // Size: 0x4
    // Offset: 0x54
    GlobalNamespace::OVRInput::RawButton SecondaryIndexTrigger;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryHandTrigger
    // Size: 0x4
    // Offset: 0x58
    GlobalNamespace::OVRInput::RawButton SecondaryHandTrigger;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryThumbstick
    // Size: 0x4
    // Offset: 0x5C
    GlobalNamespace::OVRInput::RawButton SecondaryThumbstick;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryThumbstickUp
    // Size: 0x4
    // Offset: 0x60
    GlobalNamespace::OVRInput::RawButton SecondaryThumbstickUp;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryThumbstickDown
    // Size: 0x4
    // Offset: 0x64
    GlobalNamespace::OVRInput::RawButton SecondaryThumbstickDown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryThumbstickLeft
    // Size: 0x4
    // Offset: 0x68
    GlobalNamespace::OVRInput::RawButton SecondaryThumbstickLeft;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryThumbstickRight
    // Size: 0x4
    // Offset: 0x6C
    GlobalNamespace::OVRInput::RawButton SecondaryThumbstickRight;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton SecondaryTouchpad
    // Size: 0x4
    // Offset: 0x70
    GlobalNamespace::OVRInput::RawButton SecondaryTouchpad;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton DpadUp
    // Size: 0x4
    // Offset: 0x74
    GlobalNamespace::OVRInput::RawButton DpadUp;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton DpadDown
    // Size: 0x4
    // Offset: 0x78
    GlobalNamespace::OVRInput::RawButton DpadDown;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton DpadLeft
    // Size: 0x4
    // Offset: 0x7C
    GlobalNamespace::OVRInput::RawButton DpadLeft;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton DpadRight
    // Size: 0x4
    // Offset: 0x80
    GlobalNamespace::OVRInput::RawButton DpadRight;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Up
    // Size: 0x4
    // Offset: 0x84
    GlobalNamespace::OVRInput::RawButton Up;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Down
    // Size: 0x4
    // Offset: 0x88
    GlobalNamespace::OVRInput::RawButton Down;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Left
    // Size: 0x4
    // Offset: 0x8C
    GlobalNamespace::OVRInput::RawButton Left;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // public OVRInput/RawButton Right
    // Size: 0x4
    // Offset: 0x90
    GlobalNamespace::OVRInput::RawButton Right;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::RawButton) == 0x4);
    // Creating value type constructor for type: VirtualButtonMap
    VirtualButtonMap(GlobalNamespace::OVRInput::RawButton None_ = {}, GlobalNamespace::OVRInput::RawButton One_ = {}, GlobalNamespace::OVRInput::RawButton Two_ = {}, GlobalNamespace::OVRInput::RawButton Three_ = {}, GlobalNamespace::OVRInput::RawButton Four_ = {}, GlobalNamespace::OVRInput::RawButton Start_ = {}, GlobalNamespace::OVRInput::RawButton Back_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryShoulder_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryIndexTrigger_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryHandTrigger_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryThumbstick_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryThumbstickUp_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryThumbstickDown_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryThumbstickLeft_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryThumbstickRight_ = {}, GlobalNamespace::OVRInput::RawButton PrimaryTouchpad_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryShoulder_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryIndexTrigger_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryHandTrigger_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryThumbstick_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryThumbstickUp_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryThumbstickDown_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryThumbstickLeft_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryThumbstickRight_ = {}, GlobalNamespace::OVRInput::RawButton SecondaryTouchpad_ = {}, GlobalNamespace::OVRInput::RawButton DpadUp_ = {}, GlobalNamespace::OVRInput::RawButton DpadDown_ = {}, GlobalNamespace::OVRInput::RawButton DpadLeft_ = {}, GlobalNamespace::OVRInput::RawButton DpadRight_ = {}, GlobalNamespace::OVRInput::RawButton Up_ = {}, GlobalNamespace::OVRInput::RawButton Down_ = {}, GlobalNamespace::OVRInput::RawButton Left_ = {}, GlobalNamespace::OVRInput::RawButton Right_ = {}) noexcept : None{None_}, One{One_}, Two{Two_}, Three{Three_}, Four{Four_}, Start{Start_}, Back{Back_}, PrimaryShoulder{PrimaryShoulder_}, PrimaryIndexTrigger{PrimaryIndexTrigger_}, PrimaryHandTrigger{PrimaryHandTrigger_}, PrimaryThumbstick{PrimaryThumbstick_}, PrimaryThumbstickUp{PrimaryThumbstickUp_}, PrimaryThumbstickDown{PrimaryThumbstickDown_}, PrimaryThumbstickLeft{PrimaryThumbstickLeft_}, PrimaryThumbstickRight{PrimaryThumbstickRight_}, PrimaryTouchpad{PrimaryTouchpad_}, SecondaryShoulder{SecondaryShoulder_}, SecondaryIndexTrigger{SecondaryIndexTrigger_}, SecondaryHandTrigger{SecondaryHandTrigger_}, SecondaryThumbstick{SecondaryThumbstick_}, SecondaryThumbstickUp{SecondaryThumbstickUp_}, SecondaryThumbstickDown{SecondaryThumbstickDown_}, SecondaryThumbstickLeft{SecondaryThumbstickLeft_}, SecondaryThumbstickRight{SecondaryThumbstickRight_}, SecondaryTouchpad{SecondaryTouchpad_}, DpadUp{DpadUp_}, DpadDown{DpadDown_}, DpadLeft{DpadLeft_}, DpadRight{DpadRight_}, Up{Up_}, Down{Down_}, Left{Left_}, Right{Right_} {}
    // Get instance field reference: public OVRInput/RawButton None
    GlobalNamespace::OVRInput::RawButton& dyn_None();
    // Get instance field reference: public OVRInput/RawButton One
    GlobalNamespace::OVRInput::RawButton& dyn_One();
    // Get instance field reference: public OVRInput/RawButton Two
    GlobalNamespace::OVRInput::RawButton& dyn_Two();
    // Get instance field reference: public OVRInput/RawButton Three
    GlobalNamespace::OVRInput::RawButton& dyn_Three();
    // Get instance field reference: public OVRInput/RawButton Four
    GlobalNamespace::OVRInput::RawButton& dyn_Four();
    // Get instance field reference: public OVRInput/RawButton Start
    GlobalNamespace::OVRInput::RawButton& dyn_Start();
    // Get instance field reference: public OVRInput/RawButton Back
    GlobalNamespace::OVRInput::RawButton& dyn_Back();
    // Get instance field reference: public OVRInput/RawButton PrimaryShoulder
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryShoulder();
    // Get instance field reference: public OVRInput/RawButton PrimaryIndexTrigger
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryIndexTrigger();
    // Get instance field reference: public OVRInput/RawButton PrimaryHandTrigger
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryHandTrigger();
    // Get instance field reference: public OVRInput/RawButton PrimaryThumbstick
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryThumbstick();
    // Get instance field reference: public OVRInput/RawButton PrimaryThumbstickUp
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryThumbstickUp();
    // Get instance field reference: public OVRInput/RawButton PrimaryThumbstickDown
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryThumbstickDown();
    // Get instance field reference: public OVRInput/RawButton PrimaryThumbstickLeft
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryThumbstickLeft();
    // Get instance field reference: public OVRInput/RawButton PrimaryThumbstickRight
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryThumbstickRight();
    // Get instance field reference: public OVRInput/RawButton PrimaryTouchpad
    GlobalNamespace::OVRInput::RawButton& dyn_PrimaryTouchpad();
    // Get instance field reference: public OVRInput/RawButton SecondaryShoulder
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryShoulder();
    // Get instance field reference: public OVRInput/RawButton SecondaryIndexTrigger
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryIndexTrigger();
    // Get instance field reference: public OVRInput/RawButton SecondaryHandTrigger
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryHandTrigger();
    // Get instance field reference: public OVRInput/RawButton SecondaryThumbstick
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryThumbstick();
    // Get instance field reference: public OVRInput/RawButton SecondaryThumbstickUp
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryThumbstickUp();
    // Get instance field reference: public OVRInput/RawButton SecondaryThumbstickDown
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryThumbstickDown();
    // Get instance field reference: public OVRInput/RawButton SecondaryThumbstickLeft
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryThumbstickLeft();
    // Get instance field reference: public OVRInput/RawButton SecondaryThumbstickRight
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryThumbstickRight();
    // Get instance field reference: public OVRInput/RawButton SecondaryTouchpad
    GlobalNamespace::OVRInput::RawButton& dyn_SecondaryTouchpad();
    // Get instance field reference: public OVRInput/RawButton DpadUp
    GlobalNamespace::OVRInput::RawButton& dyn_DpadUp();
    // Get instance field reference: public OVRInput/RawButton DpadDown
    GlobalNamespace::OVRInput::RawButton& dyn_DpadDown();
    // Get instance field reference: public OVRInput/RawButton DpadLeft
    GlobalNamespace::OVRInput::RawButton& dyn_DpadLeft();
    // Get instance field reference: public OVRInput/RawButton DpadRight
    GlobalNamespace::OVRInput::RawButton& dyn_DpadRight();
    // Get instance field reference: public OVRInput/RawButton Up
    GlobalNamespace::OVRInput::RawButton& dyn_Up();
    // Get instance field reference: public OVRInput/RawButton Down
    GlobalNamespace::OVRInput::RawButton& dyn_Down();
    // Get instance field reference: public OVRInput/RawButton Left
    GlobalNamespace::OVRInput::RawButton& dyn_Left();
    // Get instance field reference: public OVRInput/RawButton Right
    GlobalNamespace::OVRInput::RawButton& dyn_Right();
    // public OVRInput/RawButton ToRawMask(OVRInput/Button virtualMask)
    // Offset: 0x16CE040
    GlobalNamespace::OVRInput::RawButton ToRawMask(GlobalNamespace::OVRInput::Button virtualMask);
    // public System.Void .ctor()
    // Offset: 0x16CD57C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRInput::OVRControllerBase::VirtualButtonMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRInput::OVRControllerBase::VirtualButtonMap*, creationType>()));
    }
  }; // OVRInput/OVRControllerBase/VirtualButtonMap
  #pragma pack(pop)
  static check_size<sizeof(OVRInput::OVRControllerBase::VirtualButtonMap), 144 + sizeof(GlobalNamespace::OVRInput::RawButton)> __GlobalNamespace_OVRInput_OVRControllerBase_VirtualButtonMapSizeCheck;
  static_assert(sizeof(OVRInput::OVRControllerBase::VirtualButtonMap) == 0x94);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap*, "", "OVRInput/OVRControllerBase/VirtualButtonMap");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap::ToRawMask
// Il2CppName: ToRawMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::OVRInput::RawButton (GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap::*)(GlobalNamespace::OVRInput::Button)>(&GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap::ToRawMask)> {
  static const MethodInfo* get() {
    static auto* virtualMask = &::il2cpp_utils::GetClassFromName("", "OVRInput/Button")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap*), "ToRawMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{virtualMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
