// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MouseLook
  class MouseLook;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MouseLook);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MouseLook*, "", "MouseLook");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: MouseLook
  // [TokenAttribute] Offset: FFFFFFFF
  class MouseLook : public ::Il2CppObject {
    public:
    public:
    // private System.Single _xSensitivity
    // Size: 0x4
    // Offset: 0x10
    float xSensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _ySensitivity
    // Size: 0x4
    // Offset: 0x14
    float ySensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _clampVerticalRotation
    // Size: 0x1
    // Offset: 0x18
    bool clampVerticalRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clampVerticalRotation and: minimumX
    char __padding2[0x3] = {};
    // private System.Single _minimumX
    // Size: 0x4
    // Offset: 0x1C
    float minimumX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maximumX
    // Size: 0x4
    // Offset: 0x20
    float maximumX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _smooth
    // Size: 0x1
    // Offset: 0x24
    bool smooth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: smooth and: smoothTime
    char __padding5[0x3] = {};
    // private System.Single _smoothTime
    // Size: 0x4
    // Offset: 0x28
    float smoothTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _lockCursor
    // Size: 0x1
    // Offset: 0x2C
    bool lockCursor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lockCursor and: characterTargetRot
    char __padding7[0x3] = {};
    // private UnityEngine.Quaternion _characterTargetRot
    // Size: 0x10
    // Offset: 0x30
    ::UnityEngine::Quaternion characterTargetRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _cameraTargetRot
    // Size: 0x10
    // Offset: 0x40
    ::UnityEngine::Quaternion cameraTargetRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Boolean _cursorIsLocked
    // Size: 0x1
    // Offset: 0x50
    bool cursorIsLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private System.Single _xSensitivity
    [[deprecated("Use field access instead!")]] float& dyn__xSensitivity();
    // Get instance field reference: private System.Single _ySensitivity
    [[deprecated("Use field access instead!")]] float& dyn__ySensitivity();
    // Get instance field reference: private System.Boolean _clampVerticalRotation
    [[deprecated("Use field access instead!")]] bool& dyn__clampVerticalRotation();
    // Get instance field reference: private System.Single _minimumX
    [[deprecated("Use field access instead!")]] float& dyn__minimumX();
    // Get instance field reference: private System.Single _maximumX
    [[deprecated("Use field access instead!")]] float& dyn__maximumX();
    // Get instance field reference: private System.Boolean _smooth
    [[deprecated("Use field access instead!")]] bool& dyn__smooth();
    // Get instance field reference: private System.Single _smoothTime
    [[deprecated("Use field access instead!")]] float& dyn__smoothTime();
    // Get instance field reference: private System.Boolean _lockCursor
    [[deprecated("Use field access instead!")]] bool& dyn__lockCursor();
    // Get instance field reference: private UnityEngine.Quaternion _characterTargetRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__characterTargetRot();
    // Get instance field reference: private UnityEngine.Quaternion _cameraTargetRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__cameraTargetRot();
    // Get instance field reference: private System.Boolean _cursorIsLocked
    [[deprecated("Use field access instead!")]] bool& dyn__cursorIsLocked();
    // public System.Void .ctor()
    // Offset: 0x141F94C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseLook* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MouseLook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseLook*, creationType>()));
    }
    // public System.Void Init(UnityEngine.Transform character, UnityEngine.Transform camera)
    // Offset: 0x141F440
    void Init(::UnityEngine::Transform* character, ::UnityEngine::Transform* camera);
    // public System.Void SetRotations(UnityEngine.Quaternion characterRotation, UnityEngine.Quaternion cameraRotation)
    // Offset: 0x141F4D8
    void SetRotations(::UnityEngine::Quaternion characterRotation, ::UnityEngine::Quaternion cameraRotation);
    // public System.Void LookRotation(UnityEngine.Transform character, UnityEngine.Transform camera)
    // Offset: 0x141F4EC
    void LookRotation(::UnityEngine::Transform* character, ::UnityEngine::Transform* camera);
    // public System.Void SetCursorLock(System.Boolean value)
    // Offset: 0x141F89C
    void SetCursorLock(bool value);
    // public System.Void UpdateCursorLock()
    // Offset: 0x141F88C
    void UpdateCursorLock();
    // private System.Void InternalLockUpdate()
    // Offset: 0x141F8D0
    void InternalLockUpdate();
    // private UnityEngine.Quaternion ClampRotationAroundXAxis(UnityEngine.Quaternion q)
    // Offset: 0x141F7C4
    ::UnityEngine::Quaternion ClampRotationAroundXAxis(::UnityEngine::Quaternion q);
  }; // MouseLook
  #pragma pack(pop)
  static check_size<sizeof(MouseLook), 80 + sizeof(bool)> __GlobalNamespace_MouseLookSizeCheck;
  static_assert(sizeof(MouseLook) == 0x51);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&GlobalNamespace::MouseLook::Init)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, camera});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::SetRotations
// Il2CppName: SetRotations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)(::UnityEngine::Quaternion, ::UnityEngine::Quaternion)>(&GlobalNamespace::MouseLook::SetRotations)> {
  static const MethodInfo* get() {
    static auto* characterRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    static auto* cameraRotation = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "SetRotations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characterRotation, cameraRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::LookRotation
// Il2CppName: LookRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)(::UnityEngine::Transform*, ::UnityEngine::Transform*)>(&GlobalNamespace::MouseLook::LookRotation)> {
  static const MethodInfo* get() {
    static auto* character = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    static auto* camera = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "LookRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{character, camera});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::SetCursorLock
// Il2CppName: SetCursorLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)(bool)>(&GlobalNamespace::MouseLook::SetCursorLock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "SetCursorLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::UpdateCursorLock
// Il2CppName: UpdateCursorLock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)()>(&GlobalNamespace::MouseLook::UpdateCursorLock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "UpdateCursorLock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::InternalLockUpdate
// Il2CppName: InternalLockUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MouseLook::*)()>(&GlobalNamespace::MouseLook::InternalLockUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "InternalLockUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MouseLook::ClampRotationAroundXAxis
// Il2CppName: ClampRotationAroundXAxis
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::MouseLook::*)(::UnityEngine::Quaternion)>(&GlobalNamespace::MouseLook::ClampRotationAroundXAxis)> {
  static const MethodInfo* get() {
    static auto* q = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MouseLook*), "ClampRotationAroundXAxis", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{q});
  }
};
