// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MockPlayerGamePoseGeneratorAI
#include "GlobalNamespace/MockPlayerGamePoseGeneratorAI.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder
#include "System/Runtime/CompilerServices/AsyncVoidMethodBuilder.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter
#include "System/Runtime/CompilerServices/TaskAwaiter.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockBeatmapData
  class MockBeatmapData;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: MockNoteData
  class MockNoteData;
  // Forward declaring type: MockObstacleData
  class MockObstacleData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6, "", "MockPlayerGamePoseGeneratorAI/<SendPoses>d__6");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayerGamePoseGeneratorAI/<SendPoses>d__6
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  struct MockPlayerGamePoseGeneratorAI::$SendPoses$d__6/*, public ::System::ValueType, public ::System::Runtime::CompilerServices::IAsyncStateMachine*/ {
    public:
    public:
    // public System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x0
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$t__builder
    char __padding0[0x4] = {};
    // public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    // Size: 0x20
    // Offset: 0x8
    ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::AsyncVoidMethodBuilder) == 0x20);
    // public MockPlayerGamePoseGeneratorAI <>4__this
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MockPlayerGamePoseGeneratorAI* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MockPlayerGamePoseGeneratorAI*) == 0x8);
    // public MockBeatmapData beatmapData
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MockBeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MockBeatmapData*) == 0x8);
    // public System.Single introStartTime
    // Size: 0x4
    // Offset: 0x38
    float introStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: introStartTime and: gameplayModifiers
    char __padding4[0x4] = {};
    // public GameplayModifiers gameplayModifiers
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayModifiers*) == 0x8);
    // public System.Threading.CancellationToken cancellationToken
    // Size: 0x8
    // Offset: 0x48
    ::System::Threading::CancellationToken cancellationToken;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationToken) == 0x8);
    // public System.Action onSongFinished
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* onSongFinished;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Single <lastEventTime>5__2
    // Size: 0x4
    // Offset: 0x58
    float $lastEventTime$5__2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Pose <lastHeadPose>5__3
    // Size: 0x1C
    // Offset: 0x5C
    ::UnityEngine::Pose $lastHeadPose$5__3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose <lastLeftHandPose>5__4
    // Size: 0x1C
    // Offset: 0x78
    ::UnityEngine::Pose $lastLeftHandPose$5__4;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose <lastRightHandPose>5__5
    // Size: 0x1C
    // Offset: 0x94
    ::UnityEngine::Pose $lastRightHandPose$5__5;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Single <lastSongTime>5__6
    // Size: 0x4
    // Offset: 0xB0
    float $lastSongTime$5__6;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <lineCount>5__7
    // Size: 0x4
    // Offset: 0xB4
    int $lineCount$5__7;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private MockNoteData[] <leftNotes>5__8
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::GlobalNamespace::MockNoteData*> $leftNotes$5__8;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MockNoteData*>) == 0x8);
    // private MockNoteData[] <rightNotes>5__9
    // Size: 0x8
    // Offset: 0xC0
    ::ArrayW<::GlobalNamespace::MockNoteData*> $rightNotes$5__9;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MockNoteData*>) == 0x8);
    // private MockNoteData[] <bombNotes>5__10
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::GlobalNamespace::MockNoteData*> $bombNotes$5__10;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MockNoteData*>) == 0x8);
    // private MockObstacleData[] <obstacles>5__11
    // Size: 0x8
    // Offset: 0xD0
    ::ArrayW<::GlobalNamespace::MockObstacleData*> $obstacles$5__11;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MockObstacleData*>) == 0x8);
    // private System.Int32 <leftNoteIndex>5__12
    // Size: 0x4
    // Offset: 0xD8
    int $leftNoteIndex$5__12;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <rightNoteIndex>5__13
    // Size: 0x4
    // Offset: 0xDC
    int $rightNoteIndex$5__13;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <bombNoteIndex>5__14
    // Size: 0x4
    // Offset: 0xE0
    int $bombNoteIndex$5__14;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <obstacleIndex>5__15
    // Size: 0x4
    // Offset: 0xE4
    int $obstacleIndex$5__15;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <prevLeftScore>5__16
    // Size: 0x4
    // Offset: 0xE8
    int $prevLeftScore$5__16;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <prevRightScore>5__17
    // Size: 0x4
    // Offset: 0xEC
    int $prevRightScore$5__17;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <nextLeftHitScore>5__18
    // Size: 0x4
    // Offset: 0xF0
    int $nextLeftHitScore$5__18;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <nextRightHitScore>5__19
    // Size: 0x4
    // Offset: 0xF4
    int $nextRightHitScore$5__19;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <score>5__20
    // Size: 0x4
    // Offset: 0xF8
    int $score$5__20;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <combo>5__21
    // Size: 0x4
    // Offset: 0xFC
    int $combo$5__21;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <multiplier>5__22
    // Size: 0x4
    // Offset: 0x100
    int $multiplier$5__22;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean <fullCombo>5__23
    // Size: 0x1
    // Offset: 0x104
    bool $fullCombo$5__23;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <hasFinishedLevel>5__24
    // Size: 0x1
    // Offset: 0x105
    bool $hasFinishedLevel$5__24;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: $hasFinishedLevel$5__24 and: $$u__1
    char __padding30[0x2] = {};
    // private System.Runtime.CompilerServices.TaskAwaiter <>u__1
    // Size: 0x8
    // Offset: 0x108
    ::System::Runtime::CompilerServices::TaskAwaiter $$u__1;
    // Field size check
    static_assert(sizeof(::System::Runtime::CompilerServices::TaskAwaiter) == 0x8);
    public:
    // Creating value type constructor for type: $SendPoses$d__6
    constexpr $SendPoses$d__6(int $$1__state_ = {}, ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder_ = {}, ::GlobalNamespace::MockPlayerGamePoseGeneratorAI* $$4__this_ = {}, ::GlobalNamespace::MockBeatmapData* beatmapData_ = {}, float introStartTime_ = {}, ::GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, ::System::Threading::CancellationToken cancellationToken_ = {}, ::System::Action* onSongFinished_ = {}, float $lastEventTime$5__2_ = {}, ::UnityEngine::Pose $lastHeadPose$5__3_ = {}, ::UnityEngine::Pose $lastLeftHandPose$5__4_ = {}, ::UnityEngine::Pose $lastRightHandPose$5__5_ = {}, float $lastSongTime$5__6_ = {}, int $lineCount$5__7_ = {}, ::ArrayW<::GlobalNamespace::MockNoteData*> $leftNotes$5__8_ = ::ArrayW<::GlobalNamespace::MockNoteData*>(static_cast<void*>(nullptr)), ::ArrayW<::GlobalNamespace::MockNoteData*> $rightNotes$5__9_ = ::ArrayW<::GlobalNamespace::MockNoteData*>(static_cast<void*>(nullptr)), ::ArrayW<::GlobalNamespace::MockNoteData*> $bombNotes$5__10_ = ::ArrayW<::GlobalNamespace::MockNoteData*>(static_cast<void*>(nullptr)), ::ArrayW<::GlobalNamespace::MockObstacleData*> $obstacles$5__11_ = ::ArrayW<::GlobalNamespace::MockObstacleData*>(static_cast<void*>(nullptr)), int $leftNoteIndex$5__12_ = {}, int $rightNoteIndex$5__13_ = {}, int $bombNoteIndex$5__14_ = {}, int $obstacleIndex$5__15_ = {}, int $prevLeftScore$5__16_ = {}, int $prevRightScore$5__17_ = {}, int $nextLeftHitScore$5__18_ = {}, int $nextRightHitScore$5__19_ = {}, int $score$5__20_ = {}, int $combo$5__21_ = {}, int $multiplier$5__22_ = {}, bool $fullCombo$5__23_ = {}, bool $hasFinishedLevel$5__24_ = {}, ::System::Runtime::CompilerServices::TaskAwaiter $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, $$4__this{$$4__this_}, beatmapData{beatmapData_}, introStartTime{introStartTime_}, gameplayModifiers{gameplayModifiers_}, cancellationToken{cancellationToken_}, onSongFinished{onSongFinished_}, $lastEventTime$5__2{$lastEventTime$5__2_}, $lastHeadPose$5__3{$lastHeadPose$5__3_}, $lastLeftHandPose$5__4{$lastLeftHandPose$5__4_}, $lastRightHandPose$5__5{$lastRightHandPose$5__5_}, $lastSongTime$5__6{$lastSongTime$5__6_}, $lineCount$5__7{$lineCount$5__7_}, $leftNotes$5__8{$leftNotes$5__8_}, $rightNotes$5__9{$rightNotes$5__9_}, $bombNotes$5__10{$bombNotes$5__10_}, $obstacles$5__11{$obstacles$5__11_}, $leftNoteIndex$5__12{$leftNoteIndex$5__12_}, $rightNoteIndex$5__13{$rightNoteIndex$5__13_}, $bombNoteIndex$5__14{$bombNoteIndex$5__14_}, $obstacleIndex$5__15{$obstacleIndex$5__15_}, $prevLeftScore$5__16{$prevLeftScore$5__16_}, $prevRightScore$5__17{$prevRightScore$5__17_}, $nextLeftHitScore$5__18{$nextLeftHitScore$5__18_}, $nextRightHitScore$5__19{$nextRightHitScore$5__19_}, $score$5__20{$score$5__20_}, $combo$5__21{$combo$5__21_}, $multiplier$5__22{$multiplier$5__22_}, $fullCombo$5__23{$fullCombo$5__23_}, $hasFinishedLevel$5__24{$hasFinishedLevel$5__24_}, $$u__1{$$u__1_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator ::System::Runtime::CompilerServices::IAsyncStateMachine
    operator ::System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
      return *reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
    }
    // Creating interface conversion operator: i_IAsyncStateMachine
    inline ::System::Runtime::CompilerServices::IAsyncStateMachine* i_IAsyncStateMachine() noexcept {
      return reinterpret_cast<::System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
    }
    // Get instance field reference: public System.Int32 <>1__state
    [[deprecated("Use field access instead!")]] int& dyn_$$1__state();
    // Get instance field reference: public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::AsyncVoidMethodBuilder& dyn_$$t__builder();
    // Get instance field reference: public MockPlayerGamePoseGeneratorAI <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MockPlayerGamePoseGeneratorAI*& dyn_$$4__this();
    // Get instance field reference: public MockBeatmapData beatmapData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MockBeatmapData*& dyn_beatmapData();
    // Get instance field reference: public System.Single introStartTime
    [[deprecated("Use field access instead!")]] float& dyn_introStartTime();
    // Get instance field reference: public GameplayModifiers gameplayModifiers
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers*& dyn_gameplayModifiers();
    // Get instance field reference: public System.Threading.CancellationToken cancellationToken
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationToken& dyn_cancellationToken();
    // Get instance field reference: public System.Action onSongFinished
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onSongFinished();
    // Get instance field reference: private System.Single <lastEventTime>5__2
    [[deprecated("Use field access instead!")]] float& dyn_$lastEventTime$5__2();
    // Get instance field reference: private UnityEngine.Pose <lastHeadPose>5__3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$lastHeadPose$5__3();
    // Get instance field reference: private UnityEngine.Pose <lastLeftHandPose>5__4
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$lastLeftHandPose$5__4();
    // Get instance field reference: private UnityEngine.Pose <lastRightHandPose>5__5
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn_$lastRightHandPose$5__5();
    // Get instance field reference: private System.Single <lastSongTime>5__6
    [[deprecated("Use field access instead!")]] float& dyn_$lastSongTime$5__6();
    // Get instance field reference: private System.Int32 <lineCount>5__7
    [[deprecated("Use field access instead!")]] int& dyn_$lineCount$5__7();
    // Get instance field reference: private MockNoteData[] <leftNotes>5__8
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MockNoteData*>& dyn_$leftNotes$5__8();
    // Get instance field reference: private MockNoteData[] <rightNotes>5__9
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MockNoteData*>& dyn_$rightNotes$5__9();
    // Get instance field reference: private MockNoteData[] <bombNotes>5__10
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MockNoteData*>& dyn_$bombNotes$5__10();
    // Get instance field reference: private MockObstacleData[] <obstacles>5__11
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MockObstacleData*>& dyn_$obstacles$5__11();
    // Get instance field reference: private System.Int32 <leftNoteIndex>5__12
    [[deprecated("Use field access instead!")]] int& dyn_$leftNoteIndex$5__12();
    // Get instance field reference: private System.Int32 <rightNoteIndex>5__13
    [[deprecated("Use field access instead!")]] int& dyn_$rightNoteIndex$5__13();
    // Get instance field reference: private System.Int32 <bombNoteIndex>5__14
    [[deprecated("Use field access instead!")]] int& dyn_$bombNoteIndex$5__14();
    // Get instance field reference: private System.Int32 <obstacleIndex>5__15
    [[deprecated("Use field access instead!")]] int& dyn_$obstacleIndex$5__15();
    // Get instance field reference: private System.Int32 <prevLeftScore>5__16
    [[deprecated("Use field access instead!")]] int& dyn_$prevLeftScore$5__16();
    // Get instance field reference: private System.Int32 <prevRightScore>5__17
    [[deprecated("Use field access instead!")]] int& dyn_$prevRightScore$5__17();
    // Get instance field reference: private System.Int32 <nextLeftHitScore>5__18
    [[deprecated("Use field access instead!")]] int& dyn_$nextLeftHitScore$5__18();
    // Get instance field reference: private System.Int32 <nextRightHitScore>5__19
    [[deprecated("Use field access instead!")]] int& dyn_$nextRightHitScore$5__19();
    // Get instance field reference: private System.Int32 <score>5__20
    [[deprecated("Use field access instead!")]] int& dyn_$score$5__20();
    // Get instance field reference: private System.Int32 <combo>5__21
    [[deprecated("Use field access instead!")]] int& dyn_$combo$5__21();
    // Get instance field reference: private System.Int32 <multiplier>5__22
    [[deprecated("Use field access instead!")]] int& dyn_$multiplier$5__22();
    // Get instance field reference: private System.Boolean <fullCombo>5__23
    [[deprecated("Use field access instead!")]] bool& dyn_$fullCombo$5__23();
    // Get instance field reference: private System.Boolean <hasFinishedLevel>5__24
    [[deprecated("Use field access instead!")]] bool& dyn_$hasFinishedLevel$5__24();
    // Get instance field reference: private System.Runtime.CompilerServices.TaskAwaiter <>u__1
    [[deprecated("Use field access instead!")]] ::System::Runtime::CompilerServices::TaskAwaiter& dyn_$$u__1();
    // private System.Void MoveNext()
    // Offset: 0x2ABB288
    void MoveNext();
    // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
    // Offset: 0x2ABC4A4
    void SetStateMachine(::System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine);
  }; // MockPlayerGamePoseGeneratorAI/<SendPoses>d__6
  #pragma pack(pop)
  static check_size<sizeof(MockPlayerGamePoseGeneratorAI::$SendPoses$d__6), 264 + sizeof(::System::Runtime::CompilerServices::TaskAwaiter)> __GlobalNamespace_MockPlayerGamePoseGeneratorAI_$SendPoses$d__6SizeCheck;
  static_assert(sizeof(MockPlayerGamePoseGeneratorAI::$SendPoses$d__6) == 0x110);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6::MoveNext
// Il2CppName: MoveNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6::*)()>(&GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6::MoveNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6), "MoveNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6::SetStateMachine
// Il2CppName: SetStateMachine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6::*)(::System::Runtime::CompilerServices::IAsyncStateMachine*)>(&GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6::SetStateMachine)> {
  static const MethodInfo* get() {
    static auto* stateMachine = &::il2cpp_utils::GetClassFromName("System.Runtime.CompilerServices", "IAsyncStateMachine")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerGamePoseGeneratorAI::$SendPoses$d__6), "SetStateMachine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stateMachine});
  }
};
