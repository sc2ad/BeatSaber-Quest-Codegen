// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberTypeObject
  class SaberTypeObject;
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: BlocksBlade
  class BlocksBlade;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SetBlocksBladeSaberGlowColor
  class SetBlocksBladeSaberGlowColor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SetBlocksBladeSaberGlowColor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SetBlocksBladeSaberGlowColor*, "", "SetBlocksBladeSaberGlowColor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: SetBlocksBladeSaberGlowColor
  // [TokenAttribute] Offset: FFFFFFFF
  class SetBlocksBladeSaberGlowColor : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private SaberTypeObject _saber
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SaberTypeObject* saber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaberTypeObject*) == 0x8);
    // private ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorManager*) == 0x8);
    // private BlocksBlade _blocksBlade
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BlocksBlade* blocksBlade;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BlocksBlade*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private SaberTypeObject _saber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberTypeObject*& dyn__saber();
    // Get instance field reference: private ColorManager _colorManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& dyn__colorManager();
    // Get instance field reference: private BlocksBlade _blocksBlade
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BlocksBlade*& dyn__blocksBlade();
    // public System.Void .ctor()
    // Offset: 0x13DF478
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SetBlocksBladeSaberGlowColor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SetBlocksBladeSaberGlowColor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SetBlocksBladeSaberGlowColor*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13DF42C
    void Start();
  }; // SetBlocksBladeSaberGlowColor
  #pragma pack(pop)
  static check_size<sizeof(SetBlocksBladeSaberGlowColor), 40 + sizeof(::GlobalNamespace::BlocksBlade*)> __GlobalNamespace_SetBlocksBladeSaberGlowColorSizeCheck;
  static_assert(sizeof(SetBlocksBladeSaberGlowColor) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SetBlocksBladeSaberGlowColor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SetBlocksBladeSaberGlowColor::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SetBlocksBladeSaberGlowColor::*)()>(&GlobalNamespace::SetBlocksBladeSaberGlowColor::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SetBlocksBladeSaberGlowColor*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
