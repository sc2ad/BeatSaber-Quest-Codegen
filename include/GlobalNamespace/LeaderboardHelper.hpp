// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LeaderboardIdsModelSO
  class LeaderboardIdsModelSO;
  // Forward declaring type: BeatmapLevelCollectionSO
  class BeatmapLevelCollectionSO;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LeaderboardHelper
  class LeaderboardHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LeaderboardHelper);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LeaderboardHelper*, "", "LeaderboardHelper");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: LeaderboardHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class LeaderboardHelper : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::LeaderboardHelper::$CreateOculusLeaderboard$d__2
    struct $CreateOculusLeaderboard$d__2;
    public:
    // private System.Collections.Generic.List`1<System.String> _leaderboardIds
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::StringW>* leaderboardIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::List_1<::StringW>*
    constexpr operator ::System::Collections::Generic::List_1<::StringW>*() const noexcept {
      return leaderboardIds;
    }
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> _leaderboardIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn__leaderboardIds();
    // public System.Void .ctor()
    // Offset: 0x13A138C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeaderboardHelper* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LeaderboardHelper::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeaderboardHelper*, creationType>()));
    }
    // public System.Void CreateOculusLeaderboards(LeaderboardIdsModelSO leaderboardIdsModel, BeatmapLevelCollectionSO _levelCollection, System.Boolean debug, System.String appToken)
    // Offset: 0x13A0528
    void CreateOculusLeaderboards(::GlobalNamespace::LeaderboardIdsModelSO* leaderboardIdsModel, ::GlobalNamespace::BeatmapLevelCollectionSO* _levelCollection, bool debug, ::StringW appToken);
    // private System.Void CreateOculusLeaderboard(System.String leaderboardID, System.String appToken)
    // Offset: 0x13A12C8
    void CreateOculusLeaderboard(::StringW leaderboardID, ::StringW appToken);
  }; // LeaderboardHelper
  #pragma pack(pop)
  static check_size<sizeof(LeaderboardHelper), 16 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __GlobalNamespace_LeaderboardHelperSizeCheck;
  static_assert(sizeof(LeaderboardHelper) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardHelper::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardHelper::CreateOculusLeaderboards
// Il2CppName: CreateOculusLeaderboards
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardHelper::*)(::GlobalNamespace::LeaderboardIdsModelSO*, ::GlobalNamespace::BeatmapLevelCollectionSO*, bool, ::StringW)>(&GlobalNamespace::LeaderboardHelper::CreateOculusLeaderboards)> {
  static const MethodInfo* get() {
    static auto* leaderboardIdsModel = &::il2cpp_utils::GetClassFromName("", "LeaderboardIdsModelSO")->byval_arg;
    static auto* _levelCollection = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelCollectionSO")->byval_arg;
    static auto* debug = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* appToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardHelper*), "CreateOculusLeaderboards", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaderboardIdsModel, _levelCollection, debug, appToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardHelper::CreateOculusLeaderboard
// Il2CppName: CreateOculusLeaderboard
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardHelper::*)(::StringW, ::StringW)>(&GlobalNamespace::LeaderboardHelper::CreateOculusLeaderboard)> {
  static const MethodInfo* get() {
    static auto* leaderboardID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* appToken = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardHelper*), "CreateOculusLeaderboard", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{leaderboardID, appToken});
  }
};
