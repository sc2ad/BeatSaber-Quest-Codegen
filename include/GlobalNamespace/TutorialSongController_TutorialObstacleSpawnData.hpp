// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: TutorialSongController
#include "GlobalNamespace/TutorialSongController.hpp"
// Including type: TutorialSongController/TutorialObjectSpawnData
#include "GlobalNamespace/TutorialSongController_TutorialObjectSpawnData.hpp"
// Including type: ObstacleType
#include "GlobalNamespace/ObstacleType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: TutorialSongController/TutorialObstacleSpawnData
  // [TokenAttribute] Offset: FFFFFFFF
  class TutorialSongController::TutorialObstacleSpawnData : public GlobalNamespace::TutorialSongController::TutorialObjectSpawnData {
    public:
    // public readonly System.Int32 width
    // Size: 0x4
    // Offset: 0x24
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly ObstacleType obstacleType
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::ObstacleType obstacleType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ObstacleType) == 0x4);
    // Creating value type constructor for type: TutorialObstacleSpawnData
    TutorialObstacleSpawnData(int width_ = {}, GlobalNamespace::ObstacleType obstacleType_ = {}) noexcept : width{width_}, obstacleType{obstacleType_} {}
    // Get instance field reference: public readonly System.Int32 width
    int& dyn_width();
    // Get instance field reference: public readonly ObstacleType obstacleType
    GlobalNamespace::ObstacleType& dyn_obstacleType();
    // public System.Void .ctor(Signal signal, System.Int32 firstTimeBeatOffset, System.Int32 beatOffset, System.Int32 lineIndex, System.Int32 width, ObstacleType obstacleType)
    // Offset: 0x133CE88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialSongController::TutorialObstacleSpawnData* New_ctor(GlobalNamespace::Signal* signal, int firstTimeBeatOffset, int beatOffset, int lineIndex, int width, GlobalNamespace::ObstacleType obstacleType) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialSongController::TutorialObstacleSpawnData*, creationType>(signal, firstTimeBeatOffset, beatOffset, lineIndex, width, obstacleType)));
    }
  }; // TutorialSongController/TutorialObstacleSpawnData
  #pragma pack(pop)
  static check_size<sizeof(TutorialSongController::TutorialObstacleSpawnData), 40 + sizeof(GlobalNamespace::ObstacleType)> __GlobalNamespace_TutorialSongController_TutorialObstacleSpawnDataSizeCheck;
  static_assert(sizeof(TutorialSongController::TutorialObstacleSpawnData) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData*, "", "TutorialSongController/TutorialObstacleSpawnData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
