// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PrimaryButtonWatcher
  class PrimaryButtonWatcher;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CalibrationCube
  class CalibrationCube;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CalibrationCube);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CalibrationCube*, "", "CalibrationCube");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: CalibrationCube
  // [TokenAttribute] Offset: FFFFFFFF
  class CalibrationCube : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public PrimaryButtonWatcher watcher
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PrimaryButtonWatcher* watcher;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PrimaryButtonWatcher*) == 0x8);
    // public UnityEngine.GameObject rightController
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* rightController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject leftController
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::GameObject* leftController;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject playerBody
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* playerBody;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Single calibratedLength
    // Size: 0x4
    // Offset: 0x38
    float calibratedLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastCalibratedLength
    // Size: 0x4
    // Offset: 0x3C
    float lastCalibratedLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minLength
    // Size: 0x4
    // Offset: 0x40
    float minLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxLength
    // Size: 0x4
    // Offset: 0x44
    float maxLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single baseLength
    // Size: 0x4
    // Offset: 0x48
    float baseLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: baseLength and: calibrationPresets
    char __padding8[0x4] = {};
    // public System.String[] calibrationPresets
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::StringW> calibrationPresets;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] calibrationPresetsTest
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::StringW> calibrationPresetsTest;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] calibrationPresetsTest2
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::StringW> calibrationPresetsTest2;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] calibrationPresetsTest3
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::StringW> calibrationPresetsTest3;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String[] calibrationPresetsTest4
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::StringW> calibrationPresetsTest4;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public System.String outputstring
    // Size: 0x8
    // Offset: 0x78
    ::StringW outputstring;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Collections.Generic.List`1<System.String> stringList
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::StringW>* stringList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public PrimaryButtonWatcher watcher
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PrimaryButtonWatcher*& dyn_watcher();
    // Get instance field reference: public UnityEngine.GameObject rightController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightController();
    // Get instance field reference: public UnityEngine.GameObject leftController
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftController();
    // Get instance field reference: public UnityEngine.GameObject playerBody
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_playerBody();
    // Get instance field reference: private System.Single calibratedLength
    [[deprecated("Use field access instead!")]] float& dyn_calibratedLength();
    // Get instance field reference: private System.Single lastCalibratedLength
    [[deprecated("Use field access instead!")]] float& dyn_lastCalibratedLength();
    // Get instance field reference: public System.Single minLength
    [[deprecated("Use field access instead!")]] float& dyn_minLength();
    // Get instance field reference: public System.Single maxLength
    [[deprecated("Use field access instead!")]] float& dyn_maxLength();
    // Get instance field reference: public System.Single baseLength
    [[deprecated("Use field access instead!")]] float& dyn_baseLength();
    // Get instance field reference: public System.String[] calibrationPresets
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_calibrationPresets();
    // Get instance field reference: public System.String[] calibrationPresetsTest
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_calibrationPresetsTest();
    // Get instance field reference: public System.String[] calibrationPresetsTest2
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_calibrationPresetsTest2();
    // Get instance field reference: public System.String[] calibrationPresetsTest3
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_calibrationPresetsTest3();
    // Get instance field reference: public System.String[] calibrationPresetsTest4
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_calibrationPresetsTest4();
    // Get instance field reference: public System.String outputstring
    [[deprecated("Use field access instead!")]] ::StringW& dyn_outputstring();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> stringList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_stringList();
    // public System.Void .ctor()
    // Offset: 0xC5F6B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CalibrationCube* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CalibrationCube::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CalibrationCube*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xC5F080
    void Awake();
    // private System.Void Start()
    // Offset: 0xC5F08C
    void Start();
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0xC5F334
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // private System.Void OnTriggerExit(UnityEngine.Collider other)
    // Offset: 0xC5F338
    void OnTriggerExit(::UnityEngine::Collider* other);
    // public System.Void RecalibrateSize(System.Boolean pressed)
    // Offset: 0xC5F33C
    void RecalibrateSize(bool pressed);
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0xC5F6AC
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // private System.Void OnCollisionExit(UnityEngine.Collision collision)
    // Offset: 0xC5F148
    void OnCollisionExit(::UnityEngine::Collision* collision);
  }; // CalibrationCube
  #pragma pack(pop)
  static check_size<sizeof(CalibrationCube), 128 + sizeof(::System::Collections::Generic::List_1<::StringW>*)> __GlobalNamespace_CalibrationCubeSizeCheck;
  static_assert(sizeof(CalibrationCube) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)()>(&GlobalNamespace::CalibrationCube::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)()>(&GlobalNamespace::CalibrationCube::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)(::UnityEngine::Collider*)>(&GlobalNamespace::CalibrationCube::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::OnTriggerExit
// Il2CppName: OnTriggerExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)(::UnityEngine::Collider*)>(&GlobalNamespace::CalibrationCube::OnTriggerExit)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "OnTriggerExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::RecalibrateSize
// Il2CppName: RecalibrateSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)(bool)>(&GlobalNamespace::CalibrationCube::RecalibrateSize)> {
  static const MethodInfo* get() {
    static auto* pressed = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "RecalibrateSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)(::UnityEngine::Collision*)>(&GlobalNamespace::CalibrationCube::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CalibrationCube::OnCollisionExit
// Il2CppName: OnCollisionExit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CalibrationCube::*)(::UnityEngine::Collision*)>(&GlobalNamespace::CalibrationCube::OnCollisionExit)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CalibrationCube*), "OnCollisionExit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
