// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LeaderboardPlayerInfo
  class LeaderboardPlayerInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LeaderboardPlayerInfo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LeaderboardPlayerInfo*, "", "LeaderboardPlayerInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: LeaderboardPlayerInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class LeaderboardPlayerInfo : public ::Il2CppObject {
    public:
    public:
    // public System.String serverKey
    // Size: 0x8
    // Offset: 0x10
    ::StringW serverKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <playerId>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW playerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <playerName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW playerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <playerKey>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW playerKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <authType>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::StringW authType;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <playerFriends>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::StringW playerFriends;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <succeeded>k__BackingField
    // Size: 0x1
    // Offset: 0x40
    bool succeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String serverKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn_serverKey();
    // Get instance field reference: private System.String <playerId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$playerId$k__BackingField();
    // Get instance field reference: private System.String <playerName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$playerName$k__BackingField();
    // Get instance field reference: private System.String <playerKey>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$playerKey$k__BackingField();
    // Get instance field reference: private System.String <authType>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$authType$k__BackingField();
    // Get instance field reference: private System.String <playerFriends>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$playerFriends$k__BackingField();
    // Get instance field reference: private System.Boolean <succeeded>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$succeeded$k__BackingField();
    // public System.String get_playerId()
    // Offset: 0x13A3BF8
    ::StringW get_playerId();
    // private System.Void set_playerId(System.String value)
    // Offset: 0x13A3C00
    void set_playerId(::StringW value);
    // public System.String get_playerName()
    // Offset: 0x13A3C08
    ::StringW get_playerName();
    // private System.Void set_playerName(System.String value)
    // Offset: 0x13A3C10
    void set_playerName(::StringW value);
    // public System.String get_playerKey()
    // Offset: 0x13A3C18
    ::StringW get_playerKey();
    // private System.Void set_playerKey(System.String value)
    // Offset: 0x13A3C20
    void set_playerKey(::StringW value);
    // public System.String get_authType()
    // Offset: 0x13A3C28
    ::StringW get_authType();
    // private System.Void set_authType(System.String value)
    // Offset: 0x13A3C30
    void set_authType(::StringW value);
    // public System.String get_playerFriends()
    // Offset: 0x13A3C38
    ::StringW get_playerFriends();
    // private System.Void set_playerFriends(System.String value)
    // Offset: 0x13A3C40
    void set_playerFriends(::StringW value);
    // public System.Boolean get_succeeded()
    // Offset: 0x13A3C48
    bool get_succeeded();
    // private System.Void set_succeeded(System.Boolean value)
    // Offset: 0x13A3C50
    void set_succeeded(bool value);
    // public System.Void .ctor(System.Boolean succeeded, System.String playerId, System.String playerName, System.String playerKey, System.String authType, System.String playerFriends)
    // Offset: 0x13A3C5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeaderboardPlayerInfo* New_ctor(bool succeeded, ::StringW playerId, ::StringW playerName, ::StringW playerKey, ::StringW authType, ::StringW playerFriends) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LeaderboardPlayerInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeaderboardPlayerInfo*, creationType>(succeeded, playerId, playerName, playerKey, authType, playerFriends)));
    }
  }; // LeaderboardPlayerInfo
  #pragma pack(pop)
  static check_size<sizeof(LeaderboardPlayerInfo), 64 + sizeof(bool)> __GlobalNamespace_LeaderboardPlayerInfoSizeCheck;
  static_assert(sizeof(LeaderboardPlayerInfo) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::get_playerId
// Il2CppName: get_playerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LeaderboardPlayerInfo::*)()>(&GlobalNamespace::LeaderboardPlayerInfo::get_playerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "get_playerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::set_playerId
// Il2CppName: set_playerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardPlayerInfo::*)(::StringW)>(&GlobalNamespace::LeaderboardPlayerInfo::set_playerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "set_playerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::get_playerName
// Il2CppName: get_playerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LeaderboardPlayerInfo::*)()>(&GlobalNamespace::LeaderboardPlayerInfo::get_playerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "get_playerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::set_playerName
// Il2CppName: set_playerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardPlayerInfo::*)(::StringW)>(&GlobalNamespace::LeaderboardPlayerInfo::set_playerName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "set_playerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::get_playerKey
// Il2CppName: get_playerKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LeaderboardPlayerInfo::*)()>(&GlobalNamespace::LeaderboardPlayerInfo::get_playerKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "get_playerKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::set_playerKey
// Il2CppName: set_playerKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardPlayerInfo::*)(::StringW)>(&GlobalNamespace::LeaderboardPlayerInfo::set_playerKey)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "set_playerKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::get_authType
// Il2CppName: get_authType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LeaderboardPlayerInfo::*)()>(&GlobalNamespace::LeaderboardPlayerInfo::get_authType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "get_authType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::set_authType
// Il2CppName: set_authType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardPlayerInfo::*)(::StringW)>(&GlobalNamespace::LeaderboardPlayerInfo::set_authType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "set_authType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::get_playerFriends
// Il2CppName: get_playerFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::LeaderboardPlayerInfo::*)()>(&GlobalNamespace::LeaderboardPlayerInfo::get_playerFriends)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "get_playerFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::set_playerFriends
// Il2CppName: set_playerFriends
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardPlayerInfo::*)(::StringW)>(&GlobalNamespace::LeaderboardPlayerInfo::set_playerFriends)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "set_playerFriends", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::get_succeeded
// Il2CppName: get_succeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LeaderboardPlayerInfo::*)()>(&GlobalNamespace::LeaderboardPlayerInfo::get_succeeded)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "get_succeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::set_succeeded
// Il2CppName: set_succeeded
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LeaderboardPlayerInfo::*)(bool)>(&GlobalNamespace::LeaderboardPlayerInfo::set_succeeded)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LeaderboardPlayerInfo*), "set_succeeded", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LeaderboardPlayerInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
