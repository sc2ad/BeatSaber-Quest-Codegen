// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventDataProcessor : public ::Il2CppObject {
    public:
    // private readonly System.Collections.Generic.Dictionary`2<BeatmapEventType,BeatmapEventData> _lastBeatmapEventDataDictionary
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>* lastBeatmapEventDataDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>*) == 0x8);
    // Creating value type constructor for type: BeatmapEventDataProcessor
    BeatmapEventDataProcessor(System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>* lastBeatmapEventDataDictionary_ = {}) noexcept : lastBeatmapEventDataDictionary{lastBeatmapEventDataDictionary_} {}
    // Creating conversion operator: operator System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>*
    constexpr operator System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>*() const noexcept {
      return lastBeatmapEventDataDictionary;
    }
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<BeatmapEventType,BeatmapEventData> _lastBeatmapEventDataDictionary
    System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>*& dyn__lastBeatmapEventDataDictionary();
    // public System.Void ProcessAddedEventData(BeatmapEventData eventData)
    // Offset: 0x26136B4
    void ProcessAddedEventData(GlobalNamespace::BeatmapEventData* eventData);
    // public System.Void ProcessEventDataPreInsert(System.Int32 index, BeatmapEventData eventData, System.Collections.Generic.List`1<BeatmapEventData> existingBeatmapEventData)
    // Offset: 0x261375C
    void ProcessEventDataPreInsert(int index, GlobalNamespace::BeatmapEventData* eventData, System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>* existingBeatmapEventData);
    // public System.Void .ctor()
    // Offset: 0x2613908
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventDataProcessor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapEventDataProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventDataProcessor*, creationType>()));
    }
  }; // BeatmapEventDataProcessor
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventDataProcessor), 16 + sizeof(System::Collections::Generic::Dictionary_2<GlobalNamespace::BeatmapEventType, GlobalNamespace::BeatmapEventData*>*)> __GlobalNamespace_BeatmapEventDataProcessorSizeCheck;
  static_assert(sizeof(BeatmapEventDataProcessor) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapEventDataProcessor*, "", "BeatmapEventDataProcessor");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataProcessor::ProcessAddedEventData
// Il2CppName: ProcessAddedEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataProcessor::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapEventDataProcessor::ProcessAddedEventData)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataProcessor*), "ProcessAddedEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataProcessor::ProcessEventDataPreInsert
// Il2CppName: ProcessEventDataPreInsert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataProcessor::*)(int, GlobalNamespace::BeatmapEventData*, System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::BeatmapEventDataProcessor::ProcessEventDataPreInsert)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    static auto* existingBeatmapEventData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataProcessor*), "ProcessEventDataPreInsert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, eventData, existingBeatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
