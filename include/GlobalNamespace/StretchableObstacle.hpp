// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
  // Forward declaring type: ParametricBoxFrameController
  class ParametricBoxFrameController;
  // Forward declaring type: ParametricBoxFakeGlowController
  class ParametricBoxFakeGlowController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StretchableObstacle
  class StretchableObstacle;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StretchableObstacle);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StretchableObstacle*, "", "StretchableObstacle");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: StretchableObstacle
  // [TokenAttribute] Offset: FFFFFFFF
  class StretchableObstacle : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Single _edgeSize
    // Size: 0x4
    // Offset: 0x18
    float edgeSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _coreOffset
    // Size: 0x4
    // Offset: 0x1C
    float coreOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _addColorMultiplier
    // Size: 0x4
    // Offset: 0x20
    float addColorMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _obstacleCoreLerpToWhiteFactor
    // Size: 0x4
    // Offset: 0x24
    float obstacleCoreLerpToWhiteFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _fakeGlowOffset
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 fakeGlowOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: fakeGlowOffset and: obstacleCore
    char __padding4[0x4] = {};
    // [SpaceAttribute] Offset: 0x111F840
    // [NullAllowed] Offset: 0x111F840
    // private UnityEngine.Transform _obstacleCore
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* obstacleCore;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private MaterialPropertyBlockController[] _materialPropertyBlockControllers
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*> materialPropertyBlockControllers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>) == 0x8);
    // private ParametricBoxFrameController _obstacleFrame
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::ParametricBoxFrameController* obstacleFrame;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ParametricBoxFrameController*) == 0x8);
    // [NullAllowed] Offset: 0x111F8A8
    // private ParametricBoxFakeGlowController _obstacleFakeGlow
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::ParametricBoxFakeGlowController* obstacleFakeGlow;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ParametricBoxFakeGlowController*) == 0x8);
    // private UnityEngine.Bounds _bounds
    // Size: 0x18
    // Offset: 0x58
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F8E0
    // Get static field: static private readonly System.Int32 _uvScaleID
    static int _get__uvScaleID();
    // Set static field: static private readonly System.Int32 _uvScaleID
    static void _set__uvScaleID(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F8F0
    // Get static field: static private readonly System.Int32 _tintColorID
    static int _get__tintColorID();
    // Set static field: static private readonly System.Int32 _tintColorID
    static void _set__tintColorID(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x111F900
    // Get static field: static private readonly System.Int32 _addColorID
    static int _get__addColorID();
    // Set static field: static private readonly System.Int32 _addColorID
    static void _set__addColorID(int value);
    // Get instance field reference: private System.Single _edgeSize
    [[deprecated("Use field access instead!")]] float& dyn__edgeSize();
    // Get instance field reference: private System.Single _coreOffset
    [[deprecated("Use field access instead!")]] float& dyn__coreOffset();
    // Get instance field reference: private System.Single _addColorMultiplier
    [[deprecated("Use field access instead!")]] float& dyn__addColorMultiplier();
    // Get instance field reference: private System.Single _obstacleCoreLerpToWhiteFactor
    [[deprecated("Use field access instead!")]] float& dyn__obstacleCoreLerpToWhiteFactor();
    // Get instance field reference: private UnityEngine.Vector3 _fakeGlowOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__fakeGlowOffset();
    // Get instance field reference: private UnityEngine.Transform _obstacleCore
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__obstacleCore();
    // Get instance field reference: private MaterialPropertyBlockController[] _materialPropertyBlockControllers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>& dyn__materialPropertyBlockControllers();
    // Get instance field reference: private ParametricBoxFrameController _obstacleFrame
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ParametricBoxFrameController*& dyn__obstacleFrame();
    // Get instance field reference: private ParametricBoxFakeGlowController _obstacleFakeGlow
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ParametricBoxFakeGlowController*& dyn__obstacleFakeGlow();
    // Get instance field reference: private UnityEngine.Bounds _bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn__bounds();
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x13ADEDC
    ::UnityEngine::Bounds get_bounds();
    // public System.Void .ctor()
    // Offset: 0x13AE46C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StretchableObstacle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StretchableObstacle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StretchableObstacle*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x13AE4DC
    static void _cctor();
    // public System.Void SetSizeAndColor(System.Single width, System.Single height, System.Single length, UnityEngine.Color color)
    // Offset: 0x13ADEF0
    void SetSizeAndColor(float width, float height, float length, ::UnityEngine::Color color);
    // protected System.Void OnValidate()
    // Offset: 0x13AE3E4
    void OnValidate();
  }; // StretchableObstacle
  #pragma pack(pop)
  static check_size<sizeof(StretchableObstacle), 88 + sizeof(::UnityEngine::Bounds)> __GlobalNamespace_StretchableObstacleSizeCheck;
  static_assert(sizeof(StretchableObstacle) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StretchableObstacle::get_bounds
// Il2CppName: get_bounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Bounds (GlobalNamespace::StretchableObstacle::*)()>(&GlobalNamespace::StretchableObstacle::get_bounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StretchableObstacle*), "get_bounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StretchableObstacle::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::StretchableObstacle::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::StretchableObstacle::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StretchableObstacle*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StretchableObstacle::SetSizeAndColor
// Il2CppName: SetSizeAndColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StretchableObstacle::*)(float, float, float, ::UnityEngine::Color)>(&GlobalNamespace::StretchableObstacle::SetSizeAndColor)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StretchableObstacle*), "SetSizeAndColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, length, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StretchableObstacle::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StretchableObstacle::*)()>(&GlobalNamespace::StretchableObstacle::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StretchableObstacle*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
