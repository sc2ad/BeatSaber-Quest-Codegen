// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapObjectExecutionRating
#include "GlobalNamespace/BeatmapObjectExecutionRating.hpp"
// Including type: NoteData/ScoringType
#include "GlobalNamespace/NoteData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteExecutionRating
  class NoteExecutionRating;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteExecutionRating);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteExecutionRating*, "", "NoteExecutionRating");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: NoteExecutionRating
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteExecutionRating : public ::GlobalNamespace::BeatmapObjectExecutionRating {
    public:
    // Nested type: ::GlobalNamespace::NoteExecutionRating::Rating
    struct Rating;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: NoteExecutionRating/Rating
    // [TokenAttribute] Offset: FFFFFFFF
    struct Rating/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Rating
      constexpr Rating(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NoteExecutionRating/Rating GoodCut
      static constexpr const int GoodCut = 0;
      // Get static field: static public NoteExecutionRating/Rating GoodCut
      static ::GlobalNamespace::NoteExecutionRating::Rating _get_GoodCut();
      // Set static field: static public NoteExecutionRating/Rating GoodCut
      static void _set_GoodCut(::GlobalNamespace::NoteExecutionRating::Rating value);
      // static field const value: static public NoteExecutionRating/Rating Miss
      static constexpr const int Miss = 1;
      // Get static field: static public NoteExecutionRating/Rating Miss
      static ::GlobalNamespace::NoteExecutionRating::Rating _get_Miss();
      // Set static field: static public NoteExecutionRating/Rating Miss
      static void _set_Miss(::GlobalNamespace::NoteExecutionRating::Rating value);
      // static field const value: static public NoteExecutionRating/Rating BadCut
      static constexpr const int BadCut = 2;
      // Get static field: static public NoteExecutionRating/Rating BadCut
      static ::GlobalNamespace::NoteExecutionRating::Rating _get_BadCut();
      // Set static field: static public NoteExecutionRating/Rating BadCut
      static void _set_BadCut(::GlobalNamespace::NoteExecutionRating::Rating value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // NoteExecutionRating/Rating
    #pragma pack(pop)
    static check_size<sizeof(NoteExecutionRating::Rating), 0 + sizeof(int)> __GlobalNamespace_NoteExecutionRating_RatingSizeCheck;
    static_assert(sizeof(NoteExecutionRating::Rating) == 0x4);
    public:
    // public readonly NoteExecutionRating/Rating rating
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::NoteExecutionRating::Rating rating;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteExecutionRating::Rating) == 0x4);
    // public readonly System.Int32 cutScore
    // Size: 0x4
    // Offset: 0x18
    int cutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 beforeCutScore
    // Size: 0x4
    // Offset: 0x1C
    int beforeCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 centerDistanceCutScore
    // Size: 0x4
    // Offset: 0x20
    int centerDistanceCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 afterCutScore
    // Size: 0x4
    // Offset: 0x24
    int afterCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly NoteData/ScoringType scoringType
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::NoteData::ScoringType scoringType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteData::ScoringType) == 0x4);
    public:
    // Deleting conversion operator: operator float
    constexpr operator float() const noexcept = delete;
    // Get instance field reference: public readonly NoteExecutionRating/Rating rating
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteExecutionRating::Rating& dyn_rating();
    // Get instance field reference: public readonly System.Int32 cutScore
    [[deprecated("Use field access instead!")]] int& dyn_cutScore();
    // Get instance field reference: public readonly System.Int32 beforeCutScore
    [[deprecated("Use field access instead!")]] int& dyn_beforeCutScore();
    // Get instance field reference: public readonly System.Int32 centerDistanceCutScore
    [[deprecated("Use field access instead!")]] int& dyn_centerDistanceCutScore();
    // Get instance field reference: public readonly System.Int32 afterCutScore
    [[deprecated("Use field access instead!")]] int& dyn_afterCutScore();
    // Get instance field reference: public readonly NoteData/ScoringType scoringType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData::ScoringType& dyn_scoringType();
    // public System.Void .ctor(System.Single time, NoteData/ScoringType scoringType, NoteExecutionRating/Rating rating, System.Int32 cutScore, System.Int32 beforeCutScore, System.Int32 centerDistanceCutScore, System.Int32 afterCutScore)
    // Offset: 0x1511BEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteExecutionRating* New_ctor(float time, ::GlobalNamespace::NoteData::ScoringType scoringType, ::GlobalNamespace::NoteExecutionRating::Rating rating, int cutScore, int beforeCutScore, int centerDistanceCutScore, int afterCutScore) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteExecutionRating::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteExecutionRating*, creationType>(time, scoringType, rating, cutScore, beforeCutScore, centerDistanceCutScore, afterCutScore)));
    }
  }; // NoteExecutionRating
  #pragma pack(pop)
  static check_size<sizeof(NoteExecutionRating), 40 + sizeof(::GlobalNamespace::NoteData::ScoringType)> __GlobalNamespace_NoteExecutionRatingSizeCheck;
  static_assert(sizeof(NoteExecutionRating) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteExecutionRating::Rating, "", "NoteExecutionRating/Rating");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteExecutionRating::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
