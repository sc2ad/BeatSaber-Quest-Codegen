// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ONSPAudioSource
#include "GlobalNamespace/ONSPAudioSource.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ONSPAudioSource::Parameters, "", "ONSPAudioSource/Parameters");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: ONSPAudioSource/Parameters
  // [TokenAttribute] Offset: FFFFFFFF
  struct ONSPAudioSource::Parameters/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: Parameters
    constexpr Parameters(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public ONSPAudioSource/Parameters P_GAIN
    static constexpr const int P_GAIN = 0;
    // Get static field: static public ONSPAudioSource/Parameters P_GAIN
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_GAIN();
    // Set static field: static public ONSPAudioSource/Parameters P_GAIN
    static void _set_P_GAIN(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_USEINVSQR
    static constexpr const int P_USEINVSQR = 1;
    // Get static field: static public ONSPAudioSource/Parameters P_USEINVSQR
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_USEINVSQR();
    // Set static field: static public ONSPAudioSource/Parameters P_USEINVSQR
    static void _set_P_USEINVSQR(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_NEAR
    static constexpr const int P_NEAR = 2;
    // Get static field: static public ONSPAudioSource/Parameters P_NEAR
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_NEAR();
    // Set static field: static public ONSPAudioSource/Parameters P_NEAR
    static void _set_P_NEAR(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_FAR
    static constexpr const int P_FAR = 3;
    // Get static field: static public ONSPAudioSource/Parameters P_FAR
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_FAR();
    // Set static field: static public ONSPAudioSource/Parameters P_FAR
    static void _set_P_FAR(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_RADIUS
    static constexpr const int P_RADIUS = 4;
    // Get static field: static public ONSPAudioSource/Parameters P_RADIUS
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_RADIUS();
    // Set static field: static public ONSPAudioSource/Parameters P_RADIUS
    static void _set_P_RADIUS(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_DISABLE_RFL
    static constexpr const int P_DISABLE_RFL = 5;
    // Get static field: static public ONSPAudioSource/Parameters P_DISABLE_RFL
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_DISABLE_RFL();
    // Set static field: static public ONSPAudioSource/Parameters P_DISABLE_RFL
    static void _set_P_DISABLE_RFL(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_VSPEAKERMODE
    static constexpr const int P_VSPEAKERMODE = 6;
    // Get static field: static public ONSPAudioSource/Parameters P_VSPEAKERMODE
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_VSPEAKERMODE();
    // Set static field: static public ONSPAudioSource/Parameters P_VSPEAKERMODE
    static void _set_P_VSPEAKERMODE(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_AMBISTAT
    static constexpr const int P_AMBISTAT = 7;
    // Get static field: static public ONSPAudioSource/Parameters P_AMBISTAT
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_AMBISTAT();
    // Set static field: static public ONSPAudioSource/Parameters P_AMBISTAT
    static void _set_P_AMBISTAT(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_READONLY_GLOBAL_RFL_ENABLED
    static constexpr const int P_READONLY_GLOBAL_RFL_ENABLED = 8;
    // Get static field: static public ONSPAudioSource/Parameters P_READONLY_GLOBAL_RFL_ENABLED
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_READONLY_GLOBAL_RFL_ENABLED();
    // Set static field: static public ONSPAudioSource/Parameters P_READONLY_GLOBAL_RFL_ENABLED
    static void _set_P_READONLY_GLOBAL_RFL_ENABLED(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_READONLY_NUM_VOICES
    static constexpr const int P_READONLY_NUM_VOICES = 9;
    // Get static field: static public ONSPAudioSource/Parameters P_READONLY_NUM_VOICES
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_READONLY_NUM_VOICES();
    // Set static field: static public ONSPAudioSource/Parameters P_READONLY_NUM_VOICES
    static void _set_P_READONLY_NUM_VOICES(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_SENDLEVEL
    static constexpr const int P_SENDLEVEL = 10;
    // Get static field: static public ONSPAudioSource/Parameters P_SENDLEVEL
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_SENDLEVEL();
    // Set static field: static public ONSPAudioSource/Parameters P_SENDLEVEL
    static void _set_P_SENDLEVEL(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // static field const value: static public ONSPAudioSource/Parameters P_NUM
    static constexpr const int P_NUM = 11;
    // Get static field: static public ONSPAudioSource/Parameters P_NUM
    static ::GlobalNamespace::ONSPAudioSource::Parameters _get_P_NUM();
    // Set static field: static public ONSPAudioSource/Parameters P_NUM
    static void _set_P_NUM(::GlobalNamespace::ONSPAudioSource::Parameters value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // ONSPAudioSource/Parameters
  #pragma pack(pop)
  static check_size<sizeof(ONSPAudioSource::Parameters), 0 + sizeof(int)> __GlobalNamespace_ONSPAudioSource_ParametersSizeCheck;
  static_assert(sizeof(ONSPAudioSource::Parameters) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
