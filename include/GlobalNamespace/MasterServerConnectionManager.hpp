// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LiteNetLibConnectionManager
  class LiteNetLibConnectionManager;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: MasterServerEndPoint
  class MasterServerEndPoint;
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
  // Forward declaring type: UserMessageHandler
  class UserMessageHandler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: MasterServerConnectionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MasterServerConnectionManager : public ::Il2CppObject/*, public GlobalNamespace::IConnectionManager*/ {
    public:
    // Nested type: GlobalNamespace::MasterServerConnectionManager::ConnectionState
    struct ConnectionState;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::MasterServerConnectionManagerParamsBase
    class MasterServerConnectionManagerParamsBase;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::StartClientParams
    class StartClientParams;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::$ConnectToEndPoint$d__84
    struct $ConnectToEndPoint$d__84;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServerConnectionManager/ConnectionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConnectionState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServerConnectionManager/ConnectionState Unconnected
      static constexpr const int Unconnected = 0;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Unconnected
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Unconnected();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Unconnected
      static void _set_Unconnected(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // static field const value: static public MasterServerConnectionManager/ConnectionState Connecting
      static constexpr const int Connecting = 1;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Connecting
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Connecting();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Connecting
      static void _set_Connecting(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // static field const value: static public MasterServerConnectionManager/ConnectionState Connected
      static constexpr const int Connected = 2;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Connected
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Connected();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Connected
      static void _set_Connected(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // static field const value: static public MasterServerConnectionManager/ConnectionState Disconnecting
      static constexpr const int Disconnecting = 3;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Disconnecting
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Disconnecting();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Disconnecting
      static void _set_Disconnecting(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // MasterServerConnectionManager/ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(MasterServerConnectionManager::ConnectionState), 0 + sizeof(int)> __GlobalNamespace_MasterServerConnectionManager_ConnectionStateSizeCheck;
    static_assert(sizeof(MasterServerConnectionManager::ConnectionState) == 0x4);
    // private readonly MasterServer.ITimeProvider _timeProvider
    // Size: 0x8
    // Offset: 0x10
    MasterServer::ITimeProvider* timeProvider;
    // Field size check
    static_assert(sizeof(MasterServer::ITimeProvider*) == 0x8);
    // private readonly LiteNetLibConnectionManager _liteNetLibConnectionManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::LiteNetLibConnectionManager* liteNetLibConnectionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LiteNetLibConnectionManager*) == 0x8);
    // private System.String _code
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* code;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private MasterServer.UserMessageHandler _messageHandler
    // Size: 0x8
    // Offset: 0x28
    MasterServer::UserMessageHandler* messageHandler;
    // Field size check
    static_assert(sizeof(MasterServer::UserMessageHandler*) == 0x8);
    // private BeatmapLevelSelectionMask _selectionMask
    // Size: 0x18
    // Offset: 0x30
    GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // private GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x48
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private System.String _managerId
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppString* managerId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private MasterServerConnectionManager/ConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x68
    GlobalNamespace::MasterServerConnectionManager::ConnectionState connectionState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MasterServerConnectionManager::ConnectionState) == 0x4);
    // Padding between fields: connectionState and: connectionCancellationTokenSource
    char __padding7[0x4] = {};
    // private System.Threading.CancellationTokenSource _connectionCancellationTokenSource
    // Size: 0x8
    // Offset: 0x70
    System::Threading::CancellationTokenSource* connectionCancellationTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A30
    // private System.Action onConnectedEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action* onConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A40
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A50
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A60
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnection*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A70
    // private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A80
    // private System.Action`2<IConnection,System.Single> onLatencyUpdatedEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9A90
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*) == 0x8);
    // Creating value type constructor for type: MasterServerConnectionManager
    MasterServerConnectionManager(MasterServer::ITimeProvider* timeProvider_ = {}, GlobalNamespace::LiteNetLibConnectionManager* liteNetLibConnectionManager_ = {}, ::Il2CppString* code_ = {}, MasterServer::UserMessageHandler* messageHandler_ = {}, GlobalNamespace::BeatmapLevelSelectionMask selectionMask_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, ::Il2CppString* managerId_ = {}, GlobalNamespace::MasterServerConnectionManager::ConnectionState connectionState_ = {}, System::Threading::CancellationTokenSource* connectionCancellationTokenSource_ = {}, System::Action* onConnectedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent_ = {}, System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent_ = {}) noexcept : timeProvider{timeProvider_}, liteNetLibConnectionManager{liteNetLibConnectionManager_}, code{code_}, messageHandler{messageHandler_}, selectionMask{selectionMask_}, configuration{configuration_}, managerId{managerId_}, connectionState{connectionState_}, connectionCancellationTokenSource{connectionCancellationTokenSource_}, onConnectedEvent{onConnectedEvent_}, onDisconnectedEvent{onDisconnectedEvent_}, onConnectionFailedEvent{onConnectionFailedEvent_}, onConnectionConnectedEvent{onConnectionConnectedEvent_}, onConnectionDisconnectedEvent{onConnectionDisconnectedEvent_}, onLatencyUpdatedEvent{onLatencyUpdatedEvent_}, onReceivedDataEvent{onReceivedDataEvent_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectionManager
    operator GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectionManager*>(this);
    }
    // Get instance field reference: private readonly MasterServer.ITimeProvider _timeProvider
    MasterServer::ITimeProvider*& dyn__timeProvider();
    // Get instance field reference: private readonly LiteNetLibConnectionManager _liteNetLibConnectionManager
    GlobalNamespace::LiteNetLibConnectionManager*& dyn__liteNetLibConnectionManager();
    // Get instance field reference: private System.String _code
    ::Il2CppString*& dyn__code();
    // Get instance field reference: private MasterServer.UserMessageHandler _messageHandler
    MasterServer::UserMessageHandler*& dyn__messageHandler();
    // Get instance field reference: private BeatmapLevelSelectionMask _selectionMask
    GlobalNamespace::BeatmapLevelSelectionMask& dyn__selectionMask();
    // Get instance field reference: private GameplayServerConfiguration _configuration
    GlobalNamespace::GameplayServerConfiguration& dyn__configuration();
    // Get instance field reference: private System.String _managerId
    ::Il2CppString*& dyn__managerId();
    // Get instance field reference: private MasterServerConnectionManager/ConnectionState _connectionState
    GlobalNamespace::MasterServerConnectionManager::ConnectionState& dyn__connectionState();
    // Get instance field reference: private System.Threading.CancellationTokenSource _connectionCancellationTokenSource
    System::Threading::CancellationTokenSource*& dyn__connectionCancellationTokenSource();
    // Get instance field reference: private System.Action onConnectedEvent
    System::Action*& dyn_onConnectedEvent();
    // Get instance field reference: private System.Action`1<DisconnectedReason> onDisconnectedEvent
    System::Action_1<GlobalNamespace::DisconnectedReason>*& dyn_onDisconnectedEvent();
    // Get instance field reference: private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    System::Action_1<GlobalNamespace::ConnectionFailedReason>*& dyn_onConnectionFailedEvent();
    // Get instance field reference: private System.Action`1<IConnection> onConnectionConnectedEvent
    System::Action_1<GlobalNamespace::IConnection*>*& dyn_onConnectionConnectedEvent();
    // Get instance field reference: private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*& dyn_onConnectionDisconnectedEvent();
    // Get instance field reference: private System.Action`2<IConnection,System.Single> onLatencyUpdatedEvent
    System::Action_2<GlobalNamespace::IConnection*, float>*& dyn_onLatencyUpdatedEvent();
    // Get instance field reference: private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*& dyn_onReceivedDataEvent();
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x12E7158
    void add_onConnectedEvent(System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x12E71FC
    void remove_onConnectedEvent(System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x12E72A0
    void add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x12E7344
    void remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x12E73E8
    void add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x12E748C
    void remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x12E7530
    void add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x12E75D4
    void remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x12E7678
    void add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x12E771C
    void remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x12E77C0
    void add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x12E7864
    void remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x12E7908
    void add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x12E79AC
    void remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.String get_userId()
    // Offset: 0x12E7A50
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x12E7A6C
    ::Il2CppString* get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x12E7A88
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x12E7A98
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x12E7AA8
    bool get_isDisconnecting();
    // public System.Int32 get_connectionCount()
    // Offset: 0x12E7AB8
    int get_connectionCount();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x12E7AD4
    bool get_isConnectionOwner();
    // public System.Boolean get_isDisposed()
    // Offset: 0x12E7AF0
    bool get_isDisposed();
    // public System.Int32 get_port()
    // Offset: 0x12E7B0C
    int get_port();
    // public System.String get_secret()
    // Offset: 0x12E7B28
    ::Il2CppString* get_secret();
    // public BeatmapLevelSelectionMask get_selectionMask()
    // Offset: 0x12E7B44
    GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask();
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x12E7B58
    GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public System.String get_managerId()
    // Offset: 0x12E7B6C
    ::Il2CppString* get_managerId();
    // public System.String get_code()
    // Offset: 0x12E7B74
    ::Il2CppString* get_code();
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x12E7B7C
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x12E7B98
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection);
    // public System.Void PollUpdate()
    // Offset: 0x12E7BB4
    void PollUpdate();
    // public System.Void .ctor(MasterServer.ITimeProvider timeProvider)
    // Offset: 0x12E7C68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MasterServerConnectionManager* New_ctor(MasterServer::ITimeProvider* timeProvider) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MasterServerConnectionManager*, creationType>(timeProvider)));
    }
    // private System.Void InitMasterServerHandler(MasterServerEndPoint masterServerEndPoint, IAuthenticationTokenProvider authenticationTokenProvider)
    // Offset: 0x12E7EEC
    void InitMasterServerHandler(GlobalNamespace::MasterServerEndPoint* masterServerEndPoint, GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider);
    // private System.Void DisposeMasterServerHandler()
    // Offset: 0x12E80B4
    void DisposeMasterServerHandler();
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool Init(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::Init");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initParams)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___generic__method, initParams);
    }
    // public System.Void Dispose()
    // Offset: 0x12E8170
    void Dispose();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x12E81A0
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void DisconnectInternal(ConnectionFailedReason connectionFailedReason)
    // Offset: 0x12E8348
    void DisconnectInternal(GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x12E81A8
    void DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x12E8354
    GlobalNamespace::IConnection* GetConnection(int index);
    // private System.Void HandleConnected()
    // Offset: 0x12E8370
    void HandleConnected();
    // private System.Void HandleConnectionConnected(IConnection connection)
    // Offset: 0x12E83D0
    void HandleConnectionConnected(GlobalNamespace::IConnection* connection);
    // private System.Void HandleConnectionDisconnected(IConnection connection, DisconnectedReason reason)
    // Offset: 0x12E8444
    void HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason reason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason failedReason)
    // Offset: 0x12E84C0
    void HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason failedReason);
    // private System.Void HandleLatencyUpdate(IConnection connection, System.Single latency)
    // Offset: 0x12E84CC
    void HandleLatencyUpdate(GlobalNamespace::IConnection* connection, float latency);
    // private System.Void HandleReceivedData(IConnection connection, LiteNetLib.Utils.NetDataReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x12E8554
    void HandleReceivedData(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void HandleConnectToClient(System.String userId, System.String userName, System.Net.IPEndPoint remoteEndPoint, System.Byte[] preMasterSecret, System.Byte[] myRandom, System.Byte[] remoteRandom, System.Boolean isConnectionOwner, System.Boolean isDedicatedServer)
    // Offset: 0x12E85E4
    void HandleConnectToClient(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer);
    // private System.Void MasterServerConnectToServer(System.String userId, System.String userName, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.String secret, System.String code)
    // Offset: 0x12E897C
    void MasterServerConnectToServer(::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret, ::Il2CppString* code);
    // private System.Void HandleConnectToServerSuccess(System.String userId, System.String userName, System.Net.IPEndPoint remoteEndPoint, System.String secret, System.String code, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.Byte[] preMasterSecret, System.Byte[] myRandom, System.Byte[] remoteRandom, System.Boolean isConnectionOwner, System.Boolean isDedicatedServer, System.String managerId)
    // Offset: 0x12E8AD8
    void HandleConnectToServerSuccess(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* secret, ::Il2CppString* code, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer, ::Il2CppString* managerId);
    // private System.Void ConnectToEndPoint(System.Net.IPEndPoint remoteEndPoint, System.String userId, System.String userName, System.Byte[] preMasterSecret, System.Byte[] myRandom, System.Byte[] remoteRandom, System.Boolean remoteUserIsConnectionOwner, System.Boolean isDedicatedServer)
    // Offset: 0x12E886C
    void ConnectToEndPoint(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool remoteUserIsConnectionOwner, bool isDedicatedServer);
    // public System.Void GetPublicServers(System.Action`1<System.Collections.Generic.IReadOnlyList`1<PublicServerInfo>> onSuccess, System.Action`1<ConnectionFailedReason> onFailure, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.Int32 offset, System.Int32 count)
    // Offset: 0x12E8D7C
    void GetPublicServers(System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration, int offset, int count);
    // public System.Void .ctor()
    // Offset: 0x12E7C04
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MasterServerConnectionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MasterServerConnectionManager*, creationType>()));
    }
  }; // MasterServerConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(MasterServerConnectionManager), 168 + sizeof(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)> __GlobalNamespace_MasterServerConnectionManagerSizeCheck;
  static_assert(sizeof(MasterServerConnectionManager) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MasterServerConnectionManager*, "", "MasterServerConnectionManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MasterServerConnectionManager::ConnectionState, "", "MasterServerConnectionManager/ConnectionState");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action*)>(&GlobalNamespace::MasterServerConnectionManager::add_onConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::MasterServerConnectionManager::add_onDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::MasterServerConnectionManager::add_onConnectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onConnectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&GlobalNamespace::MasterServerConnectionManager::add_onConnectionConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<GlobalNamespace::IConnection*>*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onConnectionConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::MasterServerConnectionManager::add_onConnectionDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onConnectionDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onLatencyUpdatedEvent
// Il2CppName: add_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&GlobalNamespace::MasterServerConnectionManager::add_onLatencyUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onLatencyUpdatedEvent
// Il2CppName: remove_onLatencyUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_2<GlobalNamespace::IConnection*, float>*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onLatencyUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onLatencyUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&GlobalNamespace::MasterServerConnectionManager::add_onReceivedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader"), ::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)>(&GlobalNamespace::MasterServerConnectionManager::remove_onReceivedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader"), ::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_isConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_isConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_isDisconnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_connectionCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_isConnectionOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_isDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_secret)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_selectionMask
// Il2CppName: get_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapLevelSelectionMask (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_selectionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_managerId
// Il2CppName: get_managerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_managerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_managerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::get_code
// Il2CppName: get_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::get_code)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "get_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod)>(&GlobalNamespace::MasterServerConnectionManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::DeliveryMethod, GlobalNamespace::IConnection*)>(&GlobalNamespace::MasterServerConnectionManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    static auto* excludingConnection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, deliveryMethod, excludingConnection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::InitMasterServerHandler
// Il2CppName: InitMasterServerHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::MasterServerEndPoint*, GlobalNamespace::IAuthenticationTokenProvider*)>(&GlobalNamespace::MasterServerConnectionManager::InitMasterServerHandler)> {
  static const MethodInfo* get() {
    static auto* masterServerEndPoint = &::il2cpp_utils::GetClassFromName("", "MasterServerEndPoint")->byval_arg;
    static auto* authenticationTokenProvider = &::il2cpp_utils::GetClassFromName("", "IAuthenticationTokenProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "InitMasterServerHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{masterServerEndPoint, authenticationTokenProvider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::DisposeMasterServerHandler
// Il2CppName: DisposeMasterServerHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::DisposeMasterServerHandler)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "DisposeMasterServerHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::MasterServerConnectionManager::Disconnect)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::MasterServerConnectionManager::DisconnectInternal)> {
  static const MethodInfo* get() {
    static auto* connectionFailedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionFailedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::DisconnectedReason, GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::MasterServerConnectionManager::DisconnectInternal)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    static auto* connectionFailedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason, connectionFailedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnection* (GlobalNamespace::MasterServerConnectionManager::*)(int)>(&GlobalNamespace::MasterServerConnectionManager::GetConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleConnected
// Il2CppName: HandleConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)()>(&GlobalNamespace::MasterServerConnectionManager::HandleConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleConnectionConnected
// Il2CppName: HandleConnectionConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::IConnection*)>(&GlobalNamespace::MasterServerConnectionManager::HandleConnectionConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleConnectionConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleConnectionDisconnected
// Il2CppName: HandleConnectionDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::MasterServerConnectionManager::HandleConnectionDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleConnectionDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleConnectionFailed
// Il2CppName: HandleConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::MasterServerConnectionManager::HandleConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* failedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleLatencyUpdate
// Il2CppName: HandleLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::IConnection*, float)>(&GlobalNamespace::MasterServerConnectionManager::HandleLatencyUpdate)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, latency});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleReceivedData
// Il2CppName: HandleReceivedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod)>(&GlobalNamespace::MasterServerConnectionManager::HandleReceivedData)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleReceivedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reader, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleConnectToClient
// Il2CppName: HandleConnectToClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&GlobalNamespace::MasterServerConnectionManager::HandleConnectToClient)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* preMasterSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* myRandom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* remoteRandom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* isConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isDedicatedServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleConnectToClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, userName, remoteEndPoint, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::MasterServerConnectToServer
// Il2CppName: MasterServerConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration, ::Il2CppString*, ::Il2CppString*)>(&GlobalNamespace::MasterServerConnectionManager::MasterServerConnectToServer)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "MasterServerConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, userName, selectionMask, configuration, secret, code});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::HandleConnectToServerSuccess
// Il2CppName: HandleConnectToServerSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(::Il2CppString*, ::Il2CppString*, System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool, ::Il2CppString*)>(&GlobalNamespace::MasterServerConnectionManager::HandleConnectToServerSuccess)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* preMasterSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* myRandom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* remoteRandom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* isConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isDedicatedServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* managerId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "HandleConnectToServerSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, userName, remoteEndPoint, secret, code, selectionMask, configuration, preMasterSecret, myRandom, remoteRandom, isConnectionOwner, isDedicatedServer, managerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::ConnectToEndPoint
// Il2CppName: ConnectToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Net::IPEndPoint*, ::Il2CppString*, ::Il2CppString*, ::Array<uint8_t>*, ::Array<uint8_t>*, ::Array<uint8_t>*, bool, bool)>(&GlobalNamespace::MasterServerConnectionManager::ConnectToEndPoint)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* preMasterSecret = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* myRandom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* remoteRandom = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    static auto* remoteUserIsConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isDedicatedServer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "ConnectToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, userId, userName, preMasterSecret, myRandom, remoteRandom, remoteUserIsConnectionOwner, isDedicatedServer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::GetPublicServers
// Il2CppName: GetPublicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MasterServerConnectionManager::*)(System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>*, System::Action_1<GlobalNamespace::ConnectionFailedReason>*, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration, int, int)>(&GlobalNamespace::MasterServerConnectionManager::GetPublicServers)> {
  static const MethodInfo* get() {
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PublicServerInfo")})})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MasterServerConnectionManager*), "GetPublicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onSuccess, onFailure, selectionMask, configuration, offset, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MasterServerConnectionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
