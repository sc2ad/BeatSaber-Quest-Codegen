// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderIntensityEffect
  class SliderIntensityEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderIntensityEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderIntensityEffect*, "", "SliderIntensityEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: SliderIntensityEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderIntensityEffect : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SliderIntensityEffect::InitData
    class InitData;
    // Nested type: ::GlobalNamespace::SliderIntensityEffect::FadeElement
    class FadeElement;
    // Nested type: ::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate
    class IntensityCalculationDelegate;
    // Nested type: ::GlobalNamespace::SliderIntensityEffect::$ProcessEffectCoroutine$d__32
    class $ProcessEffectCoroutine$d__32;
    public:
    // private System.Single _longSliderHeadIntensity
    // Size: 0x4
    // Offset: 0x18
    float longSliderHeadIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shortSliderHeadIntensity
    // Size: 0x4
    // Offset: 0x1C
    float shortSliderHeadIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _tailIntensity
    // Size: 0x4
    // Offset: 0x20
    float tailIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x111FA38
    // private System.Single _fadeOutDuration
    // Size: 0x4
    // Offset: 0x24
    float fadeOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _stayOffDuration
    // Size: 0x4
    // Offset: 0x28
    float stayOffDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x111FA80
    // private System.Single _flashBoost
    // Size: 0x4
    // Offset: 0x2C
    float flashBoost;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _flashInDuration
    // Size: 0x4
    // Offset: 0x30
    float flashInDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _flashOutDuration
    // Size: 0x4
    // Offset: 0x34
    float flashOutDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InjectAttribute] Offset: 0x111FAD8
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0x111FAE8
    // private readonly SliderIntensityEffect/InitData _initData
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SliderIntensityEffect::InitData* initData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderIntensityEffect::InitData*) == 0x8);
    // private System.Action fadeInDidStartEvent
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* fadeInDidStartEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Single _coreIntensity
    // Size: 0x4
    // Offset: 0x50
    float coreIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _effectIntensity
    // Size: 0x4
    // Offset: 0x54
    float effectIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _halfJumpDuration
    // Size: 0x4
    // Offset: 0x58
    float halfJumpDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _sliderDuration
    // Size: 0x4
    // Offset: 0x5C
    float sliderDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single headIntensity
    // Size: 0x4
    // Offset: 0x60
    float headIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: headIntensity and: intensityCalculationDelegate
    char __padding15[0x4] = {};
    // private SliderIntensityEffect/IntensityCalculationDelegate _intensityCalculationDelegate
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate* intensityCalculationDelegate;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate*) == 0x8);
    // private SliderIntensityEffect/FadeElement[] _dipEffectFadeElements
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*> dipEffectFadeElements;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>) == 0x8);
    // private SliderIntensityEffect/FadeElement[] _flashEffectFadeElements
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*> flashEffectFadeElements;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>) == 0x8);
    // private SliderIntensityEffect/FadeElement[] _fadeInEffectFadeElements
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*> fadeInEffectFadeElements;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _longSliderHeadIntensity
    [[deprecated("Use field access instead!")]] float& dyn__longSliderHeadIntensity();
    // Get instance field reference: private System.Single _shortSliderHeadIntensity
    [[deprecated("Use field access instead!")]] float& dyn__shortSliderHeadIntensity();
    // Get instance field reference: private System.Single _tailIntensity
    [[deprecated("Use field access instead!")]] float& dyn__tailIntensity();
    // Get instance field reference: private System.Single _fadeOutDuration
    [[deprecated("Use field access instead!")]] float& dyn__fadeOutDuration();
    // Get instance field reference: private System.Single _stayOffDuration
    [[deprecated("Use field access instead!")]] float& dyn__stayOffDuration();
    // Get instance field reference: private System.Single _flashBoost
    [[deprecated("Use field access instead!")]] float& dyn__flashBoost();
    // Get instance field reference: private System.Single _flashInDuration
    [[deprecated("Use field access instead!")]] float& dyn__flashInDuration();
    // Get instance field reference: private System.Single _flashOutDuration
    [[deprecated("Use field access instead!")]] float& dyn__flashOutDuration();
    // Get instance field reference: private readonly AudioTimeSyncController _audioTimeSyncController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioTimeSyncController*& dyn__audioTimeSyncController();
    // Get instance field reference: private readonly SliderIntensityEffect/InitData _initData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::InitData*& dyn__initData();
    // Get instance field reference: private System.Action fadeInDidStartEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_fadeInDidStartEvent();
    // Get instance field reference: private System.Single _coreIntensity
    [[deprecated("Use field access instead!")]] float& dyn__coreIntensity();
    // Get instance field reference: private System.Single _effectIntensity
    [[deprecated("Use field access instead!")]] float& dyn__effectIntensity();
    // Get instance field reference: private System.Single _halfJumpDuration
    [[deprecated("Use field access instead!")]] float& dyn__halfJumpDuration();
    // Get instance field reference: private System.Single _sliderDuration
    [[deprecated("Use field access instead!")]] float& dyn__sliderDuration();
    // Get instance field reference: private System.Single headIntensity
    [[deprecated("Use field access instead!")]] float& dyn_headIntensity();
    // Get instance field reference: private SliderIntensityEffect/IntensityCalculationDelegate _intensityCalculationDelegate
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect::IntensityCalculationDelegate*& dyn__intensityCalculationDelegate();
    // Get instance field reference: private SliderIntensityEffect/FadeElement[] _dipEffectFadeElements
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& dyn__dipEffectFadeElements();
    // Get instance field reference: private SliderIntensityEffect/FadeElement[] _flashEffectFadeElements
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& dyn__flashEffectFadeElements();
    // Get instance field reference: private SliderIntensityEffect/FadeElement[] _fadeInEffectFadeElements
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>& dyn__fadeInEffectFadeElements();
    // public System.Single get_intensity()
    // Offset: 0x1492130
    float get_intensity();
    // public System.Single get_colorIntensity()
    // Offset: 0x14957E0
    float get_colorIntensity();
    // public System.Void add_fadeInDidStartEvent(System.Action value)
    // Offset: 0x1493AA8
    void add_fadeInDidStartEvent(::System::Action* value);
    // public System.Void remove_fadeInDidStartEvent(System.Action value)
    // Offset: 0x1493F84
    void remove_fadeInDidStartEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x1495C44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderIntensityEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderIntensityEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderIntensityEffect*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1495808
    void Awake();
    // public System.Void Init(System.Single sliderDuration, System.Single halfJumpDuration, System.Boolean startVisible)
    // Offset: 0x14926F8
    void Init(float sliderDuration, float halfJumpDuration, bool startVisible);
    // public System.Void ManualUpdate(System.Single timeSinceHeadNoteJump)
    // Offset: 0x1494344
    void ManualUpdate(float timeSinceHeadNoteJump);
    // private System.Collections.IEnumerator ProcessEffectCoroutine(System.Collections.Generic.IEnumerable`1<SliderIntensityEffect/FadeElement> fadeElements)
    // Offset: 0x1495B60
    ::System::Collections::IEnumerator* ProcessEffectCoroutine(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>* fadeElements);
    // public System.Void StartIntensityDipEffect()
    // Offset: 0x1494CCC
    void StartIntensityDipEffect();
    // public System.Void StartIntensityFadeInEffect()
    // Offset: 0x1494AB8
    void StartIntensityFadeInEffect();
    // public System.Void StartFlashEffect()
    // Offset: 0x1495C08
    void StartFlashEffect();
    // private System.Void <Awake>b__29_0()
    // Offset: 0x1495C64
    void $Awake$b__29_0();
    // private System.Void <Awake>b__29_1()
    // Offset: 0x1495C78
    void $Awake$b__29_1();
  }; // SliderIntensityEffect
  #pragma pack(pop)
  static check_size<sizeof(SliderIntensityEffect), 128 + sizeof(::ArrayW<::GlobalNamespace::SliderIntensityEffect::FadeElement*>)> __GlobalNamespace_SliderIntensityEffectSizeCheck;
  static_assert(sizeof(SliderIntensityEffect) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::get_intensity
// Il2CppName: get_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::get_intensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "get_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::get_colorIntensity
// Il2CppName: get_colorIntensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::get_colorIntensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "get_colorIntensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::add_fadeInDidStartEvent
// Il2CppName: add_fadeInDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)(::System::Action*)>(&GlobalNamespace::SliderIntensityEffect::add_fadeInDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "add_fadeInDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::remove_fadeInDidStartEvent
// Il2CppName: remove_fadeInDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)(::System::Action*)>(&GlobalNamespace::SliderIntensityEffect::remove_fadeInDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "remove_fadeInDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)(float, float, bool)>(&GlobalNamespace::SliderIntensityEffect::Init)> {
  static const MethodInfo* get() {
    static auto* sliderDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* halfJumpDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startVisible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderDuration, halfJumpDuration, startVisible});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)(float)>(&GlobalNamespace::SliderIntensityEffect::ManualUpdate)> {
  static const MethodInfo* get() {
    static auto* timeSinceHeadNoteJump = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeSinceHeadNoteJump});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::ProcessEffectCoroutine
// Il2CppName: ProcessEffectCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SliderIntensityEffect::*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::SliderIntensityEffect::FadeElement*>*)>(&GlobalNamespace::SliderIntensityEffect::ProcessEffectCoroutine)> {
  static const MethodInfo* get() {
    static auto* fadeElements = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderIntensityEffect/FadeElement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "ProcessEffectCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fadeElements});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::StartIntensityDipEffect
// Il2CppName: StartIntensityDipEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::StartIntensityDipEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "StartIntensityDipEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::StartIntensityFadeInEffect
// Il2CppName: StartIntensityFadeInEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::StartIntensityFadeInEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "StartIntensityFadeInEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::StartFlashEffect
// Il2CppName: StartFlashEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::StartFlashEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "StartFlashEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::$Awake$b__29_0
// Il2CppName: <Awake>b__29_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::$Awake$b__29_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "<Awake>b__29_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderIntensityEffect::$Awake$b__29_1
// Il2CppName: <Awake>b__29_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderIntensityEffect::*)()>(&GlobalNamespace::SliderIntensityEffect::$Awake$b__29_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderIntensityEffect*), "<Awake>b__29_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
