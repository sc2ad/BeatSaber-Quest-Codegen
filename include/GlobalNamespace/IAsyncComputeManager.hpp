// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AsyncComputeOperation
  class AsyncComputeOperation;
  // Forward declaring type: AsyncComputeOperation`1<T>
  template<typename T>
  class AsyncComputeOperation_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: IAsyncComputeManager
  // [TokenAttribute] Offset: FFFFFFFF
  class IAsyncComputeManager/*, public System::IDisposable*/ {
    public:
    // Creating value type constructor for type: IAsyncComputeManager
    IAsyncComputeManager() noexcept {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Void BeginOperation(AsyncComputeOperation asyncComputeOperation)
    // Offset: 0xFFFFFFFF
    void BeginOperation(GlobalNamespace::AsyncComputeOperation* asyncComputeOperation);
    // public System.Threading.Tasks.Task`1<T> BeginOperation(AsyncComputeOperation`1<T> asyncComputeOperation)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* BeginOperation(GlobalNamespace::AsyncComputeOperation_1<T>* asyncComputeOperation) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::IAsyncComputeManager::BeginOperation");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "BeginOperation", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(asyncComputeOperation)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<T>*, false>(___instance_arg, ___generic__method, asyncComputeOperation);
    }
  }; // IAsyncComputeManager
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::IAsyncComputeManager*, "", "IAsyncComputeManager");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IAsyncComputeManager::BeginOperation
// Il2CppName: BeginOperation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IAsyncComputeManager::*)(GlobalNamespace::AsyncComputeOperation*)>(&GlobalNamespace::IAsyncComputeManager::BeginOperation)> {
  static const MethodInfo* get() {
    static auto* asyncComputeOperation = &::il2cpp_utils::GetClassFromName("", "AsyncComputeOperation")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IAsyncComputeManager*), "BeginOperation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{asyncComputeOperation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IAsyncComputeManager::BeginOperation
// Il2CppName: BeginOperation
// Cannot write MetadataGetter for generic methods!
