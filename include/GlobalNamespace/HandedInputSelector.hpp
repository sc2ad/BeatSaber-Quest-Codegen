// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRInput
#include "GlobalNamespace/OVRInput.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: OVRInputModule
  class OVRInputModule;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HandedInputSelector
  class HandedInputSelector;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HandedInputSelector);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HandedInputSelector*, "", "HandedInputSelector");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: HandedInputSelector
  // [TokenAttribute] Offset: FFFFFFFF
  class HandedInputSelector : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private OVRCameraRig m_CameraRig
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::OVRCameraRig* m_CameraRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private UnityEngine.EventSystems.OVRInputModule m_InputModule
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::EventSystems::OVRInputModule* m_InputModule;
    // Field size check
    static_assert(sizeof(::UnityEngine::EventSystems::OVRInputModule*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private OVRCameraRig m_CameraRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn_m_CameraRig();
    // Get instance field reference: private UnityEngine.EventSystems.OVRInputModule m_InputModule
    [[deprecated("Use field access instead!")]] ::UnityEngine::EventSystems::OVRInputModule*& dyn_m_InputModule();
    // public System.Void .ctor()
    // Offset: 0xE8A860
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandedInputSelector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HandedInputSelector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandedInputSelector*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xE8A6D4
    void Start();
    // private System.Void Update()
    // Offset: 0xE8A75C
    void Update();
    // private System.Void SetActiveController(OVRInput/Controller c)
    // Offset: 0xE8A824
    void SetActiveController(::GlobalNamespace::OVRInput::Controller c);
  }; // HandedInputSelector
  #pragma pack(pop)
  static check_size<sizeof(HandedInputSelector), 32 + sizeof(::UnityEngine::EventSystems::OVRInputModule*)> __GlobalNamespace_HandedInputSelectorSizeCheck;
  static_assert(sizeof(HandedInputSelector) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HandedInputSelector::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HandedInputSelector::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandedInputSelector::*)()>(&GlobalNamespace::HandedInputSelector::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandedInputSelector*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandedInputSelector::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandedInputSelector::*)()>(&GlobalNamespace::HandedInputSelector::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandedInputSelector*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HandedInputSelector::SetActiveController
// Il2CppName: SetActiveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HandedInputSelector::*)(::GlobalNamespace::OVRInput::Controller)>(&GlobalNamespace::HandedInputSelector::SetActiveController)> {
  static const MethodInfo* get() {
    static auto* c = &::il2cpp_utils::GetClassFromName("", "OVRInput/Controller")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HandedInputSelector*), "SetActiveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{c});
  }
};
