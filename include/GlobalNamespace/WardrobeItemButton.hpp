// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
// Including type: GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem
#include "GorillaNetworking/CosmeticsController_CosmeticItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HeadModel
  class HeadModel;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WardrobeItemButton
  class WardrobeItemButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WardrobeItemButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WardrobeItemButton*, "", "WardrobeItemButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x92
  #pragma pack(push, 1)
  // Autogenerated type: WardrobeItemButton
  // [TokenAttribute] Offset: FFFFFFFF
  class WardrobeItemButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public HeadModel controlledModel
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::HeadModel* controlledModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HeadModel*) == 0x8);
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem currentCosmeticItem
    // Size: 0x32
    // Offset: 0x60
    ::GorillaNetworking::CosmeticsController_CosmeticItem currentCosmeticItem;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    public:
    // Get instance field reference: public HeadModel controlledModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HeadModel*& dyn_controlledModel();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem currentCosmeticItem
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_currentCosmeticItem();
    // public System.Void .ctor()
    // Offset: 0x1BB5560
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WardrobeItemButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WardrobeItemButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WardrobeItemButton*, creationType>()));
    }
    // public override System.Void ButtonActivationWithHand(System.Boolean isLeftHand)
    // Offset: 0x1BB5494
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivationWithHand(System.Boolean isLeftHand)
    void ButtonActivationWithHand(bool isLeftHand);
  }; // WardrobeItemButton
  #pragma pack(pop)
  static check_size<sizeof(WardrobeItemButton), 96 + sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem)> __GlobalNamespace_WardrobeItemButtonSizeCheck;
  static_assert(sizeof(WardrobeItemButton) == 0x92);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WardrobeItemButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WardrobeItemButton::ButtonActivationWithHand
// Il2CppName: ButtonActivationWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::WardrobeItemButton::*)(bool)>(&GlobalNamespace::WardrobeItemButton::ButtonActivationWithHand)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WardrobeItemButton*), "ButtonActivationWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
