// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicCollectionSO
  class BeatmapCharacteristicCollectionSO;
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
  // Forward declaring type: EnvironmentsListSO
  class EnvironmentsListSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CustomLevelLoader
  class CustomLevelLoader;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CustomLevelLoader);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CustomLevelLoader*, "", "CustomLevelLoader");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: CustomLevelLoader
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomLevelLoader : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicCollectionSO*) == 0x8);
    // private EnvironmentInfoSO _defaultEnvironmentInfo
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::EnvironmentInfoSO* defaultEnvironmentInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private EnvironmentInfoSO _defaultAllDirectionsEnvironmentInfo
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::EnvironmentInfoSO* defaultAllDirectionsEnvironmentInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private EnvironmentsListSO _environmentSceneInfoCollection
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::EnvironmentsListSO* environmentSceneInfoCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentsListSO*) == 0x8);
    // private UnityEngine.Sprite _defaultPackCover
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Sprite* defaultPackCover;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite _smallDefaultPackCover
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Sprite* smallDefaultPackCover;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicCollectionSO*& dyn__beatmapCharacteristicCollection();
    // Get instance field reference: private EnvironmentInfoSO _defaultEnvironmentInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& dyn__defaultEnvironmentInfo();
    // Get instance field reference: private EnvironmentInfoSO _defaultAllDirectionsEnvironmentInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& dyn__defaultAllDirectionsEnvironmentInfo();
    // Get instance field reference: private EnvironmentsListSO _environmentSceneInfoCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentsListSO*& dyn__environmentSceneInfoCollection();
    // Get instance field reference: private UnityEngine.Sprite _defaultPackCover
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__defaultPackCover();
    // Get instance field reference: private UnityEngine.Sprite _smallDefaultPackCover
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__smallDefaultPackCover();
    // public System.Void .ctor()
    // Offset: 0x145C8B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomLevelLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomLevelLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomLevelLoader*, creationType>()));
    }
  }; // CustomLevelLoader
  #pragma pack(pop)
  static check_size<sizeof(CustomLevelLoader), 64 + sizeof(::UnityEngine::Sprite*)> __GlobalNamespace_CustomLevelLoaderSizeCheck;
  static_assert(sizeof(CustomLevelLoader) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CustomLevelLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
