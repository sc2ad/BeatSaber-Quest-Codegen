// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: MirroredGameNoteController
#include "GlobalNamespace/MirroredGameNoteController.hpp"
// Including type: MirroredBombNoteController
#include "GlobalNamespace/MirroredBombNoteController.hpp"
// Including type: MirroredObstacleController
#include "GlobalNamespace/MirroredObstacleController.hpp"
// Including type: MirroredSliderController
#include "GlobalNamespace/MirroredSliderController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: MemoryPoolContainer`1<T>
  template<typename T>
  class MemoryPoolContainer_1;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: IGameNoteMirrorable
  class IGameNoteMirrorable;
  // Forward declaring type: INoteMirrorable
  class INoteMirrorable;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: SliderController
  class SliderController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MirroredBeatmapObjectManager
  class MirroredBeatmapObjectManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MirroredBeatmapObjectManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MirroredBeatmapObjectManager*, "", "MirroredBeatmapObjectManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: MirroredBeatmapObjectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MirroredBeatmapObjectManager : public ::Il2CppObject {
    public:
    public:
    // private BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBasicGameNotePoolContainer
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>* mirroredBasicGameNotePoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*) == 0x8);
    // private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBurstSliderHeadGameNotePoolContainer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>* mirroredBurstSliderHeadGameNotePoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*) == 0x8);
    // private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBurstSliderGameNotePoolContainer
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>* mirroredBurstSliderGameNotePoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*) == 0x8);
    // private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBurstSliderFillPoolContainer
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>* mirroredBurstSliderFillPoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*) == 0x8);
    // private MemoryPoolContainer`1<MirroredBombNoteController> _mirroredBombNotePoolContainer
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredBombNoteController*>* mirroredBombNotePoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredBombNoteController*>*) == 0x8);
    // private MemoryPoolContainer`1<MirroredObstacleController> _mirroredObstaclePoolContainer
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredObstacleController*>* mirroredObstaclePoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredObstacleController*>*) == 0x8);
    // private MemoryPoolContainer`1<MirroredSliderController> _mirroredSlidersPoolContainer
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredSliderController*>* mirroredSlidersPoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredSliderController*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<IGameNoteMirrorable,System.ValueTuple`2<MirroredGameNoteController,MemoryPoolContainer`1<MirroredGameNoteController>>> _gameNoteControllersToMirroredGameNoteControllers
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::IGameNoteMirrorable*, ::System::ValueTuple_2<::GlobalNamespace::MirroredGameNoteController*, ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*>>* gameNoteControllersToMirroredGameNoteControllers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::IGameNoteMirrorable*, ::System::ValueTuple_2<::GlobalNamespace::MirroredGameNoteController*, ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*>>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<INoteMirrorable,MirroredBombNoteController> _bombNoteControllersToMirroredBombNoteControllers
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::INoteMirrorable*, ::GlobalNamespace::MirroredBombNoteController*>* bombNoteControllersToMirroredBombNoteControllers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::INoteMirrorable*, ::GlobalNamespace::MirroredBombNoteController*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<ObstacleController,MirroredObstacleController> _obstacleControllersToMirroredObstacleControllers
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ObstacleController*, ::GlobalNamespace::MirroredObstacleController*>* obstacleControllersToMirroredObstacleControllers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ObstacleController*, ::GlobalNamespace::MirroredObstacleController*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<SliderController,MirroredSliderController> _sliderControllersToMirroredSliderControllers
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::SliderController*, ::GlobalNamespace::MirroredSliderController*>* sliderControllersToMirroredSliderControllers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::SliderController*, ::GlobalNamespace::MirroredSliderController*>*) == 0x8);
    public:
    // Get instance field reference: private BeatmapObjectManager _beatmapObjectManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& dyn__beatmapObjectManager();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBasicGameNotePoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*& dyn__mirroredBasicGameNotePoolContainer();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBurstSliderHeadGameNotePoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*& dyn__mirroredBurstSliderHeadGameNotePoolContainer();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBurstSliderGameNotePoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*& dyn__mirroredBurstSliderGameNotePoolContainer();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredGameNoteController> _mirroredBurstSliderFillPoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*& dyn__mirroredBurstSliderFillPoolContainer();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredBombNoteController> _mirroredBombNotePoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredBombNoteController*>*& dyn__mirroredBombNotePoolContainer();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredObstacleController> _mirroredObstaclePoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredObstacleController*>*& dyn__mirroredObstaclePoolContainer();
    // Get instance field reference: private MemoryPoolContainer`1<MirroredSliderController> _mirroredSlidersPoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredSliderController*>*& dyn__mirroredSlidersPoolContainer();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<IGameNoteMirrorable,System.ValueTuple`2<MirroredGameNoteController,MemoryPoolContainer`1<MirroredGameNoteController>>> _gameNoteControllersToMirroredGameNoteControllers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::IGameNoteMirrorable*, ::System::ValueTuple_2<::GlobalNamespace::MirroredGameNoteController*, ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::MirroredGameNoteController*>*>>*& dyn__gameNoteControllersToMirroredGameNoteControllers();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<INoteMirrorable,MirroredBombNoteController> _bombNoteControllersToMirroredBombNoteControllers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::INoteMirrorable*, ::GlobalNamespace::MirroredBombNoteController*>*& dyn__bombNoteControllersToMirroredBombNoteControllers();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<ObstacleController,MirroredObstacleController> _obstacleControllersToMirroredObstacleControllers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::ObstacleController*, ::GlobalNamespace::MirroredObstacleController*>*& dyn__obstacleControllersToMirroredObstacleControllers();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<SliderController,MirroredSliderController> _sliderControllersToMirroredSliderControllers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::SliderController*, ::GlobalNamespace::MirroredSliderController*>*& dyn__sliderControllersToMirroredSliderControllers();
    // public System.Void .ctor()
    // Offset: 0x138D8F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MirroredBeatmapObjectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MirroredBeatmapObjectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MirroredBeatmapObjectManager*, creationType>()));
    }
    // private System.Void Init(BeatmapObjectManager beatmapObjectManager, MirroredGameNoteController/Pool mirroredBasicGameNotePool, MirroredGameNoteController/Pool burstSliderHeadGameNotePool, MirroredGameNoteController/Pool burstSliderGameNotePool, MirroredGameNoteController/Pool burstSliderFillPool, MirroredBombNoteController/Pool mirroredBombNotePool, MirroredObstacleController/Pool mirroredObstaclePool, MirroredSliderController/Pool mirroredSlidersPool)
    // Offset: 0x138C2E8
    void Init(::GlobalNamespace::BeatmapObjectManager* beatmapObjectManager, ::GlobalNamespace::MirroredGameNoteController::Pool* mirroredBasicGameNotePool, ::GlobalNamespace::MirroredGameNoteController::Pool* burstSliderHeadGameNotePool, ::GlobalNamespace::MirroredGameNoteController::Pool* burstSliderGameNotePool, ::GlobalNamespace::MirroredGameNoteController::Pool* burstSliderFillPool, ::GlobalNamespace::MirroredBombNoteController::Pool* mirroredBombNotePool, ::GlobalNamespace::MirroredObstacleController::Pool* mirroredObstaclePool, ::GlobalNamespace::MirroredSliderController::Pool* mirroredSlidersPool);
    // private System.Void HandleNoteWasSpawned(NoteController noteController)
    // Offset: 0x138C914
    void HandleNoteWasSpawned(::GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteWasDespawned(NoteController noteController)
    // Offset: 0x138CB10
    void HandleNoteWasDespawned(::GlobalNamespace::NoteController* noteController);
    // private System.Void HandleObstacleWasSpawned(ObstacleController obstacleController)
    // Offset: 0x138CC4C
    void HandleObstacleWasSpawned(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleWasDespawned(ObstacleController obstacleController)
    // Offset: 0x138CDD8
    void HandleObstacleWasDespawned(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleSliderWasSpawned(SliderController sliderController)
    // Offset: 0x138CE88
    void HandleSliderWasSpawned(::GlobalNamespace::SliderController* sliderController);
    // private System.Void HandleSliderWasDespawned(SliderController sliderController)
    // Offset: 0x138D138
    void HandleSliderWasDespawned(::GlobalNamespace::SliderController* sliderController);
    // private System.Void HandleDidHideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0x138D1E8
    void HandleDidHideAllBeatmapObjects(bool hide);
    // protected override System.Void Finalize()
    // Offset: 0x138C660
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // MirroredBeatmapObjectManager
  #pragma pack(pop)
  static check_size<sizeof(MirroredBeatmapObjectManager), 104 + sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::SliderController*, ::GlobalNamespace::MirroredSliderController*>*)> __GlobalNamespace_MirroredBeatmapObjectManagerSizeCheck;
  static_assert(sizeof(MirroredBeatmapObjectManager) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::BeatmapObjectManager*, ::GlobalNamespace::MirroredGameNoteController::Pool*, ::GlobalNamespace::MirroredGameNoteController::Pool*, ::GlobalNamespace::MirroredGameNoteController::Pool*, ::GlobalNamespace::MirroredGameNoteController::Pool*, ::GlobalNamespace::MirroredBombNoteController::Pool*, ::GlobalNamespace::MirroredObstacleController::Pool*, ::GlobalNamespace::MirroredSliderController::Pool*)>(&GlobalNamespace::MirroredBeatmapObjectManager::Init)> {
  static const MethodInfo* get() {
    static auto* beatmapObjectManager = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectManager")->byval_arg;
    static auto* mirroredBasicGameNotePool = &::il2cpp_utils::GetClassFromName("", "MirroredGameNoteController/Pool")->byval_arg;
    static auto* burstSliderHeadGameNotePool = &::il2cpp_utils::GetClassFromName("", "MirroredGameNoteController/Pool")->byval_arg;
    static auto* burstSliderGameNotePool = &::il2cpp_utils::GetClassFromName("", "MirroredGameNoteController/Pool")->byval_arg;
    static auto* burstSliderFillPool = &::il2cpp_utils::GetClassFromName("", "MirroredGameNoteController/Pool")->byval_arg;
    static auto* mirroredBombNotePool = &::il2cpp_utils::GetClassFromName("", "MirroredBombNoteController/Pool")->byval_arg;
    static auto* mirroredObstaclePool = &::il2cpp_utils::GetClassFromName("", "MirroredObstacleController/Pool")->byval_arg;
    static auto* mirroredSlidersPool = &::il2cpp_utils::GetClassFromName("", "MirroredSliderController/Pool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapObjectManager, mirroredBasicGameNotePool, burstSliderHeadGameNotePool, burstSliderGameNotePool, burstSliderFillPool, mirroredBombNotePool, mirroredObstaclePool, mirroredSlidersPool});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasSpawned
// Il2CppName: HandleNoteWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasSpawned)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleNoteWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasDespawned
// Il2CppName: HandleNoteWasDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleNoteWasDespawned)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleNoteWasDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasSpawned
// Il2CppName: HandleObstacleWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasSpawned)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleObstacleWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasDespawned
// Il2CppName: HandleObstacleWasDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleObstacleWasDespawned)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleObstacleWasDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleSliderWasSpawned
// Il2CppName: HandleSliderWasSpawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleSliderWasSpawned)> {
  static const MethodInfo* get() {
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleSliderWasSpawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleSliderWasDespawned
// Il2CppName: HandleSliderWasDespawned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleSliderWasDespawned)> {
  static const MethodInfo* get() {
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleSliderWasDespawned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects
// Il2CppName: HandleDidHideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)(bool)>(&GlobalNamespace::MirroredBeatmapObjectManager::HandleDidHideAllBeatmapObjects)> {
  static const MethodInfo* get() {
    static auto* hide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "HandleDidHideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MirroredBeatmapObjectManager::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MirroredBeatmapObjectManager::*)()>(&GlobalNamespace::MirroredBeatmapObjectManager::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MirroredBeatmapObjectManager*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
