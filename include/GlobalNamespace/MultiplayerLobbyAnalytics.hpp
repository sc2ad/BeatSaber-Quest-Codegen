// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GameServerLobbyFlowCoordinator
#include "GlobalNamespace/GameServerLobbyFlowCoordinator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAnalyticsModel
  class IAnalyticsModel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerLobbyAnalytics
  class MultiplayerLobbyAnalytics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerLobbyAnalytics);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerLobbyAnalytics*, "", "MultiplayerLobbyAnalytics");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerLobbyAnalytics
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerLobbyAnalytics : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private GameServerLobbyFlowCoordinator _gameServerLobbyFlowCoordinator
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::GameServerLobbyFlowCoordinator* gameServerLobbyFlowCoordinator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameServerLobbyFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0x11198A8
    // private readonly IAnalyticsModel _analyticsModel
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IAnalyticsModel* analyticsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IAnalyticsModel*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private GameServerLobbyFlowCoordinator _gameServerLobbyFlowCoordinator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameServerLobbyFlowCoordinator*& dyn__gameServerLobbyFlowCoordinator();
    // Get instance field reference: private readonly IAnalyticsModel _analyticsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IAnalyticsModel*& dyn__analyticsModel();
    // public System.Void .ctor()
    // Offset: 0x148F338
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLobbyAnalytics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLobbyAnalytics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLobbyAnalytics*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x148EB8C
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x148ECCC
    void OnDestroy();
    // private System.Void HandleGameServerLobbyFlowCoordinatorDidSetupEvent()
    // Offset: 0x148EE54
    void HandleGameServerLobbyFlowCoordinatorDidSetupEvent();
    // private System.Void HandleGameServerLobbyFlowCoordinatorDidFinish()
    // Offset: 0x148EFF0
    void HandleGameServerLobbyFlowCoordinatorDidFinish();
    // private System.Void HandleGameServerLobbyFlowCoordinatorStartGameOrReady()
    // Offset: 0x148F1A0
    void HandleGameServerLobbyFlowCoordinatorStartGameOrReady();
    // private System.Void HandleGameServerLobbyFlowCoordinatorDidOpenInvitePanel()
    // Offset: 0x148F26C
    void HandleGameServerLobbyFlowCoordinatorDidOpenInvitePanel();
    // private System.Void LogClick(System.Collections.Generic.Dictionary`2<System.String,System.String> clickData)
    // Offset: 0x148F0BC
    void LogClick(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* clickData);
    // private System.String GetEventTypeFromLobbyType(GameServerLobbyFlowCoordinator/LobbyType lobbyType)
    // Offset: 0x148EF8C
    ::StringW GetEventTypeFromLobbyType(::GlobalNamespace::GameServerLobbyFlowCoordinator::LobbyType lobbyType);
  }; // MultiplayerLobbyAnalytics
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerLobbyAnalytics), 32 + sizeof(::GlobalNamespace::IAnalyticsModel*)> __GlobalNamespace_MultiplayerLobbyAnalyticsSizeCheck;
  static_assert(sizeof(MultiplayerLobbyAnalytics) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)()>(&GlobalNamespace::MultiplayerLobbyAnalytics::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)()>(&GlobalNamespace::MultiplayerLobbyAnalytics::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorDidSetupEvent
// Il2CppName: HandleGameServerLobbyFlowCoordinatorDidSetupEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)()>(&GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorDidSetupEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "HandleGameServerLobbyFlowCoordinatorDidSetupEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorDidFinish
// Il2CppName: HandleGameServerLobbyFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)()>(&GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "HandleGameServerLobbyFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorStartGameOrReady
// Il2CppName: HandleGameServerLobbyFlowCoordinatorStartGameOrReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)()>(&GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorStartGameOrReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "HandleGameServerLobbyFlowCoordinatorStartGameOrReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorDidOpenInvitePanel
// Il2CppName: HandleGameServerLobbyFlowCoordinatorDidOpenInvitePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)()>(&GlobalNamespace::MultiplayerLobbyAnalytics::HandleGameServerLobbyFlowCoordinatorDidOpenInvitePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "HandleGameServerLobbyFlowCoordinatorDidOpenInvitePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::LogClick
// Il2CppName: LogClick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLobbyAnalytics::*)(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*)>(&GlobalNamespace::MultiplayerLobbyAnalytics::LogClick)> {
  static const MethodInfo* get() {
    static auto* clickData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "LogClick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{clickData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLobbyAnalytics::GetEventTypeFromLobbyType
// Il2CppName: GetEventTypeFromLobbyType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MultiplayerLobbyAnalytics::*)(::GlobalNamespace::GameServerLobbyFlowCoordinator::LobbyType)>(&GlobalNamespace::MultiplayerLobbyAnalytics::GetEventTypeFromLobbyType)> {
  static const MethodInfo* get() {
    static auto* lobbyType = &::il2cpp_utils::GetClassFromName("", "GameServerLobbyFlowCoordinator/LobbyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLobbyAnalytics*), "GetEventTypeFromLobbyType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lobbyType});
  }
};
