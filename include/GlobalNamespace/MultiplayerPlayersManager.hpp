// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IMultiplayerLevelEndActionsPublisher
#include "GlobalNamespace/IMultiplayerLevelEndActionsPublisher.hpp"
// Including type: MultiplayerLocalActivePlayerFacade
#include "GlobalNamespace/MultiplayerLocalActivePlayerFacade.hpp"
// Including type: MultiplayerLocalInactivePlayerFacade
#include "GlobalNamespace/MultiplayerLocalInactivePlayerFacade.hpp"
// Including type: MultiplayerConnectedPlayerFacade
#include "GlobalNamespace/MultiplayerConnectedPlayerFacade.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: BeatmapObjectSpawnCenter
  class BeatmapObjectSpawnCenter;
  // Forward declaring type: MultiplayerLayoutProvider
  class MultiplayerLayoutProvider;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: MultiplayerLevelCompletionResults
  class MultiplayerLevelCompletionResults;
  // Skipping declaration: IStartSeekSongControllerProvider because it is already included!
  // Forward declaring type: MultiplayerPlayerStartState
  struct MultiplayerPlayerStartState;
  // Forward declaring type: MultiplayerPlayerLayout
  struct MultiplayerPlayerLayout;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerPlayersManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerPlayersManager*, "", "MultiplayerPlayersManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerPlayersManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerPlayersManager : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*/ {
    public:
    // Nested type: ::GlobalNamespace::MultiplayerPlayersManager::$SwitchLocalPlayerToInactiveCoroutine$d__51
    class $SwitchLocalPlayerToInactiveCoroutine$d__51;
    public:
    // private MultiplayerLocalActivePlayerFacade _activeLocalPlayerControllerPrefab
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MultiplayerLocalActivePlayerFacade* activeLocalPlayerControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalActivePlayerFacade*) == 0x8);
    // private MultiplayerLocalActivePlayerFacade _activeLocalPlayerDuelControllerPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MultiplayerLocalActivePlayerFacade* activeLocalPlayerDuelControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalActivePlayerFacade*) == 0x8);
    // private MultiplayerLocalInactivePlayerFacade _inactiveLocalPlayerControllerPrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade* inactiveLocalPlayerControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalInactivePlayerFacade*) == 0x8);
    // private MultiplayerConnectedPlayerFacade _connectedPlayerControllerPrefab
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MultiplayerConnectedPlayerFacade* connectedPlayerControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerConnectedPlayerFacade*) == 0x8);
    // private MultiplayerConnectedPlayerFacade _connectedPlayerDuelControllerPrefab
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::MultiplayerConnectedPlayerFacade* connectedPlayerDuelControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerConnectedPlayerFacade*) == 0x8);
    // [InjectAttribute] Offset: 0x1125C00
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0x1125C10
    // private readonly BeatmapObjectSpawnCenter _beatmapObjectSpawnCenter
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::BeatmapObjectSpawnCenter* beatmapObjectSpawnCenter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectSpawnCenter*) == 0x8);
    // [InjectAttribute] Offset: 0x1125C20
    // private readonly MultiplayerLayoutProvider _layoutProvider
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::MultiplayerLayoutProvider* layoutProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLayoutProvider*) == 0x8);
    // [InjectAttribute] Offset: 0x1125C30
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0x1125C40
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x60
    ::Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(::Zenject::DiContainer*) == 0x8);
    // private System.Boolean <playerSpawningFinished>k__BackingField
    // Size: 0x1
    // Offset: 0x68
    bool playerSpawningFinished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playerSpawningFinished and: playerSpawningDidFinishEvent
    char __padding10[0x7] = {};
    // private System.Action playerSpawningDidFinishEvent
    // Size: 0x8
    // Offset: 0x70
    ::System::Action* playerSpawningDidFinishEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action didSwitchPlayerToInactiveEvent
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* didSwitchPlayerToInactiveEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<MultiplayerLevelCompletionResults> playerDidFinishEvent
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* playerDidFinishEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*) == 0x8);
    // private System.Action`1<MultiplayerLevelCompletionResults> playerNetworkDidFailedEvent
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* playerNetworkDidFailedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*) == 0x8);
    // private MultiplayerLocalActivePlayerFacade _activeLocalPlayerFacade
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::MultiplayerLocalActivePlayerFacade* activeLocalPlayerFacade;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalActivePlayerFacade*) == 0x8);
    // private MultiplayerLocalInactivePlayerFacade _inactiveLocalPlayerFacade
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade* inactiveLocalPlayerFacade;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalInactivePlayerFacade*) == 0x8);
    // private IMultiplayerLevelEndActionsPublisher _currentEventsPublisher
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher* currentEventsPublisher;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*) == 0x8);
    // private IStartSeekSongControllerProvider _currentStartSeekSongControllerProvider
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::IStartSeekSongControllerProvider* currentStartSeekSongControllerProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IStartSeekSongControllerProvider*) == 0x8);
    // private MultiplayerLocalActivePlayerFacade/Factory _activeLocalPlayerFactory
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::MultiplayerLocalActivePlayerFacade::Factory* activeLocalPlayerFactory;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalActivePlayerFacade::Factory*) == 0x8);
    // private MultiplayerLocalInactivePlayerFacade/Factory _inactiveLocalPlayerFactory
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::Factory* inactiveLocalPlayerFactory;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::Factory*) == 0x8);
    // private MultiplayerConnectedPlayerFacade/Factory _connectedPlayerFactory
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::MultiplayerConnectedPlayerFacade::Factory* connectedPlayerFactory;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerConnectedPlayerFacade::Factory*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerConnectedPlayerFacade> _connectedPlayerControllersMap
    // Size: 0x8
    // Offset: 0xC8
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::MultiplayerConnectedPlayerFacade*>* connectedPlayerControllersMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::MultiplayerConnectedPlayerFacade*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Single> _connectedPlayerCenterFacingRotationsMap
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::Dictionary_2<::StringW, float>* connectedPlayerCenterFacingRotationsMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, float>*) == 0x8);
    // private System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> _allActiveAtGameStartPlayers
    // Size: 0x8
    // Offset: 0xD8
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>* allActiveAtGameStartPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher
    operator ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*>(this);
    }
    // Creating interface conversion operator: i_IMultiplayerLevelEndActionsPublisher
    inline ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher* i_IMultiplayerLevelEndActionsPublisher() noexcept {
      return reinterpret_cast<::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MultiplayerLocalActivePlayerFacade _activeLocalPlayerControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerFacade*& dyn__activeLocalPlayerControllerPrefab();
    // Get instance field reference: private MultiplayerLocalActivePlayerFacade _activeLocalPlayerDuelControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerFacade*& dyn__activeLocalPlayerDuelControllerPrefab();
    // Get instance field reference: private MultiplayerLocalInactivePlayerFacade _inactiveLocalPlayerControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade*& dyn__inactiveLocalPlayerControllerPrefab();
    // Get instance field reference: private MultiplayerConnectedPlayerFacade _connectedPlayerControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerFacade*& dyn__connectedPlayerControllerPrefab();
    // Get instance field reference: private MultiplayerConnectedPlayerFacade _connectedPlayerDuelControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerFacade*& dyn__connectedPlayerDuelControllerPrefab();
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private readonly BeatmapObjectSpawnCenter _beatmapObjectSpawnCenter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectSpawnCenter*& dyn__beatmapObjectSpawnCenter();
    // Get instance field reference: private readonly MultiplayerLayoutProvider _layoutProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLayoutProvider*& dyn__layoutProvider();
    // Get instance field reference: private readonly FadeInOutController _fadeInOutController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FadeInOutController*& dyn__fadeInOutController();
    // Get instance field reference: private readonly Zenject.DiContainer _container
    [[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& dyn__container();
    // Get instance field reference: private System.Boolean <playerSpawningFinished>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$playerSpawningFinished$k__BackingField();
    // Get instance field reference: private System.Action playerSpawningDidFinishEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_playerSpawningDidFinishEvent();
    // Get instance field reference: private System.Action didSwitchPlayerToInactiveEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didSwitchPlayerToInactiveEvent();
    // Get instance field reference: private System.Action`1<MultiplayerLevelCompletionResults> playerDidFinishEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*& dyn_playerDidFinishEvent();
    // Get instance field reference: private System.Action`1<MultiplayerLevelCompletionResults> playerNetworkDidFailedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*& dyn_playerNetworkDidFailedEvent();
    // Get instance field reference: private MultiplayerLocalActivePlayerFacade _activeLocalPlayerFacade
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerFacade*& dyn__activeLocalPlayerFacade();
    // Get instance field reference: private MultiplayerLocalInactivePlayerFacade _inactiveLocalPlayerFacade
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade*& dyn__inactiveLocalPlayerFacade();
    // Get instance field reference: private IMultiplayerLevelEndActionsPublisher _currentEventsPublisher
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerLevelEndActionsPublisher*& dyn__currentEventsPublisher();
    // Get instance field reference: private IStartSeekSongControllerProvider _currentStartSeekSongControllerProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IStartSeekSongControllerProvider*& dyn__currentStartSeekSongControllerProvider();
    // Get instance field reference: private MultiplayerLocalActivePlayerFacade/Factory _activeLocalPlayerFactory
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalActivePlayerFacade::Factory*& dyn__activeLocalPlayerFactory();
    // Get instance field reference: private MultiplayerLocalInactivePlayerFacade/Factory _inactiveLocalPlayerFactory
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade::Factory*& dyn__inactiveLocalPlayerFactory();
    // Get instance field reference: private MultiplayerConnectedPlayerFacade/Factory _connectedPlayerFactory
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerConnectedPlayerFacade::Factory*& dyn__connectedPlayerFactory();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerConnectedPlayerFacade> _connectedPlayerControllersMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::MultiplayerConnectedPlayerFacade*>*& dyn__connectedPlayerControllersMap();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.Single> _connectedPlayerCenterFacingRotationsMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, float>*& dyn__connectedPlayerCenterFacingRotationsMap();
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> _allActiveAtGameStartPlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>*& dyn__allActiveAtGameStartPlayers();
    // public System.Boolean get_playerSpawningFinished()
    // Offset: 0x13E26A0
    bool get_playerSpawningFinished();
    // private System.Void set_playerSpawningFinished(System.Boolean value)
    // Offset: 0x13E26A8
    void set_playerSpawningFinished(bool value);
    // public System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> get_allActiveAtGameStartPlayers()
    // Offset: 0x13E26B4
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>* get_allActiveAtGameStartPlayers();
    // public IStartSeekSongControllerProvider get_localPlayerStartSeekSongController()
    // Offset: 0x13E26BC
    ::GlobalNamespace::IStartSeekSongControllerProvider* get_localPlayerStartSeekSongController();
    // public MultiplayerLocalActivePlayerFacade get_activeLocalPlayerFacade()
    // Offset: 0x13E26C4
    ::GlobalNamespace::MultiplayerLocalActivePlayerFacade* get_activeLocalPlayerFacade();
    // public MultiplayerLocalInactivePlayerFacade get_inactivePlayerFacade()
    // Offset: 0x13E26CC
    ::GlobalNamespace::MultiplayerLocalInactivePlayerFacade* get_inactivePlayerFacade();
    // public UnityEngine.Transform get_localPlayerTransform()
    // Offset: 0x13DE09C
    ::UnityEngine::Transform* get_localPlayerTransform();
    // public System.Void add_playerSpawningDidFinishEvent(System.Action value)
    // Offset: 0x13DF1E0
    void add_playerSpawningDidFinishEvent(::System::Action* value);
    // public System.Void remove_playerSpawningDidFinishEvent(System.Action value)
    // Offset: 0x13DFA70
    void remove_playerSpawningDidFinishEvent(::System::Action* value);
    // public System.Void add_didSwitchPlayerToInactiveEvent(System.Action value)
    // Offset: 0x13E26D4
    void add_didSwitchPlayerToInactiveEvent(::System::Action* value);
    // public System.Void remove_didSwitchPlayerToInactiveEvent(System.Action value)
    // Offset: 0x13E2778
    void remove_didSwitchPlayerToInactiveEvent(::System::Action* value);
    // public System.Void add_playerDidFinishEvent(System.Action`1<MultiplayerLevelCompletionResults> value)
    // Offset: 0x13E281C
    void add_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value);
    // public System.Void remove_playerDidFinishEvent(System.Action`1<MultiplayerLevelCompletionResults> value)
    // Offset: 0x13E28C0
    void remove_playerDidFinishEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value);
    // public System.Void add_playerNetworkDidFailedEvent(System.Action`1<MultiplayerLevelCompletionResults> value)
    // Offset: 0x13E2964
    void add_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value);
    // public System.Void remove_playerNetworkDidFailedEvent(System.Action`1<MultiplayerLevelCompletionResults> value)
    // Offset: 0x13E2A08
    void remove_playerNetworkDidFailedEvent(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* value);
    // public System.Void .ctor()
    // Offset: 0x13E37F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerPlayersManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerPlayersManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerPlayersManager*, creationType>()));
    }
    // public System.Void SpawnPlayers(MultiplayerPlayerStartState localPlayerStartState, System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> allActiveAtGameStartPlayers)
    // Offset: 0x13E2AAC
    void SpawnPlayers(::GlobalNamespace::MultiplayerPlayerStartState localPlayerStartState, ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>* allActiveAtGameStartPlayers);
    // public System.Boolean TryGetConnectedPlayerController(System.String userId, out MultiplayerConnectedPlayerFacade connectedPlayerController)
    // Offset: 0x13DE9F0
    bool TryGetConnectedPlayerController(::StringW userId, ByRef<::GlobalNamespace::MultiplayerConnectedPlayerFacade*> connectedPlayerController);
    // public System.Boolean TryGetConnectedCenterFacingRotation(System.String userId, out System.Single centerFacingRotation)
    // Offset: 0x13E35FC
    bool TryGetConnectedCenterFacingRotation(::StringW userId, ByRef<float> centerFacingRotation);
    // public System.Void SwitchLocalPlayerToInactive()
    // Offset: 0x13D3164
    void SwitchLocalPlayerToInactive();
    // public System.Void ReportLocalPlayerNetworkDidFailed(MultiplayerLevelCompletionResults levelCompletionResults)
    // Offset: 0x13E36DC
    void ReportLocalPlayerNetworkDidFailed(::GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults);
    // private System.Collections.IEnumerator SwitchLocalPlayerToInactiveCoroutine()
    // Offset: 0x13E366C
    ::System::Collections::IEnumerator* SwitchLocalPlayerToInactiveCoroutine();
    // private System.Void BindPlayerFactories(MultiplayerPlayerLayout layout)
    // Offset: 0x13E342C
    void BindPlayerFactories(::GlobalNamespace::MultiplayerPlayerLayout layout);
    // private System.Void HandlePlayerDidFinish(MultiplayerLevelCompletionResults levelCompletionResults)
    // Offset: 0x13E377C
    void HandlePlayerDidFinish(::GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults);
    // private System.Void HandlePlayerNetworkDidFailed(MultiplayerLevelCompletionResults levelCompletionResults)
    // Offset: 0x13E37F0
    void HandlePlayerNetworkDidFailed(::GlobalNamespace::MultiplayerLevelCompletionResults* levelCompletionResults);
  }; // MultiplayerPlayersManager
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerPlayersManager), 216 + sizeof(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>*)> __GlobalNamespace_MultiplayerPlayersManagerSizeCheck;
  static_assert(sizeof(MultiplayerPlayersManager) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::get_playerSpawningFinished
// Il2CppName: get_playerSpawningFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::get_playerSpawningFinished)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "get_playerSpawningFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::set_playerSpawningFinished
// Il2CppName: set_playerSpawningFinished
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(bool)>(&GlobalNamespace::MultiplayerPlayersManager::set_playerSpawningFinished)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "set_playerSpawningFinished", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::get_allActiveAtGameStartPlayers
// Il2CppName: get_allActiveAtGameStartPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>* (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::get_allActiveAtGameStartPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "get_allActiveAtGameStartPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::get_localPlayerStartSeekSongController
// Il2CppName: get_localPlayerStartSeekSongController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IStartSeekSongControllerProvider* (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::get_localPlayerStartSeekSongController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "get_localPlayerStartSeekSongController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::get_activeLocalPlayerFacade
// Il2CppName: get_activeLocalPlayerFacade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerLocalActivePlayerFacade* (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::get_activeLocalPlayerFacade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "get_activeLocalPlayerFacade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::get_inactivePlayerFacade
// Il2CppName: get_inactivePlayerFacade
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerLocalInactivePlayerFacade* (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::get_inactivePlayerFacade)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "get_inactivePlayerFacade", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::get_localPlayerTransform
// Il2CppName: get_localPlayerTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::get_localPlayerTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "get_localPlayerTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::add_playerSpawningDidFinishEvent
// Il2CppName: add_playerSpawningDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action*)>(&GlobalNamespace::MultiplayerPlayersManager::add_playerSpawningDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "add_playerSpawningDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::remove_playerSpawningDidFinishEvent
// Il2CppName: remove_playerSpawningDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action*)>(&GlobalNamespace::MultiplayerPlayersManager::remove_playerSpawningDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "remove_playerSpawningDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::add_didSwitchPlayerToInactiveEvent
// Il2CppName: add_didSwitchPlayerToInactiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action*)>(&GlobalNamespace::MultiplayerPlayersManager::add_didSwitchPlayerToInactiveEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "add_didSwitchPlayerToInactiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::remove_didSwitchPlayerToInactiveEvent
// Il2CppName: remove_didSwitchPlayerToInactiveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action*)>(&GlobalNamespace::MultiplayerPlayersManager::remove_didSwitchPlayerToInactiveEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "remove_didSwitchPlayerToInactiveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::add_playerDidFinishEvent
// Il2CppName: add_playerDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GlobalNamespace::MultiplayerPlayersManager::add_playerDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "add_playerDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::remove_playerDidFinishEvent
// Il2CppName: remove_playerDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GlobalNamespace::MultiplayerPlayersManager::remove_playerDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "remove_playerDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::add_playerNetworkDidFailedEvent
// Il2CppName: add_playerNetworkDidFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GlobalNamespace::MultiplayerPlayersManager::add_playerNetworkDidFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "add_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::remove_playerNetworkDidFailedEvent
// Il2CppName: remove_playerNetworkDidFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::System::Action_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GlobalNamespace::MultiplayerPlayersManager::remove_playerNetworkDidFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "remove_playerNetworkDidFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::SpawnPlayers
// Il2CppName: SpawnPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::GlobalNamespace::MultiplayerPlayerStartState, ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::MultiplayerPlayersManager::SpawnPlayers)> {
  static const MethodInfo* get() {
    static auto* localPlayerStartState = &::il2cpp_utils::GetClassFromName("", "MultiplayerPlayerStartState")->byval_arg;
    static auto* allActiveAtGameStartPlayers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "SpawnPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPlayerStartState, allActiveAtGameStartPlayers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedPlayerController
// Il2CppName: TryGetConnectedPlayerController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerPlayersManager::*)(::StringW, ByRef<::GlobalNamespace::MultiplayerConnectedPlayerFacade*>)>(&GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedPlayerController)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* connectedPlayerController = &::il2cpp_utils::GetClassFromName("", "MultiplayerConnectedPlayerFacade")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "TryGetConnectedPlayerController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, connectedPlayerController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedCenterFacingRotation
// Il2CppName: TryGetConnectedCenterFacingRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerPlayersManager::*)(::StringW, ByRef<float>)>(&GlobalNamespace::MultiplayerPlayersManager::TryGetConnectedCenterFacingRotation)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* centerFacingRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "TryGetConnectedCenterFacingRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, centerFacingRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactive
// Il2CppName: SwitchLocalPlayerToInactive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "SwitchLocalPlayerToInactive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::ReportLocalPlayerNetworkDidFailed
// Il2CppName: ReportLocalPlayerNetworkDidFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::GlobalNamespace::MultiplayerLevelCompletionResults*)>(&GlobalNamespace::MultiplayerPlayersManager::ReportLocalPlayerNetworkDidFailed)> {
  static const MethodInfo* get() {
    static auto* levelCompletionResults = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "ReportLocalPlayerNetworkDidFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelCompletionResults});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactiveCoroutine
// Il2CppName: SwitchLocalPlayerToInactiveCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MultiplayerPlayersManager::*)()>(&GlobalNamespace::MultiplayerPlayersManager::SwitchLocalPlayerToInactiveCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "SwitchLocalPlayerToInactiveCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::BindPlayerFactories
// Il2CppName: BindPlayerFactories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::GlobalNamespace::MultiplayerPlayerLayout)>(&GlobalNamespace::MultiplayerPlayersManager::BindPlayerFactories)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("", "MultiplayerPlayerLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "BindPlayerFactories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::HandlePlayerDidFinish
// Il2CppName: HandlePlayerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::GlobalNamespace::MultiplayerLevelCompletionResults*)>(&GlobalNamespace::MultiplayerPlayersManager::HandlePlayerDidFinish)> {
  static const MethodInfo* get() {
    static auto* levelCompletionResults = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "HandlePlayerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelCompletionResults});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerPlayersManager::HandlePlayerNetworkDidFailed
// Il2CppName: HandlePlayerNetworkDidFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerPlayersManager::*)(::GlobalNamespace::MultiplayerLevelCompletionResults*)>(&GlobalNamespace::MultiplayerPlayersManager::HandlePlayerNetworkDidFailed)> {
  static const MethodInfo* get() {
    static auto* levelCompletionResults = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerPlayersManager*), "HandlePlayerNetworkDidFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelCompletionResults});
  }
};
