// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ListLogger
#include "GlobalNamespace/ListLogger.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ListLogger::LogType, "", "ListLogger/LogType");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4
  #pragma pack(push, 1)
  // Autogenerated type: ListLogger/LogType
  // [TokenAttribute] Offset: FFFFFFFF
  struct ListLogger::LogType/*, public ::System::Enum*/ {
    public:
    public:
    // public System.Int32 value__
    // Size: 0x4
    // Offset: 0x0
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: LogType
    constexpr LogType(int value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator ::System::Enum
    operator ::System::Enum() noexcept {
      return *reinterpret_cast<::System::Enum*>(this);
    }
    // Creating interface conversion operator: i_Enum
    inline ::System::Enum* i_Enum() noexcept {
      return reinterpret_cast<::System::Enum*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public ListLogger/LogType Info
    static constexpr const int Info = 0;
    // Get static field: static public ListLogger/LogType Info
    static ::GlobalNamespace::ListLogger::LogType _get_Info();
    // Set static field: static public ListLogger/LogType Info
    static void _set_Info(::GlobalNamespace::ListLogger::LogType value);
    // static field const value: static public ListLogger/LogType Warning
    static constexpr const int Warning = 1;
    // Get static field: static public ListLogger/LogType Warning
    static ::GlobalNamespace::ListLogger::LogType _get_Warning();
    // Set static field: static public ListLogger/LogType Warning
    static void _set_Warning(::GlobalNamespace::ListLogger::LogType value);
    // static field const value: static public ListLogger/LogType Error
    static constexpr const int Error = 2;
    // Get static field: static public ListLogger/LogType Error
    static ::GlobalNamespace::ListLogger::LogType _get_Error();
    // Set static field: static public ListLogger/LogType Error
    static void _set_Error(::GlobalNamespace::ListLogger::LogType value);
    // static field const value: static public ListLogger/LogType Exception
    static constexpr const int Exception = 3;
    // Get static field: static public ListLogger/LogType Exception
    static ::GlobalNamespace::ListLogger::LogType _get_Exception();
    // Set static field: static public ListLogger/LogType Exception
    static void _set_Exception(::GlobalNamespace::ListLogger::LogType value);
    // Get instance field reference: public System.Int32 value__
    [[deprecated("Use field access instead!")]] int& dyn_value__();
  }; // ListLogger/LogType
  #pragma pack(pop)
  static check_size<sizeof(ListLogger::LogType), 0 + sizeof(int)> __GlobalNamespace_ListLogger_LogTypeSizeCheck;
  static_assert(sizeof(ListLogger::LogType) == 0x4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
