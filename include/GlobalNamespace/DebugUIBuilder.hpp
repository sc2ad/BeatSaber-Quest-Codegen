// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: LaserPointer/LaserBeamBehavior
#include "GlobalNamespace/LaserPointer.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRCameraRig
  class OVRCameraRig;
  // Skipping declaration: LaserPointer because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LineRenderer
  class LineRenderer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: ToggleGroup
  class ToggleGroup;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DebugUIBuilder
  class DebugUIBuilder;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DebugUIBuilder);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DebugUIBuilder*, "", "DebugUIBuilder");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB4
  #pragma pack(push, 1)
  // Autogenerated type: DebugUIBuilder
  // [TokenAttribute] Offset: FFFFFFFF
  class DebugUIBuilder : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::DebugUIBuilder::OnClick
    class OnClick;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange
    class OnToggleValueChange;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::OnSlider
    class OnSlider;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::ActiveUpdate
    class ActiveUpdate;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::$$c__DisplayClass35_0
    class $$c__DisplayClass35_0;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::$$c__DisplayClass39_0
    class $$c__DisplayClass39_0;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::$$c__DisplayClass40_0
    class $$c__DisplayClass40_0;
    // Nested type: ::GlobalNamespace::DebugUIBuilder::$$c__DisplayClass41_0
    class $$c__DisplayClass41_0;
    public:
    // private UnityEngine.RectTransform buttonPrefab
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::RectTransform* buttonPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform labelPrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* labelPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform sliderPrefab
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::RectTransform* sliderPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform dividerPrefab
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::RectTransform* dividerPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform togglePrefab
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::RectTransform* togglePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform radioPrefab
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::RectTransform* radioPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.GameObject uiHelpersToInstantiate
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* uiHelpersToInstantiate;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.Transform[] targetContentPanels
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Transform*> targetContentPanels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private System.Boolean[] reEnable
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<bool> reEnable;
    // Field size check
    static_assert(sizeof(::ArrayW<bool>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> toEnable
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* toEnable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> toDisable
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* toDisable;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.Vector2[] insertPositions
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::Vector2> insertPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector2>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.RectTransform>[] insertedElements
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>*> insertedElements;
    // Field size check
    static_assert(sizeof(::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>*>) == 0x8);
    // private UnityEngine.Vector3 menuOffset
    // Size: 0xC
    // Offset: 0x80
    ::UnityEngine::Vector3 menuOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: menuOffset and: rig
    char __padding13[0x4] = {};
    // private OVRCameraRig rig
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::OVRCameraRig* rig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRCameraRig*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.UI.ToggleGroup> radioGroups
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UI::ToggleGroup*>* radioGroups;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UI::ToggleGroup*>*) == 0x8);
    // private LaserPointer lp
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::LaserPointer* lp;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LaserPointer*) == 0x8);
    // private UnityEngine.LineRenderer lr
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::LineRenderer* lr;
    // Field size check
    static_assert(sizeof(::UnityEngine::LineRenderer*) == 0x8);
    // public LaserPointer/LaserBeamBehavior laserBeamBehavior
    // Size: 0x4
    // Offset: 0xB0
    ::GlobalNamespace::LaserPointer::LaserBeamBehavior laserBeamBehavior;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LaserPointer::LaserBeamBehavior) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Int32 DEBUG_PANE_CENTER
    static constexpr const int DEBUG_PANE_CENTER = 0;
    // Get static field: static public System.Int32 DEBUG_PANE_CENTER
    static int _get_DEBUG_PANE_CENTER();
    // Set static field: static public System.Int32 DEBUG_PANE_CENTER
    static void _set_DEBUG_PANE_CENTER(int value);
    // static field const value: static public System.Int32 DEBUG_PANE_RIGHT
    static constexpr const int DEBUG_PANE_RIGHT = 1;
    // Get static field: static public System.Int32 DEBUG_PANE_RIGHT
    static int _get_DEBUG_PANE_RIGHT();
    // Set static field: static public System.Int32 DEBUG_PANE_RIGHT
    static void _set_DEBUG_PANE_RIGHT(int value);
    // static field const value: static public System.Int32 DEBUG_PANE_LEFT
    static constexpr const int DEBUG_PANE_LEFT = 2;
    // Get static field: static public System.Int32 DEBUG_PANE_LEFT
    static int _get_DEBUG_PANE_LEFT();
    // Set static field: static public System.Int32 DEBUG_PANE_LEFT
    static void _set_DEBUG_PANE_LEFT(int value);
    // Get static field: static public DebugUIBuilder instance
    static ::GlobalNamespace::DebugUIBuilder* _get_instance();
    // Set static field: static public DebugUIBuilder instance
    static void _set_instance(::GlobalNamespace::DebugUIBuilder* value);
    // static field const value: static private System.Single elementSpacing
    static constexpr const float elementSpacing = 16;
    // Get static field: static private System.Single elementSpacing
    static float _get_elementSpacing();
    // Set static field: static private System.Single elementSpacing
    static void _set_elementSpacing(float value);
    // static field const value: static private System.Single marginH
    static constexpr const float marginH = 16;
    // Get static field: static private System.Single marginH
    static float _get_marginH();
    // Set static field: static private System.Single marginH
    static void _set_marginH(float value);
    // static field const value: static private System.Single marginV
    static constexpr const float marginV = 16;
    // Get static field: static private System.Single marginV
    static float _get_marginV();
    // Set static field: static private System.Single marginV
    static void _set_marginV(float value);
    // Get instance field reference: private UnityEngine.RectTransform buttonPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_buttonPrefab();
    // Get instance field reference: private UnityEngine.RectTransform labelPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_labelPrefab();
    // Get instance field reference: private UnityEngine.RectTransform sliderPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_sliderPrefab();
    // Get instance field reference: private UnityEngine.RectTransform dividerPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_dividerPrefab();
    // Get instance field reference: private UnityEngine.RectTransform togglePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_togglePrefab();
    // Get instance field reference: private UnityEngine.RectTransform radioPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn_radioPrefab();
    // Get instance field reference: private UnityEngine.GameObject uiHelpersToInstantiate
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_uiHelpersToInstantiate();
    // Get instance field reference: private UnityEngine.Transform[] targetContentPanels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_targetContentPanels();
    // Get instance field reference: private System.Boolean[] reEnable
    [[deprecated("Use field access instead!")]] ::ArrayW<bool>& dyn_reEnable();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> toEnable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_toEnable();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> toDisable
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_toDisable();
    // Get instance field reference: private UnityEngine.Vector2[] insertPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector2>& dyn_insertPositions();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.RectTransform>[] insertedElements
    [[deprecated("Use field access instead!")]] ::ArrayW<::System::Collections::Generic::List_1<::UnityEngine::RectTransform*>*>& dyn_insertedElements();
    // Get instance field reference: private UnityEngine.Vector3 menuOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_menuOffset();
    // Get instance field reference: private OVRCameraRig rig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRCameraRig*& dyn_rig();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.UI.ToggleGroup> radioGroups
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::UI::ToggleGroup*>*& dyn_radioGroups();
    // Get instance field reference: private LaserPointer lp
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LaserPointer*& dyn_lp();
    // Get instance field reference: private UnityEngine.LineRenderer lr
    [[deprecated("Use field access instead!")]] ::UnityEngine::LineRenderer*& dyn_lr();
    // Get instance field reference: public LaserPointer/LaserBeamBehavior laserBeamBehavior
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LaserPointer::LaserBeamBehavior& dyn_laserBeamBehavior();
    // public System.Void .ctor()
    // Offset: 0xC65078
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DebugUIBuilder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DebugUIBuilder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DebugUIBuilder*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xC636F4
    void Awake();
    // public System.Void Show()
    // Offset: 0xC63AF8
    void Show();
    // public System.Void Hide()
    // Offset: 0xC640C4
    void Hide();
    // private System.Void Relayout()
    // Offset: 0xC63E70
    void Relayout();
    // private System.Void AddRect(UnityEngine.RectTransform r, System.Int32 targetCanvas)
    // Offset: 0xC6426C
    void AddRect(::UnityEngine::RectTransform* r, int targetCanvas);
    // public UnityEngine.RectTransform AddButton(System.String label, DebugUIBuilder/OnClick handler, System.Int32 targetCanvas)
    // Offset: 0xC64520
    ::UnityEngine::RectTransform* AddButton(::StringW label, ::GlobalNamespace::DebugUIBuilder::OnClick* handler, int targetCanvas);
    // public UnityEngine.RectTransform AddLabel(System.String label, System.Int32 targetCanvas)
    // Offset: 0xC64750
    ::UnityEngine::RectTransform* AddLabel(::StringW label, int targetCanvas);
    // public UnityEngine.RectTransform AddSlider(System.String label, System.Single min, System.Single max, DebugUIBuilder/OnSlider onValueChanged, System.Boolean wholeNumbersOnly, System.Int32 targetCanvas)
    // Offset: 0xC64834
    ::UnityEngine::RectTransform* AddSlider(::StringW label, float min, float max, ::GlobalNamespace::DebugUIBuilder::OnSlider* onValueChanged, bool wholeNumbersOnly, int targetCanvas);
    // public UnityEngine.RectTransform AddDivider(System.Int32 targetCanvas)
    // Offset: 0xC649C4
    ::UnityEngine::RectTransform* AddDivider(int targetCanvas);
    // public UnityEngine.RectTransform AddToggle(System.String label, DebugUIBuilder/OnToggleValueChange onValueChanged, System.Int32 targetCanvas)
    // Offset: 0xC64A60
    ::UnityEngine::RectTransform* AddToggle(::StringW label, ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange* onValueChanged, int targetCanvas);
    // public UnityEngine.RectTransform AddToggle(System.String label, DebugUIBuilder/OnToggleValueChange onValueChanged, System.Boolean defaultValue, System.Int32 targetCanvas)
    // Offset: 0xC64BDC
    ::UnityEngine::RectTransform* AddToggle(::StringW label, ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange* onValueChanged, bool defaultValue, int targetCanvas);
    // public UnityEngine.RectTransform AddRadio(System.String label, System.String group, DebugUIBuilder/OnToggleValueChange handler, System.Int32 targetCanvas)
    // Offset: 0xC64D70
    ::UnityEngine::RectTransform* AddRadio(::StringW label, ::StringW group, ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange* handler, int targetCanvas);
    // public System.Void ToggleLaserPointer(System.Boolean isOn)
    // Offset: 0xC64FC8
    void ToggleLaserPointer(bool isOn);
  }; // DebugUIBuilder
  #pragma pack(pop)
  static check_size<sizeof(DebugUIBuilder), 176 + sizeof(::GlobalNamespace::LaserPointer::LaserBeamBehavior)> __GlobalNamespace_DebugUIBuilderSizeCheck;
  static_assert(sizeof(DebugUIBuilder) == 0xB4);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUIBuilder::*)()>(&GlobalNamespace::DebugUIBuilder::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::Show
// Il2CppName: Show
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUIBuilder::*)()>(&GlobalNamespace::DebugUIBuilder::Show)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "Show", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUIBuilder::*)()>(&GlobalNamespace::DebugUIBuilder::Hide)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::Relayout
// Il2CppName: Relayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUIBuilder::*)()>(&GlobalNamespace::DebugUIBuilder::Relayout)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "Relayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddRect
// Il2CppName: AddRect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUIBuilder::*)(::UnityEngine::RectTransform*, int)>(&GlobalNamespace::DebugUIBuilder::AddRect)> {
  static const MethodInfo* get() {
    static auto* r = &::il2cpp_utils::GetClassFromName("UnityEngine", "RectTransform")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddRect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{r, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddButton
// Il2CppName: AddButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(::StringW, ::GlobalNamespace::DebugUIBuilder::OnClick*, int)>(&GlobalNamespace::DebugUIBuilder::AddButton)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("", "DebugUIBuilder/OnClick")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, handler, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddLabel
// Il2CppName: AddLabel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(::StringW, int)>(&GlobalNamespace::DebugUIBuilder::AddLabel)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddLabel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddSlider
// Il2CppName: AddSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(::StringW, float, float, ::GlobalNamespace::DebugUIBuilder::OnSlider*, bool, int)>(&GlobalNamespace::DebugUIBuilder::AddSlider)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* min = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* max = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* onValueChanged = &::il2cpp_utils::GetClassFromName("", "DebugUIBuilder/OnSlider")->byval_arg;
    static auto* wholeNumbersOnly = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, min, max, onValueChanged, wholeNumbersOnly, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddDivider
// Il2CppName: AddDivider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(int)>(&GlobalNamespace::DebugUIBuilder::AddDivider)> {
  static const MethodInfo* get() {
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddDivider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddToggle
// Il2CppName: AddToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(::StringW, ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange*, int)>(&GlobalNamespace::DebugUIBuilder::AddToggle)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onValueChanged = &::il2cpp_utils::GetClassFromName("", "DebugUIBuilder/OnToggleValueChange")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, onValueChanged, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddToggle
// Il2CppName: AddToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(::StringW, ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange*, bool, int)>(&GlobalNamespace::DebugUIBuilder::AddToggle)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* onValueChanged = &::il2cpp_utils::GetClassFromName("", "DebugUIBuilder/OnToggleValueChange")->byval_arg;
    static auto* defaultValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, onValueChanged, defaultValue, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::AddRadio
// Il2CppName: AddRadio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::RectTransform* (GlobalNamespace::DebugUIBuilder::*)(::StringW, ::StringW, ::GlobalNamespace::DebugUIBuilder::OnToggleValueChange*, int)>(&GlobalNamespace::DebugUIBuilder::AddRadio)> {
  static const MethodInfo* get() {
    static auto* label = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* group = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* handler = &::il2cpp_utils::GetClassFromName("", "DebugUIBuilder/OnToggleValueChange")->byval_arg;
    static auto* targetCanvas = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "AddRadio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{label, group, handler, targetCanvas});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DebugUIBuilder::ToggleLaserPointer
// Il2CppName: ToggleLaserPointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DebugUIBuilder::*)(bool)>(&GlobalNamespace::DebugUIBuilder::ToggleLaserPointer)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DebugUIBuilder*), "ToggleLaserPointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
