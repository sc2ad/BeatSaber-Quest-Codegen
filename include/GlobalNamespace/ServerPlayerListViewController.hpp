// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameServerPlayersTableView
  class GameServerPlayersTableView;
  // Forward declaring type: IInvitePlatformHandler
  class IInvitePlatformHandler;
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: ILobbyStateDataModel
  class ILobbyStateDataModel;
  // Forward declaring type: LobbyPlayerPermissionsModel
  class LobbyPlayerPermissionsModel;
  // Forward declaring type: ILobbyGameStateController
  class ILobbyGameStateController;
  // Forward declaring type: PreviewDifficultyBeatmap
  class PreviewDifficultyBeatmap;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: MultiplayerLobbyState
  struct MultiplayerLobbyState;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: HoverHint
  class HoverHint;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ServerPlayerListViewController
  class ServerPlayerListViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ServerPlayerListViewController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ServerPlayerListViewController*, "", "ServerPlayerListViewController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: ServerPlayerListViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class ServerPlayerListViewController : public ::HMUI::ViewController {
    public:
    public:
    // private GameServerPlayersTableView _gameServerPlayersTableView
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::GameServerPlayersTableView* gameServerPlayersTableView;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameServerPlayersTableView*) == 0x8);
    // [HeaderAttribute] Offset: 0x10EBD88
    // private UnityEngine.UI.Button _invitePlayerButton
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Button* invitePlayerButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // [SpaceAttribute] Offset: 0x10EBDD4
    // private HMUI.HoverHint _cantInvitePlayerHoverHint
    // Size: 0x8
    // Offset: 0x80
    ::HMUI::HoverHint* cantInvitePlayerHoverHint;
    // Field size check
    static_assert(sizeof(::HMUI::HoverHint*) == 0x8);
    // [InjectAttribute] Offset: 0x10EBE0C
    // private readonly IInvitePlatformHandler _invitePlatformHandler
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::IInvitePlatformHandler* invitePlatformHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IInvitePlatformHandler*) == 0x8);
    // [InjectAttribute] Offset: 0x10EBE1C
    // private readonly ILobbyPlayersDataModel _lobbyPlayersDataModel
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ILobbyPlayersDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0x10EBE2C
    // private readonly ILobbyStateDataModel _lobbyStateDataModel
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ILobbyStateDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0x10EBE3C
    // private readonly LobbyPlayerPermissionsModel _lobbyPlayerPermissionsModel
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::LobbyPlayerPermissionsModel* lobbyPlayerPermissionsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LobbyPlayerPermissionsModel*) == 0x8);
    // [InjectAttribute] Offset: 0x10EBE4C
    // private readonly ILobbyGameStateController _lobbyGameStateController
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::ILobbyGameStateController* lobbyGameStateController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ILobbyGameStateController*) == 0x8);
    // private System.Action`1<PreviewDifficultyBeatmap> selectSuggestedBeatmapEvent
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>* selectSuggestedBeatmapEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>*) == 0x8);
    // private System.Action`1<GameplayModifiers> selectSuggestedGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action_1<::GlobalNamespace::GameplayModifiers*>* selectSuggestedGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::GameplayModifiers*>*) == 0x8);
    // private System.Action`1<System.String> kickPlayerEvent
    // Size: 0x8
    // Offset: 0xC0
    ::System::Action_1<::StringW>* kickPlayerEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action didOpenInvitePanelEvent
    // Size: 0x8
    // Offset: 0xC8
    ::System::Action* didOpenInvitePanelEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0xD0
    ::HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(::HMUI::ButtonBinder*) == 0x8);
    public:
    // Get instance field reference: private GameServerPlayersTableView _gameServerPlayersTableView
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameServerPlayersTableView*& dyn__gameServerPlayersTableView();
    // Get instance field reference: private UnityEngine.UI.Button _invitePlayerButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__invitePlayerButton();
    // Get instance field reference: private HMUI.HoverHint _cantInvitePlayerHoverHint
    [[deprecated("Use field access instead!")]] ::HMUI::HoverHint*& dyn__cantInvitePlayerHoverHint();
    // Get instance field reference: private readonly IInvitePlatformHandler _invitePlatformHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IInvitePlatformHandler*& dyn__invitePlatformHandler();
    // Get instance field reference: private readonly ILobbyPlayersDataModel _lobbyPlayersDataModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ILobbyPlayersDataModel*& dyn__lobbyPlayersDataModel();
    // Get instance field reference: private readonly ILobbyStateDataModel _lobbyStateDataModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ILobbyStateDataModel*& dyn__lobbyStateDataModel();
    // Get instance field reference: private readonly LobbyPlayerPermissionsModel _lobbyPlayerPermissionsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LobbyPlayerPermissionsModel*& dyn__lobbyPlayerPermissionsModel();
    // Get instance field reference: private readonly ILobbyGameStateController _lobbyGameStateController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ILobbyGameStateController*& dyn__lobbyGameStateController();
    // Get instance field reference: private System.Action`1<PreviewDifficultyBeatmap> selectSuggestedBeatmapEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>*& dyn_selectSuggestedBeatmapEvent();
    // Get instance field reference: private System.Action`1<GameplayModifiers> selectSuggestedGameplayModifiersEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::GameplayModifiers*>*& dyn_selectSuggestedGameplayModifiersEvent();
    // Get instance field reference: private System.Action`1<System.String> kickPlayerEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_kickPlayerEvent();
    // Get instance field reference: private System.Action didOpenInvitePanelEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didOpenInvitePanelEvent();
    // Get instance field reference: private readonly HMUI.ButtonBinder _buttonBinder
    [[deprecated("Use field access instead!")]] ::HMUI::ButtonBinder*& dyn__buttonBinder();
    // public System.Void add_selectSuggestedBeatmapEvent(System.Action`1<PreviewDifficultyBeatmap> value)
    // Offset: 0x13DE138
    void add_selectSuggestedBeatmapEvent(::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>* value);
    // public System.Void remove_selectSuggestedBeatmapEvent(System.Action`1<PreviewDifficultyBeatmap> value)
    // Offset: 0x13DE1DC
    void remove_selectSuggestedBeatmapEvent(::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>* value);
    // public System.Void add_selectSuggestedGameplayModifiersEvent(System.Action`1<GameplayModifiers> value)
    // Offset: 0x13DE280
    void add_selectSuggestedGameplayModifiersEvent(::System::Action_1<::GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void remove_selectSuggestedGameplayModifiersEvent(System.Action`1<GameplayModifiers> value)
    // Offset: 0x13DE324
    void remove_selectSuggestedGameplayModifiersEvent(::System::Action_1<::GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void add_kickPlayerEvent(System.Action`1<System.String> value)
    // Offset: 0x13DE3C8
    void add_kickPlayerEvent(::System::Action_1<::StringW>* value);
    // public System.Void remove_kickPlayerEvent(System.Action`1<System.String> value)
    // Offset: 0x13DE46C
    void remove_kickPlayerEvent(::System::Action_1<::StringW>* value);
    // public System.Void add_didOpenInvitePanelEvent(System.Action value)
    // Offset: 0x13DE510
    void add_didOpenInvitePanelEvent(::System::Action* value);
    // public System.Void remove_didOpenInvitePanelEvent(System.Action value)
    // Offset: 0x13DE5B4
    void remove_didOpenInvitePanelEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x13DF384
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ServerPlayerListViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ServerPlayerListViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ServerPlayerListViewController*, creationType>()));
    }
    // private System.Void HandleLobbyPlayersDataDidChange(System.String userId)
    // Offset: 0x13DF14C
    void HandleLobbyPlayersDataDidChange(::StringW userId);
    // private System.Void HandleLobbyGameStateControllerLobbyStateChanged(MultiplayerLobbyState _)
    // Offset: 0x13DF150
    void HandleLobbyGameStateControllerLobbyStateChanged(::GlobalNamespace::MultiplayerLobbyState _);
    // private System.Void HandleLobbyPlayerPermissionChanged()
    // Offset: 0x13DF154
    void HandleLobbyPlayerPermissionChanged();
    // private System.Void SetDataToTable()
    // Offset: 0x13DEC5C
    void SetDataToTable();
    // private System.Void HandleSelectSuggestedLevel(PreviewDifficultyBeatmap beatmapLevel)
    // Offset: 0x13DF158
    void HandleSelectSuggestedLevel(::GlobalNamespace::PreviewDifficultyBeatmap* beatmapLevel);
    // private System.Void HandleSelectSuggestedGameplayModifiers(GameplayModifiers gameplayModifiers)
    // Offset: 0x13DF1CC
    void HandleSelectSuggestedGameplayModifiers(::GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // private System.Void HandleKickPlayer(System.String userId)
    // Offset: 0x13DF240
    void HandleKickPlayer(::StringW userId);
    // private System.Void HandleOpenPlatformInvitePanel()
    // Offset: 0x13DF2B4
    void HandleOpenPlatformInvitePanel();
    // private System.Void TrySetInviteButtonEnabled()
    // Offset: 0x13DE968
    void TrySetInviteButtonEnabled();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x13DE658
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x13DEE7C
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
  }; // ServerPlayerListViewController
  #pragma pack(pop)
  static check_size<sizeof(ServerPlayerListViewController), 208 + sizeof(::HMUI::ButtonBinder*)> __GlobalNamespace_ServerPlayerListViewControllerSizeCheck;
  static_assert(sizeof(ServerPlayerListViewController) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::add_selectSuggestedBeatmapEvent
// Il2CppName: add_selectSuggestedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>*)>(&GlobalNamespace::ServerPlayerListViewController::add_selectSuggestedBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PreviewDifficultyBeatmap")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "add_selectSuggestedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::remove_selectSuggestedBeatmapEvent
// Il2CppName: remove_selectSuggestedBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action_1<::GlobalNamespace::PreviewDifficultyBeatmap*>*)>(&GlobalNamespace::ServerPlayerListViewController::remove_selectSuggestedBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PreviewDifficultyBeatmap")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "remove_selectSuggestedBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::add_selectSuggestedGameplayModifiersEvent
// Il2CppName: add_selectSuggestedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action_1<::GlobalNamespace::GameplayModifiers*>*)>(&GlobalNamespace::ServerPlayerListViewController::add_selectSuggestedGameplayModifiersEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "GameplayModifiers")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "add_selectSuggestedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::remove_selectSuggestedGameplayModifiersEvent
// Il2CppName: remove_selectSuggestedGameplayModifiersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action_1<::GlobalNamespace::GameplayModifiers*>*)>(&GlobalNamespace::ServerPlayerListViewController::remove_selectSuggestedGameplayModifiersEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "GameplayModifiers")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "remove_selectSuggestedGameplayModifiersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::add_kickPlayerEvent
// Il2CppName: add_kickPlayerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::ServerPlayerListViewController::add_kickPlayerEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "add_kickPlayerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::remove_kickPlayerEvent
// Il2CppName: remove_kickPlayerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::ServerPlayerListViewController::remove_kickPlayerEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "remove_kickPlayerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::add_didOpenInvitePanelEvent
// Il2CppName: add_didOpenInvitePanelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action*)>(&GlobalNamespace::ServerPlayerListViewController::add_didOpenInvitePanelEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "add_didOpenInvitePanelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::remove_didOpenInvitePanelEvent
// Il2CppName: remove_didOpenInvitePanelEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::System::Action*)>(&GlobalNamespace::ServerPlayerListViewController::remove_didOpenInvitePanelEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "remove_didOpenInvitePanelEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleLobbyPlayersDataDidChange
// Il2CppName: HandleLobbyPlayersDataDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::StringW)>(&GlobalNamespace::ServerPlayerListViewController::HandleLobbyPlayersDataDidChange)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleLobbyPlayersDataDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleLobbyGameStateControllerLobbyStateChanged
// Il2CppName: HandleLobbyGameStateControllerLobbyStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::GlobalNamespace::MultiplayerLobbyState)>(&GlobalNamespace::ServerPlayerListViewController::HandleLobbyGameStateControllerLobbyStateChanged)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("", "MultiplayerLobbyState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleLobbyGameStateControllerLobbyStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleLobbyPlayerPermissionChanged
// Il2CppName: HandleLobbyPlayerPermissionChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)()>(&GlobalNamespace::ServerPlayerListViewController::HandleLobbyPlayerPermissionChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleLobbyPlayerPermissionChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::SetDataToTable
// Il2CppName: SetDataToTable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)()>(&GlobalNamespace::ServerPlayerListViewController::SetDataToTable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "SetDataToTable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleSelectSuggestedLevel
// Il2CppName: HandleSelectSuggestedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::GlobalNamespace::PreviewDifficultyBeatmap*)>(&GlobalNamespace::ServerPlayerListViewController::HandleSelectSuggestedLevel)> {
  static const MethodInfo* get() {
    static auto* beatmapLevel = &::il2cpp_utils::GetClassFromName("", "PreviewDifficultyBeatmap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleSelectSuggestedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleSelectSuggestedGameplayModifiers
// Il2CppName: HandleSelectSuggestedGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::ServerPlayerListViewController::HandleSelectSuggestedGameplayModifiers)> {
  static const MethodInfo* get() {
    static auto* gameplayModifiers = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleSelectSuggestedGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameplayModifiers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleKickPlayer
// Il2CppName: HandleKickPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(::StringW)>(&GlobalNamespace::ServerPlayerListViewController::HandleKickPlayer)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleKickPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::HandleOpenPlatformInvitePanel
// Il2CppName: HandleOpenPlatformInvitePanel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)()>(&GlobalNamespace::ServerPlayerListViewController::HandleOpenPlatformInvitePanel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "HandleOpenPlatformInvitePanel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::TrySetInviteButtonEnabled
// Il2CppName: TrySetInviteButtonEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)()>(&GlobalNamespace::ServerPlayerListViewController::TrySetInviteButtonEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "TrySetInviteButtonEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(bool, bool, bool)>(&GlobalNamespace::ServerPlayerListViewController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ServerPlayerListViewController::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ServerPlayerListViewController::*)(bool, bool)>(&GlobalNamespace::ServerPlayerListViewController::DidDeactivate)> {
  static const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ServerPlayerListViewController*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
