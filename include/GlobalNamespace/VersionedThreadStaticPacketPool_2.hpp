// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPoolablePacket
  class IPoolablePacket;
  // Forward declaring type: VersionedPacketPool`2<T, T2>
  template<typename T, typename T2>
  class VersionedPacketPool_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: VersionedThreadStaticPacketPool`2
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename T, typename T2>
  class VersionedThreadStaticPacketPool_2 : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: VersionedThreadStaticPacketPool_2
    VersionedThreadStaticPacketPool_2() noexcept {}
    // [ThreadStaticAttribute] Offset: 0xED9940
    // Autogenerated static field getter
    // Get static field: static private VersionedPacketPool`2<T,T2> _pool
    static GlobalNamespace::VersionedPacketPool_2<T, T2>* _get__pool() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VersionedThreadStaticPacketPool_2::_get__pool");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<GlobalNamespace::VersionedPacketPool_2<T, T2>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VersionedThreadStaticPacketPool_2<T, T2>*>::get(), "_pool")));
    }
    // Autogenerated static field setter
    // Set static field: static private VersionedPacketPool`2<T,T2> _pool
    static void _set__pool(GlobalNamespace::VersionedPacketPool_2<T, T2>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VersionedThreadStaticPacketPool_2::_set__pool");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VersionedThreadStaticPacketPool_2<T, T2>*>::get(), "_pool", value)));
    }
    // static public VersionedPacketPool`2<T,T2> get_pool()
    // Offset: 0xFFFFFFFF
    static GlobalNamespace::VersionedPacketPool_2<T, T2>* get_pool() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VersionedThreadStaticPacketPool_2::get_pool");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<VersionedThreadStaticPacketPool_2<T, T2>*>::get(), "get_pool", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::VersionedPacketPool_2<T, T2>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
    }
  }; // VersionedThreadStaticPacketPool`2
  // Could not write size check! Type: VersionedThreadStaticPacketPool`2 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::VersionedThreadStaticPacketPool_2, "", "VersionedThreadStaticPacketPool`2");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
