// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: GorillaHatButton
#include "GlobalNamespace/GorillaHatButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaLevelScreen
  class GorillaLevelScreen;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaHatButtonParent
  class GorillaHatButtonParent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaHatButtonParent);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaHatButtonParent*, "", "GorillaHatButtonParent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: GorillaHatButtonParent
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaHatButtonParent : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    public:
    // public GorillaHatButton[] hatButtons
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::GorillaHatButton*> hatButtons;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaHatButton*>) == 0x8);
    // public UnityEngine.GameObject[] adminObjects
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> adminObjects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.String hat
    // Size: 0x8
    // Offset: 0x30
    ::StringW hat;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String face
    // Size: 0x8
    // Offset: 0x38
    ::StringW face;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String badge
    // Size: 0x8
    // Offset: 0x40
    ::StringW badge;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String leftHandHold
    // Size: 0x8
    // Offset: 0x48
    ::StringW leftHandHold;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String rightHandHold
    // Size: 0x8
    // Offset: 0x50
    ::StringW rightHandHold;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean initialized
    // Size: 0x1
    // Offset: 0x58
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: screen
    char __padding7[0x7] = {};
    // public GorillaLevelScreen screen
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::GorillaLevelScreen* screen;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaLevelScreen*) == 0x8);
    public:
    // Get instance field reference: public GorillaHatButton[] hatButtons
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaHatButton*>& dyn_hatButtons();
    // Get instance field reference: public UnityEngine.GameObject[] adminObjects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_adminObjects();
    // Get instance field reference: public System.String hat
    [[deprecated("Use field access instead!")]] ::StringW& dyn_hat();
    // Get instance field reference: public System.String face
    [[deprecated("Use field access instead!")]] ::StringW& dyn_face();
    // Get instance field reference: public System.String badge
    [[deprecated("Use field access instead!")]] ::StringW& dyn_badge();
    // Get instance field reference: public System.String leftHandHold
    [[deprecated("Use field access instead!")]] ::StringW& dyn_leftHandHold();
    // Get instance field reference: public System.String rightHandHold
    [[deprecated("Use field access instead!")]] ::StringW& dyn_rightHandHold();
    // Get instance field reference: public System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: public GorillaLevelScreen screen
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaLevelScreen*& dyn_screen();
    // public System.Void .ctor()
    // Offset: 0xC6E020
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaHatButtonParent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaHatButtonParent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaHatButtonParent*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0xC6DC24
    void Start();
    // public System.Void LateUpdate()
    // Offset: 0xC6DCF8
    void LateUpdate();
    // public System.Void PressButton(System.Boolean isOn, GorillaHatButton/HatButtonType buttonType, System.String buttonValue)
    // Offset: 0xC6D77C
    void PressButton(bool isOn, ::GlobalNamespace::GorillaHatButton::HatButtonType buttonType, ::StringW buttonValue);
    // private System.Void UpdateButtonState()
    // Offset: 0xC6DF58
    void UpdateButtonState();
  }; // GorillaHatButtonParent
  #pragma pack(pop)
  static check_size<sizeof(GorillaHatButtonParent), 96 + sizeof(::GlobalNamespace::GorillaLevelScreen*)> __GlobalNamespace_GorillaHatButtonParentSizeCheck;
  static_assert(sizeof(GorillaHatButtonParent) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButtonParent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButtonParent::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButtonParent::*)()>(&GlobalNamespace::GorillaHatButtonParent::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButtonParent*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButtonParent::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButtonParent::*)()>(&GlobalNamespace::GorillaHatButtonParent::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButtonParent*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButtonParent::PressButton
// Il2CppName: PressButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButtonParent::*)(bool, ::GlobalNamespace::GorillaHatButton::HatButtonType, ::StringW)>(&GlobalNamespace::GorillaHatButtonParent::PressButton)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaHatButton/HatButtonType")->byval_arg;
    static auto* buttonValue = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButtonParent*), "PressButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn, buttonType, buttonValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButtonParent::UpdateButtonState
// Il2CppName: UpdateButtonState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButtonParent::*)()>(&GlobalNamespace::GorillaHatButtonParent::UpdateButtonState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButtonParent*), "UpdateButtonState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
