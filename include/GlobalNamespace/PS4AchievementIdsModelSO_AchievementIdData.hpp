// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PS4AchievementIdsModelSO
#include "GlobalNamespace/PS4AchievementIdsModelSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AchievementSO
  class AchievementSO;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData*, "", "PS4AchievementIdsModelSO/AchievementIdData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: PS4AchievementIdsModelSO/AchievementIdData
  // [TokenAttribute] Offset: FFFFFFFF
  class PS4AchievementIdsModelSO::AchievementIdData : public ::Il2CppObject {
    public:
    public:
    // private System.Int32 _trophyId
    // Size: 0x4
    // Offset: 0x10
    int trophyId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: trophyId and: achievement
    char __padding0[0x4] = {};
    // private AchievementSO _achievement
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::AchievementSO* achievement;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AchievementSO*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _trophyId
    [[deprecated("Use field access instead!")]] int& dyn__trophyId();
    // Get instance field reference: private AchievementSO _achievement
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AchievementSO*& dyn__achievement();
    // public System.Int32 get_ps4TrophyId()
    // Offset: 0x133B4A0
    int get_ps4TrophyId();
    // public System.String get_achievementId()
    // Offset: 0x133B2D0
    ::StringW get_achievementId();
    // public System.Void .ctor()
    // Offset: 0x133B4A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PS4AchievementIdsModelSO::AchievementIdData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PS4AchievementIdsModelSO::AchievementIdData*, creationType>()));
    }
  }; // PS4AchievementIdsModelSO/AchievementIdData
  #pragma pack(pop)
  static check_size<sizeof(PS4AchievementIdsModelSO::AchievementIdData), 24 + sizeof(::GlobalNamespace::AchievementSO*)> __GlobalNamespace_PS4AchievementIdsModelSO_AchievementIdDataSizeCheck;
  static_assert(sizeof(PS4AchievementIdsModelSO::AchievementIdData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::get_ps4TrophyId
// Il2CppName: get_ps4TrophyId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::*)()>(&GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::get_ps4TrophyId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData*), "get_ps4TrophyId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::get_achievementId
// Il2CppName: get_achievementId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::*)()>(&GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::get_achievementId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData*), "get_achievementId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PS4AchievementIdsModelSO::AchievementIdData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
