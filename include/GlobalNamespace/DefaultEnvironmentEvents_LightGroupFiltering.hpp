// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: DefaultEnvironmentEvents
#include "GlobalNamespace/DefaultEnvironmentEvents.hpp"
// Including type: IndexFilter/IndexFilterRandomType
#include "GlobalNamespace/IndexFilter.hpp"
// Including type: IndexFilter/IndexFilterLimitAlsoAffectType
// Already included the same include: GlobalNamespace/IndexFilter.hpp
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering*, "", "DefaultEnvironmentEvents/LightGroupFiltering");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: DefaultEnvironmentEvents/LightGroupFiltering
  // [TokenAttribute] Offset: FFFFFFFF
  class DefaultEnvironmentEvents::LightGroupFiltering : public ::Il2CppObject {
    public:
    public:
    // private System.Boolean _useFiltering
    // Size: 0x1
    // Offset: 0x10
    bool useFiltering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useFiltering and: randomType
    char __padding0[0x3] = {};
    // private IndexFilter/IndexFilterRandomType _randomType
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::IndexFilter::IndexFilterRandomType randomType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IndexFilter::IndexFilterRandomType) == 0x4);
    // private System.Single _limit
    // Size: 0x4
    // Offset: 0x18
    float limit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private IndexFilter/IndexFilterLimitAlsoAffectType _alsoAffectType
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType alsoAffectType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType) == 0x4);
    // private System.Int32 _seed
    // Size: 0x4
    // Offset: 0x20
    int seed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: private System.Boolean _useFiltering
    [[deprecated("Use field access instead!")]] bool& dyn__useFiltering();
    // Get instance field reference: private IndexFilter/IndexFilterRandomType _randomType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter::IndexFilterRandomType& dyn__randomType();
    // Get instance field reference: private System.Single _limit
    [[deprecated("Use field access instead!")]] float& dyn__limit();
    // Get instance field reference: private IndexFilter/IndexFilterLimitAlsoAffectType _alsoAffectType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType& dyn__alsoAffectType();
    // Get instance field reference: private System.Int32 _seed
    [[deprecated("Use field access instead!")]] int& dyn__seed();
    // public System.Boolean get_useFiltering()
    // Offset: 0x1460C50
    bool get_useFiltering();
    // public IndexFilter/IndexFilterRandomType get_randomType()
    // Offset: 0x1460C58
    ::GlobalNamespace::IndexFilter::IndexFilterRandomType get_randomType();
    // public System.Single get_limit()
    // Offset: 0x1460C60
    float get_limit();
    // public IndexFilter/IndexFilterLimitAlsoAffectType get_alsoAffectType()
    // Offset: 0x1460C68
    ::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType get_alsoAffectType();
    // public System.Int32 get_seed()
    // Offset: 0x1460C70
    int get_seed();
    // public System.Void .ctor()
    // Offset: 0x1460C78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultEnvironmentEvents::LightGroupFiltering* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultEnvironmentEvents::LightGroupFiltering*, creationType>()));
    }
  }; // DefaultEnvironmentEvents/LightGroupFiltering
  #pragma pack(pop)
  static check_size<sizeof(DefaultEnvironmentEvents::LightGroupFiltering), 32 + sizeof(int)> __GlobalNamespace_DefaultEnvironmentEvents_LightGroupFilteringSizeCheck;
  static_assert(sizeof(DefaultEnvironmentEvents::LightGroupFiltering) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_useFiltering
// Il2CppName: get_useFiltering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_useFiltering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering*), "get_useFiltering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_randomType
// Il2CppName: get_randomType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IndexFilter::IndexFilterRandomType (GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_randomType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering*), "get_randomType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_limit
// Il2CppName: get_limit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_limit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering*), "get_limit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_alsoAffectType
// Il2CppName: get_alsoAffectType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IndexFilter::IndexFilterLimitAlsoAffectType (GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_alsoAffectType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering*), "get_alsoAffectType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_seed
// Il2CppName: get_seed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::get_seed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering*), "get_seed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::LightGroupFiltering::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
