// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTriggerBox
#include "GlobalNamespace/GorillaTriggerBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaLevelScreen
  class GorillaLevelScreen;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: PhotonNetworkController
  class PhotonNetworkController;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaNetworkPrivateTestJoin
  class GorillaNetworkPrivateTestJoin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaNetworkPrivateTestJoin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaNetworkPrivateTestJoin*, "", "GorillaNetworkPrivateTestJoin");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7D
  #pragma pack(push, 1)
  // Autogenerated type: GorillaNetworkPrivateTestJoin
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaNetworkPrivateTestJoin : public ::GlobalNamespace::GorillaTriggerBox {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::GorillaNetworkPrivateTestJoin::$GracePeriod$d__16
    class $GracePeriod$d__16;
    public:
    // public UnityEngine.GameObject[] makeSureThisIsDisabled
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::GameObject*> makeSureThisIsDisabled;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public UnityEngine.GameObject[] makeSureThisIsEnabled
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> makeSureThisIsEnabled;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // public System.String gameModeName
    // Size: 0x8
    // Offset: 0x30
    ::StringW gameModeName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public GorillaNetworking.PhotonNetworkController photonNetworkController
    // Size: 0x8
    // Offset: 0x38
    ::GorillaNetworking::PhotonNetworkController* photonNetworkController;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::PhotonNetworkController*) == 0x8);
    // public System.String componentTypeToAdd
    // Size: 0x8
    // Offset: 0x40
    ::StringW componentTypeToAdd;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.GameObject componentTarget
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* componentTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public GorillaLevelScreen[] joinScreens
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::GlobalNamespace::GorillaLevelScreen*> joinScreens;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaLevelScreen*>) == 0x8);
    // public GorillaLevelScreen[] leaveScreens
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::GlobalNamespace::GorillaLevelScreen*> leaveScreens;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaLevelScreen*>) == 0x8);
    // private UnityEngine.Transform tosPition
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* tosPition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform othsTosPosition
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* othsTosPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private Photon.Pun.PhotonView fotVew
    // Size: 0x8
    // Offset: 0x70
    ::Photon::Pun::PhotonView* fotVew;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x78
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean waiting
    // Size: 0x1
    // Offset: 0x7C
    bool waiting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public GorillaNetworkPrivateTestJoin instance
    static ::GlobalNamespace::GorillaNetworkPrivateTestJoin* _get_instance();
    // Set static field: static public GorillaNetworkPrivateTestJoin instance
    static void _set_instance(::GlobalNamespace::GorillaNetworkPrivateTestJoin* value);
    // Get instance field reference: public UnityEngine.GameObject[] makeSureThisIsDisabled
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_makeSureThisIsDisabled();
    // Get instance field reference: public UnityEngine.GameObject[] makeSureThisIsEnabled
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_makeSureThisIsEnabled();
    // Get instance field reference: public System.String gameModeName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameModeName();
    // Get instance field reference: public GorillaNetworking.PhotonNetworkController photonNetworkController
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::PhotonNetworkController*& dyn_photonNetworkController();
    // Get instance field reference: public System.String componentTypeToAdd
    [[deprecated("Use field access instead!")]] ::StringW& dyn_componentTypeToAdd();
    // Get instance field reference: public UnityEngine.GameObject componentTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_componentTarget();
    // Get instance field reference: public GorillaLevelScreen[] joinScreens
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& dyn_joinScreens();
    // Get instance field reference: public GorillaLevelScreen[] leaveScreens
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLevelScreen*>& dyn_leaveScreens();
    // Get instance field reference: private UnityEngine.Transform tosPition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tosPition();
    // Get instance field reference: private UnityEngine.Transform othsTosPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_othsTosPosition();
    // Get instance field reference: private Photon.Pun.PhotonView fotVew
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_fotVew();
    // Get instance field reference: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: private System.Boolean waiting
    [[deprecated("Use field access instead!")]] bool& dyn_waiting();
    // public System.Void Awake()
    // Offset: 0xDB753C
    void Awake();
    // public System.Void LateUpdate()
    // Offset: 0xDB765C
    void LateUpdate();
    // private System.Collections.IEnumerator GracePeriod()
    // Offset: 0xDB7E58
    ::System::Collections::IEnumerator* GracePeriod();
    // public System.Void .ctor()
    // Offset: 0xDB7EF4
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaNetworkPrivateTestJoin* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaNetworkPrivateTestJoin::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaNetworkPrivateTestJoin*, creationType>()));
    }
  }; // GorillaNetworkPrivateTestJoin
  #pragma pack(pop)
  static check_size<sizeof(GorillaNetworkPrivateTestJoin), 124 + sizeof(bool)> __GlobalNamespace_GorillaNetworkPrivateTestJoinSizeCheck;
  static_assert(sizeof(GorillaNetworkPrivateTestJoin) == 0x7D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkPrivateTestJoin::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkPrivateTestJoin::*)()>(&GlobalNamespace::GorillaNetworkPrivateTestJoin::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkPrivateTestJoin*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkPrivateTestJoin::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaNetworkPrivateTestJoin::*)()>(&GlobalNamespace::GorillaNetworkPrivateTestJoin::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkPrivateTestJoin*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkPrivateTestJoin::GracePeriod
// Il2CppName: GracePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaNetworkPrivateTestJoin::*)()>(&GlobalNamespace::GorillaNetworkPrivateTestJoin::GracePeriod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaNetworkPrivateTestJoin*), "GracePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaNetworkPrivateTestJoin::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
