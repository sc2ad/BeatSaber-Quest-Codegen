// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDataLoader
#include "GlobalNamespace/BeatmapDataLoader.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
// Including type: BeatmapSaveDataVersion3.BeatmapSaveData
#include "BeatmapSaveDataVersion3/BeatmapSaveData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*, "", "BeatmapDataLoader/BpmTimeProcessor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataLoader/BpmTimeProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapDataLoader::BpmTimeProcessor : public ::Il2CppObject/*, public ::GlobalNamespace::IBeatToTimeConvertor*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::BpmChangeData
    struct BpmChangeData;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BeatmapDataLoader/BpmTimeProcessor/BpmChangeData
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct BpmChangeData/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.Single bpmChangeStartTime
      // Size: 0x4
      // Offset: 0x0
      float bpmChangeStartTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public readonly System.Single bpmChangeStartBpmTime
      // Size: 0x4
      // Offset: 0x4
      float bpmChangeStartBpmTime;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public readonly System.Single bpm
      // Size: 0x4
      // Offset: 0x8
      float bpm;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: BpmChangeData
      constexpr BpmChangeData(float bpmChangeStartTime_ = {}, float bpmChangeStartBpmTime_ = {}, float bpm_ = {}) noexcept : bpmChangeStartTime{bpmChangeStartTime_}, bpmChangeStartBpmTime{bpmChangeStartBpmTime_}, bpm{bpm_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.Single bpmChangeStartTime
      [[deprecated("Use field access instead!")]] float& dyn_bpmChangeStartTime();
      // Get instance field reference: public readonly System.Single bpmChangeStartBpmTime
      [[deprecated("Use field access instead!")]] float& dyn_bpmChangeStartBpmTime();
      // Get instance field reference: public readonly System.Single bpm
      [[deprecated("Use field access instead!")]] float& dyn_bpm();
      // public System.Void .ctor(System.Single bpmChangeStartTime, System.Single bpmChangeStartBpmTime, System.Single bpm)
      // Offset: 0x1397A60
      // ABORTED: conflicts with another method.  BpmChangeData(float bpmChangeStartTime, float bpmChangeStartBpmTime, float bpm);
    }; // BeatmapDataLoader/BpmTimeProcessor/BpmChangeData
    #pragma pack(pop)
    static check_size<sizeof(BeatmapDataLoader::BpmTimeProcessor::BpmChangeData), 8 + sizeof(float)> __GlobalNamespace_BeatmapDataLoader_BpmTimeProcessor_BpmChangeDataSizeCheck;
    static_assert(sizeof(BeatmapDataLoader::BpmTimeProcessor::BpmChangeData) == 0xC);
    public:
    // private readonly System.Collections.Generic.List`1<BeatmapDataLoader/BpmTimeProcessor/BpmChangeData> _bpmChangeDataList
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::BpmChangeData>* bpmChangeDataList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::BpmChangeData>*) == 0x8);
    // private System.Int32 currentBpmChangesDataIdx
    // Size: 0x4
    // Offset: 0x18
    int currentBpmChangesDataIdx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatToTimeConvertor
    operator ::GlobalNamespace::IBeatToTimeConvertor() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatToTimeConvertor*>(this);
    }
    // Creating interface conversion operator: i_IBeatToTimeConvertor
    inline ::GlobalNamespace::IBeatToTimeConvertor* i_IBeatToTimeConvertor() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatToTimeConvertor*>(this);
    }
    // Get instance field reference: private readonly System.Collections.Generic.List`1<BeatmapDataLoader/BpmTimeProcessor/BpmChangeData> _bpmChangeDataList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::BpmChangeData>*& dyn__bpmChangeDataList();
    // Get instance field reference: private System.Int32 currentBpmChangesDataIdx
    [[deprecated("Use field access instead!")]] int& dyn_currentBpmChangesDataIdx();
    // public System.Void .ctor(System.Single startBpm, System.Collections.Generic.List`1<BeatmapSaveDataVersion3.BeatmapSaveData/BeatmapSaveDataVersion3.BpmChangeEventData> bpmEventsSaveData)
    // Offset: 0x139665C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataLoader::BpmTimeProcessor* New_ctor(float startBpm, ::System::Collections::Generic::List_1<::BeatmapSaveDataVersion3::BeatmapSaveData::BpmChangeEventData*>* bpmEventsSaveData) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataLoader::BpmTimeProcessor*, creationType>(startBpm, bpmEventsSaveData)));
    }
    // public System.Single ConvertBeatToTime(System.Single beat)
    // Offset: 0x1397A6C
    float ConvertBeatToTime(float beat);
    // public System.Void Reset()
    // Offset: 0x1396CFC
    void Reset();
  }; // BeatmapDataLoader/BpmTimeProcessor
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataLoader::BpmTimeProcessor), 24 + sizeof(int)> __GlobalNamespace_BeatmapDataLoader_BpmTimeProcessorSizeCheck;
  static_assert(sizeof(BeatmapDataLoader::BpmTimeProcessor) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::BpmChangeData, "", "BeatmapDataLoader/BpmTimeProcessor/BpmChangeData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::ConvertBeatToTime
// Il2CppName: ConvertBeatToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::*)(float)>(&GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::ConvertBeatToTime)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*), "ConvertBeatToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::*)()>(&GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataLoader::BpmTimeProcessor*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
