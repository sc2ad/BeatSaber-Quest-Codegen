// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ImageView
  class ImageView;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PageControlElement
  // [TokenAttribute] Offset: FFFFFFFF
  class PageControlElement : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private HMUI.ImageView _imageView
    // Size: 0x8
    // Offset: 0x20
    HMUI::ImageView* imageView;
    // Field size check
    static_assert(sizeof(HMUI::ImageView*) == 0x8);
    // [SpaceAttribute] Offset: 0xF1330C
    // private UnityEngine.Color _selectedColor
    // Size: 0x10
    // Offset: 0x28
    UnityEngine::Color selectedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _unselectedColor
    // Size: 0x10
    // Offset: 0x38
    UnityEngine::Color unselectedColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Creating value type constructor for type: PageControlElement
    PageControlElement(UnityEngine::RectTransform* rectTransform_ = {}, HMUI::ImageView* imageView_ = {}, UnityEngine::Color selectedColor_ = {}, UnityEngine::Color unselectedColor_ = {}) noexcept : rectTransform{rectTransform_}, imageView{imageView_}, selectedColor{selectedColor_}, unselectedColor{unselectedColor_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private HMUI.ImageView _imageView
    HMUI::ImageView*& dyn__imageView();
    // Get instance field reference: private UnityEngine.Color _selectedColor
    UnityEngine::Color& dyn__selectedColor();
    // Get instance field reference: private UnityEngine.Color _unselectedColor
    UnityEngine::Color& dyn__unselectedColor();
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0x1125D24
    UnityEngine::RectTransform* get_rectTransform();
    // public System.Void SetSelected(System.Boolean isSelected)
    // Offset: 0x1125AEC
    void SetSelected(bool isSelected);
    // public System.Void .ctor()
    // Offset: 0x1125D2C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PageControlElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PageControlElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PageControlElement*, creationType>()));
    }
  }; // PageControlElement
  #pragma pack(pop)
  static check_size<sizeof(PageControlElement), 56 + sizeof(UnityEngine::Color)> __GlobalNamespace_PageControlElementSizeCheck;
  static_assert(sizeof(PageControlElement) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PageControlElement*, "", "PageControlElement");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PageControlElement::get_rectTransform
// Il2CppName: get_rectTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::RectTransform* (GlobalNamespace::PageControlElement::*)()>(&GlobalNamespace::PageControlElement::get_rectTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PageControlElement*), "get_rectTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PageControlElement::SetSelected
// Il2CppName: SetSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PageControlElement::*)(bool)>(&GlobalNamespace::PageControlElement::SetSelected)> {
  static const MethodInfo* get() {
    static auto* isSelected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PageControlElement*), "SetSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isSelected});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PageControlElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
