// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPun
#include "Photon/Pun/MonoBehaviourPun.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
// Including type: Photon.Pun.IPhotonViewCallback
#include "Photon/Pun/IPhotonViewCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaThrowable
  class GorillaThrowable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaThrowable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaThrowable*, "", "GorillaThrowable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x184
  #pragma pack(push, 1)
  // Autogenerated type: GorillaThrowable
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaThrowable : public ::Photon::Pun::MonoBehaviourPun/*, public ::Photon::Pun::IPunObservable, public ::Photon::Pun::IPhotonViewCallback*/ {
    public:
    public:
    // public System.Int32 trackingHistorySize
    // Size: 0x4
    // Offset: 0x20
    int trackingHistorySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single throwMultiplier
    // Size: 0x4
    // Offset: 0x24
    float throwMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single throwMagnitudeLimit
    // Size: 0x4
    // Offset: 0x28
    float throwMagnitudeLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: throwMagnitudeLimit and: velocityHistory
    char __padding2[0x4] = {};
    // private UnityEngine.Vector3[] velocityHistory
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Vector3> velocityHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] headsetVelocityHistory
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Vector3> headsetVelocityHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] positionHistory
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Vector3> positionHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] headsetPositionHistory
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Vector3> headsetPositionHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] rotationHistory
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Vector3> rotationHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3[] rotationalVelocityHistory
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector3> rotationalVelocityHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private UnityEngine.Vector3 previousPosition
    // Size: 0xC
    // Offset: 0x60
    ::UnityEngine::Vector3 previousPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 previousRotation
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 previousRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 previousHeadsetPosition
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 previousHeadsetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 currentIndex
    // Size: 0x4
    // Offset: 0x84
    int currentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector3 currentVelocity
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 currentVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 currentHeadsetVelocity
    // Size: 0xC
    // Offset: 0x94
    ::UnityEngine::Vector3 currentHeadsetVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 currentRotationalVelocity
    // Size: 0xC
    // Offset: 0xA0
    ::UnityEngine::Vector3 currentRotationalVelocity;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 denormalizedVelocityAverage
    // Size: 0xC
    // Offset: 0xAC
    ::UnityEngine::Vector3 denormalizedVelocityAverage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 denormalizedHeadsetVelocityAverage
    // Size: 0xC
    // Offset: 0xB8
    ::UnityEngine::Vector3 denormalizedHeadsetVelocityAverage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 denormalizedRotationalVelocityAverage
    // Size: 0xC
    // Offset: 0xC4
    ::UnityEngine::Vector3 denormalizedRotationalVelocityAverage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Transform headsetTransform
    // Size: 0x8
    // Offset: 0xD0
    ::UnityEngine::Transform* headsetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 targetPosition
    // Size: 0xC
    // Offset: 0xD8
    ::UnityEngine::Vector3 targetPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion targetRotation
    // Size: 0x10
    // Offset: 0xE4
    ::UnityEngine::Quaternion targetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Boolean initialLerp
    // Size: 0x1
    // Offset: 0xF4
    bool initialLerp;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialLerp and: lerpValue
    char __padding22[0x3] = {};
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0xF8
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lerpDistanceLimit
    // Size: 0x4
    // Offset: 0xFC
    float lerpDistanceLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isHeld
    // Size: 0x1
    // Offset: 0x100
    bool isHeld;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHeld and: rigidbody
    char __padding25[0x7] = {};
    // public UnityEngine.Rigidbody rigidbody
    // Size: 0x8
    // Offset: 0x108
    ::UnityEngine::Rigidbody* rigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private System.Int32 loopIndex
    // Size: 0x4
    // Offset: 0x110
    int loopIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: loopIndex and: transformToFollow
    char __padding27[0x4] = {};
    // private UnityEngine.Transform transformToFollow
    // Size: 0x8
    // Offset: 0x118
    ::UnityEngine::Transform* transformToFollow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0x120
    ::UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion offsetRotation
    // Size: 0x10
    // Offset: 0x12C
    ::UnityEngine::Quaternion offsetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: offsetRotation and: audioSource
    char __padding30[0x4] = {};
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x140
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Int32 timeLastReceived
    // Size: 0x4
    // Offset: 0x148
    int timeLastReceived;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean synchThrow
    // Size: 0x1
    // Offset: 0x14C
    bool synchThrow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: synchThrow and: tempFloat
    char __padding33[0x3] = {};
    // public System.Single tempFloat
    // Size: 0x4
    // Offset: 0x150
    float tempFloat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: tempFloat and: grabbingTransform
    char __padding34[0x4] = {};
    // public UnityEngine.Transform grabbingTransform
    // Size: 0x8
    // Offset: 0x158
    ::UnityEngine::Transform* grabbingTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single pickupLerp
    // Size: 0x4
    // Offset: 0x160
    float pickupLerp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minVelocity
    // Size: 0x4
    // Offset: 0x164
    float minVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxVelocity
    // Size: 0x4
    // Offset: 0x168
    float maxVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minVolume
    // Size: 0x4
    // Offset: 0x16C
    float minVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxVolume
    // Size: 0x4
    // Offset: 0x170
    float maxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean isLinear
    // Size: 0x1
    // Offset: 0x174
    bool isLinear;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLinear and: linearMax
    char __padding41[0x3] = {};
    // public System.Single linearMax
    // Size: 0x4
    // Offset: 0x178
    float linearMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single exponThrowMultMax
    // Size: 0x4
    // Offset: 0x17C
    float exponThrowMultMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 bounceAudioClip
    // Size: 0x4
    // Offset: 0x180
    int bounceAudioClip;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // Creating interface conversion operator: operator ::Photon::Pun::IPhotonViewCallback
    operator ::Photon::Pun::IPhotonViewCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPhotonViewCallback*>(this);
    }
    // Get instance field reference: public System.Int32 trackingHistorySize
    [[deprecated("Use field access instead!")]] int& dyn_trackingHistorySize();
    // Get instance field reference: public System.Single throwMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_throwMultiplier();
    // Get instance field reference: public System.Single throwMagnitudeLimit
    [[deprecated("Use field access instead!")]] float& dyn_throwMagnitudeLimit();
    // Get instance field reference: private UnityEngine.Vector3[] velocityHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_velocityHistory();
    // Get instance field reference: private UnityEngine.Vector3[] headsetVelocityHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_headsetVelocityHistory();
    // Get instance field reference: private UnityEngine.Vector3[] positionHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_positionHistory();
    // Get instance field reference: private UnityEngine.Vector3[] headsetPositionHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_headsetPositionHistory();
    // Get instance field reference: private UnityEngine.Vector3[] rotationHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_rotationHistory();
    // Get instance field reference: private UnityEngine.Vector3[] rotationalVelocityHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_rotationalVelocityHistory();
    // Get instance field reference: private UnityEngine.Vector3 previousPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_previousPosition();
    // Get instance field reference: private UnityEngine.Vector3 previousRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_previousRotation();
    // Get instance field reference: private UnityEngine.Vector3 previousHeadsetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_previousHeadsetPosition();
    // Get instance field reference: private System.Int32 currentIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentIndex();
    // Get instance field reference: private UnityEngine.Vector3 currentVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentVelocity();
    // Get instance field reference: private UnityEngine.Vector3 currentHeadsetVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentHeadsetVelocity();
    // Get instance field reference: private UnityEngine.Vector3 currentRotationalVelocity
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_currentRotationalVelocity();
    // Get instance field reference: public UnityEngine.Vector3 denormalizedVelocityAverage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_denormalizedVelocityAverage();
    // Get instance field reference: private UnityEngine.Vector3 denormalizedHeadsetVelocityAverage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_denormalizedHeadsetVelocityAverage();
    // Get instance field reference: private UnityEngine.Vector3 denormalizedRotationalVelocityAverage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_denormalizedRotationalVelocityAverage();
    // Get instance field reference: private UnityEngine.Transform headsetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headsetTransform();
    // Get instance field reference: private UnityEngine.Vector3 targetPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_targetPosition();
    // Get instance field reference: private UnityEngine.Quaternion targetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_targetRotation();
    // Get instance field reference: public System.Boolean initialLerp
    [[deprecated("Use field access instead!")]] bool& dyn_initialLerp();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: public System.Single lerpDistanceLimit
    [[deprecated("Use field access instead!")]] float& dyn_lerpDistanceLimit();
    // Get instance field reference: public System.Boolean isHeld
    [[deprecated("Use field access instead!")]] bool& dyn_isHeld();
    // Get instance field reference: public UnityEngine.Rigidbody rigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_rigidbody();
    // Get instance field reference: private System.Int32 loopIndex
    [[deprecated("Use field access instead!")]] int& dyn_loopIndex();
    // Get instance field reference: private UnityEngine.Transform transformToFollow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_transformToFollow();
    // Get instance field reference: private UnityEngine.Vector3 offset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_offset();
    // Get instance field reference: private UnityEngine.Quaternion offsetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_offsetRotation();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public System.Int32 timeLastReceived
    [[deprecated("Use field access instead!")]] int& dyn_timeLastReceived();
    // Get instance field reference: public System.Boolean synchThrow
    [[deprecated("Use field access instead!")]] bool& dyn_synchThrow();
    // Get instance field reference: public System.Single tempFloat
    [[deprecated("Use field access instead!")]] float& dyn_tempFloat();
    // Get instance field reference: public UnityEngine.Transform grabbingTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_grabbingTransform();
    // Get instance field reference: public System.Single pickupLerp
    [[deprecated("Use field access instead!")]] float& dyn_pickupLerp();
    // Get instance field reference: public System.Single minVelocity
    [[deprecated("Use field access instead!")]] float& dyn_minVelocity();
    // Get instance field reference: public System.Single maxVelocity
    [[deprecated("Use field access instead!")]] float& dyn_maxVelocity();
    // Get instance field reference: public System.Single minVolume
    [[deprecated("Use field access instead!")]] float& dyn_minVolume();
    // Get instance field reference: public System.Single maxVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxVolume();
    // Get instance field reference: public System.Boolean isLinear
    [[deprecated("Use field access instead!")]] bool& dyn_isLinear();
    // Get instance field reference: public System.Single linearMax
    [[deprecated("Use field access instead!")]] float& dyn_linearMax();
    // Get instance field reference: public System.Single exponThrowMultMax
    [[deprecated("Use field access instead!")]] float& dyn_exponThrowMultMax();
    // Get instance field reference: public System.Int32 bounceAudioClip
    [[deprecated("Use field access instead!")]] int& dyn_bounceAudioClip();
    // public System.Void .ctor()
    // Offset: 0xC87620
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaThrowable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaThrowable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaThrowable*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0xC85CC4
    void Start();
    // public System.Void LateUpdate()
    // Offset: 0xC85F98
    void LateUpdate();
    // private System.Void IsHandPushing(UnityEngine.XR.XRNode node)
    // Offset: 0xC86A20
    void IsHandPushing(::UnityEngine::XR::XRNode node);
    // private System.Void StoreHistories()
    // Offset: 0xC864EC
    void StoreHistories();
    // public System.Void Grabbed(UnityEngine.Transform grabTransform)
    // Offset: 0xC86A24
    void Grabbed(::UnityEngine::Transform* grabTransform);
    // public System.Void ThrowThisThingo()
    // Offset: 0xC86B9C
    void ThrowThisThingo();
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC86F10
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0xC87110
    void OnCollisionEnter(::UnityEngine::Collision* collision);
    // public System.Void PlaySurfaceHit(System.Int32 soundIndex, System.Single tapVolume)
    // Offset: 0xC8741C
    void PlaySurfaceHit(int soundIndex, float tapVolume);
    // public System.Single InterpolateVolume()
    // Offset: 0xC8732C
    float InterpolateVolume();
  }; // GorillaThrowable
  #pragma pack(pop)
  static check_size<sizeof(GorillaThrowable), 384 + sizeof(int)> __GlobalNamespace_GorillaThrowableSizeCheck;
  static_assert(sizeof(GorillaThrowable) == 0x184);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)()>(&GlobalNamespace::GorillaThrowable::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)()>(&GlobalNamespace::GorillaThrowable::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::IsHandPushing
// Il2CppName: IsHandPushing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)(::UnityEngine::XR::XRNode)>(&GlobalNamespace::GorillaThrowable::IsHandPushing)> {
  static const MethodInfo* get() {
    static auto* node = &::il2cpp_utils::GetClassFromName("UnityEngine.XR", "XRNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "IsHandPushing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{node});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::StoreHistories
// Il2CppName: StoreHistories
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)()>(&GlobalNamespace::GorillaThrowable::StoreHistories)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "StoreHistories", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::Grabbed
// Il2CppName: Grabbed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)(::UnityEngine::Transform*)>(&GlobalNamespace::GorillaThrowable::Grabbed)> {
  static const MethodInfo* get() {
    static auto* grabTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "Grabbed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{grabTransform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::ThrowThisThingo
// Il2CppName: ThrowThisThingo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)()>(&GlobalNamespace::GorillaThrowable::ThrowThisThingo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "ThrowThisThingo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaThrowable::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)(::UnityEngine::Collision*)>(&GlobalNamespace::GorillaThrowable::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::PlaySurfaceHit
// Il2CppName: PlaySurfaceHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaThrowable::*)(int, float)>(&GlobalNamespace::GorillaThrowable::PlaySurfaceHit)> {
  static const MethodInfo* get() {
    static auto* soundIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* tapVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "PlaySurfaceHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{soundIndex, tapVolume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaThrowable::InterpolateVolume
// Il2CppName: InterpolateVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaThrowable::*)()>(&GlobalNamespace::GorillaThrowable::InterpolateVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaThrowable*), "InterpolateVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
