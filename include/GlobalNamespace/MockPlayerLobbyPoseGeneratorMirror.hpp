// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MockPlayerLobbyPoseGenerator
#include "GlobalNamespace/MockPlayerLobbyPoseGenerator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NodePoseSyncStateManager
  class NodePoseSyncStateManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MockPlayerLobbyPoseGeneratorMirror
  class MockPlayerLobbyPoseGeneratorMirror;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror*, "", "MockPlayerLobbyPoseGeneratorMirror");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayerLobbyPoseGeneratorMirror
  // [TokenAttribute] Offset: FFFFFFFF
  class MockPlayerLobbyPoseGeneratorMirror : public ::GlobalNamespace::MockPlayerLobbyPoseGenerator {
    public:
    public:
    // private readonly NodePoseSyncStateManager _nodePoseSyncStateManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NodePoseSyncStateManager*) == 0x8);
    public:
    // Creating conversion operator: operator ::GlobalNamespace::NodePoseSyncStateManager*
    constexpr operator ::GlobalNamespace::NodePoseSyncStateManager*() const noexcept {
      return nodePoseSyncStateManager;
    }
    // Get instance field reference: private readonly NodePoseSyncStateManager _nodePoseSyncStateManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NodePoseSyncStateManager*& dyn__nodePoseSyncStateManager();
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager, NodePoseSyncStateManager nodePoseSyncStateManager)
    // Offset: 0x141CC28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayerLobbyPoseGeneratorMirror* New_ctor(::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, ::GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayerLobbyPoseGeneratorMirror*, creationType>(multiplayerSessionManager, nodePoseSyncStateManager)));
    }
    // public override System.Void Init()
    // Offset: 0x141EA0C
    // Implemented from: MockPlayerLobbyPoseGenerator
    // Base method: System.Void MockPlayerLobbyPoseGenerator::Init()
    void Init();
    // public override System.Void Tick()
    // Offset: 0x141EA10
    // Implemented from: MockPlayerLobbyPoseGenerator
    // Base method: System.Void MockPlayerLobbyPoseGenerator::Tick()
    void Tick();
  }; // MockPlayerLobbyPoseGeneratorMirror
  #pragma pack(pop)
  static check_size<sizeof(MockPlayerLobbyPoseGeneratorMirror), 32 + sizeof(::GlobalNamespace::NodePoseSyncStateManager*)> __GlobalNamespace_MockPlayerLobbyPoseGeneratorMirrorSizeCheck;
  static_assert(sizeof(MockPlayerLobbyPoseGeneratorMirror) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::*)()>(&GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::*)()>(&GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerLobbyPoseGeneratorMirror*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
