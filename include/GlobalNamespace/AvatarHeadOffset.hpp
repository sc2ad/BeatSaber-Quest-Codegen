// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarPoseController
  class AvatarPoseController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AvatarHeadOffset
  class AvatarHeadOffset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AvatarHeadOffset);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AvatarHeadOffset*, "", "AvatarHeadOffset");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: AvatarHeadOffset
  // [TokenAttribute] Offset: FFFFFFFF
  class AvatarHeadOffset : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Vector3 _positionOffset
    // Size: 0xC
    // Offset: 0x18
    ::UnityEngine::Vector3 positionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: positionOffset and: avatarPoseController
    char __padding0[0x4] = {};
    // [InjectAttribute] Offset: 0x10D9A7C
    // private readonly AvatarPoseController _avatarPoseController
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::AvatarPoseController* avatarPoseController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AvatarPoseController*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Vector3 _positionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__positionOffset();
    // Get instance field reference: private readonly AvatarPoseController _avatarPoseController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AvatarPoseController*& dyn__avatarPoseController();
    // public System.Void .ctor()
    // Offset: 0x14FFC9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarHeadOffset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AvatarHeadOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarHeadOffset*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x14FF91C
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x14FFA50
    void OnDestroy();
    // private System.Void HandleMultiplayerAvatarPoseControllerDidUpdatePose(UnityEngine.Vector3 headLocalPosition)
    // Offset: 0x14FFBCC
    void HandleMultiplayerAvatarPoseControllerDidUpdatePose(::UnityEngine::Vector3 headLocalPosition);
  }; // AvatarHeadOffset
  #pragma pack(pop)
  static check_size<sizeof(AvatarHeadOffset), 40 + sizeof(::GlobalNamespace::AvatarPoseController*)> __GlobalNamespace_AvatarHeadOffsetSizeCheck;
  static_assert(sizeof(AvatarHeadOffset) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AvatarHeadOffset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AvatarHeadOffset::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarHeadOffset::*)()>(&GlobalNamespace::AvatarHeadOffset::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarHeadOffset*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarHeadOffset::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarHeadOffset::*)()>(&GlobalNamespace::AvatarHeadOffset::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarHeadOffset*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarHeadOffset::HandleMultiplayerAvatarPoseControllerDidUpdatePose
// Il2CppName: HandleMultiplayerAvatarPoseControllerDidUpdatePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AvatarHeadOffset::*)(::UnityEngine::Vector3)>(&GlobalNamespace::AvatarHeadOffset::HandleMultiplayerAvatarPoseControllerDidUpdatePose)> {
  static const MethodInfo* get() {
    static auto* headLocalPosition = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarHeadOffset*), "HandleMultiplayerAvatarPoseControllerDidUpdatePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headLocalPosition});
  }
};
