// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BloomPrePassRendererSO
#include "GlobalNamespace/BloomPrePassRendererSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BloomPrePassLightTypeSO
  class BloomPrePassLightTypeSO;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BloomPrePassRendererSO::PreallocationData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BloomPrePassRendererSO::PreallocationData*, "", "BloomPrePassRendererSO/PreallocationData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: BloomPrePassRendererSO/PreallocationData
  // [TokenAttribute] Offset: FFFFFFFF
  class BloomPrePassRendererSO::PreallocationData : public ::Il2CppObject {
    public:
    public:
    // public BloomPrePassLightTypeSO lightType
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::BloomPrePassLightTypeSO* lightType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassLightTypeSO*) == 0x8);
    // public System.Int32 preallocateCount
    // Size: 0x4
    // Offset: 0x18
    int preallocateCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public BloomPrePassLightTypeSO lightType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& dyn_lightType();
    // Get instance field reference: public System.Int32 preallocateCount
    [[deprecated("Use field access instead!")]] int& dyn_preallocateCount();
    // public System.Void .ctor()
    // Offset: 0x1CB90B8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BloomPrePassRendererSO::PreallocationData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassRendererSO::PreallocationData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BloomPrePassRendererSO::PreallocationData*, creationType>()));
    }
  }; // BloomPrePassRendererSO/PreallocationData
  #pragma pack(pop)
  static check_size<sizeof(BloomPrePassRendererSO::PreallocationData), 24 + sizeof(int)> __GlobalNamespace_BloomPrePassRendererSO_PreallocationDataSizeCheck;
  static_assert(sizeof(BloomPrePassRendererSO::PreallocationData) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassRendererSO::PreallocationData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
