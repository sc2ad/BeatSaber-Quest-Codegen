// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerActivePlayersTimeOffsetAverage
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerActivePlayersTimeOffsetAverage : public ::Il2CppObject/*, public GlobalNamespace::IMultiplayerObservable*/ {
    public:
    // [InjectAttribute] Offset: 0xF090F8
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // private System.Single _lastReturnedOffsetSyncTime
    // Size: 0x4
    // Offset: 0x18
    float lastReturnedOffsetSyncTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _timeOfLastValidReturnedTime
    // Size: 0x4
    // Offset: 0x1C
    float timeOfLastValidReturnedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MultiplayerActivePlayersTimeOffsetAverage
    MultiplayerActivePlayersTimeOffsetAverage(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, float lastReturnedOffsetSyncTime_ = {}, float timeOfLastValidReturnedTime_ = {}) noexcept : multiplayerSessionManager{multiplayerSessionManager_}, lastReturnedOffsetSyncTime{lastReturnedOffsetSyncTime_}, timeOfLastValidReturnedTime{timeOfLastValidReturnedTime_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerObservable
    operator GlobalNamespace::IMultiplayerObservable() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerObservable*>(this);
    }
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private System.Single _lastReturnedOffsetSyncTime
    float& dyn__lastReturnedOffsetSyncTime();
    // Get instance field reference: private System.Single _timeOfLastValidReturnedTime
    float& dyn__timeOfLastValidReturnedTime();
    // public System.Single get_offsetSyncTime()
    // Offset: 0x1209548
    float get_offsetSyncTime();
    // public System.Boolean get_isFailed()
    // Offset: 0x1209770
    bool get_isFailed();
    // public System.Void .ctor()
    // Offset: 0x12098D0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerActivePlayersTimeOffsetAverage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerActivePlayersTimeOffsetAverage*, creationType>()));
    }
  }; // MultiplayerActivePlayersTimeOffsetAverage
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerActivePlayersTimeOffsetAverage), 28 + sizeof(float)> __GlobalNamespace_MultiplayerActivePlayersTimeOffsetAverageSizeCheck;
  static_assert(sizeof(MultiplayerActivePlayersTimeOffsetAverage) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage*, "", "MultiplayerActivePlayersTimeOffsetAverage");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::*)()>(&GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_offsetSyncTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage*), "get_offsetSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_isFailed
// Il2CppName: get_isFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::*)()>(&GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::get_isFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage*), "get_isFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerActivePlayersTimeOffsetAverage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
