// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IScoreController
#include "GlobalNamespace/IScoreController.hpp"
// Including type: ICutScoreBufferDidFinishEvent
#include "GlobalNamespace/ICutScoreBufferDidFinishEvent.hpp"
// Including type: CutScoreBuffer
#include "GlobalNamespace/CutScoreBuffer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayModifiersModelSO
  class GameplayModifiersModelSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: PlayerHeadAndObstacleInteraction
  class PlayerHeadAndObstacleInteraction;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: IGameEnergyCounter
  class IGameEnergyCounter;
  // Forward declaring type: NoteWasCutDelegate
  class NoteWasCutDelegate;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: GameplayModifierParamsSO
  class GameplayModifierParamsSO;
  // Forward declaring type: MemoryPoolContainer`1<T>
  template<typename T>
  class MemoryPoolContainer_1;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF8
  #pragma pack(push, 1)
  // Autogenerated type: ScoreController
  // [TokenAttribute] Offset: FFFFFFFF
  class ScoreController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IScoreController, public GlobalNamespace::ICutScoreBufferDidFinishEvent*/ {
    public:
    // [TooltipAttribute] Offset: 0xF0AE40
    // private System.Int32 _feverModeRequiredCombo
    // Size: 0x4
    // Offset: 0x18
    int feverModeRequiredCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _feverModeDuration
    // Size: 0x4
    // Offset: 0x1C
    float feverModeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private GameplayModifiersModelSO _gameplayModifiersModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiersModelSO*) == 0x8);
    // [InjectAttribute] Offset: 0xF0AEAC
    // private readonly GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers*) == 0x8);
    // [InjectAttribute] Offset: 0xF0AEBC
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF0AECC
    // private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerHeadAndObstacleInteraction*) == 0x8);
    // [InjectAttribute] Offset: 0xF0AEDC
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0AEEC
    // private readonly IGameEnergyCounter _gameEnergyCounter
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::IGameEnergyCounter* gameEnergyCounter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IGameEnergyCounter*) == 0x8);
    // [InjectAttribute] Offset: 0xF0AEFC
    // private readonly CutScoreBuffer/Pool _cutScoreBufferPool
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::CutScoreBuffer::Pool* cutScoreBufferPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CutScoreBuffer::Pool*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF0C
    // private NoteWasCutDelegate noteWasCutEvent
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::NoteWasCutDelegate* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteWasCutDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF1C
    // private System.Action`2<NoteData,System.Int32> noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_2<GlobalNamespace::NoteData*, int>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::NoteData*, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF2C
    // private System.Action`2<System.Int32,System.Int32> scoreDidChangeEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_2<int, int>* scoreDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF3C
    // private System.Action`2<System.Int32,System.Int32> immediateMaxPossibleScoreDidChangeEvent
    // Size: 0x8
    // Offset: 0x70
    System::Action_2<int, int>* immediateMaxPossibleScoreDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF4C
    // private System.Action`2<System.Int32,System.Single> multiplierDidChangeEvent
    // Size: 0x8
    // Offset: 0x78
    System::Action_2<int, float>* multiplierDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF5C
    // private System.Action`1<System.Int32> comboDidChangeEvent
    // Size: 0x8
    // Offset: 0x80
    System::Action_1<int>* comboDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF6C
    // private System.Action`1<System.Single> feverModeChargeProgressDidChangeEvent
    // Size: 0x8
    // Offset: 0x88
    System::Action_1<float>* feverModeChargeProgressDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF7C
    // private System.Action feverDidStartEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* feverDidStartEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF8C
    // private System.Action feverDidFinishEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action* feverDidFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0AF9C
    // private System.Action comboBreakingEventHappenedEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action* comboBreakingEventHappenedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Int32 _baseRawScore
    // Size: 0x4
    // Offset: 0xA8
    int baseRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevFrameRawScore
    // Size: 0x4
    // Offset: 0xAC
    int prevFrameRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplier
    // Size: 0x4
    // Offset: 0xB0
    int multiplier;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplierIncreaseProgress
    // Size: 0x4
    // Offset: 0xB4
    int multiplierIncreaseProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _multiplierIncreaseMaxProgress
    // Size: 0x4
    // Offset: 0xB8
    int multiplierIncreaseMaxProgress;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _combo
    // Size: 0x4
    // Offset: 0xBC
    int combo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxCombo
    // Size: 0x4
    // Offset: 0xC0
    int maxCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _feverIsActive
    // Size: 0x1
    // Offset: 0xC4
    bool feverIsActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: feverIsActive and: feverStartTime
    char __padding26[0x3] = {};
    // private System.Single _feverStartTime
    // Size: 0x4
    // Offset: 0xC8
    float feverStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _feverCombo
    // Size: 0x4
    // Offset: 0xCC
    int feverCombo;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _playerHeadWasInObstacle
    // Size: 0x1
    // Offset: 0xD0
    bool playerHeadWasInObstacle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: playerHeadWasInObstacle and: immediateMaxPossibleRawScore
    char __padding29[0x3] = {};
    // private System.Int32 _immediateMaxPossibleRawScore
    // Size: 0x4
    // Offset: 0xD4
    int immediateMaxPossibleRawScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _cutOrMissedNotes
    // Size: 0x4
    // Offset: 0xD8
    int cutOrMissedNotes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _gameplayModifiersScoreMultiplier
    // Size: 0x4
    // Offset: 0xDC
    float gameplayModifiersScoreMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _prevFrameGameplayModifiersScoreMultiplier
    // Size: 0x4
    // Offset: 0xE0
    float prevFrameGameplayModifiersScoreMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: prevFrameGameplayModifiersScoreMultiplier and: gameplayModifierParams
    char __padding33[0x4] = {};
    // private System.Collections.Generic.List`1<GameplayModifierParamsSO> _gameplayModifierParams
    // Size: 0x8
    // Offset: 0xE8
    System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>* gameplayModifierParams;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>*) == 0x8);
    // private MemoryPoolContainer`1<CutScoreBuffer> _cutScoreBufferMemoryPoolContainer
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>* cutScoreBufferMemoryPoolContainer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>*) == 0x8);
    // Creating value type constructor for type: ScoreController
    ScoreController(int feverModeRequiredCombo_ = {}, float feverModeDuration_ = {}, GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel_ = {}, GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::PlayerHeadAndObstacleInteraction* playerHeadAndObstacleInteraction_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, GlobalNamespace::IGameEnergyCounter* gameEnergyCounter_ = {}, GlobalNamespace::CutScoreBuffer::Pool* cutScoreBufferPool_ = {}, GlobalNamespace::NoteWasCutDelegate* noteWasCutEvent_ = {}, System::Action_2<GlobalNamespace::NoteData*, int>* noteWasMissedEvent_ = {}, System::Action_2<int, int>* scoreDidChangeEvent_ = {}, System::Action_2<int, int>* immediateMaxPossibleScoreDidChangeEvent_ = {}, System::Action_2<int, float>* multiplierDidChangeEvent_ = {}, System::Action_1<int>* comboDidChangeEvent_ = {}, System::Action_1<float>* feverModeChargeProgressDidChangeEvent_ = {}, System::Action* feverDidStartEvent_ = {}, System::Action* feverDidFinishEvent_ = {}, System::Action* comboBreakingEventHappenedEvent_ = {}, int baseRawScore_ = {}, int prevFrameRawScore_ = {}, int multiplier_ = {}, int multiplierIncreaseProgress_ = {}, int multiplierIncreaseMaxProgress_ = {}, int combo_ = {}, int maxCombo_ = {}, bool feverIsActive_ = {}, float feverStartTime_ = {}, int feverCombo_ = {}, bool playerHeadWasInObstacle_ = {}, int immediateMaxPossibleRawScore_ = {}, int cutOrMissedNotes_ = {}, float gameplayModifiersScoreMultiplier_ = {}, float prevFrameGameplayModifiersScoreMultiplier_ = {}, System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>* gameplayModifierParams_ = {}, GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>* cutScoreBufferMemoryPoolContainer_ = {}) noexcept : feverModeRequiredCombo{feverModeRequiredCombo_}, feverModeDuration{feverModeDuration_}, gameplayModifiersModel{gameplayModifiersModel_}, gameplayModifiers{gameplayModifiers_}, beatmapObjectManager{beatmapObjectManager_}, playerHeadAndObstacleInteraction{playerHeadAndObstacleInteraction_}, audioTimeSyncController{audioTimeSyncController_}, gameEnergyCounter{gameEnergyCounter_}, cutScoreBufferPool{cutScoreBufferPool_}, noteWasCutEvent{noteWasCutEvent_}, noteWasMissedEvent{noteWasMissedEvent_}, scoreDidChangeEvent{scoreDidChangeEvent_}, immediateMaxPossibleScoreDidChangeEvent{immediateMaxPossibleScoreDidChangeEvent_}, multiplierDidChangeEvent{multiplierDidChangeEvent_}, comboDidChangeEvent{comboDidChangeEvent_}, feverModeChargeProgressDidChangeEvent{feverModeChargeProgressDidChangeEvent_}, feverDidStartEvent{feverDidStartEvent_}, feverDidFinishEvent{feverDidFinishEvent_}, comboBreakingEventHappenedEvent{comboBreakingEventHappenedEvent_}, baseRawScore{baseRawScore_}, prevFrameRawScore{prevFrameRawScore_}, multiplier{multiplier_}, multiplierIncreaseProgress{multiplierIncreaseProgress_}, multiplierIncreaseMaxProgress{multiplierIncreaseMaxProgress_}, combo{combo_}, maxCombo{maxCombo_}, feverIsActive{feverIsActive_}, feverStartTime{feverStartTime_}, feverCombo{feverCombo_}, playerHeadWasInObstacle{playerHeadWasInObstacle_}, immediateMaxPossibleRawScore{immediateMaxPossibleRawScore_}, cutOrMissedNotes{cutOrMissedNotes_}, gameplayModifiersScoreMultiplier{gameplayModifiersScoreMultiplier_}, prevFrameGameplayModifiersScoreMultiplier{prevFrameGameplayModifiersScoreMultiplier_}, gameplayModifierParams{gameplayModifierParams_}, cutScoreBufferMemoryPoolContainer{cutScoreBufferMemoryPoolContainer_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IScoreController
    operator GlobalNamespace::IScoreController() noexcept {
      return *reinterpret_cast<GlobalNamespace::IScoreController*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ICutScoreBufferDidFinishEvent
    operator GlobalNamespace::ICutScoreBufferDidFinishEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::ICutScoreBufferDidFinishEvent*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _feverModeRequiredCombo
    int& dyn__feverModeRequiredCombo();
    // Get instance field reference: private System.Single _feverModeDuration
    float& dyn__feverModeDuration();
    // Get instance field reference: private GameplayModifiersModelSO _gameplayModifiersModel
    GlobalNamespace::GameplayModifiersModelSO*& dyn__gameplayModifiersModel();
    // Get instance field reference: private readonly GameplayModifiers _gameplayModifiers
    GlobalNamespace::GameplayModifiers*& dyn__gameplayModifiers();
    // Get instance field reference: private readonly BeatmapObjectManager _beatmapObjectManager
    GlobalNamespace::BeatmapObjectManager*& dyn__beatmapObjectManager();
    // Get instance field reference: private readonly PlayerHeadAndObstacleInteraction _playerHeadAndObstacleInteraction
    GlobalNamespace::PlayerHeadAndObstacleInteraction*& dyn__playerHeadAndObstacleInteraction();
    // Get instance field reference: private readonly AudioTimeSyncController _audioTimeSyncController
    GlobalNamespace::AudioTimeSyncController*& dyn__audioTimeSyncController();
    // Get instance field reference: private readonly IGameEnergyCounter _gameEnergyCounter
    GlobalNamespace::IGameEnergyCounter*& dyn__gameEnergyCounter();
    // Get instance field reference: private readonly CutScoreBuffer/Pool _cutScoreBufferPool
    GlobalNamespace::CutScoreBuffer::Pool*& dyn__cutScoreBufferPool();
    // Get instance field reference: private NoteWasCutDelegate noteWasCutEvent
    GlobalNamespace::NoteWasCutDelegate*& dyn_noteWasCutEvent();
    // Get instance field reference: private System.Action`2<NoteData,System.Int32> noteWasMissedEvent
    System::Action_2<GlobalNamespace::NoteData*, int>*& dyn_noteWasMissedEvent();
    // Get instance field reference: private System.Action`2<System.Int32,System.Int32> scoreDidChangeEvent
    System::Action_2<int, int>*& dyn_scoreDidChangeEvent();
    // Get instance field reference: private System.Action`2<System.Int32,System.Int32> immediateMaxPossibleScoreDidChangeEvent
    System::Action_2<int, int>*& dyn_immediateMaxPossibleScoreDidChangeEvent();
    // Get instance field reference: private System.Action`2<System.Int32,System.Single> multiplierDidChangeEvent
    System::Action_2<int, float>*& dyn_multiplierDidChangeEvent();
    // Get instance field reference: private System.Action`1<System.Int32> comboDidChangeEvent
    System::Action_1<int>*& dyn_comboDidChangeEvent();
    // Get instance field reference: private System.Action`1<System.Single> feverModeChargeProgressDidChangeEvent
    System::Action_1<float>*& dyn_feverModeChargeProgressDidChangeEvent();
    // Get instance field reference: private System.Action feverDidStartEvent
    System::Action*& dyn_feverDidStartEvent();
    // Get instance field reference: private System.Action feverDidFinishEvent
    System::Action*& dyn_feverDidFinishEvent();
    // Get instance field reference: private System.Action comboBreakingEventHappenedEvent
    System::Action*& dyn_comboBreakingEventHappenedEvent();
    // Get instance field reference: private System.Int32 _baseRawScore
    int& dyn__baseRawScore();
    // Get instance field reference: private System.Int32 _prevFrameRawScore
    int& dyn__prevFrameRawScore();
    // Get instance field reference: private System.Int32 _multiplier
    int& dyn__multiplier();
    // Get instance field reference: private System.Int32 _multiplierIncreaseProgress
    int& dyn__multiplierIncreaseProgress();
    // Get instance field reference: private System.Int32 _multiplierIncreaseMaxProgress
    int& dyn__multiplierIncreaseMaxProgress();
    // Get instance field reference: private System.Int32 _combo
    int& dyn__combo();
    // Get instance field reference: private System.Int32 _maxCombo
    int& dyn__maxCombo();
    // Get instance field reference: private System.Boolean _feverIsActive
    bool& dyn__feverIsActive();
    // Get instance field reference: private System.Single _feverStartTime
    float& dyn__feverStartTime();
    // Get instance field reference: private System.Int32 _feverCombo
    int& dyn__feverCombo();
    // Get instance field reference: private System.Boolean _playerHeadWasInObstacle
    bool& dyn__playerHeadWasInObstacle();
    // Get instance field reference: private System.Int32 _immediateMaxPossibleRawScore
    int& dyn__immediateMaxPossibleRawScore();
    // Get instance field reference: private System.Int32 _cutOrMissedNotes
    int& dyn__cutOrMissedNotes();
    // Get instance field reference: private System.Single _gameplayModifiersScoreMultiplier
    float& dyn__gameplayModifiersScoreMultiplier();
    // Get instance field reference: private System.Single _prevFrameGameplayModifiersScoreMultiplier
    float& dyn__prevFrameGameplayModifiersScoreMultiplier();
    // Get instance field reference: private System.Collections.Generic.List`1<GameplayModifierParamsSO> _gameplayModifierParams
    System::Collections::Generic::List_1<GlobalNamespace::GameplayModifierParamsSO*>*& dyn__gameplayModifierParams();
    // Get instance field reference: private MemoryPoolContainer`1<CutScoreBuffer> _cutScoreBufferMemoryPoolContainer
    GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>*& dyn__cutScoreBufferMemoryPoolContainer();
    // public System.Void add_noteWasCutEvent(NoteWasCutDelegate value)
    // Offset: 0x11CF880
    void add_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value);
    // public System.Void remove_noteWasCutEvent(NoteWasCutDelegate value)
    // Offset: 0x11CF924
    void remove_noteWasCutEvent(GlobalNamespace::NoteWasCutDelegate* value);
    // public System.Void add_noteWasMissedEvent(System.Action`2<NoteData,System.Int32> value)
    // Offset: 0x11CF9C8
    void add_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`2<NoteData,System.Int32> value)
    // Offset: 0x11CFA6C
    void remove_noteWasMissedEvent(System::Action_2<GlobalNamespace::NoteData*, int>* value);
    // public System.Void add_scoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x11CFB10
    void add_scoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void remove_scoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x11CFBB4
    void remove_scoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void add_immediateMaxPossibleScoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x11CFC58
    void add_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void remove_immediateMaxPossibleScoreDidChangeEvent(System.Action`2<System.Int32,System.Int32> value)
    // Offset: 0x11CFCFC
    void remove_immediateMaxPossibleScoreDidChangeEvent(System::Action_2<int, int>* value);
    // public System.Void add_multiplierDidChangeEvent(System.Action`2<System.Int32,System.Single> value)
    // Offset: 0x11CFDA0
    void add_multiplierDidChangeEvent(System::Action_2<int, float>* value);
    // public System.Void remove_multiplierDidChangeEvent(System.Action`2<System.Int32,System.Single> value)
    // Offset: 0x11CFE44
    void remove_multiplierDidChangeEvent(System::Action_2<int, float>* value);
    // public System.Void add_comboDidChangeEvent(System.Action`1<System.Int32> value)
    // Offset: 0x11CFEE8
    void add_comboDidChangeEvent(System::Action_1<int>* value);
    // public System.Void remove_comboDidChangeEvent(System.Action`1<System.Int32> value)
    // Offset: 0x11CFF8C
    void remove_comboDidChangeEvent(System::Action_1<int>* value);
    // public System.Void add_feverModeChargeProgressDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x11D0030
    void add_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_feverModeChargeProgressDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0x11D00D4
    void remove_feverModeChargeProgressDidChangeEvent(System::Action_1<float>* value);
    // public System.Void add_feverDidStartEvent(System.Action value)
    // Offset: 0x11D0178
    void add_feverDidStartEvent(System::Action* value);
    // public System.Void remove_feverDidStartEvent(System.Action value)
    // Offset: 0x11D021C
    void remove_feverDidStartEvent(System::Action* value);
    // public System.Void add_feverDidFinishEvent(System.Action value)
    // Offset: 0x11D02C0
    void add_feverDidFinishEvent(System::Action* value);
    // public System.Void remove_feverDidFinishEvent(System.Action value)
    // Offset: 0x11D0364
    void remove_feverDidFinishEvent(System::Action* value);
    // public System.Void add_comboBreakingEventHappenedEvent(System.Action value)
    // Offset: 0x11D0408
    void add_comboBreakingEventHappenedEvent(System::Action* value);
    // public System.Void remove_comboBreakingEventHappenedEvent(System.Action value)
    // Offset: 0x11D04AC
    void remove_comboBreakingEventHappenedEvent(System::Action* value);
    // public System.Int32 get_prevFrameRawScore()
    // Offset: 0x11D0550
    int get_prevFrameRawScore();
    // public System.Int32 get_prevFrameModifiedScore()
    // Offset: 0x11D0558
    int get_prevFrameModifiedScore();
    // public System.Int32 get_maxCombo()
    // Offset: 0x11D05E0
    int get_maxCombo();
    // public System.Int32 get_multiplierWithFever()
    // Offset: 0x11D05E8
    int get_multiplierWithFever();
    // public System.Boolean get_feverModeActive()
    // Offset: 0x11D0604
    bool get_feverModeActive();
    // public System.Single get_feverModeDrainProgress()
    // Offset: 0x11D060C
    float get_feverModeDrainProgress();
    // public System.Single get_feverModeChargeProgress()
    // Offset: 0x11D06A0
    float get_feverModeChargeProgress();
    // public System.Int32 get_immediateMaxPossibleRawScore()
    // Offset: 0x11D06B8
    int get_immediateMaxPossibleRawScore();
    // public System.Single get_gameplayModifiersScoreMultiplier()
    // Offset: 0x11D06C0
    float get_gameplayModifiersScoreMultiplier();
    // public System.Void SetEnabled(System.Boolean enabled)
    // Offset: 0x11D06C8
    void SetEnabled(bool enabled);
    // protected System.Void Start()
    // Offset: 0x11D06D4
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x11D08A0
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x11D0988
    void Update();
    // protected System.Void LateUpdate()
    // Offset: 0x11D0C20
    void LateUpdate();
    // private System.Void LoseMultiplier(out System.Boolean comboChanged, out System.Boolean multiplierChanged)
    // Offset: 0x11D0ACC
    void LoseMultiplier(ByRef<bool> comboChanged, ByRef<bool> multiplierChanged);
    // private System.Void NotifyForChange(System.Boolean comboChanged, System.Boolean multiplierChanged)
    // Offset: 0x11D0B40
    void NotifyForChange(bool comboChanged, bool multiplierChanged);
    // private System.Void HandleNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x11D0F38
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, ByRef<GlobalNamespace::NoteCutInfo> noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0x11D1144
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleCutScoreBufferDidFinish(CutScoreBuffer cutScoreBuffer)
    // Offset: 0x11D1210
    void HandleCutScoreBufferDidFinish(GlobalNamespace::CutScoreBuffer* cutScoreBuffer);
    // public System.Void .ctor()
    // Offset: 0x11D1310
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScoreController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ScoreController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScoreController*, creationType>()));
    }
  }; // ScoreController
  #pragma pack(pop)
  static check_size<sizeof(ScoreController), 240 + sizeof(GlobalNamespace::MemoryPoolContainer_1<GlobalNamespace::CutScoreBuffer*>*)> __GlobalNamespace_ScoreControllerSizeCheck;
  static_assert(sizeof(ScoreController) == 0xF8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ScoreController*, "", "ScoreController");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(GlobalNamespace::NoteWasCutDelegate*)>(&GlobalNamespace::ScoreController::add_noteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteWasCutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(GlobalNamespace::NoteWasCutDelegate*)>(&GlobalNamespace::ScoreController::remove_noteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteWasCutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<GlobalNamespace::NoteData*, int>*)>(&GlobalNamespace::ScoreController::add_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<GlobalNamespace::NoteData*, int>*)>(&GlobalNamespace::ScoreController::remove_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_scoreDidChangeEvent
// Il2CppName: add_scoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<int, int>*)>(&GlobalNamespace::ScoreController::add_scoreDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_scoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_scoreDidChangeEvent
// Il2CppName: remove_scoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<int, int>*)>(&GlobalNamespace::ScoreController::remove_scoreDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_scoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: add_immediateMaxPossibleScoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<int, int>*)>(&GlobalNamespace::ScoreController::add_immediateMaxPossibleScoreDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent
// Il2CppName: remove_immediateMaxPossibleScoreDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<int, int>*)>(&GlobalNamespace::ScoreController::remove_immediateMaxPossibleScoreDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_immediateMaxPossibleScoreDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_multiplierDidChangeEvent
// Il2CppName: add_multiplierDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<int, float>*)>(&GlobalNamespace::ScoreController::add_multiplierDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_multiplierDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_multiplierDidChangeEvent
// Il2CppName: remove_multiplierDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_2<int, float>*)>(&GlobalNamespace::ScoreController::remove_multiplierDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_multiplierDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_comboDidChangeEvent
// Il2CppName: add_comboDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_1<int>*)>(&GlobalNamespace::ScoreController::add_comboDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_comboDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_comboDidChangeEvent
// Il2CppName: remove_comboDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_1<int>*)>(&GlobalNamespace::ScoreController::remove_comboDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_comboDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_feverModeChargeProgressDidChangeEvent
// Il2CppName: add_feverModeChargeProgressDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_1<float>*)>(&GlobalNamespace::ScoreController::add_feverModeChargeProgressDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_feverModeChargeProgressDidChangeEvent
// Il2CppName: remove_feverModeChargeProgressDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action_1<float>*)>(&GlobalNamespace::ScoreController::remove_feverModeChargeProgressDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_feverModeChargeProgressDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_feverDidStartEvent
// Il2CppName: add_feverDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action*)>(&GlobalNamespace::ScoreController::add_feverDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_feverDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_feverDidStartEvent
// Il2CppName: remove_feverDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action*)>(&GlobalNamespace::ScoreController::remove_feverDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_feverDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_feverDidFinishEvent
// Il2CppName: add_feverDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action*)>(&GlobalNamespace::ScoreController::add_feverDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_feverDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_feverDidFinishEvent
// Il2CppName: remove_feverDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action*)>(&GlobalNamespace::ScoreController::remove_feverDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_feverDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::add_comboBreakingEventHappenedEvent
// Il2CppName: add_comboBreakingEventHappenedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action*)>(&GlobalNamespace::ScoreController::add_comboBreakingEventHappenedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "add_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::remove_comboBreakingEventHappenedEvent
// Il2CppName: remove_comboBreakingEventHappenedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(System::Action*)>(&GlobalNamespace::ScoreController::remove_comboBreakingEventHappenedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "remove_comboBreakingEventHappenedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_prevFrameRawScore
// Il2CppName: get_prevFrameRawScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_prevFrameRawScore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_prevFrameRawScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_prevFrameModifiedScore
// Il2CppName: get_prevFrameModifiedScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_prevFrameModifiedScore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_prevFrameModifiedScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_maxCombo
// Il2CppName: get_maxCombo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_maxCombo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_maxCombo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_multiplierWithFever
// Il2CppName: get_multiplierWithFever
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_multiplierWithFever)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_multiplierWithFever", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_feverModeActive
// Il2CppName: get_feverModeActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_feverModeActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_feverModeActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_feverModeDrainProgress
// Il2CppName: get_feverModeDrainProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_feverModeDrainProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_feverModeDrainProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_feverModeChargeProgress
// Il2CppName: get_feverModeChargeProgress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_feverModeChargeProgress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_feverModeChargeProgress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_immediateMaxPossibleRawScore
// Il2CppName: get_immediateMaxPossibleRawScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_immediateMaxPossibleRawScore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_immediateMaxPossibleRawScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::get_gameplayModifiersScoreMultiplier
// Il2CppName: get_gameplayModifiersScoreMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::get_gameplayModifiersScoreMultiplier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "get_gameplayModifiersScoreMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::SetEnabled
// Il2CppName: SetEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(bool)>(&GlobalNamespace::ScoreController::SetEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "SetEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)()>(&GlobalNamespace::ScoreController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::LoseMultiplier
// Il2CppName: LoseMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(ByRef<bool>, ByRef<bool>)>(&GlobalNamespace::ScoreController::LoseMultiplier)> {
  static const MethodInfo* get() {
    static auto* comboChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* multiplierChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "LoseMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comboChanged, multiplierChanged});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::NotifyForChange
// Il2CppName: NotifyForChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(bool, bool)>(&GlobalNamespace::ScoreController::NotifyForChange)> {
  static const MethodInfo* get() {
    static auto* comboChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* multiplierChanged = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "NotifyForChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{comboChanged, multiplierChanged});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(GlobalNamespace::NoteController*, ByRef<GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::ScoreController::HandleNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::HandleNoteWasMissed
// Il2CppName: HandleNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::ScoreController::HandleNoteWasMissed)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "HandleNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::HandleCutScoreBufferDidFinish
// Il2CppName: HandleCutScoreBufferDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ScoreController::*)(GlobalNamespace::CutScoreBuffer*)>(&GlobalNamespace::ScoreController::HandleCutScoreBufferDidFinish)> {
  static const MethodInfo* get() {
    static auto* cutScoreBuffer = &::il2cpp_utils::GetClassFromName("", "CutScoreBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreController*), "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cutScoreBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
