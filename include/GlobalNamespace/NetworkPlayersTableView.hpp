// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.TableView/HMUI.IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetworkPlayerTableCell
  class NetworkPlayerTableCell;
  // Forward declaring type: NetworkPlayerOptionsTableCell
  class NetworkPlayerOptionsTableCell;
  // Forward declaring type: LevelPackHeaderTableCell
  class LevelPackHeaderTableCell;
  // Forward declaring type: INetworkPlayer
  class INetworkPlayer;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: TableView because it is already included!
  // Forward declaring type: TableCell
  class TableCell;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NetworkPlayersTableView
  class NetworkPlayersTableView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NetworkPlayersTableView);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NetworkPlayersTableView*, "", "NetworkPlayersTableView");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: NetworkPlayersTableView
  // [TokenAttribute] Offset: FFFFFFFF
  class NetworkPlayersTableView : public ::UnityEngine::MonoBehaviour/*, public ::HMUI::TableView::IDataSource*/ {
    public:
    // Nested type: ::GlobalNamespace::NetworkPlayersTableView::CellInfo
    class CellInfo;
    public:
    // private HMUI.TableView _tableView
    // Size: 0x8
    // Offset: 0x18
    ::HMUI::TableView* tableView;
    // Field size check
    static_assert(sizeof(::HMUI::TableView*) == 0x8);
    // private NetworkPlayerTableCell _playerCellPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NetworkPlayerTableCell* playerCellPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkPlayerTableCell*) == 0x8);
    // private NetworkPlayerOptionsTableCell _optionsCellPrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::NetworkPlayerOptionsTableCell* optionsCellPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkPlayerOptionsTableCell*) == 0x8);
    // private LevelPackHeaderTableCell _headerCellPrefab
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::LevelPackHeaderTableCell* headerCellPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LevelPackHeaderTableCell*) == 0x8);
    // private System.Single _rowHeight
    // Size: 0x4
    // Offset: 0x38
    float rowHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: rowHeight and: cellInfo
    char __padding4[0x4] = {};
    // private System.Collections.Generic.List`1<NetworkPlayersTableView/CellInfo> _cellInfo
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::GlobalNamespace::NetworkPlayersTableView::CellInfo*>* cellInfo;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::NetworkPlayersTableView::CellInfo*>*) == 0x8);
    // private System.Int32 _selectedCellIndex
    // Size: 0x4
    // Offset: 0x48
    int selectedCellIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: selectedCellIndex and: selectedPlayerID
    char __padding6[0x4] = {};
    // private System.String _selectedPlayerID
    // Size: 0x8
    // Offset: 0x50
    ::StringW selectedPlayerID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _selectedCellHasOptions
    // Size: 0x1
    // Offset: 0x58
    bool selectedCellHasOptions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::HMUI::TableView::IDataSource
    operator ::HMUI::TableView::IDataSource() noexcept {
      return *reinterpret_cast<::HMUI::TableView::IDataSource*>(this);
    }
    // Creating interface conversion operator: i_IDataSource
    inline ::HMUI::TableView::IDataSource* i_IDataSource() noexcept {
      return reinterpret_cast<::HMUI::TableView::IDataSource*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String kPlayerCellIdentifier
    static constexpr const char* kPlayerCellIdentifier = "PlayerCell";
    // Get static field: static private System.String kPlayerCellIdentifier
    static ::StringW _get_kPlayerCellIdentifier();
    // Set static field: static private System.String kPlayerCellIdentifier
    static void _set_kPlayerCellIdentifier(::StringW value);
    // static field const value: static private System.String kHeaderCellIdentifier
    static constexpr const char* kHeaderCellIdentifier = "HeaderCell";
    // Get static field: static private System.String kHeaderCellIdentifier
    static ::StringW _get_kHeaderCellIdentifier();
    // Set static field: static private System.String kHeaderCellIdentifier
    static void _set_kHeaderCellIdentifier(::StringW value);
    // static field const value: static private System.String kOptionsCellIdentifier
    static constexpr const char* kOptionsCellIdentifier = "OptionsCell";
    // Get static field: static private System.String kOptionsCellIdentifier
    static ::StringW _get_kOptionsCellIdentifier();
    // Set static field: static private System.String kOptionsCellIdentifier
    static void _set_kOptionsCellIdentifier(::StringW value);
    // Get instance field reference: private HMUI.TableView _tableView
    [[deprecated("Use field access instead!")]] ::HMUI::TableView*& dyn__tableView();
    // Get instance field reference: private NetworkPlayerTableCell _playerCellPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerTableCell*& dyn__playerCellPrefab();
    // Get instance field reference: private NetworkPlayerOptionsTableCell _optionsCellPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerOptionsTableCell*& dyn__optionsCellPrefab();
    // Get instance field reference: private LevelPackHeaderTableCell _headerCellPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelPackHeaderTableCell*& dyn__headerCellPrefab();
    // Get instance field reference: private System.Single _rowHeight
    [[deprecated("Use field access instead!")]] float& dyn__rowHeight();
    // Get instance field reference: private System.Collections.Generic.List`1<NetworkPlayersTableView/CellInfo> _cellInfo
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::NetworkPlayersTableView::CellInfo*>*& dyn__cellInfo();
    // Get instance field reference: private System.Int32 _selectedCellIndex
    [[deprecated("Use field access instead!")]] int& dyn__selectedCellIndex();
    // Get instance field reference: private System.String _selectedPlayerID
    [[deprecated("Use field access instead!")]] ::StringW& dyn__selectedPlayerID();
    // Get instance field reference: private System.Boolean _selectedCellHasOptions
    [[deprecated("Use field access instead!")]] bool& dyn__selectedCellHasOptions();
    // public System.Void .ctor()
    // Offset: 0x1509A90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPlayersTableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NetworkPlayersTableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPlayersTableView*, creationType>()));
    }
    // public System.Single CellSize()
    // Offset: 0x1508AA0
    float CellSize();
    // public System.Int32 NumberOfCells()
    // Offset: 0x1508AA8
    int NumberOfCells();
    // public HMUI.TableCell CellForIdx(HMUI.TableView tableView, System.Int32 row)
    // Offset: 0x1508AF8
    ::HMUI::TableCell* CellForIdx(::HMUI::TableView* tableView, int row);
    // private System.Void AddPlayers(System.Collections.Generic.IEnumerable`1<INetworkPlayer> players, System.String title)
    // Offset: 0x15090B8
    void AddPlayers(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* players, ::StringW title);
    // public System.Void SetParties(System.Collections.Generic.IEnumerable`1<INetworkPlayer> partyPlayers, System.Collections.Generic.IEnumerable`1<INetworkPlayer> otherPlayers, System.String myPartyTitle, System.String otherPlayersTitle)
    // Offset: 0x150996C
    void SetParties(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* partyPlayers, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* otherPlayers, ::StringW myPartyTitle, ::StringW otherPlayersTitle);
    // private System.Void HandleCellWasPressed(HMUI.TableView tableView, HMUI.TableCell tableCell)
    // Offset: 0x1509A8C
    void HandleCellWasPressed(::HMUI::TableView* tableView, ::HMUI::TableCell* tableCell);
    // static private System.Boolean HasVisibleOptions(INetworkPlayer player)
    // Offset: 0x15095D4
    static bool HasVisibleOptions(::GlobalNamespace::INetworkPlayer* player);
  }; // NetworkPlayersTableView
  #pragma pack(pop)
  static check_size<sizeof(NetworkPlayersTableView), 88 + sizeof(bool)> __GlobalNamespace_NetworkPlayersTableViewSizeCheck;
  static_assert(sizeof(NetworkPlayersTableView) == 0x59);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NetworkPlayersTableView::*)()>(&GlobalNamespace::NetworkPlayersTableView::CellSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::NetworkPlayersTableView::*)()>(&GlobalNamespace::NetworkPlayersTableView::NumberOfCells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::TableCell* (GlobalNamespace::NetworkPlayersTableView::*)(::HMUI::TableView*, int)>(&GlobalNamespace::NetworkPlayersTableView::CellForIdx)> {
  static const MethodInfo* get() {
    static auto* tableView = &::il2cpp_utils::GetClassFromName("HMUI", "TableView")->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableView, row});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::AddPlayers
// Il2CppName: AddPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkPlayersTableView::*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*, ::StringW)>(&GlobalNamespace::NetworkPlayersTableView::AddPlayers)> {
  static const MethodInfo* get() {
    static auto* players = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayer")})->byval_arg;
    static auto* title = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "AddPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{players, title});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::SetParties
// Il2CppName: SetParties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkPlayersTableView::*)(::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*, ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>*, ::StringW, ::StringW)>(&GlobalNamespace::NetworkPlayersTableView::SetParties)> {
  static const MethodInfo* get() {
    static auto* partyPlayers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayer")})->byval_arg;
    static auto* otherPlayers = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IEnumerable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayer")})->byval_arg;
    static auto* myPartyTitle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* otherPlayersTitle = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "SetParties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{partyPlayers, otherPlayers, myPartyTitle, otherPlayersTitle});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::HandleCellWasPressed
// Il2CppName: HandleCellWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NetworkPlayersTableView::*)(::HMUI::TableView*, ::HMUI::TableCell*)>(&GlobalNamespace::NetworkPlayersTableView::HandleCellWasPressed)> {
  static const MethodInfo* get() {
    static auto* tableView = &::il2cpp_utils::GetClassFromName("HMUI", "TableView")->byval_arg;
    static auto* tableCell = &::il2cpp_utils::GetClassFromName("HMUI", "TableCell")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "HandleCellWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableView, tableCell});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NetworkPlayersTableView::HasVisibleOptions
// Il2CppName: HasVisibleOptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::INetworkPlayer*)>(&GlobalNamespace::NetworkPlayersTableView::HasVisibleOptions)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "INetworkPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NetworkPlayersTableView*), "HasVisibleOptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
