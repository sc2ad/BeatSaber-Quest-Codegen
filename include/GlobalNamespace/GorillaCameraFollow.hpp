// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaCameraFollow
  class GorillaCameraFollow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaCameraFollow);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaCameraFollow*, "", "GorillaCameraFollow");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: GorillaCameraFollow
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaCameraFollow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform playerHead
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* playerHead;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.GameObject cameraParent
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* cameraParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 headOffset
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 headOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 eulerRotationOffset
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 eulerRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform playerHead
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_playerHead();
    // Get instance field reference: public UnityEngine.GameObject cameraParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_cameraParent();
    // Get instance field reference: public UnityEngine.Vector3 headOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headOffset();
    // Get instance field reference: public UnityEngine.Vector3 eulerRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_eulerRotationOffset();
    // public System.Void .ctor()
    // Offset: 0xC67964
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaCameraFollow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaCameraFollow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaCameraFollow*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xC67638
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0xC67684
    void LateUpdate();
  }; // GorillaCameraFollow
  #pragma pack(pop)
  static check_size<sizeof(GorillaCameraFollow), 52 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_GorillaCameraFollowSizeCheck;
  static_assert(sizeof(GorillaCameraFollow) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaCameraFollow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaCameraFollow::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCameraFollow::*)()>(&GlobalNamespace::GorillaCameraFollow::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCameraFollow*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaCameraFollow::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaCameraFollow::*)()>(&GlobalNamespace::GorillaCameraFollow::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaCameraFollow*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
