// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightGroup
  class LightGroup;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: LightColorGroupEffect
  class LightColorGroupEffect;
  // Forward declaring type: ColorBoostBeatmapEventData
  class ColorBoostBeatmapEventData;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightColorGroupEffectManager
  class LightColorGroupEffectManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightColorGroupEffectManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightColorGroupEffectManager*, "", "LightColorGroupEffectManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: LightColorGroupEffectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LightColorGroupEffectManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [InjectAttribute] Offset: 0x112134C
    // private readonly LightGroup[] _lightGroups
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::LightGroup*> lightGroups;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightGroup*>) == 0x8);
    // [InjectAttribute] Offset: 0x112135C
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // [InjectAttribute] Offset: 0x112136C
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x28
    ::Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(::Zenject::DiContainer*) == 0x8);
    // private BeatmapDataCallbackWrapper _colorBoostBeatmapDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::BeatmapDataCallbackWrapper* colorBoostBeatmapDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LightColorGroupEffect> _lightColorGroupEffects
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupEffect*>* lightColorGroupEffects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupEffect*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private readonly LightGroup[] _lightGroups
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroup*>& dyn__lightGroups();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly Zenject.DiContainer _container
    [[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& dyn__container();
    // Get instance field reference: private BeatmapDataCallbackWrapper _colorBoostBeatmapDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__colorBoostBeatmapDataCallbackWrapper();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<LightColorGroupEffect> _lightColorGroupEffects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupEffect*>*& dyn__lightColorGroupEffects();
    // public System.Collections.Generic.IReadOnlyCollection`1<LightGroup> get_lightGroups()
    // Offset: 0x156C0FC
    ::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::LightGroup*>* get_lightGroups();
    // public System.Void .ctor()
    // Offset: 0x156C540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightColorGroupEffectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupEffectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightColorGroupEffectManager*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x156C104
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x156C328
    void OnDestroy();
    // private System.Void HandleColorBoostBeatmapEvent(ColorBoostBeatmapEventData eventData)
    // Offset: 0x156C430
    void HandleColorBoostBeatmapEvent(::GlobalNamespace::ColorBoostBeatmapEventData* eventData);
  }; // LightColorGroupEffectManager
  #pragma pack(pop)
  static check_size<sizeof(LightColorGroupEffectManager), 56 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LightColorGroupEffect*>*)> __GlobalNamespace_LightColorGroupEffectManagerSizeCheck;
  static_assert(sizeof(LightColorGroupEffectManager) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupEffectManager::get_lightGroups
// Il2CppName: get_lightGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::LightGroup*>* (GlobalNamespace::LightColorGroupEffectManager::*)()>(&GlobalNamespace::LightColorGroupEffectManager::get_lightGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightColorGroupEffectManager*), "get_lightGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupEffectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupEffectManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightColorGroupEffectManager::*)()>(&GlobalNamespace::LightColorGroupEffectManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightColorGroupEffectManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupEffectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightColorGroupEffectManager::*)()>(&GlobalNamespace::LightColorGroupEffectManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightColorGroupEffectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupEffectManager::HandleColorBoostBeatmapEvent
// Il2CppName: HandleColorBoostBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightColorGroupEffectManager::*)(::GlobalNamespace::ColorBoostBeatmapEventData*)>(&GlobalNamespace::LightColorGroupEffectManager::HandleColorBoostBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("", "ColorBoostBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightColorGroupEffectManager*), "HandleColorBoostBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData});
  }
};
