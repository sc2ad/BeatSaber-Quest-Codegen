// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ViewController
  class ViewController;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SettingsFlowCoordinator
  class SettingsFlowCoordinator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PresentHiddenSettingsAfterNClicks
  class PresentHiddenSettingsAfterNClicks;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PresentHiddenSettingsAfterNClicks);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PresentHiddenSettingsAfterNClicks*, "", "PresentHiddenSettingsAfterNClicks");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: PresentHiddenSettingsAfterNClicks
  // [TokenAttribute] Offset: FFFFFFFF
  class PresentHiddenSettingsAfterNClicks : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.UI.Button _hiddenSettingsButton
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Button* hiddenSettingsButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private HMUI.ViewController _hiddenSettingsViewController
    // Size: 0x8
    // Offset: 0x20
    ::HMUI::ViewController* hiddenSettingsViewController;
    // Field size check
    static_assert(sizeof(::HMUI::ViewController*) == 0x8);
    // private System.Int32 _numberOfClicksRequired
    // Size: 0x4
    // Offset: 0x28
    int numberOfClicksRequired;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numberOfClicksRequired and: settingsFlowCoordinator
    char __padding2[0x4] = {};
    // [InjectAttribute] Offset: 0x112B598
    // private readonly SettingsFlowCoordinator _settingsFlowCoordinator
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SettingsFlowCoordinator*) == 0x8);
    // private System.Int32 _currentNumberOfClicks
    // Size: 0x4
    // Offset: 0x38
    int currentNumberOfClicks;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentNumberOfClicks and: buttonBinder
    char __padding4[0x4] = {};
    // private readonly HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x40
    ::HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(::HMUI::ButtonBinder*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.UI.Button _hiddenSettingsButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__hiddenSettingsButton();
    // Get instance field reference: private HMUI.ViewController _hiddenSettingsViewController
    [[deprecated("Use field access instead!")]] ::HMUI::ViewController*& dyn__hiddenSettingsViewController();
    // Get instance field reference: private System.Int32 _numberOfClicksRequired
    [[deprecated("Use field access instead!")]] int& dyn__numberOfClicksRequired();
    // Get instance field reference: private readonly SettingsFlowCoordinator _settingsFlowCoordinator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SettingsFlowCoordinator*& dyn__settingsFlowCoordinator();
    // Get instance field reference: private System.Int32 _currentNumberOfClicks
    [[deprecated("Use field access instead!")]] int& dyn__currentNumberOfClicks();
    // Get instance field reference: private readonly HMUI.ButtonBinder _buttonBinder
    [[deprecated("Use field access instead!")]] ::HMUI::ButtonBinder*& dyn__buttonBinder();
    // public System.Void .ctor()
    // Offset: 0x1440FD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PresentHiddenSettingsAfterNClicks* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PresentHiddenSettingsAfterNClicks::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PresentHiddenSettingsAfterNClicks*, creationType>()));
    }
    // protected System.Void OnEnable()
    // Offset: 0x1440F28
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1440FBC
    void OnDisable();
    // private System.Void <OnEnable>b__6_0()
    // Offset: 0x1441048
    void $OnEnable$b__6_0();
  }; // PresentHiddenSettingsAfterNClicks
  #pragma pack(pop)
  static check_size<sizeof(PresentHiddenSettingsAfterNClicks), 64 + sizeof(::HMUI::ButtonBinder*)> __GlobalNamespace_PresentHiddenSettingsAfterNClicksSizeCheck;
  static_assert(sizeof(PresentHiddenSettingsAfterNClicks) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PresentHiddenSettingsAfterNClicks::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PresentHiddenSettingsAfterNClicks::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PresentHiddenSettingsAfterNClicks::*)()>(&GlobalNamespace::PresentHiddenSettingsAfterNClicks::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PresentHiddenSettingsAfterNClicks*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PresentHiddenSettingsAfterNClicks::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PresentHiddenSettingsAfterNClicks::*)()>(&GlobalNamespace::PresentHiddenSettingsAfterNClicks::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PresentHiddenSettingsAfterNClicks*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PresentHiddenSettingsAfterNClicks::$OnEnable$b__6_0
// Il2CppName: <OnEnable>b__6_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PresentHiddenSettingsAfterNClicks::*)()>(&GlobalNamespace::PresentHiddenSettingsAfterNClicks::$OnEnable$b__6_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PresentHiddenSettingsAfterNClicks*), "<OnEnable>b__6_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
