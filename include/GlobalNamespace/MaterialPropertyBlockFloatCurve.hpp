// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MaterialPropertyBlockAnimator
#include "GlobalNamespace/MaterialPropertyBlockAnimator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockFloatCurve
  class MaterialPropertyBlockFloatCurve;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MaterialPropertyBlockFloatCurve);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MaterialPropertyBlockFloatCurve*, "", "MaterialPropertyBlockFloatCurve");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MaterialPropertyBlockFloatCurve
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class MaterialPropertyBlockFloatCurve : public ::GlobalNamespace::MaterialPropertyBlockAnimator {
    public:
    // Writing base type padding for base size: 0x2D to desired offset: 0x30
    char ___base_padding[0x3] = {};
    public:
    // [SpaceAttribute] Offset: 0x10C83FC
    // private UnityEngine.AnimationCurve _curve
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::AnimationCurve* curve;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    // private System.Single _valueMultiplier
    // Size: 0x4
    // Offset: 0x38
    float valueMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _speedMultiplier
    // Size: 0x4
    // Offset: 0x3C
    float speedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.AnimationCurve _curve
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn__curve();
    // Get instance field reference: private System.Single _valueMultiplier
    [[deprecated("Use field access instead!")]] float& dyn__valueMultiplier();
    // Get instance field reference: private System.Single _speedMultiplier
    [[deprecated("Use field access instead!")]] float& dyn__speedMultiplier();
    // public System.Void .ctor()
    // Offset: 0x1E8404C
    // Implemented from: MaterialPropertyBlockAnimator
    // Base method: System.Void MaterialPropertyBlockAnimator::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialPropertyBlockFloatCurve* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyBlockFloatCurve::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialPropertyBlockFloatCurve*, creationType>()));
    }
    // protected override System.Void SetProperty()
    // Offset: 0x1E83FB0
    // Implemented from: MaterialPropertyBlockAnimator
    // Base method: System.Void MaterialPropertyBlockAnimator::SetProperty()
    void SetProperty();
  }; // MaterialPropertyBlockFloatCurve
  #pragma pack(pop)
  static check_size<sizeof(MaterialPropertyBlockFloatCurve), 60 + sizeof(float)> __GlobalNamespace_MaterialPropertyBlockFloatCurveSizeCheck;
  static_assert(sizeof(MaterialPropertyBlockFloatCurve) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyBlockFloatCurve::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyBlockFloatCurve::SetProperty
// Il2CppName: SetProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialPropertyBlockFloatCurve::*)()>(&GlobalNamespace::MaterialPropertyBlockFloatCurve::SetProperty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialPropertyBlockFloatCurve*), "SetProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
