// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: GorillaPlayerLineButton
#include "GlobalNamespace/GorillaPlayerLineButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetUserDataResult
  class GetUserDataResult;
}
// Forward declaring namespace: Photon::Voice::PUN
namespace Photon::Voice::PUN {
  // Forward declaring type: PhotonVoiceView
  class PhotonVoiceView;
}
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaPlayerScoreboardLine
  class GorillaPlayerScoreboardLine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaPlayerScoreboardLine);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaPlayerScoreboardLine*, "", "GorillaPlayerScoreboardLine");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: GorillaPlayerScoreboardLine
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaPlayerScoreboardLine : public ::Photon::Pun::MonoBehaviourPunCallbacks {
    public:
    // Nested type: ::GlobalNamespace::GorillaPlayerScoreboardLine::$UpdateLine$d__28
    class $UpdateLine$d__28;
    // Nested type: ::GlobalNamespace::GorillaPlayerScoreboardLine::$$c
    class $$c;
    public:
    // public UnityEngine.UI.Text playerName
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Text* playerName;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text playerLevel
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Text* playerLevel;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Text playerMMR
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* playerMMR;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Image playerSwatch
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Image* playerSwatch;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.Texture infectedTexture
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture* infectedTexture;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture*) == 0x8);
    // public Photon.Realtime.Player linePlayer
    // Size: 0x8
    // Offset: 0x48
    ::Photon::Realtime::Player* linePlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public VRRig playerVRRig
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::VRRig* playerVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public System.Int32 currentMatIndex
    // Size: 0x4
    // Offset: 0x58
    int currentMatIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentMatIndex and: playerLevelValue
    char __padding7[0x4] = {};
    // public System.String playerLevelValue
    // Size: 0x8
    // Offset: 0x60
    ::StringW playerLevelValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playerMMRValue
    // Size: 0x8
    // Offset: 0x68
    ::StringW playerMMRValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String playerNameValue
    // Size: 0x8
    // Offset: 0x70
    ::StringW playerNameValue;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 playerActorNumber
    // Size: 0x4
    // Offset: 0x78
    int playerActorNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean initialized
    // Size: 0x1
    // Offset: 0x7C
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: muteButton
    char __padding12[0x3] = {};
    // public GorillaPlayerLineButton muteButton
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::GorillaPlayerLineButton* muteButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPlayerLineButton*) == 0x8);
    // public GorillaPlayerLineButton reportButton
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::GorillaPlayerLineButton* reportButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPlayerLineButton*) == 0x8);
    // public UnityEngine.GameObject speakerIcon
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* speakerIcon;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean canPressNextReportButton
    // Size: 0x1
    // Offset: 0x98
    bool canPressNextReportButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canPressNextReportButton and: texts
    char __padding16[0x7] = {};
    // public UnityEngine.UI.Text[] texts
    // Size: 0x8
    // Offset: 0xA0
    ::ArrayW<::UnityEngine::UI::Text*> texts;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Text*>) == 0x8);
    // public UnityEngine.SpriteRenderer[] sprites
    // Size: 0x8
    // Offset: 0xA8
    ::ArrayW<::UnityEngine::SpriteRenderer*> sprites;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::SpriteRenderer*>) == 0x8);
    // public UnityEngine.MeshRenderer[] meshes
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<::UnityEngine::MeshRenderer*> meshes;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::MeshRenderer*>) == 0x8);
    // public UnityEngine.UI.Image[] images
    // Size: 0x8
    // Offset: 0xB8
    ::ArrayW<::UnityEngine::UI::Image*> images;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::UI::Image*>) == 0x8);
    // private Photon.Voice.PUN.PhotonVoiceView myVoiceView
    // Size: 0x8
    // Offset: 0xC0
    ::Photon::Voice::PUN::PhotonVoiceView* myVoiceView;
    // Field size check
    static_assert(sizeof(::Photon::Voice::PUN::PhotonVoiceView*) == 0x8);
    // private Photon.Voice.Unity.Recorder myRecorder
    // Size: 0x8
    // Offset: 0xC8
    ::Photon::Voice::Unity::Recorder* myRecorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    // private System.Boolean linePlayerInitialized
    // Size: 0x1
    // Offset: 0xD0
    bool linePlayerInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: linePlayerInitialized and: mute
    char __padding23[0x3] = {};
    // private System.Int32 mute
    // Size: 0x4
    // Offset: 0xD4
    int mute;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.UI.Text playerName
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerName();
    // Get instance field reference: public UnityEngine.UI.Text playerLevel
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerLevel();
    // Get instance field reference: public UnityEngine.UI.Text playerMMR
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_playerMMR();
    // Get instance field reference: public UnityEngine.UI.Image playerSwatch
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_playerSwatch();
    // Get instance field reference: public UnityEngine.Texture infectedTexture
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture*& dyn_infectedTexture();
    // Get instance field reference: public Photon.Realtime.Player linePlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_linePlayer();
    // Get instance field reference: public VRRig playerVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_playerVRRig();
    // Get instance field reference: public System.Int32 currentMatIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentMatIndex();
    // Get instance field reference: public System.String playerLevelValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerLevelValue();
    // Get instance field reference: public System.String playerMMRValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerMMRValue();
    // Get instance field reference: public System.String playerNameValue
    [[deprecated("Use field access instead!")]] ::StringW& dyn_playerNameValue();
    // Get instance field reference: public System.Int32 playerActorNumber
    [[deprecated("Use field access instead!")]] int& dyn_playerActorNumber();
    // Get instance field reference: public System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // Get instance field reference: public GorillaPlayerLineButton muteButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPlayerLineButton*& dyn_muteButton();
    // Get instance field reference: public GorillaPlayerLineButton reportButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPlayerLineButton*& dyn_reportButton();
    // Get instance field reference: public UnityEngine.GameObject speakerIcon
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_speakerIcon();
    // Get instance field reference: public System.Boolean canPressNextReportButton
    [[deprecated("Use field access instead!")]] bool& dyn_canPressNextReportButton();
    // Get instance field reference: public UnityEngine.UI.Text[] texts
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Text*>& dyn_texts();
    // Get instance field reference: public UnityEngine.SpriteRenderer[] sprites
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::SpriteRenderer*>& dyn_sprites();
    // Get instance field reference: public UnityEngine.MeshRenderer[] meshes
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::MeshRenderer*>& dyn_meshes();
    // Get instance field reference: public UnityEngine.UI.Image[] images
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::UI::Image*>& dyn_images();
    // Get instance field reference: private Photon.Voice.PUN.PhotonVoiceView myVoiceView
    [[deprecated("Use field access instead!")]] ::Photon::Voice::PUN::PhotonVoiceView*& dyn_myVoiceView();
    // Get instance field reference: private Photon.Voice.Unity.Recorder myRecorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_myRecorder();
    // Get instance field reference: private System.Boolean linePlayerInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_linePlayerInitialized();
    // Get instance field reference: private System.Int32 mute
    [[deprecated("Use field access instead!")]] int& dyn_mute();
    // public System.Void .ctor()
    // Offset: 0xC7C688
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaPlayerScoreboardLine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaPlayerScoreboardLine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaPlayerScoreboardLine*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0xC7B558
    void Start();
    // public System.Void UpdateLevel()
    // Offset: 0xC7B5F4
    void UpdateLevel();
    // public System.Void HideShowLine(System.Boolean active)
    // Offset: 0xC7B5F8
    void HideShowLine(bool active);
    // private System.Collections.IEnumerator UpdateLine()
    // Offset: 0xC7B584
    ::System::Collections::IEnumerator* UpdateLine();
    // public System.Void PressButton(System.Boolean isOn, GorillaPlayerLineButton/ButtonType buttonType)
    // Offset: 0xC7B170
    void PressButton(bool isOn, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType buttonType);
    // public System.Void SetReportState(System.Boolean reportState, GorillaPlayerLineButton/ButtonType buttonType)
    // Offset: 0xC7BA90
    void SetReportState(bool reportState, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType buttonType);
    // public System.Void GetUserLevel(System.String myPlayFabeId)
    // Offset: 0xC7C2E0
    void GetUserLevel(::StringW myPlayFabeId);
    // public System.Void ReportPlayer(System.String PlayerID, GorillaPlayerLineButton/ButtonType buttonType, System.String OtherPlayerNickName)
    // Offset: 0xC7BC9C
    void ReportPlayer(::StringW PlayerID, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType buttonType, ::StringW OtherPlayerNickName);
    // public System.Void MutePlayer(System.String PlayerID, System.String OtherPlayerNickName, System.Int32 muting)
    // Offset: 0xC7B840
    void MutePlayer(::StringW PlayerID, ::StringW OtherPlayerNickName, int muting);
    // public Photon.Realtime.Player FindPlayerforVRRig(VRRig vRRig)
    // Offset: 0xC7C458
    ::Photon::Realtime::Player* FindPlayerforVRRig(::GlobalNamespace::VRRig* vRRig);
    // public System.String NormalizeName(System.Boolean doIt, System.String text)
    // Offset: 0xC7C524
    ::StringW NormalizeName(bool doIt, ::StringW text);
    // private System.Void <GetUserLevel>b__31_0(PlayFab.ClientModels.GetUserDataResult result)
    // Offset: 0xC7C698
    void $GetUserLevel$b__31_0(::PlayFab::ClientModels::GetUserDataResult* result);
  }; // GorillaPlayerScoreboardLine
  #pragma pack(pop)
  static check_size<sizeof(GorillaPlayerScoreboardLine), 212 + sizeof(int)> __GlobalNamespace_GorillaPlayerScoreboardLineSizeCheck;
  static_assert(sizeof(GorillaPlayerScoreboardLine) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::UpdateLevel
// Il2CppName: UpdateLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::UpdateLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "UpdateLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::HideShowLine
// Il2CppName: HideShowLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool)>(&GlobalNamespace::GorillaPlayerScoreboardLine::HideShowLine)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "HideShowLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::UpdateLine
// Il2CppName: UpdateLine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaPlayerScoreboardLine::*)()>(&GlobalNamespace::GorillaPlayerScoreboardLine::UpdateLine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "UpdateLine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::PressButton
// Il2CppName: PressButton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType)>(&GlobalNamespace::GorillaPlayerScoreboardLine::PressButton)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaPlayerLineButton/ButtonType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "PressButton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn, buttonType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::SetReportState
// Il2CppName: SetReportState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType)>(&GlobalNamespace::GorillaPlayerScoreboardLine::SetReportState)> {
  static const MethodInfo* get() {
    static auto* reportState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaPlayerLineButton/ButtonType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "SetReportState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reportState, buttonType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::GetUserLevel
// Il2CppName: GetUserLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(::StringW)>(&GlobalNamespace::GorillaPlayerScoreboardLine::GetUserLevel)> {
  static const MethodInfo* get() {
    static auto* myPlayFabeId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "GetUserLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayFabeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::ReportPlayer
// Il2CppName: ReportPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(::StringW, ::GlobalNamespace::GorillaPlayerLineButton::ButtonType, ::StringW)>(&GlobalNamespace::GorillaPlayerScoreboardLine::ReportPlayer)> {
  static const MethodInfo* get() {
    static auto* PlayerID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* buttonType = &::il2cpp_utils::GetClassFromName("", "GorillaPlayerLineButton/ButtonType")->byval_arg;
    static auto* OtherPlayerNickName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "ReportPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PlayerID, buttonType, OtherPlayerNickName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::MutePlayer
// Il2CppName: MutePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(::StringW, ::StringW, int)>(&GlobalNamespace::GorillaPlayerScoreboardLine::MutePlayer)> {
  static const MethodInfo* get() {
    static auto* PlayerID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* OtherPlayerNickName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* muting = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "MutePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{PlayerID, OtherPlayerNickName, muting});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::FindPlayerforVRRig
// Il2CppName: FindPlayerforVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Realtime::Player* (GlobalNamespace::GorillaPlayerScoreboardLine::*)(::GlobalNamespace::VRRig*)>(&GlobalNamespace::GorillaPlayerScoreboardLine::FindPlayerforVRRig)> {
  static const MethodInfo* get() {
    static auto* vRRig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "FindPlayerforVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{vRRig});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::NormalizeName
// Il2CppName: NormalizeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaPlayerScoreboardLine::*)(bool, ::StringW)>(&GlobalNamespace::GorillaPlayerScoreboardLine::NormalizeName)> {
  static const MethodInfo* get() {
    static auto* doIt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "NormalizeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doIt, text});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPlayerScoreboardLine::$GetUserLevel$b__31_0
// Il2CppName: <GetUserLevel>b__31_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPlayerScoreboardLine::*)(::PlayFab::ClientModels::GetUserDataResult*)>(&GlobalNamespace::GorillaPlayerScoreboardLine::$GetUserLevel$b__31_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetUserDataResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPlayerScoreboardLine*), "<GetUserLevel>b__31_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
