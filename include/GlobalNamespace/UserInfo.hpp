// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UserInfo
  class UserInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UserInfo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UserInfo*, "", "UserInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UserInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class UserInfo : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::UserInfo::Platform
    struct Platform;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UserInfo/Platform
    // [TokenAttribute] Offset: FFFFFFFF
    struct Platform/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Platform
      constexpr Platform(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UserInfo/Platform Test
      static constexpr const int Test = 0;
      // Get static field: static public UserInfo/Platform Test
      static ::GlobalNamespace::UserInfo::Platform _get_Test();
      // Set static field: static public UserInfo/Platform Test
      static void _set_Test(::GlobalNamespace::UserInfo::Platform value);
      // static field const value: static public UserInfo/Platform Steam
      static constexpr const int Steam = 1;
      // Get static field: static public UserInfo/Platform Steam
      static ::GlobalNamespace::UserInfo::Platform _get_Steam();
      // Set static field: static public UserInfo/Platform Steam
      static void _set_Steam(::GlobalNamespace::UserInfo::Platform value);
      // static field const value: static public UserInfo/Platform Oculus
      static constexpr const int Oculus = 2;
      // Get static field: static public UserInfo/Platform Oculus
      static ::GlobalNamespace::UserInfo::Platform _get_Oculus();
      // Set static field: static public UserInfo/Platform Oculus
      static void _set_Oculus(::GlobalNamespace::UserInfo::Platform value);
      // static field const value: static public UserInfo/Platform PS4
      static constexpr const int PS4 = 3;
      // Get static field: static public UserInfo/Platform PS4
      static ::GlobalNamespace::UserInfo::Platform _get_PS4();
      // Set static field: static public UserInfo/Platform PS4
      static void _set_PS4(::GlobalNamespace::UserInfo::Platform value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // UserInfo/Platform
    #pragma pack(pop)
    static check_size<sizeof(UserInfo::Platform), 0 + sizeof(int)> __GlobalNamespace_UserInfo_PlatformSizeCheck;
    static_assert(sizeof(UserInfo::Platform) == 0x4);
    public:
    // public readonly UserInfo/Platform platform
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::UserInfo::Platform platform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UserInfo::Platform) == 0x4);
    // Padding between fields: platform and: platformUserId
    char __padding0[0x4] = {};
    // public readonly System.String platformUserId
    // Size: 0x8
    // Offset: 0x18
    ::StringW platformUserId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public readonly System.String userName
    // Size: 0x8
    // Offset: 0x20
    ::StringW userName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public readonly UserInfo/Platform platform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UserInfo::Platform& dyn_platform();
    // Get instance field reference: public readonly System.String platformUserId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_platformUserId();
    // Get instance field reference: public readonly System.String userName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_userName();
    // public System.Void .ctor(UserInfo/Platform platform, System.String platformUserId, System.String userName)
    // Offset: 0x15E29DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserInfo* New_ctor(::GlobalNamespace::UserInfo::Platform platform, ::StringW platformUserId, ::StringW userName) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UserInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserInfo*, creationType>(platform, platformUserId, userName)));
    }
  }; // UserInfo
  #pragma pack(pop)
  static check_size<sizeof(UserInfo), 32 + sizeof(::StringW)> __GlobalNamespace_UserInfoSizeCheck;
  static_assert(sizeof(UserInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UserInfo::Platform, "", "UserInfo/Platform");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UserInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
