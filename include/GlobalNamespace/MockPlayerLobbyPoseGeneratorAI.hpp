// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MockPlayerLobbyPoseGenerator
#include "GlobalNamespace/MockPlayerLobbyPoseGenerator.hpp"
// Including type: UnityEngine.Pose
#include "UnityEngine/Pose.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MockPlayerLobbyPoseGeneratorAI
  class MockPlayerLobbyPoseGeneratorAI;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MockPlayerLobbyPoseGeneratorAI);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockPlayerLobbyPoseGeneratorAI*, "", "MockPlayerLobbyPoseGeneratorAI");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x12C
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayerLobbyPoseGeneratorAI
  // [TokenAttribute] Offset: FFFFFFFF
  class MockPlayerLobbyPoseGeneratorAI : public ::GlobalNamespace::MockPlayerLobbyPoseGenerator {
    public:
    public:
    // private System.Random _random
    // Size: 0x8
    // Offset: 0x20
    ::System::Random* random;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // private UnityEngine.Pose _headPose
    // Size: 0x1C
    // Offset: 0x28
    ::UnityEngine::Pose headPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _leftHandPose
    // Size: 0x1C
    // Offset: 0x44
    ::UnityEngine::Pose leftHandPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _rightHandPose
    // Size: 0x1C
    // Offset: 0x60
    ::UnityEngine::Pose rightHandPose;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _lastHeadPoseTarget
    // Size: 0x1C
    // Offset: 0x7C
    ::UnityEngine::Pose lastHeadPoseTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _lastLeftHandPoseTarget
    // Size: 0x1C
    // Offset: 0x98
    ::UnityEngine::Pose lastLeftHandPoseTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _lastRightHandPoseTarget
    // Size: 0x1C
    // Offset: 0xB4
    ::UnityEngine::Pose lastRightHandPoseTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Single _lastTargetTime
    // Size: 0x4
    // Offset: 0xD0
    float lastTargetTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Pose _headPoseTarget
    // Size: 0x1C
    // Offset: 0xD4
    ::UnityEngine::Pose headPoseTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _leftHandPoseTarget
    // Size: 0x1C
    // Offset: 0xF0
    ::UnityEngine::Pose leftHandPoseTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private UnityEngine.Pose _rightHandPoseTarget
    // Size: 0x1C
    // Offset: 0x10C
    ::UnityEngine::Pose rightHandPoseTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Pose) == 0x1C);
    // private System.Single _nextTargetTime
    // Size: 0x4
    // Offset: 0x128
    float nextTargetTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Random _random
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn__random();
    // Get instance field reference: private UnityEngine.Pose _headPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__headPose();
    // Get instance field reference: private UnityEngine.Pose _leftHandPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__leftHandPose();
    // Get instance field reference: private UnityEngine.Pose _rightHandPose
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__rightHandPose();
    // Get instance field reference: private UnityEngine.Pose _lastHeadPoseTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__lastHeadPoseTarget();
    // Get instance field reference: private UnityEngine.Pose _lastLeftHandPoseTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__lastLeftHandPoseTarget();
    // Get instance field reference: private UnityEngine.Pose _lastRightHandPoseTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__lastRightHandPoseTarget();
    // Get instance field reference: private System.Single _lastTargetTime
    [[deprecated("Use field access instead!")]] float& dyn__lastTargetTime();
    // Get instance field reference: private UnityEngine.Pose _headPoseTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__headPoseTarget();
    // Get instance field reference: private UnityEngine.Pose _leftHandPoseTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__leftHandPoseTarget();
    // Get instance field reference: private UnityEngine.Pose _rightHandPoseTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Pose& dyn__rightHandPoseTarget();
    // Get instance field reference: private System.Single _nextTargetTime
    [[deprecated("Use field access instead!")]] float& dyn__nextTargetTime();
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager)
    // Offset: 0x2B24F3C
    // Implemented from: MockPlayerLobbyPoseGenerator
    // Base method: System.Void MockPlayerLobbyPoseGenerator::.ctor(IMultiplayerSessionManager multiplayerSessionManager)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayerLobbyPoseGeneratorAI* New_ctor(::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayerLobbyPoseGeneratorAI*, creationType>(multiplayerSessionManager)));
    }
    // public override System.Void Init()
    // Offset: 0x2B259E8
    // Implemented from: MockPlayerLobbyPoseGenerator
    // Base method: System.Void MockPlayerLobbyPoseGenerator::Init()
    void Init();
    // public override System.Void Tick()
    // Offset: 0x2B25D3C
    // Implemented from: MockPlayerLobbyPoseGenerator
    // Base method: System.Void MockPlayerLobbyPoseGenerator::Tick()
    void Tick();
  }; // MockPlayerLobbyPoseGeneratorAI
  #pragma pack(pop)
  static check_size<sizeof(MockPlayerLobbyPoseGeneratorAI), 296 + sizeof(float)> __GlobalNamespace_MockPlayerLobbyPoseGeneratorAISizeCheck;
  static_assert(sizeof(MockPlayerLobbyPoseGeneratorAI) == 0x12C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::*)()>(&GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerLobbyPoseGeneratorAI*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::*)()>(&GlobalNamespace::MockPlayerLobbyPoseGeneratorAI::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerLobbyPoseGeneratorAI*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
