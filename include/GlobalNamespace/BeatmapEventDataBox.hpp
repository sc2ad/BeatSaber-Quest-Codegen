// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatToTimeConvertor
  class IBeatToTimeConvertor;
  // Forward declaring type: IndexFilter
  class IndexFilter;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Skipping declaration: DistributionParamType because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBox
  class BeatmapEventDataBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapEventDataBox);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBox*, "", "BeatmapEventDataBox");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataBox
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventDataBox : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType
    struct DistributionParamType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BeatmapEventDataBox/DistributionParamType
    // [TokenAttribute] Offset: FFFFFFFF
    struct DistributionParamType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: DistributionParamType
      constexpr DistributionParamType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BeatmapEventDataBox/DistributionParamType Wave
      static constexpr const int Wave = 1;
      // Get static field: static public BeatmapEventDataBox/DistributionParamType Wave
      static ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType _get_Wave();
      // Set static field: static public BeatmapEventDataBox/DistributionParamType Wave
      static void _set_Wave(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType value);
      // static field const value: static public BeatmapEventDataBox/DistributionParamType Step
      static constexpr const int Step = 2;
      // Get static field: static public BeatmapEventDataBox/DistributionParamType Step
      static ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType _get_Step();
      // Set static field: static public BeatmapEventDataBox/DistributionParamType Step
      static void _set_Step(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BeatmapEventDataBox/DistributionParamType
    #pragma pack(pop)
    static check_size<sizeof(BeatmapEventDataBox::DistributionParamType), 0 + sizeof(int)> __GlobalNamespace_BeatmapEventDataBox_DistributionParamTypeSizeCheck;
    static_assert(sizeof(BeatmapEventDataBox::DistributionParamType) == 0x4);
    public:
    // private readonly IndexFilter <indexFilter>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::IndexFilter* indexFilter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IndexFilter*) == 0x8);
    // private readonly System.Single _beatDistributionParam
    // Size: 0x4
    // Offset: 0x18
    float beatDistributionParam;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly BeatmapEventDataBox/DistributionParamType _beatDistributionParamType
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType beatDistributionParamType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType) == 0x4);
    // private readonly System.Int32 _eventDistributionCount
    // Size: 0x4
    // Offset: 0x20
    int eventDistributionCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly BeatmapEventDataBox/DistributionParamType _eventDistributionParamType
    // Size: 0x4
    // Offset: 0x24
    ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType eventDistributionParamType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType) == 0x4);
    // private readonly System.Single _eventDistributionParam
    // Size: 0x4
    // Offset: 0x28
    float eventDistributionParam;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Boolean _eventDistributionShouldAffectFirstBaseEvent
    // Size: 0x1
    // Offset: 0x2C
    bool eventDistributionShouldAffectFirstBaseEvent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: eventDistributionShouldAffectFirstBaseEvent and: eventDistributionEaseType
    char __padding6[0x3] = {};
    // private readonly EaseType _eventDistributionEaseType
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::EaseType eventDistributionEaseType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EaseType) == 0x4);
    public:
    // Get instance field reference: private readonly IndexFilter <indexFilter>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IndexFilter*& dyn_$indexFilter$k__BackingField();
    // Get instance field reference: private readonly System.Single _beatDistributionParam
    [[deprecated("Use field access instead!")]] float& dyn__beatDistributionParam();
    // Get instance field reference: private readonly BeatmapEventDataBox/DistributionParamType _beatDistributionParamType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType& dyn__beatDistributionParamType();
    // Get instance field reference: private readonly System.Int32 _eventDistributionCount
    [[deprecated("Use field access instead!")]] int& dyn__eventDistributionCount();
    // Get instance field reference: private readonly BeatmapEventDataBox/DistributionParamType _eventDistributionParamType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType& dyn__eventDistributionParamType();
    // Get instance field reference: private readonly System.Single _eventDistributionParam
    [[deprecated("Use field access instead!")]] float& dyn__eventDistributionParam();
    // Get instance field reference: private readonly System.Boolean _eventDistributionShouldAffectFirstBaseEvent
    [[deprecated("Use field access instead!")]] bool& dyn__eventDistributionShouldAffectFirstBaseEvent();
    // Get instance field reference: private readonly EaseType _eventDistributionEaseType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& dyn__eventDistributionEaseType();
    // public System.Int32 get_subtypeIdentifier()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_subtypeIdentifier();
    // public System.Single get_beatStep()
    // Offset: 0xFFFFFFFFFFFFFFFF
    float get_beatStep();
    // public IndexFilter get_indexFilter()
    // Offset: 0x1532F00
    ::GlobalNamespace::IndexFilter* get_indexFilter();
    // protected System.Void .ctor(IndexFilter indexFilter, BeatmapEventDataBox/DistributionParamType beatDistributionParamType, System.Single beatDistributionParam, BeatmapEventDataBox/DistributionParamType eventDistributionParamType, System.Single eventDistributionParam, System.Boolean eventDistributionShouldAffectFirstBaseEvent, EaseType eventDistributionEaseType)
    // Offset: 0x1532F08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventDataBox* New_ctor(::GlobalNamespace::IndexFilter* indexFilter, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType beatDistributionParamType, float beatDistributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType eventDistributionParamType, float eventDistributionParam, bool eventDistributionShouldAffectFirstBaseEvent, ::GlobalNamespace::EaseType eventDistributionEaseType) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventDataBox*, creationType>(indexFilter, beatDistributionParamType, beatDistributionParam, eventDistributionParamType, eventDistributionParam, eventDistributionShouldAffectFirstBaseEvent, eventDistributionEaseType)));
    }
    // public System.Void Unpack(System.Single groupBoxBeat, System.Int32 groupId, System.Int32 elementId, System.Int32 durationOrderIndex, System.Int32 distributionOrderIndex, System.Single maxBeat, IBeatToTimeConvertor beatToTimeConvertor, System.Collections.Generic.List`1<BeatmapEventData> output)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Unpack(float groupBoxBeat, int groupId, int elementId, int durationOrderIndex, int distributionOrderIndex, float maxBeat, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* output);
    // protected System.Single GetBeatStep(System.Single lastBaseEventRelativeBeat)
    // Offset: 0x1533014
    float GetBeatStep(float lastBaseEventRelativeBeat);
    // protected System.Single GetDistribution(System.Boolean isFirstBaseDataEvent, System.Int32 distributionOrderIndex)
    // Offset: 0x15331C8
    float GetDistribution(bool isFirstBaseDataEvent, int distributionOrderIndex);
    // static private System.Single BeatDistributionParamToStep(System.Single distributionParam, BeatmapEventDataBox/DistributionParamType distributionParamType, System.Int32 count)
    // Offset: 0x153312C
    static float BeatDistributionParamToStep(float distributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType distributionParamType, int count);
    // static private System.Single EventDistributionParamToStep(System.Int32 index, System.Single distributionParam, BeatmapEventDataBox/DistributionParamType distributionParamType, System.Int32 count, EaseType easeType)
    // Offset: 0x15331F4
    static float EventDistributionParamToStep(int index, float distributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType distributionParamType, int count, ::GlobalNamespace::EaseType easeType);
  }; // BeatmapEventDataBox
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventDataBox), 48 + sizeof(::GlobalNamespace::EaseType)> __GlobalNamespace_BeatmapEventDataBoxSizeCheck;
  static_assert(sizeof(BeatmapEventDataBox) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBox::DistributionParamType, "", "BeatmapEventDataBox/DistributionParamType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::get_subtypeIdentifier
// Il2CppName: get_subtypeIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapEventDataBox::*)()>(&GlobalNamespace::BeatmapEventDataBox::get_subtypeIdentifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "get_subtypeIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::get_beatStep
// Il2CppName: get_beatStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapEventDataBox::*)()>(&GlobalNamespace::BeatmapEventDataBox::get_beatStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "get_beatStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::get_indexFilter
// Il2CppName: get_indexFilter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IndexFilter* (GlobalNamespace::BeatmapEventDataBox::*)()>(&GlobalNamespace::BeatmapEventDataBox::get_indexFilter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "get_indexFilter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::Unpack
// Il2CppName: Unpack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBox::*)(float, int, int, int, int, float, ::GlobalNamespace::IBeatToTimeConvertor*, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::BeatmapEventDataBox::Unpack)> {
  static const MethodInfo* get() {
    static auto* groupBoxBeat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* durationOrderIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* distributionOrderIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxBeat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* beatToTimeConvertor = &::il2cpp_utils::GetClassFromName("", "IBeatToTimeConvertor")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "Unpack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupBoxBeat, groupId, elementId, durationOrderIndex, distributionOrderIndex, maxBeat, beatToTimeConvertor, output});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::GetBeatStep
// Il2CppName: GetBeatStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapEventDataBox::*)(float)>(&GlobalNamespace::BeatmapEventDataBox::GetBeatStep)> {
  static const MethodInfo* get() {
    static auto* lastBaseEventRelativeBeat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "GetBeatStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastBaseEventRelativeBeat});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::GetDistribution
// Il2CppName: GetDistribution
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapEventDataBox::*)(bool, int)>(&GlobalNamespace::BeatmapEventDataBox::GetDistribution)> {
  static const MethodInfo* get() {
    static auto* isFirstBaseDataEvent = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* distributionOrderIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "GetDistribution", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isFirstBaseDataEvent, distributionOrderIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::BeatDistributionParamToStep
// Il2CppName: BeatDistributionParamToStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType, int)>(&GlobalNamespace::BeatmapEventDataBox::BeatDistributionParamToStep)> {
  static const MethodInfo* get() {
    static auto* distributionParam = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distributionParamType = &::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBox/DistributionParamType")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "BeatDistributionParamToStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{distributionParam, distributionParamType, count});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBox::EventDistributionParamToStep
// Il2CppName: EventDistributionParamToStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(int, float, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType, int, ::GlobalNamespace::EaseType)>(&GlobalNamespace::BeatmapEventDataBox::EventDistributionParamToStep)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* distributionParam = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distributionParamType = &::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBox/DistributionParamType")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("", "EaseType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBox*), "EventDistributionParamToStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index, distributionParam, distributionParamType, count, easeType});
  }
};
