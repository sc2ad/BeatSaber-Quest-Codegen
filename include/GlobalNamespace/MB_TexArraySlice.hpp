// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_TexArraySliceRendererMatPair
  class MB_TexArraySliceRendererMatPair;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB_TexArraySlice
  class MB_TexArraySlice;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB_TexArraySlice);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB_TexArraySlice*, "", "MB_TexArraySlice");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MB_TexArraySlice
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_TexArraySlice : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean considerMeshUVs
    // Size: 0x1
    // Offset: 0x10
    bool considerMeshUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: considerMeshUVs and: sourceMaterials
    char __padding0[0x7] = {};
    // public System.Collections.Generic.List`1<MB_TexArraySliceRendererMatPair> sourceMaterials
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>* sourceMaterials;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>*) == 0x8);
    public:
    // Get instance field reference: public System.Boolean considerMeshUVs
    [[deprecated("Use field access instead!")]] bool& dyn_considerMeshUVs();
    // Get instance field reference: public System.Collections.Generic.List`1<MB_TexArraySliceRendererMatPair> sourceMaterials
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>*& dyn_sourceMaterials();
    // public System.Void .ctor()
    // Offset: 0x1B643B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_TexArraySlice* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB_TexArraySlice::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_TexArraySlice*, creationType>()));
    }
    // public System.Boolean ContainsMaterial(UnityEngine.Material mat)
    // Offset: 0x1B63EC4
    bool ContainsMaterial(::UnityEngine::Material* mat);
    // public System.Collections.Generic.HashSet`1<UnityEngine.Material> GetDistinctMaterials()
    // Offset: 0x1B63FA4
    ::System::Collections::Generic::HashSet_1<::UnityEngine::Material*>* GetDistinctMaterials();
    // public System.Boolean ContainsMaterialAndMesh(UnityEngine.Material mat, UnityEngine.Mesh mesh)
    // Offset: 0x1B64080
    bool ContainsMaterialAndMesh(::UnityEngine::Material* mat, ::UnityEngine::Mesh* mesh);
    // public System.Collections.Generic.List`1<UnityEngine.Material> GetAllUsedMaterials(System.Collections.Generic.List`1<UnityEngine.Material> usedMats)
    // Offset: 0x1B641F8
    ::System::Collections::Generic::List_1<::UnityEngine::Material*>* GetAllUsedMaterials(::System::Collections::Generic::List_1<::UnityEngine::Material*>* usedMats);
    // public System.Collections.Generic.List`1<UnityEngine.GameObject> GetAllUsedRenderers(System.Collections.Generic.List`1<UnityEngine.GameObject> allObjsFromTextureBaker)
    // Offset: 0x1B642C8
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* GetAllUsedRenderers(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* allObjsFromTextureBaker);
  }; // MB_TexArraySlice
  #pragma pack(pop)
  static check_size<sizeof(MB_TexArraySlice), 24 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::MB_TexArraySliceRendererMatPair*>*)> __GlobalNamespace_MB_TexArraySliceSizeCheck;
  static_assert(sizeof(MB_TexArraySlice) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB_TexArraySlice::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB_TexArraySlice::ContainsMaterial
// Il2CppName: ContainsMaterial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB_TexArraySlice::*)(::UnityEngine::Material*)>(&GlobalNamespace::MB_TexArraySlice::ContainsMaterial)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TexArraySlice*), "ContainsMaterial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TexArraySlice::GetDistinctMaterials
// Il2CppName: GetDistinctMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::UnityEngine::Material*>* (GlobalNamespace::MB_TexArraySlice::*)()>(&GlobalNamespace::MB_TexArraySlice::GetDistinctMaterials)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TexArraySlice*), "GetDistinctMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TexArraySlice::ContainsMaterialAndMesh
// Il2CppName: ContainsMaterialAndMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB_TexArraySlice::*)(::UnityEngine::Material*, ::UnityEngine::Mesh*)>(&GlobalNamespace::MB_TexArraySlice::ContainsMaterialAndMesh)> {
  static const MethodInfo* get() {
    static auto* mat = &::il2cpp_utils::GetClassFromName("UnityEngine", "Material")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("UnityEngine", "Mesh")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TexArraySlice*), "ContainsMaterialAndMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mat, mesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TexArraySlice::GetAllUsedMaterials
// Il2CppName: GetAllUsedMaterials
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::Material*>* (GlobalNamespace::MB_TexArraySlice::*)(::System::Collections::Generic::List_1<::UnityEngine::Material*>*)>(&GlobalNamespace::MB_TexArraySlice::GetAllUsedMaterials)> {
  static const MethodInfo* get() {
    static auto* usedMats = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Material")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TexArraySlice*), "GetAllUsedMaterials", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{usedMats});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TexArraySlice::GetAllUsedRenderers
// Il2CppName: GetAllUsedRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* (GlobalNamespace::MB_TexArraySlice::*)(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*)>(&GlobalNamespace::MB_TexArraySlice::GetAllUsedRenderers)> {
  static const MethodInfo* get() {
    static auto* allObjsFromTextureBaker = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TexArraySlice*), "GetAllUsedRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{allObjsFromTextureBaker});
  }
};
