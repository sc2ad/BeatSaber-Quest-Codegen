// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteLineLayer
  struct NoteLineLayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StaticBeatmapObjectSpawnMovementData
  class StaticBeatmapObjectSpawnMovementData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StaticBeatmapObjectSpawnMovementData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StaticBeatmapObjectSpawnMovementData*, "", "StaticBeatmapObjectSpawnMovementData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: StaticBeatmapObjectSpawnMovementData
  // [TokenAttribute] Offset: FFFFFFFF
  class StaticBeatmapObjectSpawnMovementData : public ::Il2CppObject {
    public:
    // static field const value: static public System.Single kNoteLinesDistance
    static constexpr const float kNoteLinesDistance = 0.6;
    // Get static field: static public System.Single kNoteLinesDistance
    static float _get_kNoteLinesDistance();
    // Set static field: static public System.Single kNoteLinesDistance
    static void _set_kNoteLinesDistance(float value);
    // static field const value: static public System.Single kBaseLinesYPos
    static constexpr const float kBaseLinesYPos = 0.25;
    // Get static field: static public System.Single kBaseLinesYPos
    static float _get_kBaseLinesYPos();
    // Set static field: static public System.Single kBaseLinesYPos
    static void _set_kBaseLinesYPos(float value);
    // static field const value: static public System.Single kUpperLinesYPos
    static constexpr const float kUpperLinesYPos = 0.85;
    // Get static field: static public System.Single kUpperLinesYPos
    static float _get_kUpperLinesYPos();
    // Set static field: static public System.Single kUpperLinesYPos
    static void _set_kUpperLinesYPos(float value);
    // static field const value: static public System.Single kTopLinesYPos
    static constexpr const float kTopLinesYPos = 1.45;
    // Get static field: static public System.Single kTopLinesYPos
    static float _get_kTopLinesYPos();
    // Set static field: static public System.Single kTopLinesYPos
    static void _set_kTopLinesYPos(float value);
    // static field const value: static public System.Single kObstacleVerticalOffset
    static constexpr const float kObstacleVerticalOffset = -0.15;
    // Get static field: static public System.Single kObstacleVerticalOffset
    static float _get_kObstacleVerticalOffset();
    // Set static field: static public System.Single kObstacleVerticalOffset
    static void _set_kObstacleVerticalOffset(float value);
    // static public System.Single get_layerHeight()
    // Offset: 0x2840270
    static float get_layerHeight();
    // static public UnityEngine.Vector2 Get2DNoteOffset(System.Int32 noteLineIndex, System.Int32 noteLinesCount, NoteLineLayer noteLineLayer)
    // Offset: 0x2839C90
    static ::UnityEngine::Vector2 Get2DNoteOffset(int noteLineIndex, int noteLinesCount, ::GlobalNamespace::NoteLineLayer noteLineLayer);
    // static public System.Single LineYPosForLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x284024C
    static float LineYPosForLineLayer(::GlobalNamespace::NoteLineLayer lineLayer);
  }; // StaticBeatmapObjectSpawnMovementData
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StaticBeatmapObjectSpawnMovementData::get_layerHeight
// Il2CppName: get_layerHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::StaticBeatmapObjectSpawnMovementData::get_layerHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StaticBeatmapObjectSpawnMovementData*), "get_layerHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StaticBeatmapObjectSpawnMovementData::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (*)(int, int, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::StaticBeatmapObjectSpawnMovementData::Get2DNoteOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLinesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StaticBeatmapObjectSpawnMovementData*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLinesCount, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StaticBeatmapObjectSpawnMovementData::LineYPosForLineLayer
// Il2CppName: LineYPosForLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::StaticBeatmapObjectSpawnMovementData::LineYPosForLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StaticBeatmapObjectSpawnMovementData*), "LineYPosForLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
