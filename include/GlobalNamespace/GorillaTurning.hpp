// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaTriggerBox
#include "GlobalNamespace/GorillaTriggerBox.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: GorillaSnapTurn
  class GorillaSnapTurn;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaTurning
  class GorillaTurning;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaTurning);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTurning*, "", "GorillaTurning");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTurning
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaTurning : public ::GlobalNamespace::GorillaTriggerBox {
    public:
    // Writing base type padding for base size: 0x19 to desired offset: 0x20
    char ___base_padding[0x7] = {};
    public:
    // public UnityEngine.Material redMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* redMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material blueMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* blueMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material greenMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* greenMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material transparentBlueMaterial
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Material* transparentBlueMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material transparentRedMaterial
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Material* transparentRedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material transparentGreenMaterial
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Material* transparentGreenMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer smoothTurnBox
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::MeshRenderer* smoothTurnBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer snapTurnBox
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::MeshRenderer* snapTurnBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.MeshRenderer noTurnBox
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::MeshRenderer* noTurnBox;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.XR.Interaction.Toolkit.GorillaSnapTurn snapTurn
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn* snapTurn;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn*) == 0x8);
    // public System.String currentChoice
    // Size: 0x8
    // Offset: 0x70
    ::StringW currentChoice;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single currentSpeed
    // Size: 0x4
    // Offset: 0x78
    float currentSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Material redMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_redMaterial();
    // Get instance field reference: public UnityEngine.Material blueMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_blueMaterial();
    // Get instance field reference: public UnityEngine.Material greenMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_greenMaterial();
    // Get instance field reference: public UnityEngine.Material transparentBlueMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_transparentBlueMaterial();
    // Get instance field reference: public UnityEngine.Material transparentRedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_transparentRedMaterial();
    // Get instance field reference: public UnityEngine.Material transparentGreenMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_transparentGreenMaterial();
    // Get instance field reference: public UnityEngine.MeshRenderer smoothTurnBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_smoothTurnBox();
    // Get instance field reference: public UnityEngine.MeshRenderer snapTurnBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_snapTurnBox();
    // Get instance field reference: public UnityEngine.MeshRenderer noTurnBox
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_noTurnBox();
    // Get instance field reference: public UnityEngine.XR.Interaction.Toolkit.GorillaSnapTurn snapTurn
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::GorillaSnapTurn*& dyn_snapTurn();
    // Get instance field reference: public System.String currentChoice
    [[deprecated("Use field access instead!")]] ::StringW& dyn_currentChoice();
    // Get instance field reference: public System.Single currentSpeed
    [[deprecated("Use field access instead!")]] float& dyn_currentSpeed();
    // private System.Void Awake()
    // Offset: 0xC88DAC
    void Awake();
    // public System.Void .ctor()
    // Offset: 0xC88DB0
    // Implemented from: GorillaTriggerBox
    // Base method: System.Void GorillaTriggerBox::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaTurning* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTurning::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaTurning*, creationType>()));
    }
  }; // GorillaTurning
  #pragma pack(pop)
  static check_size<sizeof(GorillaTurning), 120 + sizeof(float)> __GlobalNamespace_GorillaTurningSizeCheck;
  static_assert(sizeof(GorillaTurning) == 0x7C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaTurning::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTurning::*)()>(&GlobalNamespace::GorillaTurning::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTurning*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTurning::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
