// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: DropdownWithTableView
  class DropdownWithTableView;
  // Forward declaring type: SimpleTextDropdown
  class SimpleTextDropdown;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SelectRegionViewController
  class SelectRegionViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SelectRegionViewController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SelectRegionViewController*, "", "SelectRegionViewController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: SelectRegionViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class SelectRegionViewController : public ::HMUI::ViewController {
    public:
    // Nested type: ::GlobalNamespace::SelectRegionViewController::Region
    struct Region;
    // Nested type: ::GlobalNamespace::SelectRegionViewController::RegionToLocalizationKeyPair
    struct RegionToLocalizationKeyPair;
    // Nested type: ::GlobalNamespace::SelectRegionViewController::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SelectRegionViewController/Region
    // [TokenAttribute] Offset: FFFFFFFF
    struct Region/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Region
      constexpr Region(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SelectRegionViewController/Region None
      static constexpr const int None = 0;
      // Get static field: static public SelectRegionViewController/Region None
      static ::GlobalNamespace::SelectRegionViewController::Region _get_None();
      // Set static field: static public SelectRegionViewController/Region None
      static void _set_None(::GlobalNamespace::SelectRegionViewController::Region value);
      // static field const value: static public SelectRegionViewController/Region NorthAndSouthAmerica
      static constexpr const int NorthAndSouthAmerica = 1;
      // Get static field: static public SelectRegionViewController/Region NorthAndSouthAmerica
      static ::GlobalNamespace::SelectRegionViewController::Region _get_NorthAndSouthAmerica();
      // Set static field: static public SelectRegionViewController/Region NorthAndSouthAmerica
      static void _set_NorthAndSouthAmerica(::GlobalNamespace::SelectRegionViewController::Region value);
      // static field const value: static public SelectRegionViewController/Region Europe
      static constexpr const int Europe = 2;
      // Get static field: static public SelectRegionViewController/Region Europe
      static ::GlobalNamespace::SelectRegionViewController::Region _get_Europe();
      // Set static field: static public SelectRegionViewController/Region Europe
      static void _set_Europe(::GlobalNamespace::SelectRegionViewController::Region value);
      // static field const value: static public SelectRegionViewController/Region SouthKorea
      static constexpr const int SouthKorea = 3;
      // Get static field: static public SelectRegionViewController/Region SouthKorea
      static ::GlobalNamespace::SelectRegionViewController::Region _get_SouthKorea();
      // Set static field: static public SelectRegionViewController/Region SouthKorea
      static void _set_SouthKorea(::GlobalNamespace::SelectRegionViewController::Region value);
      // static field const value: static public SelectRegionViewController/Region Japan
      static constexpr const int Japan = 4;
      // Get static field: static public SelectRegionViewController/Region Japan
      static ::GlobalNamespace::SelectRegionViewController::Region _get_Japan();
      // Set static field: static public SelectRegionViewController/Region Japan
      static void _set_Japan(::GlobalNamespace::SelectRegionViewController::Region value);
      // static field const value: static public SelectRegionViewController/Region Other
      static constexpr const int Other = 5;
      // Get static field: static public SelectRegionViewController/Region Other
      static ::GlobalNamespace::SelectRegionViewController::Region _get_Other();
      // Set static field: static public SelectRegionViewController/Region Other
      static void _set_Other(::GlobalNamespace::SelectRegionViewController::Region value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SelectRegionViewController/Region
    #pragma pack(pop)
    static check_size<sizeof(SelectRegionViewController::Region), 0 + sizeof(int)> __GlobalNamespace_SelectRegionViewController_RegionSizeCheck;
    static_assert(sizeof(SelectRegionViewController::Region) == 0x4);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: SelectRegionViewController/RegionToLocalizationKeyPair
    // [TokenAttribute] Offset: FFFFFFFF
    struct RegionToLocalizationKeyPair/*, public ::System::ValueType*/ {
      public:
      public:
      // public SelectRegionViewController/Region region
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::SelectRegionViewController::Region region;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::SelectRegionViewController::Region) == 0x4);
      // Padding between fields: region and: localizationKey
      char __padding0[0x4] = {};
      // public System.String localizationKey
      // Size: 0x8
      // Offset: 0x8
      ::StringW localizationKey;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      public:
      // Creating value type constructor for type: RegionToLocalizationKeyPair
      constexpr RegionToLocalizationKeyPair(::GlobalNamespace::SelectRegionViewController::Region region_ = {}, ::StringW localizationKey_ = {}) noexcept : region{region_}, localizationKey{localizationKey_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public SelectRegionViewController/Region region
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::SelectRegionViewController::Region& dyn_region();
      // Get instance field reference: public System.String localizationKey
      [[deprecated("Use field access instead!")]] ::StringW& dyn_localizationKey();
      // public System.Void .ctor(SelectRegionViewController/Region region, System.String localizationKey)
      // Offset: 0x1474028
      // ABORTED: conflicts with another method.  RegionToLocalizationKeyPair(::GlobalNamespace::SelectRegionViewController::Region region, ::StringW localizationKey);
    }; // SelectRegionViewController/RegionToLocalizationKeyPair
    #pragma pack(pop)
    static check_size<sizeof(SelectRegionViewController::RegionToLocalizationKeyPair), 8 + sizeof(::StringW)> __GlobalNamespace_SelectRegionViewController_RegionToLocalizationKeyPairSizeCheck;
    static_assert(sizeof(SelectRegionViewController::RegionToLocalizationKeyPair) == 0x10);
    public:
    // private UnityEngine.UI.Button _continueButton
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UI::Button* continueButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private HMUI.SimpleTextDropdown _regionSelectionDropdown
    // Size: 0x8
    // Offset: 0x78
    ::HMUI::SimpleTextDropdown* regionSelectionDropdown;
    // Field size check
    static_assert(sizeof(::HMUI::SimpleTextDropdown*) == 0x8);
    // [HeaderAttribute] Offset: 0x112E478
    // private SelectRegionViewController/RegionToLocalizationKeyPair[] _regionLocalizationKeys
    // Size: 0x8
    // Offset: 0x80
    ::ArrayW<::GlobalNamespace::SelectRegionViewController::RegionToLocalizationKeyPair> regionLocalizationKeys;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SelectRegionViewController::RegionToLocalizationKeyPair>) == 0x8);
    // private System.Action`1<SelectRegionViewController/Region> didPressContinueButtonEvent
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>* didPressContinueButtonEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UI.Button _continueButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__continueButton();
    // Get instance field reference: private HMUI.SimpleTextDropdown _regionSelectionDropdown
    [[deprecated("Use field access instead!")]] ::HMUI::SimpleTextDropdown*& dyn__regionSelectionDropdown();
    // Get instance field reference: private SelectRegionViewController/RegionToLocalizationKeyPair[] _regionLocalizationKeys
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SelectRegionViewController::RegionToLocalizationKeyPair>& dyn__regionLocalizationKeys();
    // Get instance field reference: private System.Action`1<SelectRegionViewController/Region> didPressContinueButtonEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>*& dyn_didPressContinueButtonEvent();
    // public System.Void add_didPressContinueButtonEvent(System.Action`1<SelectRegionViewController/Region> value)
    // Offset: 0x1473A90
    void add_didPressContinueButtonEvent(::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>* value);
    // public System.Void remove_didPressContinueButtonEvent(System.Action`1<SelectRegionViewController/Region> value)
    // Offset: 0x1473B34
    void remove_didPressContinueButtonEvent(::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>* value);
    // public System.Void .ctor()
    // Offset: 0x1473F10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SelectRegionViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SelectRegionViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SelectRegionViewController*, creationType>()));
    }
    // private System.Void HandleRegionSelectionDropdownDidSelectCell(HMUI.DropdownWithTableView dropdown, System.Int32 idx)
    // Offset: 0x1473EC0
    void HandleRegionSelectionDropdownDidSelectCell(::HMUI::DropdownWithTableView* dropdown, int idx);
    // private System.Void <DidActivate>b__8_0()
    // Offset: 0x1473F18
    void $DidActivate$b__8_0();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1473BD8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void OnDestroy()
    // Offset: 0x1473DD8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
  }; // SelectRegionViewController
  #pragma pack(pop)
  static check_size<sizeof(SelectRegionViewController), 136 + sizeof(::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>*)> __GlobalNamespace_SelectRegionViewControllerSizeCheck;
  static_assert(sizeof(SelectRegionViewController) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SelectRegionViewController::RegionToLocalizationKeyPair, "", "SelectRegionViewController/RegionToLocalizationKeyPair");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SelectRegionViewController::Region, "", "SelectRegionViewController/Region");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::add_didPressContinueButtonEvent
// Il2CppName: add_didPressContinueButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectRegionViewController::*)(::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>*)>(&GlobalNamespace::SelectRegionViewController::add_didPressContinueButtonEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SelectRegionViewController/Region")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectRegionViewController*), "add_didPressContinueButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::remove_didPressContinueButtonEvent
// Il2CppName: remove_didPressContinueButtonEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectRegionViewController::*)(::System::Action_1<::GlobalNamespace::SelectRegionViewController::Region>*)>(&GlobalNamespace::SelectRegionViewController::remove_didPressContinueButtonEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SelectRegionViewController/Region")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectRegionViewController*), "remove_didPressContinueButtonEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::HandleRegionSelectionDropdownDidSelectCell
// Il2CppName: HandleRegionSelectionDropdownDidSelectCell
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectRegionViewController::*)(::HMUI::DropdownWithTableView*, int)>(&GlobalNamespace::SelectRegionViewController::HandleRegionSelectionDropdownDidSelectCell)> {
  static const MethodInfo* get() {
    static auto* dropdown = &::il2cpp_utils::GetClassFromName("HMUI", "DropdownWithTableView")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectRegionViewController*), "HandleRegionSelectionDropdownDidSelectCell", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dropdown, idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::$DidActivate$b__8_0
// Il2CppName: <DidActivate>b__8_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectRegionViewController::*)()>(&GlobalNamespace::SelectRegionViewController::$DidActivate$b__8_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectRegionViewController*), "<DidActivate>b__8_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectRegionViewController::*)(bool, bool, bool)>(&GlobalNamespace::SelectRegionViewController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectRegionViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SelectRegionViewController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SelectRegionViewController::*)()>(&GlobalNamespace::SelectRegionViewController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SelectRegionViewController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
