// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IConnectedPlayer
#include "GlobalNamespace/IConnectedPlayer.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MockPlayerSettings
  class MockPlayerSettings;
  // Forward declaring type: MockPlayerFiniteStateMachine
  class MockPlayerFiniteStateMachine;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: AvatarPartsModel
  class AvatarPartsModel;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: NodePoseSyncStateManager
  class NodePoseSyncStateManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MockPlayer
  class MockPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MockPlayer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockPlayer*, "", "MockPlayer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xF0
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class MockPlayer : public ::Il2CppObject/*, public ::GlobalNamespace::IConnectedPlayer, public ::GlobalNamespace::INetworkPlayer*/ {
    public:
    public:
    // private readonly System.Boolean <isMe>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isConnected>k__BackingField
    // Size: 0x1
    // Offset: 0x11
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnected and: multiplayerAvatarData
    char __padding1[0x6] = {};
    // private MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
    // Size: 0x70
    // Offset: 0x18
    ::GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerAvatarData) == 0x70);
    // private System.Boolean <isConnectionOwner>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool isConnectionOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isKicked>k__BackingField
    // Size: 0x1
    // Offset: 0x89
    bool isKicked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isKicked and: currentPartySize
    char __padding4[0x2] = {};
    // private System.Int32 <currentPartySize>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    int currentPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private BeatmapLevelSelectionMask <selectionMask>k__BackingField
    // Size: 0x18
    // Offset: 0x90
    ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // private GameplayServerConfiguration <configuration>k__BackingField
    // Size: 0x18
    // Offset: 0xA8
    ::GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private System.Boolean <isMyPartyOwner>k__BackingField
    // Size: 0x1
    // Offset: 0xC0
    bool isMyPartyOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <requiresPassword>k__BackingField
    // Size: 0x1
    // Offset: 0xC1
    bool requiresPassword;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isWaitingOnJoin>k__BackingField
    // Size: 0x1
    // Offset: 0xC2
    bool isWaitingOnJoin;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <canInvite>k__BackingField
    // Size: 0x1
    // Offset: 0xC3
    bool canInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <isWaitingOnInvite>k__BackingField
    // Size: 0x1
    // Offset: 0xC4
    bool isWaitingOnInvite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <canKick>k__BackingField
    // Size: 0x1
    // Offset: 0xC5
    bool canKick;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <canLeave>k__BackingField
    // Size: 0x1
    // Offset: 0xC6
    bool canLeave;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <canBlock>k__BackingField
    // Size: 0x1
    // Offset: 0xC7
    bool canBlock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <canUnblock>k__BackingField
    // Size: 0x1
    // Offset: 0xC8
    bool canUnblock;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isReady
    // Size: 0x1
    // Offset: 0xC9
    bool isReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isReady and: playerState
    char __padding17[0x6] = {};
    // private readonly System.Collections.Generic.HashSet`1<System.String> _playerState
    // Size: 0x8
    // Offset: 0xD0
    ::System::Collections::Generic::HashSet_1<::StringW>* playerState;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private readonly MockPlayerSettings _settings
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::MockPlayerSettings* settings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MockPlayerSettings*) == 0x8);
    // private MockPlayerFiniteStateMachine _fsm
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::MockPlayerFiniteStateMachine* fsm;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MockPlayerFiniteStateMachine*) == 0x8);
    // private IGameplayRpcManager _gameplayRpcManager
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::IGameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IGameplayRpcManager*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IConnectedPlayer
    operator ::GlobalNamespace::IConnectedPlayer() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IConnectedPlayer*>(this);
    }
    // Creating interface conversion operator: i_IConnectedPlayer
    inline ::GlobalNamespace::IConnectedPlayer* i_IConnectedPlayer() noexcept {
      return reinterpret_cast<::GlobalNamespace::IConnectedPlayer*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INetworkPlayer
    operator ::GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INetworkPlayer*>(this);
    }
    // Creating interface conversion operator: i_INetworkPlayer
    inline ::GlobalNamespace::INetworkPlayer* i_INetworkPlayer() noexcept {
      return reinterpret_cast<::GlobalNamespace::INetworkPlayer*>(this);
    }
    // Get instance field reference: private readonly System.Boolean <isMe>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isMe$k__BackingField();
    // Get instance field reference: private System.Boolean <isConnected>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isConnected$k__BackingField();
    // Get instance field reference: private MultiplayerAvatarData <multiplayerAvatarData>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerAvatarData& dyn_$multiplayerAvatarData$k__BackingField();
    // Get instance field reference: private System.Boolean <isConnectionOwner>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isConnectionOwner$k__BackingField();
    // Get instance field reference: private System.Boolean <isKicked>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isKicked$k__BackingField();
    // Get instance field reference: private System.Int32 <currentPartySize>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$currentPartySize$k__BackingField();
    // Get instance field reference: private BeatmapLevelSelectionMask <selectionMask>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn_$selectionMask$k__BackingField();
    // Get instance field reference: private GameplayServerConfiguration <configuration>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn_$configuration$k__BackingField();
    // Get instance field reference: private System.Boolean <isMyPartyOwner>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isMyPartyOwner$k__BackingField();
    // Get instance field reference: private System.Boolean <requiresPassword>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$requiresPassword$k__BackingField();
    // Get instance field reference: private System.Boolean <isWaitingOnJoin>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isWaitingOnJoin$k__BackingField();
    // Get instance field reference: private System.Boolean <canInvite>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canInvite$k__BackingField();
    // Get instance field reference: private System.Boolean <isWaitingOnInvite>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$isWaitingOnInvite$k__BackingField();
    // Get instance field reference: private System.Boolean <canKick>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canKick$k__BackingField();
    // Get instance field reference: private System.Boolean <canLeave>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canLeave$k__BackingField();
    // Get instance field reference: private System.Boolean <canBlock>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canBlock$k__BackingField();
    // Get instance field reference: private System.Boolean <canUnblock>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$canUnblock$k__BackingField();
    // Get instance field reference: private System.Boolean _isReady
    [[deprecated("Use field access instead!")]] bool& dyn__isReady();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _playerState
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__playerState();
    // Get instance field reference: private readonly MockPlayerSettings _settings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MockPlayerSettings*& dyn__settings();
    // Get instance field reference: private MockPlayerFiniteStateMachine _fsm
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MockPlayerFiniteStateMachine*& dyn__fsm();
    // Get instance field reference: private IGameplayRpcManager _gameplayRpcManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameplayRpcManager*& dyn__gameplayRpcManager();
    // public System.Boolean get_isReady()
    // Offset: 0x13F61EC
    bool get_isReady();
    // public System.Void set_isReady(System.Boolean value)
    // Offset: 0x13F61F4
    void set_isReady(bool value);
    // public System.Boolean get_isMe()
    // Offset: 0x13F6230
    bool get_isMe();
    // public System.String get_userId()
    // Offset: 0x13F6238
    ::StringW get_userId();
    // public System.String get_userName()
    // Offset: 0x13F6254
    ::StringW get_userName();
    // public System.Int32 get_sortIndex()
    // Offset: 0x13F6270
    int get_sortIndex();
    // public System.Boolean get_autoConnect()
    // Offset: 0x13F628C
    bool get_autoConnect();
    // public System.Boolean get_inactiveByDefault()
    // Offset: 0x13F62A8
    bool get_inactiveByDefault();
    // public System.Boolean get_isConnected()
    // Offset: 0x13F62C4
    bool get_isConnected();
    // protected System.Void set_isConnected(System.Boolean value)
    // Offset: 0x13F62CC
    void set_isConnected(bool value);
    // public MultiplayerAvatarData get_multiplayerAvatarData()
    // Offset: 0x13F62D8
    ::GlobalNamespace::MultiplayerAvatarData get_multiplayerAvatarData();
    // private System.Void set_multiplayerAvatarData(MultiplayerAvatarData value)
    // Offset: 0x13F62E8
    void set_multiplayerAvatarData(::GlobalNamespace::MultiplayerAvatarData value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x13F6304
    bool get_isConnectionOwner();
    // public System.Void set_isConnectionOwner(System.Boolean value)
    // Offset: 0x13F630C
    void set_isConnectionOwner(bool value);
    // public DisconnectedReason get_disconnectedReason()
    // Offset: 0x13F6318
    ::GlobalNamespace::DisconnectedReason get_disconnectedReason();
    // public System.Single get_offsetSyncTime()
    // Offset: 0x13F6320
    float get_offsetSyncTime();
    // public System.Boolean get_hasValidLatency()
    // Offset: 0x13F63B0
    bool get_hasValidLatency();
    // public System.Single get_currentLatency()
    // Offset: 0x13F6378
    float get_currentLatency();
    // public System.Boolean get_isKicked()
    // Offset: 0x13F63B8
    bool get_isKicked();
    // public System.Void set_isKicked(System.Boolean value)
    // Offset: 0x13F63C0
    void set_isKicked(bool value);
    // public System.Int32 get_currentPartySize()
    // Offset: 0x13F63CC
    int get_currentPartySize();
    // public System.Void set_currentPartySize(System.Int32 value)
    // Offset: 0x13F63D4
    void set_currentPartySize(int value);
    // public BeatmapLevelSelectionMask get_selectionMask()
    // Offset: 0x13F63DC
    ::GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask();
    // public System.Void set_selectionMask(BeatmapLevelSelectionMask value)
    // Offset: 0x13F63F0
    void set_selectionMask(::GlobalNamespace::BeatmapLevelSelectionMask value);
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x13F6404
    ::GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public System.Void set_configuration(GameplayServerConfiguration value)
    // Offset: 0x13F6418
    void set_configuration(::GlobalNamespace::GameplayServerConfiguration value);
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x13F642C
    bool get_isMyPartyOwner();
    // public System.Void set_isMyPartyOwner(System.Boolean value)
    // Offset: 0x13F6434
    void set_isMyPartyOwner(bool value);
    // public IConnectedPlayer get_connectedPlayer()
    // Offset: 0x13F6440
    ::GlobalNamespace::IConnectedPlayer* get_connectedPlayer();
    // public System.Boolean get_canJoin()
    // Offset: 0x13F6444
    bool get_canJoin();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x13F644C
    bool get_requiresPassword();
    // public System.Void set_requiresPassword(System.Boolean value)
    // Offset: 0x13F6454
    void set_requiresPassword(bool value);
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x13F6460
    bool get_isWaitingOnJoin();
    // public System.Void set_isWaitingOnJoin(System.Boolean value)
    // Offset: 0x13F6468
    void set_isWaitingOnJoin(bool value);
    // public System.Boolean get_canInvite()
    // Offset: 0x13F6474
    bool get_canInvite();
    // public System.Void set_canInvite(System.Boolean value)
    // Offset: 0x13F647C
    void set_canInvite(bool value);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x13F6488
    bool get_isWaitingOnInvite();
    // public System.Void set_isWaitingOnInvite(System.Boolean value)
    // Offset: 0x13F6490
    void set_isWaitingOnInvite(bool value);
    // public System.Boolean get_canKick()
    // Offset: 0x13F649C
    bool get_canKick();
    // public System.Void set_canKick(System.Boolean value)
    // Offset: 0x13F64A4
    void set_canKick(bool value);
    // public System.Boolean get_canLeave()
    // Offset: 0x13F64B0
    bool get_canLeave();
    // public System.Void set_canLeave(System.Boolean value)
    // Offset: 0x13F64B8
    void set_canLeave(bool value);
    // public System.Boolean get_canBlock()
    // Offset: 0x13F64C4
    bool get_canBlock();
    // public System.Void set_canBlock(System.Boolean value)
    // Offset: 0x13F64CC
    void set_canBlock(bool value);
    // public System.Boolean get_canUnblock()
    // Offset: 0x13F64D8
    bool get_canUnblock();
    // public System.Void set_canUnblock(System.Boolean value)
    // Offset: 0x13F64E0
    void set_canUnblock(bool value);
    // public System.Boolean get_isPlayer()
    // Offset: 0x13F64EC
    bool get_isPlayer();
    // public System.Void set_isPlayer(System.Boolean value)
    // Offset: 0x13F65A4
    void set_isPlayer(bool value);
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x13F6694
    bool get_isDedicatedServer();
    // public System.Void set_isDedicatedServer(System.Boolean value)
    // Offset: 0x13F66E4
    void set_isDedicatedServer(bool value);
    // public System.Boolean get_wantsToPlayNextLevel()
    // Offset: 0x13F6744
    bool get_wantsToPlayNextLevel();
    // public System.Void set_wantsToPlayNextLevel(System.Boolean value)
    // Offset: 0x13F6794
    void set_wantsToPlayNextLevel(bool value);
    // public System.Boolean get_wasActiveAtLevelStart()
    // Offset: 0x13F67F4
    bool get_wasActiveAtLevelStart();
    // public System.Void set_wasActiveAtLevelStart(System.Boolean value)
    // Offset: 0x13F6844
    void set_wasActiveAtLevelStart(bool value);
    // public System.Boolean get_isActive()
    // Offset: 0x13F68A4
    bool get_isActive();
    // public System.Void set_isActive(System.Boolean value)
    // Offset: 0x13F68F4
    void set_isActive(bool value);
    // public System.Boolean get_finishedLevel()
    // Offset: 0x13F6954
    bool get_finishedLevel();
    // public System.Void set_finishedLevel(System.Boolean value)
    // Offset: 0x13F69A4
    void set_finishedLevel(bool value);
    // public System.Boolean get_isTerminating()
    // Offset: 0x13F6A04
    bool get_isTerminating();
    // public System.Void set_isTerminating(System.Boolean value)
    // Offset: 0x13F6A54
    void set_isTerminating(bool value);
    // public System.Void .ctor(MockPlayerSettings settings, System.Boolean isLocalPlayer)
    // Offset: 0x13F6AB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayer* New_ctor(::GlobalNamespace::MockPlayerSettings* settings, bool isLocalPlayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayer*, creationType>(settings, isLocalPlayer)));
    }
    // public System.Boolean SetState(System.String state, System.Boolean value)
    // Offset: 0x13F6604
    bool SetState(::StringW state, bool value);
    // public System.Boolean HasState(System.String state)
    // Offset: 0x13F653C
    bool HasState(::StringW state);
    // public System.Void Connect(IMultiplayerSessionManager multiplayerSessionManager, AvatarPartsModel avatarPartsModel, BeatmapLevelsModel beatmapLevelsModel, NodePoseSyncStateManager nodePoseSyncStateManager)
    // Offset: 0x13F6B60
    void Connect(::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, ::GlobalNamespace::AvatarPartsModel* avatarPartsModel, ::GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel, ::GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManager);
    // public System.Void Disconnect()
    // Offset: 0x13F7660
    void Disconnect();
    // public System.Void Unblock()
    // Offset: 0x13F7694
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x13F76F4
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x13F7754
    void SendInviteResponse(bool accept);
    // public System.Void Block()
    // Offset: 0x13F77B4
    void Block();
    // public System.Void Leave()
    // Offset: 0x13F7814
    void Leave();
    // public System.Void Kick()
    // Offset: 0x13F7818
    void Kick();
    // public System.Void Invite()
    // Offset: 0x13F7878
    void Invite();
    // public System.Void Join(System.String password)
    // Offset: 0x13F78D8
    void Join(::StringW password);
    // public System.Void Join()
    // Offset: 0x13F7938
    void Join();
    // public System.Void SimulateFail()
    // Offset: 0x13F7998
    void SimulateFail();
    // public System.Void SimulateGiveUp()
    // Offset: 0x13F79E8
    void SimulateGiveUp();
    // public System.Void SimulateReturnToMainMenu()
    // Offset: 0x13F7A34
    void SimulateReturnToMainMenu();
  }; // MockPlayer
  #pragma pack(pop)
  static check_size<sizeof(MockPlayer), 232 + sizeof(::GlobalNamespace::IGameplayRpcManager*)> __GlobalNamespace_MockPlayerSizeCheck;
  static_assert(sizeof(MockPlayer) == 0xF0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isReady
// Il2CppName: set_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isMe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_sortIndex
// Il2CppName: get_sortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_sortIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_sortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_autoConnect
// Il2CppName: get_autoConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_autoConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_autoConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_inactiveByDefault
// Il2CppName: get_inactiveByDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_inactiveByDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_inactiveByDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isConnected
// Il2CppName: set_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isConnected)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_multiplayerAvatarData
// Il2CppName: get_multiplayerAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerAvatarData (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_multiplayerAvatarData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_multiplayerAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_multiplayerAvatarData
// Il2CppName: set_multiplayerAvatarData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(::GlobalNamespace::MultiplayerAvatarData)>(&GlobalNamespace::MockPlayer::set_multiplayerAvatarData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MultiplayerAvatarData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_multiplayerAvatarData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isConnectionOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isConnectionOwner
// Il2CppName: set_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isConnectionOwner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_disconnectedReason
// Il2CppName: get_disconnectedReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DisconnectedReason (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_disconnectedReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_disconnectedReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_offsetSyncTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_offsetSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_hasValidLatency
// Il2CppName: get_hasValidLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_hasValidLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_hasValidLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_currentLatency
// Il2CppName: get_currentLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_currentLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_currentLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isKicked
// Il2CppName: get_isKicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isKicked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isKicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isKicked
// Il2CppName: set_isKicked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isKicked)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isKicked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_currentPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_currentPartySize
// Il2CppName: set_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(int)>(&GlobalNamespace::MockPlayer::set_currentPartySize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_selectionMask
// Il2CppName: get_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapLevelSelectionMask (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_selectionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_selectionMask
// Il2CppName: set_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(::GlobalNamespace::BeatmapLevelSelectionMask)>(&GlobalNamespace::MockPlayer::set_selectionMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayServerConfiguration (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_configuration
// Il2CppName: set_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(::GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::MockPlayer::set_configuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isMyPartyOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isMyPartyOwner
// Il2CppName: set_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isMyPartyOwner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_connectedPlayer
// Il2CppName: get_connectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IConnectedPlayer* (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_connectedPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_connectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_canJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_requiresPassword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_requiresPassword
// Il2CppName: set_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_requiresPassword)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isWaitingOnJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isWaitingOnJoin
// Il2CppName: set_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isWaitingOnJoin)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_canInvite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canInvite
// Il2CppName: set_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_canInvite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isWaitingOnInvite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isWaitingOnInvite
// Il2CppName: set_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isWaitingOnInvite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_canKick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canKick
// Il2CppName: set_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_canKick)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_canLeave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canLeave
// Il2CppName: set_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_canLeave)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_canBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canBlock
// Il2CppName: set_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_canBlock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_canUnblock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_canUnblock
// Il2CppName: set_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_canUnblock)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isPlayer
// Il2CppName: get_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isPlayer
// Il2CppName: set_isPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isPlayer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isDedicatedServer
// Il2CppName: get_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isDedicatedServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isDedicatedServer
// Il2CppName: set_isDedicatedServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isDedicatedServer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isDedicatedServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel
// Il2CppName: get_wantsToPlayNextLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_wantsToPlayNextLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_wantsToPlayNextLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel
// Il2CppName: set_wantsToPlayNextLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_wantsToPlayNextLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_wantsToPlayNextLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart
// Il2CppName: get_wasActiveAtLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_wasActiveAtLevelStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_wasActiveAtLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart
// Il2CppName: set_wasActiveAtLevelStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_wasActiveAtLevelStart)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_wasActiveAtLevelStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isActive
// Il2CppName: get_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isActive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isActive
// Il2CppName: set_isActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isActive)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_finishedLevel
// Il2CppName: get_finishedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_finishedLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_finishedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_finishedLevel
// Il2CppName: set_finishedLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_finishedLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_finishedLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::get_isTerminating
// Il2CppName: get_isTerminating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::get_isTerminating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "get_isTerminating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::set_isTerminating
// Il2CppName: set_isTerminating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::set_isTerminating)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "set_isTerminating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SetState
// Il2CppName: SetState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)(::StringW, bool)>(&GlobalNamespace::MockPlayer::SetState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "SetState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::HasState
// Il2CppName: HasState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockPlayer::*)(::StringW)>(&GlobalNamespace::MockPlayer::HasState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "HasState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(::GlobalNamespace::IMultiplayerSessionManager*, ::GlobalNamespace::AvatarPartsModel*, ::GlobalNamespace::BeatmapLevelsModel*, ::GlobalNamespace::NodePoseSyncStateManager*)>(&GlobalNamespace::MockPlayer::Connect)> {
  static const MethodInfo* get() {
    static auto* multiplayerSessionManager = &::il2cpp_utils::GetClassFromName("", "IMultiplayerSessionManager")->byval_arg;
    static auto* avatarPartsModel = &::il2cpp_utils::GetClassFromName("", "AvatarPartsModel")->byval_arg;
    static auto* beatmapLevelsModel = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelsModel")->byval_arg;
    static auto* nodePoseSyncStateManager = &::il2cpp_utils::GetClassFromName("", "NodePoseSyncStateManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerSessionManager, avatarPartsModel, beatmapLevelsModel, nodePoseSyncStateManager});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Disconnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Unblock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::SendJoinResponse)> {
  static const MethodInfo* get() {
    static auto* accept = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accept});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(bool)>(&GlobalNamespace::MockPlayer::SendInviteResponse)> {
  static const MethodInfo* get() {
    static auto* accept = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accept});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Block)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Leave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Kick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Invite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)(::StringW)>(&GlobalNamespace::MockPlayer::Join)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::Join)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SimulateFail
// Il2CppName: SimulateFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::SimulateFail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "SimulateFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SimulateGiveUp
// Il2CppName: SimulateGiveUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::SimulateGiveUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "SimulateGiveUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayer::SimulateReturnToMainMenu
// Il2CppName: SimulateReturnToMainMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockPlayer::*)()>(&GlobalNamespace::MockPlayer::SimulateReturnToMainMenu)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayer*), "SimulateReturnToMainMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
