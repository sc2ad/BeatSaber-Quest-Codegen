// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaBodyPhysics
  class GorillaBodyPhysics;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaBodyPhysics);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaBodyPhysics*, "", "GorillaBodyPhysics");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GorillaBodyPhysics
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaBodyPhysics : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject bodyCollider
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* bodyCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Vector3 bodyColliderOffset
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 bodyColliderOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: bodyColliderOffset and: headsetTransform
    char __padding1[0x4] = {};
    // public UnityEngine.Transform headsetTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* headsetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject bodyCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_bodyCollider();
    // Get instance field reference: public UnityEngine.Vector3 bodyColliderOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyColliderOffset();
    // Get instance field reference: public UnityEngine.Transform headsetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headsetTransform();
    // public System.Void .ctor()
    // Offset: 0xC6761C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaBodyPhysics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaBodyPhysics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaBodyPhysics*, creationType>()));
    }
    // private System.Void FixedUpdate()
    // Offset: 0xC67538
    void FixedUpdate();
  }; // GorillaBodyPhysics
  #pragma pack(pop)
  static check_size<sizeof(GorillaBodyPhysics), 48 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_GorillaBodyPhysicsSizeCheck;
  static_assert(sizeof(GorillaBodyPhysics) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaBodyPhysics::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaBodyPhysics::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaBodyPhysics::*)()>(&GlobalNamespace::GorillaBodyPhysics::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaBodyPhysics*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
