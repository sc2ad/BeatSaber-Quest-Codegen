// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HapticFeedbackController
  class HapticFeedbackController;
  // Forward declaring type: SaberType
  struct SaberType;
}
// Forward declaring namespace: Libraries::HM::HMLib::VR
namespace Libraries::HM::HMLib::VR {
  // Forward declaring type: HapticPresetSO
  class HapticPresetSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteCutHapticEffect
  class NoteCutHapticEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteCutHapticEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteCutHapticEffect*, "", "NoteCutHapticEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: NoteCutHapticEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteCutHapticEffect : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::NoteCutHapticEffect::Type
    struct Type;
    public:
    // private Libraries.HM.HMLib.VR.HapticPresetSO _normalPreset
    // Size: 0x8
    // Offset: 0x18
    ::Libraries::HM::HMLib::VR::HapticPresetSO* normalPreset;
    // Field size check
    static_assert(sizeof(::Libraries::HM::HMLib::VR::HapticPresetSO*) == 0x8);
    // private Libraries.HM.HMLib.VR.HapticPresetSO _shortNormalPreset
    // Size: 0x8
    // Offset: 0x20
    ::Libraries::HM::HMLib::VR::HapticPresetSO* shortNormalPreset;
    // Field size check
    static_assert(sizeof(::Libraries::HM::HMLib::VR::HapticPresetSO*) == 0x8);
    // private Libraries.HM.HMLib.VR.HapticPresetSO _shortWeakPreset
    // Size: 0x8
    // Offset: 0x28
    ::Libraries::HM::HMLib::VR::HapticPresetSO* shortWeakPreset;
    // Field size check
    static_assert(sizeof(::Libraries::HM::HMLib::VR::HapticPresetSO*) == 0x8);
    // [InjectAttribute] Offset: 0x10DF9EC
    // private readonly HapticFeedbackController _hapticFeedbackController
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::HapticFeedbackController* hapticFeedbackController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HapticFeedbackController*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Libraries.HM.HMLib.VR.HapticPresetSO _normalPreset
    [[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& dyn__normalPreset();
    // Get instance field reference: private Libraries.HM.HMLib.VR.HapticPresetSO _shortNormalPreset
    [[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& dyn__shortNormalPreset();
    // Get instance field reference: private Libraries.HM.HMLib.VR.HapticPresetSO _shortWeakPreset
    [[deprecated("Use field access instead!")]] ::Libraries::HM::HMLib::VR::HapticPresetSO*& dyn__shortWeakPreset();
    // Get instance field reference: private readonly HapticFeedbackController _hapticFeedbackController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& dyn__hapticFeedbackController();
    // public System.Void .ctor()
    // Offset: 0x14CE624
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteCutHapticEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutHapticEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteCutHapticEffect*, creationType>()));
    }
    // public System.Void HitNote(SaberType saberType, NoteCutHapticEffect/Type type)
    // Offset: 0x14CD478
    void HitNote(::GlobalNamespace::SaberType saberType, ::GlobalNamespace::NoteCutHapticEffect::Type type);
  }; // NoteCutHapticEffect
  #pragma pack(pop)
  static check_size<sizeof(NoteCutHapticEffect), 48 + sizeof(::GlobalNamespace::HapticFeedbackController*)> __GlobalNamespace_NoteCutHapticEffectSizeCheck;
  static_assert(sizeof(NoteCutHapticEffect) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteCutHapticEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteCutHapticEffect::HitNote
// Il2CppName: HitNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteCutHapticEffect::*)(::GlobalNamespace::SaberType, ::GlobalNamespace::NoteCutHapticEffect::Type)>(&GlobalNamespace::NoteCutHapticEffect::HitNote)> {
  static const MethodInfo* get() {
    static auto* saberType = &::il2cpp_utils::GetClassFromName("", "SaberType")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("", "NoteCutHapticEffect/Type")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutHapticEffect*), "HitNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saberType, type});
  }
};
