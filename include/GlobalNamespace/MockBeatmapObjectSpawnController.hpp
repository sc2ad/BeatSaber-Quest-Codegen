// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnMovementData
  class BeatmapObjectSpawnMovementData;
  // Forward declaring type: NoteLineLayer
  struct NoteLineLayer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MockBeatmapObjectSpawnController
  // [TokenAttribute] Offset: FFFFFFFF
  class MockBeatmapObjectSpawnController : public ::Il2CppObject/*, public GlobalNamespace::IBeatmapObjectSpawnController*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xF04740
    // private System.Single <jumpOffsetY>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    float jumpOffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF04750
    // private readonly System.Single <currentBpm>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    float currentBpm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF04760
    // private readonly System.Single <moveDuration>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float moveDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF04770
    // private readonly System.Single <jumpDuration>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float jumpDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF04780
    // private readonly System.Single <jumpDistance>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    float jumpDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF04790
    // private readonly System.Single <verticalLayerDistance>k__BackingField
    // Size: 0x4
    // Offset: 0x24
    float verticalLayerDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF047A0
    // private readonly System.Single <noteJumpMovementSpeed>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float noteJumpMovementSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF047B0
    // private readonly System.Single <noteLinesDistance>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    float noteLinesDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xF047C0
    // private readonly BeatmapObjectSpawnMovementData <beatmapObjectSpawnMovementData>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnMovementData*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF047D0
    // private System.Action didInitEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* didInitEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // Creating value type constructor for type: MockBeatmapObjectSpawnController
    MockBeatmapObjectSpawnController(float jumpOffsetY_ = {}, float currentBpm_ = {}, float moveDuration_ = {}, float jumpDuration_ = {}, float jumpDistance_ = {}, float verticalLayerDistance_ = {}, float noteJumpMovementSpeed_ = {}, float noteLinesDistance_ = {}, GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData_ = {}, System::Action* didInitEvent_ = {}) noexcept : jumpOffsetY{jumpOffsetY_}, currentBpm{currentBpm_}, moveDuration{moveDuration_}, jumpDuration{jumpDuration_}, jumpDistance{jumpDistance_}, verticalLayerDistance{verticalLayerDistance_}, noteJumpMovementSpeed{noteJumpMovementSpeed_}, noteLinesDistance{noteLinesDistance_}, beatmapObjectSpawnMovementData{beatmapObjectSpawnMovementData_}, didInitEvent{didInitEvent_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBeatmapObjectSpawnController
    operator GlobalNamespace::IBeatmapObjectSpawnController() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBeatmapObjectSpawnController*>(this);
    }
    // Get instance field reference: private System.Single <jumpOffsetY>k__BackingField
    float& dyn_$jumpOffsetY$k__BackingField();
    // Get instance field reference: private readonly System.Single <currentBpm>k__BackingField
    float& dyn_$currentBpm$k__BackingField();
    // Get instance field reference: private readonly System.Single <moveDuration>k__BackingField
    float& dyn_$moveDuration$k__BackingField();
    // Get instance field reference: private readonly System.Single <jumpDuration>k__BackingField
    float& dyn_$jumpDuration$k__BackingField();
    // Get instance field reference: private readonly System.Single <jumpDistance>k__BackingField
    float& dyn_$jumpDistance$k__BackingField();
    // Get instance field reference: private readonly System.Single <verticalLayerDistance>k__BackingField
    float& dyn_$verticalLayerDistance$k__BackingField();
    // Get instance field reference: private readonly System.Single <noteJumpMovementSpeed>k__BackingField
    float& dyn_$noteJumpMovementSpeed$k__BackingField();
    // Get instance field reference: private readonly System.Single <noteLinesDistance>k__BackingField
    float& dyn_$noteLinesDistance$k__BackingField();
    // Get instance field reference: private readonly BeatmapObjectSpawnMovementData <beatmapObjectSpawnMovementData>k__BackingField
    GlobalNamespace::BeatmapObjectSpawnMovementData*& dyn_$beatmapObjectSpawnMovementData$k__BackingField();
    // Get instance field reference: private System.Action didInitEvent
    System::Action*& dyn_didInitEvent();
    // public System.Single get_jumpOffsetY()
    // Offset: 0x1190150
    float get_jumpOffsetY();
    // public System.Void set_jumpOffsetY(System.Single value)
    // Offset: 0x1190158
    void set_jumpOffsetY(float value);
    // public System.Single get_currentBpm()
    // Offset: 0x1190160
    float get_currentBpm();
    // public System.Single get_moveDuration()
    // Offset: 0x1190168
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x1190170
    float get_jumpDuration();
    // public System.Single get_jumpDistance()
    // Offset: 0x1190178
    float get_jumpDistance();
    // public System.Single get_verticalLayerDistance()
    // Offset: 0x1190180
    float get_verticalLayerDistance();
    // public System.Single get_noteJumpMovementSpeed()
    // Offset: 0x1190188
    float get_noteJumpMovementSpeed();
    // public System.Single get_noteLinesDistance()
    // Offset: 0x1190190
    float get_noteLinesDistance();
    // public BeatmapObjectSpawnMovementData get_beatmapObjectSpawnMovementData()
    // Offset: 0x1190198
    GlobalNamespace::BeatmapObjectSpawnMovementData* get_beatmapObjectSpawnMovementData();
    // public System.Boolean get_isInitialized()
    // Offset: 0x11901A0
    bool get_isInitialized();
    // public System.Void add_didInitEvent(System.Action value)
    // Offset: 0x11901A8
    void add_didInitEvent(System::Action* value);
    // public System.Void remove_didInitEvent(System.Action value)
    // Offset: 0x119024C
    void remove_didInitEvent(System::Action* value);
    // public UnityEngine.Vector2 Get2DNoteOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x11902F0
    UnityEngine::Vector2 Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer);
    // public System.Single JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(NoteLineLayer lineLayer, System.Single distanceFromPlayer)
    // Offset: 0x1190350
    float JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer);
    // public System.Void .ctor()
    // Offset: 0x1190358
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockBeatmapObjectSpawnController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MockBeatmapObjectSpawnController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockBeatmapObjectSpawnController*, creationType>()));
    }
  }; // MockBeatmapObjectSpawnController
  #pragma pack(pop)
  static check_size<sizeof(MockBeatmapObjectSpawnController), 56 + sizeof(System::Action*)> __GlobalNamespace_MockBeatmapObjectSpawnControllerSizeCheck;
  static_assert(sizeof(MockBeatmapObjectSpawnController) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MockBeatmapObjectSpawnController*, "", "MockBeatmapObjectSpawnController");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpOffsetY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::set_jumpOffsetY
// Il2CppName: set_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockBeatmapObjectSpawnController::*)(float)>(&GlobalNamespace::MockBeatmapObjectSpawnController::set_jumpOffsetY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "set_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_currentBpm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_moveDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_jumpDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_verticalLayerDistance
// Il2CppName: get_verticalLayerDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_verticalLayerDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_verticalLayerDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_noteJumpMovementSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_noteLinesDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData
// Il2CppName: get_beatmapObjectSpawnMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData* (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockBeatmapObjectSpawnController::*)()>(&GlobalNamespace::MockBeatmapObjectSpawnController::get_isInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockBeatmapObjectSpawnController::*)(System::Action*)>(&GlobalNamespace::MockBeatmapObjectSpawnController::add_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockBeatmapObjectSpawnController::*)(System::Action*)>(&GlobalNamespace::MockBeatmapObjectSpawnController::remove_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (GlobalNamespace::MockBeatmapObjectSpawnController::*)(int, GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::MockBeatmapObjectSpawnController::Get2DNoteOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockBeatmapObjectSpawnController::*)(GlobalNamespace::NoteLineLayer, float)>(&GlobalNamespace::MockBeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* distanceFromPlayer = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockBeatmapObjectSpawnController*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer, distanceFromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockBeatmapObjectSpawnController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
