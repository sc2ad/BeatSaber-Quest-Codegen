// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SimpleShadowController
  class SimpleShadowController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SimpleShadowController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SimpleShadowController*, "", "SimpleShadowController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: SimpleShadowController
  // [TokenAttribute] Offset: FFFFFFFF
  class SimpleShadowController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform _followTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* followTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.SpriteRenderer _spriteRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::SpriteRenderer* spriteRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // [SpaceAttribute] Offset: 0x10B5110
    // private System.Single _distanceScale
    // Size: 0x4
    // Offset: 0x28
    float distanceScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _scale
    // Size: 0x4
    // Offset: 0x2C
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x10B5158
    // private System.Single _alpha
    // Size: 0x4
    // Offset: 0x30
    float alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x10B5190
    // private System.Single _floorYPos
    // Size: 0x4
    // Offset: 0x34
    float floorYPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _floorYPosLocal
    // Size: 0x1
    // Offset: 0x38
    bool floorYPosLocal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: floorYPosLocal and: transform
    char __padding6[0x7] = {};
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform _followTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__followTransform();
    // Get instance field reference: private UnityEngine.SpriteRenderer _spriteRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn__spriteRenderer();
    // Get instance field reference: private System.Single _distanceScale
    [[deprecated("Use field access instead!")]] float& dyn__distanceScale();
    // Get instance field reference: private System.Single _scale
    [[deprecated("Use field access instead!")]] float& dyn__scale();
    // Get instance field reference: private System.Single _alpha
    [[deprecated("Use field access instead!")]] float& dyn__alpha();
    // Get instance field reference: private System.Single _floorYPos
    [[deprecated("Use field access instead!")]] float& dyn__floorYPos();
    // Get instance field reference: private System.Boolean _floorYPosLocal
    [[deprecated("Use field access instead!")]] bool& dyn__floorYPosLocal();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // public System.Void .ctor()
    // Offset: 0x2A3BE5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SimpleShadowController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SimpleShadowController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SimpleShadowController*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x2A3BCC4
    void Start();
    // protected System.Void LateUpdate()
    // Offset: 0x2A3BCEC
    void LateUpdate();
  }; // SimpleShadowController
  #pragma pack(pop)
  static check_size<sizeof(SimpleShadowController), 64 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_SimpleShadowControllerSizeCheck;
  static_assert(sizeof(SimpleShadowController) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SimpleShadowController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SimpleShadowController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleShadowController::*)()>(&GlobalNamespace::SimpleShadowController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleShadowController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SimpleShadowController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SimpleShadowController::*)()>(&GlobalNamespace::SimpleShadowController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SimpleShadowController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
