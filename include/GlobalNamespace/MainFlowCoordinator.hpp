// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: MainMenuViewController
#include "GlobalNamespace/MainMenuViewController.hpp"
// Including type: OptionsViewController
#include "GlobalNamespace/OptionsViewController.hpp"
// Including type: HowToPlayViewController
#include "GlobalNamespace/HowToPlayViewController.hpp"
// Including type: EditAvatarFlowCoordinator
#include "GlobalNamespace/EditAvatarFlowCoordinator.hpp"
// Including type: SettingsFlowCoordinator
#include "GlobalNamespace/SettingsFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MenuLightsPresetSO
  class MenuLightsPresetSO;
  // Forward declaring type: SoloFreePlayFlowCoordinator
  class SoloFreePlayFlowCoordinator;
  // Forward declaring type: PartyFreePlayFlowCoordinator
  class PartyFreePlayFlowCoordinator;
  // Forward declaring type: CampaignFlowCoordinator
  class CampaignFlowCoordinator;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: MultiplayerModeSelectionFlowCoordinator
  class MultiplayerModeSelectionFlowCoordinator;
  // Forward declaring type: LevelSelectionFlowCoordinator
  class LevelSelectionFlowCoordinator;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: PlayerOptionsViewController
  class PlayerOptionsViewController;
  // Forward declaring type: PlayerStatisticsViewController
  class PlayerStatisticsViewController;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: MenuLightsManager
  class MenuLightsManager;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: MenuTransitionsHelper
  class MenuTransitionsHelper;
  // Forward declaring type: AppStaticSettingsSO
  class AppStaticSettingsSO;
  // Forward declaring type: MenuDestination
  class MenuDestination;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x150
  #pragma pack(push, 1)
  // Autogenerated type: MainFlowCoordinator
  // [TokenAttribute] Offset: FFFFFFFF
  class MainFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::MainFlowCoordinator::$ProcessMenuDestinationRequestAfterFrameCoroutine$d__40
    class $ProcessMenuDestinationRequestAfterFrameCoroutine$d__40;
    // private MenuLightsPresetSO _defaultLightsPreset
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::MenuLightsPresetSO* defaultLightsPreset;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuLightsPresetSO*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE2C
    // private readonly SoloFreePlayFlowCoordinator _soloFreePlayFlowCoordinator
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::SoloFreePlayFlowCoordinator* soloFreePlayFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SoloFreePlayFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE3C
    // private readonly PartyFreePlayFlowCoordinator _partyFreePlayFlowCoordinator
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::PartyFreePlayFlowCoordinator* partyFreePlayFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PartyFreePlayFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE4C
    // private readonly CampaignFlowCoordinator _campaignFlowCoordinator
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::CampaignFlowCoordinator* campaignFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CampaignFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE5C
    // private readonly SettingsFlowCoordinator _settingsFlowCoordinator
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SettingsFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE6C
    // private readonly MultiplayerModeSelectionFlowCoordinator _multiplayerModeSelectionFlowCoordinator
    // Size: 0x8
    // Offset: 0xD0
    GlobalNamespace::MultiplayerModeSelectionFlowCoordinator* multiplayerModeSelectionFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE7C
    // private readonly EditAvatarFlowCoordinator _editAvatarFlowCoordinator
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::EditAvatarFlowCoordinator* editAvatarFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EditAvatarFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE8C
    // private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Size: 0x8
    // Offset: 0xE0
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SimpleDialogPromptViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DE9C
    // private readonly MainMenuViewController _mainMenuViewController
    // Size: 0x8
    // Offset: 0xE8
    GlobalNamespace::MainMenuViewController* mainMenuViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MainMenuViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DEAC
    // private readonly HowToPlayViewController _howToPlayViewController
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::HowToPlayViewController* howToPlayViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HowToPlayViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DEBC
    // private readonly PlayerOptionsViewController _playerOptionsViewController
    // Size: 0x8
    // Offset: 0xF8
    GlobalNamespace::PlayerOptionsViewController* playerOptionsViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerOptionsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DECC
    // private readonly OptionsViewController _optionsViewController
    // Size: 0x8
    // Offset: 0x100
    GlobalNamespace::OptionsViewController* optionsViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OptionsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DEDC
    // private readonly PlayerStatisticsViewController _playerStatisticsViewController
    // Size: 0x8
    // Offset: 0x108
    GlobalNamespace::PlayerStatisticsViewController* playerStatisticsViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerStatisticsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DEEC
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x110
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DEFC
    // private readonly MenuLightsManager _menuLightsManager
    // Size: 0x8
    // Offset: 0x118
    GlobalNamespace::MenuLightsManager* menuLightsManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuLightsManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DF0C
    // private readonly FadeInOutController _fadeInOut
    // Size: 0x8
    // Offset: 0x120
    GlobalNamespace::FadeInOutController* fadeInOut;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DF1C
    // private readonly BeatmapLevelsModel _beatmapLevelsModel
    // Size: 0x8
    // Offset: 0x128
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DF2C
    // private readonly MenuTransitionsHelper _menuTransitionsHelper
    // Size: 0x8
    // Offset: 0x130
    GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuTransitionsHelper*) == 0x8);
    // [InjectAttribute] Offset: 0xF0DF3C
    // private readonly AppStaticSettingsSO _appStaticSettings
    // Size: 0x8
    // Offset: 0x138
    GlobalNamespace::AppStaticSettingsSO* appStaticSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AppStaticSettingsSO*) == 0x8);
    // [InjectOptionalAttribute] Offset: 0xF0DF4C
    // private MenuDestination _menuDestinationRequest
    // Size: 0x8
    // Offset: 0x140
    GlobalNamespace::MenuDestination* menuDestinationRequest;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MenuDestination*) == 0x8);
    // private HMUI.FlowCoordinator _afterDialogPromptFlowCoordinator
    // Size: 0x8
    // Offset: 0x148
    HMUI::FlowCoordinator* afterDialogPromptFlowCoordinator;
    // Field size check
    static_assert(sizeof(HMUI::FlowCoordinator*) == 0x8);
    // Creating value type constructor for type: MainFlowCoordinator
    MainFlowCoordinator(GlobalNamespace::MenuLightsPresetSO* defaultLightsPreset_ = {}, GlobalNamespace::SoloFreePlayFlowCoordinator* soloFreePlayFlowCoordinator_ = {}, GlobalNamespace::PartyFreePlayFlowCoordinator* partyFreePlayFlowCoordinator_ = {}, GlobalNamespace::CampaignFlowCoordinator* campaignFlowCoordinator_ = {}, GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator_ = {}, GlobalNamespace::MultiplayerModeSelectionFlowCoordinator* multiplayerModeSelectionFlowCoordinator_ = {}, GlobalNamespace::EditAvatarFlowCoordinator* editAvatarFlowCoordinator_ = {}, GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController_ = {}, GlobalNamespace::MainMenuViewController* mainMenuViewController_ = {}, GlobalNamespace::HowToPlayViewController* howToPlayViewController_ = {}, GlobalNamespace::PlayerOptionsViewController* playerOptionsViewController_ = {}, GlobalNamespace::OptionsViewController* optionsViewController_ = {}, GlobalNamespace::PlayerStatisticsViewController* playerStatisticsViewController_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::MenuLightsManager* menuLightsManager_ = {}, GlobalNamespace::FadeInOutController* fadeInOut_ = {}, GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel_ = {}, GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper_ = {}, GlobalNamespace::AppStaticSettingsSO* appStaticSettings_ = {}, GlobalNamespace::MenuDestination* menuDestinationRequest_ = {}, HMUI::FlowCoordinator* afterDialogPromptFlowCoordinator_ = {}) noexcept : defaultLightsPreset{defaultLightsPreset_}, soloFreePlayFlowCoordinator{soloFreePlayFlowCoordinator_}, partyFreePlayFlowCoordinator{partyFreePlayFlowCoordinator_}, campaignFlowCoordinator{campaignFlowCoordinator_}, settingsFlowCoordinator{settingsFlowCoordinator_}, multiplayerModeSelectionFlowCoordinator{multiplayerModeSelectionFlowCoordinator_}, editAvatarFlowCoordinator{editAvatarFlowCoordinator_}, simpleDialogPromptViewController{simpleDialogPromptViewController_}, mainMenuViewController{mainMenuViewController_}, howToPlayViewController{howToPlayViewController_}, playerOptionsViewController{playerOptionsViewController_}, optionsViewController{optionsViewController_}, playerStatisticsViewController{playerStatisticsViewController_}, playerDataModel{playerDataModel_}, menuLightsManager{menuLightsManager_}, fadeInOut{fadeInOut_}, beatmapLevelsModel{beatmapLevelsModel_}, menuTransitionsHelper{menuTransitionsHelper_}, appStaticSettings{appStaticSettings_}, menuDestinationRequest{menuDestinationRequest_}, afterDialogPromptFlowCoordinator{afterDialogPromptFlowCoordinator_} {}
    // Get static field: static private System.Boolean _startWithSettings
    static bool _get__startWithSettings();
    // Set static field: static private System.Boolean _startWithSettings
    static void _set__startWithSettings(bool value);
    // Get instance field reference: private MenuLightsPresetSO _defaultLightsPreset
    GlobalNamespace::MenuLightsPresetSO*& dyn__defaultLightsPreset();
    // Get instance field reference: private readonly SoloFreePlayFlowCoordinator _soloFreePlayFlowCoordinator
    GlobalNamespace::SoloFreePlayFlowCoordinator*& dyn__soloFreePlayFlowCoordinator();
    // Get instance field reference: private readonly PartyFreePlayFlowCoordinator _partyFreePlayFlowCoordinator
    GlobalNamespace::PartyFreePlayFlowCoordinator*& dyn__partyFreePlayFlowCoordinator();
    // Get instance field reference: private readonly CampaignFlowCoordinator _campaignFlowCoordinator
    GlobalNamespace::CampaignFlowCoordinator*& dyn__campaignFlowCoordinator();
    // Get instance field reference: private readonly SettingsFlowCoordinator _settingsFlowCoordinator
    GlobalNamespace::SettingsFlowCoordinator*& dyn__settingsFlowCoordinator();
    // Get instance field reference: private readonly MultiplayerModeSelectionFlowCoordinator _multiplayerModeSelectionFlowCoordinator
    GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*& dyn__multiplayerModeSelectionFlowCoordinator();
    // Get instance field reference: private readonly EditAvatarFlowCoordinator _editAvatarFlowCoordinator
    GlobalNamespace::EditAvatarFlowCoordinator*& dyn__editAvatarFlowCoordinator();
    // Get instance field reference: private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    GlobalNamespace::SimpleDialogPromptViewController*& dyn__simpleDialogPromptViewController();
    // Get instance field reference: private readonly MainMenuViewController _mainMenuViewController
    GlobalNamespace::MainMenuViewController*& dyn__mainMenuViewController();
    // Get instance field reference: private readonly HowToPlayViewController _howToPlayViewController
    GlobalNamespace::HowToPlayViewController*& dyn__howToPlayViewController();
    // Get instance field reference: private readonly PlayerOptionsViewController _playerOptionsViewController
    GlobalNamespace::PlayerOptionsViewController*& dyn__playerOptionsViewController();
    // Get instance field reference: private readonly OptionsViewController _optionsViewController
    GlobalNamespace::OptionsViewController*& dyn__optionsViewController();
    // Get instance field reference: private readonly PlayerStatisticsViewController _playerStatisticsViewController
    GlobalNamespace::PlayerStatisticsViewController*& dyn__playerStatisticsViewController();
    // Get instance field reference: private readonly PlayerDataModel _playerDataModel
    GlobalNamespace::PlayerDataModel*& dyn__playerDataModel();
    // Get instance field reference: private readonly MenuLightsManager _menuLightsManager
    GlobalNamespace::MenuLightsManager*& dyn__menuLightsManager();
    // Get instance field reference: private readonly FadeInOutController _fadeInOut
    GlobalNamespace::FadeInOutController*& dyn__fadeInOut();
    // Get instance field reference: private readonly BeatmapLevelsModel _beatmapLevelsModel
    GlobalNamespace::BeatmapLevelsModel*& dyn__beatmapLevelsModel();
    // Get instance field reference: private readonly MenuTransitionsHelper _menuTransitionsHelper
    GlobalNamespace::MenuTransitionsHelper*& dyn__menuTransitionsHelper();
    // Get instance field reference: private readonly AppStaticSettingsSO _appStaticSettings
    GlobalNamespace::AppStaticSettingsSO*& dyn__appStaticSettings();
    // Get instance field reference: private MenuDestination _menuDestinationRequest
    GlobalNamespace::MenuDestination*& dyn__menuDestinationRequest();
    // Get instance field reference: private HMUI.FlowCoordinator _afterDialogPromptFlowCoordinator
    HMUI::FlowCoordinator*& dyn__afterDialogPromptFlowCoordinator();
    // private System.Void PresentFlowCoordinatorOrAskForTutorial(HMUI.FlowCoordinator flowCoordinator)
    // Offset: 0x1261548
    void PresentFlowCoordinatorOrAskForTutorial(HMUI::FlowCoordinator* flowCoordinator);
    // private System.Void HandleMainMenuViewControllerDidFinish(MainMenuViewController viewController, MainMenuViewController/MenuButton subMenuType)
    // Offset: 0x12616F4
    void HandleMainMenuViewControllerDidFinish(GlobalNamespace::MainMenuViewController* viewController, GlobalNamespace::MainMenuViewController::MenuButton subMenuType);
    // private System.Void HandleOptionsViewControllerDidFinish(OptionsViewController/OptionsButton optionsType)
    // Offset: 0x12619A4
    void HandleOptionsViewControllerDidFinish(GlobalNamespace::OptionsViewController::OptionsButton optionsType);
    // private System.Void HandlePlayerOptionsViewControllerDidFinish(HMUI.ViewController viewController)
    // Offset: 0x1261A90
    void HandlePlayerOptionsViewControllerDidFinish(HMUI::ViewController* viewController);
    // private System.Void HandleHowToPlayViewControllerDidFinish(HowToPlayViewController/HowToPlayOptions howToPlayOptions)
    // Offset: 0x1261AA4
    void HandleHowToPlayViewControllerDidFinish(GlobalNamespace::HowToPlayViewController::HowToPlayOptions howToPlayOptions);
    // private System.Void HandleCampaignFlowCoordinatorDidFinish(CampaignFlowCoordinator flowCoordinator)
    // Offset: 0x1261B1C
    void HandleCampaignFlowCoordinatorDidFinish(GlobalNamespace::CampaignFlowCoordinator* flowCoordinator);
    // private System.Void HandleEditAvatarFlowCoordinatorDidFinish(EditAvatarFlowCoordinator flowCoordinator, EditAvatarFlowCoordinator/EditAvatarType editAvatarType)
    // Offset: 0x1261B30
    void HandleEditAvatarFlowCoordinatorDidFinish(GlobalNamespace::EditAvatarFlowCoordinator* flowCoordinator, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType editAvatarType);
    // private System.Void HandleSoloFreePlayFlowCoordinatorDidFinish(LevelSelectionFlowCoordinator flowCoordinator)
    // Offset: 0x1261B8C
    void HandleSoloFreePlayFlowCoordinatorDidFinish(GlobalNamespace::LevelSelectionFlowCoordinator* flowCoordinator);
    // private System.Void HandlePartyFreePlayFlowCoordinatorDidFinish(LevelSelectionFlowCoordinator flowCoordinator)
    // Offset: 0x1261BA0
    void HandlePartyFreePlayFlowCoordinatorDidFinish(GlobalNamespace::LevelSelectionFlowCoordinator* flowCoordinator);
    // private System.Void HandleSettingsFlowCoordinatorDidFinish(SettingsFlowCoordinator settingsFlowCoordinator, SettingsFlowCoordinator/FinishAction finishAction)
    // Offset: 0x1261BB4
    void HandleSettingsFlowCoordinatorDidFinish(GlobalNamespace::SettingsFlowCoordinator* settingsFlowCoordinator, GlobalNamespace::SettingsFlowCoordinator::FinishAction finishAction);
    // private System.Void HandleMultiplayerModeSelectionFlowCoordinatorDidFinish(MultiplayerModeSelectionFlowCoordinator multiplayerModeSelectionFlowCoordinator)
    // Offset: 0x1261C5C
    void HandleMultiplayerModeSelectionFlowCoordinatorDidFinish(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator* multiplayerModeSelectionFlowCoordinator);
    // private System.Void HandleMainMenuViewControllerMusicPackPromoButtonWasPressed(IBeatmapLevelPack beatmapLevelPack)
    // Offset: 0x1261C70
    void HandleMainMenuViewControllerMusicPackPromoButtonWasPressed(GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack);
    // private System.Void ProcessMenuDestinationRequest(MenuDestination destination)
    // Offset: 0x1261CF8
    void ProcessMenuDestinationRequest(GlobalNamespace::MenuDestination* destination);
    // private System.Void PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator()
    // Offset: 0x1261F48
    void PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator();
    // private System.Collections.IEnumerator ProcessMenuDestinationRequestAfterFrameCoroutine(MenuDestination destination)
    // Offset: 0x1260D64
    System::Collections::IEnumerator* ProcessMenuDestinationRequestAfterFrameCoroutine(GlobalNamespace::MenuDestination* destination);
    // private System.Void <PresentFlowCoordinatorOrAskForTutorial>b__26_0(System.Int32 buttonNumber)
    // Offset: 0x1262208
    void $PresentFlowCoordinatorOrAskForTutorial$b__26_0(int buttonNumber);
    // private System.Void <PresentFlowCoordinatorOrAskForTutorial>b__26_1()
    // Offset: 0x12622C8
    void $PresentFlowCoordinatorOrAskForTutorial$b__26_1();
    // private System.Void <HandleMainMenuViewControllerDidFinish>b__27_0()
    // Offset: 0x12622E0
    void $HandleMainMenuViewControllerDidFinish$b__27_0();
    // private System.Void <HandleMainMenuViewControllerDidFinish>b__27_1(System.Int32 buttonNumber)
    // Offset: 0x12622FC
    void $HandleMainMenuViewControllerDidFinish$b__27_1(int buttonNumber);
    // private System.Void <PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0(System.Int32 buttonNumber)
    // Offset: 0x12623BC
    void $PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator$b__39_0(int buttonNumber);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1260830
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x1260DE0
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void InitialViewControllerWasPresented()
    // Offset: 0x1260FE8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::InitialViewControllerWasPresented()
    void InitialViewControllerWasPresented();
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1261068
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0x1262124
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // public System.Void .ctor()
    // Offset: 0x1262200
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainFlowCoordinator*, creationType>()));
    }
  }; // MainFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(MainFlowCoordinator), 328 + sizeof(HMUI::FlowCoordinator*)> __GlobalNamespace_MainFlowCoordinatorSizeCheck;
  static_assert(sizeof(MainFlowCoordinator) == 0x150);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MainFlowCoordinator*, "", "MainFlowCoordinator");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::PresentFlowCoordinatorOrAskForTutorial
// Il2CppName: PresentFlowCoordinatorOrAskForTutorial
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(HMUI::FlowCoordinator*)>(&GlobalNamespace::MainFlowCoordinator::PresentFlowCoordinatorOrAskForTutorial)> {
  static const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("HMUI", "FlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "PresentFlowCoordinatorOrAskForTutorial", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerDidFinish
// Il2CppName: HandleMainMenuViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::MainMenuViewController*, GlobalNamespace::MainMenuViewController::MenuButton)>(&GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("", "MainMenuViewController")->byval_arg;
    static auto* subMenuType = &::il2cpp_utils::GetClassFromName("", "MainMenuViewController/MenuButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleMainMenuViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, subMenuType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleOptionsViewControllerDidFinish
// Il2CppName: HandleOptionsViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::OptionsViewController::OptionsButton)>(&GlobalNamespace::MainFlowCoordinator::HandleOptionsViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* optionsType = &::il2cpp_utils::GetClassFromName("", "OptionsViewController/OptionsButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleOptionsViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{optionsType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandlePlayerOptionsViewControllerDidFinish
// Il2CppName: HandlePlayerOptionsViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(HMUI::ViewController*)>(&GlobalNamespace::MainFlowCoordinator::HandlePlayerOptionsViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandlePlayerOptionsViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleHowToPlayViewControllerDidFinish
// Il2CppName: HandleHowToPlayViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::HowToPlayViewController::HowToPlayOptions)>(&GlobalNamespace::MainFlowCoordinator::HandleHowToPlayViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* howToPlayOptions = &::il2cpp_utils::GetClassFromName("", "HowToPlayViewController/HowToPlayOptions")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleHowToPlayViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{howToPlayOptions});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleCampaignFlowCoordinatorDidFinish
// Il2CppName: HandleCampaignFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::CampaignFlowCoordinator*)>(&GlobalNamespace::MainFlowCoordinator::HandleCampaignFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("", "CampaignFlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleCampaignFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleEditAvatarFlowCoordinatorDidFinish
// Il2CppName: HandleEditAvatarFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::EditAvatarFlowCoordinator*, GlobalNamespace::EditAvatarFlowCoordinator::EditAvatarType)>(&GlobalNamespace::MainFlowCoordinator::HandleEditAvatarFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("", "EditAvatarFlowCoordinator")->byval_arg;
    static auto* editAvatarType = &::il2cpp_utils::GetClassFromName("", "EditAvatarFlowCoordinator/EditAvatarType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleEditAvatarFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator, editAvatarType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleSoloFreePlayFlowCoordinatorDidFinish
// Il2CppName: HandleSoloFreePlayFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator*)>(&GlobalNamespace::MainFlowCoordinator::HandleSoloFreePlayFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("", "LevelSelectionFlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleSoloFreePlayFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandlePartyFreePlayFlowCoordinatorDidFinish
// Il2CppName: HandlePartyFreePlayFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::LevelSelectionFlowCoordinator*)>(&GlobalNamespace::MainFlowCoordinator::HandlePartyFreePlayFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* flowCoordinator = &::il2cpp_utils::GetClassFromName("", "LevelSelectionFlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandlePartyFreePlayFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flowCoordinator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleSettingsFlowCoordinatorDidFinish
// Il2CppName: HandleSettingsFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::SettingsFlowCoordinator*, GlobalNamespace::SettingsFlowCoordinator::FinishAction)>(&GlobalNamespace::MainFlowCoordinator::HandleSettingsFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* settingsFlowCoordinator = &::il2cpp_utils::GetClassFromName("", "SettingsFlowCoordinator")->byval_arg;
    static auto* finishAction = &::il2cpp_utils::GetClassFromName("", "SettingsFlowCoordinator/FinishAction")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleSettingsFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settingsFlowCoordinator, finishAction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleMultiplayerModeSelectionFlowCoordinatorDidFinish
// Il2CppName: HandleMultiplayerModeSelectionFlowCoordinatorDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::MultiplayerModeSelectionFlowCoordinator*)>(&GlobalNamespace::MainFlowCoordinator::HandleMultiplayerModeSelectionFlowCoordinatorDidFinish)> {
  static const MethodInfo* get() {
    static auto* multiplayerModeSelectionFlowCoordinator = &::il2cpp_utils::GetClassFromName("", "MultiplayerModeSelectionFlowCoordinator")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleMultiplayerModeSelectionFlowCoordinatorDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerModeSelectionFlowCoordinator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerMusicPackPromoButtonWasPressed
// Il2CppName: HandleMainMenuViewControllerMusicPackPromoButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::IBeatmapLevelPack*)>(&GlobalNamespace::MainFlowCoordinator::HandleMainMenuViewControllerMusicPackPromoButtonWasPressed)> {
  static const MethodInfo* get() {
    static auto* beatmapLevelPack = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "HandleMainMenuViewControllerMusicPackPromoButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevelPack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequest
// Il2CppName: ProcessMenuDestinationRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::MenuDestination*)>(&GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequest)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("", "MenuDestination")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "ProcessMenuDestinationRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator
// Il2CppName: PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)()>(&GlobalNamespace::MainFlowCoordinator::PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequestAfterFrameCoroutine
// Il2CppName: ProcessMenuDestinationRequestAfterFrameCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (GlobalNamespace::MainFlowCoordinator::*)(GlobalNamespace::MenuDestination*)>(&GlobalNamespace::MainFlowCoordinator::ProcessMenuDestinationRequestAfterFrameCoroutine)> {
  static const MethodInfo* get() {
    static auto* destination = &::il2cpp_utils::GetClassFromName("", "MenuDestination")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "ProcessMenuDestinationRequestAfterFrameCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{destination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_0
// Il2CppName: <PresentFlowCoordinatorOrAskForTutorial>b__26_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(int)>(&GlobalNamespace::MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_0)> {
  static const MethodInfo* get() {
    static auto* buttonNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "<PresentFlowCoordinatorOrAskForTutorial>b__26_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonNumber});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_1
// Il2CppName: <PresentFlowCoordinatorOrAskForTutorial>b__26_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)()>(&GlobalNamespace::MainFlowCoordinator::$PresentFlowCoordinatorOrAskForTutorial$b__26_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "<PresentFlowCoordinatorOrAskForTutorial>b__26_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_0
// Il2CppName: <HandleMainMenuViewControllerDidFinish>b__27_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)()>(&GlobalNamespace::MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "<HandleMainMenuViewControllerDidFinish>b__27_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_1
// Il2CppName: <HandleMainMenuViewControllerDidFinish>b__27_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(int)>(&GlobalNamespace::MainFlowCoordinator::$HandleMainMenuViewControllerDidFinish$b__27_1)> {
  static const MethodInfo* get() {
    static auto* buttonNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "<HandleMainMenuViewControllerDidFinish>b__27_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonNumber});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::$PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator$b__39_0
// Il2CppName: <PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(int)>(&GlobalNamespace::MainFlowCoordinator::$PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator$b__39_0)> {
  static const MethodInfo* get() {
    static auto* buttonNumber = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "<PresentMultiplayerModeSelectionFlowCoordinatorWithDisclaimerAndAvatarCreator>b__39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{buttonNumber});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(bool, bool, bool)>(&GlobalNamespace::MainFlowCoordinator::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::TopViewControllerWillChange
// Il2CppName: TopViewControllerWillChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(HMUI::ViewController*, HMUI::ViewController*, HMUI::ViewController::AnimationType)>(&GlobalNamespace::MainFlowCoordinator::TopViewControllerWillChange)> {
  static const MethodInfo* get() {
    static auto* oldViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* newViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    static auto* animationType = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController/AnimationType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "TopViewControllerWillChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldViewController, newViewController, animationType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::InitialViewControllerWasPresented
// Il2CppName: InitialViewControllerWasPresented
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)()>(&GlobalNamespace::MainFlowCoordinator::InitialViewControllerWasPresented)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "InitialViewControllerWasPresented", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(bool, bool)>(&GlobalNamespace::MainFlowCoordinator::DidDeactivate)> {
  static const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::BackButtonWasPressed
// Il2CppName: BackButtonWasPressed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainFlowCoordinator::*)(HMUI::ViewController*)>(&GlobalNamespace::MainFlowCoordinator::BackButtonWasPressed)> {
  static const MethodInfo* get() {
    static auto* topViewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainFlowCoordinator*), "BackButtonWasPressed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{topViewController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainFlowCoordinator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
