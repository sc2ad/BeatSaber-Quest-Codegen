// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ParticleSystemEmitEventEffect
#include "GlobalNamespace/ParticleSystemEmitEventEffect.hpp"
// Including type: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior
#include "GlobalNamespace/ParticleSystemEmitEventEffect_ParticleSystemEmitBehavior.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: TickableManager
  class TickableManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior*, "", "ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  class ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior : public ::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior/*, public ::Zenject::ITickable*/ {
    public:
    public:
    // private readonly Zenject.TickableManager _tickableManager
    // Size: 0x8
    // Offset: 0x40
    ::Zenject::TickableManager* tickableManager;
    // Field size check
    static_assert(sizeof(::Zenject::TickableManager*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Zenject::ITickable
    operator ::Zenject::ITickable() noexcept {
      return *reinterpret_cast<::Zenject::ITickable*>(this);
    }
    // Creating interface conversion operator: i_ITickable
    inline ::Zenject::ITickable* i_ITickable() noexcept {
      return reinterpret_cast<::Zenject::ITickable*>(this);
    }
    // Creating conversion operator: operator ::Zenject::TickableManager*
    constexpr operator ::Zenject::TickableManager*() const noexcept {
      return tickableManager;
    }
    // Get instance field reference: private readonly Zenject.TickableManager _tickableManager
    [[deprecated("Use field access instead!")]] ::Zenject::TickableManager*& dyn__tickableManager();
    // public System.Void .ctor(BasicBeatmapEventType beatmapEvent, UnityEngine.Transform particleSystemParentTransform, System.Int32 particleSystemMaxSpawnedSystems, IAudioTimeSource audioTimeSource, BeatmapCallbacksController beatmapCallbacksController, ParticleSystemEventController/Pool particleSystemEventControllerPool, Zenject.TickableManager tickableManager)
    // Offset: 0x1353AF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior* New_ctor(::GlobalNamespace::BasicBeatmapEventType beatmapEvent, ::UnityEngine::Transform* particleSystemParentTransform, int particleSystemMaxSpawnedSystems, ::GlobalNamespace::IAudioTimeSource* audioTimeSource, ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController, ::GlobalNamespace::ParticleSystemEventController::Pool* particleSystemEventControllerPool, ::Zenject::TickableManager* tickableManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior*, creationType>(beatmapEvent, particleSystemParentTransform, particleSystemMaxSpawnedSystems, audioTimeSource, beatmapCallbacksController, particleSystemEventControllerPool, tickableManager)));
    }
    // public System.Void Tick()
    // Offset: 0x1353CAC
    void Tick();
    // public override System.Void Dispose()
    // Offset: 0x1354064
    // Implemented from: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior
    // Base method: System.Void ParticleSystemEmitBehavior::Dispose()
    void Dispose();
  }; // ParticleSystemEmitEventEffect/BeatmapEditorParticleSystemEmitBehavior
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior), 64 + sizeof(::Zenject::TickableManager*)> __GlobalNamespace_ParticleSystemEmitEventEffect_BeatmapEditorParticleSystemEmitBehaviorSizeCheck;
  static_assert(sizeof(ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Tick
// Il2CppName: Tick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::*)()>(&GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Tick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior*), "Tick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::*)()>(&GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ParticleSystemEmitEventEffect::BeatmapEditorParticleSystemEmitBehavior*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
