// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberTypeObject
  class SaberTypeObject;
  // Forward declaring type: SaberMovementData
  class SaberMovementData;
  // Forward declaring type: SaberType
  struct SaberType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Saber
  class Saber;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Saber);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Saber*, "", "Saber");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: Saber
  // [TokenAttribute] Offset: FFFFFFFF
  class Saber : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform _saberBladeTopTransform
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* saberBladeTopTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _saberBladeBottomTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* saberBladeBottomTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _handleTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* handleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private SaberTypeObject _saberType
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SaberTypeObject* saberType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaberTypeObject*) == 0x8);
    // private readonly SaberMovementData _movementData
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::SaberMovementData* movementData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaberMovementData*) == 0x8);
    // private UnityEngine.Vector3 _saberBladeTopPos
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 saberBladeTopPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _saberBladeBottomPos
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 saberBladeBottomPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _handlePos
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 handlePos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _handleRot
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Quaternion handleRot;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform _saberBladeTopTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__saberBladeTopTransform();
    // Get instance field reference: private UnityEngine.Transform _saberBladeBottomTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__saberBladeBottomTransform();
    // Get instance field reference: private UnityEngine.Transform _handleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__handleTransform();
    // Get instance field reference: private SaberTypeObject _saberType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberTypeObject*& dyn__saberType();
    // Get instance field reference: private readonly SaberMovementData _movementData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberMovementData*& dyn__movementData();
    // Get instance field reference: private UnityEngine.Vector3 _saberBladeTopPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__saberBladeTopPos();
    // Get instance field reference: private UnityEngine.Vector3 _saberBladeBottomPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__saberBladeBottomPos();
    // Get instance field reference: private UnityEngine.Vector3 _handlePos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__handlePos();
    // Get instance field reference: private UnityEngine.Quaternion _handleRot
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__handleRot();
    // public SaberType get_saberType()
    // Offset: 0x1455A64
    ::GlobalNamespace::SaberType get_saberType();
    // public UnityEngine.Vector3 get_saberBladeTopPos()
    // Offset: 0x1455A80
    ::UnityEngine::Vector3 get_saberBladeTopPos();
    // public UnityEngine.Vector3 get_saberBladeBottomPos()
    // Offset: 0x1455A8C
    ::UnityEngine::Vector3 get_saberBladeBottomPos();
    // public UnityEngine.Vector3 get_handlePos()
    // Offset: 0x1455A98
    ::UnityEngine::Vector3 get_handlePos();
    // public UnityEngine.Quaternion get_handleRot()
    // Offset: 0x1455AA4
    ::UnityEngine::Quaternion get_handleRot();
    // public System.Single get_bladeSpeed()
    // Offset: 0x1455AB0
    float get_bladeSpeed();
    // public SaberMovementData get_movementData()
    // Offset: 0x1455ACC
    ::GlobalNamespace::SaberMovementData* get_movementData();
    // public System.Void .ctor()
    // Offset: 0x1456158
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Saber* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Saber::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Saber*, creationType>()));
    }
    // public System.Void ManualUpdate()
    // Offset: 0x1455AD4
    void ManualUpdate();
    // public System.Void OverridePositionAndRotation(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x14560DC
    void OverridePositionAndRotation(::UnityEngine::Vector3 pos, ::UnityEngine::Quaternion rot);
  }; // Saber
  #pragma pack(pop)
  static check_size<sizeof(Saber), 100 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_SaberSizeCheck;
  static_assert(sizeof(Saber) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_saberType
// Il2CppName: get_saberType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SaberType (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_saberType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_saberType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_saberBladeTopPos
// Il2CppName: get_saberBladeTopPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_saberBladeTopPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_saberBladeTopPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_saberBladeBottomPos
// Il2CppName: get_saberBladeBottomPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_saberBladeBottomPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_saberBladeBottomPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_handlePos
// Il2CppName: get_handlePos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_handlePos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_handlePos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_handleRot
// Il2CppName: get_handleRot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_handleRot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_handleRot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_bladeSpeed
// Il2CppName: get_bladeSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_bladeSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_bladeSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::get_movementData
// Il2CppName: get_movementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SaberMovementData* (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::get_movementData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "get_movementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Saber::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Saber::*)()>(&GlobalNamespace::Saber::ManualUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Saber::OverridePositionAndRotation
// Il2CppName: OverridePositionAndRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Saber::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::Saber::OverridePositionAndRotation)> {
  static const MethodInfo* get() {
    static auto* pos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rot = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Saber*), "OverridePositionAndRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pos, rot});
  }
};
