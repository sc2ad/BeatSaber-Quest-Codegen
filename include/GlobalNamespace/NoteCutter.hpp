// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Saber
  class Saber;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteCutter
  class NoteCutter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteCutter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteCutter*, "", "NoteCutter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: NoteCutter
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteCutter : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::NoteCutter::CuttableBySaberSortParams
    class CuttableBySaberSortParams;
    // Nested type: ::GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer
    class CuttableBySaberSortParamsComparer;
    public:
    // private readonly UnityEngine.Collider[] _colliders
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::UnityEngine::Collider*> colliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private readonly NoteCutter/CuttableBySaberSortParams[] _cuttableBySaberSortParams
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::NoteCutter::CuttableBySaberSortParams*> cuttableBySaberSortParams;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::NoteCutter::CuttableBySaberSortParams*>) == 0x8);
    // private readonly NoteCutter/CuttableBySaberSortParamsComparer _comparer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer* comparer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer*) == 0x8);
    public:
    // static field const value: static private System.Int32 kMaxNumberOfColliders
    static constexpr const int kMaxNumberOfColliders = 16;
    // Get static field: static private System.Int32 kMaxNumberOfColliders
    static int _get_kMaxNumberOfColliders();
    // Set static field: static private System.Int32 kMaxNumberOfColliders
    static void _set_kMaxNumberOfColliders(int value);
    // Get instance field reference: private readonly UnityEngine.Collider[] _colliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn__colliders();
    // Get instance field reference: private readonly NoteCutter/CuttableBySaberSortParams[] _cuttableBySaberSortParams
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::NoteCutter::CuttableBySaberSortParams*>& dyn__cuttableBySaberSortParams();
    // Get instance field reference: private readonly NoteCutter/CuttableBySaberSortParamsComparer _comparer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer*& dyn__comparer();
    // public System.Void .ctor()
    // Offset: 0x150F9C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteCutter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteCutter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteCutter*, creationType>()));
    }
    // public System.Void Cut(Saber saber)
    // Offset: 0x150FAF8
    void Cut(::GlobalNamespace::Saber* saber);
  }; // NoteCutter
  #pragma pack(pop)
  static check_size<sizeof(NoteCutter), 32 + sizeof(::GlobalNamespace::NoteCutter::CuttableBySaberSortParamsComparer*)> __GlobalNamespace_NoteCutterSizeCheck;
  static_assert(sizeof(NoteCutter) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteCutter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteCutter::Cut
// Il2CppName: Cut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteCutter::*)(::GlobalNamespace::Saber*)>(&GlobalNamespace::NoteCutter::Cut)> {
  static const MethodInfo* get() {
    static auto* saber = &::il2cpp_utils::GetClassFromName("", "Saber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutter*), "Cut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saber});
  }
};
