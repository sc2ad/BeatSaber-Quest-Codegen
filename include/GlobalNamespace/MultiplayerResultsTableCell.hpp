// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
  // Forward declaring type: MultiplayerResultsAvatarController
  class MultiplayerResultsAvatarController;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE4
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerResultsTableCell
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerResultsTableCell : public HMUI::TableCell {
    public:
    // private TMPro.TextMeshProUGUI _positionText
    // Size: 0x8
    // Offset: 0x50
    TMPro::TextMeshProUGUI* positionText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _nameText
    // Size: 0x8
    // Offset: 0x58
    TMPro::TextMeshProUGUI* nameText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _scoreText
    // Size: 0x8
    // Offset: 0x60
    TMPro::TextMeshProUGUI* scoreText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _rankText
    // Size: 0x8
    // Offset: 0x68
    TMPro::TextMeshProUGUI* rankText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TubeBloomPrePassLight[] _lights
    // Size: 0x8
    // Offset: 0x70
    ::Array<GlobalNamespace::TubeBloomPrePassLight*>* lights;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TubeBloomPrePassLight*>*) == 0x8);
    // private UnityEngine.UI.Image _backgroundImage
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::Image* backgroundImage;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.CanvasGroup _canvasGroup
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::CanvasGroup* canvasGroup;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasGroup*) == 0x8);
    // private MultiplayerResultsAvatarController _multiplayerResultsAvatarController
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::MultiplayerResultsAvatarController* multiplayerResultsAvatarController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsAvatarController*) == 0x8);
    // [SpaceAttribute] Offset: 0xF12FE0
    // private System.Single _avatarScale
    // Size: 0x4
    // Offset: 0x90
    float avatarScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _normalSecondPlayerColor
    // Size: 0x10
    // Offset: 0x94
    UnityEngine::Color normalSecondPlayerColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _normalLastPlayerColor
    // Size: 0x10
    // Offset: 0xA4
    UnityEngine::Color normalLastPlayerColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _localPlayerColor
    // Size: 0x10
    // Offset: 0xB4
    UnityEngine::Color localPlayerColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _winnerColor
    // Size: 0x10
    // Offset: 0xC4
    UnityEngine::Color winnerColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _lightColor
    // Size: 0x10
    // Offset: 0xD4
    UnityEngine::Color lightColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Creating value type constructor for type: MultiplayerResultsTableCell
    MultiplayerResultsTableCell(TMPro::TextMeshProUGUI* positionText_ = {}, TMPro::TextMeshProUGUI* nameText_ = {}, TMPro::TextMeshProUGUI* scoreText_ = {}, TMPro::TextMeshProUGUI* rankText_ = {}, ::Array<GlobalNamespace::TubeBloomPrePassLight*>* lights_ = {}, UnityEngine::UI::Image* backgroundImage_ = {}, UnityEngine::CanvasGroup* canvasGroup_ = {}, GlobalNamespace::MultiplayerResultsAvatarController* multiplayerResultsAvatarController_ = {}, float avatarScale_ = {}, UnityEngine::Color normalSecondPlayerColor_ = {}, UnityEngine::Color normalLastPlayerColor_ = {}, UnityEngine::Color localPlayerColor_ = {}, UnityEngine::Color winnerColor_ = {}, UnityEngine::Color lightColor_ = {}) noexcept : positionText{positionText_}, nameText{nameText_}, scoreText{scoreText_}, rankText{rankText_}, lights{lights_}, backgroundImage{backgroundImage_}, canvasGroup{canvasGroup_}, multiplayerResultsAvatarController{multiplayerResultsAvatarController_}, avatarScale{avatarScale_}, normalSecondPlayerColor{normalSecondPlayerColor_}, normalLastPlayerColor{normalLastPlayerColor_}, localPlayerColor{localPlayerColor_}, winnerColor{winnerColor_}, lightColor{lightColor_} {}
    // Get instance field reference: private TMPro.TextMeshProUGUI _positionText
    TMPro::TextMeshProUGUI*& dyn__positionText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _nameText
    TMPro::TextMeshProUGUI*& dyn__nameText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _scoreText
    TMPro::TextMeshProUGUI*& dyn__scoreText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _rankText
    TMPro::TextMeshProUGUI*& dyn__rankText();
    // Get instance field reference: private TubeBloomPrePassLight[] _lights
    ::Array<GlobalNamespace::TubeBloomPrePassLight*>*& dyn__lights();
    // Get instance field reference: private UnityEngine.UI.Image _backgroundImage
    UnityEngine::UI::Image*& dyn__backgroundImage();
    // Get instance field reference: private UnityEngine.CanvasGroup _canvasGroup
    UnityEngine::CanvasGroup*& dyn__canvasGroup();
    // Get instance field reference: private MultiplayerResultsAvatarController _multiplayerResultsAvatarController
    GlobalNamespace::MultiplayerResultsAvatarController*& dyn__multiplayerResultsAvatarController();
    // Get instance field reference: private System.Single _avatarScale
    float& dyn__avatarScale();
    // Get instance field reference: private UnityEngine.Color _normalSecondPlayerColor
    UnityEngine::Color& dyn__normalSecondPlayerColor();
    // Get instance field reference: private UnityEngine.Color _normalLastPlayerColor
    UnityEngine::Color& dyn__normalLastPlayerColor();
    // Get instance field reference: private UnityEngine.Color _localPlayerColor
    UnityEngine::Color& dyn__localPlayerColor();
    // Get instance field reference: private UnityEngine.Color _winnerColor
    UnityEngine::Color& dyn__winnerColor();
    // Get instance field reference: private UnityEngine.Color _lightColor
    UnityEngine::Color& dyn__lightColor();
    // public System.Void set_alpha(System.Single value)
    // Offset: 0x112CB30
    void set_alpha(float value);
    // public System.Void SetData(IConnectedPlayer connectedPlayer, System.Int32 position, System.String playerName, LevelCompletionResults levelCompletionResults, System.Boolean isLocalPlayer, System.Int32 numberOfPlayers)
    // Offset: 0x112CBEC
    void SetData(GlobalNamespace::IConnectedPlayer* connectedPlayer, int position, ::Il2CppString* playerName, GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool isLocalPlayer, int numberOfPlayers);
    // public System.Void .ctor()
    // Offset: 0x112CF84
    // Implemented from: HMUI.TableCell
    // Base method: System.Void TableCell::.ctor()
    // Base method: System.Void SelectableCell::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerResultsTableCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerResultsTableCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerResultsTableCell*, creationType>()));
    }
  }; // MultiplayerResultsTableCell
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerResultsTableCell), 212 + sizeof(UnityEngine::Color)> __GlobalNamespace_MultiplayerResultsTableCellSizeCheck;
  static_assert(sizeof(MultiplayerResultsTableCell) == 0xE4);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerResultsTableCell*, "", "MultiplayerResultsTableCell");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerResultsTableCell::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerResultsTableCell::*)(float)>(&GlobalNamespace::MultiplayerResultsTableCell::set_alpha)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerResultsTableCell*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerResultsTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerResultsTableCell::*)(GlobalNamespace::IConnectedPlayer*, int, ::Il2CppString*, GlobalNamespace::LevelCompletionResults*, bool, int)>(&GlobalNamespace::MultiplayerResultsTableCell::SetData)> {
  static const MethodInfo* get() {
    static auto* connectedPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelCompletionResults = &::il2cpp_utils::GetClassFromName("", "LevelCompletionResults")->byval_arg;
    static auto* isLocalPlayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* numberOfPlayers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerResultsTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectedPlayer, position, playerName, levelCompletionResults, isLocalPlayer, numberOfPlayers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerResultsTableCell::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
