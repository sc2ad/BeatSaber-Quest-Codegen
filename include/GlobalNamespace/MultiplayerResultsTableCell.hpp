// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
  // Forward declaring type: MultiplayerResultsAvatarController
  class MultiplayerResultsAvatarController;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerResultsTableCell
  class MultiplayerResultsTableCell;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerResultsTableCell);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerResultsTableCell*, "", "MultiplayerResultsTableCell");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xEC
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerResultsTableCell
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerResultsTableCell : public ::HMUI::TableCell {
    public:
    public:
    // private TMPro.TextMeshProUGUI _positionText
    // Size: 0x8
    // Offset: 0x58
    ::TMPro::TextMeshProUGUI* positionText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _nameText
    // Size: 0x8
    // Offset: 0x60
    ::TMPro::TextMeshProUGUI* nameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _scoreText
    // Size: 0x8
    // Offset: 0x68
    ::TMPro::TextMeshProUGUI* scoreText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _rankText
    // Size: 0x8
    // Offset: 0x70
    ::TMPro::TextMeshProUGUI* rankText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TubeBloomPrePassLight[] _lights
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*> lights;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>) == 0x8);
    // private UnityEngine.UI.Image _backgroundImage
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::UI::Image* backgroundImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // private UnityEngine.CanvasGroup _canvasGroup
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::CanvasGroup* canvasGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasGroup*) == 0x8);
    // private MultiplayerResultsAvatarController _multiplayerResultsAvatarController
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::MultiplayerResultsAvatarController* multiplayerResultsAvatarController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerResultsAvatarController*) == 0x8);
    // [SpaceAttribute] Offset: 0x10ED78C
    // private System.Single _avatarScale
    // Size: 0x4
    // Offset: 0x98
    float avatarScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _normalSecondPlayerColor
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color normalSecondPlayerColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _normalLastPlayerColor
    // Size: 0x10
    // Offset: 0xAC
    ::UnityEngine::Color normalLastPlayerColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _localPlayerColor
    // Size: 0x10
    // Offset: 0xBC
    ::UnityEngine::Color localPlayerColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _winnerColor
    // Size: 0x10
    // Offset: 0xCC
    ::UnityEngine::Color winnerColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _lightColor
    // Size: 0x10
    // Offset: 0xDC
    ::UnityEngine::Color lightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: private TMPro.TextMeshProUGUI _positionText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__positionText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _nameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__nameText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _scoreText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__scoreText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _rankText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__rankText();
    // Get instance field reference: private TubeBloomPrePassLight[] _lights
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::TubeBloomPrePassLight*>& dyn__lights();
    // Get instance field reference: private UnityEngine.UI.Image _backgroundImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn__backgroundImage();
    // Get instance field reference: private UnityEngine.CanvasGroup _canvasGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& dyn__canvasGroup();
    // Get instance field reference: private MultiplayerResultsAvatarController _multiplayerResultsAvatarController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerResultsAvatarController*& dyn__multiplayerResultsAvatarController();
    // Get instance field reference: private System.Single _avatarScale
    [[deprecated("Use field access instead!")]] float& dyn__avatarScale();
    // Get instance field reference: private UnityEngine.Color _normalSecondPlayerColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalSecondPlayerColor();
    // Get instance field reference: private UnityEngine.Color _normalLastPlayerColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__normalLastPlayerColor();
    // Get instance field reference: private UnityEngine.Color _localPlayerColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__localPlayerColor();
    // Get instance field reference: private UnityEngine.Color _winnerColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__winnerColor();
    // Get instance field reference: private UnityEngine.Color _lightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__lightColor();
    // public System.Void set_alpha(System.Single value)
    // Offset: 0x13BE6C8
    void set_alpha(float value);
    // public System.Void .ctor()
    // Offset: 0x13BEB10
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerResultsTableCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerResultsTableCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerResultsTableCell*, creationType>()));
    }
    // public System.Void SetData(IConnectedPlayer connectedPlayer, System.Int32 position, System.String playerName, LevelCompletionResults levelCompletionResults, System.Boolean isLocalPlayer, System.Int32 numberOfPlayers)
    // Offset: 0x13BE778
    void SetData(::GlobalNamespace::IConnectedPlayer* connectedPlayer, int position, ::StringW playerName, ::GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool isLocalPlayer, int numberOfPlayers);
  }; // MultiplayerResultsTableCell
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerResultsTableCell), 220 + sizeof(::UnityEngine::Color)> __GlobalNamespace_MultiplayerResultsTableCellSizeCheck;
  static_assert(sizeof(MultiplayerResultsTableCell) == 0xEC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerResultsTableCell::set_alpha
// Il2CppName: set_alpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerResultsTableCell::*)(float)>(&GlobalNamespace::MultiplayerResultsTableCell::set_alpha)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerResultsTableCell*), "set_alpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerResultsTableCell::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerResultsTableCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerResultsTableCell::*)(::GlobalNamespace::IConnectedPlayer*, int, ::StringW, ::GlobalNamespace::LevelCompletionResults*, bool, int)>(&GlobalNamespace::MultiplayerResultsTableCell::SetData)> {
  static const MethodInfo* get() {
    static auto* connectedPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    static auto* position = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* playerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelCompletionResults = &::il2cpp_utils::GetClassFromName("", "LevelCompletionResults")->byval_arg;
    static auto* isLocalPlayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* numberOfPlayers = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerResultsTableCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectedPlayer, position, playerName, levelCompletionResults, isLocalPlayer, numberOfPlayers});
  }
};
