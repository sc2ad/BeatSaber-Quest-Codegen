// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapData
#include "GlobalNamespace/BeatmapData.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDataItem
  class BeatmapDataItem;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*, "", "BeatmapData/BeatmapDataBinaryHeapItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapData/BeatmapDataBinaryHeapItem
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapData::BeatmapDataBinaryHeapItem : public ::Il2CppObject/*, public ::System::IComparable_1<::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*>*/ {
    public:
    public:
    // public System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> node
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>* node;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IComparable_1<::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*>
    operator ::System::IComparable_1<::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*>*>(this);
    }
    // Creating interface conversion operator: i_BeatmapDataBinaryHeapItem
    inline ::System::IComparable_1<::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*>* i_BeatmapDataBinaryHeapItem() noexcept {
      return reinterpret_cast<::System::IComparable_1<::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*>*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*
    constexpr operator ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*() const noexcept {
      return node;
    }
    // Get instance field reference: public System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> node
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*& dyn_node();
    // public System.Void .ctor(System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> node)
    // Offset: 0x13C7FE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapData::BeatmapDataBinaryHeapItem* New_ctor(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>* node) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapData::BeatmapDataBinaryHeapItem*, creationType>(node)));
    }
    // public System.Int32 CompareTo(BeatmapData/BeatmapDataBinaryHeapItem other)
    // Offset: 0x13C8454
    int CompareTo(::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem* other);
  }; // BeatmapData/BeatmapDataBinaryHeapItem
  #pragma pack(pop)
  static check_size<sizeof(BeatmapData::BeatmapDataBinaryHeapItem), 16 + sizeof(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*)> __GlobalNamespace_BeatmapData_BeatmapDataBinaryHeapItemSizeCheck;
  static_assert(sizeof(BeatmapData::BeatmapDataBinaryHeapItem) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem::*)(::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*)>(&GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem::CompareTo)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("", "BeatmapData/BeatmapDataBinaryHeapItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
