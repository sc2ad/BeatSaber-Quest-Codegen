// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightGroupSubsystem
#include "GlobalNamespace/LightGroupSubsystem.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightGroupCircularLayouter
  class LightGroupCircularLayouter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightGroupCircularLayouter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightGroupCircularLayouter*, "", "LightGroupCircularLayouter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: LightGroupCircularLayouter
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class LightGroupCircularLayouter : public ::GlobalNamespace::LightGroupSubsystem {
    public:
    // Nested type: ::GlobalNamespace::LightGroupCircularLayouter::RotationDirection
    struct RotationDirection;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LightGroupCircularLayouter/RotationDirection
    // [TokenAttribute] Offset: FFFFFFFF
    struct RotationDirection/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: RotationDirection
      constexpr RotationDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LightGroupCircularLayouter/RotationDirection Clockwise
      static constexpr const int Clockwise = 0;
      // Get static field: static public LightGroupCircularLayouter/RotationDirection Clockwise
      static ::GlobalNamespace::LightGroupCircularLayouter::RotationDirection _get_Clockwise();
      // Set static field: static public LightGroupCircularLayouter/RotationDirection Clockwise
      static void _set_Clockwise(::GlobalNamespace::LightGroupCircularLayouter::RotationDirection value);
      // static field const value: static public LightGroupCircularLayouter/RotationDirection Counterclockwise
      static constexpr const int Counterclockwise = 1;
      // Get static field: static public LightGroupCircularLayouter/RotationDirection Counterclockwise
      static ::GlobalNamespace::LightGroupCircularLayouter::RotationDirection _get_Counterclockwise();
      // Set static field: static public LightGroupCircularLayouter/RotationDirection Counterclockwise
      static void _set_Counterclockwise(::GlobalNamespace::LightGroupCircularLayouter::RotationDirection value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LightGroupCircularLayouter/RotationDirection
    #pragma pack(pop)
    static check_size<sizeof(LightGroupCircularLayouter::RotationDirection), 0 + sizeof(int)> __GlobalNamespace_LightGroupCircularLayouter_RotationDirectionSizeCheck;
    static_assert(sizeof(LightGroupCircularLayouter::RotationDirection) == 0x4);
    public:
    // [SpaceAttribute] Offset: 0x11213AC
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x20
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _angle
    // Size: 0x4
    // Offset: 0x24
    float angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startingAngle
    // Size: 0x4
    // Offset: 0x28
    float startingAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private LightGroupCircularLayouter/RotationDirection _rotationDirection
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::LightGroupCircularLayouter::RotationDirection rotationDirection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightGroupCircularLayouter::RotationDirection) == 0x4);
    // private System.Boolean _staticRotation
    // Size: 0x1
    // Offset: 0x30
    bool staticRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: staticRotation and: additionalAngle
    char __padding4[0x3] = {};
    // private UnityEngine.Vector3 _additionalAngle
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 additionalAngle;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Single _radius
    [[deprecated("Use field access instead!")]] float& dyn__radius();
    // Get instance field reference: private System.Single _angle
    [[deprecated("Use field access instead!")]] float& dyn__angle();
    // Get instance field reference: private System.Single _startingAngle
    [[deprecated("Use field access instead!")]] float& dyn__startingAngle();
    // Get instance field reference: private LightGroupCircularLayouter/RotationDirection _rotationDirection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightGroupCircularLayouter::RotationDirection& dyn__rotationDirection();
    // Get instance field reference: private System.Boolean _staticRotation
    [[deprecated("Use field access instead!")]] bool& dyn__staticRotation();
    // Get instance field reference: private UnityEngine.Vector3 _additionalAngle
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__additionalAngle();
    // public System.Void .ctor()
    // Offset: 0x156C6A8
    // Implemented from: LightGroupSubsystem
    // Base method: System.Void LightGroupSubsystem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightGroupCircularLayouter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupCircularLayouter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightGroupCircularLayouter*, creationType>()));
    }
  }; // LightGroupCircularLayouter
  #pragma pack(pop)
  static check_size<sizeof(LightGroupCircularLayouter), 52 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_LightGroupCircularLayouterSizeCheck;
  static_assert(sizeof(LightGroupCircularLayouter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightGroupCircularLayouter::RotationDirection, "", "LightGroupCircularLayouter/RotationDirection");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightGroupCircularLayouter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
