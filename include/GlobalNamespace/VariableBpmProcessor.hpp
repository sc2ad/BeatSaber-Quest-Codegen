// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: VariableBpmProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class VariableBpmProcessor : public ::Il2CppObject {
    public:
    // private System.Single _currentBpm
    // Size: 0x4
    // Offset: 0x10
    float currentBpm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: VariableBpmProcessor
    VariableBpmProcessor(float currentBpm_ = {}) noexcept : currentBpm{currentBpm_} {}
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return currentBpm;
    }
    // Get instance field reference: private System.Single _currentBpm
    float& dyn__currentBpm();
    // public System.Single get_currentBpm()
    // Offset: 0x134D6F0
    float get_currentBpm();
    // public System.Void SetBpm(System.Single newBpm)
    // Offset: 0x134D6F8
    void SetBpm(float newBpm);
    // public System.Boolean ProcessBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x134D700
    bool ProcessBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void .ctor()
    // Offset: 0x134D74C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VariableBpmProcessor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VariableBpmProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VariableBpmProcessor*, creationType>()));
    }
  }; // VariableBpmProcessor
  #pragma pack(pop)
  static check_size<sizeof(VariableBpmProcessor), 16 + sizeof(float)> __GlobalNamespace_VariableBpmProcessorSizeCheck;
  static_assert(sizeof(VariableBpmProcessor) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::VariableBpmProcessor*, "", "VariableBpmProcessor");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VariableBpmProcessor::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::VariableBpmProcessor::*)()>(&GlobalNamespace::VariableBpmProcessor::get_currentBpm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VariableBpmProcessor*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VariableBpmProcessor::SetBpm
// Il2CppName: SetBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VariableBpmProcessor::*)(float)>(&GlobalNamespace::VariableBpmProcessor::SetBpm)> {
  static const MethodInfo* get() {
    static auto* newBpm = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VariableBpmProcessor*), "SetBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newBpm});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VariableBpmProcessor::ProcessBeatmapEventData
// Il2CppName: ProcessBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::VariableBpmProcessor::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::VariableBpmProcessor::ProcessBeatmapEventData)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VariableBpmProcessor*), "ProcessBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VariableBpmProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
