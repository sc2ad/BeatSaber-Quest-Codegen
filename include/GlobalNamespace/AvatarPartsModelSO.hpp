// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarMeshPartSO
  class AvatarMeshPartSO;
  // Forward declaring type: AvatarSpritePartSO
  class AvatarSpritePartSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: AvatarPartsModelSO
  // [TokenAttribute] Offset: FFFFFFFF
  class AvatarPartsModelSO : public GlobalNamespace::PersistentScriptableObject {
    public:
    // private AvatarMeshPartSO[] _headTops
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* headTops;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarMeshPartSO*>*) == 0x8);
    // private AvatarSpritePartSO[] _eyes
    // Size: 0x8
    // Offset: 0x20
    ::Array<GlobalNamespace::AvatarSpritePartSO*>* eyes;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarSpritePartSO*>*) == 0x8);
    // private AvatarSpritePartSO[] _mouths
    // Size: 0x8
    // Offset: 0x28
    ::Array<GlobalNamespace::AvatarSpritePartSO*>* mouths;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarSpritePartSO*>*) == 0x8);
    // private AvatarMeshPartSO[] _glasses
    // Size: 0x8
    // Offset: 0x30
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* glasses;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarMeshPartSO*>*) == 0x8);
    // private AvatarMeshPartSO[] _facialHair
    // Size: 0x8
    // Offset: 0x38
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* facialHair;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarMeshPartSO*>*) == 0x8);
    // private AvatarMeshPartSO[] _hands
    // Size: 0x8
    // Offset: 0x40
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* hands;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarMeshPartSO*>*) == 0x8);
    // private AvatarMeshPartSO[] _clothes
    // Size: 0x8
    // Offset: 0x48
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* clothes;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::AvatarMeshPartSO*>*) == 0x8);
    // Creating value type constructor for type: AvatarPartsModelSO
    AvatarPartsModelSO(::Array<GlobalNamespace::AvatarMeshPartSO*>* headTops_ = {}, ::Array<GlobalNamespace::AvatarSpritePartSO*>* eyes_ = {}, ::Array<GlobalNamespace::AvatarSpritePartSO*>* mouths_ = {}, ::Array<GlobalNamespace::AvatarMeshPartSO*>* glasses_ = {}, ::Array<GlobalNamespace::AvatarMeshPartSO*>* facialHair_ = {}, ::Array<GlobalNamespace::AvatarMeshPartSO*>* hands_ = {}, ::Array<GlobalNamespace::AvatarMeshPartSO*>* clothes_ = {}) noexcept : headTops{headTops_}, eyes{eyes_}, mouths{mouths_}, glasses{glasses_}, facialHair{facialHair_}, hands{hands_}, clothes{clothes_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private AvatarMeshPartSO[] _headTops
    ::Array<GlobalNamespace::AvatarMeshPartSO*>*& dyn__headTops();
    // Get instance field reference: private AvatarSpritePartSO[] _eyes
    ::Array<GlobalNamespace::AvatarSpritePartSO*>*& dyn__eyes();
    // Get instance field reference: private AvatarSpritePartSO[] _mouths
    ::Array<GlobalNamespace::AvatarSpritePartSO*>*& dyn__mouths();
    // Get instance field reference: private AvatarMeshPartSO[] _glasses
    ::Array<GlobalNamespace::AvatarMeshPartSO*>*& dyn__glasses();
    // Get instance field reference: private AvatarMeshPartSO[] _facialHair
    ::Array<GlobalNamespace::AvatarMeshPartSO*>*& dyn__facialHair();
    // Get instance field reference: private AvatarMeshPartSO[] _hands
    ::Array<GlobalNamespace::AvatarMeshPartSO*>*& dyn__hands();
    // Get instance field reference: private AvatarMeshPartSO[] _clothes
    ::Array<GlobalNamespace::AvatarMeshPartSO*>*& dyn__clothes();
    // public AvatarMeshPartSO[] get_headTops()
    // Offset: 0x124B694
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* get_headTops();
    // public AvatarSpritePartSO[] get_Eyes()
    // Offset: 0x124B69C
    ::Array<GlobalNamespace::AvatarSpritePartSO*>* get_Eyes();
    // public AvatarSpritePartSO[] get_Mouths()
    // Offset: 0x124B6A4
    ::Array<GlobalNamespace::AvatarSpritePartSO*>* get_Mouths();
    // public AvatarMeshPartSO[] get_Glasses()
    // Offset: 0x124B6AC
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* get_Glasses();
    // public AvatarMeshPartSO[] get_FacialHair()
    // Offset: 0x124B6B4
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* get_FacialHair();
    // public AvatarMeshPartSO[] get_Hands()
    // Offset: 0x124B6BC
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* get_Hands();
    // public AvatarMeshPartSO[] get_Clothes()
    // Offset: 0x124B6C4
    ::Array<GlobalNamespace::AvatarMeshPartSO*>* get_Clothes();
    // public System.Void .ctor()
    // Offset: 0x124B6CC
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarPartsModelSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartsModelSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarPartsModelSO*, creationType>()));
    }
  }; // AvatarPartsModelSO
  #pragma pack(pop)
  static check_size<sizeof(AvatarPartsModelSO), 72 + sizeof(::Array<GlobalNamespace::AvatarMeshPartSO*>*)> __GlobalNamespace_AvatarPartsModelSOSizeCheck;
  static_assert(sizeof(AvatarPartsModelSO) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AvatarPartsModelSO*, "", "AvatarPartsModelSO");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_headTops
// Il2CppName: get_headTops
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_headTops)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_headTops", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_Eyes
// Il2CppName: get_Eyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarSpritePartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_Eyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_Eyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_Mouths
// Il2CppName: get_Mouths
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarSpritePartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_Mouths)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_Mouths", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_Glasses
// Il2CppName: get_Glasses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_Glasses)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_Glasses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_FacialHair
// Il2CppName: get_FacialHair
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_FacialHair)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_FacialHair", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_Hands
// Il2CppName: get_Hands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_Hands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_Hands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::get_Clothes
// Il2CppName: get_Clothes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<GlobalNamespace::AvatarMeshPartSO*>* (GlobalNamespace::AvatarPartsModelSO::*)()>(&GlobalNamespace::AvatarPartsModelSO::get_Clothes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AvatarPartsModelSO*), "get_Clothes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AvatarPartsModelSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
