// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroup
  class BeatmapEventDataBoxGroup;
  // Forward declaring type: EnvironmentColorType
  struct EnvironmentColorType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroupFactory
  class BeatmapEventDataBoxGroupFactory;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapEventDataBoxGroupFactory);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBoxGroupFactory*, "", "BeatmapEventDataBoxGroupFactory");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataBoxGroupFactory
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventDataBoxGroupFactory : public ::Il2CppObject {
    public:
    // static public BeatmapEventDataBoxGroup CreateExtendColorBeatmapEventDataBoxGroup(System.Single beat, System.Int32 numberOfElements)
    // Offset: 0x15098F4
    static ::GlobalNamespace::BeatmapEventDataBoxGroup* CreateExtendColorBeatmapEventDataBoxGroup(float beat, int numberOfElements);
    // static public BeatmapEventDataBoxGroup CreateExtendRotationBeatmapEventDataBoxGroup(System.Single beat, System.Int32 numberOfElements)
    // Offset: 0x1509A9C
    static ::GlobalNamespace::BeatmapEventDataBoxGroup* CreateExtendRotationBeatmapEventDataBoxGroup(float beat, int numberOfElements);
    // static public BeatmapEventDataBoxGroup CreateSingleLightBeatmapEventDataBoxGroup(System.Single beat, System.Int32 numberOfElements, EnvironmentColorType colorType, System.Single brightness, System.Single rotationX, System.Single rotationY)
    // Offset: 0x1509D58
    static ::GlobalNamespace::BeatmapEventDataBoxGroup* CreateSingleLightBeatmapEventDataBoxGroup(float beat, int numberOfElements, ::GlobalNamespace::EnvironmentColorType colorType, float brightness, float rotationX, float rotationY);
  }; // BeatmapEventDataBoxGroupFactory
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendColorBeatmapEventDataBoxGroup
// Il2CppName: CreateExtendColorBeatmapEventDataBoxGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventDataBoxGroup* (*)(float, int)>(&GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendColorBeatmapEventDataBoxGroup)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numberOfElements = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupFactory*), "CreateExtendColorBeatmapEventDataBoxGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat, numberOfElements});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendRotationBeatmapEventDataBoxGroup
// Il2CppName: CreateExtendRotationBeatmapEventDataBoxGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventDataBoxGroup* (*)(float, int)>(&GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateExtendRotationBeatmapEventDataBoxGroup)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numberOfElements = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupFactory*), "CreateExtendRotationBeatmapEventDataBoxGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat, numberOfElements});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateSingleLightBeatmapEventDataBoxGroup
// Il2CppName: CreateSingleLightBeatmapEventDataBoxGroup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventDataBoxGroup* (*)(float, int, ::GlobalNamespace::EnvironmentColorType, float, float, float)>(&GlobalNamespace::BeatmapEventDataBoxGroupFactory::CreateSingleLightBeatmapEventDataBoxGroup)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* numberOfElements = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "EnvironmentColorType")->byval_arg;
    static auto* brightness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rotationX = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rotationY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupFactory*), "CreateSingleLightBeatmapEventDataBoxGroup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat, numberOfElements, colorType, brightness, rotationX, rotationY});
  }
};
