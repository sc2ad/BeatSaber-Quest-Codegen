// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: CreateServerFormData
#include "GlobalNamespace/CreateServerFormData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CreateServerFormController
  class CreateServerFormController;
  // Forward declaring type: MultiplayerModeSettings
  class MultiplayerModeSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CreateServerViewController
  class CreateServerViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CreateServerViewController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CreateServerViewController*, "", "CreateServerViewController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: CreateServerViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class CreateServerViewController : public ::HMUI::ViewController {
    public:
    public:
    // private UnityEngine.UI.Button _createServerButton
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UI::Button* createServerButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _cancelCreateServerButton
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Button* cancelCreateServerButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private CreateServerFormController _createServerFormController
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::CreateServerFormController* createServerFormController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CreateServerFormController*) == 0x8);
    // private System.Action`2<System.Boolean,CreateServerFormData> didFinishEvent
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>* didFinishEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>*) == 0x8);
    // private MultiplayerModeSettings _multiplayerModeSettings
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerModeSettings*) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.UI.Button _createServerButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__createServerButton();
    // Get instance field reference: private UnityEngine.UI.Button _cancelCreateServerButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__cancelCreateServerButton();
    // Get instance field reference: private CreateServerFormController _createServerFormController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CreateServerFormController*& dyn__createServerFormController();
    // Get instance field reference: private System.Action`2<System.Boolean,CreateServerFormData> didFinishEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>*& dyn_didFinishEvent();
    // Get instance field reference: private MultiplayerModeSettings _multiplayerModeSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerModeSettings*& dyn__multiplayerModeSettings();
    // public MultiplayerModeSettings get_multiplayerModeSettings()
    // Offset: 0x148AD7C
    ::GlobalNamespace::MultiplayerModeSettings* get_multiplayerModeSettings();
    // public System.Void add_didFinishEvent(System.Action`2<System.Boolean,CreateServerFormData> value)
    // Offset: 0x148AC34
    void add_didFinishEvent(::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>* value);
    // public System.Void remove_didFinishEvent(System.Action`2<System.Boolean,CreateServerFormData> value)
    // Offset: 0x148ACD8
    void remove_didFinishEvent(::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>* value);
    // public System.Void .ctor()
    // Offset: 0x148AF68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CreateServerViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CreateServerViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CreateServerViewController*, creationType>()));
    }
    // public System.Void Setup(MultiplayerModeSettings multiplayerModeSettings)
    // Offset: 0x148AD84
    void Setup(::GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings);
    // private CreateServerFormData ApplyAndGetData()
    // Offset: 0x148AECC
    ::GlobalNamespace::CreateServerFormData ApplyAndGetData();
    // private System.Void <DidActivate>b__10_0()
    // Offset: 0x148AF70
    void $DidActivate$b__10_0();
    // private System.Void <DidActivate>b__10_1()
    // Offset: 0x148AFF8
    void $DidActivate$b__10_1();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x148ADD0
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
  }; // CreateServerViewController
  #pragma pack(pop)
  static check_size<sizeof(CreateServerViewController), 144 + sizeof(::GlobalNamespace::MultiplayerModeSettings*)> __GlobalNamespace_CreateServerViewControllerSizeCheck;
  static_assert(sizeof(CreateServerViewController) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::get_multiplayerModeSettings
// Il2CppName: get_multiplayerModeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerModeSettings* (GlobalNamespace::CreateServerViewController::*)()>(&GlobalNamespace::CreateServerViewController::get_multiplayerModeSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "get_multiplayerModeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CreateServerViewController::*)(::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>*)>(&GlobalNamespace::CreateServerViewController::add_didFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("", "CreateServerFormData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CreateServerViewController::*)(::System::Action_2<bool, ::GlobalNamespace::CreateServerFormData>*)>(&GlobalNamespace::CreateServerViewController::remove_didFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::GetClassFromName("", "CreateServerFormData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CreateServerViewController::*)(::GlobalNamespace::MultiplayerModeSettings*)>(&GlobalNamespace::CreateServerViewController::Setup)> {
  static const MethodInfo* get() {
    static auto* multiplayerModeSettings = &::il2cpp_utils::GetClassFromName("", "MultiplayerModeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerModeSettings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::ApplyAndGetData
// Il2CppName: ApplyAndGetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::CreateServerFormData (GlobalNamespace::CreateServerViewController::*)()>(&GlobalNamespace::CreateServerViewController::ApplyAndGetData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "ApplyAndGetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::$DidActivate$b__10_0
// Il2CppName: <DidActivate>b__10_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CreateServerViewController::*)()>(&GlobalNamespace::CreateServerViewController::$DidActivate$b__10_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "<DidActivate>b__10_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::$DidActivate$b__10_1
// Il2CppName: <DidActivate>b__10_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CreateServerViewController::*)()>(&GlobalNamespace::CreateServerViewController::$DidActivate$b__10_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "<DidActivate>b__10_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CreateServerViewController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CreateServerViewController::*)(bool, bool, bool)>(&GlobalNamespace::CreateServerViewController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CreateServerViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
