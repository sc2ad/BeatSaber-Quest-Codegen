// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::SceneManagement
namespace UnityEngine::SceneManagement {
  // Forward declaring type: Scene
  struct Scene;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ftLightmapsStorage
  class ftLightmapsStorage;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ftLightmaps
  class ftLightmaps;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ftLightmaps);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ftLightmaps*, "", "ftLightmaps");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ftLightmaps
  // [TokenAttribute] Offset: FFFFFFFF
  class ftLightmaps : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::ftLightmaps::LightmapAdditionalData
    struct LightmapAdditionalData;
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: ftLightmaps/LightmapAdditionalData
    // [TokenAttribute] Offset: FFFFFFFF
    struct LightmapAdditionalData/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Texture2D rnm0
      // Size: 0x8
      // Offset: 0x0
      ::UnityEngine::Texture2D* rnm0;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
      // public UnityEngine.Texture2D rnm1
      // Size: 0x8
      // Offset: 0x8
      ::UnityEngine::Texture2D* rnm1;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
      // public UnityEngine.Texture2D rnm2
      // Size: 0x8
      // Offset: 0x10
      ::UnityEngine::Texture2D* rnm2;
      // Field size check
      static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
      // public System.Int32 mode
      // Size: 0x4
      // Offset: 0x18
      int mode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LightmapAdditionalData
      constexpr LightmapAdditionalData(::UnityEngine::Texture2D* rnm0_ = {}, ::UnityEngine::Texture2D* rnm1_ = {}, ::UnityEngine::Texture2D* rnm2_ = {}, int mode_ = {}) noexcept : rnm0{rnm0_}, rnm1{rnm1_}, rnm2{rnm2_}, mode{mode_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Texture2D rnm0
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_rnm0();
      // Get instance field reference: public UnityEngine.Texture2D rnm1
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_rnm1();
      // Get instance field reference: public UnityEngine.Texture2D rnm2
      [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_rnm2();
      // Get instance field reference: public System.Int32 mode
      [[deprecated("Use field access instead!")]] int& dyn_mode();
    }; // ftLightmaps/LightmapAdditionalData
    #pragma pack(pop)
    static check_size<sizeof(ftLightmaps::LightmapAdditionalData), 24 + sizeof(int)> __GlobalNamespace_ftLightmaps_LightmapAdditionalDataSizeCheck;
    static_assert(sizeof(ftLightmaps::LightmapAdditionalData) == 0x1C);
    // Get static field: static private System.Collections.Generic.List`1<System.Int32> lightmapRefCount
    static ::System::Collections::Generic::List_1<int>* _get_lightmapRefCount();
    // Set static field: static private System.Collections.Generic.List`1<System.Int32> lightmapRefCount
    static void _set_lightmapRefCount(::System::Collections::Generic::List_1<int>* value);
    // Get static field: static private System.Collections.Generic.List`1<ftLightmaps/LightmapAdditionalData> globalMapsAdditional
    static ::System::Collections::Generic::List_1<::GlobalNamespace::ftLightmaps::LightmapAdditionalData>* _get_globalMapsAdditional();
    // Set static field: static private System.Collections.Generic.List`1<ftLightmaps/LightmapAdditionalData> globalMapsAdditional
    static void _set_globalMapsAdditional(::System::Collections::Generic::List_1<::GlobalNamespace::ftLightmaps::LightmapAdditionalData>* value);
    // Get static field: static private System.Int32 directionalMode
    static int _get_directionalMode();
    // Set static field: static private System.Int32 directionalMode
    static void _set_directionalMode(int value);
    // static private System.Void .cctor()
    // Offset: 0x1BD6548
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1BD89D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ftLightmaps* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmaps::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ftLightmaps*, creationType>()));
    }
    // static private System.Void SetDirectionalMode()
    // Offset: 0x1BD65F0
    static void SetDirectionalMode();
    // static private System.Void OnSceneChangedPlay(UnityEngine.SceneManagement.Scene prev, UnityEngine.SceneManagement.Scene next)
    // Offset: 0x1BD6694
    static void OnSceneChangedPlay(::UnityEngine::SceneManagement::Scene prev, ::UnityEngine::SceneManagement::Scene next);
    // static public System.Void RefreshFull()
    // Offset: 0x1BD66F0
    static void RefreshFull();
    // static public UnityEngine.GameObject FindInScene(System.String nm, UnityEngine.SceneManagement.Scene scn)
    // Offset: 0x1BD8378
    static ::UnityEngine::GameObject* FindInScene(::StringW nm, ::UnityEngine::SceneManagement::Scene scn);
    // static private UnityEngine.Texture2D GetEmptyDirectionTex(ftLightmapsStorage storage)
    // Offset: 0x1BD84C0
    static ::UnityEngine::Texture2D* GetEmptyDirectionTex(::GlobalNamespace::ftLightmapsStorage* storage);
    // static public System.Void RefreshScene(UnityEngine.SceneManagement.Scene scene, ftLightmapsStorage storage, System.Boolean updateNonBaked)
    // Offset: 0x1BD6820
    static void RefreshScene(::UnityEngine::SceneManagement::Scene scene, ::GlobalNamespace::ftLightmapsStorage* storage, bool updateNonBaked);
    // static public System.Void UnloadScene(ftLightmapsStorage storage)
    // Offset: 0x1BD84D8
    static void UnloadScene(::GlobalNamespace::ftLightmapsStorage* storage);
    // static public System.Void RefreshScene2(UnityEngine.SceneManagement.Scene scene, ftLightmapsStorage storage)
    // Offset: 0x1BD8778
    static void RefreshScene2(::UnityEngine::SceneManagement::Scene scene, ::GlobalNamespace::ftLightmapsStorage* storage);
  }; // ftLightmaps
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ftLightmaps::LightmapAdditionalData, "", "ftLightmaps/LightmapAdditionalData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ftLightmaps::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::SetDirectionalMode
// Il2CppName: SetDirectionalMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ftLightmaps::SetDirectionalMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "SetDirectionalMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::OnSceneChangedPlay
// Il2CppName: OnSceneChangedPlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::SceneManagement::Scene, ::UnityEngine::SceneManagement::Scene)>(&GlobalNamespace::ftLightmaps::OnSceneChangedPlay)> {
  static const MethodInfo* get() {
    static auto* prev = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* next = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "OnSceneChangedPlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prev, next});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::RefreshFull
// Il2CppName: RefreshFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ftLightmaps::RefreshFull)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "RefreshFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::FindInScene
// Il2CppName: FindInScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (*)(::StringW, ::UnityEngine::SceneManagement::Scene)>(&GlobalNamespace::ftLightmaps::FindInScene)> {
  static const MethodInfo* get() {
    static auto* nm = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* scn = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "FindInScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nm, scn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::GetEmptyDirectionTex
// Il2CppName: GetEmptyDirectionTex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (*)(::GlobalNamespace::ftLightmapsStorage*)>(&GlobalNamespace::ftLightmaps::GetEmptyDirectionTex)> {
  static const MethodInfo* get() {
    static auto* storage = &::il2cpp_utils::GetClassFromName("", "ftLightmapsStorage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "GetEmptyDirectionTex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storage});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::RefreshScene
// Il2CppName: RefreshScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::SceneManagement::Scene, ::GlobalNamespace::ftLightmapsStorage*, bool)>(&GlobalNamespace::ftLightmaps::RefreshScene)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* storage = &::il2cpp_utils::GetClassFromName("", "ftLightmapsStorage")->byval_arg;
    static auto* updateNonBaked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "RefreshScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, storage, updateNonBaked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::UnloadScene
// Il2CppName: UnloadScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::ftLightmapsStorage*)>(&GlobalNamespace::ftLightmaps::UnloadScene)> {
  static const MethodInfo* get() {
    static auto* storage = &::il2cpp_utils::GetClassFromName("", "ftLightmapsStorage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "UnloadScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{storage});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmaps::RefreshScene2
// Il2CppName: RefreshScene2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::SceneManagement::Scene, ::GlobalNamespace::ftLightmapsStorage*)>(&GlobalNamespace::ftLightmaps::RefreshScene2)> {
  static const MethodInfo* get() {
    static auto* scene = &::il2cpp_utils::GetClassFromName("UnityEngine.SceneManagement", "Scene")->byval_arg;
    static auto* storage = &::il2cpp_utils::GetClassFromName("", "ftLightmapsStorage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmaps*), "RefreshScene2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scene, storage});
  }
};
