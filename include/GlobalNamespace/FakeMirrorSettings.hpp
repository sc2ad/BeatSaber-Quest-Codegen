// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: FakeMirrorSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class FakeMirrorSettings : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _fakeMirrorTransparency
    // Size: 0x4
    // Offset: 0x18
    float fakeMirrorTransparency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xEEB57C
    // [MinAttribute] Offset: 0xEEB57C
    // private System.Single _vertexDistortionNoiseScale
    // Size: 0x4
    // Offset: 0x1C
    float vertexDistortionNoiseScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _vertexDistortionStrength
    // Size: 0x4
    // Offset: 0x20
    float vertexDistortionStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _vertexDistortionDirectionality
    // Size: 0xC
    // Offset: 0x24
    UnityEngine::Vector3 vertexDistortionDirectionality;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [MinAttribute] Offset: 0xEEB5FC
    // private System.Single _vertexDistortionZposMultiplier
    // Size: 0x4
    // Offset: 0x30
    float vertexDistortionZposMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FakeMirrorSettings
    FakeMirrorSettings(float fakeMirrorTransparency_ = {}, float vertexDistortionNoiseScale_ = {}, float vertexDistortionStrength_ = {}, UnityEngine::Vector3 vertexDistortionDirectionality_ = {}, float vertexDistortionZposMultiplier_ = {}) noexcept : fakeMirrorTransparency{fakeMirrorTransparency_}, vertexDistortionNoiseScale{vertexDistortionNoiseScale_}, vertexDistortionStrength{vertexDistortionStrength_}, vertexDistortionDirectionality{vertexDistortionDirectionality_}, vertexDistortionZposMultiplier{vertexDistortionZposMultiplier_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xEEB638
    // Get static field: static private readonly System.Int32 _fakeMirrorTransparencyId
    static int _get__fakeMirrorTransparencyId();
    // Set static field: static private readonly System.Int32 _fakeMirrorTransparencyId
    static void _set__fakeMirrorTransparencyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xEEB648
    // Get static field: static private readonly System.Int32 _vertexDistortionNoiseScaleId
    static int _get__vertexDistortionNoiseScaleId();
    // Set static field: static private readonly System.Int32 _vertexDistortionNoiseScaleId
    static void _set__vertexDistortionNoiseScaleId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xEEB658
    // Get static field: static private readonly System.Int32 _vertexDistortionStrengthId
    static int _get__vertexDistortionStrengthId();
    // Set static field: static private readonly System.Int32 _vertexDistortionStrengthId
    static void _set__vertexDistortionStrengthId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xEEB668
    // Get static field: static private readonly System.Int32 _vertexDistortionDirectionalityId
    static int _get__vertexDistortionDirectionalityId();
    // Set static field: static private readonly System.Int32 _vertexDistortionDirectionalityId
    static void _set__vertexDistortionDirectionalityId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xEEB678
    // Get static field: static private readonly System.Int32 _vertexDistortionZposMultiplierId
    static int _get__vertexDistortionZposMultiplierId();
    // Set static field: static private readonly System.Int32 _vertexDistortionZposMultiplierId
    static void _set__vertexDistortionZposMultiplierId(int value);
    // Get instance field reference: private System.Single _fakeMirrorTransparency
    float& dyn__fakeMirrorTransparency();
    // Get instance field reference: private System.Single _vertexDistortionNoiseScale
    float& dyn__vertexDistortionNoiseScale();
    // Get instance field reference: private System.Single _vertexDistortionStrength
    float& dyn__vertexDistortionStrength();
    // Get instance field reference: private UnityEngine.Vector3 _vertexDistortionDirectionality
    UnityEngine::Vector3& dyn__vertexDistortionDirectionality();
    // Get instance field reference: private System.Single _vertexDistortionZposMultiplier
    float& dyn__vertexDistortionZposMultiplier();
    // public System.Single get_fakeMirrorTransparency()
    // Offset: 0x2586E04
    float get_fakeMirrorTransparency();
    // public System.Void set_fakeMirrorTransparency(System.Single value)
    // Offset: 0x2586E0C
    void set_fakeMirrorTransparency(float value);
    // protected System.Void Start()
    // Offset: 0x2586E14
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x2586F40
    void OnEnable();
    // protected System.Void OnValidate()
    // Offset: 0x2586F44
    void OnValidate();
    // private System.Void SetGlobalParameters()
    // Offset: 0x2586E18
    void SetGlobalParameters();
    // public System.Void .ctor()
    // Offset: 0x2586F48
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FakeMirrorSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FakeMirrorSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FakeMirrorSettings*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2586FC8
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // FakeMirrorSettings
  #pragma pack(pop)
  static check_size<sizeof(FakeMirrorSettings), 48 + sizeof(float)> __GlobalNamespace_FakeMirrorSettingsSizeCheck;
  static_assert(sizeof(FakeMirrorSettings) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FakeMirrorSettings*, "", "FakeMirrorSettings");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::get_fakeMirrorTransparency
// Il2CppName: get_fakeMirrorTransparency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::FakeMirrorSettings::*)()>(&GlobalNamespace::FakeMirrorSettings::get_fakeMirrorTransparency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), "get_fakeMirrorTransparency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::set_fakeMirrorTransparency
// Il2CppName: set_fakeMirrorTransparency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FakeMirrorSettings::*)(float)>(&GlobalNamespace::FakeMirrorSettings::set_fakeMirrorTransparency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), "set_fakeMirrorTransparency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FakeMirrorSettings::*)()>(&GlobalNamespace::FakeMirrorSettings::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FakeMirrorSettings::*)()>(&GlobalNamespace::FakeMirrorSettings::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FakeMirrorSettings::*)()>(&GlobalNamespace::FakeMirrorSettings::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::SetGlobalParameters
// Il2CppName: SetGlobalParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FakeMirrorSettings::*)()>(&GlobalNamespace::FakeMirrorSettings::SetGlobalParameters)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), "SetGlobalParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorSettings::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::FakeMirrorSettings::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorSettings*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
