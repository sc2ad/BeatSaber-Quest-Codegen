// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameObjectTestExceptionsSO
  class GameObjectTestExceptionsSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GameObjectTestExceptionsSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameObjectTestExceptionsSO*, "", "GameObjectTestExceptionsSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: GameObjectTestExceptionsSO
  // [TokenAttribute] Offset: FFFFFFFF
  class GameObjectTestExceptionsSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException
    class GameObjectTestException;
    public:
    // public GameObjectTestExceptionsSO/GameObjectTestException[] tubeBloomPrePassLightIgnores
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException*> tubeBloomPrePassLightIgnores;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public GameObjectTestExceptionsSO/GameObjectTestException[] tubeBloomPrePassLightIgnores
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException*>& dyn_tubeBloomPrePassLightIgnores();
    // public System.Void .ctor()
    // Offset: 0x142A51C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameObjectTestExceptionsSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameObjectTestExceptionsSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameObjectTestExceptionsSO*, creationType>()));
    }
    // static public System.Collections.Generic.Dictionary`2<EnvironmentInfoSO,System.String[]> GetExceptionAsDictionary(GameObjectTestExceptionsSO/GameObjectTestException[] testExceptionArray)
    // Offset: 0x142A444
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::EnvironmentInfoSO*, ::ArrayW<::StringW>>* GetExceptionAsDictionary(::ArrayW<::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException*> testExceptionArray);
  }; // GameObjectTestExceptionsSO
  #pragma pack(pop)
  static check_size<sizeof(GameObjectTestExceptionsSO), 24 + sizeof(::ArrayW<::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException*>)> __GlobalNamespace_GameObjectTestExceptionsSOSizeCheck;
  static_assert(sizeof(GameObjectTestExceptionsSO) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameObjectTestExceptionsSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GameObjectTestExceptionsSO::GetExceptionAsDictionary
// Il2CppName: GetExceptionAsDictionary
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::EnvironmentInfoSO*, ::ArrayW<::StringW>>* (*)(::ArrayW<::GlobalNamespace::GameObjectTestExceptionsSO::GameObjectTestException*>)>(&GlobalNamespace::GameObjectTestExceptionsSO::GetExceptionAsDictionary)> {
  static const MethodInfo* get() {
    static auto* testExceptionArray = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "GameObjectTestExceptionsSO/GameObjectTestException"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameObjectTestExceptionsSO*), "GetExceptionAsDictionary", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{testExceptionArray});
  }
};
