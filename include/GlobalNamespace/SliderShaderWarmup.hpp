// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SliderMeshController
  class SliderMeshController;
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderShaderWarmup
  class SliderShaderWarmup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderShaderWarmup);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderShaderWarmup*, "", "SliderShaderWarmup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: SliderShaderWarmup
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderShaderWarmup : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private SliderMeshController _sliderMeshController
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SliderMeshController* sliderMeshController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderMeshController*) == 0x8);
    // private MaterialPropertyBlockController _materialPropertyBlockController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MaterialPropertyBlockController* materialPropertyBlockController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockController*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private SliderMeshController _sliderMeshController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshController*& dyn__sliderMeshController();
    // Get instance field reference: private MaterialPropertyBlockController _materialPropertyBlockController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& dyn__materialPropertyBlockController();
    // public System.Void .ctor()
    // Offset: 0x13EA610
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderShaderWarmup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderShaderWarmup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderShaderWarmup*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13EA420
    void Start();
  }; // SliderShaderWarmup
  #pragma pack(pop)
  static check_size<sizeof(SliderShaderWarmup), 32 + sizeof(::GlobalNamespace::MaterialPropertyBlockController*)> __GlobalNamespace_SliderShaderWarmupSizeCheck;
  static_assert(sizeof(SliderShaderWarmup) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderWarmup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderWarmup::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderShaderWarmup::*)()>(&GlobalNamespace::SliderShaderWarmup::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderWarmup*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
