// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SliderController
  class SliderController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderShaderHelper
  class SliderShaderHelper;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderShaderHelper);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderShaderHelper*, "", "SliderShaderHelper");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: SliderShaderHelper
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderShaderHelper : public ::Il2CppObject {
    public:
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEBA8
    // Get static field: static private readonly System.Int32 colorPropertyId
    static int _get_colorPropertyId();
    // Set static field: static private readonly System.Int32 colorPropertyId
    static void _set_colorPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEBB8
    // Get static field: static private readonly System.Int32 saberAttractionPointPropertyId
    static int _get_saberAttractionPointPropertyId();
    // Set static field: static private readonly System.Int32 saberAttractionPointPropertyId
    static void _set_saberAttractionPointPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEBC8
    // Get static field: static private readonly System.Int32 timeSinceHeadNoteJumpPropertyId
    static int _get_timeSinceHeadNoteJumpPropertyId();
    // Set static field: static private readonly System.Int32 timeSinceHeadNoteJumpPropertyId
    static void _set_timeSinceHeadNoteJumpPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEBD8
    // Get static field: static private readonly System.Int32 headNoteJumpDataPropertyId
    static int _get_headNoteJumpDataPropertyId();
    // Set static field: static private readonly System.Int32 headNoteJumpDataPropertyId
    static void _set_headNoteJumpDataPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEBE8
    // Get static field: static private readonly System.Int32 tailNoteJumpDataPropertyId
    static int _get_tailNoteJumpDataPropertyId();
    // Set static field: static private readonly System.Int32 tailNoteJumpDataPropertyId
    static void _set_tailNoteJumpDataPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEBF8
    // Get static field: static private readonly System.Int32 jumpSpeedPropertyId
    static int _get_jumpSpeedPropertyId();
    // Set static field: static private readonly System.Int32 jumpSpeedPropertyId
    static void _set_jumpSpeedPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC08
    // Get static field: static private readonly System.Int32 jumpDistancePropertyId
    static int _get_jumpDistancePropertyId();
    // Set static field: static private readonly System.Int32 jumpDistancePropertyId
    static void _set_jumpDistancePropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC18
    // Get static field: static private readonly System.Int32 randomPropertyId
    static int _get_randomPropertyId();
    // Set static field: static private readonly System.Int32 randomPropertyId
    static void _set_randomPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC28
    // Get static field: static private readonly System.Int32 headFadeLengthPropertyId
    static int _get_headFadeLengthPropertyId();
    // Set static field: static private readonly System.Int32 headFadeLengthPropertyId
    static void _set_headFadeLengthPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC38
    // Get static field: static private readonly System.Int32 tailFadeLengthPropertyId
    static int _get_tailFadeLengthPropertyId();
    // Set static field: static private readonly System.Int32 tailFadeLengthPropertyId
    static void _set_tailFadeLengthPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC48
    // Get static field: static private readonly System.Int32 sliderZLengthPropertyId
    static int _get_sliderZLengthPropertyId();
    // Set static field: static private readonly System.Int32 sliderZLengthPropertyId
    static void _set_sliderZLengthPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC58
    // Get static field: static private readonly System.Int32 sliderLengthPropertyId
    static int _get_sliderLengthPropertyId();
    // Set static field: static private readonly System.Int32 sliderLengthPropertyId
    static void _set_sliderLengthPropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC68
    // Get static field: static private readonly System.Int32 tailHeadNoteJumpOffsetDifferencePropertyId
    static int _get_tailHeadNoteJumpOffsetDifferencePropertyId();
    // Set static field: static private readonly System.Int32 tailHeadNoteJumpOffsetDifferencePropertyId
    static void _set_tailHeadNoteJumpOffsetDifferencePropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10DEC78
    // Get static field: static private readonly System.Int32 saberAttractionMultiplier
    static int _get_saberAttractionMultiplier();
    // Set static field: static private readonly System.Int32 saberAttractionMultiplier
    static void _set_saberAttractionMultiplier(int value);
    // static private System.Void .cctor()
    // Offset: 0x13EA21C
    static void _cctor();
    // static public System.Void SetTimeSinceHeadNoteJump(UnityEngine.MaterialPropertyBlock materialPropertyBlock, System.Single time)
    // Offset: 0x13E9CB0
    static void SetTimeSinceHeadNoteJump(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, float time);
    // static public System.Void SetTailHeadNoteJumpOffsetDifference(UnityEngine.MaterialPropertyBlock materialPropertyBlock, System.Single tailHeadNoteJumpOffsetDifference)
    // Offset: 0x13E9D3C
    static void SetTailHeadNoteJumpOffsetDifference(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, float tailHeadNoteJumpOffsetDifference);
    // static public System.Void SetSaberAttractionPoint(UnityEngine.MaterialPropertyBlock materialPropertyBlock, UnityEngine.Vector3 attractPoint)
    // Offset: 0x13E9DC8
    static void SetSaberAttractionPoint(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Vector3 attractPoint);
    // static public System.Void EnableSaberAttraction(UnityEngine.MaterialPropertyBlock materialPropertyBlock, System.Boolean enableSaberAttraction)
    // Offset: 0x13E6D28
    static void EnableSaberAttraction(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, bool enableSaberAttraction);
    // static public System.Void SetColor(UnityEngine.MaterialPropertyBlock materialPropertyBlock, UnityEngine.Color color)
    // Offset: 0x13E9E9C
    static void SetColor(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Color color);
    // static public System.Void SetInitialProperties(UnityEngine.MaterialPropertyBlock materialPropertyBlock, UnityEngine.Color sliderColor, System.Single headNoteGravity, System.Single tailNoteGravity, System.Single noteJumpMovementSpeed, System.Single jumpDistance, System.Single sliderZLength, System.Single sliderLength, System.Boolean hasHeadNote, System.Boolean hasTailNote, System.Single randomValue)
    // Offset: 0x13E9F48
    static void SetInitialProperties(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::UnityEngine::Color sliderColor, float headNoteGravity, float tailNoteGravity, float noteJumpMovementSpeed, float jumpDistance, float sliderZLength, float sliderLength, bool hasHeadNote, bool hasTailNote, float randomValue);
    // static public System.Void SetInitialProperties(UnityEngine.MaterialPropertyBlock materialPropertyBlock, SliderController sliderController, System.Single noteJumpMovementSpeed)
    // Offset: 0x13E5270
    static void SetInitialProperties(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::GlobalNamespace::SliderController* sliderController, float noteJumpMovementSpeed);
    // static public System.Void UpdateMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock materialPropertyBlock, SliderController sliderController, System.Single timeSinceHeadNoteJump, System.Single jumpOffsetY)
    // Offset: 0x13E63E0
    static void UpdateMaterialPropertyBlock(::UnityEngine::MaterialPropertyBlock* materialPropertyBlock, ::GlobalNamespace::SliderController* sliderController, float timeSinceHeadNoteJump, float jumpOffsetY);
  }; // SliderShaderHelper
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SliderShaderHelper::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::SetTimeSinceHeadNoteJump
// Il2CppName: SetTimeSinceHeadNoteJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, float)>(&GlobalNamespace::SliderShaderHelper::SetTimeSinceHeadNoteJump)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "SetTimeSinceHeadNoteJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::SetTailHeadNoteJumpOffsetDifference
// Il2CppName: SetTailHeadNoteJumpOffsetDifference
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, float)>(&GlobalNamespace::SliderShaderHelper::SetTailHeadNoteJumpOffsetDifference)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* tailHeadNoteJumpOffsetDifference = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "SetTailHeadNoteJumpOffsetDifference", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, tailHeadNoteJumpOffsetDifference});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::SetSaberAttractionPoint
// Il2CppName: SetSaberAttractionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Vector3)>(&GlobalNamespace::SliderShaderHelper::SetSaberAttractionPoint)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* attractPoint = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "SetSaberAttractionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, attractPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::EnableSaberAttraction
// Il2CppName: EnableSaberAttraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, bool)>(&GlobalNamespace::SliderShaderHelper::EnableSaberAttraction)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* enableSaberAttraction = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "EnableSaberAttraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, enableSaberAttraction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::SetColor
// Il2CppName: SetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Color)>(&GlobalNamespace::SliderShaderHelper::SetColor)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "SetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::SetInitialProperties
// Il2CppName: SetInitialProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, ::UnityEngine::Color, float, float, float, float, float, float, bool, bool, float)>(&GlobalNamespace::SliderShaderHelper::SetInitialProperties)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* sliderColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* headNoteGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailNoteGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* noteJumpMovementSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpDistance = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sliderZLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* sliderLength = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* hasHeadNote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hasTailNote = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* randomValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "SetInitialProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, sliderColor, headNoteGravity, tailNoteGravity, noteJumpMovementSpeed, jumpDistance, sliderZLength, sliderLength, hasHeadNote, hasTailNote, randomValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::SetInitialProperties
// Il2CppName: SetInitialProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, ::GlobalNamespace::SliderController*, float)>(&GlobalNamespace::SliderShaderHelper::SetInitialProperties)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    static auto* noteJumpMovementSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "SetInitialProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, sliderController, noteJumpMovementSpeed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderShaderHelper::UpdateMaterialPropertyBlock
// Il2CppName: UpdateMaterialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::UnityEngine::MaterialPropertyBlock*, ::GlobalNamespace::SliderController*, float, float)>(&GlobalNamespace::SliderShaderHelper::UpdateMaterialPropertyBlock)> {
  static const MethodInfo* get() {
    static auto* materialPropertyBlock = &::il2cpp_utils::GetClassFromName("UnityEngine", "MaterialPropertyBlock")->byval_arg;
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    static auto* timeSinceHeadNoteJump = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpOffsetY = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderShaderHelper*), "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{materialPropertyBlock, sliderController, timeSinceHeadNoteJump, jumpOffsetY});
  }
};
