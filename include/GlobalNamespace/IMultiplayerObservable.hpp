// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: IMultiplayerObservable
  // [TokenAttribute] Offset: FFFFFFFF
  class IMultiplayerObservable {
    public:
    // Creating value type constructor for type: IMultiplayerObservable
    IMultiplayerObservable() noexcept {}
    // public System.Single get_offsetSyncTime()
    // Offset: 0xFFFFFFFF
    float get_offsetSyncTime();
    // public System.Boolean get_isFailed()
    // Offset: 0xFFFFFFFF
    bool get_isFailed();
  }; // IMultiplayerObservable
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::IMultiplayerObservable*, "", "IMultiplayerObservable");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerObservable::get_offsetSyncTime
// Il2CppName: get_offsetSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::IMultiplayerObservable::*)()>(&GlobalNamespace::IMultiplayerObservable::get_offsetSyncTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerObservable*), "get_offsetSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerObservable::get_isFailed
// Il2CppName: get_isFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::IMultiplayerObservable::*)()>(&GlobalNamespace::IMultiplayerObservable::get_isFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerObservable*), "get_isFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
