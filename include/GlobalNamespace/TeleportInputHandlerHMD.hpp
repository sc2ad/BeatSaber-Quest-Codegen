// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportInputHandler
#include "GlobalNamespace/TeleportInputHandler.hpp"
// Including type: OVRInput/RawButton
#include "GlobalNamespace/OVRInput_RawButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Ray
  struct Ray;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportInputHandlerHMD
  class TeleportInputHandlerHMD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportInputHandlerHMD);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportInputHandlerHMD*, "", "TeleportInputHandlerHMD");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x49
  #pragma pack(push, 1)
  // Autogenerated type: TeleportInputHandlerHMD
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportInputHandlerHMD : public ::GlobalNamespace::TeleportInputHandler {
    public:
    public:
    // private UnityEngine.Transform <Pointer>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* Pointer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0x993F60
    // public OVRInput/RawButton AimButton
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::OVRInput::RawButton AimButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawButton) == 0x4);
    // [TooltipAttribute] Offset: 0x993F98
    // public OVRInput/RawButton TeleportButton
    // Size: 0x4
    // Offset: 0x44
    ::GlobalNamespace::OVRInput::RawButton TeleportButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::RawButton) == 0x4);
    // [TooltipAttribute] Offset: 0x993FD0
    // public System.Boolean FastTeleport
    // Size: 0x1
    // Offset: 0x48
    bool FastTeleport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.Transform <Pointer>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_$Pointer$k__BackingField();
    // Get instance field reference: public OVRInput/RawButton AimButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& dyn_AimButton();
    // Get instance field reference: public OVRInput/RawButton TeleportButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::RawButton& dyn_TeleportButton();
    // Get instance field reference: public System.Boolean FastTeleport
    [[deprecated("Use field access instead!")]] bool& dyn_FastTeleport();
    // public UnityEngine.Transform get_Pointer()
    // Offset: 0xCF5418
    ::UnityEngine::Transform* get_Pointer();
    // private System.Void set_Pointer(UnityEngine.Transform value)
    // Offset: 0xCF5420
    void set_Pointer(::UnityEngine::Transform* value);
    // public System.Void .ctor()
    // Offset: 0xCF563C
    // Implemented from: TeleportInputHandler
    // Base method: System.Void TeleportInputHandler::.ctor()
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportInputHandlerHMD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportInputHandlerHMD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportInputHandlerHMD*, creationType>()));
    }
    // public override LocomotionTeleport/TeleportIntentions GetIntention()
    // Offset: 0xCF5428
    // Implemented from: TeleportInputHandler
    // Base method: LocomotionTeleport/TeleportIntentions TeleportInputHandler::GetIntention()
    ::GlobalNamespace::LocomotionTeleport::TeleportIntentions GetIntention();
    // public override System.Void GetAimData(out UnityEngine.Ray aimRay)
    // Offset: 0xCF5584
    // Implemented from: TeleportInputHandler
    // Base method: System.Void TeleportInputHandler::GetAimData(out UnityEngine.Ray aimRay)
    void GetAimData(ByRef<::UnityEngine::Ray> aimRay);
  }; // TeleportInputHandlerHMD
  #pragma pack(pop)
  static check_size<sizeof(TeleportInputHandlerHMD), 72 + sizeof(bool)> __GlobalNamespace_TeleportInputHandlerHMDSizeCheck;
  static_assert(sizeof(TeleportInputHandlerHMD) == 0x49);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandlerHMD::get_Pointer
// Il2CppName: get_Pointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::TeleportInputHandlerHMD::*)()>(&GlobalNamespace::TeleportInputHandlerHMD::get_Pointer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandlerHMD*), "get_Pointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandlerHMD::set_Pointer
// Il2CppName: set_Pointer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandlerHMD::*)(::UnityEngine::Transform*)>(&GlobalNamespace::TeleportInputHandlerHMD::set_Pointer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandlerHMD*), "set_Pointer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandlerHMD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandlerHMD::GetIntention
// Il2CppName: GetIntention
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LocomotionTeleport::TeleportIntentions (GlobalNamespace::TeleportInputHandlerHMD::*)()>(&GlobalNamespace::TeleportInputHandlerHMD::GetIntention)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandlerHMD*), "GetIntention", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandlerHMD::GetAimData
// Il2CppName: GetAimData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandlerHMD::*)(ByRef<::UnityEngine::Ray>)>(&GlobalNamespace::TeleportInputHandlerHMD::GetAimData)> {
  static const MethodInfo* get() {
    static auto* aimRay = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandlerHMD*), "GetAimData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aimRay});
  }
};
