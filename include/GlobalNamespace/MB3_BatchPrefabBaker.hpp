// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB3_BatchPrefabBaker
  class MB3_BatchPrefabBaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB3_BatchPrefabBaker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB3_BatchPrefabBaker*, "", "MB3_BatchPrefabBaker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: MB3_BatchPrefabBaker
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_BatchPrefabBaker : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MB3_BatchPrefabBaker::MB3_PrefabBakerRow
    class MB3_PrefabBakerRow;
    public:
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x18
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // Padding between fields: LOG_LEVEL and: prefabRows
    char __padding0[0x4] = {};
    // public MB3_BatchPrefabBaker/MB3_PrefabBakerRow[] prefabRows
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::MB3_BatchPrefabBaker::MB3_PrefabBakerRow*> prefabRows;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB3_BatchPrefabBaker::MB3_PrefabBakerRow*>) == 0x8);
    // public System.String outputPrefabFolder
    // Size: 0x8
    // Offset: 0x28
    ::StringW outputPrefabFolder;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: public MB3_BatchPrefabBaker/MB3_PrefabBakerRow[] prefabRows
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB3_BatchPrefabBaker::MB3_PrefabBakerRow*>& dyn_prefabRows();
    // Get instance field reference: public System.String outputPrefabFolder
    [[deprecated("Use field access instead!")]] ::StringW& dyn_outputPrefabFolder();
    // public System.Void .ctor()
    // Offset: 0x11C44A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_BatchPrefabBaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB3_BatchPrefabBaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_BatchPrefabBaker*, creationType>()));
    }
    // public System.Void CreateSourceAndResultPrefabInstances()
    // Offset: 0x11C4434
    void CreateSourceAndResultPrefabInstances();
  }; // MB3_BatchPrefabBaker
  #pragma pack(pop)
  static check_size<sizeof(MB3_BatchPrefabBaker), 40 + sizeof(::StringW)> __GlobalNamespace_MB3_BatchPrefabBakerSizeCheck;
  static_assert(sizeof(MB3_BatchPrefabBaker) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB3_BatchPrefabBaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB3_BatchPrefabBaker::CreateSourceAndResultPrefabInstances
// Il2CppName: CreateSourceAndResultPrefabInstances
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_BatchPrefabBaker::*)()>(&GlobalNamespace::MB3_BatchPrefabBaker::CreateSourceAndResultPrefabInstances)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_BatchPrefabBaker*), "CreateSourceAndResultPrefabInstances", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
