// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.SelectableCell
#include "HMUI/SelectableCell.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAnnotatedBeatmapLevelCollection
  class IAnnotatedBeatmapLevelCollection;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ImageView
  class ImageView;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AnnotatedBeatmapLevelCollectionCell
  class AnnotatedBeatmapLevelCollectionCell;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AnnotatedBeatmapLevelCollectionCell);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*, "", "AnnotatedBeatmapLevelCollectionCell");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: AnnotatedBeatmapLevelCollectionCell
  // [TokenAttribute] Offset: FFFFFFFF
  class AnnotatedBeatmapLevelCollectionCell : public ::HMUI::SelectableCell {
    public:
    // Writing base type padding for base size: 0x42 to desired offset: 0x48
    char ___base_padding[0x6] = {};
    // Nested type: ::GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::$RefreshAvailabilityAsync$d__22
    struct $RefreshAvailabilityAsync$d__22;
    public:
    // private TMPro.TextMeshProUGUI _infoText
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TextMeshProUGUI* infoText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private HMUI.ImageView _coverImage
    // Size: 0x8
    // Offset: 0x50
    ::HMUI::ImageView* coverImage;
    // Field size check
    static_assert(sizeof(::HMUI::ImageView*) == 0x8);
    // private HMUI.ImageView _selectionImage
    // Size: 0x8
    // Offset: 0x58
    ::HMUI::ImageView* selectionImage;
    // Field size check
    static_assert(sizeof(::HMUI::ImageView*) == 0x8);
    // private UnityEngine.GameObject _downloadIconObject
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* downloadIconObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [SpaceAttribute] Offset: 0x1128740
    // private UnityEngine.GameObject _newBadgeObject
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::GameObject* newBadgeObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _updatedBadgeObject
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::GameObject* updatedBadgeObject;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [SpaceAttribute] Offset: 0x1128788
    // private UnityEngine.Color _selectedColor0
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Color selectedColor0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _selectedColor1
    // Size: 0x10
    // Offset: 0x88
    ::UnityEngine::Color selectedColor1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _highlightedColor0
    // Size: 0x10
    // Offset: 0x98
    ::UnityEngine::Color highlightedColor0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _highlightedColor1
    // Size: 0x10
    // Offset: 0xA8
    ::UnityEngine::Color highlightedColor1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Int32 <cellIndex>k__BackingField
    // Size: 0x4
    // Offset: 0xB8
    int cellIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: cellIndex and: annotatedBeatmapLevelCollection
    char __padding10[0x4] = {};
    // private IAnnotatedBeatmapLevelCollection _annotatedBeatmapLevelCollection
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IAnnotatedBeatmapLevelCollection*) == 0x8);
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Size: 0x8
    // Offset: 0xC8
    ::System::Threading::CancellationTokenSource* cancellationTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    public:
    // Get instance field reference: private TMPro.TextMeshProUGUI _infoText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__infoText();
    // Get instance field reference: private HMUI.ImageView _coverImage
    [[deprecated("Use field access instead!")]] ::HMUI::ImageView*& dyn__coverImage();
    // Get instance field reference: private HMUI.ImageView _selectionImage
    [[deprecated("Use field access instead!")]] ::HMUI::ImageView*& dyn__selectionImage();
    // Get instance field reference: private UnityEngine.GameObject _downloadIconObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__downloadIconObject();
    // Get instance field reference: private UnityEngine.GameObject _newBadgeObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__newBadgeObject();
    // Get instance field reference: private UnityEngine.GameObject _updatedBadgeObject
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__updatedBadgeObject();
    // Get instance field reference: private UnityEngine.Color _selectedColor0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectedColor0();
    // Get instance field reference: private UnityEngine.Color _selectedColor1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__selectedColor1();
    // Get instance field reference: private UnityEngine.Color _highlightedColor0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__highlightedColor0();
    // Get instance field reference: private UnityEngine.Color _highlightedColor1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__highlightedColor1();
    // Get instance field reference: private System.Int32 <cellIndex>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$cellIndex$k__BackingField();
    // Get instance field reference: private IAnnotatedBeatmapLevelCollection _annotatedBeatmapLevelCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*& dyn__annotatedBeatmapLevelCollection();
    // Get instance field reference: private System.Threading.CancellationTokenSource _cancellationTokenSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__cancellationTokenSource();
    // public System.Int32 get_cellIndex()
    // Offset: 0x1573B0C
    int get_cellIndex();
    // public System.Void set_cellIndex(System.Int32 value)
    // Offset: 0x1573B14
    void set_cellIndex(int value);
    // public System.Void .ctor()
    // Offset: 0x1574144
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnnotatedBeatmapLevelCollectionCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnnotatedBeatmapLevelCollectionCell*, creationType>()));
    }
    // public System.Void SetData(IAnnotatedBeatmapLevelCollection annotatedBeatmapLevelCollection, System.Boolean isPromoted, System.Boolean isUpdated)
    // Offset: 0x1573B1C
    void SetData(::GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection, bool isPromoted, bool isUpdated);
    // private System.Void RefreshVisuals()
    // Offset: 0x1573F6C
    void RefreshVisuals();
    // private System.String GetInfoText(System.String name, System.Int32 songs, System.Int32 purchased)
    // Offset: 0x1573E14
    ::StringW GetInfoText(::StringW name, int songs, int purchased);
    // public System.Void RefreshAvailabilityAsync(AdditionalContentModel contentModel)
    // Offset: 0x157406C
    void RefreshAvailabilityAsync(::GlobalNamespace::AdditionalContentModel* contentModel);
    // private System.Void SetDownloadIconVisible(System.Boolean visible)
    // Offset: 0x1573EFC
    void SetDownloadIconVisible(bool visible);
    // public System.Void CancelAsyncOperations()
    // Offset: 0x1574130
    void CancelAsyncOperations();
    // protected override System.Void InternalToggle()
    // Offset: 0x1573F44
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::InternalToggle()
    void InternalToggle();
    // protected override System.Void SelectionDidChange(HMUI.SelectableCell/HMUI.TransitionType transitionType)
    // Offset: 0x1573F68
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::SelectionDidChange(HMUI.SelectableCell/HMUI.TransitionType transitionType)
    void SelectionDidChange(::HMUI::SelectableCell::TransitionType transitionType);
    // protected override System.Void HighlightDidChange(HMUI.SelectableCell/HMUI.TransitionType transitionType)
    // Offset: 0x1574068
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::HighlightDidChange(HMUI.SelectableCell/HMUI.TransitionType transitionType)
    void HighlightDidChange(::HMUI::SelectableCell::TransitionType transitionType);
  }; // AnnotatedBeatmapLevelCollectionCell
  #pragma pack(pop)
  static check_size<sizeof(AnnotatedBeatmapLevelCollectionCell), 200 + sizeof(::System::Threading::CancellationTokenSource*)> __GlobalNamespace_AnnotatedBeatmapLevelCollectionCellSizeCheck;
  static_assert(sizeof(AnnotatedBeatmapLevelCollectionCell) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::get_cellIndex
// Il2CppName: get_cellIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)()>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::get_cellIndex)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "get_cellIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::set_cellIndex
// Il2CppName: set_cellIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(int)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::set_cellIndex)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "set_cellIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, bool, bool)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::SetData)> {
  static const MethodInfo* get() {
    static auto* annotatedBeatmapLevelCollection = &::il2cpp_utils::GetClassFromName("", "IAnnotatedBeatmapLevelCollection")->byval_arg;
    static auto* isPromoted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isUpdated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotatedBeatmapLevelCollection, isPromoted, isUpdated});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::RefreshVisuals
// Il2CppName: RefreshVisuals
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)()>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::RefreshVisuals)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "RefreshVisuals", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::GetInfoText
// Il2CppName: GetInfoText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(::StringW, int, int)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::GetInfoText)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songs = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* purchased = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "GetInfoText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, songs, purchased});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::RefreshAvailabilityAsync
// Il2CppName: RefreshAvailabilityAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(::GlobalNamespace::AdditionalContentModel*)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::RefreshAvailabilityAsync)> {
  static const MethodInfo* get() {
    static auto* contentModel = &::il2cpp_utils::GetClassFromName("", "AdditionalContentModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "RefreshAvailabilityAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{contentModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::SetDownloadIconVisible
// Il2CppName: SetDownloadIconVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(bool)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::SetDownloadIconVisible)> {
  static const MethodInfo* get() {
    static auto* visible = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "SetDownloadIconVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{visible});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::CancelAsyncOperations
// Il2CppName: CancelAsyncOperations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)()>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::CancelAsyncOperations)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "CancelAsyncOperations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::InternalToggle
// Il2CppName: InternalToggle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)()>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::InternalToggle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "InternalToggle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::SelectionDidChange
// Il2CppName: SelectionDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(::HMUI::SelectableCell::TransitionType)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::SelectionDidChange)> {
  static const MethodInfo* get() {
    static auto* transitionType = &::il2cpp_utils::GetClassFromName("HMUI", "SelectableCell/TransitionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "SelectionDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transitionType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::HighlightDidChange
// Il2CppName: HighlightDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::*)(::HMUI::SelectableCell::TransitionType)>(&GlobalNamespace::AnnotatedBeatmapLevelCollectionCell::HighlightDidChange)> {
  static const MethodInfo* get() {
    static auto* transitionType = &::il2cpp_utils::GetClassFromName("HMUI", "SelectableCell/TransitionType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnnotatedBeatmapLevelCollectionCell*), "HighlightDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{transitionType});
  }
};
