// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteData
  class NoteData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectsInTimeRowProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectsInTimeRowProcessor : public ::Il2CppObject {
    public:
    // private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowColorNotes
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* currentTimeRowColorNotes;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowAllNotes
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* currentTimeRowAllNotes;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<NoteData>[] _notesInColumns
    // Size: 0x8
    // Offset: 0x20
    ::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>* notesInColumns;
    // Field size check
    static_assert(sizeof(::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>*) == 0x8);
    // private System.Single _prevBasicNotesTimeRowTime
    // Size: 0x4
    // Offset: 0x28
    float prevBasicNotesTimeRowTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: BeatmapObjectsInTimeRowProcessor
    BeatmapObjectsInTimeRowProcessor(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* currentTimeRowColorNotes_ = {}, System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* currentTimeRowAllNotes_ = {}, ::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>* notesInColumns_ = {}, float prevBasicNotesTimeRowTime_ = {}) noexcept : currentTimeRowColorNotes{currentTimeRowColorNotes_}, currentTimeRowAllNotes{currentTimeRowAllNotes_}, notesInColumns{notesInColumns_}, prevBasicNotesTimeRowTime{prevBasicNotesTimeRowTime_} {}
    // static field const value: static private System.Single kTimeRowEpsilon
    static constexpr const float kTimeRowEpsilon = 0.001;
    // Get static field: static private System.Single kTimeRowEpsilon
    static float _get_kTimeRowEpsilon();
    // Set static field: static private System.Single kTimeRowEpsilon
    static void _set_kTimeRowEpsilon(float value);
    // Get instance field reference: private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowColorNotes
    System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*& dyn__currentTimeRowColorNotes();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<NoteData> _currentTimeRowAllNotes
    System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*& dyn__currentTimeRowAllNotes();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<NoteData>[] _notesInColumns
    ::Array<System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>*& dyn__notesInColumns();
    // Get instance field reference: private System.Single _prevBasicNotesTimeRowTime
    float& dyn__prevBasicNotesTimeRowTime();
    // public System.Void .ctor(System.Int32 numberOfLines)
    // Offset: 0x2613D58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectsInTimeRowProcessor* New_ctor(int numberOfLines) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectsInTimeRowProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectsInTimeRowProcessor*, creationType>(numberOfLines)));
    }
    // public System.Void ProcessNote(NoteData noteData)
    // Offset: 0x2613ECC
    void ProcessNote(GlobalNamespace::NoteData* noteData);
    // private System.Boolean TimeIsOverCurrentTimeRow(System.Single time)
    // Offset: 0x26143B4
    bool TimeIsOverCurrentTimeRow(float time);
    // public System.Void ProcessAllRemainingData()
    // Offset: 0x2614698
    void ProcessAllRemainingData();
    // static private System.Void ProcessColorNotesInTimeRow(System.Collections.Generic.IList`1<NoteData> colorNotesData, System.Single nextBasicNoteTimeRowTime)
    // Offset: 0x2613FF0
    static void ProcessColorNotesInTimeRow(System::Collections::Generic::IList_1<GlobalNamespace::NoteData*>* colorNotesData, float nextBasicNoteTimeRowTime);
    // private System.Void ProcessAllNotesInTimeRow(System.Collections.Generic.List`1<NoteData> notesInTimeRow)
    // Offset: 0x2614444
    void ProcessAllNotesInTimeRow(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* notesInTimeRow);
  }; // BeatmapObjectsInTimeRowProcessor
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectsInTimeRowProcessor), 40 + sizeof(float)> __GlobalNamespace_BeatmapObjectsInTimeRowProcessorSizeCheck;
  static_assert(sizeof(BeatmapObjectsInTimeRowProcessor) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectsInTimeRowProcessor*, "", "BeatmapObjectsInTimeRowProcessor");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsInTimeRowProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessNote
// Il2CppName: ProcessNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectsInTimeRowProcessor::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessNote)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectsInTimeRowProcessor*), "ProcessNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsInTimeRowProcessor::TimeIsOverCurrentTimeRow
// Il2CppName: TimeIsOverCurrentTimeRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapObjectsInTimeRowProcessor::*)(float)>(&GlobalNamespace::BeatmapObjectsInTimeRowProcessor::TimeIsOverCurrentTimeRow)> {
  static const MethodInfo* get() {
    static auto* time = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectsInTimeRowProcessor*), "TimeIsOverCurrentTimeRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{time});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessAllRemainingData
// Il2CppName: ProcessAllRemainingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectsInTimeRowProcessor::*)()>(&GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessAllRemainingData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectsInTimeRowProcessor*), "ProcessAllRemainingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessColorNotesInTimeRow
// Il2CppName: ProcessColorNotesInTimeRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(System::Collections::Generic::IList_1<GlobalNamespace::NoteData*>*, float)>(&GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessColorNotesInTimeRow)> {
  static const MethodInfo* get() {
    static auto* colorNotesData = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData")})->byval_arg;
    static auto* nextBasicNoteTimeRowTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectsInTimeRowProcessor*), "ProcessColorNotesInTimeRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorNotesData, nextBasicNoteTimeRowTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessAllNotesInTimeRow
// Il2CppName: ProcessAllNotesInTimeRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectsInTimeRowProcessor::*)(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*)>(&GlobalNamespace::BeatmapObjectsInTimeRowProcessor::ProcessAllNotesInTimeRow)> {
  static const MethodInfo* get() {
    static auto* notesInTimeRow = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectsInTimeRowProcessor*), "ProcessAllNotesInTimeRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{notesInTimeRow});
  }
};
