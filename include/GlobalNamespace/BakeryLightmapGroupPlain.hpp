// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BakeryLightmapGroupPlain
  struct BakeryLightmapGroupPlain;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryLightmapGroupPlain, "", "BakeryLightmapGroupPlain");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: BakeryLightmapGroupPlain
  // [TokenAttribute] Offset: FFFFFFFF
  struct BakeryLightmapGroupPlain/*, public ::System::ValueType*/ {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x0
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 resolution
    // Size: 0x4
    // Offset: 0x8
    int resolution;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 id
    // Size: 0x4
    // Offset: 0xC
    int id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 renderMode
    // Size: 0x4
    // Offset: 0x10
    int renderMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 renderDirMode
    // Size: 0x4
    // Offset: 0x14
    int renderDirMode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 atlasPacker
    // Size: 0x4
    // Offset: 0x18
    int atlasPacker;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean vertexBake
    // Size: 0x1
    // Offset: 0x1C
    bool vertexBake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean containsTerrains
    // Size: 0x1
    // Offset: 0x1D
    bool containsTerrains;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean probes
    // Size: 0x1
    // Offset: 0x1E
    bool probes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isImplicit
    // Size: 0x1
    // Offset: 0x1F
    bool isImplicit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean computeSSS
    // Size: 0x1
    // Offset: 0x20
    bool computeSSS;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: computeSSS and: sssSamples
    char __padding10[0x3] = {};
    // public System.Int32 sssSamples
    // Size: 0x4
    // Offset: 0x24
    int sssSamples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single sssDensity
    // Size: 0x4
    // Offset: 0x28
    float sssDensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sssR
    // Size: 0x4
    // Offset: 0x2C
    float sssR;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sssG
    // Size: 0x4
    // Offset: 0x30
    float sssG;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sssB
    // Size: 0x4
    // Offset: 0x34
    float sssB;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fakeShadowBias
    // Size: 0x4
    // Offset: 0x38
    float fakeShadowBias;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean transparentSelfShadow
    // Size: 0x1
    // Offset: 0x3C
    bool transparentSelfShadow;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipNormal
    // Size: 0x1
    // Offset: 0x3D
    bool flipNormal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipNormal and: parentName
    char __padding18[0x2] = {};
    // public System.String parentName
    // Size: 0x8
    // Offset: 0x40
    ::StringW parentName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 sceneLodLevel
    // Size: 0x4
    // Offset: 0x48
    int sceneLodLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating value type constructor for type: BakeryLightmapGroupPlain
    constexpr BakeryLightmapGroupPlain(::StringW name_ = {}, int resolution_ = {}, int id_ = {}, int renderMode_ = {}, int renderDirMode_ = {}, int atlasPacker_ = {}, bool vertexBake_ = {}, bool containsTerrains_ = {}, bool probes_ = {}, bool isImplicit_ = {}, bool computeSSS_ = {}, int sssSamples_ = {}, float sssDensity_ = {}, float sssR_ = {}, float sssG_ = {}, float sssB_ = {}, float fakeShadowBias_ = {}, bool transparentSelfShadow_ = {}, bool flipNormal_ = {}, ::StringW parentName_ = {}, int sceneLodLevel_ = {}) noexcept : name{name_}, resolution{resolution_}, id{id_}, renderMode{renderMode_}, renderDirMode{renderDirMode_}, atlasPacker{atlasPacker_}, vertexBake{vertexBake_}, containsTerrains{containsTerrains_}, probes{probes_}, isImplicit{isImplicit_}, computeSSS{computeSSS_}, sssSamples{sssSamples_}, sssDensity{sssDensity_}, sssR{sssR_}, sssG{sssG_}, sssB{sssB_}, fakeShadowBias{fakeShadowBias_}, transparentSelfShadow{transparentSelfShadow_}, flipNormal{flipNormal_}, parentName{parentName_}, sceneLodLevel{sceneLodLevel_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public System.Int32 resolution
    [[deprecated("Use field access instead!")]] int& dyn_resolution();
    // Get instance field reference: public System.Int32 id
    [[deprecated("Use field access instead!")]] int& dyn_id();
    // Get instance field reference: public System.Int32 renderMode
    [[deprecated("Use field access instead!")]] int& dyn_renderMode();
    // Get instance field reference: public System.Int32 renderDirMode
    [[deprecated("Use field access instead!")]] int& dyn_renderDirMode();
    // Get instance field reference: public System.Int32 atlasPacker
    [[deprecated("Use field access instead!")]] int& dyn_atlasPacker();
    // Get instance field reference: public System.Boolean vertexBake
    [[deprecated("Use field access instead!")]] bool& dyn_vertexBake();
    // Get instance field reference: public System.Boolean containsTerrains
    [[deprecated("Use field access instead!")]] bool& dyn_containsTerrains();
    // Get instance field reference: public System.Boolean probes
    [[deprecated("Use field access instead!")]] bool& dyn_probes();
    // Get instance field reference: public System.Boolean isImplicit
    [[deprecated("Use field access instead!")]] bool& dyn_isImplicit();
    // Get instance field reference: public System.Boolean computeSSS
    [[deprecated("Use field access instead!")]] bool& dyn_computeSSS();
    // Get instance field reference: public System.Int32 sssSamples
    [[deprecated("Use field access instead!")]] int& dyn_sssSamples();
    // Get instance field reference: public System.Single sssDensity
    [[deprecated("Use field access instead!")]] float& dyn_sssDensity();
    // Get instance field reference: public System.Single sssR
    [[deprecated("Use field access instead!")]] float& dyn_sssR();
    // Get instance field reference: public System.Single sssG
    [[deprecated("Use field access instead!")]] float& dyn_sssG();
    // Get instance field reference: public System.Single sssB
    [[deprecated("Use field access instead!")]] float& dyn_sssB();
    // Get instance field reference: public System.Single fakeShadowBias
    [[deprecated("Use field access instead!")]] float& dyn_fakeShadowBias();
    // Get instance field reference: public System.Boolean transparentSelfShadow
    [[deprecated("Use field access instead!")]] bool& dyn_transparentSelfShadow();
    // Get instance field reference: public System.Boolean flipNormal
    [[deprecated("Use field access instead!")]] bool& dyn_flipNormal();
    // Get instance field reference: public System.String parentName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_parentName();
    // Get instance field reference: public System.Int32 sceneLodLevel
    [[deprecated("Use field access instead!")]] int& dyn_sceneLodLevel();
  }; // BakeryLightmapGroupPlain
  #pragma pack(pop)
  static check_size<sizeof(BakeryLightmapGroupPlain), 72 + sizeof(int)> __GlobalNamespace_BakeryLightmapGroupPlainSizeCheck;
  static_assert(sizeof(BakeryLightmapGroupPlain) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
