// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: GameplayServerConfiguration
  struct GameplayServerConfiguration;
  // Forward declaring type: BeatmapLevelSelectionMask
  struct BeatmapLevelSelectionMask;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: UnconnectedMessageType
  struct UnconnectedMessageType;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: DisconnectInfo
  struct DisconnectInfo;
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketError
  struct SocketError;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: LocalNetworkDiscoveryManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalNetworkDiscoveryManager : public UnityEngine::MonoBehaviour/*, public LiteNetLib::INetEventListener*/ {
    public:
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::PacketType
    struct PacketType;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket
    class BroadcastPacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket
    class JoinRequestPacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket
    class JoinResponsePacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket
    class InviteRequestPacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket
    class InviteResponsePacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate
    class PeerUpdatedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate
    class JoinRequestedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate
    class JoinRespondedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate
    class InviteRequestedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate
    class InviteRespondedDelegate;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: LocalNetworkDiscoveryManager/PacketType
    // [TokenAttribute] Offset: FFFFFFFF
    struct PacketType/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: PacketType
      constexpr PacketType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType Broadcast
      static constexpr const uint8_t Broadcast = 0u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType Broadcast
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_Broadcast();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType Broadcast
      static void _set_Broadcast(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
      static constexpr const uint8_t JoinRequest = 1u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_JoinRequest();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
      static void _set_JoinRequest(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
      static constexpr const uint8_t JoinResponse = 2u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_JoinResponse();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
      static void _set_JoinResponse(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
      static constexpr const uint8_t InviteRequest = 3u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_InviteRequest();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
      static void _set_InviteRequest(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
      static constexpr const uint8_t InviteResponse = 4u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_InviteResponse();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
      static void _set_InviteResponse(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // Get instance field reference: public System.Byte value__
      uint8_t& dyn_value__();
    }; // LocalNetworkDiscoveryManager/PacketType
    #pragma pack(pop)
    static check_size<sizeof(LocalNetworkDiscoveryManager::PacketType), 0 + sizeof(uint8_t)> __GlobalNamespace_LocalNetworkDiscoveryManager_PacketTypeSizeCheck;
    static_assert(sizeof(LocalNetworkDiscoveryManager::PacketType) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xF0335C
    // private LocalNetworkDiscoveryManager/PeerUpdatedDelegate peerUpdatedEvent
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* peerUpdatedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0336C
    // private LocalNetworkDiscoveryManager/JoinRequestedDelegate joinRequestedEvent
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* joinRequestedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0337C
    // private LocalNetworkDiscoveryManager/JoinRespondedDelegate joinRespondedEvent
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* joinRespondedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0338C
    // private LocalNetworkDiscoveryManager/InviteRequestedDelegate inviteRequestedEvent
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* inviteRequestedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0339C
    // private LocalNetworkDiscoveryManager/InviteRespondedDelegate inviteRespondedEvent
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* inviteRespondedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*) == 0x8);
    // private LiteNetLib.NetManager _netManager
    // Size: 0x8
    // Offset: 0x40
    LiteNetLib::NetManager* netManager;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetManager*) == 0x8);
    // private readonly NetworkPacketSerializer`2<LocalNetworkDiscoveryManager/PacketType,System.Net.IPEndPoint> _packetSerializer
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>* packetSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _netDataWriter
    // Size: 0x8
    // Offset: 0x50
    LiteNetLib::Utils::NetDataWriter* netDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LocalNetworkDiscoveryManager/BroadcastPacket _broadcastPacket
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* broadcastPacket;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket*) == 0x8);
    // private System.Int32 _discoveryPort
    // Size: 0x4
    // Offset: 0x60
    int discoveryPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x64
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _enableBroadcasting
    // Size: 0x1
    // Offset: 0x65
    bool enableBroadcasting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableBroadcasting and: lastBroadcastTime
    char __padding11[0x2] = {};
    // private System.Single _lastBroadcastTime
    // Size: 0x4
    // Offset: 0x68
    float lastBroadcastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: LocalNetworkDiscoveryManager
    LocalNetworkDiscoveryManager(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* peerUpdatedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* joinRequestedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* joinRespondedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* inviteRequestedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* inviteRespondedEvent_ = {}, LiteNetLib::NetManager* netManager_ = {}, GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>* packetSerializer_ = {}, LiteNetLib::Utils::NetDataWriter* netDataWriter_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* broadcastPacket_ = {}, int discoveryPort_ = {}, bool initialized_ = {}, bool enableBroadcasting_ = {}, float lastBroadcastTime_ = {}) noexcept : peerUpdatedEvent{peerUpdatedEvent_}, joinRequestedEvent{joinRequestedEvent_}, joinRespondedEvent{joinRespondedEvent_}, inviteRequestedEvent{inviteRequestedEvent_}, inviteRespondedEvent{inviteRespondedEvent_}, netManager{netManager_}, packetSerializer{packetSerializer_}, netDataWriter{netDataWriter_}, broadcastPacket{broadcastPacket_}, discoveryPort{discoveryPort_}, initialized{initialized_}, enableBroadcasting{enableBroadcasting_}, lastBroadcastTime{lastBroadcastTime_} {}
    // Creating interface conversion operator: operator LiteNetLib::INetEventListener
    operator LiteNetLib::INetEventListener() noexcept {
      return *reinterpret_cast<LiteNetLib::INetEventListener*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kBroadcastInterval
    static constexpr const float kBroadcastInterval = 5;
    // Get static field: static private System.Single kBroadcastInterval
    static float _get_kBroadcastInterval();
    // Set static field: static private System.Single kBroadcastInterval
    static void _set_kBroadcastInterval(float value);
    // static field const value: static private System.UInt32 kSignature
    static constexpr const uint kSignature = 3014087859u;
    // Get static field: static private System.UInt32 kSignature
    static uint _get_kSignature();
    // Set static field: static private System.UInt32 kSignature
    static void _set_kSignature(uint value);
    // Get instance field reference: private LocalNetworkDiscoveryManager/PeerUpdatedDelegate peerUpdatedEvent
    GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*& dyn_peerUpdatedEvent();
    // Get instance field reference: private LocalNetworkDiscoveryManager/JoinRequestedDelegate joinRequestedEvent
    GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*& dyn_joinRequestedEvent();
    // Get instance field reference: private LocalNetworkDiscoveryManager/JoinRespondedDelegate joinRespondedEvent
    GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*& dyn_joinRespondedEvent();
    // Get instance field reference: private LocalNetworkDiscoveryManager/InviteRequestedDelegate inviteRequestedEvent
    GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*& dyn_inviteRequestedEvent();
    // Get instance field reference: private LocalNetworkDiscoveryManager/InviteRespondedDelegate inviteRespondedEvent
    GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*& dyn_inviteRespondedEvent();
    // Get instance field reference: private LiteNetLib.NetManager _netManager
    LiteNetLib::NetManager*& dyn__netManager();
    // Get instance field reference: private readonly NetworkPacketSerializer`2<LocalNetworkDiscoveryManager/PacketType,System.Net.IPEndPoint> _packetSerializer
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>*& dyn__packetSerializer();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataWriter _netDataWriter
    LiteNetLib::Utils::NetDataWriter*& dyn__netDataWriter();
    // Get instance field reference: private readonly LocalNetworkDiscoveryManager/BroadcastPacket _broadcastPacket
    GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket*& dyn__broadcastPacket();
    // Get instance field reference: private System.Int32 _discoveryPort
    int& dyn__discoveryPort();
    // Get instance field reference: private System.Boolean _initialized
    bool& dyn__initialized();
    // Get instance field reference: private System.Boolean _enableBroadcasting
    bool& dyn__enableBroadcasting();
    // Get instance field reference: private System.Single _lastBroadcastTime
    float& dyn__lastBroadcastTime();
    // public System.Void add_peerUpdatedEvent(LocalNetworkDiscoveryManager/PeerUpdatedDelegate value)
    // Offset: 0x1258354
    void add_peerUpdatedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* value);
    // public System.Void remove_peerUpdatedEvent(LocalNetworkDiscoveryManager/PeerUpdatedDelegate value)
    // Offset: 0x12583F8
    void remove_peerUpdatedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* value);
    // public System.Void add_joinRequestedEvent(LocalNetworkDiscoveryManager/JoinRequestedDelegate value)
    // Offset: 0x125849C
    void add_joinRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* value);
    // public System.Void remove_joinRequestedEvent(LocalNetworkDiscoveryManager/JoinRequestedDelegate value)
    // Offset: 0x1258540
    void remove_joinRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* value);
    // public System.Void add_joinRespondedEvent(LocalNetworkDiscoveryManager/JoinRespondedDelegate value)
    // Offset: 0x12585E4
    void add_joinRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* value);
    // public System.Void remove_joinRespondedEvent(LocalNetworkDiscoveryManager/JoinRespondedDelegate value)
    // Offset: 0x1258688
    void remove_joinRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* value);
    // public System.Void add_inviteRequestedEvent(LocalNetworkDiscoveryManager/InviteRequestedDelegate value)
    // Offset: 0x125872C
    void add_inviteRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* value);
    // public System.Void remove_inviteRequestedEvent(LocalNetworkDiscoveryManager/InviteRequestedDelegate value)
    // Offset: 0x12587D0
    void remove_inviteRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* value);
    // public System.Void add_inviteRespondedEvent(LocalNetworkDiscoveryManager/InviteRespondedDelegate value)
    // Offset: 0x1258874
    void add_inviteRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* value);
    // public System.Void remove_inviteRespondedEvent(LocalNetworkDiscoveryManager/InviteRespondedDelegate value)
    // Offset: 0x1258918
    void remove_inviteRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* value);
    // public System.String get_userId()
    // Offset: 0x12589BC
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x12589D8
    ::Il2CppString* get_userName();
    // public System.Boolean get_isPartyOwner()
    // Offset: 0x12589F4
    bool get_isPartyOwner();
    // public System.Void set_isPartyOwner(System.Boolean value)
    // Offset: 0x1258A10
    void set_isPartyOwner(bool value);
    // public System.Int32 get_currentPartySize()
    // Offset: 0x1258A4C
    int get_currentPartySize();
    // public System.Void set_currentPartySize(System.Int32 value)
    // Offset: 0x1258A68
    void set_currentPartySize(int value);
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x1258A98
    GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public System.Void set_configuration(GameplayServerConfiguration value)
    // Offset: 0x1258AC0
    void set_configuration(GlobalNamespace::GameplayServerConfiguration value);
    // public BeatmapLevelSelectionMask get_selectionMask()
    // Offset: 0x1258B34
    GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask();
    // public System.Void set_selectionMask(BeatmapLevelSelectionMask value)
    // Offset: 0x1258B5C
    void set_selectionMask(GlobalNamespace::BeatmapLevelSelectionMask value);
    // public System.Boolean get_enableBroadcasting()
    // Offset: 0x1258BF4
    bool get_enableBroadcasting();
    // public System.Void set_enableBroadcasting(System.Boolean value)
    // Offset: 0x1258BFC
    void set_enableBroadcasting(bool value);
    // public System.Void Init(System.Int32 discoveryPort, System.String initUserId, System.String initUserName)
    // Offset: 0x1258C08
    void Init(int discoveryPort, ::Il2CppString* initUserId, ::Il2CppString* initUserName);
    // protected System.Void OnEnable()
    // Offset: 0x1258ED0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1258EE4
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x1258EF8
    void Update();
    // public System.Void SendJoinRequest(System.Net.IPAddress ip)
    // Offset: 0x1258FB8
    void SendJoinRequest(System::Net::IPAddress* ip);
    // public System.Void SendJoinResponse(System.Net.IPAddress ip, System.String secret, System.Int32 multiplayerPort, System.Boolean blocked, System.Boolean isPartyOwner, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
    // Offset: 0x12590A8
    void SendJoinResponse(System::Net::IPAddress* ip, ::Il2CppString* secret, int multiplayerPort, bool blocked, bool isPartyOwner, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Void SendInviteRequest(System.Net.IPAddress ip, System.String secret, System.Int32 multiplayerPort, System.Boolean isPartyOwner, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
    // Offset: 0x12591EC
    void SendInviteRequest(System::Net::IPAddress* ip, ::Il2CppString* secret, int multiplayerPort, bool isPartyOwner, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Void SendInviteResponse(System.Net.IPAddress ip, System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x1259334
    void SendInviteResponse(System::Net::IPAddress* ip, bool accepted, bool blocked);
    // private LiteNetLib.Utils.NetDataWriter WritePacket(T packet)
    // Offset: 0xFFFFFFFF
    template<class T>
    LiteNetLib::Utils::NetDataWriter* WritePacket(T packet) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::WritePacket");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "WritePacket", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(packet)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(___instance_arg, ___generic__method, packet);
    }
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    // Offset: 0x1259434
    void LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType);
    // private System.Void LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    // Offset: 0x12594E0
    void LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketErrorCode)
    // Offset: 0x12594FC
    void LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latency)
    // Offset: 0x12595AC
    void LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency);
    // private System.Void LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer peer)
    // Offset: 0x12595B0
    void LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer);
    // private System.Void LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    // Offset: 0x12595B4
    void LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x12595B8
    void LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void <Init>b__55_0(LocalNetworkDiscoveryManager/BroadcastPacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x1259684
    void $Init$b__55_0(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__55_1(LocalNetworkDiscoveryManager/JoinRequestPacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x1259F3C
    void $Init$b__55_1(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__55_2(LocalNetworkDiscoveryManager/JoinResponsePacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x125A384
    void $Init$b__55_2(GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__55_3(LocalNetworkDiscoveryManager/InviteRequestPacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x125AC08
    void $Init$b__55_3(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__55_4(LocalNetworkDiscoveryManager/InviteResponsePacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x125B4B4
    void $Init$b__55_4(GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket* packet, System::Net::IPEndPoint* endPoint);
    // public System.Void .ctor()
    // Offset: 0x12595BC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalNetworkDiscoveryManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalNetworkDiscoveryManager*, creationType>()));
    }
  }; // LocalNetworkDiscoveryManager
  #pragma pack(pop)
  static check_size<sizeof(LocalNetworkDiscoveryManager), 104 + sizeof(float)> __GlobalNamespace_LocalNetworkDiscoveryManagerSizeCheck;
  static_assert(sizeof(LocalNetworkDiscoveryManager) == 0x6C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkDiscoveryManager*, "", "LocalNetworkDiscoveryManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, "", "LocalNetworkDiscoveryManager/PacketType");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::add_peerUpdatedEvent
// Il2CppName: add_peerUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::add_peerUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/PeerUpdatedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "add_peerUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::remove_peerUpdatedEvent
// Il2CppName: remove_peerUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::remove_peerUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/PeerUpdatedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "remove_peerUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRequestedEvent
// Il2CppName: add_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRequestedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/JoinRequestedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "add_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRequestedEvent
// Il2CppName: remove_joinRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRequestedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/JoinRequestedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "remove_joinRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRespondedEvent
// Il2CppName: add_joinRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::add_joinRespondedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/JoinRespondedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "add_joinRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRespondedEvent
// Il2CppName: remove_joinRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::remove_joinRespondedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/JoinRespondedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "remove_joinRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRequestedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/InviteRequestedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRequestedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/InviteRequestedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRespondedEvent
// Il2CppName: add_inviteRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::add_inviteRespondedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/InviteRespondedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "add_inviteRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRespondedEvent
// Il2CppName: remove_inviteRespondedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::remove_inviteRespondedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/InviteRespondedDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "remove_inviteRespondedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_isPartyOwner
// Il2CppName: get_isPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_isPartyOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_isPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::set_isPartyOwner
// Il2CppName: set_isPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(bool)>(&GlobalNamespace::LocalNetworkDiscoveryManager::set_isPartyOwner)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "set_isPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_currentPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::set_currentPartySize
// Il2CppName: set_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(int)>(&GlobalNamespace::LocalNetworkDiscoveryManager::set_currentPartySize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "set_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::set_configuration
// Il2CppName: set_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::LocalNetworkDiscoveryManager::set_configuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "set_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_selectionMask
// Il2CppName: get_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapLevelSelectionMask (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_selectionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::set_selectionMask
// Il2CppName: set_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::BeatmapLevelSelectionMask)>(&GlobalNamespace::LocalNetworkDiscoveryManager::set_selectionMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "set_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::get_enableBroadcasting
// Il2CppName: get_enableBroadcasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::get_enableBroadcasting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "get_enableBroadcasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::set_enableBroadcasting
// Il2CppName: set_enableBroadcasting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(bool)>(&GlobalNamespace::LocalNetworkDiscoveryManager::set_enableBroadcasting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "set_enableBroadcasting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(int, ::Il2CppString*, ::Il2CppString*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::Init)> {
  static const MethodInfo* get() {
    static auto* discoveryPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* initUserId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* initUserName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{discoveryPort, initUserId, initUserName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)()>(&GlobalNamespace::LocalNetworkDiscoveryManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinRequest
// Il2CppName: SendJoinRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinRequest)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "SendJoinRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*, ::Il2CppString*, int, bool, bool, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::LocalNetworkDiscoveryManager::SendJoinResponse)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* multiplayerPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isPartyOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip, secret, multiplayerPort, blocked, isPartyOwner, selectionMask, configuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteRequest
// Il2CppName: SendInviteRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*, ::Il2CppString*, int, bool, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteRequest)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* multiplayerPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* isPartyOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "SendInviteRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip, secret, multiplayerPort, isPartyOwner, selectionMask, configuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(System::Net::IPAddress*, bool, bool)>(&GlobalNamespace::LocalNetworkDiscoveryManager::SendInviteResponse)> {
  static const MethodInfo* get() {
    static auto* ip = &::il2cpp_utils::GetClassFromName("System.Net", "IPAddress")->byval_arg;
    static auto* accepted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* blocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ip, accepted, blocked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::WritePacket
// Il2CppName: WritePacket
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(System::Net::IPEndPoint*, LiteNetLib::NetPacketReader*, LiteNetLib::UnconnectedMessageType)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected)> {
  static const MethodInfo* get() {
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacketReader")->byval_arg;
    static auto* messageType = &::il2cpp_utils::GetClassFromName("LiteNetLib", "UnconnectedMessageType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{remoteEndPoint, reader, messageType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnConnectionRequest
// Il2CppName: LiteNetLib.INetEventListener.OnConnectionRequest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(LiteNetLib::ConnectionRequest*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnConnectionRequest)> {
  static const MethodInfo* get() {
    static auto* request = &::il2cpp_utils::GetClassFromName("LiteNetLib", "ConnectionRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnConnectionRequest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{request});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkError
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(System::Net::IPEndPoint*, System::Net::Sockets::SocketError)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkError)> {
  static const MethodInfo* get() {
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* socketErrorCode = &::il2cpp_utils::GetClassFromName("System.Net.Sockets", "SocketError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{endPoint, socketErrorCode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*, int)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkLatencyUpdate)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, latency});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerConnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerConnected)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnPeerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerDisconnected
// Il2CppName: LiteNetLib.INetEventListener.OnPeerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*, LiteNetLib::DisconnectInfo)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnPeerDisconnected)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* disconnectInfo = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DisconnectInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnPeerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, disconnectInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceive
// Il2CppName: LiteNetLib.INetEventListener.OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(LiteNetLib::NetPeer*, LiteNetLib::NetPacketReader*, LiteNetLib::DeliveryMethod)>(&GlobalNamespace::LocalNetworkDiscoveryManager::LiteNetLib_INetEventListener_OnNetworkReceive)> {
  static const MethodInfo* get() {
    static auto* peer = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPeer")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib", "NetPacketReader")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "LiteNetLib.INetEventListener.OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{peer, reader, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_0
// Il2CppName: <Init>b__55_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket*, System::Net::IPEndPoint*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_0)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/BroadcastPacket")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "<Init>b__55_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_1
// Il2CppName: <Init>b__55_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket*, System::Net::IPEndPoint*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_1)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/JoinRequestPacket")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "<Init>b__55_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_2
// Il2CppName: <Init>b__55_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket*, System::Net::IPEndPoint*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_2)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/JoinResponsePacket")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "<Init>b__55_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_3
// Il2CppName: <Init>b__55_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket*, System::Net::IPEndPoint*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_3)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/InviteRequestPacket")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "<Init>b__55_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_4
// Il2CppName: <Init>b__55_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkDiscoveryManager::*)(GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket*, System::Net::IPEndPoint*)>(&GlobalNamespace::LocalNetworkDiscoveryManager::$Init$b__55_4)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "LocalNetworkDiscoveryManager/InviteResponsePacket")->byval_arg;
    static auto* endPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkDiscoveryManager*), "<Init>b__55_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, endPoint});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkDiscoveryManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
