// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BasicBeatmapEventType
#include "GlobalNamespace/BasicBeatmapEventType.hpp"
// Including type: EaseType
#include "GlobalNamespace/EaseType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: BasicBeatmapEventData
  class BasicBeatmapEventData;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: SongTimeTweeningManager
  class SongTimeTweeningManager;
  // Forward declaring type: Vector3Tween
  class Vector3Tween;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SmoothStepPositionGroupEventEffect
  class SmoothStepPositionGroupEventEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SmoothStepPositionGroupEventEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SmoothStepPositionGroupEventEffect*, "", "SmoothStepPositionGroupEventEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: SmoothStepPositionGroupEventEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class SmoothStepPositionGroupEventEffect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private BasicBeatmapEventType _event
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::BasicBeatmapEventType event;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasicBeatmapEventType) == 0x4);
    // Padding between fields: event and: elements
    char __padding0[0x4] = {};
    // private UnityEngine.Transform[] _elements
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Transform*> elements;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private System.Boolean _clampValue
    // Size: 0x1
    // Offset: 0x28
    bool clampValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clampValue and: eventValueMin
    char __padding2[0x3] = {};
    // [DrawIfAttribute] Offset: 0x11222C4
    // private System.Int32 _eventValueMin
    // Size: 0x4
    // Offset: 0x2C
    int eventValueMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DrawIfAttribute] Offset: 0x112236C
    // private System.Int32 _eventValueMax
    // Size: 0x4
    // Offset: 0x30
    int eventValueMax;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [SpaceAttribute] Offset: 0x1122414
    // private UnityEngine.Vector3 _baseOffset
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 baseOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _movementVector
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 movementVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _stepSize
    // Size: 0x4
    // Offset: 0x4C
    float stepSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private EaseType _easeType
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::EaseType easeType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EaseType) == 0x4);
    // Padding between fields: easeType and: beatmapCallbacksController
    char __padding8[0x4] = {};
    // [InjectAttribute] Offset: 0x1122480
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // [InjectAttribute] Offset: 0x1122490
    // private readonly Tweening.SongTimeTweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x60
    ::Tweening::SongTimeTweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(::Tweening::SongTimeTweeningManager*) == 0x8);
    // private Tweening.Vector3Tween _positionTween
    // Size: 0x8
    // Offset: 0x68
    ::Tweening::Vector3Tween* positionTween;
    // Field size check
    static_assert(sizeof(::Tweening::Vector3Tween*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _startPos
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 startPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: startPos and: beatmapDataCallbackWrapper
    char __padding13[0x4] = {};
    // private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::BeatmapDataCallbackWrapper* beatmapDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BasicBeatmapEventType _event
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& dyn__event();
    // Get instance field reference: private UnityEngine.Transform[] _elements
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn__elements();
    // Get instance field reference: private System.Boolean _clampValue
    [[deprecated("Use field access instead!")]] bool& dyn__clampValue();
    // Get instance field reference: private System.Int32 _eventValueMin
    [[deprecated("Use field access instead!")]] int& dyn__eventValueMin();
    // Get instance field reference: private System.Int32 _eventValueMax
    [[deprecated("Use field access instead!")]] int& dyn__eventValueMax();
    // Get instance field reference: private UnityEngine.Vector3 _baseOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__baseOffset();
    // Get instance field reference: private UnityEngine.Vector3 _movementVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__movementVector();
    // Get instance field reference: private System.Single _stepSize
    [[deprecated("Use field access instead!")]] float& dyn__stepSize();
    // Get instance field reference: private EaseType _easeType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EaseType& dyn__easeType();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly Tweening.SongTimeTweeningManager _tweeningManager
    [[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& dyn__tweeningManager();
    // Get instance field reference: private Tweening.Vector3Tween _positionTween
    [[deprecated("Use field access instead!")]] ::Tweening::Vector3Tween*& dyn__positionTween();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private UnityEngine.Vector3 _startPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__startPos();
    // Get instance field reference: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__beatmapDataCallbackWrapper();
    // public System.Void .ctor()
    // Offset: 0x1499B60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SmoothStepPositionGroupEventEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SmoothStepPositionGroupEventEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SmoothStepPositionGroupEventEffect*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x14995D0
    void Awake();
    // protected System.Void Start()
    // Offset: 0x14996DC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x14997F4
    void OnDestroy();
    // private System.Void HandleBeatmapEvent(BasicBeatmapEventData basicBeatmapEventData)
    // Offset: 0x14998A0
    void HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData);
    // private UnityEngine.Vector3 GetPositionForValue(System.Int32 value)
    // Offset: 0x1499980
    ::UnityEngine::Vector3 GetPositionForValue(int value);
    // private System.Void SetPosition(UnityEngine.Vector3 position)
    // Offset: 0x1499A70
    void SetPosition(::UnityEngine::Vector3 position);
  }; // SmoothStepPositionGroupEventEffect
  #pragma pack(pop)
  static check_size<sizeof(SmoothStepPositionGroupEventEffect), 136 + sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*)> __GlobalNamespace_SmoothStepPositionGroupEventEffectSizeCheck;
  static_assert(sizeof(SmoothStepPositionGroupEventEffect) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionGroupEventEffect::*)()>(&GlobalNamespace::SmoothStepPositionGroupEventEffect::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionGroupEventEffect*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionGroupEventEffect::*)()>(&GlobalNamespace::SmoothStepPositionGroupEventEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionGroupEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionGroupEventEffect::*)()>(&GlobalNamespace::SmoothStepPositionGroupEventEffect::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionGroupEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::HandleBeatmapEvent
// Il2CppName: HandleBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionGroupEventEffect::*)(::GlobalNamespace::BasicBeatmapEventData*)>(&GlobalNamespace::SmoothStepPositionGroupEventEffect::HandleBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* basicBeatmapEventData = &::il2cpp_utils::GetClassFromName("", "BasicBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionGroupEventEffect*), "HandleBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basicBeatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::GetPositionForValue
// Il2CppName: GetPositionForValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::SmoothStepPositionGroupEventEffect::*)(int)>(&GlobalNamespace::SmoothStepPositionGroupEventEffect::GetPositionForValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionGroupEventEffect*), "GetPositionForValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SmoothStepPositionGroupEventEffect::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SmoothStepPositionGroupEventEffect::*)(::UnityEngine::Vector3)>(&GlobalNamespace::SmoothStepPositionGroupEventEffect::SetPosition)> {
  static const MethodInfo* get() {
    static auto* position = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SmoothStepPositionGroupEventEffect*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{position});
  }
};
