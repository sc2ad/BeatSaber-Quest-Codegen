// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB_MultiMaterial
  class MB_MultiMaterial;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB_MultiMaterial);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB_MultiMaterial*, "", "MB_MultiMaterial");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MB_MultiMaterial
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_MultiMaterial : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Material combinedMaterial
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Material* combinedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.Boolean considerMeshUVs
    // Size: 0x1
    // Offset: 0x18
    bool considerMeshUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: considerMeshUVs and: sourceMaterials
    char __padding1[0x7] = {};
    // public System.Collections.Generic.List`1<UnityEngine.Material> sourceMaterials
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Material*>* sourceMaterials;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Material*>*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Material combinedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_combinedMaterial();
    // Get instance field reference: public System.Boolean considerMeshUVs
    [[deprecated("Use field access instead!")]] bool& dyn_considerMeshUVs();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Material> sourceMaterials
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Material*>*& dyn_sourceMaterials();
    // public System.Void .ctor()
    // Offset: 0x1B62D30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_MultiMaterial* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB_MultiMaterial::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_MultiMaterial*, creationType>()));
    }
  }; // MB_MultiMaterial
  #pragma pack(pop)
  static check_size<sizeof(MB_MultiMaterial), 32 + sizeof(::System::Collections::Generic::List_1<::UnityEngine::Material*>*)> __GlobalNamespace_MB_MultiMaterialSizeCheck;
  static_assert(sizeof(MB_MultiMaterial) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB_MultiMaterial::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
