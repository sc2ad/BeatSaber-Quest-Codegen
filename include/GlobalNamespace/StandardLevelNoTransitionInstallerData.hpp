// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelSO
  class BeatmapLevelSO;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: ColorSchemeSO
  class ColorSchemeSO;
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: PracticeSettings
  class PracticeSettings;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StandardLevelNoTransitionInstallerData
  class StandardLevelNoTransitionInstallerData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StandardLevelNoTransitionInstallerData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StandardLevelNoTransitionInstallerData*, "", "StandardLevelNoTransitionInstallerData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: StandardLevelNoTransitionInstallerData
  // [TokenAttribute] Offset: FFFFFFFF
  class StandardLevelNoTransitionInstallerData : public ::UnityEngine::ScriptableObject {
    public:
    public:
    // private BeatmapLevelSO _beatmapLevel
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapLevelSO* beatmapLevel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSO*) == 0x8);
    // private BeatmapCharacteristicSO _beatmapCharacteristic
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicSO*) == 0x8);
    // private BeatmapDifficulty _beatmapDifficulty
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::BeatmapDifficulty beatmapDifficulty;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDifficulty) == 0x4);
    // Padding between fields: beatmapDifficulty and: colorScheme
    char __padding2[0x4] = {};
    // private ColorSchemeSO _colorScheme
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::ColorSchemeSO* colorScheme;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSchemeSO*) == 0x8);
    // private EnvironmentInfoSO _environmentInfo
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::EnvironmentInfoSO* environmentInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayModifiers*) == 0x8);
    // private PlayerSpecificSettings _playerSpecificSettings
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerSpecificSettings*) == 0x8);
    // private PracticeSettings _practiceSettings
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::PracticeSettings* practiceSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PracticeSettings*) == 0x8);
    // private System.String _backButtonText
    // Size: 0x8
    // Offset: 0x58
    ::StringW backButtonText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _useTestNoteCutSoundEffects
    // Size: 0x1
    // Offset: 0x60
    bool useTestNoteCutSoundEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapLevelSO _beatmapLevel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO*& dyn__beatmapLevel();
    // Get instance field reference: private BeatmapCharacteristicSO _beatmapCharacteristic
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& dyn__beatmapCharacteristic();
    // Get instance field reference: private BeatmapDifficulty _beatmapDifficulty
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& dyn__beatmapDifficulty();
    // Get instance field reference: private ColorSchemeSO _colorScheme
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSchemeSO*& dyn__colorScheme();
    // Get instance field reference: private EnvironmentInfoSO _environmentInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& dyn__environmentInfo();
    // Get instance field reference: private GameplayModifiers _gameplayModifiers
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers*& dyn__gameplayModifiers();
    // Get instance field reference: private PlayerSpecificSettings _playerSpecificSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpecificSettings*& dyn__playerSpecificSettings();
    // Get instance field reference: private PracticeSettings _practiceSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PracticeSettings*& dyn__practiceSettings();
    // Get instance field reference: private System.String _backButtonText
    [[deprecated("Use field access instead!")]] ::StringW& dyn__backButtonText();
    // Get instance field reference: private System.Boolean _useTestNoteCutSoundEffects
    [[deprecated("Use field access instead!")]] bool& dyn__useTestNoteCutSoundEffects();
    // public BeatmapLevelSO get_beatmapLevel()
    // Offset: 0x13AA7F8
    ::GlobalNamespace::BeatmapLevelSO* get_beatmapLevel();
    // public System.Void set_beatmapLevel(BeatmapLevelSO value)
    // Offset: 0x13AA800
    void set_beatmapLevel(::GlobalNamespace::BeatmapLevelSO* value);
    // public BeatmapCharacteristicSO get_beatmapCharacteristic()
    // Offset: 0x13AA808
    ::GlobalNamespace::BeatmapCharacteristicSO* get_beatmapCharacteristic();
    // public System.Void set_beatmapCharacteristic(BeatmapCharacteristicSO value)
    // Offset: 0x13AA810
    void set_beatmapCharacteristic(::GlobalNamespace::BeatmapCharacteristicSO* value);
    // public BeatmapDifficulty get_beatmapDifficulty()
    // Offset: 0x13AA818
    ::GlobalNamespace::BeatmapDifficulty get_beatmapDifficulty();
    // public System.Void set_beatmapDifficulty(BeatmapDifficulty value)
    // Offset: 0x13AA820
    void set_beatmapDifficulty(::GlobalNamespace::BeatmapDifficulty value);
    // public ColorSchemeSO get_colorScheme()
    // Offset: 0x13AA828
    ::GlobalNamespace::ColorSchemeSO* get_colorScheme();
    // public System.Void set_colorScheme(ColorSchemeSO value)
    // Offset: 0x13AA830
    void set_colorScheme(::GlobalNamespace::ColorSchemeSO* value);
    // public EnvironmentInfoSO get_environmentInfo()
    // Offset: 0x13AA838
    ::GlobalNamespace::EnvironmentInfoSO* get_environmentInfo();
    // public System.Void set_environmentInfo(EnvironmentInfoSO value)
    // Offset: 0x13AA840
    void set_environmentInfo(::GlobalNamespace::EnvironmentInfoSO* value);
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0x13AA848
    ::GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // public System.Void set_gameplayModifiers(GameplayModifiers value)
    // Offset: 0x13AA850
    void set_gameplayModifiers(::GlobalNamespace::GameplayModifiers* value);
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0x13AA858
    ::GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // public System.Void set_playerSpecificSettings(PlayerSpecificSettings value)
    // Offset: 0x13AA860
    void set_playerSpecificSettings(::GlobalNamespace::PlayerSpecificSettings* value);
    // public PracticeSettings get_practiceSettings()
    // Offset: 0x13AA868
    ::GlobalNamespace::PracticeSettings* get_practiceSettings();
    // public System.Void set_practiceSettings(PracticeSettings value)
    // Offset: 0x13AA870
    void set_practiceSettings(::GlobalNamespace::PracticeSettings* value);
    // public System.String get_backButtonText()
    // Offset: 0x13AA878
    ::StringW get_backButtonText();
    // public System.Void set_backButtonText(System.String value)
    // Offset: 0x13AA880
    void set_backButtonText(::StringW value);
    // public System.Boolean get_useTestNoteCutSoundEffects()
    // Offset: 0x13AA888
    bool get_useTestNoteCutSoundEffects();
    // public System.Void set_useTestNoteCutSoundEffects(System.Boolean value)
    // Offset: 0x13AA890
    void set_useTestNoteCutSoundEffects(bool value);
    // public System.Void .ctor()
    // Offset: 0x13AA89C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StandardLevelNoTransitionInstallerData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandardLevelNoTransitionInstallerData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StandardLevelNoTransitionInstallerData*, creationType>()));
    }
  }; // StandardLevelNoTransitionInstallerData
  #pragma pack(pop)
  static check_size<sizeof(StandardLevelNoTransitionInstallerData), 96 + sizeof(bool)> __GlobalNamespace_StandardLevelNoTransitionInstallerDataSizeCheck;
  static_assert(sizeof(StandardLevelNoTransitionInstallerData) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_beatmapLevel
// Il2CppName: get_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapLevelSO* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_beatmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_beatmapLevel
// Il2CppName: set_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::BeatmapLevelSO*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_beatmapLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapCharacteristicSO* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_beatmapCharacteristic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_beatmapCharacteristic
// Il2CppName: set_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_beatmapCharacteristic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_beatmapDifficulty
// Il2CppName: get_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDifficulty (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_beatmapDifficulty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_beatmapDifficulty
// Il2CppName: set_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_beatmapDifficulty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_colorScheme
// Il2CppName: get_colorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorSchemeSO* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_colorScheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_colorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_colorScheme
// Il2CppName: set_colorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::ColorSchemeSO*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_colorScheme)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ColorSchemeSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_colorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_environmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_environmentInfo
// Il2CppName: set_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::EnvironmentInfoSO*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_environmentInfo)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "EnvironmentInfoSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayModifiers* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_gameplayModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_gameplayModifiers
// Il2CppName: set_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_gameplayModifiers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_playerSpecificSettings
// Il2CppName: get_playerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerSpecificSettings* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_playerSpecificSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_playerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_playerSpecificSettings
// Il2CppName: set_playerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::PlayerSpecificSettings*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_playerSpecificSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PlayerSpecificSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_playerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_practiceSettings
// Il2CppName: get_practiceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PracticeSettings* (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_practiceSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_practiceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_practiceSettings
// Il2CppName: set_practiceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::GlobalNamespace::PracticeSettings*)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_practiceSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PracticeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_practiceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_backButtonText
// Il2CppName: get_backButtonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_backButtonText)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_backButtonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_backButtonText
// Il2CppName: set_backButtonText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(::StringW)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_backButtonText)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_backButtonText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::get_useTestNoteCutSoundEffects
// Il2CppName: get_useTestNoteCutSoundEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)()>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::get_useTestNoteCutSoundEffects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "get_useTestNoteCutSoundEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::set_useTestNoteCutSoundEffects
// Il2CppName: set_useTestNoteCutSoundEffects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandardLevelNoTransitionInstallerData::*)(bool)>(&GlobalNamespace::StandardLevelNoTransitionInstallerData::set_useTestNoteCutSoundEffects)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandardLevelNoTransitionInstallerData*), "set_useTestNoteCutSoundEffects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandardLevelNoTransitionInstallerData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
