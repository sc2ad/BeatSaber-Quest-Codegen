// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TextPageScrollView
  class TextPageScrollView;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LocalizedTextAsset
  class LocalizedTextAsset;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PrivacyPolicyViewController
  class PrivacyPolicyViewController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PrivacyPolicyViewController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PrivacyPolicyViewController*, "", "PrivacyPolicyViewController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAA
  #pragma pack(push, 1)
  // Autogenerated type: PrivacyPolicyViewController
  // [TokenAttribute] Offset: FFFFFFFF
  class PrivacyPolicyViewController : public ::HMUI::ViewController {
    public:
    // Nested type: ::GlobalNamespace::PrivacyPolicyViewController::ButtonType
    struct ButtonType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: PrivacyPolicyViewController/ButtonType
    // [TokenAttribute] Offset: FFFFFFFF
    struct ButtonType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ButtonType
      constexpr ButtonType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public PrivacyPolicyViewController/ButtonType Ok
      static constexpr const int Ok = 0;
      // Get static field: static public PrivacyPolicyViewController/ButtonType Ok
      static ::GlobalNamespace::PrivacyPolicyViewController::ButtonType _get_Ok();
      // Set static field: static public PrivacyPolicyViewController/ButtonType Ok
      static void _set_Ok(::GlobalNamespace::PrivacyPolicyViewController::ButtonType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // PrivacyPolicyViewController/ButtonType
    #pragma pack(pop)
    static check_size<sizeof(PrivacyPolicyViewController::ButtonType), 0 + sizeof(int)> __GlobalNamespace_PrivacyPolicyViewController_ButtonTypeSizeCheck;
    static_assert(sizeof(PrivacyPolicyViewController::ButtonType) == 0x4);
    public:
    // [HeaderAttribute] Offset: 0x10EC2B8
    // private UnityEngine.UI.Button _okButton
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::UI::Button* okButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _continueButton
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::UI::Button* continueButton;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Button*) == 0x8);
    // [HeaderAttribute] Offset: 0x10EC314
    // private HMUI.TextPageScrollView _textPageScrollView
    // Size: 0x8
    // Offset: 0x80
    ::HMUI::TextPageScrollView* textPageScrollView;
    // Field size check
    static_assert(sizeof(::HMUI::TextPageScrollView*) == 0x8);
    // private LocalizedTextAsset _privacyPolicyLocalizedTextAsset
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::LocalizedTextAsset* privacyPolicyLocalizedTextAsset;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocalizedTextAsset*) == 0x8);
    // [HeaderAttribute] Offset: 0x10EC370
    // [LocalizationKeyAttribute] Offset: 0x10EC370
    // private System.String _defaultPrivacyPolicyHeaderLocalizationKey
    // Size: 0x8
    // Offset: 0x90
    ::StringW defaultPrivacyPolicyHeaderLocalizationKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [LocalizationKeyAttribute] Offset: 0x10EC3CC
    // private System.String _updateNoticeLocalizationKey
    // Size: 0x8
    // Offset: 0x98
    ::StringW updateNoticeLocalizationKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Action`1<PrivacyPolicyViewController/ButtonType> didFinishEvent
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>* didFinishEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>*) == 0x8);
    // private System.Boolean _showUpdate
    // Size: 0x1
    // Offset: 0xA8
    bool showUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _showOnlyContinueButton
    // Size: 0x1
    // Offset: 0xA9
    bool showOnlyContinueButton;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.UI.Button _okButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__okButton();
    // Get instance field reference: private UnityEngine.UI.Button _continueButton
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Button*& dyn__continueButton();
    // Get instance field reference: private HMUI.TextPageScrollView _textPageScrollView
    [[deprecated("Use field access instead!")]] ::HMUI::TextPageScrollView*& dyn__textPageScrollView();
    // Get instance field reference: private LocalizedTextAsset _privacyPolicyLocalizedTextAsset
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocalizedTextAsset*& dyn__privacyPolicyLocalizedTextAsset();
    // Get instance field reference: private System.String _defaultPrivacyPolicyHeaderLocalizationKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn__defaultPrivacyPolicyHeaderLocalizationKey();
    // Get instance field reference: private System.String _updateNoticeLocalizationKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn__updateNoticeLocalizationKey();
    // Get instance field reference: private System.Action`1<PrivacyPolicyViewController/ButtonType> didFinishEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>*& dyn_didFinishEvent();
    // Get instance field reference: private System.Boolean _showUpdate
    [[deprecated("Use field access instead!")]] bool& dyn__showUpdate();
    // Get instance field reference: private System.Boolean _showOnlyContinueButton
    [[deprecated("Use field access instead!")]] bool& dyn__showOnlyContinueButton();
    // public System.Void add_didFinishEvent(System.Action`1<PrivacyPolicyViewController/ButtonType> value)
    // Offset: 0x136C6C4
    void add_didFinishEvent(::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<PrivacyPolicyViewController/ButtonType> value)
    // Offset: 0x136C768
    void remove_didFinishEvent(::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>* value);
    // public System.Void .ctor()
    // Offset: 0x136C9CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PrivacyPolicyViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PrivacyPolicyViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PrivacyPolicyViewController*, creationType>()));
    }
    // public System.Void Init(System.Boolean showUpdate, System.Boolean showOnlyContinueButton)
    // Offset: 0x136C9B8
    void Init(bool showUpdate, bool showOnlyContinueButton);
    // private System.Void <DidActivate>b__12_0()
    // Offset: 0x136C9D4
    void $DidActivate$b__12_0();
    // private System.Void <DidActivate>b__12_1()
    // Offset: 0x136CA38
    void $DidActivate$b__12_1();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x136C80C
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
  }; // PrivacyPolicyViewController
  #pragma pack(pop)
  static check_size<sizeof(PrivacyPolicyViewController), 169 + sizeof(bool)> __GlobalNamespace_PrivacyPolicyViewControllerSizeCheck;
  static_assert(sizeof(PrivacyPolicyViewController) == 0xAA);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PrivacyPolicyViewController::ButtonType, "", "PrivacyPolicyViewController/ButtonType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::add_didFinishEvent
// Il2CppName: add_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrivacyPolicyViewController::*)(::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>*)>(&GlobalNamespace::PrivacyPolicyViewController::add_didFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PrivacyPolicyViewController/ButtonType")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrivacyPolicyViewController*), "add_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::remove_didFinishEvent
// Il2CppName: remove_didFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrivacyPolicyViewController::*)(::System::Action_1<::GlobalNamespace::PrivacyPolicyViewController::ButtonType>*)>(&GlobalNamespace::PrivacyPolicyViewController::remove_didFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PrivacyPolicyViewController/ButtonType")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrivacyPolicyViewController*), "remove_didFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrivacyPolicyViewController::*)(bool, bool)>(&GlobalNamespace::PrivacyPolicyViewController::Init)> {
  static const MethodInfo* get() {
    static auto* showUpdate = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* showOnlyContinueButton = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrivacyPolicyViewController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{showUpdate, showOnlyContinueButton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::$DidActivate$b__12_0
// Il2CppName: <DidActivate>b__12_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrivacyPolicyViewController::*)()>(&GlobalNamespace::PrivacyPolicyViewController::$DidActivate$b__12_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrivacyPolicyViewController*), "<DidActivate>b__12_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::$DidActivate$b__12_1
// Il2CppName: <DidActivate>b__12_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrivacyPolicyViewController::*)()>(&GlobalNamespace::PrivacyPolicyViewController::$DidActivate$b__12_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrivacyPolicyViewController*), "<DidActivate>b__12_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PrivacyPolicyViewController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PrivacyPolicyViewController::*)(bool, bool, bool)>(&GlobalNamespace::PrivacyPolicyViewController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PrivacyPolicyViewController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
