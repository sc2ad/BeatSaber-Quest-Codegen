// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelPackCollectionSO
  class BeatmapLevelPackCollectionSO;
  // Forward declaring type: BeatmapCharacteristicCollectionSO
  class BeatmapCharacteristicCollectionSO;
  // Forward declaring type: EnvironmentsListSO
  class EnvironmentsListSO;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RecordingToolResourceContainerSO
  class RecordingToolResourceContainerSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RecordingToolResourceContainerSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RecordingToolResourceContainerSO*, "", "RecordingToolResourceContainerSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: RecordingToolResourceContainerSO
  // [TokenAttribute] Offset: FFFFFFFF
  class RecordingToolResourceContainerSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    public:
    // private BeatmapLevelPackCollectionSO _dlcLevelPackCollection
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapLevelPackCollectionSO* dlcLevelPackCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelPackCollectionSO*) == 0x8);
    // private BeatmapLevelPackCollectionSO _ostAndExtrasPackCollection
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapLevelPackCollectionSO* ostAndExtrasPackCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelPackCollectionSO*) == 0x8);
    // private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicCollectionSO*) == 0x8);
    // private EnvironmentsListSO _environmentsList
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::EnvironmentsListSO* environmentsList;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentsListSO*) == 0x8);
    // private System.Collections.Generic.List`1<IBeatmapLevelPack> _beatmapLevelPacks
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapLevelPack*>* beatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapLevelPack*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapLevelPackCollectionSO _dlcLevelPackCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelPackCollectionSO*& dyn__dlcLevelPackCollection();
    // Get instance field reference: private BeatmapLevelPackCollectionSO _ostAndExtrasPackCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelPackCollectionSO*& dyn__ostAndExtrasPackCollection();
    // Get instance field reference: private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicCollectionSO*& dyn__beatmapCharacteristicCollection();
    // Get instance field reference: private EnvironmentsListSO _environmentsList
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentsListSO*& dyn__environmentsList();
    // Get instance field reference: private System.Collections.Generic.List`1<IBeatmapLevelPack> _beatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapLevelPack*>*& dyn__beatmapLevelPacks();
    // public System.Collections.Generic.List`1<IBeatmapLevelPack> get_beatmapLevelPacks()
    // Offset: 0x1448800
    ::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapLevelPack*>* get_beatmapLevelPacks();
    // public BeatmapCharacteristicCollectionSO get_beatmapCharacteristicCollection()
    // Offset: 0x1448808
    ::GlobalNamespace::BeatmapCharacteristicCollectionSO* get_beatmapCharacteristicCollection();
    // public EnvironmentsListSO get_environmentsList()
    // Offset: 0x1448810
    ::GlobalNamespace::EnvironmentsListSO* get_environmentsList();
    // public System.Void .ctor()
    // Offset: 0x14488DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecordingToolResourceContainerSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingToolResourceContainerSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecordingToolResourceContainerSO*, creationType>()));
    }
    // protected override System.Void OnEnable()
    // Offset: 0x1448818
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::OnEnable()
    void OnEnable();
  }; // RecordingToolResourceContainerSO
  #pragma pack(pop)
  static check_size<sizeof(RecordingToolResourceContainerSO), 56 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapLevelPack*>*)> __GlobalNamespace_RecordingToolResourceContainerSOSizeCheck;
  static_assert(sizeof(RecordingToolResourceContainerSO) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolResourceContainerSO::get_beatmapLevelPacks
// Il2CppName: get_beatmapLevelPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapLevelPack*>* (GlobalNamespace::RecordingToolResourceContainerSO::*)()>(&GlobalNamespace::RecordingToolResourceContainerSO::get_beatmapLevelPacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolResourceContainerSO*), "get_beatmapLevelPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolResourceContainerSO::get_beatmapCharacteristicCollection
// Il2CppName: get_beatmapCharacteristicCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapCharacteristicCollectionSO* (GlobalNamespace::RecordingToolResourceContainerSO::*)()>(&GlobalNamespace::RecordingToolResourceContainerSO::get_beatmapCharacteristicCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolResourceContainerSO*), "get_beatmapCharacteristicCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolResourceContainerSO::get_environmentsList
// Il2CppName: get_environmentsList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::EnvironmentsListSO* (GlobalNamespace::RecordingToolResourceContainerSO::*)()>(&GlobalNamespace::RecordingToolResourceContainerSO::get_environmentsList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolResourceContainerSO*), "get_environmentsList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolResourceContainerSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolResourceContainerSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RecordingToolResourceContainerSO::*)()>(&GlobalNamespace::RecordingToolResourceContainerSO::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolResourceContainerSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
