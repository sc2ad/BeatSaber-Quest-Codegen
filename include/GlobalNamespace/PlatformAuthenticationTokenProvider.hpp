// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPlatformUserModel
  class IPlatformUserModel;
  // Forward declaring type: UserInfo
  class UserInfo;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlatformAuthenticationTokenProvider
  class PlatformAuthenticationTokenProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlatformAuthenticationTokenProvider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlatformAuthenticationTokenProvider*, "", "PlatformAuthenticationTokenProvider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: PlatformAuthenticationTokenProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class PlatformAuthenticationTokenProvider : public ::Il2CppObject/*, public ::GlobalNamespace::IAuthenticationTokenProvider*/ {
    public:
    // Nested type: ::GlobalNamespace::PlatformAuthenticationTokenProvider::$GetAuthenticationToken$d__10
    struct $GetAuthenticationToken$d__10;
    public:
    // private readonly IPlatformUserModel _platformUserModel
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::IPlatformUserModel* platformUserModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPlatformUserModel*) == 0x8);
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x18
    ::StringW userId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x20
    ::StringW userName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _hashedUserId
    // Size: 0x8
    // Offset: 0x28
    ::StringW hashedUserId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly AuthenticationToken/Platform _platform
    // Size: 0x1
    // Offset: 0x30
    ::GlobalNamespace::AuthenticationToken::Platform platform;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AuthenticationToken::Platform) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IAuthenticationTokenProvider
    operator ::GlobalNamespace::IAuthenticationTokenProvider() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IAuthenticationTokenProvider*>(this);
    }
    // Creating interface conversion operator: i_IAuthenticationTokenProvider
    inline ::GlobalNamespace::IAuthenticationTokenProvider* i_IAuthenticationTokenProvider() noexcept {
      return reinterpret_cast<::GlobalNamespace::IAuthenticationTokenProvider*>(this);
    }
    // Get instance field reference: private readonly IPlatformUserModel _platformUserModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPlatformUserModel*& dyn__platformUserModel();
    // Get instance field reference: private readonly System.String _userId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__userId();
    // Get instance field reference: private readonly System.String _userName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__userName();
    // Get instance field reference: private readonly System.String _hashedUserId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__hashedUserId();
    // Get instance field reference: private readonly AuthenticationToken/Platform _platform
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AuthenticationToken::Platform& dyn__platform();
    // public System.String get_hashedUserId()
    // Offset: 0x13438D0
    ::StringW get_hashedUserId();
    // public System.String get_userName()
    // Offset: 0x13438D8
    ::StringW get_userName();
    // public System.Void .ctor(IPlatformUserModel platformUserModel, UserInfo userInfo)
    // Offset: 0x13438E0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlatformAuthenticationTokenProvider* New_ctor(::GlobalNamespace::IPlatformUserModel* platformUserModel, ::GlobalNamespace::UserInfo* userInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlatformAuthenticationTokenProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlatformAuthenticationTokenProvider*, creationType>(platformUserModel, userInfo)));
    }
    // public System.Threading.Tasks.Task`1<AuthenticationToken> GetAuthenticationToken()
    // Offset: 0x13439A4
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::AuthenticationToken>* GetAuthenticationToken();
  }; // PlatformAuthenticationTokenProvider
  #pragma pack(pop)
  static check_size<sizeof(PlatformAuthenticationTokenProvider), 48 + sizeof(::GlobalNamespace::AuthenticationToken::Platform)> __GlobalNamespace_PlatformAuthenticationTokenProviderSizeCheck;
  static_assert(sizeof(PlatformAuthenticationTokenProvider) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlatformAuthenticationTokenProvider::get_hashedUserId
// Il2CppName: get_hashedUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PlatformAuthenticationTokenProvider::*)()>(&GlobalNamespace::PlatformAuthenticationTokenProvider::get_hashedUserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlatformAuthenticationTokenProvider*), "get_hashedUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlatformAuthenticationTokenProvider::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PlatformAuthenticationTokenProvider::*)()>(&GlobalNamespace::PlatformAuthenticationTokenProvider::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlatformAuthenticationTokenProvider*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlatformAuthenticationTokenProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlatformAuthenticationTokenProvider::GetAuthenticationToken
// Il2CppName: GetAuthenticationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::AuthenticationToken>* (GlobalNamespace::PlatformAuthenticationTokenProvider::*)()>(&GlobalNamespace::PlatformAuthenticationTokenProvider::GetAuthenticationToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlatformAuthenticationTokenProvider*), "GetAuthenticationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
