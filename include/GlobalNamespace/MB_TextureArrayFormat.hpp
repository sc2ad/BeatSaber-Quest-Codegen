// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB_TextureArrayFormat
  class MB_TextureArrayFormat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB_TextureArrayFormat);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB_TextureArrayFormat*, "", "MB_TextureArrayFormat");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: MB_TextureArrayFormat
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_TextureArrayFormat : public ::Il2CppObject {
    public:
    public:
    // public System.String propertyName
    // Size: 0x8
    // Offset: 0x10
    ::StringW propertyName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.TextureFormat format
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::TextureFormat format;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextureFormat) == 0x4);
    public:
    // Get instance field reference: public System.String propertyName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_propertyName();
    // Get instance field reference: public UnityEngine.TextureFormat format
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextureFormat& dyn_format();
    // public System.Void .ctor()
    // Offset: 0x1B64428
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_TextureArrayFormat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB_TextureArrayFormat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_TextureArrayFormat*, creationType>()));
    }
  }; // MB_TextureArrayFormat
  #pragma pack(pop)
  static check_size<sizeof(MB_TextureArrayFormat), 24 + sizeof(::UnityEngine::TextureFormat)> __GlobalNamespace_MB_TextureArrayFormatSizeCheck;
  static_assert(sizeof(MB_TextureArrayFormat) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureArrayFormat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
