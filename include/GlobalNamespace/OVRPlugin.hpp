// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRNativeBuffer
  class OVRNativeBuffer;
  // Skipping declaration: Quatf because it is already included!
  // Skipping declaration: Posef because it is already included!
  // Skipping declaration: TrackingConfidence because it is already included!
  // Skipping declaration: HandStatus because it is already included!
  // Skipping declaration: HandFingerPinch because it is already included!
  // Skipping declaration: BoneCapsule because it is already included!
  // Skipping declaration: Bone because it is already included!
  // Skipping declaration: SkeletonType because it is already included!
  // Skipping declaration: XrApi because it is already included!
  // Skipping declaration: Skeleton because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OVRPlugin
  class OVRPlugin;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OVRPlugin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin*, "", "OVRPlugin");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OVRPlugin
  // [TokenAttribute] Offset: FFFFFFFF
  class OVRPlugin : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::OVRPlugin::GUID
    class GUID;
    // Nested type: ::GlobalNamespace::OVRPlugin::Bool
    struct Bool;
    // Nested type: ::GlobalNamespace::OVRPlugin::Result
    struct Result;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraStatus
    struct CameraStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraAnchorType
    struct CameraAnchorType;
    // Nested type: ::GlobalNamespace::OVRPlugin::XrApi
    struct XrApi;
    // Nested type: ::GlobalNamespace::OVRPlugin::Eye
    struct Eye;
    // Nested type: ::GlobalNamespace::OVRPlugin::Tracker
    struct Tracker;
    // Nested type: ::GlobalNamespace::OVRPlugin::Node
    struct Node;
    // Nested type: ::GlobalNamespace::OVRPlugin::Controller
    struct Controller;
    // Nested type: ::GlobalNamespace::OVRPlugin::Handedness
    struct Handedness;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackingOrigin
    struct TrackingOrigin;
    // Nested type: ::GlobalNamespace::OVRPlugin::RecenterFlags
    struct RecenterFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::BatteryStatus
    struct BatteryStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::EyeTextureFormat
    struct EyeTextureFormat;
    // Nested type: ::GlobalNamespace::OVRPlugin::PlatformUI
    struct PlatformUI;
    // Nested type: ::GlobalNamespace::OVRPlugin::SystemRegion
    struct SystemRegion;
    // Nested type: ::GlobalNamespace::OVRPlugin::SystemHeadset
    struct SystemHeadset;
    // Nested type: ::GlobalNamespace::OVRPlugin::OverlayShape
    struct OverlayShape;
    // Nested type: ::GlobalNamespace::OVRPlugin::Step
    struct Step;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDevice
    struct CameraDevice;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDeviceDepthSensingMode
    struct CameraDeviceDepthSensingMode;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDeviceDepthQuality
    struct CameraDeviceDepthQuality;
    // Nested type: ::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel
    struct FixedFoveatedRenderingLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::TiledMultiResLevel
    struct TiledMultiResLevel;
    // Nested type: ::GlobalNamespace::OVRPlugin::PerfMetrics
    struct PerfMetrics;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraDeviceIntrinsicsParameters
    struct CameraDeviceIntrinsicsParameters;
    // Nested type: ::GlobalNamespace::OVRPlugin::OverlayFlag
    struct OverlayFlag;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector2f
    struct Vector2f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector3f
    struct Vector3f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector4f
    struct Vector4f;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector4s
    struct Vector4s;
    // Nested type: ::GlobalNamespace::OVRPlugin::Quatf
    struct Quatf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Posef
    struct Posef;
    // Nested type: ::GlobalNamespace::OVRPlugin::TextureRectMatrixf
    struct TextureRectMatrixf;
    // Nested type: ::GlobalNamespace::OVRPlugin::PoseStatef
    struct PoseStatef;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState4
    struct ControllerState4;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState2
    struct ControllerState2;
    // Nested type: ::GlobalNamespace::OVRPlugin::ControllerState
    struct ControllerState;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsBuffer
    struct HapticsBuffer;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsState
    struct HapticsState;
    // Nested type: ::GlobalNamespace::OVRPlugin::HapticsDesc
    struct HapticsDesc;
    // Nested type: ::GlobalNamespace::OVRPlugin::AppPerfFrameStats
    struct AppPerfFrameStats;
    // Nested type: ::GlobalNamespace::OVRPlugin::AppPerfStats
    struct AppPerfStats;
    // Nested type: ::GlobalNamespace::OVRPlugin::Sizei
    struct Sizei;
    // Nested type: ::GlobalNamespace::OVRPlugin::Sizef
    struct Sizef;
    // Nested type: ::GlobalNamespace::OVRPlugin::Vector2i
    struct Vector2i;
    // Nested type: ::GlobalNamespace::OVRPlugin::Recti
    struct Recti;
    // Nested type: ::GlobalNamespace::OVRPlugin::Rectf
    struct Rectf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Frustumf
    struct Frustumf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Frustumf2
    struct Frustumf2;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoundaryType
    struct BoundaryType;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoundaryTestResult
    struct BoundaryTestResult;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoundaryGeometry
    struct BoundaryGeometry;
    // Nested type: ::GlobalNamespace::OVRPlugin::Colorf
    struct Colorf;
    // Nested type: ::GlobalNamespace::OVRPlugin::Fovf
    struct Fovf;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraIntrinsics
    struct CameraIntrinsics;
    // Nested type: ::GlobalNamespace::OVRPlugin::CameraExtrinsics
    struct CameraExtrinsics;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerLayout
    struct LayerLayout;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerFlags
    struct LayerFlags;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerDesc
    struct LayerDesc;
    // Nested type: ::GlobalNamespace::OVRPlugin::BlendFactor
    struct BlendFactor;
    // Nested type: ::GlobalNamespace::OVRPlugin::LayerSubmit
    struct LayerSubmit;
    // Nested type: ::GlobalNamespace::OVRPlugin::TrackingConfidence
    struct TrackingConfidence;
    // Nested type: ::GlobalNamespace::OVRPlugin::Hand
    struct Hand;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandStatus
    struct HandStatus;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoneId
    struct BoneId;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandFinger
    struct HandFinger;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandFingerPinch
    struct HandFingerPinch;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandState
    struct HandState;
    // Nested type: ::GlobalNamespace::OVRPlugin::HandStateInternal
    struct HandStateInternal;
    // Nested type: ::GlobalNamespace::OVRPlugin::BoneCapsule
    struct BoneCapsule;
    // Nested type: ::GlobalNamespace::OVRPlugin::Bone
    struct Bone;
    // Nested type: ::GlobalNamespace::OVRPlugin::SkeletonConstants
    struct SkeletonConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::SkeletonType
    struct SkeletonType;
    // Nested type: ::GlobalNamespace::OVRPlugin::Skeleton
    struct Skeleton;
    // Nested type: ::GlobalNamespace::OVRPlugin::Skeleton2
    struct Skeleton2;
    // Nested type: ::GlobalNamespace::OVRPlugin::Skeleton2Internal
    struct Skeleton2Internal;
    // Nested type: ::GlobalNamespace::OVRPlugin::MeshConstants
    struct MeshConstants;
    // Nested type: ::GlobalNamespace::OVRPlugin::MeshType
    struct MeshType;
    // Nested type: ::GlobalNamespace::OVRPlugin::Mesh
    class Mesh;
    // Nested type: ::GlobalNamespace::OVRPlugin::ColorSpace
    struct ColorSpace;
    // Nested type: ::GlobalNamespace::OVRPlugin::EventType
    struct EventType;
    // Nested type: ::GlobalNamespace::OVRPlugin::EventDataBuffer
    struct EventDataBuffer;
    // Nested type: ::GlobalNamespace::OVRPlugin::Media
    class Media;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_0
    class OVRP_0_1_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_1
    class OVRP_0_1_1;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_2
    class OVRP_0_1_2;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_1_3
    class OVRP_0_1_3;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_0_5_0
    class OVRP_0_5_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_0_0
    class OVRP_1_0_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_1_0
    class OVRP_1_1_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_2_0
    class OVRP_1_2_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_3_0
    class OVRP_1_3_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_5_0
    class OVRP_1_5_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_6_0
    class OVRP_1_6_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_7_0
    class OVRP_1_7_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_8_0
    class OVRP_1_8_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_9_0
    class OVRP_1_9_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_10_0
    class OVRP_1_10_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_11_0
    class OVRP_1_11_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_12_0
    class OVRP_1_12_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_15_0
    class OVRP_1_15_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_16_0
    class OVRP_1_16_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_17_0
    class OVRP_1_17_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_18_0
    class OVRP_1_18_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_19_0
    class OVRP_1_19_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_21_0
    class OVRP_1_21_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_28_0
    class OVRP_1_28_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_29_0
    class OVRP_1_29_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_30_0
    class OVRP_1_30_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_31_0
    class OVRP_1_31_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_32_0
    class OVRP_1_32_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_34_0
    class OVRP_1_34_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_35_0
    class OVRP_1_35_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_36_0
    class OVRP_1_36_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_37_0
    class OVRP_1_37_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_38_0
    class OVRP_1_38_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_39_0
    class OVRP_1_39_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_40_0
    class OVRP_1_40_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_41_0
    class OVRP_1_41_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_42_0
    class OVRP_1_42_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_43_0
    class OVRP_1_43_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_44_0
    class OVRP_1_44_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_45_0
    class OVRP_1_45_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_46_0
    class OVRP_1_46_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_47_0
    class OVRP_1_47_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_48_0
    class OVRP_1_48_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_49_0
    class OVRP_1_49_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_50_0
    class OVRP_1_50_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_51_0
    class OVRP_1_51_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_52_0
    class OVRP_1_52_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_53_0
    class OVRP_1_53_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_54_0
    class OVRP_1_54_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_55_0
    class OVRP_1_55_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_55_1
    class OVRP_1_55_1;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_56_0
    class OVRP_1_56_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_57_0
    class OVRP_1_57_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_58_0
    class OVRP_1_58_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_59_0
    class OVRP_1_59_0;
    // Nested type: ::GlobalNamespace::OVRPlugin::OVRP_1_60_0
    class OVRP_1_60_0;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/XrApi
    // [TokenAttribute] Offset: FFFFFFFF
    struct XrApi/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: XrApi
      constexpr XrApi(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/XrApi Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public OVRPlugin/XrApi Unknown
      static ::GlobalNamespace::OVRPlugin::XrApi _get_Unknown();
      // Set static field: static public OVRPlugin/XrApi Unknown
      static void _set_Unknown(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi CAPI
      static constexpr const int CAPI = 1;
      // Get static field: static public OVRPlugin/XrApi CAPI
      static ::GlobalNamespace::OVRPlugin::XrApi _get_CAPI();
      // Set static field: static public OVRPlugin/XrApi CAPI
      static void _set_CAPI(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi VRAPI
      static constexpr const int VRAPI = 2;
      // Get static field: static public OVRPlugin/XrApi VRAPI
      static ::GlobalNamespace::OVRPlugin::XrApi _get_VRAPI();
      // Set static field: static public OVRPlugin/XrApi VRAPI
      static void _set_VRAPI(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi OpenXR
      static constexpr const int OpenXR = 3;
      // Get static field: static public OVRPlugin/XrApi OpenXR
      static ::GlobalNamespace::OVRPlugin::XrApi _get_OpenXR();
      // Set static field: static public OVRPlugin/XrApi OpenXR
      static void _set_OpenXR(::GlobalNamespace::OVRPlugin::XrApi value);
      // static field const value: static public OVRPlugin/XrApi EnumSize
      static constexpr const int EnumSize = 2147483647;
      // Get static field: static public OVRPlugin/XrApi EnumSize
      static ::GlobalNamespace::OVRPlugin::XrApi _get_EnumSize();
      // Set static field: static public OVRPlugin/XrApi EnumSize
      static void _set_EnumSize(::GlobalNamespace::OVRPlugin::XrApi value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/XrApi
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::XrApi), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_XrApiSizeCheck;
    static_assert(sizeof(OVRPlugin::XrApi) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Vector3f
    // [TokenAttribute] Offset: FFFFFFFF
    struct Vector3f/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single x
      // Size: 0x4
      // Offset: 0x0
      float x;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single y
      // Size: 0x4
      // Offset: 0x4
      float y;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single z
      // Size: 0x4
      // Offset: 0x8
      float z;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Vector3f
      constexpr Vector3f(float x_ = {}, float y_ = {}, float z_ = {}) noexcept : x{x_}, y{y_}, z{z_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly OVRPlugin/Vector3f zero
      static ::GlobalNamespace::OVRPlugin::Vector3f _get_zero();
      // Set static field: static public readonly OVRPlugin/Vector3f zero
      static void _set_zero(::GlobalNamespace::OVRPlugin::Vector3f value);
      // Get instance field reference: public System.Single x
      [[deprecated("Use field access instead!")]] float& dyn_x();
      // Get instance field reference: public System.Single y
      [[deprecated("Use field access instead!")]] float& dyn_y();
      // Get instance field reference: public System.Single z
      [[deprecated("Use field access instead!")]] float& dyn_z();
      // static private System.Void .cctor()
      // Offset: 0x1B22164
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x1B22070
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // OVRPlugin/Vector3f
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Vector3f), 8 + sizeof(float)> __GlobalNamespace_OVRPlugin_Vector3fSizeCheck;
    static_assert(sizeof(OVRPlugin::Vector3f) == 0xC);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Quatf
    // [TokenAttribute] Offset: FFFFFFFF
    struct Quatf/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Single x
      // Size: 0x4
      // Offset: 0x0
      float x;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single y
      // Size: 0x4
      // Offset: 0x4
      float y;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single z
      // Size: 0x4
      // Offset: 0x8
      float z;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single w
      // Size: 0x4
      // Offset: 0xC
      float w;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: Quatf
      constexpr Quatf(float x_ = {}, float y_ = {}, float z_ = {}, float w_ = {}) noexcept : x{x_}, y{y_}, z{z_}, w{w_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly OVRPlugin/Quatf identity
      static ::GlobalNamespace::OVRPlugin::Quatf _get_identity();
      // Set static field: static public readonly OVRPlugin/Quatf identity
      static void _set_identity(::GlobalNamespace::OVRPlugin::Quatf value);
      // Get instance field reference: public System.Single x
      [[deprecated("Use field access instead!")]] float& dyn_x();
      // Get instance field reference: public System.Single y
      [[deprecated("Use field access instead!")]] float& dyn_y();
      // Get instance field reference: public System.Single z
      [[deprecated("Use field access instead!")]] float& dyn_z();
      // Get instance field reference: public System.Single w
      [[deprecated("Use field access instead!")]] float& dyn_w();
      // static private System.Void .cctor()
      // Offset: 0x1B21C80
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x1B21AA0
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // OVRPlugin/Quatf
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Quatf), 12 + sizeof(float)> __GlobalNamespace_OVRPlugin_QuatfSizeCheck;
    static_assert(sizeof(OVRPlugin::Quatf) == 0x10);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Posef
    // [TokenAttribute] Offset: FFFFFFFF
    struct Posef/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/Quatf Orientation
      // Size: 0x10
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::Quatf Orientation;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Vector3f Position
      // Size: 0xC
      // Offset: 0x10
      ::GlobalNamespace::OVRPlugin::Vector3f Position;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
      public:
      // Creating value type constructor for type: Posef
      constexpr Posef(::GlobalNamespace::OVRPlugin::Quatf Orientation_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f Position_ = {}) noexcept : Orientation{Orientation_}, Position{Position_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get static field: static public readonly OVRPlugin/Posef identity
      static ::GlobalNamespace::OVRPlugin::Posef _get_identity();
      // Set static field: static public readonly OVRPlugin/Posef identity
      static void _set_identity(::GlobalNamespace::OVRPlugin::Posef value);
      // Get instance field reference: public OVRPlugin/Quatf Orientation
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_Orientation();
      // Get instance field reference: public OVRPlugin/Vector3f Position
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_Position();
      // static private System.Void .cctor()
      // Offset: 0x1B219D8
      static void _cctor();
      // public override System.String ToString()
      // Offset: 0x1B218F8
      // Implemented from: System.ValueType
      // Base method: System.String ValueType::ToString()
      ::StringW ToString();
    }; // OVRPlugin/Posef
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Posef), 16 + sizeof(::GlobalNamespace::OVRPlugin::Vector3f)> __GlobalNamespace_OVRPlugin_PosefSizeCheck;
    static_assert(sizeof(OVRPlugin::Posef) == 0x1C);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/TrackingConfidence
    // [TokenAttribute] Offset: FFFFFFFF
    struct TrackingConfidence/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TrackingConfidence
      constexpr TrackingConfidence(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/TrackingConfidence Low
      static constexpr const int Low = 0;
      // Get static field: static public OVRPlugin/TrackingConfidence Low
      static ::GlobalNamespace::OVRPlugin::TrackingConfidence _get_Low();
      // Set static field: static public OVRPlugin/TrackingConfidence Low
      static void _set_Low(::GlobalNamespace::OVRPlugin::TrackingConfidence value);
      // static field const value: static public OVRPlugin/TrackingConfidence High
      static constexpr const int High = 1065353216;
      // Get static field: static public OVRPlugin/TrackingConfidence High
      static ::GlobalNamespace::OVRPlugin::TrackingConfidence _get_High();
      // Set static field: static public OVRPlugin/TrackingConfidence High
      static void _set_High(::GlobalNamespace::OVRPlugin::TrackingConfidence value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/TrackingConfidence
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::TrackingConfidence), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_TrackingConfidenceSizeCheck;
    static_assert(sizeof(OVRPlugin::TrackingConfidence) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/HandStatus
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct HandStatus/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HandStatus
      constexpr HandStatus(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/HandStatus HandTracked
      static constexpr const int HandTracked = 1;
      // Get static field: static public OVRPlugin/HandStatus HandTracked
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_HandTracked();
      // Set static field: static public OVRPlugin/HandStatus HandTracked
      static void _set_HandTracked(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus InputStateValid
      static constexpr const int InputStateValid = 2;
      // Get static field: static public OVRPlugin/HandStatus InputStateValid
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_InputStateValid();
      // Set static field: static public OVRPlugin/HandStatus InputStateValid
      static void _set_InputStateValid(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus SystemGestureInProgress
      static constexpr const int SystemGestureInProgress = 64;
      // Get static field: static public OVRPlugin/HandStatus SystemGestureInProgress
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_SystemGestureInProgress();
      // Set static field: static public OVRPlugin/HandStatus SystemGestureInProgress
      static void _set_SystemGestureInProgress(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus DominantHand
      static constexpr const int DominantHand = 128;
      // Get static field: static public OVRPlugin/HandStatus DominantHand
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_DominantHand();
      // Set static field: static public OVRPlugin/HandStatus DominantHand
      static void _set_DominantHand(::GlobalNamespace::OVRPlugin::HandStatus value);
      // static field const value: static public OVRPlugin/HandStatus MenuPressed
      static constexpr const int MenuPressed = 256;
      // Get static field: static public OVRPlugin/HandStatus MenuPressed
      static ::GlobalNamespace::OVRPlugin::HandStatus _get_MenuPressed();
      // Set static field: static public OVRPlugin/HandStatus MenuPressed
      static void _set_MenuPressed(::GlobalNamespace::OVRPlugin::HandStatus value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/HandStatus
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::HandStatus), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_HandStatusSizeCheck;
    static_assert(sizeof(OVRPlugin::HandStatus) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/BoneId
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneId/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: BoneId
      constexpr BoneId(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/BoneId Invalid
      static constexpr const int Invalid = -1;
      // Get static field: static public OVRPlugin/BoneId Invalid
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Invalid();
      // Set static field: static public OVRPlugin/BoneId Invalid
      static void _set_Invalid(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Start
      static constexpr const int Hand_Start = 0;
      // Get static field: static public OVRPlugin/BoneId Hand_Start
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Start();
      // Set static field: static public OVRPlugin/BoneId Hand_Start
      static void _set_Hand_Start(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_WristRoot
      static constexpr const int Hand_WristRoot = 0;
      // Get static field: static public OVRPlugin/BoneId Hand_WristRoot
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_WristRoot();
      // Set static field: static public OVRPlugin/BoneId Hand_WristRoot
      static void _set_Hand_WristRoot(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_ForearmStub
      static constexpr const int Hand_ForearmStub = 1;
      // Get static field: static public OVRPlugin/BoneId Hand_ForearmStub
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_ForearmStub();
      // Set static field: static public OVRPlugin/BoneId Hand_ForearmStub
      static void _set_Hand_ForearmStub(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb0
      static constexpr const int Hand_Thumb0 = 2;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb0
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb0();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb0
      static void _set_Hand_Thumb0(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb1
      static constexpr const int Hand_Thumb1 = 3;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb1();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb1
      static void _set_Hand_Thumb1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb2
      static constexpr const int Hand_Thumb2 = 4;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb2();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb2
      static void _set_Hand_Thumb2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Thumb3
      static constexpr const int Hand_Thumb3 = 5;
      // Get static field: static public OVRPlugin/BoneId Hand_Thumb3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Thumb3();
      // Set static field: static public OVRPlugin/BoneId Hand_Thumb3
      static void _set_Hand_Thumb3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Index1
      static constexpr const int Hand_Index1 = 6;
      // Get static field: static public OVRPlugin/BoneId Hand_Index1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Index1();
      // Set static field: static public OVRPlugin/BoneId Hand_Index1
      static void _set_Hand_Index1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Index2
      static constexpr const int Hand_Index2 = 7;
      // Get static field: static public OVRPlugin/BoneId Hand_Index2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Index2();
      // Set static field: static public OVRPlugin/BoneId Hand_Index2
      static void _set_Hand_Index2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Index3
      static constexpr const int Hand_Index3 = 8;
      // Get static field: static public OVRPlugin/BoneId Hand_Index3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Index3();
      // Set static field: static public OVRPlugin/BoneId Hand_Index3
      static void _set_Hand_Index3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Middle1
      static constexpr const int Hand_Middle1 = 9;
      // Get static field: static public OVRPlugin/BoneId Hand_Middle1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Middle1();
      // Set static field: static public OVRPlugin/BoneId Hand_Middle1
      static void _set_Hand_Middle1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Middle2
      static constexpr const int Hand_Middle2 = 10;
      // Get static field: static public OVRPlugin/BoneId Hand_Middle2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Middle2();
      // Set static field: static public OVRPlugin/BoneId Hand_Middle2
      static void _set_Hand_Middle2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Middle3
      static constexpr const int Hand_Middle3 = 11;
      // Get static field: static public OVRPlugin/BoneId Hand_Middle3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Middle3();
      // Set static field: static public OVRPlugin/BoneId Hand_Middle3
      static void _set_Hand_Middle3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Ring1
      static constexpr const int Hand_Ring1 = 12;
      // Get static field: static public OVRPlugin/BoneId Hand_Ring1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Ring1();
      // Set static field: static public OVRPlugin/BoneId Hand_Ring1
      static void _set_Hand_Ring1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Ring2
      static constexpr const int Hand_Ring2 = 13;
      // Get static field: static public OVRPlugin/BoneId Hand_Ring2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Ring2();
      // Set static field: static public OVRPlugin/BoneId Hand_Ring2
      static void _set_Hand_Ring2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Ring3
      static constexpr const int Hand_Ring3 = 14;
      // Get static field: static public OVRPlugin/BoneId Hand_Ring3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Ring3();
      // Set static field: static public OVRPlugin/BoneId Hand_Ring3
      static void _set_Hand_Ring3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky0
      static constexpr const int Hand_Pinky0 = 15;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky0
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky0();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky0
      static void _set_Hand_Pinky0(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky1
      static constexpr const int Hand_Pinky1 = 16;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky1
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky1();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky1
      static void _set_Hand_Pinky1(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky2
      static constexpr const int Hand_Pinky2 = 17;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky2
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky2();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky2
      static void _set_Hand_Pinky2(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_Pinky3
      static constexpr const int Hand_Pinky3 = 18;
      // Get static field: static public OVRPlugin/BoneId Hand_Pinky3
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_Pinky3();
      // Set static field: static public OVRPlugin/BoneId Hand_Pinky3
      static void _set_Hand_Pinky3(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_MaxSkinnable
      static constexpr const int Hand_MaxSkinnable = 19;
      // Get static field: static public OVRPlugin/BoneId Hand_MaxSkinnable
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_MaxSkinnable();
      // Set static field: static public OVRPlugin/BoneId Hand_MaxSkinnable
      static void _set_Hand_MaxSkinnable(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_ThumbTip
      static constexpr const int Hand_ThumbTip = 19;
      // Get static field: static public OVRPlugin/BoneId Hand_ThumbTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_ThumbTip();
      // Set static field: static public OVRPlugin/BoneId Hand_ThumbTip
      static void _set_Hand_ThumbTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_IndexTip
      static constexpr const int Hand_IndexTip = 20;
      // Get static field: static public OVRPlugin/BoneId Hand_IndexTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_IndexTip();
      // Set static field: static public OVRPlugin/BoneId Hand_IndexTip
      static void _set_Hand_IndexTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_MiddleTip
      static constexpr const int Hand_MiddleTip = 21;
      // Get static field: static public OVRPlugin/BoneId Hand_MiddleTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_MiddleTip();
      // Set static field: static public OVRPlugin/BoneId Hand_MiddleTip
      static void _set_Hand_MiddleTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_RingTip
      static constexpr const int Hand_RingTip = 22;
      // Get static field: static public OVRPlugin/BoneId Hand_RingTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_RingTip();
      // Set static field: static public OVRPlugin/BoneId Hand_RingTip
      static void _set_Hand_RingTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_PinkyTip
      static constexpr const int Hand_PinkyTip = 23;
      // Get static field: static public OVRPlugin/BoneId Hand_PinkyTip
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_PinkyTip();
      // Set static field: static public OVRPlugin/BoneId Hand_PinkyTip
      static void _set_Hand_PinkyTip(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Hand_End
      static constexpr const int Hand_End = 24;
      // Get static field: static public OVRPlugin/BoneId Hand_End
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Hand_End();
      // Set static field: static public OVRPlugin/BoneId Hand_End
      static void _set_Hand_End(::GlobalNamespace::OVRPlugin::BoneId value);
      // static field const value: static public OVRPlugin/BoneId Max
      static constexpr const int Max = 50;
      // Get static field: static public OVRPlugin/BoneId Max
      static ::GlobalNamespace::OVRPlugin::BoneId _get_Max();
      // Set static field: static public OVRPlugin/BoneId Max
      static void _set_Max(::GlobalNamespace::OVRPlugin::BoneId value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/BoneId
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::BoneId), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_BoneIdSizeCheck;
    static_assert(sizeof(OVRPlugin::BoneId) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/HandFingerPinch
    // [TokenAttribute] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct HandFingerPinch/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HandFingerPinch
      constexpr HandFingerPinch(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/HandFingerPinch Thumb
      static constexpr const int Thumb = 1;
      // Get static field: static public OVRPlugin/HandFingerPinch Thumb
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Thumb();
      // Set static field: static public OVRPlugin/HandFingerPinch Thumb
      static void _set_Thumb(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Index
      static constexpr const int Index = 2;
      // Get static field: static public OVRPlugin/HandFingerPinch Index
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Index();
      // Set static field: static public OVRPlugin/HandFingerPinch Index
      static void _set_Index(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Middle
      static constexpr const int Middle = 4;
      // Get static field: static public OVRPlugin/HandFingerPinch Middle
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Middle();
      // Set static field: static public OVRPlugin/HandFingerPinch Middle
      static void _set_Middle(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Ring
      static constexpr const int Ring = 8;
      // Get static field: static public OVRPlugin/HandFingerPinch Ring
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Ring();
      // Set static field: static public OVRPlugin/HandFingerPinch Ring
      static void _set_Ring(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // static field const value: static public OVRPlugin/HandFingerPinch Pinky
      static constexpr const int Pinky = 16;
      // Get static field: static public OVRPlugin/HandFingerPinch Pinky
      static ::GlobalNamespace::OVRPlugin::HandFingerPinch _get_Pinky();
      // Set static field: static public OVRPlugin/HandFingerPinch Pinky
      static void _set_Pinky(::GlobalNamespace::OVRPlugin::HandFingerPinch value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/HandFingerPinch
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::HandFingerPinch), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_HandFingerPinchSizeCheck;
    static_assert(sizeof(OVRPlugin::HandFingerPinch) == 0x4);
    // Size: 0x200
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/HandStateInternal
    // [TokenAttribute] Offset: FFFFFFFF
    struct HandStateInternal/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/HandStatus Status
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::HandStatus Status;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::HandStatus) == 0x4);
      // public OVRPlugin/Posef RootPose
      // Size: 0x1C
      // Offset: 0x4
      ::GlobalNamespace::OVRPlugin::Posef RootPose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      // public OVRPlugin/Quatf BoneRotations_0
      // Size: 0x10
      // Offset: 0x20
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_1
      // Size: 0x10
      // Offset: 0x30
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_2
      // Size: 0x10
      // Offset: 0x40
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_3
      // Size: 0x10
      // Offset: 0x50
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_4
      // Size: 0x10
      // Offset: 0x60
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_5
      // Size: 0x10
      // Offset: 0x70
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_5;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_6
      // Size: 0x10
      // Offset: 0x80
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_6;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_7
      // Size: 0x10
      // Offset: 0x90
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_7;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_8
      // Size: 0x10
      // Offset: 0xA0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_8;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_9
      // Size: 0x10
      // Offset: 0xB0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_9;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_10
      // Size: 0x10
      // Offset: 0xC0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_10;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_11
      // Size: 0x10
      // Offset: 0xD0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_11;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_12
      // Size: 0x10
      // Offset: 0xE0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_12;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_13
      // Size: 0x10
      // Offset: 0xF0
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_13;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_14
      // Size: 0x10
      // Offset: 0x100
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_14;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_15
      // Size: 0x10
      // Offset: 0x110
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_15;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_16
      // Size: 0x10
      // Offset: 0x120
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_16;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_17
      // Size: 0x10
      // Offset: 0x130
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_17;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_18
      // Size: 0x10
      // Offset: 0x140
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_18;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_19
      // Size: 0x10
      // Offset: 0x150
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_19;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_20
      // Size: 0x10
      // Offset: 0x160
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_20;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_21
      // Size: 0x10
      // Offset: 0x170
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_21;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_22
      // Size: 0x10
      // Offset: 0x180
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_22;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/Quatf BoneRotations_23
      // Size: 0x10
      // Offset: 0x190
      ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_23;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Quatf) == 0x10);
      // public OVRPlugin/HandFingerPinch Pinches
      // Size: 0x4
      // Offset: 0x1A0
      ::GlobalNamespace::OVRPlugin::HandFingerPinch Pinches;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::HandFingerPinch) == 0x4);
      // public System.Single PinchStrength_0
      // Size: 0x4
      // Offset: 0x1A4
      float PinchStrength_0;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_1
      // Size: 0x4
      // Offset: 0x1A8
      float PinchStrength_1;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_2
      // Size: 0x4
      // Offset: 0x1AC
      float PinchStrength_2;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_3
      // Size: 0x4
      // Offset: 0x1B0
      float PinchStrength_3;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single PinchStrength_4
      // Size: 0x4
      // Offset: 0x1B4
      float PinchStrength_4;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public OVRPlugin/Posef PointerPose
      // Size: 0x1C
      // Offset: 0x1B8
      ::GlobalNamespace::OVRPlugin::Posef PointerPose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      // public System.Single HandScale
      // Size: 0x4
      // Offset: 0x1D4
      float HandScale;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public OVRPlugin/TrackingConfidence HandConfidence
      // Size: 0x4
      // Offset: 0x1D8
      ::GlobalNamespace::OVRPlugin::TrackingConfidence HandConfidence;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_0
      // Size: 0x4
      // Offset: 0x1DC
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_1
      // Size: 0x4
      // Offset: 0x1E0
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_2
      // Size: 0x4
      // Offset: 0x1E4
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_3
      // Size: 0x4
      // Offset: 0x1E8
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public OVRPlugin/TrackingConfidence FingerConfidences_4
      // Size: 0x4
      // Offset: 0x1EC
      ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::TrackingConfidence) == 0x4);
      // public System.Double RequestedTimeStamp
      // Size: 0x8
      // Offset: 0x1F0
      double RequestedTimeStamp;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      // public System.Double SampleTimeStamp
      // Size: 0x8
      // Offset: 0x1F8
      double SampleTimeStamp;
      // Field size check
      static_assert(sizeof(double) == 0x8);
      public:
      // Creating value type constructor for type: HandStateInternal
      constexpr HandStateInternal(::GlobalNamespace::OVRPlugin::HandStatus Status_ = {}, ::GlobalNamespace::OVRPlugin::Posef RootPose_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_0_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_1_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_2_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_3_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_4_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_5_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_6_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_7_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_8_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_9_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_10_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_11_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_12_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_13_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_14_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_15_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_16_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_17_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_18_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_19_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_20_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_21_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_22_ = {}, ::GlobalNamespace::OVRPlugin::Quatf BoneRotations_23_ = {}, ::GlobalNamespace::OVRPlugin::HandFingerPinch Pinches_ = {}, float PinchStrength_0_ = {}, float PinchStrength_1_ = {}, float PinchStrength_2_ = {}, float PinchStrength_3_ = {}, float PinchStrength_4_ = {}, ::GlobalNamespace::OVRPlugin::Posef PointerPose_ = {}, float HandScale_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence HandConfidence_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_0_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_1_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_2_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_3_ = {}, ::GlobalNamespace::OVRPlugin::TrackingConfidence FingerConfidences_4_ = {}, double RequestedTimeStamp_ = {}, double SampleTimeStamp_ = {}) noexcept : Status{Status_}, RootPose{RootPose_}, BoneRotations_0{BoneRotations_0_}, BoneRotations_1{BoneRotations_1_}, BoneRotations_2{BoneRotations_2_}, BoneRotations_3{BoneRotations_3_}, BoneRotations_4{BoneRotations_4_}, BoneRotations_5{BoneRotations_5_}, BoneRotations_6{BoneRotations_6_}, BoneRotations_7{BoneRotations_7_}, BoneRotations_8{BoneRotations_8_}, BoneRotations_9{BoneRotations_9_}, BoneRotations_10{BoneRotations_10_}, BoneRotations_11{BoneRotations_11_}, BoneRotations_12{BoneRotations_12_}, BoneRotations_13{BoneRotations_13_}, BoneRotations_14{BoneRotations_14_}, BoneRotations_15{BoneRotations_15_}, BoneRotations_16{BoneRotations_16_}, BoneRotations_17{BoneRotations_17_}, BoneRotations_18{BoneRotations_18_}, BoneRotations_19{BoneRotations_19_}, BoneRotations_20{BoneRotations_20_}, BoneRotations_21{BoneRotations_21_}, BoneRotations_22{BoneRotations_22_}, BoneRotations_23{BoneRotations_23_}, Pinches{Pinches_}, PinchStrength_0{PinchStrength_0_}, PinchStrength_1{PinchStrength_1_}, PinchStrength_2{PinchStrength_2_}, PinchStrength_3{PinchStrength_3_}, PinchStrength_4{PinchStrength_4_}, PointerPose{PointerPose_}, HandScale{HandScale_}, HandConfidence{HandConfidence_}, FingerConfidences_0{FingerConfidences_0_}, FingerConfidences_1{FingerConfidences_1_}, FingerConfidences_2{FingerConfidences_2_}, FingerConfidences_3{FingerConfidences_3_}, FingerConfidences_4{FingerConfidences_4_}, RequestedTimeStamp{RequestedTimeStamp_}, SampleTimeStamp{SampleTimeStamp_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/HandStatus Status
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandStatus& dyn_Status();
      // Get instance field reference: public OVRPlugin/Posef RootPose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_RootPose();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_0();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_1();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_2();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_3();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_4();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_5
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_5();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_6
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_6();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_7
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_7();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_8
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_8();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_9
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_9();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_10
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_10();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_11
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_11();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_12
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_12();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_13
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_13();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_14
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_14();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_15
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_15();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_16
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_16();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_17
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_17();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_18
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_18();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_19
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_19();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_20
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_20();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_21
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_21();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_22
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_22();
      // Get instance field reference: public OVRPlugin/Quatf BoneRotations_23
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Quatf& dyn_BoneRotations_23();
      // Get instance field reference: public OVRPlugin/HandFingerPinch Pinches
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::HandFingerPinch& dyn_Pinches();
      // Get instance field reference: public System.Single PinchStrength_0
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_0();
      // Get instance field reference: public System.Single PinchStrength_1
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_1();
      // Get instance field reference: public System.Single PinchStrength_2
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_2();
      // Get instance field reference: public System.Single PinchStrength_3
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_3();
      // Get instance field reference: public System.Single PinchStrength_4
      [[deprecated("Use field access instead!")]] float& dyn_PinchStrength_4();
      // Get instance field reference: public OVRPlugin/Posef PointerPose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_PointerPose();
      // Get instance field reference: public System.Single HandScale
      [[deprecated("Use field access instead!")]] float& dyn_HandScale();
      // Get instance field reference: public OVRPlugin/TrackingConfidence HandConfidence
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_HandConfidence();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_0();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_1();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_2();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_3();
      // Get instance field reference: public OVRPlugin/TrackingConfidence FingerConfidences_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::TrackingConfidence& dyn_FingerConfidences_4();
      // Get instance field reference: public System.Double RequestedTimeStamp
      [[deprecated("Use field access instead!")]] double& dyn_RequestedTimeStamp();
      // Get instance field reference: public System.Double SampleTimeStamp
      [[deprecated("Use field access instead!")]] double& dyn_SampleTimeStamp();
    }; // OVRPlugin/HandStateInternal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::HandStateInternal), 504 + sizeof(double)> __GlobalNamespace_OVRPlugin_HandStateInternalSizeCheck;
    static_assert(sizeof(OVRPlugin::HandStateInternal) == 0x200);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/BoneCapsule
    // [TokenAttribute] Offset: FFFFFFFF
    struct BoneCapsule/*, public ::System::ValueType*/ {
      public:
      public:
      // public System.Int16 BoneIndex
      // Size: 0x2
      // Offset: 0x0
      int16_t BoneIndex;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      // Padding between fields: BoneIndex and: StartPoint
      char __padding0[0x2] = {};
      // public OVRPlugin/Vector3f StartPoint
      // Size: 0xC
      // Offset: 0x4
      ::GlobalNamespace::OVRPlugin::Vector3f StartPoint;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
      // public OVRPlugin/Vector3f EndPoint
      // Size: 0xC
      // Offset: 0x10
      ::GlobalNamespace::OVRPlugin::Vector3f EndPoint;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Vector3f) == 0xC);
      // public System.Single Radius
      // Size: 0x4
      // Offset: 0x1C
      float Radius;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      public:
      // Creating value type constructor for type: BoneCapsule
      constexpr BoneCapsule(int16_t BoneIndex_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f StartPoint_ = {}, ::GlobalNamespace::OVRPlugin::Vector3f EndPoint_ = {}, float Radius_ = {}) noexcept : BoneIndex{BoneIndex_}, StartPoint{StartPoint_}, EndPoint{EndPoint_}, Radius{Radius_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public System.Int16 BoneIndex
      [[deprecated("Use field access instead!")]] int16_t& dyn_BoneIndex();
      // Get instance field reference: public OVRPlugin/Vector3f StartPoint
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_StartPoint();
      // Get instance field reference: public OVRPlugin/Vector3f EndPoint
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Vector3f& dyn_EndPoint();
      // Get instance field reference: public System.Single Radius
      [[deprecated("Use field access instead!")]] float& dyn_Radius();
    }; // OVRPlugin/BoneCapsule
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::BoneCapsule), 28 + sizeof(float)> __GlobalNamespace_OVRPlugin_BoneCapsuleSizeCheck;
    static_assert(sizeof(OVRPlugin::BoneCapsule) == 0x20);
    // Size: 0x24
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Bone
    // [TokenAttribute] Offset: FFFFFFFF
    struct Bone/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/BoneId Id
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::BoneId Id;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneId) == 0x4);
      // public System.Int16 ParentBoneIndex
      // Size: 0x2
      // Offset: 0x4
      int16_t ParentBoneIndex;
      // Field size check
      static_assert(sizeof(int16_t) == 0x2);
      // Padding between fields: ParentBoneIndex and: Pose
      char __padding1[0x2] = {};
      // public OVRPlugin/Posef Pose
      // Size: 0x1C
      // Offset: 0x8
      ::GlobalNamespace::OVRPlugin::Posef Pose;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Posef) == 0x1C);
      public:
      // Creating value type constructor for type: Bone
      constexpr Bone(::GlobalNamespace::OVRPlugin::BoneId Id_ = {}, int16_t ParentBoneIndex_ = {}, ::GlobalNamespace::OVRPlugin::Posef Pose_ = {}) noexcept : Id{Id_}, ParentBoneIndex{ParentBoneIndex_}, Pose{Pose_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/BoneId Id
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneId& dyn_Id();
      // Get instance field reference: public System.Int16 ParentBoneIndex
      [[deprecated("Use field access instead!")]] int16_t& dyn_ParentBoneIndex();
      // Get instance field reference: public OVRPlugin/Posef Pose
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Posef& dyn_Pose();
    }; // OVRPlugin/Bone
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Bone), 8 + sizeof(::GlobalNamespace::OVRPlugin::Posef)> __GlobalNamespace_OVRPlugin_BoneSizeCheck;
    static_assert(sizeof(OVRPlugin::Bone) == 0x24);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OVRPlugin/SkeletonType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SkeletonType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SkeletonType
      constexpr SkeletonType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRPlugin/SkeletonType None
      static constexpr const int None = -1;
      // Get static field: static public OVRPlugin/SkeletonType None
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_None();
      // Set static field: static public OVRPlugin/SkeletonType None
      static void _set_None(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // static field const value: static public OVRPlugin/SkeletonType HandLeft
      static constexpr const int HandLeft = 0;
      // Get static field: static public OVRPlugin/SkeletonType HandLeft
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_HandLeft();
      // Set static field: static public OVRPlugin/SkeletonType HandLeft
      static void _set_HandLeft(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // static field const value: static public OVRPlugin/SkeletonType HandRight
      static constexpr const int HandRight = 1;
      // Get static field: static public OVRPlugin/SkeletonType HandRight
      static ::GlobalNamespace::OVRPlugin::SkeletonType _get_HandRight();
      // Set static field: static public OVRPlugin/SkeletonType HandRight
      static void _set_HandRight(::GlobalNamespace::OVRPlugin::SkeletonType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // OVRPlugin/SkeletonType
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::SkeletonType), 0 + sizeof(int)> __GlobalNamespace_OVRPlugin_SkeletonTypeSizeCheck;
    static_assert(sizeof(OVRPlugin::SkeletonType) == 0x4);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Skeleton
    // [TokenAttribute] Offset: FFFFFFFF
    struct Skeleton/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/SkeletonType Type
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::SkeletonType Type;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::SkeletonType) == 0x4);
      // public System.UInt32 NumBones
      // Size: 0x4
      // Offset: 0x4
      uint NumBones;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.UInt32 NumBoneCapsules
      // Size: 0x4
      // Offset: 0x8
      uint NumBoneCapsules;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // Padding between fields: NumBoneCapsules and: Bones
      char __padding2[0x4] = {};
      // public OVRPlugin/Bone[] Bones
      // Size: 0x8
      // Offset: 0x10
      ::ArrayW<::GlobalNamespace::OVRPlugin::Bone> Bones;
      // Field size check
      static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::Bone>) == 0x8);
      // public OVRPlugin/BoneCapsule[] BoneCapsules
      // Size: 0x8
      // Offset: 0x18
      ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule> BoneCapsules;
      // Field size check
      static_assert(sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>) == 0x8);
      public:
      // Creating value type constructor for type: Skeleton
      constexpr Skeleton(::GlobalNamespace::OVRPlugin::SkeletonType Type_ = {}, uint NumBones_ = {}, uint NumBoneCapsules_ = {}, ::ArrayW<::GlobalNamespace::OVRPlugin::Bone> Bones_ = ::ArrayW<::GlobalNamespace::OVRPlugin::Bone>(static_cast<void*>(nullptr)), ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule> BoneCapsules_ = ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>(static_cast<void*>(nullptr))) noexcept : Type{Type_}, NumBones{NumBones_}, NumBoneCapsules{NumBoneCapsules_}, Bones{Bones_}, BoneCapsules{BoneCapsules_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/SkeletonType Type
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SkeletonType& dyn_Type();
      // Get instance field reference: public System.UInt32 NumBones
      [[deprecated("Use field access instead!")]] uint& dyn_NumBones();
      // Get instance field reference: public System.UInt32 NumBoneCapsules
      [[deprecated("Use field access instead!")]] uint& dyn_NumBoneCapsules();
      // Get instance field reference: public OVRPlugin/Bone[] Bones
      [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::Bone>& dyn_Bones();
      // Get instance field reference: public OVRPlugin/BoneCapsule[] BoneCapsules
      [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>& dyn_BoneCapsules();
    }; // OVRPlugin/Skeleton
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Skeleton), 24 + sizeof(::ArrayW<::GlobalNamespace::OVRPlugin::BoneCapsule>)> __GlobalNamespace_OVRPlugin_SkeletonSizeCheck;
    static_assert(sizeof(OVRPlugin::Skeleton) == 0x20);
    // Size: 0x974
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRPlugin/Skeleton2Internal
    // [TokenAttribute] Offset: FFFFFFFF
    struct Skeleton2Internal/*, public ::System::ValueType*/ {
      public:
      public:
      // public OVRPlugin/SkeletonType Type
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::OVRPlugin::SkeletonType Type;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::SkeletonType) == 0x4);
      // public System.UInt32 NumBones
      // Size: 0x4
      // Offset: 0x4
      uint NumBones;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public System.UInt32 NumBoneCapsules
      // Size: 0x4
      // Offset: 0x8
      uint NumBoneCapsules;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public OVRPlugin/Bone Bones_0
      // Size: 0x24
      // Offset: 0xC
      ::GlobalNamespace::OVRPlugin::Bone Bones_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_1
      // Size: 0x24
      // Offset: 0x30
      ::GlobalNamespace::OVRPlugin::Bone Bones_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_2
      // Size: 0x24
      // Offset: 0x54
      ::GlobalNamespace::OVRPlugin::Bone Bones_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_3
      // Size: 0x24
      // Offset: 0x78
      ::GlobalNamespace::OVRPlugin::Bone Bones_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_4
      // Size: 0x24
      // Offset: 0x9C
      ::GlobalNamespace::OVRPlugin::Bone Bones_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_5
      // Size: 0x24
      // Offset: 0xC0
      ::GlobalNamespace::OVRPlugin::Bone Bones_5;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_6
      // Size: 0x24
      // Offset: 0xE4
      ::GlobalNamespace::OVRPlugin::Bone Bones_6;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_7
      // Size: 0x24
      // Offset: 0x108
      ::GlobalNamespace::OVRPlugin::Bone Bones_7;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_8
      // Size: 0x24
      // Offset: 0x12C
      ::GlobalNamespace::OVRPlugin::Bone Bones_8;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_9
      // Size: 0x24
      // Offset: 0x150
      ::GlobalNamespace::OVRPlugin::Bone Bones_9;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_10
      // Size: 0x24
      // Offset: 0x174
      ::GlobalNamespace::OVRPlugin::Bone Bones_10;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_11
      // Size: 0x24
      // Offset: 0x198
      ::GlobalNamespace::OVRPlugin::Bone Bones_11;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_12
      // Size: 0x24
      // Offset: 0x1BC
      ::GlobalNamespace::OVRPlugin::Bone Bones_12;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_13
      // Size: 0x24
      // Offset: 0x1E0
      ::GlobalNamespace::OVRPlugin::Bone Bones_13;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_14
      // Size: 0x24
      // Offset: 0x204
      ::GlobalNamespace::OVRPlugin::Bone Bones_14;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_15
      // Size: 0x24
      // Offset: 0x228
      ::GlobalNamespace::OVRPlugin::Bone Bones_15;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_16
      // Size: 0x24
      // Offset: 0x24C
      ::GlobalNamespace::OVRPlugin::Bone Bones_16;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_17
      // Size: 0x24
      // Offset: 0x270
      ::GlobalNamespace::OVRPlugin::Bone Bones_17;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_18
      // Size: 0x24
      // Offset: 0x294
      ::GlobalNamespace::OVRPlugin::Bone Bones_18;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_19
      // Size: 0x24
      // Offset: 0x2B8
      ::GlobalNamespace::OVRPlugin::Bone Bones_19;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_20
      // Size: 0x24
      // Offset: 0x2DC
      ::GlobalNamespace::OVRPlugin::Bone Bones_20;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_21
      // Size: 0x24
      // Offset: 0x300
      ::GlobalNamespace::OVRPlugin::Bone Bones_21;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_22
      // Size: 0x24
      // Offset: 0x324
      ::GlobalNamespace::OVRPlugin::Bone Bones_22;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_23
      // Size: 0x24
      // Offset: 0x348
      ::GlobalNamespace::OVRPlugin::Bone Bones_23;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_24
      // Size: 0x24
      // Offset: 0x36C
      ::GlobalNamespace::OVRPlugin::Bone Bones_24;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_25
      // Size: 0x24
      // Offset: 0x390
      ::GlobalNamespace::OVRPlugin::Bone Bones_25;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_26
      // Size: 0x24
      // Offset: 0x3B4
      ::GlobalNamespace::OVRPlugin::Bone Bones_26;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_27
      // Size: 0x24
      // Offset: 0x3D8
      ::GlobalNamespace::OVRPlugin::Bone Bones_27;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_28
      // Size: 0x24
      // Offset: 0x3FC
      ::GlobalNamespace::OVRPlugin::Bone Bones_28;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_29
      // Size: 0x24
      // Offset: 0x420
      ::GlobalNamespace::OVRPlugin::Bone Bones_29;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_30
      // Size: 0x24
      // Offset: 0x444
      ::GlobalNamespace::OVRPlugin::Bone Bones_30;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_31
      // Size: 0x24
      // Offset: 0x468
      ::GlobalNamespace::OVRPlugin::Bone Bones_31;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_32
      // Size: 0x24
      // Offset: 0x48C
      ::GlobalNamespace::OVRPlugin::Bone Bones_32;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_33
      // Size: 0x24
      // Offset: 0x4B0
      ::GlobalNamespace::OVRPlugin::Bone Bones_33;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_34
      // Size: 0x24
      // Offset: 0x4D4
      ::GlobalNamespace::OVRPlugin::Bone Bones_34;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_35
      // Size: 0x24
      // Offset: 0x4F8
      ::GlobalNamespace::OVRPlugin::Bone Bones_35;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_36
      // Size: 0x24
      // Offset: 0x51C
      ::GlobalNamespace::OVRPlugin::Bone Bones_36;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_37
      // Size: 0x24
      // Offset: 0x540
      ::GlobalNamespace::OVRPlugin::Bone Bones_37;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_38
      // Size: 0x24
      // Offset: 0x564
      ::GlobalNamespace::OVRPlugin::Bone Bones_38;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_39
      // Size: 0x24
      // Offset: 0x588
      ::GlobalNamespace::OVRPlugin::Bone Bones_39;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_40
      // Size: 0x24
      // Offset: 0x5AC
      ::GlobalNamespace::OVRPlugin::Bone Bones_40;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_41
      // Size: 0x24
      // Offset: 0x5D0
      ::GlobalNamespace::OVRPlugin::Bone Bones_41;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_42
      // Size: 0x24
      // Offset: 0x5F4
      ::GlobalNamespace::OVRPlugin::Bone Bones_42;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_43
      // Size: 0x24
      // Offset: 0x618
      ::GlobalNamespace::OVRPlugin::Bone Bones_43;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_44
      // Size: 0x24
      // Offset: 0x63C
      ::GlobalNamespace::OVRPlugin::Bone Bones_44;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_45
      // Size: 0x24
      // Offset: 0x660
      ::GlobalNamespace::OVRPlugin::Bone Bones_45;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_46
      // Size: 0x24
      // Offset: 0x684
      ::GlobalNamespace::OVRPlugin::Bone Bones_46;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_47
      // Size: 0x24
      // Offset: 0x6A8
      ::GlobalNamespace::OVRPlugin::Bone Bones_47;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_48
      // Size: 0x24
      // Offset: 0x6CC
      ::GlobalNamespace::OVRPlugin::Bone Bones_48;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/Bone Bones_49
      // Size: 0x24
      // Offset: 0x6F0
      ::GlobalNamespace::OVRPlugin::Bone Bones_49;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::Bone) == 0x24);
      // public OVRPlugin/BoneCapsule BoneCapsules_0
      // Size: 0x20
      // Offset: 0x714
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_1
      // Size: 0x20
      // Offset: 0x734
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_2
      // Size: 0x20
      // Offset: 0x754
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_3
      // Size: 0x20
      // Offset: 0x774
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_4
      // Size: 0x20
      // Offset: 0x794
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_4;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_5
      // Size: 0x20
      // Offset: 0x7B4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_5;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_6
      // Size: 0x20
      // Offset: 0x7D4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_6;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_7
      // Size: 0x20
      // Offset: 0x7F4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_7;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_8
      // Size: 0x20
      // Offset: 0x814
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_8;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_9
      // Size: 0x20
      // Offset: 0x834
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_9;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_10
      // Size: 0x20
      // Offset: 0x854
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_10;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_11
      // Size: 0x20
      // Offset: 0x874
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_11;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_12
      // Size: 0x20
      // Offset: 0x894
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_12;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_13
      // Size: 0x20
      // Offset: 0x8B4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_13;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_14
      // Size: 0x20
      // Offset: 0x8D4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_14;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_15
      // Size: 0x20
      // Offset: 0x8F4
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_15;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_16
      // Size: 0x20
      // Offset: 0x914
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_16;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_17
      // Size: 0x20
      // Offset: 0x934
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_17;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      // public OVRPlugin/BoneCapsule BoneCapsules_18
      // Size: 0x20
      // Offset: 0x954
      ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_18;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule) == 0x20);
      public:
      // Creating value type constructor for type: Skeleton2Internal
      constexpr Skeleton2Internal(::GlobalNamespace::OVRPlugin::SkeletonType Type_ = {}, uint NumBones_ = {}, uint NumBoneCapsules_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_0_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_1_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_2_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_3_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_4_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_5_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_6_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_7_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_8_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_9_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_10_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_11_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_12_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_13_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_14_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_15_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_16_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_17_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_18_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_19_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_20_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_21_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_22_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_23_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_24_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_25_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_26_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_27_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_28_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_29_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_30_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_31_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_32_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_33_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_34_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_35_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_36_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_37_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_38_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_39_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_40_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_41_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_42_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_43_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_44_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_45_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_46_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_47_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_48_ = {}, ::GlobalNamespace::OVRPlugin::Bone Bones_49_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_0_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_1_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_2_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_3_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_4_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_5_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_6_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_7_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_8_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_9_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_10_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_11_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_12_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_13_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_14_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_15_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_16_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_17_ = {}, ::GlobalNamespace::OVRPlugin::BoneCapsule BoneCapsules_18_ = {}) noexcept : Type{Type_}, NumBones{NumBones_}, NumBoneCapsules{NumBoneCapsules_}, Bones_0{Bones_0_}, Bones_1{Bones_1_}, Bones_2{Bones_2_}, Bones_3{Bones_3_}, Bones_4{Bones_4_}, Bones_5{Bones_5_}, Bones_6{Bones_6_}, Bones_7{Bones_7_}, Bones_8{Bones_8_}, Bones_9{Bones_9_}, Bones_10{Bones_10_}, Bones_11{Bones_11_}, Bones_12{Bones_12_}, Bones_13{Bones_13_}, Bones_14{Bones_14_}, Bones_15{Bones_15_}, Bones_16{Bones_16_}, Bones_17{Bones_17_}, Bones_18{Bones_18_}, Bones_19{Bones_19_}, Bones_20{Bones_20_}, Bones_21{Bones_21_}, Bones_22{Bones_22_}, Bones_23{Bones_23_}, Bones_24{Bones_24_}, Bones_25{Bones_25_}, Bones_26{Bones_26_}, Bones_27{Bones_27_}, Bones_28{Bones_28_}, Bones_29{Bones_29_}, Bones_30{Bones_30_}, Bones_31{Bones_31_}, Bones_32{Bones_32_}, Bones_33{Bones_33_}, Bones_34{Bones_34_}, Bones_35{Bones_35_}, Bones_36{Bones_36_}, Bones_37{Bones_37_}, Bones_38{Bones_38_}, Bones_39{Bones_39_}, Bones_40{Bones_40_}, Bones_41{Bones_41_}, Bones_42{Bones_42_}, Bones_43{Bones_43_}, Bones_44{Bones_44_}, Bones_45{Bones_45_}, Bones_46{Bones_46_}, Bones_47{Bones_47_}, Bones_48{Bones_48_}, Bones_49{Bones_49_}, BoneCapsules_0{BoneCapsules_0_}, BoneCapsules_1{BoneCapsules_1_}, BoneCapsules_2{BoneCapsules_2_}, BoneCapsules_3{BoneCapsules_3_}, BoneCapsules_4{BoneCapsules_4_}, BoneCapsules_5{BoneCapsules_5_}, BoneCapsules_6{BoneCapsules_6_}, BoneCapsules_7{BoneCapsules_7_}, BoneCapsules_8{BoneCapsules_8_}, BoneCapsules_9{BoneCapsules_9_}, BoneCapsules_10{BoneCapsules_10_}, BoneCapsules_11{BoneCapsules_11_}, BoneCapsules_12{BoneCapsules_12_}, BoneCapsules_13{BoneCapsules_13_}, BoneCapsules_14{BoneCapsules_14_}, BoneCapsules_15{BoneCapsules_15_}, BoneCapsules_16{BoneCapsules_16_}, BoneCapsules_17{BoneCapsules_17_}, BoneCapsules_18{BoneCapsules_18_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public OVRPlugin/SkeletonType Type
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::SkeletonType& dyn_Type();
      // Get instance field reference: public System.UInt32 NumBones
      [[deprecated("Use field access instead!")]] uint& dyn_NumBones();
      // Get instance field reference: public System.UInt32 NumBoneCapsules
      [[deprecated("Use field access instead!")]] uint& dyn_NumBoneCapsules();
      // Get instance field reference: public OVRPlugin/Bone Bones_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_0();
      // Get instance field reference: public OVRPlugin/Bone Bones_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_1();
      // Get instance field reference: public OVRPlugin/Bone Bones_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_2();
      // Get instance field reference: public OVRPlugin/Bone Bones_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_3();
      // Get instance field reference: public OVRPlugin/Bone Bones_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_4();
      // Get instance field reference: public OVRPlugin/Bone Bones_5
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_5();
      // Get instance field reference: public OVRPlugin/Bone Bones_6
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_6();
      // Get instance field reference: public OVRPlugin/Bone Bones_7
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_7();
      // Get instance field reference: public OVRPlugin/Bone Bones_8
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_8();
      // Get instance field reference: public OVRPlugin/Bone Bones_9
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_9();
      // Get instance field reference: public OVRPlugin/Bone Bones_10
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_10();
      // Get instance field reference: public OVRPlugin/Bone Bones_11
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_11();
      // Get instance field reference: public OVRPlugin/Bone Bones_12
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_12();
      // Get instance field reference: public OVRPlugin/Bone Bones_13
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_13();
      // Get instance field reference: public OVRPlugin/Bone Bones_14
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_14();
      // Get instance field reference: public OVRPlugin/Bone Bones_15
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_15();
      // Get instance field reference: public OVRPlugin/Bone Bones_16
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_16();
      // Get instance field reference: public OVRPlugin/Bone Bones_17
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_17();
      // Get instance field reference: public OVRPlugin/Bone Bones_18
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_18();
      // Get instance field reference: public OVRPlugin/Bone Bones_19
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_19();
      // Get instance field reference: public OVRPlugin/Bone Bones_20
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_20();
      // Get instance field reference: public OVRPlugin/Bone Bones_21
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_21();
      // Get instance field reference: public OVRPlugin/Bone Bones_22
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_22();
      // Get instance field reference: public OVRPlugin/Bone Bones_23
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_23();
      // Get instance field reference: public OVRPlugin/Bone Bones_24
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_24();
      // Get instance field reference: public OVRPlugin/Bone Bones_25
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_25();
      // Get instance field reference: public OVRPlugin/Bone Bones_26
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_26();
      // Get instance field reference: public OVRPlugin/Bone Bones_27
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_27();
      // Get instance field reference: public OVRPlugin/Bone Bones_28
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_28();
      // Get instance field reference: public OVRPlugin/Bone Bones_29
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_29();
      // Get instance field reference: public OVRPlugin/Bone Bones_30
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_30();
      // Get instance field reference: public OVRPlugin/Bone Bones_31
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_31();
      // Get instance field reference: public OVRPlugin/Bone Bones_32
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_32();
      // Get instance field reference: public OVRPlugin/Bone Bones_33
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_33();
      // Get instance field reference: public OVRPlugin/Bone Bones_34
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_34();
      // Get instance field reference: public OVRPlugin/Bone Bones_35
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_35();
      // Get instance field reference: public OVRPlugin/Bone Bones_36
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_36();
      // Get instance field reference: public OVRPlugin/Bone Bones_37
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_37();
      // Get instance field reference: public OVRPlugin/Bone Bones_38
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_38();
      // Get instance field reference: public OVRPlugin/Bone Bones_39
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_39();
      // Get instance field reference: public OVRPlugin/Bone Bones_40
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_40();
      // Get instance field reference: public OVRPlugin/Bone Bones_41
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_41();
      // Get instance field reference: public OVRPlugin/Bone Bones_42
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_42();
      // Get instance field reference: public OVRPlugin/Bone Bones_43
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_43();
      // Get instance field reference: public OVRPlugin/Bone Bones_44
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_44();
      // Get instance field reference: public OVRPlugin/Bone Bones_45
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_45();
      // Get instance field reference: public OVRPlugin/Bone Bones_46
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_46();
      // Get instance field reference: public OVRPlugin/Bone Bones_47
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_47();
      // Get instance field reference: public OVRPlugin/Bone Bones_48
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_48();
      // Get instance field reference: public OVRPlugin/Bone Bones_49
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::Bone& dyn_Bones_49();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_0();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_1();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_2();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_3();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_4
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_4();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_5
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_5();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_6
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_6();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_7
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_7();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_8
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_8();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_9
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_9();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_10
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_10();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_11
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_11();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_12
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_12();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_13
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_13();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_14
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_14();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_15
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_15();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_16
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_16();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_17
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_17();
      // Get instance field reference: public OVRPlugin/BoneCapsule BoneCapsules_18
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRPlugin::BoneCapsule& dyn_BoneCapsules_18();
    }; // OVRPlugin/Skeleton2Internal
    #pragma pack(pop)
    static check_size<sizeof(OVRPlugin::Skeleton2Internal), 2388 + sizeof(::GlobalNamespace::OVRPlugin::BoneCapsule)> __GlobalNamespace_OVRPlugin_Skeleton2InternalSizeCheck;
    static_assert(sizeof(OVRPlugin::Skeleton2Internal) == 0x974);
    // static field const value: static public System.Boolean isSupportedPlatform
    static constexpr const bool isSupportedPlatform = true;
    // Get static field: static public System.Boolean isSupportedPlatform
    static bool _get_isSupportedPlatform();
    // Set static field: static public System.Boolean isSupportedPlatform
    static void _set_isSupportedPlatform(bool value);
    // Get static field: static public readonly System.Version wrapperVersion
    static ::System::Version* _get_wrapperVersion();
    // Set static field: static public readonly System.Version wrapperVersion
    static void _set_wrapperVersion(::System::Version* value);
    // Get static field: static private System.Version _version
    static ::System::Version* _get__version();
    // Set static field: static private System.Version _version
    static void _set__version(::System::Version* value);
    // Get static field: static private System.Version _nativeSDKVersion
    static ::System::Version* _get__nativeSDKVersion();
    // Set static field: static private System.Version _nativeSDKVersion
    static void _set__nativeSDKVersion(::System::Version* value);
    // static field const value: static private System.Int32 OverlayShapeFlagShift
    static constexpr const int OverlayShapeFlagShift = 4;
    // Get static field: static private System.Int32 OverlayShapeFlagShift
    static int _get_OverlayShapeFlagShift();
    // Set static field: static private System.Int32 OverlayShapeFlagShift
    static void _set_OverlayShapeFlagShift(int value);
    // static field const value: static public System.Int32 AppPerfFrameStatsMaxCount
    static constexpr const int AppPerfFrameStatsMaxCount = 5;
    // Get static field: static public System.Int32 AppPerfFrameStatsMaxCount
    static int _get_AppPerfFrameStatsMaxCount();
    // Set static field: static public System.Int32 AppPerfFrameStatsMaxCount
    static void _set_AppPerfFrameStatsMaxCount(int value);
    // static field const value: static private System.Int32 EventDataBufferSize
    static constexpr const int EventDataBufferSize = 4000;
    // Get static field: static private System.Int32 EventDataBufferSize
    static int _get_EventDataBufferSize();
    // Set static field: static private System.Int32 EventDataBufferSize
    static void _set_EventDataBufferSize(int value);
    // Get static field: static private System.Nullable`1<OVRPlugin/XrApi> _nativeXrApi
    static ::System::Nullable_1<::GlobalNamespace::OVRPlugin::XrApi> _get__nativeXrApi();
    // Set static field: static private System.Nullable`1<OVRPlugin/XrApi> _nativeXrApi
    static void _set__nativeXrApi(::System::Nullable_1<::GlobalNamespace::OVRPlugin::XrApi> value);
    // Get static field: static private OVRPlugin/GUID _nativeAudioOutGuid
    static ::GlobalNamespace::OVRPlugin::GUID* _get__nativeAudioOutGuid();
    // Set static field: static private OVRPlugin/GUID _nativeAudioOutGuid
    static void _set__nativeAudioOutGuid(::GlobalNamespace::OVRPlugin::GUID* value);
    // Get static field: static private System.Guid _cachedAudioOutGuid
    static ::System::Guid _get__cachedAudioOutGuid();
    // Set static field: static private System.Guid _cachedAudioOutGuid
    static void _set__cachedAudioOutGuid(::System::Guid value);
    // Get static field: static private System.String _cachedAudioOutString
    static ::StringW _get__cachedAudioOutString();
    // Set static field: static private System.String _cachedAudioOutString
    static void _set__cachedAudioOutString(::StringW value);
    // Get static field: static private OVRPlugin/GUID _nativeAudioInGuid
    static ::GlobalNamespace::OVRPlugin::GUID* _get__nativeAudioInGuid();
    // Set static field: static private OVRPlugin/GUID _nativeAudioInGuid
    static void _set__nativeAudioInGuid(::GlobalNamespace::OVRPlugin::GUID* value);
    // Get static field: static private System.Guid _cachedAudioInGuid
    static ::System::Guid _get__cachedAudioInGuid();
    // Set static field: static private System.Guid _cachedAudioInGuid
    static void _set__cachedAudioInGuid(::System::Guid value);
    // Get static field: static private System.String _cachedAudioInString
    static ::StringW _get__cachedAudioInString();
    // Set static field: static private System.String _cachedAudioInString
    static void _set__cachedAudioInString(::StringW value);
    // Get static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
    static ::GlobalNamespace::OVRNativeBuffer* _get__nativeSystemDisplayFrequenciesAvailable();
    // Set static field: static private OVRNativeBuffer _nativeSystemDisplayFrequenciesAvailable
    static void _set__nativeSystemDisplayFrequenciesAvailable(::GlobalNamespace::OVRNativeBuffer* value);
    // Get static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
    static ::ArrayW<float> _get__cachedSystemDisplayFrequenciesAvailable();
    // Set static field: static private System.Single[] _cachedSystemDisplayFrequenciesAvailable
    static void _set__cachedSystemDisplayFrequenciesAvailable(::ArrayW<float> value);
    // Get static field: static private OVRPlugin/HandStateInternal cachedHandState
    static ::GlobalNamespace::OVRPlugin::HandStateInternal _get_cachedHandState();
    // Set static field: static private OVRPlugin/HandStateInternal cachedHandState
    static void _set_cachedHandState(::GlobalNamespace::OVRPlugin::HandStateInternal value);
    // Get static field: static private OVRPlugin/Skeleton cachedSkeleton
    static ::GlobalNamespace::OVRPlugin::Skeleton _get_cachedSkeleton();
    // Set static field: static private OVRPlugin/Skeleton cachedSkeleton
    static void _set_cachedSkeleton(::GlobalNamespace::OVRPlugin::Skeleton value);
    // Get static field: static private OVRPlugin/Skeleton2Internal cachedSkeleton2
    static ::GlobalNamespace::OVRPlugin::Skeleton2Internal _get_cachedSkeleton2();
    // Set static field: static private OVRPlugin/Skeleton2Internal cachedSkeleton2
    static void _set_cachedSkeleton2(::GlobalNamespace::OVRPlugin::Skeleton2Internal value);
    // static field const value: static private System.String pluginName
    static constexpr const char* pluginName = "OVRPlugin";
    // Get static field: static private System.String pluginName
    static ::StringW _get_pluginName();
    // Set static field: static private System.String pluginName
    static void _set_pluginName(::StringW value);
    // Get static field: static private System.Version _versionZero
    static ::System::Version* _get__versionZero();
    // Set static field: static private System.Version _versionZero
    static void _set__versionZero(::System::Version* value);
    // static public System.Version get_version()
    // Offset: 0x1728824
    static ::System::Version* get_version();
    // static public System.Version get_nativeSDKVersion()
    // Offset: 0x1728DD8
    static ::System::Version* get_nativeSDKVersion();
    // static public System.Boolean get_initialized()
    // Offset: 0x1715C98
    static bool get_initialized();
    // static public OVRPlugin/XrApi get_nativeXrApi()
    // Offset: 0x17225F4
    static ::GlobalNamespace::OVRPlugin::XrApi get_nativeXrApi();
    // static public System.Boolean get_chromatic()
    // Offset: 0x1729124
    static bool get_chromatic();
    // static public System.Void set_chromatic(System.Boolean value)
    // Offset: 0x1729244
    static void set_chromatic(bool value);
    // static public System.Boolean get_monoscopic()
    // Offset: 0x1729398
    static bool get_monoscopic();
    // static public System.Void set_monoscopic(System.Boolean value)
    // Offset: 0x1729434
    static void set_monoscopic(bool value);
    // static public System.Boolean get_rotation()
    // Offset: 0x17294EC
    static bool get_rotation();
    // static public System.Void set_rotation(System.Boolean value)
    // Offset: 0x1729588
    static void set_rotation(bool value);
    // static public System.Boolean get_position()
    // Offset: 0x1729640
    static bool get_position();
    // static public System.Void set_position(System.Boolean value)
    // Offset: 0x17296DC
    static void set_position(bool value);
    // static public System.Boolean get_useIPDInPositionTracking()
    // Offset: 0x1729794
    static bool get_useIPDInPositionTracking();
    // static public System.Void set_useIPDInPositionTracking(System.Boolean value)
    // Offset: 0x17298B4
    static void set_useIPDInPositionTracking(bool value);
    // static public System.Boolean get_positionSupported()
    // Offset: 0x1729A00
    static bool get_positionSupported();
    // static public System.Boolean get_positionTracked()
    // Offset: 0x1729A9C
    static bool get_positionTracked();
    // static public System.Boolean get_powerSaving()
    // Offset: 0x1719970
    static bool get_powerSaving();
    // static public System.Boolean get_hmdPresent()
    // Offset: 0x171C418
    static bool get_hmdPresent();
    // static public System.Boolean get_userPresent()
    // Offset: 0x1729B3C
    static bool get_userPresent();
    // static public System.Boolean get_headphonesPresent()
    // Offset: 0x1729BD8
    static bool get_headphonesPresent();
    // static public System.Int32 get_recommendedMSAALevel()
    // Offset: 0x1729C74
    static int get_recommendedMSAALevel();
    // static public OVRPlugin/SystemRegion get_systemRegion()
    // Offset: 0x1729D94
    static ::GlobalNamespace::OVRPlugin::SystemRegion get_systemRegion();
    // static public System.String get_audioOutId()
    // Offset: 0x1729EB4
    static ::StringW get_audioOutId();
    // static public System.String get_audioInId()
    // Offset: 0x172A1E8
    static ::StringW get_audioInId();
    // static public System.Boolean get_hasVrFocus()
    // Offset: 0x172A51C
    static bool get_hasVrFocus();
    // static public System.Boolean get_hasInputFocus()
    // Offset: 0x172A588
    static bool get_hasInputFocus();
    // static public System.Boolean get_shouldQuit()
    // Offset: 0x172A6A4
    static bool get_shouldQuit();
    // static public System.Boolean get_shouldRecenter()
    // Offset: 0x172A710
    static bool get_shouldRecenter();
    // static public System.String get_productName()
    // Offset: 0x172A77C
    static ::StringW get_productName();
    // static public System.String get_latency()
    // Offset: 0x172A7DC
    static ::StringW get_latency();
    // static public System.Single get_eyeDepth()
    // Offset: 0x172A884
    static float get_eyeDepth();
    // static public System.Void set_eyeDepth(System.Single value)
    // Offset: 0x172A91C
    static void set_eyeDepth(float value);
    // static public System.Single get_eyeHeight()
    // Offset: 0x172A98C
    static float get_eyeHeight();
    // static public System.Void set_eyeHeight(System.Single value)
    // Offset: 0x172A9EC
    static void set_eyeHeight(float value);
    // static public System.Single get_batteryLevel()
    // Offset: 0x172AA5C
    static float get_batteryLevel();
    // static public System.Single get_batteryTemperature()
    // Offset: 0x172AABC
    static float get_batteryTemperature();
    // static public System.Int32 get_cpuLevel()
    // Offset: 0x172AB1C
    static int get_cpuLevel();
    // static public System.Void set_cpuLevel(System.Int32 value)
    // Offset: 0x1719800
    static void set_cpuLevel(int value);
    // static public System.Int32 get_gpuLevel()
    // Offset: 0x172AB7C
    static int get_gpuLevel();
    // static public System.Void set_gpuLevel(System.Int32 value)
    // Offset: 0x1719868
    static void set_gpuLevel(int value);
    // static public System.Int32 get_vsyncCount()
    // Offset: 0x172ABDC
    static int get_vsyncCount();
    // static public System.Void set_vsyncCount(System.Int32 value)
    // Offset: 0x172AC3C
    static void set_vsyncCount(int value);
    // static public System.Single get_systemVolume()
    // Offset: 0x172ACA4
    static float get_systemVolume();
    // static public System.Single get_ipd()
    // Offset: 0x172AD04
    static float get_ipd();
    // static public System.Void set_ipd(System.Single value)
    // Offset: 0x172AD64
    static void set_ipd(float value);
    // static public System.Boolean get_occlusionMesh()
    // Offset: 0x172ADD4
    static bool get_occlusionMesh();
    // static public System.Void set_occlusionMesh(System.Boolean value)
    // Offset: 0x172AE70
    static void set_occlusionMesh(bool value);
    // static public OVRPlugin/BatteryStatus get_batteryStatus()
    // Offset: 0x172AF28
    static ::GlobalNamespace::OVRPlugin::BatteryStatus get_batteryStatus();
    // static public System.Boolean get_fixedFoveatedRenderingSupported()
    // Offset: 0x172DBAC
    static bool get_fixedFoveatedRenderingSupported();
    // static public OVRPlugin/FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel()
    // Offset: 0x172DCBC
    static ::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel();
    // static public System.Void set_fixedFoveatedRenderingLevel(OVRPlugin/FixedFoveatedRenderingLevel value)
    // Offset: 0x172DDE8
    static void set_fixedFoveatedRenderingLevel(::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel value);
    // static public System.Boolean get_useDynamicFixedFoveatedRendering()
    // Offset: 0x172DF18
    static bool get_useDynamicFixedFoveatedRendering();
    // static public System.Void set_useDynamicFixedFoveatedRendering(System.Boolean value)
    // Offset: 0x172E050
    static void set_useDynamicFixedFoveatedRendering(bool value);
    // static public System.Boolean get_tiledMultiResSupported()
    // Offset: 0x172E184
    static bool get_tiledMultiResSupported();
    // static public OVRPlugin/TiledMultiResLevel get_tiledMultiResLevel()
    // Offset: 0x172E1E0
    static ::GlobalNamespace::OVRPlugin::TiledMultiResLevel get_tiledMultiResLevel();
    // static public System.Void set_tiledMultiResLevel(OVRPlugin/TiledMultiResLevel value)
    // Offset: 0x172E23C
    static void set_tiledMultiResLevel(::GlobalNamespace::OVRPlugin::TiledMultiResLevel value);
    // static public System.Boolean get_gpuUtilSupported()
    // Offset: 0x172E2A0
    static bool get_gpuUtilSupported();
    // static public System.Single get_gpuUtilLevel()
    // Offset: 0x172E3B0
    static float get_gpuUtilLevel();
    // static public System.Single[] get_systemDisplayFrequenciesAvailable()
    // Offset: 0x172E4E8
    static ::ArrayW<float> get_systemDisplayFrequenciesAvailable();
    // static public System.Single get_systemDisplayFrequency()
    // Offset: 0x172E808
    static float get_systemDisplayFrequency();
    // static public System.Void set_systemDisplayFrequency(System.Single value)
    // Offset: 0x172E9BC
    static void set_systemDisplayFrequency(float value);
    // static public System.Boolean get_eyeFovPremultipliedAlphaModeEnabled()
    // Offset: 0x172EACC
    static bool get_eyeFovPremultipliedAlphaModeEnabled();
    // static public System.Void set_eyeFovPremultipliedAlphaModeEnabled(System.Boolean value)
    // Offset: 0x172EBDC
    static void set_eyeFovPremultipliedAlphaModeEnabled(bool value);
    // static public System.Boolean get_AsymmetricFovEnabled()
    // Offset: 0x172EE28
    static bool get_AsymmetricFovEnabled();
    // static public System.Boolean get_EyeTextureArrayEnabled()
    // Offset: 0x172EF3C
    static bool get_EyeTextureArrayEnabled();
    // static private System.Void .cctor()
    // Offset: 0x17331C0
    static void _cctor();
    // static public OVRPlugin/Frustumf GetEyeFrustum(OVRPlugin/Eye eyeId)
    // Offset: 0x172AF88
    static ::GlobalNamespace::OVRPlugin::Frustumf GetEyeFrustum(::GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public OVRPlugin/Sizei GetEyeTextureSize(OVRPlugin/Eye eyeId)
    // Offset: 0x172AFF0
    static ::GlobalNamespace::OVRPlugin::Sizei GetEyeTextureSize(::GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public OVRPlugin/Posef GetTrackerPose(OVRPlugin/Tracker trackerId)
    // Offset: 0x172B058
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackerPose(::GlobalNamespace::OVRPlugin::Tracker trackerId);
    // static public OVRPlugin/Frustumf GetTrackerFrustum(OVRPlugin/Tracker trackerId)
    // Offset: 0x172B0D0
    static ::GlobalNamespace::OVRPlugin::Frustumf GetTrackerFrustum(::GlobalNamespace::OVRPlugin::Tracker trackerId);
    // static public System.Boolean ShowUI(OVRPlugin/PlatformUI ui)
    // Offset: 0x172B138
    static bool ShowUI(::GlobalNamespace::OVRPlugin::PlatformUI ui);
    // static public System.Boolean EnqueueSubmitLayer(System.Boolean onTop, System.Boolean headLocked, System.Boolean noDepthBufferTesting, System.IntPtr leftTexture, System.IntPtr rightTexture, System.Int32 layerId, System.Int32 frameIndex, OVRPlugin/Posef pose, OVRPlugin/Vector3f scale, System.Int32 layerIndex, OVRPlugin/OverlayShape shape, System.Boolean overrideTextureRectMatrix, OVRPlugin/TextureRectMatrixf textureRectMatrix, System.Boolean overridePerLayerColorScaleAndOffset, UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean expensiveSuperSample, System.Boolean hidden)
    // Offset: 0x171F2A0
    static bool EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, ::System::IntPtr leftTexture, ::System::IntPtr rightTexture, int layerId, int frameIndex, ::GlobalNamespace::OVRPlugin::Posef pose, ::GlobalNamespace::OVRPlugin::Vector3f scale, int layerIndex, ::GlobalNamespace::OVRPlugin::OverlayShape shape, bool overrideTextureRectMatrix, ::GlobalNamespace::OVRPlugin::TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset, ::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, bool expensiveSuperSample, bool hidden);
    // static public OVRPlugin/LayerDesc CalculateLayerDesc(OVRPlugin/OverlayShape shape, OVRPlugin/LayerLayout layout, OVRPlugin/Sizei textureSize, System.Int32 mipLevels, System.Int32 sampleCount, OVRPlugin/EyeTextureFormat format, System.Int32 layerFlags)
    // Offset: 0x171E080
    static ::GlobalNamespace::OVRPlugin::LayerDesc CalculateLayerDesc(::GlobalNamespace::OVRPlugin::OverlayShape shape, ::GlobalNamespace::OVRPlugin::LayerLayout layout, ::GlobalNamespace::OVRPlugin::Sizei textureSize, int mipLevels, int sampleCount, ::GlobalNamespace::OVRPlugin::EyeTextureFormat format, int layerFlags);
    // static public System.Boolean EnqueueSetupLayer(OVRPlugin/LayerDesc desc, System.Int32 compositionDepth, System.IntPtr layerID)
    // Offset: 0x171E210
    static bool EnqueueSetupLayer(::GlobalNamespace::OVRPlugin::LayerDesc desc, int compositionDepth, ::System::IntPtr layerID);
    // static public System.Boolean EnqueueDestroyLayer(System.IntPtr layerID)
    // Offset: 0x171F9F4
    static bool EnqueueDestroyLayer(::System::IntPtr layerID);
    // static public System.IntPtr GetLayerTexture(System.Int32 layerId, System.Int32 stage, OVRPlugin/Eye eyeId)
    // Offset: 0x171EDA0
    static ::System::IntPtr GetLayerTexture(int layerId, int stage, ::GlobalNamespace::OVRPlugin::Eye eyeId);
    // static public System.Int32 GetLayerTextureStageCount(System.Int32 layerId)
    // Offset: 0x171E438
    static int GetLayerTextureStageCount(int layerId);
    // static public System.IntPtr GetLayerAndroidSurfaceObject(System.Int32 layerId)
    // Offset: 0x171EA58
    static ::System::IntPtr GetLayerAndroidSurfaceObject(int layerId);
    // static public System.Boolean UpdateNodePhysicsPoses(System.Int32 frameIndex, System.Double predictionSeconds)
    // Offset: 0x172B1AC
    static bool UpdateNodePhysicsPoses(int frameIndex, double predictionSeconds);
    // static public OVRPlugin/Posef GetNodePose(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x171D208
    static ::GlobalNamespace::OVRPlugin::Posef GetNodePose(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeVelocity(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x171CE10
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeVelocity(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAngularVelocity(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x171D080
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeAngularVelocity(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAcceleration(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x171C8A4
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeAcceleration(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Vector3f GetNodeAngularAcceleration(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x171CC88
    static ::GlobalNamespace::OVRPlugin::Vector3f GetNodeAngularAcceleration(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public System.Boolean GetNodePresent(OVRPlugin/Node nodeId)
    // Offset: 0x172B2C8
    static bool GetNodePresent(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodeOrientationTracked(OVRPlugin/Node nodeId)
    // Offset: 0x172B33C
    static bool GetNodeOrientationTracked(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodeOrientationValid(OVRPlugin/Node nodeId)
    // Offset: 0x172B3B0
    static bool GetNodeOrientationValid(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodePositionTracked(OVRPlugin/Node nodeId)
    // Offset: 0x172B4FC
    static bool GetNodePositionTracked(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public System.Boolean GetNodePositionValid(OVRPlugin/Node nodeId)
    // Offset: 0x172B570
    static bool GetNodePositionValid(::GlobalNamespace::OVRPlugin::Node nodeId);
    // static public OVRPlugin/PoseStatef GetNodePoseStateRaw(OVRPlugin/Node nodeId, OVRPlugin/Step stepId)
    // Offset: 0x172B6BC
    static ::GlobalNamespace::OVRPlugin::PoseStatef GetNodePoseStateRaw(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::Step stepId);
    // static public OVRPlugin/Posef GetCurrentTrackingTransformPose()
    // Offset: 0x172B93C
    static ::GlobalNamespace::OVRPlugin::Posef GetCurrentTrackingTransformPose();
    // static public OVRPlugin/Posef GetTrackingTransformRawPose()
    // Offset: 0x172BA90
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackingTransformRawPose();
    // static public OVRPlugin/Posef GetTrackingTransformRelativePose(OVRPlugin/TrackingOrigin trackingOrigin)
    // Offset: 0x1718794
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackingTransformRelativePose(::GlobalNamespace::OVRPlugin::TrackingOrigin trackingOrigin);
    // static public OVRPlugin/ControllerState GetControllerState(System.UInt32 controllerMask)
    // Offset: 0x172BBE4
    static ::GlobalNamespace::OVRPlugin::ControllerState GetControllerState(uint controllerMask);
    // static public OVRPlugin/ControllerState2 GetControllerState2(System.UInt32 controllerMask)
    // Offset: 0x172BC5C
    static ::GlobalNamespace::OVRPlugin::ControllerState2 GetControllerState2(uint controllerMask);
    // static public OVRPlugin/ControllerState4 GetControllerState4(System.UInt32 controllerMask)
    // Offset: 0x172BDDC
    static ::GlobalNamespace::OVRPlugin::ControllerState4 GetControllerState4(uint controllerMask);
    // static public System.Boolean SetControllerVibration(System.UInt32 controllerMask, System.Single frequency, System.Single amplitude)
    // Offset: 0x172BF7C
    static bool SetControllerVibration(uint controllerMask, float frequency, float amplitude);
    // static public OVRPlugin/HapticsDesc GetControllerHapticsDesc(System.UInt32 controllerMask)
    // Offset: 0x172C008
    static ::GlobalNamespace::OVRPlugin::HapticsDesc GetControllerHapticsDesc(uint controllerMask);
    // static public OVRPlugin/HapticsState GetControllerHapticsState(System.UInt32 controllerMask)
    // Offset: 0x172C128
    static ::GlobalNamespace::OVRPlugin::HapticsState GetControllerHapticsState(uint controllerMask);
    // static public System.Boolean SetControllerHaptics(System.UInt32 controllerMask, OVRPlugin/HapticsBuffer hapticsBuffer)
    // Offset: 0x172C230
    static bool SetControllerHaptics(uint controllerMask, ::GlobalNamespace::OVRPlugin::HapticsBuffer hapticsBuffer);
    // static public System.Single GetEyeRecommendedResolutionScale()
    // Offset: 0x172C350
    static float GetEyeRecommendedResolutionScale();
    // static public System.Single GetAppCpuStartToGpuEndTime()
    // Offset: 0x172C450
    static float GetAppCpuStartToGpuEndTime();
    // static public System.Boolean GetBoundaryConfigured()
    // Offset: 0x172C550
    static bool GetBoundaryConfigured();
    // static public OVRPlugin/BoundaryTestResult TestBoundaryNode(OVRPlugin/Node nodeId, OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x172C650
    static ::GlobalNamespace::OVRPlugin::BoundaryTestResult TestBoundaryNode(::GlobalNamespace::OVRPlugin::Node nodeId, ::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public OVRPlugin/BoundaryTestResult TestBoundaryPoint(OVRPlugin/Vector3f point, OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x172C778
    static ::GlobalNamespace::OVRPlugin::BoundaryTestResult TestBoundaryPoint(::GlobalNamespace::OVRPlugin::Vector3f point, ::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public OVRPlugin/BoundaryGeometry GetBoundaryGeometry(OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x172C8C8
    static ::GlobalNamespace::OVRPlugin::BoundaryGeometry GetBoundaryGeometry(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public System.Boolean GetBoundaryGeometry2(OVRPlugin/BoundaryType boundaryType, System.IntPtr points, ref System.Int32 pointsCount)
    // Offset: 0x172C9E8
    static bool GetBoundaryGeometry2(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType, ::System::IntPtr points, ByRef<int> pointsCount);
    // static public OVRPlugin/AppPerfStats GetAppPerfStats()
    // Offset: 0x172CB0C
    static ::GlobalNamespace::OVRPlugin::AppPerfStats GetAppPerfStats();
    // static public System.Boolean ResetAppPerfStats()
    // Offset: 0x172CC18
    static bool ResetAppPerfStats();
    // static public System.Single GetAppFramerate()
    // Offset: 0x172CD18
    static float GetAppFramerate();
    // static public System.Boolean SetHandNodePoseStateLatency(System.Double latencyInSeconds)
    // Offset: 0x172CE18
    static bool SetHandNodePoseStateLatency(double latencyInSeconds);
    // static public System.Double GetHandNodePoseStateLatency()
    // Offset: 0x172CF28
    static double GetHandNodePoseStateLatency();
    // static public OVRPlugin/EyeTextureFormat GetDesiredEyeTextureFormat()
    // Offset: 0x172D038
    static ::GlobalNamespace::OVRPlugin::EyeTextureFormat GetDesiredEyeTextureFormat();
    // static public System.Boolean SetDesiredEyeTextureFormat(OVRPlugin/EyeTextureFormat value)
    // Offset: 0x172D138
    static bool SetDesiredEyeTextureFormat(::GlobalNamespace::OVRPlugin::EyeTextureFormat value);
    // static public System.Boolean InitializeMixedReality()
    // Offset: 0x1715E04
    static bool InitializeMixedReality();
    // static public System.Boolean ShutdownMixedReality()
    // Offset: 0x1716100
    static bool ShutdownMixedReality();
    // static public System.Boolean IsMixedRealityInitialized()
    // Offset: 0x1715D04
    static bool IsMixedRealityInitialized();
    // static public System.Int32 GetExternalCameraCount()
    // Offset: 0x17180EC
    static int GetExternalCameraCount();
    // static public System.Boolean UpdateExternalCamera()
    // Offset: 0x1715F04
    static bool UpdateExternalCamera();
    // static public System.Boolean GetMixedRealityCameraInfo(System.Int32 cameraId, out OVRPlugin/CameraExtrinsics cameraExtrinsics, out OVRPlugin/CameraIntrinsics cameraIntrinsics)
    // Offset: 0x1718624
    static bool GetMixedRealityCameraInfo(int cameraId, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics);
    // static public System.Boolean OverrideExternalCameraFov(System.Int32 cameraId, System.Boolean useOverriddenFov, OVRPlugin/Fovf fov)
    // Offset: 0x17191FC
    static bool OverrideExternalCameraFov(int cameraId, bool useOverriddenFov, ::GlobalNamespace::OVRPlugin::Fovf fov);
    // static public System.Boolean GetUseOverriddenExternalCameraFov(System.Int32 cameraId)
    // Offset: 0x1719450
    static bool GetUseOverriddenExternalCameraFov(int cameraId);
    // static public System.Boolean OverrideExternalCameraStaticPose(System.Int32 cameraId, System.Boolean useOverriddenPose, OVRPlugin/Posef poseInStageOrigin)
    // Offset: 0x171932C
    static bool OverrideExternalCameraStaticPose(int cameraId, bool useOverriddenPose, ::GlobalNamespace::OVRPlugin::Posef poseInStageOrigin);
    // static public System.Boolean GetUseOverriddenExternalCameraStaticPose(System.Int32 cameraId)
    // Offset: 0x171957C
    static bool GetUseOverriddenExternalCameraStaticPose(int cameraId);
    // static public System.Boolean ResetDefaultExternalCamera()
    // Offset: 0x1717FEC
    static bool ResetDefaultExternalCamera();
    // static public System.Boolean SetDefaultExternalCamera(System.String cameraName, ref OVRPlugin/CameraIntrinsics cameraIntrinsics, ref OVRPlugin/CameraExtrinsics cameraExtrinsics)
    // Offset: 0x1718954
    static bool SetDefaultExternalCamera(::StringW cameraName, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics);
    // static public System.Boolean SetExternalCameraProperties(System.String cameraName, ref OVRPlugin/CameraIntrinsics cameraIntrinsics, ref OVRPlugin/CameraExtrinsics cameraExtrinsics)
    // Offset: 0x172D240
    static bool SetExternalCameraProperties(::StringW cameraName, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics> cameraIntrinsics, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics> cameraExtrinsics);
    // static public OVRPlugin/Vector3f GetBoundaryDimensions(OVRPlugin/BoundaryType boundaryType)
    // Offset: 0x172D360
    static ::GlobalNamespace::OVRPlugin::Vector3f GetBoundaryDimensions(::GlobalNamespace::OVRPlugin::BoundaryType boundaryType);
    // static public System.Boolean GetBoundaryVisible()
    // Offset: 0x172D464
    static bool GetBoundaryVisible();
    // static public System.Boolean SetBoundaryVisible(System.Boolean value)
    // Offset: 0x172D564
    static bool SetBoundaryVisible(bool value);
    // static public OVRPlugin/SystemHeadset GetSystemHeadsetType()
    // Offset: 0x172D690
    static ::GlobalNamespace::OVRPlugin::SystemHeadset GetSystemHeadsetType();
    // static public OVRPlugin/Controller GetActiveController()
    // Offset: 0x172D790
    static ::GlobalNamespace::OVRPlugin::Controller GetActiveController();
    // static public OVRPlugin/Controller GetConnectedControllers()
    // Offset: 0x172D890
    static ::GlobalNamespace::OVRPlugin::Controller GetConnectedControllers();
    // static private OVRPlugin/Bool ToBool(System.Boolean b)
    // Offset: 0x1729390
    static ::GlobalNamespace::OVRPlugin::Bool ToBool(bool b);
    // static public OVRPlugin/TrackingOrigin GetTrackingOriginType()
    // Offset: 0x172D990
    static ::GlobalNamespace::OVRPlugin::TrackingOrigin GetTrackingOriginType();
    // static public System.Boolean SetTrackingOriginType(OVRPlugin/TrackingOrigin originType)
    // Offset: 0x172D9F0
    static bool SetTrackingOriginType(::GlobalNamespace::OVRPlugin::TrackingOrigin originType);
    // static public OVRPlugin/Posef GetTrackingCalibratedOrigin()
    // Offset: 0x172DA64
    static ::GlobalNamespace::OVRPlugin::Posef GetTrackingCalibratedOrigin();
    // static public System.Boolean SetTrackingCalibratedOrigin()
    // Offset: 0x172DACC
    static bool SetTrackingCalibratedOrigin();
    // static public System.Boolean RecenterTrackingOrigin(OVRPlugin/RecenterFlags flags)
    // Offset: 0x172DB38
    static bool RecenterTrackingOrigin(::GlobalNamespace::OVRPlugin::RecenterFlags flags);
    // static public System.Boolean GetNodeFrustum2(OVRPlugin/Node nodeId, out OVRPlugin/Frustumf2 frustum)
    // Offset: 0x172ED08
    static bool GetNodeFrustum2(::GlobalNamespace::OVRPlugin::Node nodeId, ByRef<::GlobalNamespace::OVRPlugin::Frustumf2> frustum);
    // static public OVRPlugin/Handedness GetDominantHand()
    // Offset: 0x172F03C
    static ::GlobalNamespace::OVRPlugin::Handedness GetDominantHand();
    // static public System.Boolean SendEvent(System.String name, System.String param, System.String source)
    // Offset: 0x172F148
    static bool SendEvent(::StringW name, ::StringW param, ::StringW source);
    // static public System.Boolean SetHeadPoseModifier(ref OVRPlugin/Quatf relativeRotation, ref OVRPlugin/Vector3f relativeTranslation)
    // Offset: 0x172F338
    static bool SetHeadPoseModifier(ByRef<::GlobalNamespace::OVRPlugin::Quatf> relativeRotation, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> relativeTranslation);
    // static public System.Boolean GetHeadPoseModifier(out OVRPlugin/Quatf relativeRotation, out OVRPlugin/Vector3f relativeTranslation)
    // Offset: 0x172F450
    static bool GetHeadPoseModifier(ByRef<::GlobalNamespace::OVRPlugin::Quatf> relativeRotation, ByRef<::GlobalNamespace::OVRPlugin::Vector3f> relativeTranslation);
    // static public System.Boolean IsPerfMetricsSupported(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0x172F5D4
    static bool IsPerfMetricsSupported(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Nullable`1<System.Single> GetPerfMetricsFloat(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0x172F6F4
    static ::System::Nullable_1<float> GetPerfMetricsFloat(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Nullable`1<System.Int32> GetPerfMetricsInt(OVRPlugin/PerfMetrics perfMetrics)
    // Offset: 0x172F82C
    static ::System::Nullable_1<int> GetPerfMetricsInt(::GlobalNamespace::OVRPlugin::PerfMetrics perfMetrics);
    // static public System.Double GetTimeInSeconds()
    // Offset: 0x172F964
    static double GetTimeInSeconds();
    // static public System.Boolean SetColorScaleAndOffset(UnityEngine.Vector4 colorScale, UnityEngine.Vector4 colorOffset, System.Boolean applyToAllLayers)
    // Offset: 0x172FA70
    static bool SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset, bool applyToAllLayers);
    // static public System.Boolean AddCustomMetadata(System.String name, System.String param)
    // Offset: 0x172FBDC
    static bool AddCustomMetadata(::StringW name, ::StringW param);
    // static public System.Boolean SetDeveloperMode(OVRPlugin/Bool active)
    // Offset: 0x172FCF4
    static bool SetDeveloperMode(::GlobalNamespace::OVRPlugin::Bool active);
    // static public System.Single GetAdaptiveGPUPerformanceScale()
    // Offset: 0x172FDFC
    static float GetAdaptiveGPUPerformanceScale();
    // static public System.Boolean GetHandTrackingEnabled()
    // Offset: 0x172FF14
    static bool GetHandTrackingEnabled();
    // static public System.Boolean GetHandState(OVRPlugin/Step stepId, OVRPlugin/Hand hand, ref OVRPlugin/HandState handState)
    // Offset: 0x1730028
    static bool GetHandState(::GlobalNamespace::OVRPlugin::Step stepId, ::GlobalNamespace::OVRPlugin::Hand hand, ByRef<::GlobalNamespace::OVRPlugin::HandState> handState);
    // static public System.Boolean GetSkeleton(OVRPlugin/SkeletonType skeletonType, out OVRPlugin/Skeleton skeleton)
    // Offset: 0x17307CC
    static bool GetSkeleton(::GlobalNamespace::OVRPlugin::SkeletonType skeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton> skeleton);
    // static public System.Boolean GetSkeleton2(OVRPlugin/SkeletonType skeletonType, ref OVRPlugin/Skeleton2 skeleton)
    // Offset: 0x17308EC
    static bool GetSkeleton2(::GlobalNamespace::OVRPlugin::SkeletonType skeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton2> skeleton);
    // static public System.Boolean GetMesh(OVRPlugin/MeshType meshType, out OVRPlugin/Mesh mesh)
    // Offset: 0x1714AB0
    static bool GetMesh(::GlobalNamespace::OVRPlugin::MeshType meshType, ByRef<::GlobalNamespace::OVRPlugin::Mesh*> mesh);
    // static public System.Int32 GetLocalTrackingSpaceRecenterCount()
    // Offset: 0x1732758
    static int GetLocalTrackingSpaceRecenterCount();
    // static public System.Boolean GetSystemHmd3DofModeEnabled()
    // Offset: 0x1732868
    static bool GetSystemHmd3DofModeEnabled();
    // static public System.Boolean SetClientColorDesc(OVRPlugin/ColorSpace colorSpace)
    // Offset: 0x173297C
    static bool SetClientColorDesc(::GlobalNamespace::OVRPlugin::ColorSpace colorSpace);
    // static public OVRPlugin/ColorSpace GetHmdColorDesc()
    // Offset: 0x1732AC0
    static ::GlobalNamespace::OVRPlugin::ColorSpace GetHmdColorDesc();
    // static public System.Boolean PollEvent(ref OVRPlugin/EventDataBuffer eventDataBuffer)
    // Offset: 0x1732C20
    static bool PollEvent(ByRef<::GlobalNamespace::OVRPlugin::EventDataBuffer> eventDataBuffer);
    // static public System.UInt64 GetNativeOpenXRInstance()
    // Offset: 0x1732E70
    static uint64_t GetNativeOpenXRInstance();
    // static public System.UInt64 GetNativeOpenXRSession()
    // Offset: 0x1732F8C
    static uint64_t GetNativeOpenXRSession();
    // static public System.Boolean SetKeyboardOverlayUV(OVRPlugin/Vector2f uv)
    // Offset: 0x17330A8
    static bool SetKeyboardOverlayUV(::GlobalNamespace::OVRPlugin::Vector2f uv);
  }; // OVRPlugin
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Skeleton2Internal, "", "OVRPlugin/Skeleton2Internal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Skeleton, "", "OVRPlugin/Skeleton");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::SkeletonType, "", "OVRPlugin/SkeletonType");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Bone, "", "OVRPlugin/Bone");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::BoneCapsule, "", "OVRPlugin/BoneCapsule");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::HandStateInternal, "", "OVRPlugin/HandStateInternal");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::HandFingerPinch, "", "OVRPlugin/HandFingerPinch");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::BoneId, "", "OVRPlugin/BoneId");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::HandStatus, "", "OVRPlugin/HandStatus");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::TrackingConfidence, "", "OVRPlugin/TrackingConfidence");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Posef, "", "OVRPlugin/Posef");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Quatf, "", "OVRPlugin/Quatf");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::Vector3f, "", "OVRPlugin/Vector3f");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin::XrApi, "", "OVRPlugin/XrApi");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_version
// Il2CppName: get_version
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRPlugin::get_version)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_version", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_nativeSDKVersion
// Il2CppName: get_nativeSDKVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Version* (*)()>(&GlobalNamespace::OVRPlugin::get_nativeSDKVersion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_nativeSDKVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_initialized
// Il2CppName: get_initialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_initialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_initialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_nativeXrApi
// Il2CppName: get_nativeXrApi
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::XrApi (*)()>(&GlobalNamespace::OVRPlugin::get_nativeXrApi)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_nativeXrApi", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_chromatic
// Il2CppName: get_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_chromatic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_chromatic
// Il2CppName: set_chromatic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_chromatic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_chromatic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_monoscopic
// Il2CppName: get_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_monoscopic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_monoscopic
// Il2CppName: set_monoscopic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_monoscopic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_monoscopic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_position
// Il2CppName: set_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_position)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking
// Il2CppName: get_useIPDInPositionTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_useIPDInPositionTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking
// Il2CppName: set_useIPDInPositionTracking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_useIPDInPositionTracking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_positionSupported
// Il2CppName: get_positionSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_positionSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_positionSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_positionTracked
// Il2CppName: get_positionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_positionTracked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_positionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_powerSaving
// Il2CppName: get_powerSaving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_powerSaving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_powerSaving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_hmdPresent
// Il2CppName: get_hmdPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hmdPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_hmdPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_userPresent
// Il2CppName: get_userPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_userPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_userPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_headphonesPresent
// Il2CppName: get_headphonesPresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_headphonesPresent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_headphonesPresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_recommendedMSAALevel
// Il2CppName: get_recommendedMSAALevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_recommendedMSAALevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_recommendedMSAALevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemRegion
// Il2CppName: get_systemRegion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SystemRegion (*)()>(&GlobalNamespace::OVRPlugin::get_systemRegion)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemRegion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_audioOutId
// Il2CppName: get_audioOutId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_audioOutId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_audioOutId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_audioInId
// Il2CppName: get_audioInId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_audioInId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_audioInId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_hasVrFocus
// Il2CppName: get_hasVrFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hasVrFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_hasVrFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_hasInputFocus
// Il2CppName: get_hasInputFocus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hasInputFocus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_hasInputFocus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_shouldQuit
// Il2CppName: get_shouldQuit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_shouldQuit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_shouldQuit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_shouldRecenter
// Il2CppName: get_shouldRecenter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_shouldRecenter)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_shouldRecenter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_productName
// Il2CppName: get_productName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_productName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_productName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_latency
// Il2CppName: get_latency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_latency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_latency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeDepth
// Il2CppName: get_eyeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_eyeDepth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeDepth
// Il2CppName: set_eyeDepth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_eyeDepth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeDepth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeHeight
// Il2CppName: get_eyeHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_eyeHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeHeight
// Il2CppName: set_eyeHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_eyeHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_batteryLevel
// Il2CppName: get_batteryLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_batteryLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_batteryLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_batteryTemperature
// Il2CppName: get_batteryTemperature
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_batteryTemperature)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_batteryTemperature", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_cpuLevel
// Il2CppName: get_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_cpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_cpuLevel
// Il2CppName: set_cpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRPlugin::set_cpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_cpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_gpuLevel
// Il2CppName: get_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_gpuLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_gpuLevel
// Il2CppName: set_gpuLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRPlugin::set_gpuLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_gpuLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_vsyncCount
// Il2CppName: get_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::get_vsyncCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_vsyncCount
// Il2CppName: set_vsyncCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::OVRPlugin::set_vsyncCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_vsyncCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemVolume
// Il2CppName: get_systemVolume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_systemVolume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemVolume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_ipd
// Il2CppName: get_ipd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_ipd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_ipd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_ipd
// Il2CppName: set_ipd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_ipd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_ipd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_occlusionMesh
// Il2CppName: get_occlusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_occlusionMesh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_occlusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_occlusionMesh
// Il2CppName: set_occlusionMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_occlusionMesh)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_occlusionMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_batteryStatus
// Il2CppName: get_batteryStatus
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BatteryStatus (*)()>(&GlobalNamespace::OVRPlugin::get_batteryStatus)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_batteryStatus", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported
// Il2CppName: get_fixedFoveatedRenderingSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_fixedFoveatedRenderingSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel
// Il2CppName: get_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel
// Il2CppName: set_fixedFoveatedRenderingLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::FixedFoveatedRenderingLevel)>(&GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/FixedFoveatedRenderingLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_fixedFoveatedRenderingLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_useDynamicFixedFoveatedRendering
// Il2CppName: get_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_useDynamicFixedFoveatedRendering
// Il2CppName: set_useDynamicFixedFoveatedRendering
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useDynamicFixedFoveatedRendering)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_useDynamicFixedFoveatedRendering", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_tiledMultiResSupported
// Il2CppName: get_tiledMultiResSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_tiledMultiResSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_tiledMultiResSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_tiledMultiResLevel
// Il2CppName: get_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::TiledMultiResLevel (*)()>(&GlobalNamespace::OVRPlugin::get_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_tiledMultiResLevel
// Il2CppName: set_tiledMultiResLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::GlobalNamespace::OVRPlugin::TiledMultiResLevel)>(&GlobalNamespace::OVRPlugin::set_tiledMultiResLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TiledMultiResLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_tiledMultiResLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_gpuUtilSupported
// Il2CppName: get_gpuUtilSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_gpuUtilSupported)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_gpuUtilSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_gpuUtilLevel
// Il2CppName: get_gpuUtilLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_gpuUtilLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_gpuUtilLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable
// Il2CppName: get_systemDisplayFrequenciesAvailable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (*)()>(&GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemDisplayFrequenciesAvailable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_systemDisplayFrequency
// Il2CppName: get_systemDisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::get_systemDisplayFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_systemDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_systemDisplayFrequency
// Il2CppName: set_systemDisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float)>(&GlobalNamespace::OVRPlugin::set_systemDisplayFrequency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_systemDisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_eyeFovPremultipliedAlphaModeEnabled
// Il2CppName: get_eyeFovPremultipliedAlphaModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeFovPremultipliedAlphaModeEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_eyeFovPremultipliedAlphaModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::set_eyeFovPremultipliedAlphaModeEnabled
// Il2CppName: set_eyeFovPremultipliedAlphaModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_eyeFovPremultipliedAlphaModeEnabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "set_eyeFovPremultipliedAlphaModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled
// Il2CppName: get_AsymmetricFovEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_AsymmetricFovEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled
// Il2CppName: get_EyeTextureArrayEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "get_EyeTextureArrayEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::OVRPlugin::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeFrustum
// Il2CppName: GetEyeFrustum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Frustumf (*)(::GlobalNamespace::OVRPlugin::Eye)>(&GlobalNamespace::OVRPlugin::GetEyeFrustum)> {
  static const MethodInfo* get() {
    static auto* eyeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Eye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeFrustum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeTextureSize
// Il2CppName: GetEyeTextureSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Sizei (*)(::GlobalNamespace::OVRPlugin::Eye)>(&GlobalNamespace::OVRPlugin::GetEyeTextureSize)> {
  static const MethodInfo* get() {
    static auto* eyeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Eye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeTextureSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eyeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackerPose
// Il2CppName: GetTrackerPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(::GlobalNamespace::OVRPlugin::Tracker)>(&GlobalNamespace::OVRPlugin::GetTrackerPose)> {
  static const MethodInfo* get() {
    static auto* trackerId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Tracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackerPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackerFrustum
// Il2CppName: GetTrackerFrustum
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Frustumf (*)(::GlobalNamespace::OVRPlugin::Tracker)>(&GlobalNamespace::OVRPlugin::GetTrackerFrustum)> {
  static const MethodInfo* get() {
    static auto* trackerId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Tracker")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackerFrustum", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ShowUI
// Il2CppName: ShowUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::PlatformUI)>(&GlobalNamespace::OVRPlugin::ShowUI)> {
  static const MethodInfo* get() {
    static auto* ui = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PlatformUI")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ShowUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ui});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnqueueSubmitLayer
// Il2CppName: EnqueueSubmitLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool, bool, ::System::IntPtr, ::System::IntPtr, int, int, ::GlobalNamespace::OVRPlugin::Posef, ::GlobalNamespace::OVRPlugin::Vector3f, int, ::GlobalNamespace::OVRPlugin::OverlayShape, bool, ::GlobalNamespace::OVRPlugin::TextureRectMatrixf, bool, ::UnityEngine::Vector4, ::UnityEngine::Vector4, bool, bool)>(&GlobalNamespace::OVRPlugin::EnqueueSubmitLayer)> {
  static const MethodInfo* get() {
    static auto* onTop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* headLocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* noDepthBufferTesting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* leftTexture = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* rightTexture = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* pose = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->byval_arg;
    static auto* layerIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* shape = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/OverlayShape")->byval_arg;
    static auto* overrideTextureRectMatrix = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* textureRectMatrix = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TextureRectMatrixf")->byval_arg;
    static auto* overridePerLayerColorScaleAndOffset = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* expensiveSuperSample = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hidden = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnqueueSubmitLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onTop, headLocked, noDepthBufferTesting, leftTexture, rightTexture, layerId, frameIndex, pose, scale, layerIndex, shape, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset, expensiveSuperSample, hidden});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::CalculateLayerDesc
// Il2CppName: CalculateLayerDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::LayerDesc (*)(::GlobalNamespace::OVRPlugin::OverlayShape, ::GlobalNamespace::OVRPlugin::LayerLayout, ::GlobalNamespace::OVRPlugin::Sizei, int, int, ::GlobalNamespace::OVRPlugin::EyeTextureFormat, int)>(&GlobalNamespace::OVRPlugin::CalculateLayerDesc)> {
  static const MethodInfo* get() {
    static auto* shape = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/OverlayShape")->byval_arg;
    static auto* layout = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LayerLayout")->byval_arg;
    static auto* textureSize = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Sizei")->byval_arg;
    static auto* mipLevels = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* sampleCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* format = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EyeTextureFormat")->byval_arg;
    static auto* layerFlags = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "CalculateLayerDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnqueueSetupLayer
// Il2CppName: EnqueueSetupLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::LayerDesc, int, ::System::IntPtr)>(&GlobalNamespace::OVRPlugin::EnqueueSetupLayer)> {
  static const MethodInfo* get() {
    static auto* desc = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/LayerDesc")->byval_arg;
    static auto* compositionDepth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* layerID = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnqueueSetupLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{desc, compositionDepth, layerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::EnqueueDestroyLayer
// Il2CppName: EnqueueDestroyLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::System::IntPtr)>(&GlobalNamespace::OVRPlugin::EnqueueDestroyLayer)> {
  static const MethodInfo* get() {
    static auto* layerID = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "EnqueueDestroyLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerTexture
// Il2CppName: GetLayerTexture
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int, int, ::GlobalNamespace::OVRPlugin::Eye)>(&GlobalNamespace::OVRPlugin::GetLayerTexture)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* stage = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* eyeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Eye")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerTexture", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId, stage, eyeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerTextureStageCount
// Il2CppName: GetLayerTextureStageCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&GlobalNamespace::OVRPlugin::GetLayerTextureStageCount)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerTextureStageCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject
// Il2CppName: GetLayerAndroidSurfaceObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::IntPtr (*)(int)>(&GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject)> {
  static const MethodInfo* get() {
    static auto* layerId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLayerAndroidSurfaceObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layerId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses
// Il2CppName: UpdateNodePhysicsPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, double)>(&GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses)> {
  static const MethodInfo* get() {
    static auto* frameIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* predictionSeconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "UpdateNodePhysicsPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{frameIndex, predictionSeconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePose
// Il2CppName: GetNodePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodePose)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeVelocity
// Il2CppName: GetNodeVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeVelocity)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeAngularVelocity
// Il2CppName: GetNodeAngularVelocity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeAngularVelocity)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeAngularVelocity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeAcceleration
// Il2CppName: GetNodeAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeAcceleration)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration
// Il2CppName: GetNodeAngularAcceleration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeAngularAcceleration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePresent
// Il2CppName: GetNodePresent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePresent)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePresent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeOrientationTracked
// Il2CppName: GetNodeOrientationTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodeOrientationTracked)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeOrientationTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeOrientationValid
// Il2CppName: GetNodeOrientationValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodeOrientationValid)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeOrientationValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePositionTracked
// Il2CppName: GetNodePositionTracked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePositionTracked)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePositionTracked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePositionValid
// Il2CppName: GetNodePositionValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node)>(&GlobalNamespace::OVRPlugin::GetNodePositionValid)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePositionValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodePoseStateRaw
// Il2CppName: GetNodePoseStateRaw
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::PoseStatef (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::Step)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateRaw)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodePoseStateRaw", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, stepId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose
// Il2CppName: GetCurrentTrackingTransformPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)()>(&GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetCurrentTrackingTransformPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose
// Il2CppName: GetTrackingTransformRawPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingTransformRawPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose
// Il2CppName: GetTrackingTransformRelativePose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)(::GlobalNamespace::OVRPlugin::TrackingOrigin)>(&GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose)> {
  static const MethodInfo* get() {
    static auto* trackingOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingTransformRelativePose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{trackingOrigin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState
// Il2CppName: GetControllerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState2
// Il2CppName: GetControllerState2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState2 (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState2)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerState4
// Il2CppName: GetControllerState4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ControllerState4 (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerState4)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerState4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerVibration
// Il2CppName: SetControllerVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, float, float)>(&GlobalNamespace::OVRPlugin::SetControllerVibration)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* frequency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, frequency, amplitude});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerHapticsDesc
// Il2CppName: GetControllerHapticsDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::HapticsDesc (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerHapticsDesc)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerHapticsDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetControllerHapticsState
// Il2CppName: GetControllerHapticsState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::HapticsState (*)(uint)>(&GlobalNamespace::OVRPlugin::GetControllerHapticsState)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetControllerHapticsState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetControllerHaptics
// Il2CppName: SetControllerHaptics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint, ::GlobalNamespace::OVRPlugin::HapticsBuffer)>(&GlobalNamespace::OVRPlugin::SetControllerHaptics)> {
  static const MethodInfo* get() {
    static auto* controllerMask = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    static auto* hapticsBuffer = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HapticsBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetControllerHaptics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{controllerMask, hapticsBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale
// Il2CppName: GetEyeRecommendedResolutionScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetEyeRecommendedResolutionScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime
// Il2CppName: GetAppCpuStartToGpuEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAppCpuStartToGpuEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryConfigured
// Il2CppName: GetBoundaryConfigured
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetBoundaryConfigured)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryConfigured", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::TestBoundaryNode
// Il2CppName: TestBoundaryNode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoundaryTestResult (*)(::GlobalNamespace::OVRPlugin::Node, ::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::TestBoundaryNode)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "TestBoundaryNode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::TestBoundaryPoint
// Il2CppName: TestBoundaryPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoundaryTestResult (*)(::GlobalNamespace::OVRPlugin::Vector3f, ::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::TestBoundaryPoint)> {
  static const MethodInfo* get() {
    static auto* point = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->byval_arg;
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "TestBoundaryPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{point, boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryGeometry
// Il2CppName: GetBoundaryGeometry
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::BoundaryGeometry (*)(::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::GetBoundaryGeometry)> {
  static const MethodInfo* get() {
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryGeometry", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryGeometry2
// Il2CppName: GetBoundaryGeometry2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::BoundaryType, ::System::IntPtr, ByRef<int>)>(&GlobalNamespace::OVRPlugin::GetBoundaryGeometry2)> {
  static const MethodInfo* get() {
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    static auto* points = &::il2cpp_utils::GetClassFromName("System", "IntPtr")->byval_arg;
    static auto* pointsCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryGeometry2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryType, points, pointsCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAppPerfStats
// Il2CppName: GetAppPerfStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::AppPerfStats (*)()>(&GlobalNamespace::OVRPlugin::GetAppPerfStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAppPerfStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ResetAppPerfStats
// Il2CppName: ResetAppPerfStats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ResetAppPerfStats)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ResetAppPerfStats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAppFramerate
// Il2CppName: GetAppFramerate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetAppFramerate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAppFramerate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency
// Il2CppName: SetHandNodePoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double)>(&GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency)> {
  static const MethodInfo* get() {
    static auto* latencyInSeconds = &::il2cpp_utils::GetClassFromName("System", "Double")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetHandNodePoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{latencyInSeconds});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency
// Il2CppName: GetHandNodePoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHandNodePoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat
// Il2CppName: GetDesiredEyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::EyeTextureFormat (*)()>(&GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetDesiredEyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat
// Il2CppName: SetDesiredEyeTextureFormat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::EyeTextureFormat)>(&GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EyeTextureFormat")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetDesiredEyeTextureFormat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::InitializeMixedReality
// Il2CppName: InitializeMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::InitializeMixedReality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "InitializeMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ShutdownMixedReality
// Il2CppName: ShutdownMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ShutdownMixedReality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ShutdownMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsMixedRealityInitialized
// Il2CppName: IsMixedRealityInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsMixedRealityInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsMixedRealityInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetExternalCameraCount
// Il2CppName: GetExternalCameraCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::GetExternalCameraCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetExternalCameraCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::UpdateExternalCamera
// Il2CppName: UpdateExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::UpdateExternalCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "UpdateExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo
// Il2CppName: GetMixedRealityCameraInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics>, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics>)>(&GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* cameraExtrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraExtrinsics")->this_arg;
    static auto* cameraIntrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraIntrinsics")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetMixedRealityCameraInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId, cameraExtrinsics, cameraIntrinsics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OverrideExternalCameraFov
// Il2CppName: OverrideExternalCameraFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, bool, ::GlobalNamespace::OVRPlugin::Fovf)>(&GlobalNamespace::OVRPlugin::OverrideExternalCameraFov)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useOverriddenFov = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* fov = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Fovf")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "OverrideExternalCameraFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId, useOverriddenFov, fov});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov
// Il2CppName: GetUseOverriddenExternalCameraFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetUseOverriddenExternalCameraFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose
// Il2CppName: OverrideExternalCameraStaticPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int, bool, ::GlobalNamespace::OVRPlugin::Posef)>(&GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* useOverriddenPose = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* poseInStageOrigin = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Posef")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "OverrideExternalCameraStaticPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId, useOverriddenPose, poseInStageOrigin});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose
// Il2CppName: GetUseOverriddenExternalCameraStaticPose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int)>(&GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose)> {
  static const MethodInfo* get() {
    static auto* cameraId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetUseOverriddenExternalCameraStaticPose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera
// Il2CppName: ResetDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ResetDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetDefaultExternalCamera
// Il2CppName: SetDefaultExternalCamera
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics>, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics>)>(&GlobalNamespace::OVRPlugin::SetDefaultExternalCamera)> {
  static const MethodInfo* get() {
    static auto* cameraName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cameraIntrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraIntrinsics")->this_arg;
    static auto* cameraExtrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraExtrinsics")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetDefaultExternalCamera", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraName, cameraIntrinsics, cameraExtrinsics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetExternalCameraProperties
// Il2CppName: SetExternalCameraProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<::GlobalNamespace::OVRPlugin::CameraIntrinsics>, ByRef<::GlobalNamespace::OVRPlugin::CameraExtrinsics>)>(&GlobalNamespace::OVRPlugin::SetExternalCameraProperties)> {
  static const MethodInfo* get() {
    static auto* cameraName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cameraIntrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraIntrinsics")->this_arg;
    static auto* cameraExtrinsics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/CameraExtrinsics")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetExternalCameraProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cameraName, cameraIntrinsics, cameraExtrinsics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryDimensions
// Il2CppName: GetBoundaryDimensions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Vector3f (*)(::GlobalNamespace::OVRPlugin::BoundaryType)>(&GlobalNamespace::OVRPlugin::GetBoundaryDimensions)> {
  static const MethodInfo* get() {
    static auto* boundaryType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/BoundaryType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryDimensions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{boundaryType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetBoundaryVisible
// Il2CppName: GetBoundaryVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetBoundaryVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetBoundaryVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetBoundaryVisible
// Il2CppName: SetBoundaryVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetBoundaryVisible)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetBoundaryVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSystemHeadsetType
// Il2CppName: GetSystemHeadsetType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::SystemHeadset (*)()>(&GlobalNamespace::OVRPlugin::GetSystemHeadsetType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSystemHeadsetType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetActiveController
// Il2CppName: GetActiveController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Controller (*)()>(&GlobalNamespace::OVRPlugin::GetActiveController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetActiveController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetConnectedControllers
// Il2CppName: GetConnectedControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Controller (*)()>(&GlobalNamespace::OVRPlugin::GetConnectedControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetConnectedControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::ToBool
// Il2CppName: ToBool
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Bool (*)(bool)>(&GlobalNamespace::OVRPlugin::ToBool)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "ToBool", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingOriginType
// Il2CppName: GetTrackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::TrackingOrigin (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingOriginType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetTrackingOriginType
// Il2CppName: SetTrackingOriginType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::TrackingOrigin)>(&GlobalNamespace::OVRPlugin::SetTrackingOriginType)> {
  static const MethodInfo* get() {
    static auto* originType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/TrackingOrigin")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetTrackingOriginType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{originType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin
// Il2CppName: GetTrackingCalibratedOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Posef (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTrackingCalibratedOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin
// Il2CppName: SetTrackingCalibratedOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetTrackingCalibratedOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::RecenterTrackingOrigin
// Il2CppName: RecenterTrackingOrigin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::RecenterFlags)>(&GlobalNamespace::OVRPlugin::RecenterTrackingOrigin)> {
  static const MethodInfo* get() {
    static auto* flags = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/RecenterFlags")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "RecenterTrackingOrigin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{flags});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNodeFrustum2
// Il2CppName: GetNodeFrustum2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Node, ByRef<::GlobalNamespace::OVRPlugin::Frustumf2>)>(&GlobalNamespace::OVRPlugin::GetNodeFrustum2)> {
  static const MethodInfo* get() {
    static auto* nodeId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Node")->byval_arg;
    static auto* frustum = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Frustumf2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNodeFrustum2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeId, frustum});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetDominantHand
// Il2CppName: GetDominantHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::Handedness (*)()>(&GlobalNamespace::OVRPlugin::GetDominantHand)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetDominantHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SendEvent
// Il2CppName: SendEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::StringW)>(&GlobalNamespace::OVRPlugin::SendEvent)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* source = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SendEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, param, source});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetHeadPoseModifier
// Il2CppName: SetHeadPoseModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::Quatf>, ByRef<::GlobalNamespace::OVRPlugin::Vector3f>)>(&GlobalNamespace::OVRPlugin::SetHeadPoseModifier)> {
  static const MethodInfo* get() {
    static auto* relativeRotation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Quatf")->this_arg;
    static auto* relativeTranslation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetHeadPoseModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeRotation, relativeTranslation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHeadPoseModifier
// Il2CppName: GetHeadPoseModifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::Quatf>, ByRef<::GlobalNamespace::OVRPlugin::Vector3f>)>(&GlobalNamespace::OVRPlugin::GetHeadPoseModifier)> {
  static const MethodInfo* get() {
    static auto* relativeRotation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Quatf")->this_arg;
    static auto* relativeTranslation = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector3f")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHeadPoseModifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{relativeRotation, relativeTranslation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::IsPerfMetricsSupported
// Il2CppName: IsPerfMetricsSupported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::PerfMetrics)>(&GlobalNamespace::OVRPlugin::IsPerfMetricsSupported)> {
  static const MethodInfo* get() {
    static auto* perfMetrics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PerfMetrics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "IsPerfMetricsSupported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfMetrics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPerfMetricsFloat
// Il2CppName: GetPerfMetricsFloat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<float> (*)(::GlobalNamespace::OVRPlugin::PerfMetrics)>(&GlobalNamespace::OVRPlugin::GetPerfMetricsFloat)> {
  static const MethodInfo* get() {
    static auto* perfMetrics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PerfMetrics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPerfMetricsFloat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfMetrics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetPerfMetricsInt
// Il2CppName: GetPerfMetricsInt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Nullable_1<int> (*)(::GlobalNamespace::OVRPlugin::PerfMetrics)>(&GlobalNamespace::OVRPlugin::GetPerfMetricsInt)> {
  static const MethodInfo* get() {
    static auto* perfMetrics = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/PerfMetrics")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetPerfMetricsInt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{perfMetrics});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetTimeInSeconds
// Il2CppName: GetTimeInSeconds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double (*)()>(&GlobalNamespace::OVRPlugin::GetTimeInSeconds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetTimeInSeconds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetColorScaleAndOffset
// Il2CppName: SetColorScaleAndOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::UnityEngine::Vector4, ::UnityEngine::Vector4, bool)>(&GlobalNamespace::OVRPlugin::SetColorScaleAndOffset)> {
  static const MethodInfo* get() {
    static auto* colorScale = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* colorOffset = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector4")->byval_arg;
    static auto* applyToAllLayers = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetColorScaleAndOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorScale, colorOffset, applyToAllLayers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::AddCustomMetadata
// Il2CppName: AddCustomMetadata
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&GlobalNamespace::OVRPlugin::AddCustomMetadata)> {
  static const MethodInfo* get() {
    static auto* name = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* param = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "AddCustomMetadata", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{name, param});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetDeveloperMode
// Il2CppName: SetDeveloperMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Bool)>(&GlobalNamespace::OVRPlugin::SetDeveloperMode)> {
  static const MethodInfo* get() {
    static auto* active = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Bool")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetDeveloperMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{active});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale
// Il2CppName: GetAdaptiveGPUPerformanceScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)()>(&GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetAdaptiveGPUPerformanceScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHandTrackingEnabled
// Il2CppName: GetHandTrackingEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetHandTrackingEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHandTrackingEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHandState
// Il2CppName: GetHandState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Step, ::GlobalNamespace::OVRPlugin::Hand, ByRef<::GlobalNamespace::OVRPlugin::HandState>)>(&GlobalNamespace::OVRPlugin::GetHandState)> {
  static const MethodInfo* get() {
    static auto* stepId = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Step")->byval_arg;
    static auto* hand = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Hand")->byval_arg;
    static auto* handState = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/HandState")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHandState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stepId, hand, handState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSkeleton
// Il2CppName: GetSkeleton
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SkeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton>)>(&GlobalNamespace::OVRPlugin::GetSkeleton)> {
  static const MethodInfo* get() {
    static auto* skeletonType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SkeletonType")->byval_arg;
    static auto* skeleton = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Skeleton")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSkeleton", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skeletonType, skeleton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSkeleton2
// Il2CppName: GetSkeleton2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::SkeletonType, ByRef<::GlobalNamespace::OVRPlugin::Skeleton2>)>(&GlobalNamespace::OVRPlugin::GetSkeleton2)> {
  static const MethodInfo* get() {
    static auto* skeletonType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/SkeletonType")->byval_arg;
    static auto* skeleton = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Skeleton2")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSkeleton2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{skeletonType, skeleton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetMesh
// Il2CppName: GetMesh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::MeshType, ByRef<::GlobalNamespace::OVRPlugin::Mesh*>)>(&GlobalNamespace::OVRPlugin::GetMesh)> {
  static const MethodInfo* get() {
    static auto* meshType = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/MeshType")->byval_arg;
    static auto* mesh = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Mesh")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetMesh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{meshType, mesh});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetLocalTrackingSpaceRecenterCount
// Il2CppName: GetLocalTrackingSpaceRecenterCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)()>(&GlobalNamespace::OVRPlugin::GetLocalTrackingSpaceRecenterCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetLocalTrackingSpaceRecenterCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled
// Il2CppName: GetSystemHmd3DofModeEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetSystemHmd3DofModeEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetClientColorDesc
// Il2CppName: SetClientColorDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::ColorSpace)>(&GlobalNamespace::OVRPlugin::SetClientColorDesc)> {
  static const MethodInfo* get() {
    static auto* colorSpace = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/ColorSpace")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetClientColorDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorSpace});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetHmdColorDesc
// Il2CppName: GetHmdColorDesc
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRPlugin::ColorSpace (*)()>(&GlobalNamespace::OVRPlugin::GetHmdColorDesc)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetHmdColorDesc", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::PollEvent
// Il2CppName: PollEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<::GlobalNamespace::OVRPlugin::EventDataBuffer>)>(&GlobalNamespace::OVRPlugin::PollEvent)> {
  static const MethodInfo* get() {
    static auto* eventDataBuffer = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/EventDataBuffer")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "PollEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventDataBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNativeOpenXRInstance
// Il2CppName: GetNativeOpenXRInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::OVRPlugin::GetNativeOpenXRInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNativeOpenXRInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::GetNativeOpenXRSession
// Il2CppName: GetNativeOpenXRSession
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::OVRPlugin::GetNativeOpenXRSession)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "GetNativeOpenXRSession", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OVRPlugin::SetKeyboardOverlayUV
// Il2CppName: SetKeyboardOverlayUV
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::OVRPlugin::Vector2f)>(&GlobalNamespace::OVRPlugin::SetKeyboardOverlayUV)> {
  static const MethodInfo* get() {
    static auto* uv = &::il2cpp_utils::GetClassFromName("", "OVRPlugin/Vector2f")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OVRPlugin*), "SetKeyboardOverlayUV", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{uv});
  }
};
