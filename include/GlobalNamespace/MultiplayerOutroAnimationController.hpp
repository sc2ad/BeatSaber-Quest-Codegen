// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.PropertyName
#include "UnityEngine/PropertyName.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerScoreRingManager
  class MultiplayerScoreRingManager;
  // Forward declaring type: MultiplayerResultsPyramidView
  class MultiplayerResultsPyramidView;
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: GameplayCoreSceneSetupData
  class GameplayCoreSceneSetupData;
  // Forward declaring type: MultiplayerLayoutProvider
  class MultiplayerLayoutProvider;
  // Forward declaring type: MultiplayerResultsData
  class MultiplayerResultsData;
  // Forward declaring type: MultiplayerTimelineMock
  class MultiplayerTimelineMock;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerOutroAnimationController
  class MultiplayerOutroAnimationController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerOutroAnimationController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerOutroAnimationController*, "", "MultiplayerOutroAnimationController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerOutroAnimationController
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerOutroAnimationController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0x11258B8
    // private UnityEngine.Playables.PlayableDirector _outroPlayableDirector
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Playables::PlayableDirector* outroPlayableDirector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Playables::PlayableDirector*) == 0x8);
    // private System.String[] _playerTimelineTrackNames
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::StringW> playerTimelineTrackNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] _ringTimelineTrackNames
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> ringTimelineTrackNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private System.String[] _resultsTimelineTrackNames
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::StringW> resultsTimelineTrackNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private UnityEngine.PropertyName[] _playerTimelinePropertyNames
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::PropertyName> playerTimelinePropertyNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::PropertyName>) == 0x8);
    // private UnityEngine.PropertyName[] _resultsTimelinePropertyNames
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::PropertyName> resultsTimelinePropertyNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::PropertyName>) == 0x8);
    // [HeaderAttribute] Offset: 0x11259A4
    // private System.String _localPlayerTrackName
    // Size: 0x8
    // Offset: 0x48
    ::StringW localPlayerTrackName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.PropertyName _localPlayerTimelinePropertyName
    // Size: 0x4
    // Offset: 0x50
    ::UnityEngine::PropertyName localPlayerTimelinePropertyName;
    // Field size check
    static_assert(sizeof(::UnityEngine::PropertyName) == 0x4);
    // Padding between fields: localPlayerTimelinePropertyName and: badgeTimelineTrackNames
    char __padding7[0x4] = {};
    // [HeaderAttribute] Offset: 0x1125A28
    // private System.String[] _badgeTimelineTrackNames
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::StringW> badgeTimelineTrackNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // private UnityEngine.PropertyName[] _badgeTimelinePropertyNames
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::PropertyName> badgeTimelinePropertyNames;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::PropertyName>) == 0x8);
    // private UnityEngine.Transform _badgeStartTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* badgeStartTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _badgeMidTransform
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Transform* badgeMidTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [HeaderAttribute] Offset: 0x1125ACC
    // private System.String _songPreviewTrackName
    // Size: 0x8
    // Offset: 0x78
    ::StringW songPreviewTrackName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _resultsMocksActivationTrack
    // Size: 0x8
    // Offset: 0x80
    ::StringW resultsMocksActivationTrack;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [SpaceAttribute] Offset: 0x1125B28
    // private MultiplayerScoreRingManager _multiplayerScoreRingManager
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::MultiplayerScoreRingManager* multiplayerScoreRingManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerScoreRingManager*) == 0x8);
    // private MultiplayerResultsPyramidView _multiplayerResultsPyramidView
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::MultiplayerResultsPyramidView* multiplayerResultsPyramidView;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerResultsPyramidView*) == 0x8);
    // [InjectAttribute] Offset: 0x1125B70
    // private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0x1125B80
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0x1125B90
    // private readonly GameplayCoreSceneSetupData _sceneSetupData
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::GameplayCoreSceneSetupData* sceneSetupData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayCoreSceneSetupData*) == 0x8);
    // [InjectAttribute] Offset: 0x1125BA0
    // private readonly MultiplayerLayoutProvider _layoutProvider
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::MultiplayerLayoutProvider* layoutProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLayoutProvider*) == 0x8);
    // private System.Action _onCompleted
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action* onCompleted;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Playables.PlayableDirector _outroPlayableDirector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Playables::PlayableDirector*& dyn__outroPlayableDirector();
    // Get instance field reference: private System.String[] _playerTimelineTrackNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__playerTimelineTrackNames();
    // Get instance field reference: private System.String[] _ringTimelineTrackNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__ringTimelineTrackNames();
    // Get instance field reference: private System.String[] _resultsTimelineTrackNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__resultsTimelineTrackNames();
    // Get instance field reference: private UnityEngine.PropertyName[] _playerTimelinePropertyNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::PropertyName>& dyn__playerTimelinePropertyNames();
    // Get instance field reference: private UnityEngine.PropertyName[] _resultsTimelinePropertyNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::PropertyName>& dyn__resultsTimelinePropertyNames();
    // Get instance field reference: private System.String _localPlayerTrackName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__localPlayerTrackName();
    // Get instance field reference: private UnityEngine.PropertyName _localPlayerTimelinePropertyName
    [[deprecated("Use field access instead!")]] ::UnityEngine::PropertyName& dyn__localPlayerTimelinePropertyName();
    // Get instance field reference: private System.String[] _badgeTimelineTrackNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn__badgeTimelineTrackNames();
    // Get instance field reference: private UnityEngine.PropertyName[] _badgeTimelinePropertyNames
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::PropertyName>& dyn__badgeTimelinePropertyNames();
    // Get instance field reference: private UnityEngine.Transform _badgeStartTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__badgeStartTransform();
    // Get instance field reference: private UnityEngine.Transform _badgeMidTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__badgeMidTransform();
    // Get instance field reference: private System.String _songPreviewTrackName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__songPreviewTrackName();
    // Get instance field reference: private System.String _resultsMocksActivationTrack
    [[deprecated("Use field access instead!")]] ::StringW& dyn__resultsMocksActivationTrack();
    // Get instance field reference: private MultiplayerScoreRingManager _multiplayerScoreRingManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerScoreRingManager*& dyn__multiplayerScoreRingManager();
    // Get instance field reference: private MultiplayerResultsPyramidView _multiplayerResultsPyramidView
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerResultsPyramidView*& dyn__multiplayerResultsPyramidView();
    // Get instance field reference: private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerPlayersManager*& dyn__multiplayerPlayersManager();
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private readonly GameplayCoreSceneSetupData _sceneSetupData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayCoreSceneSetupData*& dyn__sceneSetupData();
    // Get instance field reference: private readonly MultiplayerLayoutProvider _layoutProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLayoutProvider*& dyn__layoutProvider();
    // Get instance field reference: private System.Action _onCompleted
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn__onCompleted();
    // public System.Void .ctor()
    // Offset: 0x13E1D6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerOutroAnimationController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerOutroAnimationController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerOutroAnimationController*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13DF114
    void Start();
    // protected System.Void OnValidate()
    // Offset: 0x13DF284
    void OnValidate();
    // protected System.Void OnDestroy()
    // Offset: 0x13DF9A0
    void OnDestroy();
    // public System.Void AnimateOutro(MultiplayerResultsData multiplayerResultsData, System.Action onCompleted)
    // Offset: 0x13DFB14
    void AnimateOutro(::GlobalNamespace::MultiplayerResultsData* multiplayerResultsData, ::System::Action* onCompleted);
    // private System.Void BindOutroTimeline()
    // Offset: 0x13DFCD8
    void BindOutroTimeline();
    // private System.Void BindRingsAndAudio(UnityEngine.GameObject[] rings, System.Boolean isMock, System.Boolean isDuel, MultiplayerTimelineMock timelineMock)
    // Offset: 0x13E02F4
    void BindRingsAndAudio(::ArrayW<::UnityEngine::GameObject*> rings, bool isMock, bool isDuel, ::GlobalNamespace::MultiplayerTimelineMock* timelineMock);
    // public System.Void SetTimelineMock(MultiplayerTimelineMock multiplayerIntroTimelineMock, System.Boolean isDuel)
    // Offset: 0x13E1258
    void SetTimelineMock(::GlobalNamespace::MultiplayerTimelineMock* multiplayerIntroTimelineMock, bool isDuel);
    // public System.Void Completed()
    // Offset: 0x13E19D8
    void Completed();
    // private System.Void HandlePlayerSpawningDidFinish()
    // Offset: 0x13DF1B8
    void HandlePlayerSpawningDidFinish();
  }; // MultiplayerOutroAnimationController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerOutroAnimationController), 184 + sizeof(::System::Action*)> __GlobalNamespace_MultiplayerOutroAnimationControllerSizeCheck;
  static_assert(sizeof(MultiplayerOutroAnimationController) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)()>(&GlobalNamespace::MultiplayerOutroAnimationController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)()>(&GlobalNamespace::MultiplayerOutroAnimationController::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)()>(&GlobalNamespace::MultiplayerOutroAnimationController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::AnimateOutro
// Il2CppName: AnimateOutro
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)(::GlobalNamespace::MultiplayerResultsData*, ::System::Action*)>(&GlobalNamespace::MultiplayerOutroAnimationController::AnimateOutro)> {
  static const MethodInfo* get() {
    static auto* multiplayerResultsData = &::il2cpp_utils::GetClassFromName("", "MultiplayerResultsData")->byval_arg;
    static auto* onCompleted = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "AnimateOutro", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerResultsData, onCompleted});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::BindOutroTimeline
// Il2CppName: BindOutroTimeline
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)()>(&GlobalNamespace::MultiplayerOutroAnimationController::BindOutroTimeline)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "BindOutroTimeline", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::BindRingsAndAudio
// Il2CppName: BindRingsAndAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)(::ArrayW<::UnityEngine::GameObject*>, bool, bool, ::GlobalNamespace::MultiplayerTimelineMock*)>(&GlobalNamespace::MultiplayerOutroAnimationController::BindRingsAndAudio)> {
  static const MethodInfo* get() {
    static auto* rings = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* isMock = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* isDuel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* timelineMock = &::il2cpp_utils::GetClassFromName("", "MultiplayerTimelineMock")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "BindRingsAndAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rings, isMock, isDuel, timelineMock});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::SetTimelineMock
// Il2CppName: SetTimelineMock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)(::GlobalNamespace::MultiplayerTimelineMock*, bool)>(&GlobalNamespace::MultiplayerOutroAnimationController::SetTimelineMock)> {
  static const MethodInfo* get() {
    static auto* multiplayerIntroTimelineMock = &::il2cpp_utils::GetClassFromName("", "MultiplayerTimelineMock")->byval_arg;
    static auto* isDuel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "SetTimelineMock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerIntroTimelineMock, isDuel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::Completed
// Il2CppName: Completed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)()>(&GlobalNamespace::MultiplayerOutroAnimationController::Completed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "Completed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerOutroAnimationController::HandlePlayerSpawningDidFinish
// Il2CppName: HandlePlayerSpawningDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerOutroAnimationController::*)()>(&GlobalNamespace::MultiplayerOutroAnimationController::HandlePlayerSpawningDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerOutroAnimationController*), "HandlePlayerSpawningDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
