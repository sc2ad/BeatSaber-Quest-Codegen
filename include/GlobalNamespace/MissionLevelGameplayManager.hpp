// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: ILevelEndActions
#include "GlobalNamespace/ILevelEndActions.hpp"
// Including type: ILevelStartController
#include "GlobalNamespace/ILevelStartController.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MissionObjectiveCheckersManager
  class MissionObjectiveCheckersManager;
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
  // Forward declaring type: GameSongController
  class GameSongController;
  // Forward declaring type: GameEnergyCounter
  class GameEnergyCounter;
  // Forward declaring type: PauseController
  class PauseController;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MissionLevelGameplayManager
  class MissionLevelGameplayManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MissionLevelGameplayManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MissionLevelGameplayManager*, "", "MissionLevelGameplayManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: MissionLevelGameplayManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MissionLevelGameplayManager : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::ILevelEndActions, public ::GlobalNamespace::ILevelStartController*/ {
    public:
    // Nested type: ::GlobalNamespace::MissionLevelGameplayManager::InitData
    class InitData;
    // Nested type: ::GlobalNamespace::MissionLevelGameplayManager::GameState
    struct GameState;
    // Nested type: ::GlobalNamespace::MissionLevelGameplayManager::$Start$d__23
    class $Start$d__23;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MissionLevelGameplayManager/GameState
    // [TokenAttribute] Offset: FFFFFFFF
    struct GameState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GameState
      constexpr GameState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MissionLevelGameplayManager/GameState Intro
      static constexpr const int Intro = 0;
      // Get static field: static public MissionLevelGameplayManager/GameState Intro
      static ::GlobalNamespace::MissionLevelGameplayManager::GameState _get_Intro();
      // Set static field: static public MissionLevelGameplayManager/GameState Intro
      static void _set_Intro(::GlobalNamespace::MissionLevelGameplayManager::GameState value);
      // static field const value: static public MissionLevelGameplayManager/GameState Playing
      static constexpr const int Playing = 1;
      // Get static field: static public MissionLevelGameplayManager/GameState Playing
      static ::GlobalNamespace::MissionLevelGameplayManager::GameState _get_Playing();
      // Set static field: static public MissionLevelGameplayManager/GameState Playing
      static void _set_Playing(::GlobalNamespace::MissionLevelGameplayManager::GameState value);
      // static field const value: static public MissionLevelGameplayManager/GameState Paused
      static constexpr const int Paused = 2;
      // Get static field: static public MissionLevelGameplayManager/GameState Paused
      static ::GlobalNamespace::MissionLevelGameplayManager::GameState _get_Paused();
      // Set static field: static public MissionLevelGameplayManager/GameState Paused
      static void _set_Paused(::GlobalNamespace::MissionLevelGameplayManager::GameState value);
      // static field const value: static public MissionLevelGameplayManager/GameState Finished
      static constexpr const int Finished = 3;
      // Get static field: static public MissionLevelGameplayManager/GameState Finished
      static ::GlobalNamespace::MissionLevelGameplayManager::GameState _get_Finished();
      // Set static field: static public MissionLevelGameplayManager/GameState Finished
      static void _set_Finished(::GlobalNamespace::MissionLevelGameplayManager::GameState value);
      // static field const value: static public MissionLevelGameplayManager/GameState Failed
      static constexpr const int Failed = 4;
      // Get static field: static public MissionLevelGameplayManager/GameState Failed
      static ::GlobalNamespace::MissionLevelGameplayManager::GameState _get_Failed();
      // Set static field: static public MissionLevelGameplayManager/GameState Failed
      static void _set_Failed(::GlobalNamespace::MissionLevelGameplayManager::GameState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MissionLevelGameplayManager/GameState
    #pragma pack(pop)
    static check_size<sizeof(MissionLevelGameplayManager::GameState), 0 + sizeof(int)> __GlobalNamespace_MissionLevelGameplayManager_GameStateSizeCheck;
    static_assert(sizeof(MissionLevelGameplayManager::GameState) == 0x4);
    public:
    // private MissionObjectiveCheckersManager _missionObjectiveCheckersManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MissionObjectiveCheckersManager* missionObjectiveCheckersManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MissionObjectiveCheckersManager*) == 0x8);
    // [InjectAttribute] Offset: 0x11232FC
    // private readonly GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameScenesManager*) == 0x8);
    // [InjectAttribute] Offset: 0x112330C
    // private readonly GameSongController _gameSongController
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GameSongController* gameSongController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameSongController*) == 0x8);
    // [InjectAttribute] Offset: 0x112331C
    // private readonly GameEnergyCounter _gameEnergyCounter
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::GameEnergyCounter* gameEnergyCounter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameEnergyCounter*) == 0x8);
    // [InjectAttribute] Offset: 0x112332C
    // private readonly PauseController _pauseController
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::PauseController* pauseController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PauseController*) == 0x8);
    // [InjectAttribute] Offset: 0x112333C
    // private readonly MissionLevelGameplayManager/InitData _initData
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::MissionLevelGameplayManager::InitData* initData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MissionLevelGameplayManager::InitData*) == 0x8);
    // private System.Action levelWillStartIntroEvent
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* levelWillStartIntroEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action levelDidStartEvent
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* levelDidStartEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action levelFailedEvent
    // Size: 0x8
    // Offset: 0x58
    ::System::Action* levelFailedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action levelFinishedEvent
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* levelFinishedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private MissionLevelGameplayManager/GameState _gameState
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::MissionLevelGameplayManager::GameState gameState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MissionLevelGameplayManager::GameState) == 0x4);
    // private MissionLevelGameplayManager/GameState _prePauseGameState
    // Size: 0x4
    // Offset: 0x6C
    ::GlobalNamespace::MissionLevelGameplayManager::GameState prePauseGameState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MissionLevelGameplayManager::GameState) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ILevelEndActions
    operator ::GlobalNamespace::ILevelEndActions() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ILevelEndActions*>(this);
    }
    // Creating interface conversion operator: i_ILevelEndActions
    inline ::GlobalNamespace::ILevelEndActions* i_ILevelEndActions() noexcept {
      return reinterpret_cast<::GlobalNamespace::ILevelEndActions*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ILevelStartController
    operator ::GlobalNamespace::ILevelStartController() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ILevelStartController*>(this);
    }
    // Creating interface conversion operator: i_ILevelStartController
    inline ::GlobalNamespace::ILevelStartController* i_ILevelStartController() noexcept {
      return reinterpret_cast<::GlobalNamespace::ILevelStartController*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MissionObjectiveCheckersManager _missionObjectiveCheckersManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionObjectiveCheckersManager*& dyn__missionObjectiveCheckersManager();
    // Get instance field reference: private readonly GameScenesManager _gameScenesManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& dyn__gameScenesManager();
    // Get instance field reference: private readonly GameSongController _gameSongController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameSongController*& dyn__gameSongController();
    // Get instance field reference: private readonly GameEnergyCounter _gameEnergyCounter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameEnergyCounter*& dyn__gameEnergyCounter();
    // Get instance field reference: private readonly PauseController _pauseController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PauseController*& dyn__pauseController();
    // Get instance field reference: private readonly MissionLevelGameplayManager/InitData _initData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager::InitData*& dyn__initData();
    // Get instance field reference: private System.Action levelWillStartIntroEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_levelWillStartIntroEvent();
    // Get instance field reference: private System.Action levelDidStartEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_levelDidStartEvent();
    // Get instance field reference: private System.Action levelFailedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_levelFailedEvent();
    // Get instance field reference: private System.Action levelFinishedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_levelFinishedEvent();
    // Get instance field reference: private MissionLevelGameplayManager/GameState _gameState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager::GameState& dyn__gameState();
    // Get instance field reference: private MissionLevelGameplayManager/GameState _prePauseGameState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelGameplayManager::GameState& dyn__prePauseGameState();
    // public System.Void add_levelWillStartIntroEvent(System.Action value)
    // Offset: 0x1390FF0
    void add_levelWillStartIntroEvent(::System::Action* value);
    // public System.Void remove_levelWillStartIntroEvent(System.Action value)
    // Offset: 0x1391094
    void remove_levelWillStartIntroEvent(::System::Action* value);
    // public System.Void add_levelDidStartEvent(System.Action value)
    // Offset: 0x1391138
    void add_levelDidStartEvent(::System::Action* value);
    // public System.Void remove_levelDidStartEvent(System.Action value)
    // Offset: 0x13911DC
    void remove_levelDidStartEvent(::System::Action* value);
    // public System.Void add_levelFailedEvent(System.Action value)
    // Offset: 0x1391280
    void add_levelFailedEvent(::System::Action* value);
    // public System.Void remove_levelFailedEvent(System.Action value)
    // Offset: 0x1391324
    void remove_levelFailedEvent(::System::Action* value);
    // public System.Void add_levelFinishedEvent(System.Action value)
    // Offset: 0x13913C8
    void add_levelFinishedEvent(::System::Action* value);
    // public System.Void remove_levelFinishedEvent(System.Action value)
    // Offset: 0x139146C
    void remove_levelFinishedEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x1391998
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MissionLevelGameplayManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionLevelGameplayManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MissionLevelGameplayManager*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1391510
    void Awake();
    // private System.Collections.IEnumerator Start()
    // Offset: 0x1391518
    ::System::Collections::IEnumerator* Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1391588
    void OnDestroy();
    // private System.Void HandleGameEnergyDidReach0()
    // Offset: 0x1391840
    void HandleGameEnergyDidReach0();
    // private System.Void HandleMissionObjectiveCheckersManagerObjectiveDidFail()
    // Offset: 0x139188C
    void HandleMissionObjectiveCheckersManagerObjectiveDidFail();
    // private System.Void HandleSongDidFinish()
    // Offset: 0x13918BC
    void HandleSongDidFinish();
    // private System.Void HandlePauseControllerCanPause(System.Action`1<System.Boolean> canPause)
    // Offset: 0x13918EC
    void HandlePauseControllerCanPause(::System::Action_1<bool>* canPause);
    // private System.Void HandlePauseControllerDidPause()
    // Offset: 0x1391968
    void HandlePauseControllerDidPause();
    // private System.Void HandlePauseControllerDidResume()
    // Offset: 0x1391980
    void HandlePauseControllerDidResume();
  }; // MissionLevelGameplayManager
  #pragma pack(pop)
  static check_size<sizeof(MissionLevelGameplayManager), 108 + sizeof(::GlobalNamespace::MissionLevelGameplayManager::GameState)> __GlobalNamespace_MissionLevelGameplayManagerSizeCheck;
  static_assert(sizeof(MissionLevelGameplayManager) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MissionLevelGameplayManager::GameState, "", "MissionLevelGameplayManager/GameState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::add_levelWillStartIntroEvent
// Il2CppName: add_levelWillStartIntroEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::add_levelWillStartIntroEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "add_levelWillStartIntroEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::remove_levelWillStartIntroEvent
// Il2CppName: remove_levelWillStartIntroEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::remove_levelWillStartIntroEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "remove_levelWillStartIntroEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::add_levelDidStartEvent
// Il2CppName: add_levelDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::add_levelDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "add_levelDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::remove_levelDidStartEvent
// Il2CppName: remove_levelDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::remove_levelDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "remove_levelDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::add_levelFailedEvent
// Il2CppName: add_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::add_levelFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "add_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::remove_levelFailedEvent
// Il2CppName: remove_levelFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::remove_levelFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "remove_levelFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::add_levelFinishedEvent
// Il2CppName: add_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::add_levelFinishedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "add_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::remove_levelFinishedEvent
// Il2CppName: remove_levelFinishedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action*)>(&GlobalNamespace::MissionLevelGameplayManager::remove_levelFinishedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "remove_levelFinishedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::HandleGameEnergyDidReach0
// Il2CppName: HandleGameEnergyDidReach0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::HandleGameEnergyDidReach0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "HandleGameEnergyDidReach0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail
// Il2CppName: HandleMissionObjectiveCheckersManagerObjectiveDidFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::HandleMissionObjectiveCheckersManagerObjectiveDidFail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "HandleMissionObjectiveCheckersManagerObjectiveDidFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::HandleSongDidFinish
// Il2CppName: HandleSongDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::HandleSongDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "HandleSongDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerCanPause
// Il2CppName: HandlePauseControllerCanPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)(::System::Action_1<bool>*)>(&GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerCanPause)> {
  static const MethodInfo* get() {
    static auto* canPause = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "HandlePauseControllerCanPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{canPause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidPause
// Il2CppName: HandlePauseControllerDidPause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidPause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "HandlePauseControllerDidPause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidResume
// Il2CppName: HandlePauseControllerDidResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionLevelGameplayManager::*)()>(&GlobalNamespace::MissionLevelGameplayManager::HandlePauseControllerDidResume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionLevelGameplayManager*), "HandlePauseControllerDidResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
