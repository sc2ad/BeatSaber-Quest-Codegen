// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoolSO
  class BoolSO;
  // Forward declaring type: MainCamera
  class MainCamera;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FPSManager
  class FPSManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FPSManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FPSManager*, "", "FPSManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: FPSManager
  // [TokenAttribute] Offset: FFFFFFFF
  class FPSManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private BoolSO _enableFPSCounter
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BoolSO* enableFPSCounter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BoolSO*) == 0x8);
    // [NullAllowed] Offset: 0x112FC50
    // private UnityEngine.Canvas _fpsCounterCanvasPrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Canvas* fpsCounterCanvasPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::Canvas*) == 0x8);
    // [InjectAttribute] Offset: 0x112FC88
    // private readonly MainCamera _mainCamera
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MainCamera* mainCamera;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainCamera*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BoolSO _enableFPSCounter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& dyn__enableFPSCounter();
    // Get instance field reference: private UnityEngine.Canvas _fpsCounterCanvasPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::Canvas*& dyn__fpsCounterCanvasPrefab();
    // Get instance field reference: private readonly MainCamera _mainCamera
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainCamera*& dyn__mainCamera();
    // public System.Void .ctor()
    // Offset: 0x1407FB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FPSManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FPSManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FPSManager*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x1407EC8
    void Start();
  }; // FPSManager
  #pragma pack(pop)
  static check_size<sizeof(FPSManager), 40 + sizeof(::GlobalNamespace::MainCamera*)> __GlobalNamespace_FPSManagerSizeCheck;
  static_assert(sizeof(FPSManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FPSManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FPSManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSManager::*)()>(&GlobalNamespace::FPSManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
