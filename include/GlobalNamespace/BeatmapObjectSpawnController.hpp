// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnMovementData
  class BeatmapObjectSpawnMovementData;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: IBeatmapObjectSpawner
  class IBeatmapObjectSpawner;
  // Forward declaring type: IJumpOffsetYProvider
  class IJumpOffsetYProvider;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: SliderData
  class SliderData;
  // Forward declaring type: SpawnRotationBeatmapEventData
  class SpawnRotationBeatmapEventData;
  // Forward declaring type: NoteLineLayer
  struct NoteLineLayer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnController
  class BeatmapObjectSpawnController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapObjectSpawnController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapObjectSpawnController*, "", "BeatmapObjectSpawnController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectSpawnController
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectSpawnController : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IBeatmapObjectSpawnController*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapObjectSpawnController::InitData
    class InitData;
    public:
    // private BeatmapObjectSpawnMovementData _beatmapObjectSpawnMovementData
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectSpawnMovementData*) == 0x8);
    // [InjectAttribute] Offset: 0x111EB5C
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // [InjectAttribute] Offset: 0x111EB6C
    // private readonly IBeatmapObjectSpawner _beatmapObjectSpawner
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::IBeatmapObjectSpawner* beatmapObjectSpawner;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatmapObjectSpawner*) == 0x8);
    // [InjectAttribute] Offset: 0x111EB7C
    // private readonly IJumpOffsetYProvider _jumpOffsetYProvider
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::IJumpOffsetYProvider* jumpOffsetYProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IJumpOffsetYProvider*) == 0x8);
    // [InjectAttribute] Offset: 0x111EB8C
    // private readonly BeatmapObjectSpawnController/InitData _initData
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BeatmapObjectSpawnController::InitData* initData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectSpawnController::InitData*) == 0x8);
    // private System.Action didInitEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* didInitEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Boolean _disableSpawning
    // Size: 0x1
    // Offset: 0x48
    bool disableSpawning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x49
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: obstacleDataCallbackWrapper
    char __padding7[0x6] = {};
    // private BeatmapDataCallbackWrapper _obstacleDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::BeatmapDataCallbackWrapper* obstacleDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private BeatmapDataCallbackWrapper _noteDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::BeatmapDataCallbackWrapper* noteDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private BeatmapDataCallbackWrapper _sliderDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::BeatmapDataCallbackWrapper* sliderDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private BeatmapDataCallbackWrapper _spawnRotationCallbackWrapper
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::BeatmapDataCallbackWrapper* spawnRotationCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private System.Single _spawnRotation
    // Size: 0x4
    // Offset: 0x70
    float spawnRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapObjectSpawnController
    operator ::GlobalNamespace::IBeatmapObjectSpawnController() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawnController*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapObjectSpawnController
    inline ::GlobalNamespace::IBeatmapObjectSpawnController* i_IBeatmapObjectSpawnController() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawnController*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapObjectSpawnMovementData _beatmapObjectSpawnMovementData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectSpawnMovementData*& dyn__beatmapObjectSpawnMovementData();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly IBeatmapObjectSpawner _beatmapObjectSpawner
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapObjectSpawner*& dyn__beatmapObjectSpawner();
    // Get instance field reference: private readonly IJumpOffsetYProvider _jumpOffsetYProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IJumpOffsetYProvider*& dyn__jumpOffsetYProvider();
    // Get instance field reference: private readonly BeatmapObjectSpawnController/InitData _initData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectSpawnController::InitData*& dyn__initData();
    // Get instance field reference: private System.Action didInitEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didInitEvent();
    // Get instance field reference: private System.Boolean _disableSpawning
    [[deprecated("Use field access instead!")]] bool& dyn__disableSpawning();
    // Get instance field reference: private System.Boolean _isInitialized
    [[deprecated("Use field access instead!")]] bool& dyn__isInitialized();
    // Get instance field reference: private BeatmapDataCallbackWrapper _obstacleDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__obstacleDataCallbackWrapper();
    // Get instance field reference: private BeatmapDataCallbackWrapper _noteDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__noteDataCallbackWrapper();
    // Get instance field reference: private BeatmapDataCallbackWrapper _sliderDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__sliderDataCallbackWrapper();
    // Get instance field reference: private BeatmapDataCallbackWrapper _spawnRotationCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__spawnRotationCallbackWrapper();
    // Get instance field reference: private System.Single _spawnRotation
    [[deprecated("Use field access instead!")]] float& dyn__spawnRotation();
    // public System.Int32 get_noteLinesCount()
    // Offset: 0x13E6934
    int get_noteLinesCount();
    // public System.Single get_jumpOffsetY()
    // Offset: 0x13E6950
    float get_jumpOffsetY();
    // public System.Single get_moveDuration()
    // Offset: 0x13E6A18
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x13E6A34
    float get_jumpDuration();
    // public System.Single get_jumpDistance()
    // Offset: 0x13E6A50
    float get_jumpDistance();
    // public System.Single get_verticalLayerDistance()
    // Offset: 0x13E6A6C
    float get_verticalLayerDistance();
    // public System.Single get_noteJumpMovementSpeed()
    // Offset: 0x13E6A98
    float get_noteJumpMovementSpeed();
    // public System.Single get_noteLinesDistance()
    // Offset: 0x13E6AB4
    float get_noteLinesDistance();
    // public BeatmapObjectSpawnMovementData get_beatmapObjectSpawnMovementData()
    // Offset: 0x13E6AE0
    ::GlobalNamespace::BeatmapObjectSpawnMovementData* get_beatmapObjectSpawnMovementData();
    // public System.Boolean get_isInitialized()
    // Offset: 0x13E6AE8
    bool get_isInitialized();
    // public System.Void add_didInitEvent(System.Action value)
    // Offset: 0x13E6AF0
    void add_didInitEvent(::System::Action* value);
    // public System.Void remove_didInitEvent(System.Action value)
    // Offset: 0x13E6B94
    void remove_didInitEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x13E7CEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectSpawnController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapObjectSpawnController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectSpawnController*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13E6C38
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x13E717C
    void OnDestroy();
    // private System.Void HandleObstacleDataCallback(ObstacleData obstacleData)
    // Offset: 0x13E71F4
    void HandleObstacleDataCallback(::GlobalNamespace::ObstacleData* obstacleData);
    // private System.Void HandleNoteDataCallback(NoteData noteData)
    // Offset: 0x13E754C
    void HandleNoteDataCallback(::GlobalNamespace::NoteData* noteData);
    // private System.Void HandleSliderDataCallback(SliderData sliderNoteData)
    // Offset: 0x13E7850
    void HandleSliderDataCallback(::GlobalNamespace::SliderData* sliderNoteData);
    // private System.Void HandleSpawnRotationCallback(SpawnRotationBeatmapEventData beatmapEventData)
    // Offset: 0x13E7BF8
    void HandleSpawnRotationCallback(::GlobalNamespace::SpawnRotationBeatmapEventData* beatmapEventData);
    // public System.Void StopSpawning()
    // Offset: 0x13E7C14
    void StopSpawning();
    // public UnityEngine.Vector2 Get2DNoteOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x13E7C20
    ::UnityEngine::Vector2 Get2DNoteOffset(int noteLineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer);
    // public System.Single JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(NoteLineLayer lineLayer, System.Single distanceFromPlayer)
    // Offset: 0x13E7C58
    float JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(::GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer);
  }; // BeatmapObjectSpawnController
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectSpawnController), 112 + sizeof(float)> __GlobalNamespace_BeatmapObjectSpawnControllerSizeCheck;
  static_assert(sizeof(BeatmapObjectSpawnController) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesCount
// Il2CppName: get_noteLinesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_noteLinesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance
// Il2CppName: get_verticalLayerDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_verticalLayerDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData
// Il2CppName: get_beatmapObjectSpawnMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapObjectSpawnMovementData* (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(::System::Action*)>(&GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(::System::Action*)>(&GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleObstacleDataCallback
// Il2CppName: HandleObstacleDataCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(::GlobalNamespace::ObstacleData*)>(&GlobalNamespace::BeatmapObjectSpawnController::HandleObstacleDataCallback)> {
  static const MethodInfo* get() {
    static auto* obstacleData = &::il2cpp_utils::GetClassFromName("", "ObstacleData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleObstacleDataCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleNoteDataCallback
// Il2CppName: HandleNoteDataCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(::GlobalNamespace::NoteData*)>(&GlobalNamespace::BeatmapObjectSpawnController::HandleNoteDataCallback)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleNoteDataCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleSliderDataCallback
// Il2CppName: HandleSliderDataCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(::GlobalNamespace::SliderData*)>(&GlobalNamespace::BeatmapObjectSpawnController::HandleSliderDataCallback)> {
  static const MethodInfo* get() {
    static auto* sliderNoteData = &::il2cpp_utils::GetClassFromName("", "SliderData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleSliderDataCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderNoteData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleSpawnRotationCallback
// Il2CppName: HandleSpawnRotationCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(::GlobalNamespace::SpawnRotationBeatmapEventData*)>(&GlobalNamespace::BeatmapObjectSpawnController::HandleSpawnRotationCallback)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "SpawnRotationBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleSpawnRotationCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::StopSpawning
// Il2CppName: StopSpawning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::StopSpawning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "StopSpawning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::BeatmapObjectSpawnController::*)(int, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)(::GlobalNamespace::NoteLineLayer, float)>(&GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* distanceFromPlayer = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer, distanceFromPlayer});
  }
};
