// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBeatmapObjectSpawnController
#include "GlobalNamespace/IBeatmapObjectSpawnController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnMovementData
  class BeatmapObjectSpawnMovementData;
  // Forward declaring type: IBeatmapObjectCallbackController
  class IBeatmapObjectCallbackController;
  // Forward declaring type: IBeatmapObjectSpawner
  class IBeatmapObjectSpawner;
  // Forward declaring type: BeatmapObjectCallbackData
  class BeatmapObjectCallbackData;
  // Forward declaring type: BeatmapEventCallbackData
  class BeatmapEventCallbackData;
  // Forward declaring type: BeatmapCallbackItemDataList
  class BeatmapCallbackItemDataList;
  // Forward declaring type: SpawnRotationProcessor
  class SpawnRotationProcessor;
  // Forward declaring type: VariableBpmProcessor
  class VariableBpmProcessor;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: NoteLineLayer
  struct NoteLineLayer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectSpawnController
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectSpawnController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IBeatmapObjectSpawnController*/ {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectSpawnController::InitData
    class InitData;
    // private BeatmapObjectSpawnMovementData _beatmapObjectSpawnMovementData
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnMovementData*) == 0x8);
    // [InjectAttribute] Offset: 0xF044FC
    // private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IBeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xF0450C
    // private readonly IBeatmapObjectSpawner _beatmapObjectSpawner
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::IBeatmapObjectSpawner* beatmapObjectSpawner;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapObjectSpawner*) == 0x8);
    // [InjectAttribute] Offset: 0xF0451C
    // private readonly BeatmapObjectSpawnController/InitData _initData
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectSpawnController::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnController::InitData*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0452C
    // private System.Action didInitEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* didInitEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Single _jumpOffsetY
    // Size: 0x4
    // Offset: 0x40
    float jumpOffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _disableSpawning
    // Size: 0x1
    // Offset: 0x44
    bool disableSpawning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x45
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: beatmapObjectCallbackData
    char __padding7[0x2] = {};
    // private BeatmapObjectCallbackData _beatmapObjectCallbackData
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::BeatmapObjectCallbackData* beatmapObjectCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackData*) == 0x8);
    // private BeatmapEventCallbackData _beatmapEventCallbackData
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::BeatmapEventCallbackData* beatmapEventCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventCallbackData*) == 0x8);
    // private BeatmapCallbackItemDataList _beatmapCallbackItemDataList
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::BeatmapCallbackItemDataList* beatmapCallbackItemDataList;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCallbackItemDataList*) == 0x8);
    // private readonly SpawnRotationProcessor _spawnRotationProcessor
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::SpawnRotationProcessor* spawnRotationProcessor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SpawnRotationProcessor*) == 0x8);
    // private readonly VariableBpmProcessor _variableBpmProcessor
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::VariableBpmProcessor* variableBpmProcessor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VariableBpmProcessor*) == 0x8);
    // Creating value type constructor for type: BeatmapObjectSpawnController
    BeatmapObjectSpawnController(GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData_ = {}, GlobalNamespace::IBeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::IBeatmapObjectSpawner* beatmapObjectSpawner_ = {}, GlobalNamespace::BeatmapObjectSpawnController::InitData* initData_ = {}, System::Action* didInitEvent_ = {}, float jumpOffsetY_ = {}, bool disableSpawning_ = {}, bool isInitialized_ = {}, GlobalNamespace::BeatmapObjectCallbackData* beatmapObjectCallbackData_ = {}, GlobalNamespace::BeatmapEventCallbackData* beatmapEventCallbackData_ = {}, GlobalNamespace::BeatmapCallbackItemDataList* beatmapCallbackItemDataList_ = {}, GlobalNamespace::SpawnRotationProcessor* spawnRotationProcessor_ = {}, GlobalNamespace::VariableBpmProcessor* variableBpmProcessor_ = {}) noexcept : beatmapObjectSpawnMovementData{beatmapObjectSpawnMovementData_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, beatmapObjectSpawner{beatmapObjectSpawner_}, initData{initData_}, didInitEvent{didInitEvent_}, jumpOffsetY{jumpOffsetY_}, disableSpawning{disableSpawning_}, isInitialized{isInitialized_}, beatmapObjectCallbackData{beatmapObjectCallbackData_}, beatmapEventCallbackData{beatmapEventCallbackData_}, beatmapCallbackItemDataList{beatmapCallbackItemDataList_}, spawnRotationProcessor{spawnRotationProcessor_}, variableBpmProcessor{variableBpmProcessor_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBeatmapObjectSpawnController
    operator GlobalNamespace::IBeatmapObjectSpawnController() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBeatmapObjectSpawnController*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapObjectSpawnMovementData _beatmapObjectSpawnMovementData
    GlobalNamespace::BeatmapObjectSpawnMovementData*& dyn__beatmapObjectSpawnMovementData();
    // Get instance field reference: private readonly IBeatmapObjectCallbackController _beatmapObjectCallbackController
    GlobalNamespace::IBeatmapObjectCallbackController*& dyn__beatmapObjectCallbackController();
    // Get instance field reference: private readonly IBeatmapObjectSpawner _beatmapObjectSpawner
    GlobalNamespace::IBeatmapObjectSpawner*& dyn__beatmapObjectSpawner();
    // Get instance field reference: private readonly BeatmapObjectSpawnController/InitData _initData
    GlobalNamespace::BeatmapObjectSpawnController::InitData*& dyn__initData();
    // Get instance field reference: private System.Action didInitEvent
    System::Action*& dyn_didInitEvent();
    // Get instance field reference: private System.Single _jumpOffsetY
    float& dyn__jumpOffsetY();
    // Get instance field reference: private System.Boolean _disableSpawning
    bool& dyn__disableSpawning();
    // Get instance field reference: private System.Boolean _isInitialized
    bool& dyn__isInitialized();
    // Get instance field reference: private BeatmapObjectCallbackData _beatmapObjectCallbackData
    GlobalNamespace::BeatmapObjectCallbackData*& dyn__beatmapObjectCallbackData();
    // Get instance field reference: private BeatmapEventCallbackData _beatmapEventCallbackData
    GlobalNamespace::BeatmapEventCallbackData*& dyn__beatmapEventCallbackData();
    // Get instance field reference: private BeatmapCallbackItemDataList _beatmapCallbackItemDataList
    GlobalNamespace::BeatmapCallbackItemDataList*& dyn__beatmapCallbackItemDataList();
    // Get instance field reference: private readonly SpawnRotationProcessor _spawnRotationProcessor
    GlobalNamespace::SpawnRotationProcessor*& dyn__spawnRotationProcessor();
    // Get instance field reference: private readonly VariableBpmProcessor _variableBpmProcessor
    GlobalNamespace::VariableBpmProcessor*& dyn__variableBpmProcessor();
    // public System.Single get_jumpOffsetY()
    // Offset: 0x12A3CCC
    float get_jumpOffsetY();
    // public System.Void set_jumpOffsetY(System.Single value)
    // Offset: 0x12A3CD4
    void set_jumpOffsetY(float value);
    // public System.Single get_currentBpm()
    // Offset: 0x12A3CDC
    float get_currentBpm();
    // public System.Single get_moveDuration()
    // Offset: 0x12A3CF8
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x12A3D14
    float get_jumpDuration();
    // public System.Single get_jumpDistance()
    // Offset: 0x12A3D30
    float get_jumpDistance();
    // public System.Single get_verticalLayerDistance()
    // Offset: 0x12A3D4C
    float get_verticalLayerDistance();
    // public System.Single get_noteJumpMovementSpeed()
    // Offset: 0x12A3D78
    float get_noteJumpMovementSpeed();
    // public System.Single get_noteLinesDistance()
    // Offset: 0x12A3D94
    float get_noteLinesDistance();
    // public BeatmapObjectSpawnMovementData get_beatmapObjectSpawnMovementData()
    // Offset: 0x12A3DB0
    GlobalNamespace::BeatmapObjectSpawnMovementData* get_beatmapObjectSpawnMovementData();
    // public System.Boolean get_isInitialized()
    // Offset: 0x12A3DB8
    bool get_isInitialized();
    // public System.Void add_didInitEvent(System.Action value)
    // Offset: 0x12A3DC0
    void add_didInitEvent(System::Action* value);
    // public System.Void remove_didInitEvent(System.Action value)
    // Offset: 0x12A3E64
    void remove_didInitEvent(System::Action* value);
    // protected System.Void Start()
    // Offset: 0x12A3F08
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x12A452C
    void OnDestroy();
    // private System.Void SpawnObstacle(ObstacleData obstacleData)
    // Offset: 0x12A4710
    void SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData);
    // private System.Void SpawnBasicNote(NoteData noteData, System.Single cutDirectionAngleOffset)
    // Offset: 0x12A4A10
    void SpawnBasicNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset);
    // private System.Void SpawnBombNote(NoteData noteData)
    // Offset: 0x12A4D50
    void SpawnBombNote(GlobalNamespace::NoteData* noteData);
    // private System.Void ProcessEarlyBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x12A4E98
    void ProcessEarlyBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void EarlyEventsWereProcessed()
    // Offset: 0x12A4EDC
    void EarlyEventsWereProcessed();
    // private System.Void ProcessLateBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x12A514C
    void ProcessLateBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void HandleBeatmapObjectCallback(BeatmapObjectData beatmapObjectData)
    // Offset: 0x12A5168
    void HandleBeatmapObjectCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // private System.Void HandleBeatmapEventCallback(BeatmapEventData beatmapEventData)
    // Offset: 0x12A5184
    void HandleBeatmapEventCallback(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void HandleCallbacksForThisFrameWereProcessed()
    // Offset: 0x12A51D8
    void HandleCallbacksForThisFrameWereProcessed();
    // public System.Void StopSpawning()
    // Offset: 0x12A51F4
    void StopSpawning();
    // public UnityEngine.Vector2 Get2DNoteOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x12A5200
    UnityEngine::Vector2 Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer);
    // public System.Single JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(NoteLineLayer lineLayer, System.Single distanceFromPlayer)
    // Offset: 0x12A528C
    float JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer);
    // public System.Void .ctor()
    // Offset: 0x12A5320
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectSpawnController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectSpawnController*, creationType>()));
    }
  }; // BeatmapObjectSpawnController
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectSpawnController), 104 + sizeof(GlobalNamespace::VariableBpmProcessor*)> __GlobalNamespace_BeatmapObjectSpawnControllerSizeCheck;
  static_assert(sizeof(BeatmapObjectSpawnController) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectSpawnController*, "", "BeatmapObjectSpawnController");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_jumpOffsetY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::set_jumpOffsetY
// Il2CppName: set_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(float)>(&GlobalNamespace::BeatmapObjectSpawnController::set_jumpOffsetY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "set_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_currentBpm
// Il2CppName: get_currentBpm
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_currentBpm)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_currentBpm", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_moveDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_jumpDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance
// Il2CppName: get_verticalLayerDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_verticalLayerDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_verticalLayerDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_noteJumpMovementSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_noteLinesDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData
// Il2CppName: get_beatmapObjectSpawnMovementData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectSpawnMovementData* (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_beatmapObjectSpawnMovementData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_beatmapObjectSpawnMovementData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized
// Il2CppName: get_isInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::get_isInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "get_isInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(System::Action*)>(&GlobalNamespace::BeatmapObjectSpawnController::add_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(System::Action*)>(&GlobalNamespace::BeatmapObjectSpawnController::remove_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::SpawnObstacle
// Il2CppName: SpawnObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::ObstacleData*)>(&GlobalNamespace::BeatmapObjectSpawnController::SpawnObstacle)> {
  static const MethodInfo* get() {
    static auto* obstacleData = &::il2cpp_utils::GetClassFromName("", "ObstacleData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "SpawnObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::SpawnBasicNote
// Il2CppName: SpawnBasicNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::NoteData*, float)>(&GlobalNamespace::BeatmapObjectSpawnController::SpawnBasicNote)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* cutDirectionAngleOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "SpawnBasicNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, cutDirectionAngleOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::SpawnBombNote
// Il2CppName: SpawnBombNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::NoteData*)>(&GlobalNamespace::BeatmapObjectSpawnController::SpawnBombNote)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "SpawnBombNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData
// Il2CppName: ProcessEarlyBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapObjectSpawnController::ProcessEarlyBeatmapEventData)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "ProcessEarlyBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::EarlyEventsWereProcessed
// Il2CppName: EarlyEventsWereProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::EarlyEventsWereProcessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "EarlyEventsWereProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::ProcessLateBeatmapEventData
// Il2CppName: ProcessLateBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapObjectSpawnController::ProcessLateBeatmapEventData)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "ProcessLateBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapObjectCallback
// Il2CppName: HandleBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapObjectCallback)> {
  static const MethodInfo* get() {
    static auto* beatmapObjectData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapObjectData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapEventCallback
// Il2CppName: HandleBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapObjectSpawnController::HandleBeatmapEventCallback)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed
// Il2CppName: HandleCallbacksForThisFrameWereProcessed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::HandleCallbacksForThisFrameWereProcessed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "HandleCallbacksForThisFrameWereProcessed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::StopSpawning
// Il2CppName: StopSpawning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnController::*)()>(&GlobalNamespace::BeatmapObjectSpawnController::StopSpawning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "StopSpawning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Vector2 (GlobalNamespace::BeatmapObjectSpawnController::*)(int, GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnController::Get2DNoteOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnController::*)(GlobalNamespace::NoteLineLayer, float)>(&GlobalNamespace::BeatmapObjectSpawnController::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* distanceFromPlayer = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnController*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer, distanceFromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
