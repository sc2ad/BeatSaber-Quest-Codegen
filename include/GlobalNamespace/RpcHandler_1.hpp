// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: MultiplayerSessionManager/MessageType
#include "GlobalNamespace/MultiplayerSessionManager_MessageType.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: <>c__DisplayClass13_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass14_0`2 because it is already included!
  // Skipping declaration: <>c__DisplayClass15_0`3 because it is already included!
  // Skipping declaration: <>c__DisplayClass16_0`4 because it is already included!
  // Skipping declaration: <>c__DisplayClass17_0`5 because it is already included!
  // Skipping declaration: <>c__DisplayClass18_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass19_0`2 because it is already included!
  // Skipping declaration: <>c__DisplayClass20_0`3 because it is already included!
  // Skipping declaration: <>c__DisplayClass21_0`4 because it is already included!
  // Skipping declaration: <>c__DisplayClass22_0`5 because it is already included!
  // Skipping declaration: <>c__DisplayClass23_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass23_1`1 because it is already included!
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: RemoteProcedureCall
  class RemoteProcedureCall;
  // Forward declaring type: RemoteProcedureCall`1<T0>
  template<typename T0>
  class RemoteProcedureCall_1;
  // Forward declaring type: RemoteProcedureCall`2<T0, T1>
  template<typename T0, typename T1>
  class RemoteProcedureCall_2;
  // Forward declaring type: RemoteProcedureCall`3<T0, T1, T2>
  template<typename T0, typename T1, typename T2>
  class RemoteProcedureCall_3;
  // Forward declaring type: RemoteProcedureCall`4<T0, T1, T2, T3>
  template<typename T0, typename T1, typename T2, typename T3>
  class RemoteProcedureCall_4;
  // Forward declaring type: IRemoteProcedureCall
  class IRemoteProcedureCall;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IConvertible because it is already included!
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`5<T1, T2, T3, T4, T5>
  template<typename T1, typename T2, typename T3, typename T4, typename T5>
  class Action_5;
  // Forward declaring type: Action`6<T1, T2, T3, T4, T5, T6>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
  class Action_6;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: RpcHandler`1
  // [TokenAttribute] Offset: FFFFFFFF
  template<typename TType>
  class RpcHandler_1 : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass13_0_1<TType, T>
    template<typename T>
    class $$c__DisplayClass13_0_1;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass14_0_2<TType, T, T0>
    template<typename T, typename T0>
    class $$c__DisplayClass14_0_2;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass15_0_3<TType, T, T0, T1>
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass15_0_3;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass16_0_4<TType, T, T0, T1, T2>
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass16_0_4;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass17_0_5<TType, T, T0, T1, T2, T3>
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass17_0_5;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass18_0_1<TType, T>
    template<typename T>
    class $$c__DisplayClass18_0_1;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass19_0_2<TType, T, T0>
    template<typename T, typename T0>
    class $$c__DisplayClass19_0_2;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass20_0_3<TType, T, T0, T1>
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass20_0_3;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass21_0_4<TType, T, T0, T1, T2>
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass21_0_4;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass22_0_5<TType, T, T0, T1, T2, T3>
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass22_0_5;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_0_1<TType, T>
    template<typename T>
    class $$c__DisplayClass23_0_1;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1<TType, T>
    template<typename T>
    class $$c__DisplayClass23_1_1;
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass13_0`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED92F0
    template<typename T>
    class $$c__DisplayClass13_0_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass13_0`1";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`1<System.String> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_1<::Il2CppString*>* callback;
      // Field size check
      static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass13_0_1
      $$c__DisplayClass13_0_1(System::Action_1<::Il2CppString*>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_1<::Il2CppString*>*
      constexpr operator System::Action_1<::Il2CppString*>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`1<System.String> callback
      System::Action_1<::Il2CppString*>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass13_0_1::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_1<::Il2CppString*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass13_0_1::<RegisterCallback>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass13_0_1<T>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass13_0_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass13_0_1<T>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass13_0`1
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass13_0`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass14_0`2
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9300
    template<typename T, typename T0>
    class $$c__DisplayClass14_0_2 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass14_0`2";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`2<System.String,T0> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_2<::Il2CppString*, T0>* callback;
      // Field size check
      static_assert(sizeof(System::Action_2<::Il2CppString*, T0>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass14_0_2
      $$c__DisplayClass14_0_2(System::Action_2<::Il2CppString*, T0>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_2<::Il2CppString*, T0>*
      constexpr operator System::Action_2<::Il2CppString*, T0>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`2<System.String,T0> callback
      System::Action_2<::Il2CppString*, T0>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass14_0_2::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_2<::Il2CppString*, T0>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass14_0_2::<RegisterCallback>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass14_0_2<T, T0>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass14_0_2::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass14_0_2<T, T0>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass14_0`2
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass14_0`2 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass15_0`3
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9310
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass15_0_3 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass15_0`3";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`3<System.String,T0,T1> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_3<::Il2CppString*, T0, T1>* callback;
      // Field size check
      static_assert(sizeof(System::Action_3<::Il2CppString*, T0, T1>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass15_0_3
      $$c__DisplayClass15_0_3(System::Action_3<::Il2CppString*, T0, T1>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_3<::Il2CppString*, T0, T1>*
      constexpr operator System::Action_3<::Il2CppString*, T0, T1>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`3<System.String,T0,T1> callback
      System::Action_3<::Il2CppString*, T0, T1>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass15_0_3::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_3<::Il2CppString*, T0, T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass15_0_3::<RegisterCallback>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass15_0_3<T, T0, T1>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass15_0_3::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass15_0_3<T, T0, T1>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass15_0`3
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass15_0`3 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass16_0`4
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9320
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass16_0_4 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass16_0`4";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`4<System.String,T0,T1,T2> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_4<::Il2CppString*, T0, T1, T2>* callback;
      // Field size check
      static_assert(sizeof(System::Action_4<::Il2CppString*, T0, T1, T2>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass16_0_4
      $$c__DisplayClass16_0_4(System::Action_4<::Il2CppString*, T0, T1, T2>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_4<::Il2CppString*, T0, T1, T2>*
      constexpr operator System::Action_4<::Il2CppString*, T0, T1, T2>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`4<System.String,T0,T1,T2> callback
      System::Action_4<::Il2CppString*, T0, T1, T2>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass16_0_4::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_4<::Il2CppString*, T0, T1, T2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass16_0_4::<RegisterCallback>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass16_0_4<T, T0, T1, T2>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass16_0_4::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass16_0_4<T, T0, T1, T2>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass16_0`4
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass16_0`4 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass17_0`5
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9330
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass17_0_5 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass17_0`5";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`5<System.String,T0,T1,T2,T3> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_5<::Il2CppString*, T0, T1, T2, T3>* callback;
      // Field size check
      static_assert(sizeof(System::Action_5<::Il2CppString*, T0, T1, T2, T3>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass17_0_5
      $$c__DisplayClass17_0_5(System::Action_5<::Il2CppString*, T0, T1, T2, T3>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_5<::Il2CppString*, T0, T1, T2, T3>*
      constexpr operator System::Action_5<::Il2CppString*, T0, T1, T2, T3>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`5<System.String,T0,T1,T2,T3> callback
      System::Action_5<::Il2CppString*, T0, T1, T2, T3>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass17_0_5::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_5<::Il2CppString*, T0, T1, T2, T3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass17_0_5::<RegisterCallback>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass17_0_5<T, T0, T1, T2, T3>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass17_0_5::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass17_0_5<T, T0, T1, T2, T3>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass17_0`5
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass17_0`5 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass18_0`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9340
    template<typename T>
    class $$c__DisplayClass18_0_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass18_0`1";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`2<System.String,System.Single> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_2<::Il2CppString*, float>* callback;
      // Field size check
      static_assert(sizeof(System::Action_2<::Il2CppString*, float>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass18_0_1
      $$c__DisplayClass18_0_1(System::Action_2<::Il2CppString*, float>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_2<::Il2CppString*, float>*
      constexpr operator System::Action_2<::Il2CppString*, float>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`2<System.String,System.Single> callback
      System::Action_2<::Il2CppString*, float>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass18_0_1::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_2<::Il2CppString*, float>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass18_0_1::<RegisterCallbackWithTime>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallbackWithTime>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass18_0_1<T>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass18_0_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass18_0_1<T>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass18_0`1
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass18_0`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass19_0`2
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9350
    template<typename T, typename T0>
    class $$c__DisplayClass19_0_2 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass19_0`2";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`3<System.String,System.Single,T0> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_3<::Il2CppString*, float, T0>* callback;
      // Field size check
      static_assert(sizeof(System::Action_3<::Il2CppString*, float, T0>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass19_0_2
      $$c__DisplayClass19_0_2(System::Action_3<::Il2CppString*, float, T0>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_3<::Il2CppString*, float, T0>*
      constexpr operator System::Action_3<::Il2CppString*, float, T0>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`3<System.String,System.Single,T0> callback
      System::Action_3<::Il2CppString*, float, T0>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass19_0_2::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_3<::Il2CppString*, float, T0>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass19_0_2::<RegisterCallbackWithTime>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallbackWithTime>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass19_0_2<T, T0>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass19_0_2::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass19_0_2<T, T0>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass19_0`2
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass19_0`2 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass20_0`3
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9360
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass20_0_3 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass20_0`3";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`4<System.String,System.Single,T0,T1> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_4<::Il2CppString*, float, T0, T1>* callback;
      // Field size check
      static_assert(sizeof(System::Action_4<::Il2CppString*, float, T0, T1>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass20_0_3
      $$c__DisplayClass20_0_3(System::Action_4<::Il2CppString*, float, T0, T1>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_4<::Il2CppString*, float, T0, T1>*
      constexpr operator System::Action_4<::Il2CppString*, float, T0, T1>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`4<System.String,System.Single,T0,T1> callback
      System::Action_4<::Il2CppString*, float, T0, T1>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass20_0_3::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_4<::Il2CppString*, float, T0, T1>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass20_0_3::<RegisterCallbackWithTime>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallbackWithTime>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass20_0_3<T, T0, T1>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass20_0_3::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass20_0_3<T, T0, T1>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass20_0`3
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass20_0`3 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass21_0`4
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9370
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass21_0_4 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass21_0`4";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`5<System.String,System.Single,T0,T1,T2> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_5<::Il2CppString*, float, T0, T1, T2>* callback;
      // Field size check
      static_assert(sizeof(System::Action_5<::Il2CppString*, float, T0, T1, T2>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass21_0_4
      $$c__DisplayClass21_0_4(System::Action_5<::Il2CppString*, float, T0, T1, T2>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_5<::Il2CppString*, float, T0, T1, T2>*
      constexpr operator System::Action_5<::Il2CppString*, float, T0, T1, T2>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`5<System.String,System.Single,T0,T1,T2> callback
      System::Action_5<::Il2CppString*, float, T0, T1, T2>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass21_0_4::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_5<::Il2CppString*, float, T0, T1, T2>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass21_0_4::<RegisterCallbackWithTime>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallbackWithTime>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass21_0_4<T, T0, T1, T2>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass21_0_4::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass21_0_4<T, T0, T1, T2>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass21_0`4
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass21_0`4 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass22_0`5
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9380
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass22_0_5 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass22_0`5";
      static constexpr bool IS_VALUE_TYPE = false;
      // public System.Action`6<System.String,System.Single,T0,T1,T2,T3> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>* callback;
      // Field size check
      static_assert(sizeof(System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass22_0_5
      $$c__DisplayClass22_0_5(System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>* callback_ = {}) noexcept : callback{callback_} {}
      // Creating conversion operator: operator System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>*
      constexpr operator System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>*() const noexcept {
        return callback;
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`6<System.String,System.Single,T0,T1,T2,T3> callback
      System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass22_0_5::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass22_0_5::<RegisterCallbackWithTime>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallbackWithTime>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(player), ::il2cpp_utils::ExtractType(rpc)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, player, rpc);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass22_0_5<T, T0, T1, T2, T3>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass22_0_5::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass22_0_5<T, T0, T1, T2, T3>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass22_0`5
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass22_0`5 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass23_0`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED9390
    template<typename T>
    class $$c__DisplayClass23_0_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass23_0`1";
      static constexpr bool IS_VALUE_TYPE = false;
      // public RpcHandler`1<TType> <>4__this
      // Size: 0x8
      // Offset: 0x0
      GlobalNamespace::RpcHandler_1<TType>* $$4__this;
      // Field size check
      static_assert(sizeof(GlobalNamespace::RpcHandler_1<TType>*) == 0x8);
      // public System.Action`2<IConnectedPlayer,T> callback
      // Size: 0x8
      // Offset: 0x0
      System::Action_2<GlobalNamespace::IConnectedPlayer*, T>* callback;
      // Field size check
      static_assert(sizeof(System::Action_2<GlobalNamespace::IConnectedPlayer*, T>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass23_0_1
      $$c__DisplayClass23_0_1(GlobalNamespace::RpcHandler_1<TType>* $$4__this_ = {}, System::Action_2<GlobalNamespace::IConnectedPlayer*, T>* callback_ = {}) noexcept : $$4__this{$$4__this_}, callback{callback_} {}
      // Autogenerated instance field getter
      // Get instance field: public RpcHandler`1<TType> <>4__this
      GlobalNamespace::RpcHandler_1<TType>*& dyn_$$4__this() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_0_1::dyn_$$4__this");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<>4__this"))->offset;
        return *reinterpret_cast<GlobalNamespace::RpcHandler_1<TType>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public System.Action`2<IConnectedPlayer,T> callback
      System::Action_2<GlobalNamespace::IConnectedPlayer*, T>*& dyn_callback() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_0_1::dyn_callback");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "callback"))->offset;
        return *reinterpret_cast<System::Action_2<GlobalNamespace::IConnectedPlayer*, T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__0(T rpc, IConnectedPlayer player)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(T rpc, GlobalNamespace::IConnectedPlayer* player) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_0_1::<RegisterCallback>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__0", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(rpc), ::il2cpp_utils::ExtractType(player)})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method, rpc, player);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_0_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass23_0`1
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass23_0`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass23_1`1
    // [TokenAttribute] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: ED93A0
    template<typename T>
    class $$c__DisplayClass23_1_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "<>c__DisplayClass23_1`1";
      static constexpr bool IS_VALUE_TYPE = false;
      // public IConnectedPlayer player
      // Size: 0x8
      // Offset: 0x0
      GlobalNamespace::IConnectedPlayer* player;
      // Field size check
      static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
      // public T rpc
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T rpc;
      // public RpcHandler`1/<>c__DisplayClass23_0`1<TType,T> CS$<>8__locals1
      // Size: 0x8
      // Offset: 0x0
      typename GlobalNamespace::RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>* CS$$$8__locals1;
      // Field size check
      static_assert(sizeof(typename GlobalNamespace::RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass23_1_1
      $$c__DisplayClass23_1_1(GlobalNamespace::IConnectedPlayer* player_ = {}, T rpc_ = {}, typename GlobalNamespace::RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>* CS$$$8__locals1_ = {}) noexcept : player{player_}, rpc{rpc_}, CS$$$8__locals1{CS$$$8__locals1_} {}
      // Autogenerated instance field getter
      // Get instance field: public IConnectedPlayer player
      GlobalNamespace::IConnectedPlayer*& dyn_player() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1::dyn_player");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "player"))->offset;
        return *reinterpret_cast<GlobalNamespace::IConnectedPlayer**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public T rpc
      T& dyn_rpc() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1::dyn_rpc");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "rpc"))->offset;
        return *reinterpret_cast<T*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // Autogenerated instance field getter
      // Get instance field: public RpcHandler`1/<>c__DisplayClass23_0`1<TType,T> CS$<>8__locals1
      typename GlobalNamespace::RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>*& dyn_CS$$$8__locals1() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1::dyn_CS$$$8__locals1");
        auto ___internal__instance = this;
        static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "CS$<>8__locals1"))->offset;
        return *reinterpret_cast<typename GlobalNamespace::RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
      }
      // System.Void <RegisterCallback>b__1()
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__1() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1::<RegisterCallback>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<RegisterCallback>b__1", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
        auto ___instance_arg = this;
        ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename RpcHandler_1<TType>::$$c__DisplayClass23_1_1<T>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass23_1_1<T>*, creationType>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass23_1`1
    // Could not write size check! Type: RpcHandler`1/<>c__DisplayClass23_1`1 is generic, or has no fields that are valid for size checks!
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x0
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // private readonly MultiplayerSessionManager/MessageType _messageType
    // Size: 0x1
    // Offset: 0x0
    GlobalNamespace::MultiplayerSessionManager_MessageType messageType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerSessionManager_MessageType) == 0x1);
    // private readonly NetworkPacketSerializer`2<TType,IConnectedPlayer> _rpcSerializer
    // Size: 0x8
    // Offset: 0x0
    GlobalNamespace::NetworkPacketSerializer_2<TType, GlobalNamespace::IConnectedPlayer*>* rpcSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<TType, GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // private readonly System.Boolean _delayCallTime
    // Size: 0x1
    // Offset: 0x0
    bool delayCallTime;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _destroyed
    // Size: 0x1
    // Offset: 0x0
    bool destroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: RpcHandler_1
    RpcHandler_1(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::MultiplayerSessionManager_MessageType messageType_ = {}, GlobalNamespace::NetworkPacketSerializer_2<TType, GlobalNamespace::IConnectedPlayer*>* rpcSerializer_ = {}, bool delayCallTime_ = {}, bool destroyed_ = {}) noexcept : multiplayerSessionManager{multiplayerSessionManager_}, messageType{messageType_}, rpcSerializer{rpcSerializer_}, delayCallTime{delayCallTime_}, destroyed{destroyed_} {}
    // Autogenerated static field getter
    // Get static field: static private System.Single kMaximumRpcTimeOffset
    static float _get_kMaximumRpcTimeOffset() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::_get_kMaximumRpcTimeOffset");
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RpcHandler_1<TType>*>::get(), "kMaximumRpcTimeOffset"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Single kMaximumRpcTimeOffset
    static void _set_kMaximumRpcTimeOffset(float value) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::_set_kMaximumRpcTimeOffset");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RpcHandler_1<TType>*>::get(), "kMaximumRpcTimeOffset", value));
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::dyn__multiplayerSessionManager");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_multiplayerSessionManager"))->offset;
      return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly MultiplayerSessionManager/MessageType _messageType
    GlobalNamespace::MultiplayerSessionManager_MessageType& dyn__messageType() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::dyn__messageType");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_messageType"))->offset;
      return *reinterpret_cast<GlobalNamespace::MultiplayerSessionManager_MessageType*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly NetworkPacketSerializer`2<TType,IConnectedPlayer> _rpcSerializer
    GlobalNamespace::NetworkPacketSerializer_2<TType, GlobalNamespace::IConnectedPlayer*>*& dyn__rpcSerializer() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::dyn__rpcSerializer");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_rpcSerializer"))->offset;
      return *reinterpret_cast<GlobalNamespace::NetworkPacketSerializer_2<TType, GlobalNamespace::IConnectedPlayer*>**>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly System.Boolean _delayCallTime
    bool& dyn__delayCallTime() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::dyn__delayCallTime");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_delayCallTime"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private System.Boolean _destroyed
    bool& dyn__destroyed() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::dyn__destroyed");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "_destroyed"))->offset;
      return *reinterpret_cast<bool*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager, MultiplayerSessionManager/MessageType messageType, System.Boolean delayCallTime)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RpcHandler_1<TType>* New_ctor(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::MultiplayerSessionManager_MessageType messageType, bool delayCallTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RpcHandler_1<TType>*, creationType>(multiplayerSessionManager, messageType, delayCallTime)));
    }
    // public System.Void Destroy()
    // Offset: 0xFFFFFFFF
    void Destroy() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::Destroy");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Destroy", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___internal__method);
    }
    // public System.Void EnqueueRpc()
    // Offset: 0xFFFFFFFF
    template<class T>
    void EnqueueRpc() {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::EnqueueRpc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueRpc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method);
    }
    // public System.Void EnqueueRpc(T0 value0)
    // Offset: 0xFFFFFFFF
    template<class T, class T0>
    void EnqueueRpc(T0 value0) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_1<T0>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::EnqueueRpc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueRpc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, value0);
    }
    // public System.Void EnqueueRpc(T0 value0, T1 value1)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1>
    void EnqueueRpc(T0 value0, T1 value1) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_2<T0, T1>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::EnqueueRpc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueRpc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0), ::il2cpp_utils::ExtractType(value1)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, value0, value1);
    }
    // public System.Void EnqueueRpc(T0 value0, T1 value1, T2 value2)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2>
    void EnqueueRpc(T0 value0, T1 value1, T2 value2) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_3<T0, T1, T2>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::EnqueueRpc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueRpc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0), ::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, value0, value1, value2);
    }
    // public System.Void EnqueueRpc(T0 value0, T1 value1, T2 value2, T3 value3)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2, class T3>
    void EnqueueRpc(T0 value0, T1 value1, T2 value2, T3 value3) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_4<T0, T1, T2, T3>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::EnqueueRpc");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "EnqueueRpc", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(value0), ::il2cpp_utils::ExtractType(value1), ::il2cpp_utils::ExtractType(value2), ::il2cpp_utils::ExtractType(value3)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, value0, value1, value2, value3);
    }
    // public System.Void RegisterCallback(TType type, System.Action`1<System.String> callback)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallback(TType type, System::Action_1<::Il2CppString*>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallback(TType type, System.Action`2<System.String,T0> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0>
    void RegisterCallback(TType type, System::Action_2<::Il2CppString*, T0>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_1<T0>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallback(TType type, System.Action`3<System.String,T0,T1> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1>
    void RegisterCallback(TType type, System::Action_3<::Il2CppString*, T0, T1>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_2<T0, T1>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallback(TType type, System.Action`4<System.String,T0,T1,T2> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2>
    void RegisterCallback(TType type, System::Action_4<::Il2CppString*, T0, T1, T2>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_3<T0, T1, T2>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallback(TType type, System.Action`5<System.String,T0,T1,T2,T3> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2, class T3>
    void RegisterCallback(TType type, System::Action_5<::Il2CppString*, T0, T1, T2, T3>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_4<T0, T1, T2, T3>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`2<System.String,System.Single> callback)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallbackWithTime(TType type, System::Action_2<::Il2CppString*, float>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallbackWithTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallbackWithTime", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`3<System.String,System.Single,T0> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0>
    void RegisterCallbackWithTime(TType type, System::Action_3<::Il2CppString*, float, T0>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_1<T0>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallbackWithTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallbackWithTime", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`4<System.String,System.Single,T0,T1> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1>
    void RegisterCallbackWithTime(TType type, System::Action_4<::Il2CppString*, float, T0, T1>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_2<T0, T1>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallbackWithTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallbackWithTime", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`5<System.String,System.Single,T0,T1,T2> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2>
    void RegisterCallbackWithTime(TType type, System::Action_5<::Il2CppString*, float, T0, T1, T2>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_3<T0, T1, T2>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallbackWithTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallbackWithTime", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`6<System.String,System.Single,T0,T1,T2,T3> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2, class T3>
    void RegisterCallbackWithTime(TType type, System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_4<T0, T1, T2, T3>*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallbackWithTime");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallbackWithTime", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()})));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
    // private System.Void RegisterCallback(TType type, System.Action`2<IConnectedPlayer,T> callback)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallback(TType type, System::Action_2<GlobalNamespace::IConnectedPlayer*, T>* callback) {
      static_assert(std::is_base_of_v<GlobalNamespace::IRemoteProcedureCall, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::RpcHandler_1::RegisterCallback");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "RegisterCallback", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(type), ::il2cpp_utils::ExtractType(callback)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, type, callback);
    }
  }; // RpcHandler`1
  // Could not write size check! Type: RpcHandler`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::RpcHandler_1, "", "RpcHandler`1");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
