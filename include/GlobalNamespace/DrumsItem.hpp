// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaTriggerColliderHandIndicator
  class GorillaTriggerColliderHandIndicator;
  // Forward declaring type: Drum
  class Drum;
  // Forward declaring type: VRRig
  class VRRig;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DrumsItem
  class DrumsItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DrumsItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DrumsItem*, "", "DrumsItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: DrumsItem
  // [TokenAttribute] Offset: FFFFFFFF
  class DrumsItem : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Collider[] collidersForThisDrum
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Collider*> collidersForThisDrum;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> collidersForThisDrumList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* collidersForThisDrumList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public UnityEngine.AudioSource[] drumsAS
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::AudioSource*> drumsAS;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
    // public System.Single maxDrumVolume
    // Size: 0x4
    // Offset: 0x30
    float maxDrumVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minDrumVolume
    // Size: 0x4
    // Offset: 0x34
    float minDrumVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxDrumVolumeVelocity
    // Size: 0x4
    // Offset: 0x38
    float maxDrumVolumeVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean rightHandIn
    // Size: 0x1
    // Offset: 0x3C
    bool rightHandIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean leftHandIn
    // Size: 0x1
    // Offset: 0x3D
    bool leftHandIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftHandIn and: volToPlay
    char __padding7[0x2] = {};
    // private System.Single volToPlay
    // Size: 0x4
    // Offset: 0x40
    float volToPlay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: volToPlay and: rightHandIndicator
    char __padding8[0x4] = {};
    // private GorillaTriggerColliderHandIndicator rightHandIndicator
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* rightHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator leftHandIndicator
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* leftHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private UnityEngine.RaycastHit[] collidersHit
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::RaycastHit> collidersHit;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private UnityEngine.Collider[] actualColliders
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Collider*> actualColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public UnityEngine.LayerMask drumsTouchable
    // Size: 0x4
    // Offset: 0x68
    ::UnityEngine::LayerMask drumsTouchable;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Single sphereRadius
    // Size: 0x4
    // Offset: 0x6C
    float sphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 spherecastSweep
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 spherecastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 collidersHitCount
    // Size: 0x4
    // Offset: 0x7C
    int collidersHitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.List`1<UnityEngine.RaycastHit> hitList
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>* hitList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*) == 0x8);
    // private Drum tempDrum
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::Drum* tempDrum;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Drum*) == 0x8);
    // private System.Boolean drumHit
    // Size: 0x1
    // Offset: 0x90
    bool drumHit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: drumHit and: nullHit
    char __padding19[0x3] = {};
    // private UnityEngine.RaycastHit nullHit
    // Size: 0x2C
    // Offset: 0x94
    ::UnityEngine::RaycastHit nullHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // public System.Int32 onlineOffset
    // Size: 0x4
    // Offset: 0xC0
    int onlineOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: onlineOffset and: myRig
    char __padding21[0x4] = {};
    // public VRRig myRig
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Collider[] collidersForThisDrum
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_collidersForThisDrum();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> collidersForThisDrumList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_collidersForThisDrumList();
    // Get instance field reference: public UnityEngine.AudioSource[] drumsAS
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_drumsAS();
    // Get instance field reference: public System.Single maxDrumVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxDrumVolume();
    // Get instance field reference: public System.Single minDrumVolume
    [[deprecated("Use field access instead!")]] float& dyn_minDrumVolume();
    // Get instance field reference: public System.Single maxDrumVolumeVelocity
    [[deprecated("Use field access instead!")]] float& dyn_maxDrumVolumeVelocity();
    // Get instance field reference: private System.Boolean rightHandIn
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandIn();
    // Get instance field reference: private System.Boolean leftHandIn
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandIn();
    // Get instance field reference: private System.Single volToPlay
    [[deprecated("Use field access instead!")]] float& dyn_volToPlay();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator rightHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_rightHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator leftHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_leftHandIndicator();
    // Get instance field reference: private UnityEngine.RaycastHit[] collidersHit
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_collidersHit();
    // Get instance field reference: private UnityEngine.Collider[] actualColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_actualColliders();
    // Get instance field reference: public UnityEngine.LayerMask drumsTouchable
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_drumsTouchable();
    // Get instance field reference: private System.Single sphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_sphereRadius();
    // Get instance field reference: private UnityEngine.Vector3 spherecastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spherecastSweep();
    // Get instance field reference: private System.Int32 collidersHitCount
    [[deprecated("Use field access instead!")]] int& dyn_collidersHitCount();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.RaycastHit> hitList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*& dyn_hitList();
    // Get instance field reference: private Drum tempDrum
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Drum*& dyn_tempDrum();
    // Get instance field reference: private System.Boolean drumHit
    [[deprecated("Use field access instead!")]] bool& dyn_drumHit();
    // Get instance field reference: private UnityEngine.RaycastHit nullHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_nullHit();
    // Get instance field reference: public System.Int32 onlineOffset
    [[deprecated("Use field access instead!")]] int& dyn_onlineOffset();
    // Get instance field reference: public VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // public System.Void .ctor()
    // Offset: 0xC6684C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DrumsItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DrumsItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DrumsItem*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xC65D60
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0xC65ECC
    void LateUpdate();
    // private System.Void CheckHandHit(ref System.Boolean handIn, ref GorillaTriggerColliderHandIndicator handIndicator, System.Boolean isLeftHand)
    // Offset: 0xC65F08
    void CheckHandHit(ByRef<bool> handIn, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*> handIndicator, bool isLeftHand);
    // private System.Int32 RayCastHitCompare(UnityEngine.RaycastHit a, UnityEngine.RaycastHit b)
    // Offset: 0xC667D4
    int RayCastHitCompare(::UnityEngine::RaycastHit a, ::UnityEngine::RaycastHit b);
    // public System.Void DrumHit(Drum tempDrumInner, System.Boolean isLeftHand, System.Single hitVelocity)
    // Offset: 0xC664AC
    void DrumHit(::GlobalNamespace::Drum* tempDrumInner, bool isLeftHand, float hitVelocity);
  }; // DrumsItem
  #pragma pack(pop)
  static check_size<sizeof(DrumsItem), 200 + sizeof(::GlobalNamespace::VRRig*)> __GlobalNamespace_DrumsItemSizeCheck;
  static_assert(sizeof(DrumsItem) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DrumsItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DrumsItem::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DrumsItem::*)()>(&GlobalNamespace::DrumsItem::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DrumsItem*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DrumsItem::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DrumsItem::*)()>(&GlobalNamespace::DrumsItem::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DrumsItem*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DrumsItem::CheckHandHit
// Il2CppName: CheckHandHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DrumsItem::*)(ByRef<bool>, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*>, bool)>(&GlobalNamespace::DrumsItem::CheckHandHit)> {
  static const MethodInfo* get() {
    static auto* handIn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* handIndicator = &::il2cpp_utils::GetClassFromName("", "GorillaTriggerColliderHandIndicator")->this_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DrumsItem*), "CheckHandHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handIn, handIndicator, isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DrumsItem::RayCastHitCompare
// Il2CppName: RayCastHitCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::DrumsItem::*)(::UnityEngine::RaycastHit, ::UnityEngine::RaycastHit)>(&GlobalNamespace::DrumsItem::RayCastHitCompare)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DrumsItem*), "RayCastHitCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DrumsItem::DrumHit
// Il2CppName: DrumHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DrumsItem::*)(::GlobalNamespace::Drum*, bool, float)>(&GlobalNamespace::DrumsItem::DrumHit)> {
  static const MethodInfo* get() {
    static auto* tempDrumInner = &::il2cpp_utils::GetClassFromName("", "Drum")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* hitVelocity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DrumsItem*), "DrumHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tempDrumInner, isLeftHand, hitVelocity});
  }
};
