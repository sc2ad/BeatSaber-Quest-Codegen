// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportAimHandler
#include "GlobalNamespace/TeleportAimHandler.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportAimHandlerParabolic
  class TeleportAimHandlerParabolic;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportAimHandlerParabolic);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportAimHandlerParabolic*, "", "TeleportAimHandlerParabolic");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: TeleportAimHandlerParabolic
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportAimHandlerParabolic : public ::GlobalNamespace::TeleportAimHandler {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x24
    char ___base_padding[0x3] = {};
    public:
    // [TooltipAttribute] Offset: 0x993CF4
    // public System.Single Range
    // Size: 0x4
    // Offset: 0x24
    float Range;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x993D2C
    // public System.Single MinimumElevation
    // Size: 0x4
    // Offset: 0x28
    float MinimumElevation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x993D64
    // public System.Single Gravity
    // Size: 0x4
    // Offset: 0x2C
    float Gravity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x993D9C
    // [RangeAttribute] Offset: 0x993D9C
    // public System.Single AimVelocity
    // Size: 0x4
    // Offset: 0x30
    float AimVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x993DF8
    // [RangeAttribute] Offset: 0x993DF8
    // public System.Single AimStep
    // Size: 0x4
    // Offset: 0x34
    float AimStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: public System.Single Range
    [[deprecated("Use field access instead!")]] float& dyn_Range();
    // Get instance field reference: public System.Single MinimumElevation
    [[deprecated("Use field access instead!")]] float& dyn_MinimumElevation();
    // Get instance field reference: public System.Single Gravity
    [[deprecated("Use field access instead!")]] float& dyn_Gravity();
    // Get instance field reference: public System.Single AimVelocity
    [[deprecated("Use field access instead!")]] float& dyn_AimVelocity();
    // Get instance field reference: public System.Single AimStep
    [[deprecated("Use field access instead!")]] float& dyn_AimStep();
    // public System.Void .ctor()
    // Offset: 0xCF456C
    // Implemented from: TeleportAimHandler
    // Base method: System.Void TeleportAimHandler::.ctor()
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportAimHandlerParabolic* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportAimHandlerParabolic::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportAimHandlerParabolic*, creationType>()));
    }
    // public override System.Void GetPoints(System.Collections.Generic.List`1<UnityEngine.Vector3> points)
    // Offset: 0xCF4320
    // Implemented from: TeleportAimHandler
    // Base method: System.Void TeleportAimHandler::GetPoints(System.Collections.Generic.List`1<UnityEngine.Vector3> points)
    void GetPoints(::System::Collections::Generic::List_1<::UnityEngine::Vector3>* points);
  }; // TeleportAimHandlerParabolic
  #pragma pack(pop)
  static check_size<sizeof(TeleportAimHandlerParabolic), 52 + sizeof(float)> __GlobalNamespace_TeleportAimHandlerParabolicSizeCheck;
  static_assert(sizeof(TeleportAimHandlerParabolic) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportAimHandlerParabolic::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportAimHandlerParabolic::GetPoints
// Il2CppName: GetPoints
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportAimHandlerParabolic::*)(::System::Collections::Generic::List_1<::UnityEngine::Vector3>*)>(&GlobalNamespace::TeleportAimHandlerParabolic::GetPoints)> {
  static const MethodInfo* get() {
    static auto* points = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportAimHandlerParabolic*), "GetPoints", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{points});
  }
};
