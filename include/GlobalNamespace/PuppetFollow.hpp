// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PuppetFollow
  class PuppetFollow;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PuppetFollow);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PuppetFollow*, "", "PuppetFollow");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: PuppetFollow
  // [TokenAttribute] Offset: FFFFFFFF
  class PuppetFollow : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform sourceTarget
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* sourceTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform sourceBase
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* sourceBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform puppetBase
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* puppetBase;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform sourceTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_sourceTarget();
    // Get instance field reference: public UnityEngine.Transform sourceBase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_sourceBase();
    // Get instance field reference: public UnityEngine.Transform puppetBase
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_puppetBase();
    // public System.Void .ctor()
    // Offset: 0xCC136C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PuppetFollow* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PuppetFollow::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PuppetFollow*, creationType>()));
    }
    // private System.Void FixedUpdate()
    // Offset: 0xCC1208
    void FixedUpdate();
  }; // PuppetFollow
  #pragma pack(pop)
  static check_size<sizeof(PuppetFollow), 40 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_PuppetFollowSizeCheck;
  static_assert(sizeof(PuppetFollow) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PuppetFollow::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PuppetFollow::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PuppetFollow::*)()>(&GlobalNamespace::PuppetFollow::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PuppetFollow*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
