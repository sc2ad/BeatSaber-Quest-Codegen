// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
// Including type: SelectLevelCategoryViewController/LevelCategory
#include "GlobalNamespace/SelectLevelCategoryViewController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Skipping declaration: SelectLevelCategoryViewController because it is already included!
  // Forward declaring type: AnnotatedBeatmapLevelCollectionsViewController
  class AnnotatedBeatmapLevelCollectionsViewController;
  // Forward declaring type: LevelSearchViewController
  class LevelSearchViewController;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: IAnnotatedBeatmapLevelCollection
  class IAnnotatedBeatmapLevelCollection;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: ViewController because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LevelFilteringNavigationController
  class LevelFilteringNavigationController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LevelFilteringNavigationController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LevelFilteringNavigationController*, "", "LevelFilteringNavigationController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x158
  #pragma pack(push, 1)
  // Autogenerated type: LevelFilteringNavigationController
  // [TokenAttribute] Offset: FFFFFFFF
  class LevelFilteringNavigationController : public ::HMUI::NavigationController {
    public:
    // Writing base type padding for base size: 0x94 to desired offset: 0x98
    char ___base_padding[0x4] = {};
    // Nested type: ::GlobalNamespace::LevelFilteringNavigationController::$$c__DisplayClass53_0
    class $$c__DisplayClass53_0;
    // Nested type: ::GlobalNamespace::LevelFilteringNavigationController::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::LevelFilteringNavigationController::$UpdateCustomSongs$d__54
    struct $UpdateCustomSongs$d__54;
    public:
    // private UnityEngine.GameObject _emptyFavoritesListInfoPrefab
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::GameObject* emptyFavoritesListInfoPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _emptyCustomSongListInfoPrefab
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::GameObject* emptyCustomSongListInfoPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [InjectAttribute] Offset: 0x10EAA24
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0x10EAA34
    // private readonly SelectLevelCategoryViewController _selectLevelCategoryViewController
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::SelectLevelCategoryViewController* selectLevelCategoryViewController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SelectLevelCategoryViewController*) == 0x8);
    // [InjectAttribute] Offset: 0x10EAA44
    // private readonly AnnotatedBeatmapLevelCollectionsViewController _annotatedBeatmapLevelCollectionsViewController
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::AnnotatedBeatmapLevelCollectionsViewController* annotatedBeatmapLevelCollectionsViewController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AnnotatedBeatmapLevelCollectionsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0x10EAA54
    // private readonly LevelSearchViewController _levelSearchViewController
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::LevelSearchViewController* levelSearchViewController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LevelSearchViewController*) == 0x8);
    // [InjectAttribute] Offset: 0x10EAA64
    // private readonly BeatmapLevelsModel _beatmapLevelsModel
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelsModel*) == 0x8);
    // private System.Action`4<LevelFilteringNavigationController,IAnnotatedBeatmapLevelCollection,UnityEngine.GameObject,BeatmapCharacteristicSO> didSelectAnnotatedBeatmapLevelCollectionEvent
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>* didSelectAnnotatedBeatmapLevelCollectionEvent;
    // Field size check
    static_assert(sizeof(::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>*) == 0x8);
    // private System.Action`1<LevelFilteringNavigationController> didStartLoadingEvent
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>* didStartLoadingEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*) == 0x8);
    // private System.Action`1<LevelFilteringNavigationController> didPressAllSongsEvent
    // Size: 0x8
    // Offset: 0xE0
    ::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>* didPressAllSongsEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*) == 0x8);
    // private System.Action didOpenBeatmapLevelCollectionsEvent
    // Size: 0x8
    // Offset: 0xE8
    ::System::Action* didOpenBeatmapLevelCollectionsEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action didCloseBeatmapLevelCollectionsEvent
    // Size: 0x8
    // Offset: 0xF0
    ::System::Action* didCloseBeatmapLevelCollectionsEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Size: 0x8
    // Offset: 0xF8
    ::System::Threading::CancellationTokenSource* cancellationTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private UnityEngine.GameObject _currentNoDataInfoPrefab
    // Size: 0x8
    // Offset: 0x100
    ::UnityEngine::GameObject* currentNoDataInfoPrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.String _levelPackIdToBeSelectedAfterPresent
    // Size: 0x8
    // Offset: 0x108
    ::StringW levelPackIdToBeSelectedAfterPresent;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _hidePacksIfOneOrNone
    // Size: 0x1
    // Offset: 0x110
    bool hidePacksIfOneOrNone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _enableCustomLevels
    // Size: 0x1
    // Offset: 0x111
    bool enableCustomLevels;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableCustomLevels and: songPackMask
    char __padding16[0x6] = {};
    // private SongPackMask _songPackMask
    // Size: 0x10
    // Offset: 0x118
    ::GlobalNamespace::SongPackMask songPackMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SongPackMask) == 0x10);
    // private SelectLevelCategoryViewController/LevelCategory[] _enabledLevelCategories
    // Size: 0x8
    // Offset: 0x128
    ::ArrayW<::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory> enabledLevelCategories;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>) == 0x8);
    // private IBeatmapLevelPack[] _ostBeatmapLevelPacks
    // Size: 0x8
    // Offset: 0x130
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> ostBeatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>) == 0x8);
    // private IBeatmapLevelPack[] _musicPacksBeatmapLevelPacks
    // Size: 0x8
    // Offset: 0x138
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> musicPacksBeatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>) == 0x8);
    // private IBeatmapLevelPack[] _customLevelPacks
    // Size: 0x8
    // Offset: 0x140
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> customLevelPacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>) == 0x8);
    // private IBeatmapLevelPack[] _allOfficialBeatmapLevelPacks
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> allOfficialBeatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>) == 0x8);
    // private IBeatmapLevelPack[] _allBeatmapLevelPacks
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*> allBeatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>) == 0x8);
    public:
    // Get instance field reference: private UnityEngine.GameObject _emptyFavoritesListInfoPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__emptyFavoritesListInfoPrefab();
    // Get instance field reference: private UnityEngine.GameObject _emptyCustomSongListInfoPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__emptyCustomSongListInfoPrefab();
    // Get instance field reference: private readonly PlayerDataModel _playerDataModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& dyn__playerDataModel();
    // Get instance field reference: private readonly SelectLevelCategoryViewController _selectLevelCategoryViewController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SelectLevelCategoryViewController*& dyn__selectLevelCategoryViewController();
    // Get instance field reference: private readonly AnnotatedBeatmapLevelCollectionsViewController _annotatedBeatmapLevelCollectionsViewController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AnnotatedBeatmapLevelCollectionsViewController*& dyn__annotatedBeatmapLevelCollectionsViewController();
    // Get instance field reference: private readonly LevelSearchViewController _levelSearchViewController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelSearchViewController*& dyn__levelSearchViewController();
    // Get instance field reference: private readonly BeatmapLevelsModel _beatmapLevelsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelsModel*& dyn__beatmapLevelsModel();
    // Get instance field reference: private System.Action`4<LevelFilteringNavigationController,IAnnotatedBeatmapLevelCollection,UnityEngine.GameObject,BeatmapCharacteristicSO> didSelectAnnotatedBeatmapLevelCollectionEvent
    [[deprecated("Use field access instead!")]] ::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>*& dyn_didSelectAnnotatedBeatmapLevelCollectionEvent();
    // Get instance field reference: private System.Action`1<LevelFilteringNavigationController> didStartLoadingEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*& dyn_didStartLoadingEvent();
    // Get instance field reference: private System.Action`1<LevelFilteringNavigationController> didPressAllSongsEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*& dyn_didPressAllSongsEvent();
    // Get instance field reference: private System.Action didOpenBeatmapLevelCollectionsEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didOpenBeatmapLevelCollectionsEvent();
    // Get instance field reference: private System.Action didCloseBeatmapLevelCollectionsEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didCloseBeatmapLevelCollectionsEvent();
    // Get instance field reference: private System.Threading.CancellationTokenSource _cancellationTokenSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__cancellationTokenSource();
    // Get instance field reference: private UnityEngine.GameObject _currentNoDataInfoPrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__currentNoDataInfoPrefab();
    // Get instance field reference: private System.String _levelPackIdToBeSelectedAfterPresent
    [[deprecated("Use field access instead!")]] ::StringW& dyn__levelPackIdToBeSelectedAfterPresent();
    // Get instance field reference: private System.Boolean _hidePacksIfOneOrNone
    [[deprecated("Use field access instead!")]] bool& dyn__hidePacksIfOneOrNone();
    // Get instance field reference: private System.Boolean _enableCustomLevels
    [[deprecated("Use field access instead!")]] bool& dyn__enableCustomLevels();
    // Get instance field reference: private SongPackMask _songPackMask
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPackMask& dyn__songPackMask();
    // Get instance field reference: private SelectLevelCategoryViewController/LevelCategory[] _enabledLevelCategories
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory>& dyn__enabledLevelCategories();
    // Get instance field reference: private IBeatmapLevelPack[] _ostBeatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& dyn__ostBeatmapLevelPacks();
    // Get instance field reference: private IBeatmapLevelPack[] _musicPacksBeatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& dyn__musicPacksBeatmapLevelPacks();
    // Get instance field reference: private IBeatmapLevelPack[] _customLevelPacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& dyn__customLevelPacks();
    // Get instance field reference: private IBeatmapLevelPack[] _allOfficialBeatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& dyn__allOfficialBeatmapLevelPacks();
    // Get instance field reference: private IBeatmapLevelPack[] _allBeatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>& dyn__allBeatmapLevelPacks();
    // public IBeatmapLevelPack get_selectedBeatmapLevelPack()
    // Offset: 0x13ACE94
    ::GlobalNamespace::IBeatmapLevelPack* get_selectedBeatmapLevelPack();
    // public SelectLevelCategoryViewController/LevelCategory get_selectedLevelCategory()
    // Offset: 0x13ACEF4
    ::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory get_selectedLevelCategory();
    // public System.Void add_didSelectAnnotatedBeatmapLevelCollectionEvent(System.Action`4<LevelFilteringNavigationController,IAnnotatedBeatmapLevelCollection,UnityEngine.GameObject,BeatmapCharacteristicSO> value)
    // Offset: 0x13AC82C
    void add_didSelectAnnotatedBeatmapLevelCollectionEvent(::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>* value);
    // public System.Void remove_didSelectAnnotatedBeatmapLevelCollectionEvent(System.Action`4<LevelFilteringNavigationController,IAnnotatedBeatmapLevelCollection,UnityEngine.GameObject,BeatmapCharacteristicSO> value)
    // Offset: 0x13AC8D0
    void remove_didSelectAnnotatedBeatmapLevelCollectionEvent(::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>* value);
    // public System.Void add_didStartLoadingEvent(System.Action`1<LevelFilteringNavigationController> value)
    // Offset: 0x13AC974
    void add_didStartLoadingEvent(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>* value);
    // public System.Void remove_didStartLoadingEvent(System.Action`1<LevelFilteringNavigationController> value)
    // Offset: 0x13ACA18
    void remove_didStartLoadingEvent(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>* value);
    // public System.Void add_didPressAllSongsEvent(System.Action`1<LevelFilteringNavigationController> value)
    // Offset: 0x13ACABC
    void add_didPressAllSongsEvent(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>* value);
    // public System.Void remove_didPressAllSongsEvent(System.Action`1<LevelFilteringNavigationController> value)
    // Offset: 0x13ACB60
    void remove_didPressAllSongsEvent(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>* value);
    // public System.Void add_didOpenBeatmapLevelCollectionsEvent(System.Action value)
    // Offset: 0x13ACC04
    void add_didOpenBeatmapLevelCollectionsEvent(::System::Action* value);
    // public System.Void remove_didOpenBeatmapLevelCollectionsEvent(System.Action value)
    // Offset: 0x13ACCA8
    void remove_didOpenBeatmapLevelCollectionsEvent(::System::Action* value);
    // public System.Void add_didCloseBeatmapLevelCollectionsEvent(System.Action value)
    // Offset: 0x13ACD4C
    void add_didCloseBeatmapLevelCollectionsEvent(::System::Action* value);
    // public System.Void remove_didCloseBeatmapLevelCollectionsEvent(System.Action value)
    // Offset: 0x13ACDF0
    void remove_didCloseBeatmapLevelCollectionsEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x13AE33C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelFilteringNavigationController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelFilteringNavigationController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelFilteringNavigationController*, creationType>()));
    }
    // public System.Void Setup(SongPackMask songPackMask, IBeatmapLevelPack levelPackToBeSelectedAfterPresent, SelectLevelCategoryViewController/LevelCategory startLevelCategory, System.Boolean hidePacksIfOneOrNone, System.Boolean enableCustomLevels)
    // Offset: 0x13ACF10
    void Setup(::GlobalNamespace::SongPackMask songPackMask, ::GlobalNamespace::IBeatmapLevelPack* levelPackToBeSelectedAfterPresent, ::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory startLevelCategory, bool hidePacksIfOneOrNone, bool enableCustomLevels);
    // private System.Void SetupBeatmapLevelPacks()
    // Offset: 0x13AD088
    void SetupBeatmapLevelPacks();
    // private System.Void LevelSearchViewControllerDidStartLoading(LevelSearchViewController obj)
    // Offset: 0x13AD844
    void LevelSearchViewControllerDidStartLoading(::GlobalNamespace::LevelSearchViewController* obj);
    // private System.Void LevelSearchViewControllerDidFilterBeatmapLevelCollection(IAnnotatedBeatmapLevelCollection annotatedBeatmapLevelCollection, BeatmapCharacteristicSO preferredBeatmapCharacteristic)
    // Offset: 0x13ADB8C
    void LevelSearchViewControllerDidFilterBeatmapLevelCollection(::GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection, ::GlobalNamespace::BeatmapCharacteristicSO* preferredBeatmapCharacteristic);
    // private System.Void SelectLevelCategoryViewControllerDidSelectLevelCategory(SelectLevelCategoryViewController viewController, SelectLevelCategoryViewController/LevelCategory levelCategory)
    // Offset: 0x13ADC10
    void SelectLevelCategoryViewControllerDidSelectLevelCategory(::GlobalNamespace::SelectLevelCategoryViewController* viewController, ::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory levelCategory);
    // private System.Void UpdateSecondChildControllerContent(SelectLevelCategoryViewController/LevelCategory levelCategory)
    // Offset: 0x13AD6A0
    void UpdateSecondChildControllerContent(::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory levelCategory);
    // private System.Void ShowPacksInSecondChildController(System.Collections.Generic.IReadOnlyList`1<IBeatmapLevelPack> beatmapLevelPacks)
    // Offset: 0x13ADC18
    void ShowPacksInSecondChildController(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IBeatmapLevelPack*>* beatmapLevelPacks);
    // private System.Void ReplaceSecondViewController(HMUI.ViewController viewController)
    // Offset: 0x13ADE50
    void ReplaceSecondViewController(::HMUI::ViewController* viewController);
    // private System.Void HandlePlayerDataFavoriteLevelsSetDidChange()
    // Offset: 0x13ADFC4
    void HandlePlayerDataFavoriteLevelsSetDidChange();
    // private System.Void HandleIncreaseNumberOfGameplays()
    // Offset: 0x13AE020
    void HandleIncreaseNumberOfGameplays();
    // private System.Void HandleAnnotatedBeatmapLevelCollectionsViewControllerDidOpenBeatmapLevelCollections()
    // Offset: 0x13AE06C
    void HandleAnnotatedBeatmapLevelCollectionsViewControllerDidOpenBeatmapLevelCollections();
    // private System.Void HandleAnnotatedBeatmapLevelCollectionsViewControllerDidCloseBeatmapLevelCollections()
    // Offset: 0x13AE080
    void HandleAnnotatedBeatmapLevelCollectionsViewControllerDidCloseBeatmapLevelCollections();
    // private System.Void HandleAnnotatedBeatmapLevelCollectionsViewControllerDidSelectAnnotatedBeatmapLevelCollection(IAnnotatedBeatmapLevelCollection annotatedBeatmapLevelCollection)
    // Offset: 0x13AE094
    void HandleAnnotatedBeatmapLevelCollectionsViewControllerDidSelectAnnotatedBeatmapLevelCollection(::GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection);
    // public System.Void SelectAnnotatedBeatmapLevelCollection(IBeatmapLevelPack levelPack)
    // Offset: 0x13AE114
    void SelectAnnotatedBeatmapLevelCollection(::GlobalNamespace::IBeatmapLevelPack* levelPack);
    // private System.Void UpdateCustomSongs()
    // Offset: 0x13ADF04
    void UpdateCustomSongs();
    // private System.Boolean <SetupBeatmapLevelPacks>b__39_0(IBeatmapLevelPack pack)
    // Offset: 0x13AE344
    bool $SetupBeatmapLevelPacks$b__39_0(::GlobalNamespace::IBeatmapLevelPack* pack);
    // private System.Boolean <SetupBeatmapLevelPacks>b__39_1(IBeatmapLevelPack pack)
    // Offset: 0x13AE424
    bool $SetupBeatmapLevelPacks$b__39_1(::GlobalNamespace::IBeatmapLevelPack* pack);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x13AD328
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x13AD8A8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
  }; // LevelFilteringNavigationController
  #pragma pack(pop)
  static check_size<sizeof(LevelFilteringNavigationController), 336 + sizeof(::ArrayW<::GlobalNamespace::IBeatmapLevelPack*>)> __GlobalNamespace_LevelFilteringNavigationControllerSizeCheck;
  static_assert(sizeof(LevelFilteringNavigationController) == 0x158);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::get_selectedBeatmapLevelPack
// Il2CppName: get_selectedBeatmapLevelPack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IBeatmapLevelPack* (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::get_selectedBeatmapLevelPack)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "get_selectedBeatmapLevelPack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::get_selectedLevelCategory
// Il2CppName: get_selectedLevelCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::get_selectedLevelCategory)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "get_selectedLevelCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::add_didSelectAnnotatedBeatmapLevelCollectionEvent
// Il2CppName: add_didSelectAnnotatedBeatmapLevelCollectionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>*)>(&GlobalNamespace::LevelFilteringNavigationController::add_didSelectAnnotatedBeatmapLevelCollectionEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LevelFilteringNavigationController"), ::il2cpp_utils::GetClassFromName("", "IAnnotatedBeatmapLevelCollection"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), ::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "add_didSelectAnnotatedBeatmapLevelCollectionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::remove_didSelectAnnotatedBeatmapLevelCollectionEvent
// Il2CppName: remove_didSelectAnnotatedBeatmapLevelCollectionEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action_4<::GlobalNamespace::LevelFilteringNavigationController*, ::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::UnityEngine::GameObject*, ::GlobalNamespace::BeatmapCharacteristicSO*>*)>(&GlobalNamespace::LevelFilteringNavigationController::remove_didSelectAnnotatedBeatmapLevelCollectionEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LevelFilteringNavigationController"), ::il2cpp_utils::GetClassFromName("", "IAnnotatedBeatmapLevelCollection"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), ::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "remove_didSelectAnnotatedBeatmapLevelCollectionEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::add_didStartLoadingEvent
// Il2CppName: add_didStartLoadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*)>(&GlobalNamespace::LevelFilteringNavigationController::add_didStartLoadingEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LevelFilteringNavigationController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "add_didStartLoadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::remove_didStartLoadingEvent
// Il2CppName: remove_didStartLoadingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*)>(&GlobalNamespace::LevelFilteringNavigationController::remove_didStartLoadingEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LevelFilteringNavigationController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "remove_didStartLoadingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::add_didPressAllSongsEvent
// Il2CppName: add_didPressAllSongsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*)>(&GlobalNamespace::LevelFilteringNavigationController::add_didPressAllSongsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LevelFilteringNavigationController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "add_didPressAllSongsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::remove_didPressAllSongsEvent
// Il2CppName: remove_didPressAllSongsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action_1<::GlobalNamespace::LevelFilteringNavigationController*>*)>(&GlobalNamespace::LevelFilteringNavigationController::remove_didPressAllSongsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LevelFilteringNavigationController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "remove_didPressAllSongsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::add_didOpenBeatmapLevelCollectionsEvent
// Il2CppName: add_didOpenBeatmapLevelCollectionsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action*)>(&GlobalNamespace::LevelFilteringNavigationController::add_didOpenBeatmapLevelCollectionsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "add_didOpenBeatmapLevelCollectionsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::remove_didOpenBeatmapLevelCollectionsEvent
// Il2CppName: remove_didOpenBeatmapLevelCollectionsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action*)>(&GlobalNamespace::LevelFilteringNavigationController::remove_didOpenBeatmapLevelCollectionsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "remove_didOpenBeatmapLevelCollectionsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::add_didCloseBeatmapLevelCollectionsEvent
// Il2CppName: add_didCloseBeatmapLevelCollectionsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action*)>(&GlobalNamespace::LevelFilteringNavigationController::add_didCloseBeatmapLevelCollectionsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "add_didCloseBeatmapLevelCollectionsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::remove_didCloseBeatmapLevelCollectionsEvent
// Il2CppName: remove_didCloseBeatmapLevelCollectionsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Action*)>(&GlobalNamespace::LevelFilteringNavigationController::remove_didCloseBeatmapLevelCollectionsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "remove_didCloseBeatmapLevelCollectionsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::SongPackMask, ::GlobalNamespace::IBeatmapLevelPack*, ::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory, bool, bool)>(&GlobalNamespace::LevelFilteringNavigationController::Setup)> {
  static const MethodInfo* get() {
    static auto* songPackMask = &::il2cpp_utils::GetClassFromName("", "SongPackMask")->byval_arg;
    static auto* levelPackToBeSelectedAfterPresent = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    static auto* startLevelCategory = &::il2cpp_utils::GetClassFromName("", "SelectLevelCategoryViewController/LevelCategory")->byval_arg;
    static auto* hidePacksIfOneOrNone = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enableCustomLevels = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{songPackMask, levelPackToBeSelectedAfterPresent, startLevelCategory, hidePacksIfOneOrNone, enableCustomLevels});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::SetupBeatmapLevelPacks
// Il2CppName: SetupBeatmapLevelPacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::SetupBeatmapLevelPacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "SetupBeatmapLevelPacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::LevelSearchViewControllerDidStartLoading
// Il2CppName: LevelSearchViewControllerDidStartLoading
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::LevelSearchViewController*)>(&GlobalNamespace::LevelFilteringNavigationController::LevelSearchViewControllerDidStartLoading)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("", "LevelSearchViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "LevelSearchViewControllerDidStartLoading", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::LevelSearchViewControllerDidFilterBeatmapLevelCollection
// Il2CppName: LevelSearchViewControllerDidFilterBeatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::IAnnotatedBeatmapLevelCollection*, ::GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::LevelFilteringNavigationController::LevelSearchViewControllerDidFilterBeatmapLevelCollection)> {
  static const MethodInfo* get() {
    static auto* annotatedBeatmapLevelCollection = &::il2cpp_utils::GetClassFromName("", "IAnnotatedBeatmapLevelCollection")->byval_arg;
    static auto* preferredBeatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "LevelSearchViewControllerDidFilterBeatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotatedBeatmapLevelCollection, preferredBeatmapCharacteristic});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::SelectLevelCategoryViewControllerDidSelectLevelCategory
// Il2CppName: SelectLevelCategoryViewControllerDidSelectLevelCategory
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::SelectLevelCategoryViewController*, ::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory)>(&GlobalNamespace::LevelFilteringNavigationController::SelectLevelCategoryViewControllerDidSelectLevelCategory)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("", "SelectLevelCategoryViewController")->byval_arg;
    static auto* levelCategory = &::il2cpp_utils::GetClassFromName("", "SelectLevelCategoryViewController/LevelCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "SelectLevelCategoryViewControllerDidSelectLevelCategory", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController, levelCategory});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::UpdateSecondChildControllerContent
// Il2CppName: UpdateSecondChildControllerContent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::SelectLevelCategoryViewController::LevelCategory)>(&GlobalNamespace::LevelFilteringNavigationController::UpdateSecondChildControllerContent)> {
  static const MethodInfo* get() {
    static auto* levelCategory = &::il2cpp_utils::GetClassFromName("", "SelectLevelCategoryViewController/LevelCategory")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "UpdateSecondChildControllerContent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelCategory});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::ShowPacksInSecondChildController
// Il2CppName: ShowPacksInSecondChildController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IBeatmapLevelPack*>*)>(&GlobalNamespace::LevelFilteringNavigationController::ShowPacksInSecondChildController)> {
  static const MethodInfo* get() {
    static auto* beatmapLevelPacks = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "ShowPacksInSecondChildController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevelPacks});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::ReplaceSecondViewController
// Il2CppName: ReplaceSecondViewController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::HMUI::ViewController*)>(&GlobalNamespace::LevelFilteringNavigationController::ReplaceSecondViewController)> {
  static const MethodInfo* get() {
    static auto* viewController = &::il2cpp_utils::GetClassFromName("HMUI", "ViewController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "ReplaceSecondViewController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{viewController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::HandlePlayerDataFavoriteLevelsSetDidChange
// Il2CppName: HandlePlayerDataFavoriteLevelsSetDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::HandlePlayerDataFavoriteLevelsSetDidChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "HandlePlayerDataFavoriteLevelsSetDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::HandleIncreaseNumberOfGameplays
// Il2CppName: HandleIncreaseNumberOfGameplays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::HandleIncreaseNumberOfGameplays)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "HandleIncreaseNumberOfGameplays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::HandleAnnotatedBeatmapLevelCollectionsViewControllerDidOpenBeatmapLevelCollections
// Il2CppName: HandleAnnotatedBeatmapLevelCollectionsViewControllerDidOpenBeatmapLevelCollections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::HandleAnnotatedBeatmapLevelCollectionsViewControllerDidOpenBeatmapLevelCollections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "HandleAnnotatedBeatmapLevelCollectionsViewControllerDidOpenBeatmapLevelCollections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::HandleAnnotatedBeatmapLevelCollectionsViewControllerDidCloseBeatmapLevelCollections
// Il2CppName: HandleAnnotatedBeatmapLevelCollectionsViewControllerDidCloseBeatmapLevelCollections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::HandleAnnotatedBeatmapLevelCollectionsViewControllerDidCloseBeatmapLevelCollections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "HandleAnnotatedBeatmapLevelCollectionsViewControllerDidCloseBeatmapLevelCollections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::HandleAnnotatedBeatmapLevelCollectionsViewControllerDidSelectAnnotatedBeatmapLevelCollection
// Il2CppName: HandleAnnotatedBeatmapLevelCollectionsViewControllerDidSelectAnnotatedBeatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::IAnnotatedBeatmapLevelCollection*)>(&GlobalNamespace::LevelFilteringNavigationController::HandleAnnotatedBeatmapLevelCollectionsViewControllerDidSelectAnnotatedBeatmapLevelCollection)> {
  static const MethodInfo* get() {
    static auto* annotatedBeatmapLevelCollection = &::il2cpp_utils::GetClassFromName("", "IAnnotatedBeatmapLevelCollection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "HandleAnnotatedBeatmapLevelCollectionsViewControllerDidSelectAnnotatedBeatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{annotatedBeatmapLevelCollection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::SelectAnnotatedBeatmapLevelCollection
// Il2CppName: SelectAnnotatedBeatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::IBeatmapLevelPack*)>(&GlobalNamespace::LevelFilteringNavigationController::SelectAnnotatedBeatmapLevelCollection)> {
  static const MethodInfo* get() {
    static auto* levelPack = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "SelectAnnotatedBeatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelPack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::UpdateCustomSongs
// Il2CppName: UpdateCustomSongs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)()>(&GlobalNamespace::LevelFilteringNavigationController::UpdateCustomSongs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "UpdateCustomSongs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::$SetupBeatmapLevelPacks$b__39_0
// Il2CppName: <SetupBeatmapLevelPacks>b__39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::IBeatmapLevelPack*)>(&GlobalNamespace::LevelFilteringNavigationController::$SetupBeatmapLevelPacks$b__39_0)> {
  static const MethodInfo* get() {
    static auto* pack = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "<SetupBeatmapLevelPacks>b__39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::$SetupBeatmapLevelPacks$b__39_1
// Il2CppName: <SetupBeatmapLevelPacks>b__39_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LevelFilteringNavigationController::*)(::GlobalNamespace::IBeatmapLevelPack*)>(&GlobalNamespace::LevelFilteringNavigationController::$SetupBeatmapLevelPacks$b__39_1)> {
  static const MethodInfo* get() {
    static auto* pack = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "<SetupBeatmapLevelPacks>b__39_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(bool, bool, bool)>(&GlobalNamespace::LevelFilteringNavigationController::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelFilteringNavigationController::DidDeactivate
// Il2CppName: DidDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelFilteringNavigationController::*)(bool, bool)>(&GlobalNamespace::LevelFilteringNavigationController::DidDeactivate)> {
  static const MethodInfo* get() {
    static auto* removedFromHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemDisabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelFilteringNavigationController*), "DidDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{removedFromHierarchy, screenSystemDisabling});
  }
};
