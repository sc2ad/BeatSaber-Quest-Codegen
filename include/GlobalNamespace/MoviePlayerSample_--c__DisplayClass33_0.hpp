// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MoviePlayerSample
#include "GlobalNamespace/MoviePlayerSample.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0*, "", "MoviePlayerSample/<>c__DisplayClass33_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MoviePlayerSample/<>c__DisplayClass33_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class MoviePlayerSample::$$c__DisplayClass33_0 : public ::Il2CppObject {
    public:
    public:
    // public System.String moviePath
    // Size: 0x8
    // Offset: 0x10
    ::StringW moviePath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String drmLicencesUrl
    // Size: 0x8
    // Offset: 0x18
    ::StringW drmLicencesUrl;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public MoviePlayerSample <>4__this
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MoviePlayerSample* $$4__this;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MoviePlayerSample*) == 0x8);
    public:
    // Get instance field reference: public System.String moviePath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_moviePath();
    // Get instance field reference: public System.String drmLicencesUrl
    [[deprecated("Use field access instead!")]] ::StringW& dyn_drmLicencesUrl();
    // Get instance field reference: public MoviePlayerSample <>4__this
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MoviePlayerSample*& dyn_$$4__this();
    // public System.Void .ctor()
    // Offset: 0x137B0D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MoviePlayerSample::$$c__DisplayClass33_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MoviePlayerSample::$$c__DisplayClass33_0*, creationType>()));
    }
    // System.Void <Play>b__0()
    // Offset: 0x137B0D8
    void $Play$b__0();
  }; // MoviePlayerSample/<>c__DisplayClass33_0
  #pragma pack(pop)
  static check_size<sizeof(MoviePlayerSample::$$c__DisplayClass33_0), 32 + sizeof(::GlobalNamespace::MoviePlayerSample*)> __GlobalNamespace_MoviePlayerSample_$$c__DisplayClass33_0SizeCheck;
  static_assert(sizeof(MoviePlayerSample::$$c__DisplayClass33_0) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0::$Play$b__0
// Il2CppName: <Play>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0::*)()>(&GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0::$Play$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MoviePlayerSample::$$c__DisplayClass33_0*), "<Play>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
