// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Light
  class Light;
  // Forward declaring type: Terrain
  class Terrain;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ftLightmapsStorage
  class ftLightmapsStorage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ftLightmapsStorage);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ftLightmapsStorage*, "", "ftLightmapsStorage");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xCA
  #pragma pack(push, 1)
  // Autogenerated type: ftLightmapsStorage
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class ftLightmapsStorage : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> maps
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* maps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> masks
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* masks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> dirMaps
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* dirMaps;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps0
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* rnmMaps0;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps1
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* rnmMaps1;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps2
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>* rnmMaps2;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> mapsMode
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::List_1<int>* mapsMode;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Renderer> bakedRenderers
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* bakedRenderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> bakedIDs
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::List_1<int>* bakedIDs;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector4> bakedScaleOffset
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* bakedScaleOffset;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Mesh> bakedVertexColorMesh
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>* bakedVertexColorMesh;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Renderer> nonBakedRenderers
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>* nonBakedRenderers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Light> bakedLights
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::UnityEngine::Light*>* bakedLights;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Light*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> bakedLightChannels
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::List_1<int>* bakedLightChannels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Terrain> bakedRenderersTerrain
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::UnityEngine::Terrain*>* bakedRenderersTerrain;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Terrain*>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> bakedIDsTerrain
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::List_1<int>* bakedIDsTerrain;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Collections.Generic.List`1<UnityEngine.Vector4> bakedScaleOffsetTerrain
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::List_1<::UnityEngine::Vector4>* bakedScaleOffsetTerrain;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Vector4>*) == 0x8);
    // public System.Collections.Generic.List`1<System.String> assetList
    // Size: 0x8
    // Offset: 0xA0
    ::System::Collections::Generic::List_1<::StringW>* assetList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Collections.Generic.List`1<System.Int32> uvOverlapAssetList
    // Size: 0x8
    // Offset: 0xA8
    ::System::Collections::Generic::List_1<int>* uvOverlapAssetList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Int32[] idremap
    // Size: 0x8
    // Offset: 0xB0
    ::ArrayW<int> idremap;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Boolean usesRealtimeGI
    // Size: 0x1
    // Offset: 0xB8
    bool usesRealtimeGI;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usesRealtimeGI and: emptyDirectionTex
    char __padding20[0x7] = {};
    // public UnityEngine.Texture2D emptyDirectionTex
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::Texture2D* emptyDirectionTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Boolean anyVolumes
    // Size: 0x1
    // Offset: 0xC8
    bool anyVolumes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean compressedVolumes
    // Size: 0x1
    // Offset: 0xC9
    bool compressedVolumes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> maps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_maps();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> masks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_masks();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> dirMaps
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_dirMaps();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps0
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_rnmMaps0();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps1
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_rnmMaps1();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Texture2D> rnmMaps2
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Texture2D*>*& dyn_rnmMaps2();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> mapsMode
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_mapsMode();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Renderer> bakedRenderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& dyn_bakedRenderers();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> bakedIDs
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_bakedIDs();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector4> bakedScaleOffset
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn_bakedScaleOffset();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Mesh> bakedVertexColorMesh
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Mesh*>*& dyn_bakedVertexColorMesh();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Renderer> nonBakedRenderers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Renderer*>*& dyn_nonBakedRenderers();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Light> bakedLights
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Light*>*& dyn_bakedLights();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> bakedLightChannels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_bakedLightChannels();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Terrain> bakedRenderersTerrain
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Terrain*>*& dyn_bakedRenderersTerrain();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> bakedIDsTerrain
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_bakedIDsTerrain();
    // Get instance field reference: public System.Collections.Generic.List`1<UnityEngine.Vector4> bakedScaleOffsetTerrain
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Vector4>*& dyn_bakedScaleOffsetTerrain();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> assetList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_assetList();
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> uvOverlapAssetList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_uvOverlapAssetList();
    // Get instance field reference: public System.Int32[] idremap
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_idremap();
    // Get instance field reference: public System.Boolean usesRealtimeGI
    [[deprecated("Use field access instead!")]] bool& dyn_usesRealtimeGI();
    // Get instance field reference: public UnityEngine.Texture2D emptyDirectionTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_emptyDirectionTex();
    // Get instance field reference: public System.Boolean anyVolumes
    [[deprecated("Use field access instead!")]] bool& dyn_anyVolumes();
    // Get instance field reference: public System.Boolean compressedVolumes
    [[deprecated("Use field access instead!")]] bool& dyn_compressedVolumes();
    // public System.Void .ctor()
    // Offset: 0x1BD8B4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ftLightmapsStorage* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ftLightmapsStorage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ftLightmapsStorage*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x1BD89D8
    void Awake();
    // private System.Void Start()
    // Offset: 0x1BD8A68
    void Start();
    // private System.Void OnDestroy()
    // Offset: 0x1BD8AE8
    void OnDestroy();
  }; // ftLightmapsStorage
  #pragma pack(pop)
  static check_size<sizeof(ftLightmapsStorage), 201 + sizeof(bool)> __GlobalNamespace_ftLightmapsStorageSizeCheck;
  static_assert(sizeof(ftLightmapsStorage) == 0xCA);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ftLightmapsStorage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ftLightmapsStorage::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ftLightmapsStorage::*)()>(&GlobalNamespace::ftLightmapsStorage::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmapsStorage*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmapsStorage::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ftLightmapsStorage::*)()>(&GlobalNamespace::ftLightmapsStorage::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmapsStorage*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftLightmapsStorage::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ftLightmapsStorage::*)()>(&GlobalNamespace::ftLightmapsStorage::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftLightmapsStorage*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
