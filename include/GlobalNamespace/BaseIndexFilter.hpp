// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IIndexFilter
#include "GlobalNamespace/IIndexFilter.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BaseIndexFilter
  class BaseIndexFilter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BaseIndexFilter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BaseIndexFilter*, "", "BaseIndexFilter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: BaseIndexFilter
  // [TokenAttribute] Offset: FFFFFFFF
  class BaseIndexFilter : public ::Il2CppObject/*, public ::GlobalNamespace::IIndexFilter*/ {
    public:
    // Nested type: ::GlobalNamespace::BaseIndexFilter::$GetEnumerator$d__8
    class $GetEnumerator$d__8;
    public:
    // private readonly System.Int32 _start
    // Size: 0x4
    // Offset: 0x10
    int start;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _step
    // Size: 0x4
    // Offset: 0x14
    int step;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _count
    // Size: 0x4
    // Offset: 0x18
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _currentValue
    // Size: 0x4
    // Offset: 0x1C
    int currentValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IIndexFilter
    operator ::GlobalNamespace::IIndexFilter() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IIndexFilter*>(this);
    }
    // Creating interface conversion operator: i_IIndexFilter
    inline ::GlobalNamespace::IIndexFilter* i_IIndexFilter() noexcept {
      return reinterpret_cast<::GlobalNamespace::IIndexFilter*>(this);
    }
    // Get instance field reference: private readonly System.Int32 _start
    [[deprecated("Use field access instead!")]] int& dyn__start();
    // Get instance field reference: private readonly System.Int32 _step
    [[deprecated("Use field access instead!")]] int& dyn__step();
    // Get instance field reference: private readonly System.Int32 _count
    [[deprecated("Use field access instead!")]] int& dyn__count();
    // Get instance field reference: private System.Int32 _currentValue
    [[deprecated("Use field access instead!")]] int& dyn__currentValue();
    // public System.Int32 get_Count()
    // Offset: 0x138BBD4
    int get_Count();
    // public System.Void .ctor(System.Int32 start, System.Int32 step, System.Int32 count)
    // Offset: 0x138BBDC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseIndexFilter* New_ctor(int start, int step, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BaseIndexFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseIndexFilter*, creationType>(start, step, count)));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x138BC1C
    ::System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Collections.Generic.IEnumerator`1<System.Int32> GetEnumerator()
    // Offset: 0x138BC20
    ::System::Collections::Generic::IEnumerator_1<int>* GetEnumerator();
  }; // BaseIndexFilter
  #pragma pack(pop)
  static check_size<sizeof(BaseIndexFilter), 28 + sizeof(int)> __GlobalNamespace_BaseIndexFilterSizeCheck;
  static_assert(sizeof(BaseIndexFilter) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BaseIndexFilter::get_Count
// Il2CppName: get_Count
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BaseIndexFilter::*)()>(&GlobalNamespace::BaseIndexFilter::get_Count)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseIndexFilter*), "get_Count", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseIndexFilter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BaseIndexFilter::System_Collections_IEnumerable_GetEnumerator
// Il2CppName: System.Collections.IEnumerable.GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BaseIndexFilter::*)()>(&GlobalNamespace::BaseIndexFilter::System_Collections_IEnumerable_GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseIndexFilter*), "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BaseIndexFilter::GetEnumerator
// Il2CppName: GetEnumerator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerator_1<int>* (GlobalNamespace::BaseIndexFilter::*)()>(&GlobalNamespace::BaseIndexFilter::GetEnumerator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BaseIndexFilter*), "GetEnumerator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
