// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MainCamera
  class MainCamera;
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EnvironmentShaderWarmup
  class EnvironmentShaderWarmup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EnvironmentShaderWarmup);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EnvironmentShaderWarmup*, "", "EnvironmentShaderWarmup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: EnvironmentShaderWarmup
  // [TokenAttribute] Offset: FFFFFFFF
  class EnvironmentShaderWarmup : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::EnvironmentShaderWarmup::$Start$d__6
    class $Start$d__6;
    public:
    // private UnityEngine.Material[] _materials
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Material*> materials;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // [InjectAttribute] Offset: 0x10D7578
    // private readonly MainCamera _mainCamera
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MainCamera* mainCamera;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainCamera*) == 0x8);
    // [InjectAttribute] Offset: 0x10D7588
    // private readonly GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameScenesManager*) == 0x8);
    // private UnityEngine.Transform _parentingTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* parentingTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kNumberOfColumns
    static constexpr const int kNumberOfColumns = 4;
    // Get static field: static private System.Int32 kNumberOfColumns
    static int _get_kNumberOfColumns();
    // Set static field: static private System.Int32 kNumberOfColumns
    static void _set_kNumberOfColumns(int value);
    // static field const value: static private System.Int32 kNumberOfRows
    static constexpr const int kNumberOfRows = 4;
    // Get static field: static private System.Int32 kNumberOfRows
    static int _get_kNumberOfRows();
    // Set static field: static private System.Int32 kNumberOfRows
    static void _set_kNumberOfRows(int value);
    // Get instance field reference: private UnityEngine.Material[] _materials
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn__materials();
    // Get instance field reference: private readonly MainCamera _mainCamera
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainCamera*& dyn__mainCamera();
    // Get instance field reference: private readonly GameScenesManager _gameScenesManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& dyn__gameScenesManager();
    // Get instance field reference: private UnityEngine.Transform _parentingTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__parentingTransform();
    // public System.Void .ctor()
    // Offset: 0x13755D0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnvironmentShaderWarmup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnvironmentShaderWarmup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnvironmentShaderWarmup*, creationType>()));
    }
    // protected System.Collections.IEnumerator Start()
    // Offset: 0x1375534
    ::System::Collections::IEnumerator* Start();
  }; // EnvironmentShaderWarmup
  #pragma pack(pop)
  static check_size<sizeof(EnvironmentShaderWarmup), 48 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_EnvironmentShaderWarmupSizeCheck;
  static_assert(sizeof(EnvironmentShaderWarmup) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentShaderWarmup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::EnvironmentShaderWarmup::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::EnvironmentShaderWarmup::*)()>(&GlobalNamespace::EnvironmentShaderWarmup::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnvironmentShaderWarmup*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
