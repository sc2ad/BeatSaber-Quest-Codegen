// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CapsuleCollider
  class CapsuleCollider;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaFriendCollider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaFriendCollider*, "", "GorillaFriendCollider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GorillaFriendCollider
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaFriendCollider : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaFriendCollider::$UpdatePlayersInSphere$d__5
    class $UpdatePlayersInSphere$d__5;
    public:
    // public System.Collections.Generic.List`1<System.String> playerIDsCurrentlyTouching
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::StringW>* playerIDsCurrentlyTouching;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public UnityEngine.CapsuleCollider thisCapsule
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::CapsuleCollider* thisCapsule;
    // Field size check
    static_assert(sizeof(::UnityEngine::CapsuleCollider*) == 0x8);
    // public System.String[] myAllowedMapsToJoin
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::StringW> myAllowedMapsToJoin;
    // Field size check
    static_assert(sizeof(::ArrayW<::StringW>) == 0x8);
    // public UnityEngine.Collider[] overlapColliders
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Collider*> overlapColliders;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> playerIDsCurrentlyTouching
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_playerIDsCurrentlyTouching();
    // Get instance field reference: public UnityEngine.CapsuleCollider thisCapsule
    [[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& dyn_thisCapsule();
    // Get instance field reference: public System.String[] myAllowedMapsToJoin
    [[deprecated("Use field access instead!")]] ::ArrayW<::StringW>& dyn_myAllowedMapsToJoin();
    // Get instance field reference: public UnityEngine.Collider[] overlapColliders
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_overlapColliders();
    // public System.Void .ctor()
    // Offset: 0xC6A454
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaFriendCollider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFriendCollider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaFriendCollider*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xC6A34C
    void Awake();
    // private System.Collections.IEnumerator UpdatePlayersInSphere()
    // Offset: 0xC6A3B8
    ::System::Collections::IEnumerator* UpdatePlayersInSphere();
  }; // GorillaFriendCollider
  #pragma pack(pop)
  static check_size<sizeof(GorillaFriendCollider), 48 + sizeof(::ArrayW<::UnityEngine::Collider*>)> __GlobalNamespace_GorillaFriendColliderSizeCheck;
  static_assert(sizeof(GorillaFriendCollider) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaFriendCollider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaFriendCollider::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFriendCollider::*)()>(&GlobalNamespace::GorillaFriendCollider::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFriendCollider*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFriendCollider::UpdatePlayersInSphere
// Il2CppName: UpdatePlayersInSphere
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaFriendCollider::*)()>(&GlobalNamespace::GorillaFriendCollider::UpdatePlayersInSphere)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFriendCollider*), "UpdatePlayersInSphere", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
