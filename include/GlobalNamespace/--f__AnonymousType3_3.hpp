// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: <>f__AnonymousType3`3<$Hours$j__TPar, $Name$j__TPar, $ForRoom$j__TPar>
  template<typename $Hours$j__TPar, typename $Name$j__TPar, typename $ForRoom$j__TPar>
  class $$f__AnonymousType3_3;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::$$f__AnonymousType3_3, "", "<>f__AnonymousType3`3");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: <>f__AnonymousType3`3
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename $Hours$j__TPar, typename $Name$j__TPar, typename $ForRoom$j__TPar>
  class $$f__AnonymousType3_3 : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x9936C8
    // private readonly <Hours>j__TPar <Hours>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $Hours$j__TPar $Hours$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x9936DC
    // private readonly <Name>j__TPar <Name>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $Name$j__TPar $Name$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x9936F0
    // private readonly <ForRoom>j__TPar <ForRoom>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $ForRoom$j__TPar $ForRoom$i__Field;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly <Hours>j__TPar <Hours>i__Field
    [[deprecated("Use field access instead!")]] $Hours$j__TPar& dyn_$Hours$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::dyn_$Hours$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Hours>i__Field"))->offset;
      return *reinterpret_cast<$Hours$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <Name>j__TPar <Name>i__Field
    [[deprecated("Use field access instead!")]] $Name$j__TPar& dyn_$Name$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::dyn_$Name$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Name>i__Field"))->offset;
      return *reinterpret_cast<$Name$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <ForRoom>j__TPar <ForRoom>i__Field
    [[deprecated("Use field access instead!")]] $ForRoom$j__TPar& dyn_$ForRoom$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::dyn_$ForRoom$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<ForRoom>i__Field"))->offset;
      return *reinterpret_cast<$ForRoom$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public <Hours>j__TPar get_Hours()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $Hours$j__TPar get_Hours() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::get_Hours");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Hours", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$Hours$j__TPar, false>(this, ___internal__method);
    }
    // public <Name>j__TPar get_Name()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $Name$j__TPar get_Name() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::get_Name");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Name", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$Name$j__TPar, false>(this, ___internal__method);
    }
    // public <ForRoom>j__TPar get_ForRoom()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $ForRoom$j__TPar get_ForRoom() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::get_ForRoom");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_ForRoom", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$ForRoom$j__TPar, false>(this, ___internal__method);
    }
    // public System.Void .ctor(<Hours>j__TPar Hours, <Name>j__TPar Name, <ForRoom>j__TPar ForRoom)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static $$f__AnonymousType3_3<$Hours$j__TPar, $Name$j__TPar, $ForRoom$j__TPar>* New_ctor($Hours$j__TPar Hours, $Name$j__TPar Name, $ForRoom$j__TPar ForRoom) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<$$f__AnonymousType3_3<$Hours$j__TPar, $Name$j__TPar, $ForRoom$j__TPar>*, creationType>(Hours, Name, ForRoom)));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType3_3::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // <>f__AnonymousType3`3
  // Could not write size check! Type: <>f__AnonymousType3`3 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
