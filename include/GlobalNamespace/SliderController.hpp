// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SliderControllerBase
#include "GlobalNamespace/SliderControllerBase.hpp"
// Including type: IBeatmapObjectController
#include "GlobalNamespace/IBeatmapObjectController.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SliderData
  class SliderData;
  // Forward declaring type: SliderIntensityEffect
  class SliderIntensityEffect;
  // Forward declaring type: SliderMeshController
  class SliderMeshController;
  // Forward declaring type: SliderMovement
  class SliderMovement;
  // Forward declaring type: IBeatmapObjectSpawnController
  class IBeatmapObjectSpawnController;
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: LazyCopyHashSet`1<T>
  template<typename T>
  class LazyCopyHashSet_1;
  // Forward declaring type: ISliderDidFinishJumpEvent
  class ISliderDidFinishJumpEvent;
  // Forward declaring type: ISliderDidStartDissolvingEvent
  class ISliderDidStartDissolvingEvent;
  // Forward declaring type: ISliderDidDissolveEvent
  class ISliderDidDissolveEvent;
  // Forward declaring type: ISliderHeadDidMovePastCutMarkEvent
  class ISliderHeadDidMovePastCutMarkEvent;
  // Forward declaring type: ISliderTailDidMovePastCutMarkEvent
  class ISliderTailDidMovePastCutMarkEvent;
  // Forward declaring type: Saber
  class Saber;
  // Forward declaring type: FixedUpdateVector3SmoothValue
  class FixedUpdateVector3SmoothValue;
  // Forward declaring type: ILazyCopyHashSet`1<T>
  template<typename T>
  class ILazyCopyHashSet_1;
  // Skipping declaration: LengthType because it is already included!
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderController
  class SliderController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderController*, "", "SliderController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: SliderController
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderController : public ::GlobalNamespace::SliderControllerBase/*, public ::GlobalNamespace::IBeatmapObjectController*/ {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x30
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::SliderController::LengthType
    struct LengthType;
    // Nested type: ::GlobalNamespace::SliderController::Pool
    class Pool;
    // Nested type: ::GlobalNamespace::SliderController::$DissolveCoroutine$d__70
    class $DissolveCoroutine$d__70;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SliderController/LengthType
    // [TokenAttribute] Offset: FFFFFFFF
    struct LengthType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: LengthType
      constexpr LengthType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SliderController/LengthType Short
      static constexpr const int Short = 0;
      // Get static field: static public SliderController/LengthType Short
      static ::GlobalNamespace::SliderController::LengthType _get_Short();
      // Set static field: static public SliderController/LengthType Short
      static void _set_Short(::GlobalNamespace::SliderController::LengthType value);
      // static field const value: static public SliderController/LengthType Medium
      static constexpr const int Medium = 1;
      // Get static field: static public SliderController/LengthType Medium
      static ::GlobalNamespace::SliderController::LengthType _get_Medium();
      // Set static field: static public SliderController/LengthType Medium
      static void _set_Medium(::GlobalNamespace::SliderController::LengthType value);
      // static field const value: static public SliderController/LengthType Long
      static constexpr const int Long = 2;
      // Get static field: static public SliderController/LengthType Long
      static ::GlobalNamespace::SliderController::LengthType _get_Long();
      // Set static field: static public SliderController/LengthType Long
      static void _set_Long(::GlobalNamespace::SliderController::LengthType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SliderController/LengthType
    #pragma pack(pop)
    static check_size<sizeof(SliderController::LengthType), 0 + sizeof(int)> __GlobalNamespace_SliderController_LengthTypeSizeCheck;
    static_assert(sizeof(SliderController::LengthType) == 0x4);
    public:
    // protected SliderIntensityEffect _sliderIntensityEffect
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::SliderIntensityEffect* sliderIntensityEffect;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderIntensityEffect*) == 0x8);
    // private SliderMeshController _sliderMeshController
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::SliderMeshController* sliderMeshController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderMeshController*) == 0x8);
    // private SliderMovement _sliderMovement
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SliderMovement* sliderMovement;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderMovement*) == 0x8);
    // [SpaceAttribute] Offset: 0x111F940
    // private System.Single _closeInteractionSaberPosSmoothParam
    // Size: 0x4
    // Offset: 0x48
    float closeInteractionSaberPosSmoothParam;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: closeInteractionSaberPosSmoothParam and: beatmapObjectSpawnController
    char __padding3[0x4] = {};
    // [InjectAttribute] Offset: 0x111F978
    // private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::IBeatmapObjectSpawnController* beatmapObjectSpawnController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatmapObjectSpawnController*) == 0x8);
    // [InjectAttribute] Offset: 0x111F988
    // private readonly ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorManager*) == 0x8);
    // [InjectAttribute] Offset: 0x111F998
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0x111F9A8
    // private readonly SaberManager _saberManager
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::SaberManager* saberManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaberManager*) == 0x8);
    // private readonly LazyCopyHashSet`1<ISliderDidFinishJumpEvent> _sliderDidFinishMovement
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>* sliderDidFinishMovement;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<ISliderDidStartDissolvingEvent> _sliderDidStartDissolving
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>* sliderDidStartDissolving;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<ISliderDidDissolveEvent> _sliderDidDissolve
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>* sliderDidDissolve;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<ISliderHeadDidMovePastCutMarkEvent> _sliderHeadDidMovePastCutMark
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>* sliderHeadDidMovePastCutMark;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<ISliderTailDidMovePastCutMarkEvent> _sliderTailDidMovePastCutMark
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>* sliderTailDidMovePastCutMark;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>*) == 0x8);
    // private SliderController/LengthType _lengthType
    // Size: 0x4
    // Offset: 0x98
    ::GlobalNamespace::SliderController::LengthType lengthType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderController::LengthType) == 0x4);
    // Padding between fields: lengthType and: sliderData
    char __padding13[0x4] = {};
    // private SliderData _sliderData
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::SliderData* sliderData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SliderData*) == 0x8);
    // private Saber _saber
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::Saber* saber;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::Saber*) == 0x8);
    // private System.Single _headJumpOffsetY
    // Size: 0x4
    // Offset: 0xB0
    float headJumpOffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _sliderDuration
    // Size: 0x4
    // Offset: 0xB4
    float sliderDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _initColor
    // Size: 0x10
    // Offset: 0xB8
    ::UnityEngine::Color initColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Boolean _attractingSaber
    // Size: 0x1
    // Offset: 0xC8
    bool attractingSaber;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: attractingSaber and: randomValue
    char __padding19[0x3] = {};
    // private System.Single _randomValue
    // Size: 0x4
    // Offset: 0xCC
    float randomValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _zDistanceBetweenNotes
    // Size: 0x4
    // Offset: 0xD0
    float zDistanceBetweenNotes;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _jumpDistance
    // Size: 0x4
    // Offset: 0xD4
    float jumpDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private FixedUpdateVector3SmoothValue _closeSmoothedSaberInteractionPos
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::FixedUpdateVector3SmoothValue* closeSmoothedSaberInteractionPos;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FixedUpdateVector3SmoothValue*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapObjectController
    operator ::GlobalNamespace::IBeatmapObjectController() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectController*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapObjectController
    inline ::GlobalNamespace::IBeatmapObjectController* i_IBeatmapObjectController() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapObjectController*>(this);
    }
    // static field const value: static private System.Single kSaberAttractPointNormalizedPosition
    static constexpr const float kSaberAttractPointNormalizedPosition = 0.7;
    // Get static field: static private System.Single kSaberAttractPointNormalizedPosition
    static float _get_kSaberAttractPointNormalizedPosition();
    // Set static field: static private System.Single kSaberAttractPointNormalizedPosition
    static void _set_kSaberAttractPointNormalizedPosition(float value);
    // Get instance field reference: protected SliderIntensityEffect _sliderIntensityEffect
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderIntensityEffect*& dyn__sliderIntensityEffect();
    // Get instance field reference: private SliderMeshController _sliderMeshController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMeshController*& dyn__sliderMeshController();
    // Get instance field reference: private SliderMovement _sliderMovement
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderMovement*& dyn__sliderMovement();
    // Get instance field reference: private System.Single _closeInteractionSaberPosSmoothParam
    [[deprecated("Use field access instead!")]] float& dyn__closeInteractionSaberPosSmoothParam();
    // Get instance field reference: private readonly IBeatmapObjectSpawnController _beatmapObjectSpawnController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapObjectSpawnController*& dyn__beatmapObjectSpawnController();
    // Get instance field reference: private readonly ColorManager _colorManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorManager*& dyn__colorManager();
    // Get instance field reference: private readonly BeatmapObjectManager _beatmapObjectManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager*& dyn__beatmapObjectManager();
    // Get instance field reference: private readonly SaberManager _saberManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberManager*& dyn__saberManager();
    // Get instance field reference: private readonly LazyCopyHashSet`1<ISliderDidFinishJumpEvent> _sliderDidFinishMovement
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>*& dyn__sliderDidFinishMovement();
    // Get instance field reference: private readonly LazyCopyHashSet`1<ISliderDidStartDissolvingEvent> _sliderDidStartDissolving
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>*& dyn__sliderDidStartDissolving();
    // Get instance field reference: private readonly LazyCopyHashSet`1<ISliderDidDissolveEvent> _sliderDidDissolve
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>*& dyn__sliderDidDissolve();
    // Get instance field reference: private readonly LazyCopyHashSet`1<ISliderHeadDidMovePastCutMarkEvent> _sliderHeadDidMovePastCutMark
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>*& dyn__sliderHeadDidMovePastCutMark();
    // Get instance field reference: private readonly LazyCopyHashSet`1<ISliderTailDidMovePastCutMarkEvent> _sliderTailDidMovePastCutMark
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>*& dyn__sliderTailDidMovePastCutMark();
    // Get instance field reference: private SliderController/LengthType _lengthType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderController::LengthType& dyn__lengthType();
    // Get instance field reference: private SliderData _sliderData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SliderData*& dyn__sliderData();
    // Get instance field reference: private Saber _saber
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::Saber*& dyn__saber();
    // Get instance field reference: private System.Single _headJumpOffsetY
    [[deprecated("Use field access instead!")]] float& dyn__headJumpOffsetY();
    // Get instance field reference: private System.Single _sliderDuration
    [[deprecated("Use field access instead!")]] float& dyn__sliderDuration();
    // Get instance field reference: private UnityEngine.Color _initColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__initColor();
    // Get instance field reference: private System.Boolean _attractingSaber
    [[deprecated("Use field access instead!")]] bool& dyn__attractingSaber();
    // Get instance field reference: private System.Single _randomValue
    [[deprecated("Use field access instead!")]] float& dyn__randomValue();
    // Get instance field reference: private System.Single _zDistanceBetweenNotes
    [[deprecated("Use field access instead!")]] float& dyn__zDistanceBetweenNotes();
    // Get instance field reference: private System.Single _jumpDistance
    [[deprecated("Use field access instead!")]] float& dyn__jumpDistance();
    // Get instance field reference: private FixedUpdateVector3SmoothValue _closeSmoothedSaberInteractionPos
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FixedUpdateVector3SmoothValue*& dyn__closeSmoothedSaberInteractionPos();
    // public ILazyCopyHashSet`1<ISliderDidFinishJumpEvent> get_sliderDidFinishJumpEvent()
    // Offset: 0x14920B0
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>* get_sliderDidFinishJumpEvent();
    // public ILazyCopyHashSet`1<ISliderDidStartDissolvingEvent> get_sliderDidStartDissolvingEvent()
    // Offset: 0x14920B8
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>* get_sliderDidStartDissolvingEvent();
    // public ILazyCopyHashSet`1<ISliderDidDissolveEvent> get_sliderDidDissolveEvent()
    // Offset: 0x14920C0
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>* get_sliderDidDissolveEvent();
    // public ILazyCopyHashSet`1<ISliderHeadDidMovePastCutMarkEvent> get_sliderHeadDidMovePastCutMark()
    // Offset: 0x14920C8
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>* get_sliderHeadDidMovePastCutMark();
    // public ILazyCopyHashSet`1<ISliderTailDidMovePastCutMarkEvent> get_sliderTailDidMovePastCutMark()
    // Offset: 0x14920D0
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>* get_sliderTailDidMovePastCutMark();
    // public SliderController/LengthType get_lengthType()
    // Offset: 0x14920D8
    ::GlobalNamespace::SliderController::LengthType get_lengthType();
    // public SliderData get_sliderData()
    // Offset: 0x14920E0
    ::GlobalNamespace::SliderData* get_sliderData();
    // public System.Single get_saberInteractionParam()
    // Offset: 0x14920E8
    float get_saberInteractionParam();
    // public SliderMeshController get_sliderMeshController()
    // Offset: 0x149215C
    ::GlobalNamespace::SliderMeshController* get_sliderMeshController();
    // public SliderMovement get_sliderMovement()
    // Offset: 0x1492164
    ::GlobalNamespace::SliderMovement* get_sliderMovement();
    // public UnityEngine.Color get_initColor()
    // Offset: 0x149216C
    ::UnityEngine::Color get_initColor();
    // public System.Single get_randomValue()
    // Offset: 0x1492178
    float get_randomValue();
    // public System.Single get_zDistanceBetweenNotes()
    // Offset: 0x1492180
    float get_zDistanceBetweenNotes();
    // public System.Single get_jumpDistance()
    // Offset: 0x1492188
    float get_jumpDistance();
    // public System.Single get_headJumpOffsetY()
    // Offset: 0x1492190
    float get_headJumpOffsetY();
    // public System.Single get_sliderDuration()
    // Offset: 0x1492198
    float get_sliderDuration();
    // public FixedUpdateVector3SmoothValue get_closeSmoothedSaberInteractionPos()
    // Offset: 0x14921A0
    ::GlobalNamespace::FixedUpdateVector3SmoothValue* get_closeSmoothedSaberInteractionPos();
    // public SliderIntensityEffect get_sliderIntensityEffect()
    // Offset: 0x14921A8
    ::GlobalNamespace::SliderIntensityEffect* get_sliderIntensityEffect();
    // public System.Void Init(SliderController/LengthType lengthType, SliderData sliderData, System.Single worldRotation, UnityEngine.Vector3 headNoteJumpStartPos, UnityEngine.Vector3 tailNoteJumpStartPos, UnityEngine.Vector3 headNoteJumpEndPos, UnityEngine.Vector3 tailNoteJumpEndPos, System.Single jumpDuration, System.Single startNoteJumpGravity, System.Single endNoteJumpGravity, System.Single noteUniformScale)
    // Offset: 0x14921B0
    void Init(::GlobalNamespace::SliderController::LengthType lengthType, ::GlobalNamespace::SliderData* sliderData, float worldRotation, ::UnityEngine::Vector3 headNoteJumpStartPos, ::UnityEngine::Vector3 tailNoteJumpStartPos, ::UnityEngine::Vector3 headNoteJumpEndPos, ::UnityEngine::Vector3 tailNoteJumpEndPos, float jumpDuration, float startNoteJumpGravity, float endNoteJumpGravity, float noteUniformScale);
    // protected System.Void Awake()
    // Offset: 0x149367C
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1493990
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1493B4C
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x1494028
    void Update();
    // protected System.Void FixedUpdate()
    // Offset: 0x149407C
    void FixedUpdate();
    // public System.Void ManualUpdate()
    // Offset: 0x149402C
    void ManualUpdate();
    // private System.Void UpdateMaterialPropertyBlock(System.Single timeSinceHeadNoteJump)
    // Offset: 0x1493530
    void UpdateMaterialPropertyBlock(float timeSinceHeadNoteJump);
    // private System.Collections.IEnumerator DissolveCoroutine(System.Single duration)
    // Offset: 0x149455C
    ::System::Collections::IEnumerator* DissolveCoroutine(float duration);
    // public System.Void Dissolve(System.Single duration)
    // Offset: 0x1494608
    void Dissolve(float duration);
    // public System.Void Hide(System.Boolean hide)
    // Offset: 0x1494694
    void Hide(bool hide);
    // public System.Void Pause(System.Boolean pause)
    // Offset: 0x14946CC
    void Pause(bool pause);
    // private System.Boolean IsNoteStartOfThisSlider(NoteData noteData)
    // Offset: 0x14946DC
    bool IsNoteStartOfThisSlider(::GlobalNamespace::NoteData* noteData);
    // private System.Void HandleMovementDidFinish()
    // Offset: 0x14947BC
    void HandleMovementDidFinish();
    // private System.Void HandleHeadDidMovePastCutMark()
    // Offset: 0x149492C
    void HandleHeadDidMovePastCutMark();
    // private System.Void HandleTailDidMovePastCutMark()
    // Offset: 0x1494AF4
    void HandleTailDidMovePastCutMark();
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0x1494C70
    void HandleNoteWasMissed(::GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x1494D08
    void HandleNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo);
    // private System.Void HandleFadeInDidStart()
    // Offset: 0x1494D8C
    void HandleFadeInDidStart();
    // private System.Void SetSaberAttraction(System.Boolean saberAttraction)
    // Offset: 0x14933C0
    void SetSaberAttraction(bool saberAttraction);
    // static public UnityEngine.Vector3 GetSaberInteractionPoint(Saber saber)
    // Offset: 0x1493458
    static ::UnityEngine::Vector3 GetSaberInteractionPoint(::GlobalNamespace::Saber* saber);
    // public System.Void .ctor()
    // Offset: 0x1494E2C
    // Implemented from: SliderControllerBase
    // Base method: System.Void SliderControllerBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderController*, creationType>()));
    }
  }; // SliderController
  #pragma pack(pop)
  static check_size<sizeof(SliderController), 216 + sizeof(::GlobalNamespace::FixedUpdateVector3SmoothValue*)> __GlobalNamespace_SliderControllerSizeCheck;
  static_assert(sizeof(SliderController) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderController::LengthType, "", "SliderController/LengthType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderDidFinishJumpEvent
// Il2CppName: get_sliderDidFinishJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidFinishJumpEvent*>* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderDidFinishJumpEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderDidFinishJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderDidStartDissolvingEvent
// Il2CppName: get_sliderDidStartDissolvingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidStartDissolvingEvent*>* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderDidStartDissolvingEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderDidStartDissolvingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderDidDissolveEvent
// Il2CppName: get_sliderDidDissolveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderDidDissolveEvent*>* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderDidDissolveEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderDidDissolveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderHeadDidMovePastCutMark
// Il2CppName: get_sliderHeadDidMovePastCutMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderHeadDidMovePastCutMarkEvent*>* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderHeadDidMovePastCutMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderHeadDidMovePastCutMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderTailDidMovePastCutMark
// Il2CppName: get_sliderTailDidMovePastCutMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::ISliderTailDidMovePastCutMarkEvent*>* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderTailDidMovePastCutMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderTailDidMovePastCutMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_lengthType
// Il2CppName: get_lengthType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderController::LengthType (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_lengthType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_lengthType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderData
// Il2CppName: get_sliderData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderData* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_saberInteractionParam
// Il2CppName: get_saberInteractionParam
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_saberInteractionParam)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_saberInteractionParam", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderMeshController
// Il2CppName: get_sliderMeshController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderMeshController* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderMeshController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderMeshController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderMovement
// Il2CppName: get_sliderMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderMovement* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_initColor
// Il2CppName: get_initColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_initColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_initColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_randomValue
// Il2CppName: get_randomValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_randomValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_randomValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_zDistanceBetweenNotes
// Il2CppName: get_zDistanceBetweenNotes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_zDistanceBetweenNotes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_zDistanceBetweenNotes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_jumpDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_headJumpOffsetY
// Il2CppName: get_headJumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_headJumpOffsetY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_headJumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderDuration
// Il2CppName: get_sliderDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_closeSmoothedSaberInteractionPos
// Il2CppName: get_closeSmoothedSaberInteractionPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FixedUpdateVector3SmoothValue* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_closeSmoothedSaberInteractionPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_closeSmoothedSaberInteractionPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::get_sliderIntensityEffect
// Il2CppName: get_sliderIntensityEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SliderIntensityEffect* (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::get_sliderIntensityEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "get_sliderIntensityEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(::GlobalNamespace::SliderController::LengthType, ::GlobalNamespace::SliderData*, float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, float, float)>(&GlobalNamespace::SliderController::Init)> {
  static const MethodInfo* get() {
    static auto* lengthType = &::il2cpp_utils::GetClassFromName("", "SliderController/LengthType")->byval_arg;
    static auto* sliderData = &::il2cpp_utils::GetClassFromName("", "SliderData")->byval_arg;
    static auto* worldRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* headNoteJumpStartPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tailNoteJumpStartPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* headNoteJumpEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* tailNoteJumpEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* jumpDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startNoteJumpGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endNoteJumpGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* noteUniformScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lengthType, sliderData, worldRotation, headNoteJumpStartPos, tailNoteJumpStartPos, headNoteJumpEndPos, tailNoteJumpEndPos, jumpDuration, startNoteJumpGravity, endNoteJumpGravity, noteUniformScale});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::ManualUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::UpdateMaterialPropertyBlock
// Il2CppName: UpdateMaterialPropertyBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(float)>(&GlobalNamespace::SliderController::UpdateMaterialPropertyBlock)> {
  static const MethodInfo* get() {
    static auto* timeSinceHeadNoteJump = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "UpdateMaterialPropertyBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeSinceHeadNoteJump});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::DissolveCoroutine
// Il2CppName: DissolveCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SliderController::*)(float)>(&GlobalNamespace::SliderController::DissolveCoroutine)> {
  static const MethodInfo* get() {
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "DissolveCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Dissolve
// Il2CppName: Dissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(float)>(&GlobalNamespace::SliderController::Dissolve)> {
  static const MethodInfo* get() {
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Dissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(bool)>(&GlobalNamespace::SliderController::Hide)> {
  static const MethodInfo* get() {
    static auto* hide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(bool)>(&GlobalNamespace::SliderController::Pause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::IsNoteStartOfThisSlider
// Il2CppName: IsNoteStartOfThisSlider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::SliderController::*)(::GlobalNamespace::NoteData*)>(&GlobalNamespace::SliderController::IsNoteStartOfThisSlider)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "IsNoteStartOfThisSlider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::HandleMovementDidFinish
// Il2CppName: HandleMovementDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::HandleMovementDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "HandleMovementDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::HandleHeadDidMovePastCutMark
// Il2CppName: HandleHeadDidMovePastCutMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::HandleHeadDidMovePastCutMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "HandleHeadDidMovePastCutMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::HandleTailDidMovePastCutMark
// Il2CppName: HandleTailDidMovePastCutMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::HandleTailDidMovePastCutMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "HandleTailDidMovePastCutMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::HandleNoteWasMissed
// Il2CppName: HandleNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::SliderController::HandleNoteWasMissed)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "HandleNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(::GlobalNamespace::NoteController*, ByRef<::GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::SliderController::HandleNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::HandleFadeInDidStart
// Il2CppName: HandleFadeInDidStart
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)()>(&GlobalNamespace::SliderController::HandleFadeInDidStart)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "HandleFadeInDidStart", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::SetSaberAttraction
// Il2CppName: SetSaberAttraction
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderController::*)(bool)>(&GlobalNamespace::SliderController::SetSaberAttraction)> {
  static const MethodInfo* get() {
    static auto* saberAttraction = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "SetSaberAttraction", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saberAttraction});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::GetSaberInteractionPoint
// Il2CppName: GetSaberInteractionPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (*)(::GlobalNamespace::Saber*)>(&GlobalNamespace::SliderController::GetSaberInteractionPoint)> {
  static const MethodInfo* get() {
    static auto* saber = &::il2cpp_utils::GetClassFromName("", "Saber")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderController*), "GetSaberInteractionPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{saber});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
