// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaSceneTransform
  class GorillaSceneTransform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaSceneTransform);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaSceneTransform*, "", "GorillaSceneTransform");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: GorillaSceneTransform
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaSceneTransform : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.Vector3 scenePosition
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 scenePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 sceneRotation
    // Size: 0xC
    // Offset: 0x1C
    ::UnityEngine::Vector3 sceneRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Collider sceneCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Collider* sceneCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Vector3 scenePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_scenePosition();
    // Get instance field reference: public UnityEngine.Vector3 sceneRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_sceneRotation();
    // Get instance field reference: public UnityEngine.Collider sceneCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_sceneCollider();
    // public System.Void .ctor()
    // Offset: 0xC7D8F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaSceneTransform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaSceneTransform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaSceneTransform*, creationType>()));
    }
  }; // GorillaSceneTransform
  #pragma pack(pop)
  static check_size<sizeof(GorillaSceneTransform), 40 + sizeof(::UnityEngine::Collider*)> __GlobalNamespace_GorillaSceneTransformSizeCheck;
  static_assert(sizeof(GorillaSceneTransform) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaSceneTransform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
