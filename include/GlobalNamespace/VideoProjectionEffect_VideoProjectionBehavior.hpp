// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: VideoProjectionEffect
#include "GlobalNamespace/VideoProjectionEffect.hpp"
// Including type: UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1
#include "UnityEngine/ResourceManagement/AsyncOperations/AsyncOperationHandle_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VideoProjectionDataModelSO
  class VideoProjectionDataModelSO;
  // Forward declaring type: SongTimeSyncedVideoPlayer
  class SongTimeSyncedVideoPlayer;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: UnityEngine::Video
namespace UnityEngine::Video {
  // Forward declaring type: VideoClip
  class VideoClip;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior*, "", "VideoProjectionEffect/VideoProjectionBehavior");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: VideoProjectionEffect/VideoProjectionBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  class VideoProjectionEffect::VideoProjectionBehavior : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$$c__DisplayClass7_0
    class $$c__DisplayClass7_0;
    // Nested type: ::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::$LoadPreviewCoverAsset$d__8
    struct $LoadPreviewCoverAsset$d__8;
    public:
    // protected System.Int32 _eventValue
    // Size: 0x4
    // Offset: 0x10
    int eventValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.Video.VideoClip> _videoClipHandle
    // Size: 0xFFFFFFFF
    // Offset: 0x18
    ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::Video::VideoClip*> videoClipHandle;
    // private readonly VideoProjectionDataModelSO _model
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::VideoProjectionDataModelSO* model;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VideoProjectionDataModelSO*) == 0x8);
    // private readonly SongTimeSyncedVideoPlayer _videoPlayer
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::SongTimeSyncedVideoPlayer* videoPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SongTimeSyncedVideoPlayer*) == 0x8);
    // private readonly IPreviewBeatmapLevel _previewBeatmapLevel
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPreviewBeatmapLevel*) == 0x8);
    public:
    // Get instance field reference: protected System.Int32 _eventValue
    [[deprecated("Use field access instead!")]] int& dyn__eventValue();
    // Get instance field reference: protected UnityEngine.ResourceManagement.AsyncOperations.AsyncOperationHandle`1<UnityEngine.Video.VideoClip> _videoClipHandle
    [[deprecated("Use field access instead!")]] ::UnityEngine::ResourceManagement::AsyncOperations::AsyncOperationHandle_1<::UnityEngine::Video::VideoClip*>& dyn__videoClipHandle();
    // Get instance field reference: private readonly VideoProjectionDataModelSO _model
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VideoProjectionDataModelSO*& dyn__model();
    // Get instance field reference: private readonly SongTimeSyncedVideoPlayer _videoPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SongTimeSyncedVideoPlayer*& dyn__videoPlayer();
    // Get instance field reference: private readonly IPreviewBeatmapLevel _previewBeatmapLevel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& dyn__previewBeatmapLevel();
    // protected System.Void .ctor(VideoProjectionDataModelSO dataModel, SongTimeSyncedVideoPlayer videoPlayer, IPreviewBeatmapLevel previewBeatmapLevel)
    // Offset: 0x15EB0B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VideoProjectionEffect::VideoProjectionBehavior* New_ctor(::GlobalNamespace::VideoProjectionDataModelSO* dataModel, ::GlobalNamespace::SongTimeSyncedVideoPlayer* videoPlayer, ::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VideoProjectionEffect::VideoProjectionBehavior*, creationType>(dataModel, videoPlayer, previewBeatmapLevel)));
    }
    // public System.Void Dispose()
    // Offset: 0x15EB414
    void Dispose();
    // protected System.Void LoadVideoFromModel(System.Int32 eventValue)
    // Offset: 0x15EB0F4
    void LoadVideoFromModel(int eventValue);
    // protected System.Void LoadPreviewCoverAsset()
    // Offset: 0x15EB320
    void LoadPreviewCoverAsset();
  }; // VideoProjectionEffect/VideoProjectionBehavior
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::*)()>(&GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadVideoFromModel
// Il2CppName: LoadVideoFromModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::*)(int)>(&GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadVideoFromModel)> {
  static const MethodInfo* get() {
    static auto* eventValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior*), "LoadVideoFromModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadPreviewCoverAsset
// Il2CppName: LoadPreviewCoverAsset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::*)()>(&GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior::LoadPreviewCoverAsset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VideoProjectionEffect::VideoProjectionBehavior*), "LoadPreviewCoverAsset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
