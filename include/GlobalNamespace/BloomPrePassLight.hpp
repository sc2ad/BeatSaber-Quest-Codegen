// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: VertexData because it is already included!
  // Forward declaring type: BloomPrePassLightTypeSO
  class BloomPrePassLightTypeSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BloomPrePassLight
  class BloomPrePassLight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BloomPrePassLight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BloomPrePassLight*, "", "BloomPrePassLight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2A
  #pragma pack(push, 1)
  // Autogenerated type: BloomPrePassLight
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class BloomPrePassLight : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BloomPrePassLight::VertexData
    struct VertexData;
    // Nested type: ::GlobalNamespace::BloomPrePassLight::QuadData
    struct QuadData;
    // Nested type: ::GlobalNamespace::BloomPrePassLight::LightsDataItem
    class LightsDataItem;
    // Size: 0x34
    #pragma pack(push, 1)
    // WARNING Layout: Explicit may not be correctly taken into account!
    // Autogenerated type: BloomPrePassLight/VertexData
    // [TokenAttribute] Offset: FFFFFFFF
    struct VertexData/*, public ::System::ValueType*/ {
      public:
      public:
      // public UnityEngine.Vector3 vertex
      // Size: 0xC
      // Offset: 0x0
      ::UnityEngine::Vector3 vertex;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 viewPos
      // Size: 0xC
      // Offset: 0xC
      ::UnityEngine::Vector3 viewPos;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Color color
      // Size: 0x10
      // Offset: 0x18
      ::UnityEngine::Color color;
      // Field size check
      static_assert(sizeof(::UnityEngine::Color) == 0x10);
      // public UnityEngine.Vector3 uv
      // Size: 0xC
      // Offset: 0x28
      ::UnityEngine::Vector3 uv;
      // Field size check
      static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
      public:
      // Creating value type constructor for type: VertexData
      constexpr VertexData(::UnityEngine::Vector3 vertex_ = {}, ::UnityEngine::Vector3 viewPos_ = {}, ::UnityEngine::Color color_ = {}, ::UnityEngine::Vector3 uv_ = {}) noexcept : vertex{vertex_}, viewPos{viewPos_}, color{color_}, uv{uv_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public UnityEngine.Vector3 vertex
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_vertex();
      // Get instance field reference: public UnityEngine.Vector3 viewPos
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_viewPos();
      // Get instance field reference: public UnityEngine.Color color
      [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
      // Get instance field reference: public UnityEngine.Vector3 uv
      [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_uv();
    }; // BloomPrePassLight/VertexData
    #pragma pack(pop)
    static check_size<sizeof(BloomPrePassLight::VertexData), 40 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_BloomPrePassLight_VertexDataSizeCheck;
    static_assert(sizeof(BloomPrePassLight::VertexData) == 0x34);
    // Size: 0xD0
    #pragma pack(push, 1)
    // WARNING Layout: Explicit may not be correctly taken into account!
    // Autogenerated type: BloomPrePassLight/QuadData
    // [TokenAttribute] Offset: FFFFFFFF
    struct QuadData/*, public ::System::ValueType*/ {
      public:
      public:
      // public BloomPrePassLight/VertexData vertex0
      // Size: 0x34
      // Offset: 0x0
      ::GlobalNamespace::BloomPrePassLight::VertexData vertex0;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BloomPrePassLight::VertexData) == 0x34);
      // public BloomPrePassLight/VertexData vertex1
      // Size: 0x34
      // Offset: 0x34
      ::GlobalNamespace::BloomPrePassLight::VertexData vertex1;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BloomPrePassLight::VertexData) == 0x34);
      // public BloomPrePassLight/VertexData vertex2
      // Size: 0x34
      // Offset: 0x68
      ::GlobalNamespace::BloomPrePassLight::VertexData vertex2;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BloomPrePassLight::VertexData) == 0x34);
      // public BloomPrePassLight/VertexData vertex3
      // Size: 0x34
      // Offset: 0x9C
      ::GlobalNamespace::BloomPrePassLight::VertexData vertex3;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BloomPrePassLight::VertexData) == 0x34);
      public:
      // Creating value type constructor for type: QuadData
      constexpr QuadData(::GlobalNamespace::BloomPrePassLight::VertexData vertex0_ = {}, ::GlobalNamespace::BloomPrePassLight::VertexData vertex1_ = {}, ::GlobalNamespace::BloomPrePassLight::VertexData vertex2_ = {}, ::GlobalNamespace::BloomPrePassLight::VertexData vertex3_ = {}) noexcept : vertex0{vertex0_}, vertex1{vertex1_}, vertex2{vertex2_}, vertex3{vertex3_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public BloomPrePassLight/VertexData vertex0
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLight::VertexData& dyn_vertex0();
      // Get instance field reference: public BloomPrePassLight/VertexData vertex1
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLight::VertexData& dyn_vertex1();
      // Get instance field reference: public BloomPrePassLight/VertexData vertex2
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLight::VertexData& dyn_vertex2();
      // Get instance field reference: public BloomPrePassLight/VertexData vertex3
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLight::VertexData& dyn_vertex3();
    }; // BloomPrePassLight/QuadData
    #pragma pack(pop)
    static check_size<sizeof(BloomPrePassLight::QuadData), 156 + sizeof(::GlobalNamespace::BloomPrePassLight::VertexData)> __GlobalNamespace_BloomPrePassLight_QuadDataSizeCheck;
    static_assert(sizeof(BloomPrePassLight::QuadData) == 0xD0);
    public:
    // private BloomPrePassLightTypeSO _lightType
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BloomPrePassLightTypeSO* lightType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassLightTypeSO*) == 0x8);
    // private BloomPrePassLightTypeSO _registeredWithLightType
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BloomPrePassLightTypeSO* registeredWithLightType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassLightTypeSO*) == 0x8);
    // private System.Boolean _isRegistered
    // Size: 0x1
    // Offset: 0x28
    bool isRegistered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isBeingDestroyed
    // Size: 0x1
    // Offset: 0x29
    bool isBeingDestroyed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kFloatSize
    static constexpr const int kFloatSize = 4;
    // Get static field: static private System.Int32 kFloatSize
    static int _get_kFloatSize();
    // Set static field: static private System.Int32 kFloatSize
    static void _set_kFloatSize(int value);
    // static field const value: static private System.Int32 kVertexOffset
    static constexpr const int kVertexOffset = 0;
    // Get static field: static private System.Int32 kVertexOffset
    static int _get_kVertexOffset();
    // Set static field: static private System.Int32 kVertexOffset
    static void _set_kVertexOffset(int value);
    // static field const value: static private System.Int32 kVertexSize
    static constexpr const int kVertexSize = 12;
    // Get static field: static private System.Int32 kVertexSize
    static int _get_kVertexSize();
    // Set static field: static private System.Int32 kVertexSize
    static void _set_kVertexSize(int value);
    // static field const value: static private System.Int32 kViewPosOffset
    static constexpr const int kViewPosOffset = 12;
    // Get static field: static private System.Int32 kViewPosOffset
    static int _get_kViewPosOffset();
    // Set static field: static private System.Int32 kViewPosOffset
    static void _set_kViewPosOffset(int value);
    // static field const value: static private System.Int32 kViewPosSize
    static constexpr const int kViewPosSize = 12;
    // Get static field: static private System.Int32 kViewPosSize
    static int _get_kViewPosSize();
    // Set static field: static private System.Int32 kViewPosSize
    static void _set_kViewPosSize(int value);
    // static field const value: static private System.Int32 kColorOffset
    static constexpr const int kColorOffset = 24;
    // Get static field: static private System.Int32 kColorOffset
    static int _get_kColorOffset();
    // Set static field: static private System.Int32 kColorOffset
    static void _set_kColorOffset(int value);
    // static field const value: static private System.Int32 kColorSize
    static constexpr const int kColorSize = 16;
    // Get static field: static private System.Int32 kColorSize
    static int _get_kColorSize();
    // Set static field: static private System.Int32 kColorSize
    static void _set_kColorSize(int value);
    // static field const value: static private System.Int32 kUvOffset
    static constexpr const int kUvOffset = 40;
    // Get static field: static private System.Int32 kUvOffset
    static int _get_kUvOffset();
    // Set static field: static private System.Int32 kUvOffset
    static void _set_kUvOffset(int value);
    // static field const value: static private System.Int32 kUvSize
    static constexpr const int kUvSize = 12;
    // Get static field: static private System.Int32 kUvSize
    static int _get_kUvSize();
    // Set static field: static private System.Int32 kUvSize
    static void _set_kUvSize(int value);
    // static field const value: static private System.Int32 kVertexDataSize
    static constexpr const int kVertexDataSize = 52;
    // Get static field: static private System.Int32 kVertexDataSize
    static int _get_kVertexDataSize();
    // Set static field: static private System.Int32 kVertexDataSize
    static void _set_kVertexDataSize(int value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> _bloomLightsDict
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* _get__bloomLightsDict();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> _bloomLightsDict
    static void _set__bloomLightsDict(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* value);
    // Get static field: static private readonly System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> _lightsDataItems
    static ::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* _get__lightsDataItems();
    // Set static field: static private readonly System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> _lightsDataItems
    static void _set__lightsDataItems(::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* value);
    // Get instance field reference: private BloomPrePassLightTypeSO _lightType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& dyn__lightType();
    // Get instance field reference: private BloomPrePassLightTypeSO _registeredWithLightType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightTypeSO*& dyn__registeredWithLightType();
    // Get instance field reference: private System.Boolean _isRegistered
    [[deprecated("Use field access instead!")]] bool& dyn__isRegistered();
    // Get instance field reference: private System.Boolean _isBeingDestroyed
    [[deprecated("Use field access instead!")]] bool& dyn__isBeingDestroyed();
    // static public System.Collections.Generic.Dictionary`2<BloomPrePassLightTypeSO,System.Collections.Generic.HashSet`1<BloomPrePassLight>> get_bloomLightsDict()
    // Offset: 0x1CB7690
    static ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* get_bloomLightsDict();
    // static public System.Collections.Generic.List`1<BloomPrePassLight/LightsDataItem> get_lightsDataItems()
    // Offset: 0x1CB76F8
    static ::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* get_lightsDataItems();
    // public System.Boolean get_isDirty()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isDirty();
    // protected System.Void .ctor()
    // Offset: 0x1CB7AEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BloomPrePassLight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BloomPrePassLight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BloomPrePassLight*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1CB7AF4
    static void _cctor();
    // protected System.Void OnEnable()
    // Offset: 0x1CB7760
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1CB79E0
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0x1CB7AA8
    void OnDestroy();
    // private System.Void RegisterLight()
    // Offset: 0x1CB7764
    void RegisterLight();
    // private System.Void UnregisterLight()
    // Offset: 0x1CB79E4
    void UnregisterLight();
    // protected System.Void DidRegisterLight()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DidRegisterLight();
    // public System.Void FillMeshData(ref System.Int32 lightNum, BloomPrePassLight/QuadData[] lightQuads, UnityEngine.Matrix4x4 viewMatrix, UnityEngine.Matrix4x4 projectionMatrix, System.Single lineWidth)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void FillMeshData(ByRef<int> lightNum, ::ArrayW<::GlobalNamespace::BloomPrePassLight::QuadData> lightQuads, ::UnityEngine::Matrix4x4 viewMatrix, ::UnityEngine::Matrix4x4 projectionMatrix, float lineWidth);
    // public System.Void Refresh()
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Refresh();
  }; // BloomPrePassLight
  #pragma pack(pop)
  static check_size<sizeof(BloomPrePassLight), 41 + sizeof(bool)> __GlobalNamespace_BloomPrePassLightSizeCheck;
  static_assert(sizeof(BloomPrePassLight) == 0x2A);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BloomPrePassLight::QuadData, "", "BloomPrePassLight/QuadData");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BloomPrePassLight::VertexData, "", "BloomPrePassLight/VertexData");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::get_bloomLightsDict
// Il2CppName: get_bloomLightsDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BloomPrePassLightTypeSO*, ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BloomPrePassLight*>*>* (*)()>(&GlobalNamespace::BloomPrePassLight::get_bloomLightsDict)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "get_bloomLightsDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::get_lightsDataItems
// Il2CppName: get_lightsDataItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::BloomPrePassLight::LightsDataItem*>* (*)()>(&GlobalNamespace::BloomPrePassLight::get_lightsDataItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "get_lightsDataItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::get_isDirty
// Il2CppName: get_isDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::get_isDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "get_isDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BloomPrePassLight::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::RegisterLight
// Il2CppName: RegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::RegisterLight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "RegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::UnregisterLight
// Il2CppName: UnregisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::UnregisterLight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "UnregisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::DidRegisterLight
// Il2CppName: DidRegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::DidRegisterLight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "DidRegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::FillMeshData
// Il2CppName: FillMeshData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)(ByRef<int>, ::ArrayW<::GlobalNamespace::BloomPrePassLight::QuadData>, ::UnityEngine::Matrix4x4, ::UnityEngine::Matrix4x4, float)>(&GlobalNamespace::BloomPrePassLight::FillMeshData)> {
  static const MethodInfo* get() {
    static auto* lightNum = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* lightQuads = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "BloomPrePassLight/QuadData"), 1)->byval_arg;
    static auto* viewMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* projectionMatrix = &::il2cpp_utils::GetClassFromName("UnityEngine", "Matrix4x4")->byval_arg;
    static auto* lineWidth = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "FillMeshData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightNum, lightQuads, viewMatrix, projectionMatrix, lineWidth});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BloomPrePassLight::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BloomPrePassLight::*)()>(&GlobalNamespace::BloomPrePassLight::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BloomPrePassLight*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
