// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: ViewController because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TestFlowCoordinator
  class TestFlowCoordinator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TestFlowCoordinator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TestFlowCoordinator*, "", "TestFlowCoordinator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: TestFlowCoordinator
  // [TokenAttribute] Offset: FFFFFFFF
  class TestFlowCoordinator : public ::HMUI::FlowCoordinator {
    public:
    public:
    // [NullAllowed] Offset: 0x10E89A0
    // private HMUI.ViewController _viewController
    // Size: 0x8
    // Offset: 0xA8
    ::HMUI::ViewController* viewController;
    // Field size check
    static_assert(sizeof(::HMUI::ViewController*) == 0x8);
    // [NullAllowed] Offset: 0x10E89D8
    // private HMUI.ViewController _leftViewController
    // Size: 0x8
    // Offset: 0xB0
    ::HMUI::ViewController* leftViewController;
    // Field size check
    static_assert(sizeof(::HMUI::ViewController*) == 0x8);
    // [NullAllowed] Offset: 0x10E8A10
    // private HMUI.ViewController _rightViewController
    // Size: 0x8
    // Offset: 0xB8
    ::HMUI::ViewController* rightViewController;
    // Field size check
    static_assert(sizeof(::HMUI::ViewController*) == 0x8);
    // [NullAllowed] Offset: 0x10E8A48
    // private HMUI.ViewController _bottomScreenViewController
    // Size: 0x8
    // Offset: 0xC0
    ::HMUI::ViewController* bottomScreenViewController;
    // Field size check
    static_assert(sizeof(::HMUI::ViewController*) == 0x8);
    // [NullAllowed] Offset: 0x10E8A80
    // private HMUI.ViewController _topScreenViewController
    // Size: 0x8
    // Offset: 0xC8
    ::HMUI::ViewController* topScreenViewController;
    // Field size check
    static_assert(sizeof(::HMUI::ViewController*) == 0x8);
    public:
    // Get instance field reference: private HMUI.ViewController _viewController
    [[deprecated("Use field access instead!")]] ::HMUI::ViewController*& dyn__viewController();
    // Get instance field reference: private HMUI.ViewController _leftViewController
    [[deprecated("Use field access instead!")]] ::HMUI::ViewController*& dyn__leftViewController();
    // Get instance field reference: private HMUI.ViewController _rightViewController
    [[deprecated("Use field access instead!")]] ::HMUI::ViewController*& dyn__rightViewController();
    // Get instance field reference: private HMUI.ViewController _bottomScreenViewController
    [[deprecated("Use field access instead!")]] ::HMUI::ViewController*& dyn__bottomScreenViewController();
    // Get instance field reference: private HMUI.ViewController _topScreenViewController
    [[deprecated("Use field access instead!")]] ::HMUI::ViewController*& dyn__topScreenViewController();
    // public System.Void .ctor()
    // Offset: 0x144C040
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TestFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TestFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TestFlowCoordinator*, creationType>()));
    }
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x144C024
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
  }; // TestFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(TestFlowCoordinator), 200 + sizeof(::HMUI::ViewController*)> __GlobalNamespace_TestFlowCoordinatorSizeCheck;
  static_assert(sizeof(TestFlowCoordinator) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TestFlowCoordinator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TestFlowCoordinator::DidActivate
// Il2CppName: DidActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TestFlowCoordinator::*)(bool, bool, bool)>(&GlobalNamespace::TestFlowCoordinator::DidActivate)> {
  static const MethodInfo* get() {
    static auto* firstActivation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* addedToHierarchy = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* screenSystemEnabling = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TestFlowCoordinator*), "DidActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{firstActivation, addedToHierarchy, screenSystemEnabling});
  }
};
