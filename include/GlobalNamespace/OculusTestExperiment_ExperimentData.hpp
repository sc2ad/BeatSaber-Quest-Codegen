// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: OculusTestExperiment
#include "GlobalNamespace/OculusTestExperiment.hpp"
// Including type: IExperimentData
#include "GlobalNamespace/IExperimentData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OculusTestExperiment::ExperimentData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OculusTestExperiment::ExperimentData*, "", "OculusTestExperiment/ExperimentData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OculusTestExperiment/ExperimentData
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusTestExperiment::ExperimentData : public ::Il2CppObject/*, public ::GlobalNamespace::IExperimentData*/ {
    public:
    public:
    // private readonly System.String _experimentPlatformKey
    // Size: 0x8
    // Offset: 0x10
    ::StringW experimentPlatformKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IExperimentData
    operator ::GlobalNamespace::IExperimentData() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IExperimentData*>(this);
    }
    // Creating interface conversion operator: i_IExperimentData
    inline ::GlobalNamespace::IExperimentData* i_IExperimentData() noexcept {
      return reinterpret_cast<::GlobalNamespace::IExperimentData*>(this);
    }
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return experimentPlatformKey;
    }
    // Get instance field reference: private readonly System.String _experimentPlatformKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn__experimentPlatformKey();
    // public System.String get_experimentPlatformKey()
    // Offset: 0x1571F8C
    ::StringW get_experimentPlatformKey();
    // public System.Void .ctor(System.String experimentPlatformKey)
    // Offset: 0x1571F54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusTestExperiment::ExperimentData* New_ctor(::StringW experimentPlatformKey) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusTestExperiment::ExperimentData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusTestExperiment::ExperimentData*, creationType>(experimentPlatformKey)));
    }
  }; // OculusTestExperiment/ExperimentData
  #pragma pack(pop)
  static check_size<sizeof(OculusTestExperiment::ExperimentData), 16 + sizeof(::StringW)> __GlobalNamespace_OculusTestExperiment_ExperimentDataSizeCheck;
  static_assert(sizeof(OculusTestExperiment::ExperimentData) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OculusTestExperiment::ExperimentData::get_experimentPlatformKey
// Il2CppName: get_experimentPlatformKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OculusTestExperiment::ExperimentData::*)()>(&GlobalNamespace::OculusTestExperiment::ExperimentData::get_experimentPlatformKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusTestExperiment::ExperimentData*), "get_experimentPlatformKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusTestExperiment::ExperimentData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
