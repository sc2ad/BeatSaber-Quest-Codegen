// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ONSPVersion
  class ONSPVersion;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ONSPVersion);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ONSPVersion*, "", "ONSPVersion");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: ONSPVersion
  // [TokenAttribute] Offset: FFFFFFFF
  class ONSPVersion : public ::UnityEngine::MonoBehaviour {
    public:
    // static field const value: static public System.String strONSPS
    static constexpr const char* strONSPS = "AudioPluginOculusSpatializer";
    // Get static field: static public System.String strONSPS
    static ::StringW _get_strONSPS();
    // Set static field: static public System.String strONSPS
    static void _set_strONSPS(::StringW value);
    // public System.Void .ctor()
    // Offset: 0x138D458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ONSPVersion* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ONSPVersion::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ONSPVersion*, creationType>()));
    }
    // static private System.Void ONSP_GetVersion(ref System.Int32 Major, ref System.Int32 Minor, ref System.Int32 Patch)
    // Offset: 0x138D2AC
    static void ONSP_GetVersion(ByRef<int> Major, ByRef<int> Minor, ByRef<int> Patch);
    // private System.Void Awake()
    // Offset: 0x138D344
    void Awake();
    // private System.Void Start()
    // Offset: 0x138D450
    void Start();
    // private System.Void Update()
    // Offset: 0x138D454
    void Update();
  }; // ONSPVersion
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ONSPVersion::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ONSPVersion::ONSP_GetVersion
// Il2CppName: ONSP_GetVersion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, ByRef<int>, ByRef<int>)>(&GlobalNamespace::ONSPVersion::ONSP_GetVersion)> {
  static const MethodInfo* get() {
    static auto* Major = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* Minor = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* Patch = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPVersion*), "ONSP_GetVersion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{Major, Minor, Patch});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPVersion::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPVersion::*)()>(&GlobalNamespace::ONSPVersion::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPVersion*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPVersion::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPVersion::*)()>(&GlobalNamespace::ONSPVersion::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPVersion*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPVersion::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPVersion::*)()>(&GlobalNamespace::ONSPVersion::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPVersion*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
