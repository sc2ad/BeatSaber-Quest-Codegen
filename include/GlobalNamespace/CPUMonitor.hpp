// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ICPUMonitor
#include "GlobalNamespace/ICPUMonitor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: RollingAverage
  class RollingAverage;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Process
  class Process;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CPUMonitor
  class CPUMonitor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CPUMonitor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CPUMonitor*, "", "CPUMonitor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CPUMonitor
  // [TokenAttribute] Offset: FFFFFFFF
  class CPUMonitor : public ::Il2CppObject/*, public ::GlobalNamespace::ICPUMonitor*/ {
    public:
    public:
    // private readonly RollingAverage _utilization
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::RollingAverage* utilization;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RollingAverage*) == 0x8);
    // private readonly System.Diagnostics.Process _currentProcess
    // Size: 0x8
    // Offset: 0x18
    ::System::Diagnostics::Process* currentProcess;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Process*) == 0x8);
    // private readonly System.Int32 _processorCount
    // Size: 0x4
    // Offset: 0x20
    int processorCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: processorCount and: lastSampleTime
    char __padding2[0x4] = {};
    // private System.Int64 _lastSampleTime
    // Size: 0x8
    // Offset: 0x28
    int64_t lastSampleTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 _lastSampleValue
    // Size: 0x8
    // Offset: 0x30
    int64_t lastSampleValue;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ICPUMonitor
    operator ::GlobalNamespace::ICPUMonitor() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ICPUMonitor*>(this);
    }
    // Creating interface conversion operator: i_ICPUMonitor
    inline ::GlobalNamespace::ICPUMonitor* i_ICPUMonitor() noexcept {
      return reinterpret_cast<::GlobalNamespace::ICPUMonitor*>(this);
    }
    // Get instance field reference: private readonly RollingAverage _utilization
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RollingAverage*& dyn__utilization();
    // Get instance field reference: private readonly System.Diagnostics.Process _currentProcess
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Process*& dyn__currentProcess();
    // Get instance field reference: private readonly System.Int32 _processorCount
    [[deprecated("Use field access instead!")]] int& dyn__processorCount();
    // Get instance field reference: private System.Int64 _lastSampleTime
    [[deprecated("Use field access instead!")]] int64_t& dyn__lastSampleTime();
    // Get instance field reference: private System.Int64 _lastSampleValue
    [[deprecated("Use field access instead!")]] int64_t& dyn__lastSampleValue();
    // public System.Single get_utilization()
    // Offset: 0x1611AB4
    float get_utilization();
    // public System.Void .ctor()
    // Offset: 0x1611ADC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CPUMonitor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CPUMonitor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CPUMonitor*, creationType>()));
    }
    // public System.Void PollUpdate()
    // Offset: 0x16119AC
    void PollUpdate();
  }; // CPUMonitor
  #pragma pack(pop)
  static check_size<sizeof(CPUMonitor), 48 + sizeof(int64_t)> __GlobalNamespace_CPUMonitorSizeCheck;
  static_assert(sizeof(CPUMonitor) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CPUMonitor::get_utilization
// Il2CppName: get_utilization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CPUMonitor::*)()>(&GlobalNamespace::CPUMonitor::get_utilization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CPUMonitor*), "get_utilization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CPUMonitor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CPUMonitor::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CPUMonitor::*)()>(&GlobalNamespace::CPUMonitor::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CPUMonitor*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
