// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: System.IComparable
#include "System/IComparable.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: MultiplayerPlayerLevelEndState because it is already included!
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
  // Skipping declaration: MultiplayerPlayerLevelEndReason because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerLevelCompletionResults
  class MultiplayerLevelCompletionResults;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerLevelCompletionResults);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerLevelCompletionResults*, "", "MultiplayerLevelCompletionResults");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerLevelCompletionResults
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerLevelCompletionResults : public ::Il2CppObject/*, public ::LiteNetLib::Utils::INetImmutableSerializable_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>, public ::System::IComparable*/ {
    public:
    // Nested type: ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState
    struct MultiplayerPlayerLevelEndState;
    // Nested type: ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason
    struct MultiplayerPlayerLevelEndReason;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState
    // [TokenAttribute] Offset: FFFFFFFF
    struct MultiplayerPlayerLevelEndState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MultiplayerPlayerLevelEndState
      constexpr MultiplayerPlayerLevelEndState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState SongFinished
      static constexpr const int SongFinished = 0;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState SongFinished
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState _get_SongFinished();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState SongFinished
      static void _set_SongFinished(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState NotFinished
      static constexpr const int NotFinished = 1;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState NotFinished
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState _get_NotFinished();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState NotFinished
      static void _set_NotFinished(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState NotStarted
      static constexpr const int NotStarted = 2;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState NotStarted
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState _get_NotStarted();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState NotStarted
      static void _set_NotStarted(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState
    #pragma pack(pop)
    static check_size<sizeof(MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState), 0 + sizeof(int)> __GlobalNamespace_MultiplayerLevelCompletionResults_MultiplayerPlayerLevelEndStateSizeCheck;
    static_assert(sizeof(MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason
    // [TokenAttribute] Offset: FFFFFFFF
    struct MultiplayerPlayerLevelEndReason/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MultiplayerPlayerLevelEndReason
      constexpr MultiplayerPlayerLevelEndReason(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Cleared
      static constexpr const int Cleared = 0;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Cleared
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_Cleared();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Cleared
      static void _set_Cleared(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Failed
      static constexpr const int Failed = 1;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Failed
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_Failed();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Failed
      static void _set_Failed(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason GivenUp
      static constexpr const int GivenUp = 2;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason GivenUp
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_GivenUp();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason GivenUp
      static void _set_GivenUp(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Quit
      static constexpr const int Quit = 3;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Quit
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_Quit();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason Quit
      static void _set_Quit(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason HostEndedLevel
      static constexpr const int HostEndedLevel = 4;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason HostEndedLevel
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_HostEndedLevel();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason HostEndedLevel
      static void _set_HostEndedLevel(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason WasInactive
      static constexpr const int WasInactive = 5;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason WasInactive
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_WasInactive();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason WasInactive
      static void _set_WasInactive(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason StartupFailed
      static constexpr const int StartupFailed = 6;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason StartupFailed
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_StartupFailed();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason StartupFailed
      static void _set_StartupFailed(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // static field const value: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason ConnectedAfterLevelEnded
      static constexpr const int ConnectedAfterLevelEnded = 7;
      // Get static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason ConnectedAfterLevelEnded
      static ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason _get_ConnectedAfterLevelEnded();
      // Set static field: static public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason ConnectedAfterLevelEnded
      static void _set_ConnectedAfterLevelEnded(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason
    #pragma pack(pop)
    static check_size<sizeof(MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason), 0 + sizeof(int)> __GlobalNamespace_MultiplayerLevelCompletionResults_MultiplayerPlayerLevelEndReasonSizeCheck;
    static_assert(sizeof(MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason) == 0x4);
    public:
    // private readonly MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState _playerLevelEndState
    // Size: 0x4
    // Offset: 0x10
    ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState playerLevelEndState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState) == 0x4);
    // private readonly MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason _playerLevelEndReason
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason playerLevelEndReason;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason) == 0x4);
    // private readonly LevelCompletionResults _levelCompletionResults
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::LevelCompletionResults* levelCompletionResults;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LevelCompletionResults*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::LiteNetLib::Utils::INetImmutableSerializable_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>
    operator ::LiteNetLib::Utils::INetImmutableSerializable_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>() noexcept {
      return *reinterpret_cast<::LiteNetLib::Utils::INetImmutableSerializable_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*>(this);
    }
    // Creating interface conversion operator: i_MultiplayerLevelCompletionResults
    inline ::LiteNetLib::Utils::INetImmutableSerializable_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>* i_MultiplayerLevelCompletionResults() noexcept {
      return reinterpret_cast<::LiteNetLib::Utils::INetImmutableSerializable_1<::GlobalNamespace::MultiplayerLevelCompletionResults*>*>(this);
    }
    // Creating interface conversion operator: operator ::System::IComparable
    operator ::System::IComparable() noexcept {
      return *reinterpret_cast<::System::IComparable*>(this);
    }
    // Creating interface conversion operator: i_IComparable
    inline ::System::IComparable* i_IComparable() noexcept {
      return reinterpret_cast<::System::IComparable*>(this);
    }
    // Get instance field reference: private readonly MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState _playerLevelEndState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState& dyn__playerLevelEndState();
    // Get instance field reference: private readonly MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason _playerLevelEndReason
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason& dyn__playerLevelEndReason();
    // Get instance field reference: private readonly LevelCompletionResults _levelCompletionResults
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LevelCompletionResults*& dyn__levelCompletionResults();
    // public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState get_playerLevelEndState()
    // Offset: 0x19F87E0
    ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState get_playerLevelEndState();
    // public MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason get_playerLevelEndReason()
    // Offset: 0x19F87E8
    ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason get_playerLevelEndReason();
    // public LevelCompletionResults get_levelCompletionResults()
    // Offset: 0x19F87F0
    ::GlobalNamespace::LevelCompletionResults* get_levelCompletionResults();
    // public System.Boolean get_hasAnyResults()
    // Offset: 0x19F87F8
    bool get_hasAnyResults();
    // public System.Boolean get_failedOrGivenUp()
    // Offset: 0x19F8814
    bool get_failedOrGivenUp();
    // public System.Void .ctor()
    // Offset: 0x19F8828
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLevelCompletionResults* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLevelCompletionResults::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLevelCompletionResults*, creationType>()));
    }
    // public System.Void .ctor(MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState playerLevelEndState, MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason playerLevelEndReason, LevelCompletionResults levelCompletionResults)
    // Offset: 0x19F8830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLevelCompletionResults* New_ctor(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState playerLevelEndState, ::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason playerLevelEndReason, ::GlobalNamespace::LevelCompletionResults* levelCompletionResults) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLevelCompletionResults::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLevelCompletionResults*, creationType>(playerLevelEndState, playerLevelEndReason, levelCompletionResults)));
    }
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x19F8870
    void Serialize(::LiteNetLib::Utils::NetDataWriter* writer);
    // public MultiplayerLevelCompletionResults CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x19F88E0
    ::GlobalNamespace::MultiplayerLevelCompletionResults* CreateFromSerializedData(::LiteNetLib::Utils::NetDataReader* reader);
    // public System.Int32 CompareTo(System.Object obj)
    // Offset: 0x19F898C
    int CompareTo(::Il2CppObject* obj);
    // static public System.Boolean HasAnyResult(MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState playerLevelEndState)
    // Offset: 0x19F8808
    static bool HasAnyResult(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState playerLevelEndState);
  }; // MultiplayerLevelCompletionResults
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerLevelCompletionResults), 24 + sizeof(::GlobalNamespace::LevelCompletionResults*)> __GlobalNamespace_MultiplayerLevelCompletionResultsSizeCheck;
  static_assert(sizeof(MultiplayerLevelCompletionResults) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason, "", "MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndReason");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState, "", "MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::get_playerLevelEndState
// Il2CppName: get_playerLevelEndState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState (GlobalNamespace::MultiplayerLevelCompletionResults::*)()>(&GlobalNamespace::MultiplayerLevelCompletionResults::get_playerLevelEndState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "get_playerLevelEndState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::get_playerLevelEndReason
// Il2CppName: get_playerLevelEndReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndReason (GlobalNamespace::MultiplayerLevelCompletionResults::*)()>(&GlobalNamespace::MultiplayerLevelCompletionResults::get_playerLevelEndReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "get_playerLevelEndReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::get_levelCompletionResults
// Il2CppName: get_levelCompletionResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LevelCompletionResults* (GlobalNamespace::MultiplayerLevelCompletionResults::*)()>(&GlobalNamespace::MultiplayerLevelCompletionResults::get_levelCompletionResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "get_levelCompletionResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::get_hasAnyResults
// Il2CppName: get_hasAnyResults
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerLevelCompletionResults::*)()>(&GlobalNamespace::MultiplayerLevelCompletionResults::get_hasAnyResults)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "get_hasAnyResults", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::get_failedOrGivenUp
// Il2CppName: get_failedOrGivenUp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MultiplayerLevelCompletionResults::*)()>(&GlobalNamespace::MultiplayerLevelCompletionResults::get_failedOrGivenUp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "get_failedOrGivenUp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::Serialize
// Il2CppName: Serialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLevelCompletionResults::*)(::LiteNetLib::Utils::NetDataWriter*)>(&GlobalNamespace::MultiplayerLevelCompletionResults::Serialize)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "Serialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::CreateFromSerializedData
// Il2CppName: CreateFromSerializedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerLevelCompletionResults* (GlobalNamespace::MultiplayerLevelCompletionResults::*)(::LiteNetLib::Utils::NetDataReader*)>(&GlobalNamespace::MultiplayerLevelCompletionResults::CreateFromSerializedData)> {
  static const MethodInfo* get() {
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "CreateFromSerializedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reader});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::MultiplayerLevelCompletionResults::*)(::Il2CppObject*)>(&GlobalNamespace::MultiplayerLevelCompletionResults::CompareTo)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLevelCompletionResults::HasAnyResult
// Il2CppName: HasAnyResult
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::GlobalNamespace::MultiplayerLevelCompletionResults::MultiplayerPlayerLevelEndState)>(&GlobalNamespace::MultiplayerLevelCompletionResults::HasAnyResult)> {
  static const MethodInfo* get() {
    static auto* playerLevelEndState = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults/MultiplayerPlayerLevelEndState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLevelCompletionResults*), "HasAnyResult", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerLevelEndState});
  }
};
