// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IAudioTimeSource
#include "GlobalNamespace/IAudioTimeSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MockAudioTimeSource
  class MockAudioTimeSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MockAudioTimeSource);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockAudioTimeSource*, "", "MockAudioTimeSource");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: MockAudioTimeSource
  // [TokenAttribute] Offset: FFFFFFFF
  class MockAudioTimeSource : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IAudioTimeSource*/ {
    public:
    public:
    // private System.Single <songTime>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    float songTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <lastFrameDeltaSongTime>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    float lastFrameDeltaSongTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IAudioTimeSource
    operator ::GlobalNamespace::IAudioTimeSource() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IAudioTimeSource*>(this);
    }
    // Creating interface conversion operator: i_IAudioTimeSource
    inline ::GlobalNamespace::IAudioTimeSource* i_IAudioTimeSource() noexcept {
      return reinterpret_cast<::GlobalNamespace::IAudioTimeSource*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single <songTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$songTime$k__BackingField();
    // Get instance field reference: private System.Single <lastFrameDeltaSongTime>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$lastFrameDeltaSongTime$k__BackingField();
    // public System.Single get_songTime()
    // Offset: 0x1419860
    float get_songTime();
    // private System.Void set_songTime(System.Single value)
    // Offset: 0x1419868
    void set_songTime(float value);
    // public System.Single get_lastFrameDeltaSongTime()
    // Offset: 0x1419870
    float get_lastFrameDeltaSongTime();
    // private System.Void set_lastFrameDeltaSongTime(System.Single value)
    // Offset: 0x1419878
    void set_lastFrameDeltaSongTime(float value);
    // public System.Single get_songEndTime()
    // Offset: 0x1419880
    float get_songEndTime();
    // public System.Single get_songLength()
    // Offset: 0x141988C
    float get_songLength();
    // public System.Boolean get_isReady()
    // Offset: 0x1419898
    bool get_isReady();
    // public System.Void .ctor()
    // Offset: 0x14198E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockAudioTimeSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockAudioTimeSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockAudioTimeSource*, creationType>()));
    }
    // protected System.Void Update()
    // Offset: 0x14198A0
    void Update();
  }; // MockAudioTimeSource
  #pragma pack(pop)
  static check_size<sizeof(MockAudioTimeSource), 28 + sizeof(float)> __GlobalNamespace_MockAudioTimeSourceSizeCheck;
  static_assert(sizeof(MockAudioTimeSource) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::get_songTime
// Il2CppName: get_songTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockAudioTimeSource::*)()>(&GlobalNamespace::MockAudioTimeSource::get_songTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "get_songTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::set_songTime
// Il2CppName: set_songTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockAudioTimeSource::*)(float)>(&GlobalNamespace::MockAudioTimeSource::set_songTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "set_songTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::get_lastFrameDeltaSongTime
// Il2CppName: get_lastFrameDeltaSongTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockAudioTimeSource::*)()>(&GlobalNamespace::MockAudioTimeSource::get_lastFrameDeltaSongTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "get_lastFrameDeltaSongTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::set_lastFrameDeltaSongTime
// Il2CppName: set_lastFrameDeltaSongTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockAudioTimeSource::*)(float)>(&GlobalNamespace::MockAudioTimeSource::set_lastFrameDeltaSongTime)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "set_lastFrameDeltaSongTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::get_songEndTime
// Il2CppName: get_songEndTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockAudioTimeSource::*)()>(&GlobalNamespace::MockAudioTimeSource::get_songEndTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "get_songEndTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::get_songLength
// Il2CppName: get_songLength
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MockAudioTimeSource::*)()>(&GlobalNamespace::MockAudioTimeSource::get_songLength)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "get_songLength", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::get_isReady
// Il2CppName: get_isReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MockAudioTimeSource::*)()>(&GlobalNamespace::MockAudioTimeSource::get_isReady)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "get_isReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockAudioTimeSource::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MockAudioTimeSource::*)()>(&GlobalNamespace::MockAudioTimeSource::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockAudioTimeSource*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
