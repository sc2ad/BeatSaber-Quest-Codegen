// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportSupport
#include "GlobalNamespace/TeleportSupport.hpp"
// Including type: LocomotionTeleport
#include "GlobalNamespace/LocomotionTeleport.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Ray
  struct Ray;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportInputHandler
  class TeleportInputHandler;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportInputHandler);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportInputHandler*, "", "TeleportInputHandler");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: TeleportInputHandler
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportInputHandler : public ::GlobalNamespace::TeleportSupport {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::TeleportInputHandler::$TeleportReadyCoroutine$d__5
    class $TeleportReadyCoroutine$d__5;
    // Nested type: ::GlobalNamespace::TeleportInputHandler::$TeleportAimCoroutine$d__6
    class $TeleportAimCoroutine$d__6;
    public:
    // private readonly System.Action _startReadyAction
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* startReadyAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private readonly System.Action _startAimAction
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* startAimAction;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private readonly System.Action _startReadyAction
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn__startReadyAction();
    // Get instance field reference: private readonly System.Action _startAimAction
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn__startAimAction();
    // private System.Collections.IEnumerator TeleportReadyCoroutine()
    // Offset: 0xCF5084
    ::System::Collections::IEnumerator* TeleportReadyCoroutine();
    // private System.Collections.IEnumerator TeleportAimCoroutine()
    // Offset: 0xCF5120
    ::System::Collections::IEnumerator* TeleportAimCoroutine();
    // public LocomotionTeleport/TeleportIntentions GetIntention()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::LocomotionTeleport::TeleportIntentions GetIntention();
    // public System.Void GetAimData(out UnityEngine.Ray aimRay)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void GetAimData(ByRef<::UnityEngine::Ray> aimRay);
    // private System.Void <.ctor>b__2_0()
    // Offset: 0xCF51BC
    void $_ctor$b__2_0();
    // private System.Void <.ctor>b__2_1()
    // Offset: 0xCF51E8
    void $_ctor$b__2_1();
    // protected System.Void .ctor()
    // Offset: 0xCF4EC4
    // Implemented from: TeleportSupport
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportInputHandler* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportInputHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportInputHandler*, creationType>()));
    }
    // protected override System.Void AddEventHandlers()
    // Offset: 0xCF4F70
    // Implemented from: TeleportSupport
    // Base method: System.Void TeleportSupport::AddEventHandlers()
    void AddEventHandlers();
    // protected override System.Void RemoveEventHandlers()
    // Offset: 0xCF4FC8
    // Implemented from: TeleportSupport
    // Base method: System.Void TeleportSupport::RemoveEventHandlers()
    void RemoveEventHandlers();
  }; // TeleportInputHandler
  #pragma pack(pop)
  static check_size<sizeof(TeleportInputHandler), 48 + sizeof(::System::Action*)> __GlobalNamespace_TeleportInputHandlerSizeCheck;
  static_assert(sizeof(TeleportInputHandler) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::TeleportReadyCoroutine
// Il2CppName: TeleportReadyCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::TeleportReadyCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "TeleportReadyCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::TeleportAimCoroutine
// Il2CppName: TeleportAimCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::TeleportAimCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "TeleportAimCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::GetIntention
// Il2CppName: GetIntention
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LocomotionTeleport::TeleportIntentions (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::GetIntention)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "GetIntention", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::GetAimData
// Il2CppName: GetAimData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandler::*)(ByRef<::UnityEngine::Ray>)>(&GlobalNamespace::TeleportInputHandler::GetAimData)> {
  static const MethodInfo* get() {
    static auto* aimRay = &::il2cpp_utils::GetClassFromName("UnityEngine", "Ray")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "GetAimData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aimRay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::$_ctor$b__2_0
// Il2CppName: <.ctor>b__2_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::$_ctor$b__2_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "<.ctor>b__2_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::$_ctor$b__2_1
// Il2CppName: <.ctor>b__2_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::$_ctor$b__2_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "<.ctor>b__2_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::AddEventHandlers
// Il2CppName: AddEventHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::AddEventHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "AddEventHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportInputHandler::RemoveEventHandlers
// Il2CppName: RemoveEventHandlers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportInputHandler::*)()>(&GlobalNamespace::TeleportInputHandler::RemoveEventHandlers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportInputHandler*), "RemoveEventHandlers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
