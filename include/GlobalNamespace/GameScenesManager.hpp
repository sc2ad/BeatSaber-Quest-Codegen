// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SceneInfo
  class SceneInfo;
  // Forward declaring type: ScenesTransitionSetupDataSO
  class ScenesTransitionSetupDataSO;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ZenjectSceneLoader
  class ZenjectSceneLoader;
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WaitUntil
  class WaitUntil;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GameScenesManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameScenesManager*, "", "GameScenesManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: GameScenesManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GameScenesManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GameScenesManager::ScenesStackData
    class ScenesStackData;
    // Nested type: ::GlobalNamespace::GameScenesManager::ScenePresentType
    struct ScenePresentType;
    // Nested type: ::GlobalNamespace::GameScenesManager::SceneDismissType
    struct SceneDismissType;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass31_0
    class $$c__DisplayClass31_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass32_0
    class $$c__DisplayClass32_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass33_0
    class $$c__DisplayClass33_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass35_0
    class $$c__DisplayClass35_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$$c__DisplayClass38_0
    class $$c__DisplayClass38_0;
    // Nested type: ::GlobalNamespace::GameScenesManager::$ScenesTransitionCoroutine$d__38
    class $ScenesTransitionCoroutine$d__38;
    public:
    // private SceneInfo _emptyTransitionSceneInfo
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::SceneInfo* emptyTransitionSceneInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SceneInfo*) == 0x8);
    // [InjectAttribute] Offset: 0x10B5318
    // private readonly Zenject.ZenjectSceneLoader _zenjectSceneLoader
    // Size: 0x8
    // Offset: 0x20
    ::Zenject::ZenjectSceneLoader* zenjectSceneLoader;
    // Field size check
    static_assert(sizeof(::Zenject::ZenjectSceneLoader*) == 0x8);
    // private System.Action`1<System.Single> transitionDidStartEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<float>* transitionDidStartEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    // private System.Action beforeDismissingScenesEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* beforeDismissingScenesEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> transitionDidFinishEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* transitionDidFinishEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*) == 0x8);
    // private System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> installEarlyBindingsEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* installEarlyBindingsEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*) == 0x8);
    // private System.Boolean _inTransition
    // Size: 0x1
    // Offset: 0x48
    bool inTransition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inTransition and: scenesStack
    char __padding6[0x7] = {};
    // private readonly System.Collections.Generic.List`1<GameScenesManager/ScenesStackData> _scenesStack
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::GlobalNamespace::GameScenesManager::ScenesStackData*>* scenesStack;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::GameScenesManager::ScenesStackData*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _neverUnloadScenes
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::HashSet_1<::StringW>* neverUnloadScenes;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single kStandardTransitionLength
    static constexpr const float kStandardTransitionLength = 0.7;
    // Get static field: static public System.Single kStandardTransitionLength
    static float _get_kStandardTransitionLength();
    // Set static field: static public System.Single kStandardTransitionLength
    static void _set_kStandardTransitionLength(float value);
    // static field const value: static public System.Single kShortTransitionLength
    static constexpr const float kShortTransitionLength = 0.35;
    // Get static field: static public System.Single kShortTransitionLength
    static float _get_kShortTransitionLength();
    // Set static field: static public System.Single kShortTransitionLength
    static void _set_kShortTransitionLength(float value);
    // static field const value: static public System.Single kLongTransitionLength
    static constexpr const float kLongTransitionLength = 1.3;
    // Get static field: static public System.Single kLongTransitionLength
    static float _get_kLongTransitionLength();
    // Set static field: static public System.Single kLongTransitionLength
    static void _set_kLongTransitionLength(float value);
    // static field const value: static private System.String kRootContainerGOName
    static constexpr const char* kRootContainerGOName = "RootContainer";
    // Get static field: static private System.String kRootContainerGOName
    static ::StringW _get_kRootContainerGOName();
    // Set static field: static private System.String kRootContainerGOName
    static void _set_kRootContainerGOName(::StringW value);
    // Get instance field reference: private SceneInfo _emptyTransitionSceneInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SceneInfo*& dyn__emptyTransitionSceneInfo();
    // Get instance field reference: private readonly Zenject.ZenjectSceneLoader _zenjectSceneLoader
    [[deprecated("Use field access instead!")]] ::Zenject::ZenjectSceneLoader*& dyn__zenjectSceneLoader();
    // Get instance field reference: private System.Action`1<System.Single> transitionDidStartEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<float>*& dyn_transitionDidStartEvent();
    // Get instance field reference: private System.Action beforeDismissingScenesEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_beforeDismissingScenesEvent();
    // Get instance field reference: private System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> transitionDidFinishEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*& dyn_transitionDidFinishEvent();
    // Get instance field reference: private System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> installEarlyBindingsEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*& dyn_installEarlyBindingsEvent();
    // Get instance field reference: private System.Boolean _inTransition
    [[deprecated("Use field access instead!")]] bool& dyn__inTransition();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<GameScenesManager/ScenesStackData> _scenesStack
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::GameScenesManager::ScenesStackData*>*& dyn__scenesStack();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _neverUnloadScenes
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__neverUnloadScenes();
    // public Zenject.DiContainer get_currentScenesContainer()
    // Offset: 0x15AFB28
    ::Zenject::DiContainer* get_currentScenesContainer();
    // public System.Boolean get_isInTransition()
    // Offset: 0x15AFB88
    bool get_isInTransition();
    // public UnityEngine.WaitUntil get_waitUntilSceneTransitionFinish()
    // Offset: 0x15AFB90
    ::UnityEngine::WaitUntil* get_waitUntilSceneTransitionFinish();
    // public System.Void add_transitionDidStartEvent(System.Action`1<System.Single> value)
    // Offset: 0x15AF608
    void add_transitionDidStartEvent(::System::Action_1<float>* value);
    // public System.Void remove_transitionDidStartEvent(System.Action`1<System.Single> value)
    // Offset: 0x15AF6AC
    void remove_transitionDidStartEvent(::System::Action_1<float>* value);
    // public System.Void add_beforeDismissingScenesEvent(System.Action value)
    // Offset: 0x15AF750
    void add_beforeDismissingScenesEvent(::System::Action* value);
    // public System.Void remove_beforeDismissingScenesEvent(System.Action value)
    // Offset: 0x15AF7F4
    void remove_beforeDismissingScenesEvent(::System::Action* value);
    // public System.Void add_transitionDidFinishEvent(System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> value)
    // Offset: 0x15AF898
    void add_transitionDidFinishEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value);
    // public System.Void remove_transitionDidFinishEvent(System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> value)
    // Offset: 0x15AF93C
    void remove_transitionDidFinishEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value);
    // public System.Void add_installEarlyBindingsEvent(System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> value)
    // Offset: 0x15AF9E0
    void add_installEarlyBindingsEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value);
    // public System.Void remove_installEarlyBindingsEvent(System.Action`2<ScenesTransitionSetupDataSO,Zenject.DiContainer> value)
    // Offset: 0x15AFA84
    void remove_installEarlyBindingsEvent(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>* value);
    // public System.Void .ctor()
    // Offset: 0x15B1C60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameScenesManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameScenesManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameScenesManager*, creationType>()));
    }
    // public System.Void MarkSceneAsPersistent(System.String sceneName)
    // Offset: 0x15AFC28
    void MarkSceneAsPersistent(::StringW sceneName);
    // public System.Collections.Generic.List`1<System.String> GetCurrentlyLoadedSceneNames()
    // Offset: 0x15AFC90
    ::System::Collections::Generic::List_1<::StringW>* GetCurrentlyLoadedSceneNames();
    // public System.Void PushScenes(ScenesTransitionSetupDataSO scenesTransitionSetupData, System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> finishCallback)
    // Offset: 0x15AFDEC
    void PushScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback);
    // public System.Void PopScenes(System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> finishCallback)
    // Offset: 0x15B0250
    void PopScenes(float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback);
    // public System.Void ReplaceScenes(ScenesTransitionSetupDataSO scenesTransitionSetupData, System.Collections.IEnumerator[] beforeNewScenesActivateRoutines, System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> finishCallback)
    // Offset: 0x15B0424
    void ReplaceScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, ::ArrayW<::System::Collections::IEnumerator*> beforeNewScenesActivateRoutines, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback);
    // public System.Void ClearAndOpenScenes(ScenesTransitionSetupDataSO scenesTransitionSetupData, System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> finishCallback, System.Boolean unloadAllScenes)
    // Offset: 0x15B066C
    void ClearAndOpenScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback, bool unloadAllScenes);
    // public System.Void AppendScenes(ScenesTransitionSetupDataSO scenesTransitionSetupData, System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> finishCallback)
    // Offset: 0x15B0A7C
    void AppendScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupData, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback);
    // public System.Void RemoveScenes(ScenesTransitionSetupDataSO scenesTransitionSetupDataSo, System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> finishCallback)
    // Offset: 0x15B0D34
    void RemoveScenes(::GlobalNamespace::ScenesTransitionSetupDataSO* scenesTransitionSetupDataSo, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback);
    // private System.Collections.IEnumerator ScenesTransitionCoroutine(ScenesTransitionSetupDataSO newScenesTransitionSetupData, System.Collections.Generic.List`1<System.String> scenesToPresent, GameScenesManager/ScenePresentType presentType, System.Collections.Generic.List`1<System.String> scenesToDismiss, GameScenesManager/SceneDismissType dismissType, System.Single minDuration, System.Action afterMinDurationCallback, System.Action`1<Zenject.DiContainer> extraBindingsCallback, System.Action`1<Zenject.DiContainer> finishCallback)
    // Offset: 0x15B0178
    ::System::Collections::IEnumerator* ScenesTransitionCoroutine(::GlobalNamespace::ScenesTransitionSetupDataSO* newScenesTransitionSetupData, ::System::Collections::Generic::List_1<::StringW>* scenesToPresent, ::GlobalNamespace::GameScenesManager::ScenePresentType presentType, ::System::Collections::Generic::List_1<::StringW>* scenesToDismiss, ::GlobalNamespace::GameScenesManager::SceneDismissType dismissType, float minDuration, ::System::Action* afterMinDurationCallback, ::System::Action_1<::Zenject::DiContainer*>* extraBindingsCallback, ::System::Action_1<::Zenject::DiContainer*>* finishCallback);
    // static private System.Void ActivatePresentedSceneRootObjects(System.Collections.Generic.List`1<System.String> scenesToPresent)
    // Offset: 0x15B1038
    static void ActivatePresentedSceneRootObjects(::System::Collections::Generic::List_1<::StringW>* scenesToPresent);
    // private System.Boolean IsAnySceneInStack(System.Collections.Generic.List`1<System.String> sceneNames)
    // Offset: 0x15B1288
    bool IsAnySceneInStack(::System::Collections::Generic::List_1<::StringW>* sceneNames);
    // private System.Boolean AreAllScenesInStack(System.Collections.Generic.List`1<System.String> sceneNames)
    // Offset: 0x15B160C
    bool AreAllScenesInStack(::System::Collections::Generic::List_1<::StringW>* sceneNames);
    // private System.Boolean IsSceneInStack(System.String searchSceneName)
    // Offset: 0x15B1390
    bool IsSceneInStack(::StringW searchSceneName);
    // private System.Collections.Generic.List`1<System.String> SceneNamesFromSceneInfoArray(SceneInfo[] sceneInfos)
    // Offset: 0x15B006C
    ::System::Collections::Generic::List_1<::StringW>* SceneNamesFromSceneInfoArray(::ArrayW<::GlobalNamespace::SceneInfo*> sceneInfos);
    // private System.Void SetActiveRootObjectsInScenes(System.Collections.Generic.List`1<System.String> sceneNames, System.Boolean value)
    // Offset: 0x15B1614
    void SetActiveRootObjectsInScenes(::System::Collections::Generic::List_1<::StringW>* sceneNames, bool value);
    // private System.Void ReparentRootGameObjectsToDisabledGameObject(System.String sceneName)
    // Offset: 0x15B174C
    void ReparentRootGameObjectsToDisabledGameObject(::StringW sceneName);
    // private System.Void MoveGameObjectsFromContainerToSceneRoot(System.String sceneName)
    // Offset: 0x15B1950
    void MoveGameObjectsFromContainerToSceneRoot(::StringW sceneName);
    // static private System.Void Log(System.String message)
    // Offset: 0x15B1BF8
    static void Log(::StringW message);
    // private System.Boolean <get_waitUntilSceneTransitionFinish>b__22_0()
    // Offset: 0x15B1CF8
    bool $get_waitUntilSceneTransitionFinish$b__22_0();
  }; // GameScenesManager
  #pragma pack(pop)
  static check_size<sizeof(GameScenesManager), 88 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __GlobalNamespace_GameScenesManagerSizeCheck;
  static_assert(sizeof(GameScenesManager) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::get_currentScenesContainer
// Il2CppName: get_currentScenesContainer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Zenject::DiContainer* (GlobalNamespace::GameScenesManager::*)()>(&GlobalNamespace::GameScenesManager::get_currentScenesContainer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "get_currentScenesContainer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::get_isInTransition
// Il2CppName: get_isInTransition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameScenesManager::*)()>(&GlobalNamespace::GameScenesManager::get_isInTransition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "get_isInTransition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::get_waitUntilSceneTransitionFinish
// Il2CppName: get_waitUntilSceneTransitionFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::WaitUntil* (GlobalNamespace::GameScenesManager::*)()>(&GlobalNamespace::GameScenesManager::get_waitUntilSceneTransitionFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "get_waitUntilSceneTransitionFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::add_transitionDidStartEvent
// Il2CppName: add_transitionDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action_1<float>*)>(&GlobalNamespace::GameScenesManager::add_transitionDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "add_transitionDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::remove_transitionDidStartEvent
// Il2CppName: remove_transitionDidStartEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action_1<float>*)>(&GlobalNamespace::GameScenesManager::remove_transitionDidStartEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "remove_transitionDidStartEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::add_beforeDismissingScenesEvent
// Il2CppName: add_beforeDismissingScenesEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action*)>(&GlobalNamespace::GameScenesManager::add_beforeDismissingScenesEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "add_beforeDismissingScenesEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::remove_beforeDismissingScenesEvent
// Il2CppName: remove_beforeDismissingScenesEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action*)>(&GlobalNamespace::GameScenesManager::remove_beforeDismissingScenesEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "remove_beforeDismissingScenesEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::add_transitionDidFinishEvent
// Il2CppName: add_transitionDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::add_transitionDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO"), ::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "add_transitionDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::remove_transitionDidFinishEvent
// Il2CppName: remove_transitionDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::remove_transitionDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO"), ::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "remove_transitionDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::add_installEarlyBindingsEvent
// Il2CppName: add_installEarlyBindingsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::add_installEarlyBindingsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO"), ::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "add_installEarlyBindingsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::remove_installEarlyBindingsEvent
// Il2CppName: remove_installEarlyBindingsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Action_2<::GlobalNamespace::ScenesTransitionSetupDataSO*, ::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::remove_installEarlyBindingsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO"), ::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "remove_installEarlyBindingsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::MarkSceneAsPersistent
// Il2CppName: MarkSceneAsPersistent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::StringW)>(&GlobalNamespace::GameScenesManager::MarkSceneAsPersistent)> {
  static const MethodInfo* get() {
    static auto* sceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "MarkSceneAsPersistent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::GetCurrentlyLoadedSceneNames
// Il2CppName: GetCurrentlyLoadedSceneNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GlobalNamespace::GameScenesManager::*)()>(&GlobalNamespace::GameScenesManager::GetCurrentlyLoadedSceneNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "GetCurrentlyLoadedSceneNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::PushScenes
// Il2CppName: PushScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::GlobalNamespace::ScenesTransitionSetupDataSO*, float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::PushScenes)> {
  static const MethodInfo* get() {
    static auto* scenesTransitionSetupData = &::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO")->byval_arg;
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "PushScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::PopScenes
// Il2CppName: PopScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::PopScenes)> {
  static const MethodInfo* get() {
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "PopScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{minDuration, afterMinDurationCallback, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::ReplaceScenes
// Il2CppName: ReplaceScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::GlobalNamespace::ScenesTransitionSetupDataSO*, ::ArrayW<::System::Collections::IEnumerator*>, float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::ReplaceScenes)> {
  static const MethodInfo* get() {
    static auto* scenesTransitionSetupData = &::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO")->byval_arg;
    static auto* beforeNewScenesActivateRoutines = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System.Collections", "IEnumerator"), 1)->byval_arg;
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "ReplaceScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scenesTransitionSetupData, beforeNewScenesActivateRoutines, minDuration, afterMinDurationCallback, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::ClearAndOpenScenes
// Il2CppName: ClearAndOpenScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::GlobalNamespace::ScenesTransitionSetupDataSO*, float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*, bool)>(&GlobalNamespace::GameScenesManager::ClearAndOpenScenes)> {
  static const MethodInfo* get() {
    static auto* scenesTransitionSetupData = &::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO")->byval_arg;
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    static auto* unloadAllScenes = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "ClearAndOpenScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback, unloadAllScenes});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::AppendScenes
// Il2CppName: AppendScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::GlobalNamespace::ScenesTransitionSetupDataSO*, float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::AppendScenes)> {
  static const MethodInfo* get() {
    static auto* scenesTransitionSetupData = &::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO")->byval_arg;
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "AppendScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scenesTransitionSetupData, minDuration, afterMinDurationCallback, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::RemoveScenes
// Il2CppName: RemoveScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::GlobalNamespace::ScenesTransitionSetupDataSO*, float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::RemoveScenes)> {
  static const MethodInfo* get() {
    static auto* scenesTransitionSetupDataSo = &::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO")->byval_arg;
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "RemoveScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scenesTransitionSetupDataSo, minDuration, afterMinDurationCallback, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::ScenesTransitionCoroutine
// Il2CppName: ScenesTransitionCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GameScenesManager::*)(::GlobalNamespace::ScenesTransitionSetupDataSO*, ::System::Collections::Generic::List_1<::StringW>*, ::GlobalNamespace::GameScenesManager::ScenePresentType, ::System::Collections::Generic::List_1<::StringW>*, ::GlobalNamespace::GameScenesManager::SceneDismissType, float, ::System::Action*, ::System::Action_1<::Zenject::DiContainer*>*, ::System::Action_1<::Zenject::DiContainer*>*)>(&GlobalNamespace::GameScenesManager::ScenesTransitionCoroutine)> {
  static const MethodInfo* get() {
    static auto* newScenesTransitionSetupData = &::il2cpp_utils::GetClassFromName("", "ScenesTransitionSetupDataSO")->byval_arg;
    static auto* scenesToPresent = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* presentType = &::il2cpp_utils::GetClassFromName("", "GameScenesManager/ScenePresentType")->byval_arg;
    static auto* scenesToDismiss = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* dismissType = &::il2cpp_utils::GetClassFromName("", "GameScenesManager/SceneDismissType")->byval_arg;
    static auto* minDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* afterMinDurationCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    static auto* extraBindingsCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "ScenesTransitionCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newScenesTransitionSetupData, scenesToPresent, presentType, scenesToDismiss, dismissType, minDuration, afterMinDurationCallback, extraBindingsCallback, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::ActivatePresentedSceneRootObjects
// Il2CppName: ActivatePresentedSceneRootObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::GameScenesManager::ActivatePresentedSceneRootObjects)> {
  static const MethodInfo* get() {
    static auto* scenesToPresent = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "ActivatePresentedSceneRootObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{scenesToPresent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::IsAnySceneInStack
// Il2CppName: IsAnySceneInStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameScenesManager::*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::GameScenesManager::IsAnySceneInStack)> {
  static const MethodInfo* get() {
    static auto* sceneNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "IsAnySceneInStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneNames});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::AreAllScenesInStack
// Il2CppName: AreAllScenesInStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameScenesManager::*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::GameScenesManager::AreAllScenesInStack)> {
  static const MethodInfo* get() {
    static auto* sceneNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "AreAllScenesInStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneNames});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::IsSceneInStack
// Il2CppName: IsSceneInStack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameScenesManager::*)(::StringW)>(&GlobalNamespace::GameScenesManager::IsSceneInStack)> {
  static const MethodInfo* get() {
    static auto* searchSceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "IsSceneInStack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{searchSceneName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::SceneNamesFromSceneInfoArray
// Il2CppName: SceneNamesFromSceneInfoArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GlobalNamespace::GameScenesManager::*)(::ArrayW<::GlobalNamespace::SceneInfo*>)>(&GlobalNamespace::GameScenesManager::SceneNamesFromSceneInfoArray)> {
  static const MethodInfo* get() {
    static auto* sceneInfos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "SceneInfo"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "SceneNamesFromSceneInfoArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneInfos});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::SetActiveRootObjectsInScenes
// Il2CppName: SetActiveRootObjectsInScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::System::Collections::Generic::List_1<::StringW>*, bool)>(&GlobalNamespace::GameScenesManager::SetActiveRootObjectsInScenes)> {
  static const MethodInfo* get() {
    static auto* sceneNames = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "SetActiveRootObjectsInScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneNames, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::ReparentRootGameObjectsToDisabledGameObject
// Il2CppName: ReparentRootGameObjectsToDisabledGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::StringW)>(&GlobalNamespace::GameScenesManager::ReparentRootGameObjectsToDisabledGameObject)> {
  static const MethodInfo* get() {
    static auto* sceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "ReparentRootGameObjectsToDisabledGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::MoveGameObjectsFromContainerToSceneRoot
// Il2CppName: MoveGameObjectsFromContainerToSceneRoot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameScenesManager::*)(::StringW)>(&GlobalNamespace::GameScenesManager::MoveGameObjectsFromContainerToSceneRoot)> {
  static const MethodInfo* get() {
    static auto* sceneName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "MoveGameObjectsFromContainerToSceneRoot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sceneName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::StringW)>(&GlobalNamespace::GameScenesManager::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameScenesManager::$get_waitUntilSceneTransitionFinish$b__22_0
// Il2CppName: <get_waitUntilSceneTransitionFinish>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameScenesManager::*)()>(&GlobalNamespace::GameScenesManager::$get_waitUntilSceneTransitionFinish$b__22_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameScenesManager*), "<get_waitUntilSceneTransitionFinish>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
