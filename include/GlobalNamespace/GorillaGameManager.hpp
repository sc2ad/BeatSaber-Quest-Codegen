// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Photon.Pun.MonoBehaviourPunCallbacks
#include "Photon/Pun/MonoBehaviourPunCallbacks.hpp"
// Including type: Photon.Pun.IPunInstantiateMagicCallback
#include "Photon/Pun/IPunInstantiateMagicCallback.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Room
  class Room;
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: PlayFab::ClientModels
namespace PlayFab::ClientModels {
  // Forward declaring type: GetSharedGroupDataResult
  class GetSharedGroupDataResult;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaGameManager
  class GorillaGameManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaGameManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaGameManager*, "", "GorillaGameManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: GorillaGameManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaGameManager : public ::Photon::Pun::MonoBehaviourPunCallbacks/*, public ::Photon::Pun::IPunInstantiateMagicCallback*/ {
    public:
    // Nested type: ::GlobalNamespace::GorillaGameManager::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::GorillaGameManager::$$c__DisplayClass56_0
    class $$c__DisplayClass56_0;
    public:
    // public Photon.Realtime.Room currentRoom
    // Size: 0x8
    // Offset: 0x20
    ::Photon::Realtime::Room* currentRoom;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Room*) == 0x8);
    // public System.Object obj
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppObject* obj;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public System.Single stepVolumeMax
    // Size: 0x4
    // Offset: 0x30
    float stepVolumeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single stepVolumeMin
    // Size: 0x4
    // Offset: 0x34
    float stepVolumeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fastJumpLimit
    // Size: 0x4
    // Offset: 0x38
    float fastJumpLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fastJumpMultiplier
    // Size: 0x4
    // Offset: 0x3C
    float fastJumpMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowJumpLimit
    // Size: 0x4
    // Offset: 0x40
    float slowJumpLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowJumpMultiplier
    // Size: 0x4
    // Offset: 0x44
    float slowJumpMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _sendReport
    // Size: 0x1
    // Offset: 0x48
    bool sendReport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: sendReport and: suspiciousPlayerId
    char __padding8[0x7] = {};
    // private System.String _suspiciousPlayerId
    // Size: 0x8
    // Offset: 0x50
    ::StringW suspiciousPlayerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _suspiciousPlayerName
    // Size: 0x8
    // Offset: 0x58
    ::StringW suspiciousPlayerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _suspiciousReason
    // Size: 0x8
    // Offset: 0x60
    ::StringW suspiciousReason;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Collections.Generic.List`1<System.String> reportedPlayers
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::StringW>* reportedPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // public System.Byte roomSize
    // Size: 0x1
    // Offset: 0x70
    uint8_t roomSize;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: roomSize and: lastCheck
    char __padding13[0x3] = {};
    // public System.Single lastCheck
    // Size: 0x4
    // Offset: 0x74
    float lastCheck;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single checkCooldown
    // Size: 0x4
    // Offset: 0x78
    float checkCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single userDecayTime
    // Size: 0x4
    // Offset: 0x7C
    float userDecayTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Collections.Generic.Dictionary`2<System.Int32,VRRig> playerVRRigDict
    // Size: 0x8
    // Offset: 0x80
    ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::VRRig*>* playerVRRigDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::VRRig*>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.Single> expectedUsersDecay
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Dictionary_2<::StringW, float>* expectedUsersDecay;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, float>*) == 0x8);
    // public System.Collections.Generic.Dictionary`2<System.String,System.String> playerCosmeticsLookup
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* playerCosmeticsLookup;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // public System.String tempString
    // Size: 0x8
    // Offset: 0x98
    ::StringW tempString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single startingToLookForFriend
    // Size: 0x4
    // Offset: 0xA0
    float startingToLookForFriend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single timeToSpendLookingForFriend
    // Size: 0x4
    // Offset: 0xA4
    float timeToSpendLookingForFriend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean successfullyFoundFriend
    // Size: 0x1
    // Offset: 0xA8
    bool successfullyFoundFriend;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean takeMaster
    // Size: 0x1
    // Offset: 0xA9
    bool takeMaster;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testAssault
    // Size: 0x1
    // Offset: 0xAA
    bool testAssault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean endGameManually
    // Size: 0x1
    // Offset: 0xAB
    bool endGameManually;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: endGameManually and: currentMasterClient
    char __padding26[0x4] = {};
    // public Photon.Realtime.Player currentMasterClient
    // Size: 0x8
    // Offset: 0xB0
    ::Photon::Realtime::Player* currentMasterClient;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public Photon.Pun.PhotonView returnPhotonView
    // Size: 0x8
    // Offset: 0xB8
    ::Photon::Pun::PhotonView* returnPhotonView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // public VRRig returnRig
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::VRRig* returnRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public Photon.Realtime.Player[] currentPlayerArray
    // Size: 0x8
    // Offset: 0xC8
    ::ArrayW<::Photon::Realtime::Player*> currentPlayerArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::Photon::Realtime::Player*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunInstantiateMagicCallback
    operator ::Photon::Pun::IPunInstantiateMagicCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunInstantiateMagicCallback*>(this);
    }
    // Get static field: static public GorillaGameManager instance
    static ::GlobalNamespace::GorillaGameManager* _get_instance();
    // Set static field: static public GorillaGameManager instance
    static void _set_instance(::GlobalNamespace::GorillaGameManager* value);
    // static field const value: static public System.Byte ReportAssault
    static constexpr const uint8_t ReportAssault = 8u;
    // Get static field: static public System.Byte ReportAssault
    static uint8_t _get_ReportAssault();
    // Set static field: static public System.Byte ReportAssault
    static void _set_ReportAssault(uint8_t value);
    // Get instance field reference: public Photon.Realtime.Room currentRoom
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Room*& dyn_currentRoom();
    // Get instance field reference: public System.Object obj
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_obj();
    // Get instance field reference: public System.Single stepVolumeMax
    [[deprecated("Use field access instead!")]] float& dyn_stepVolumeMax();
    // Get instance field reference: public System.Single stepVolumeMin
    [[deprecated("Use field access instead!")]] float& dyn_stepVolumeMin();
    // Get instance field reference: public System.Single fastJumpLimit
    [[deprecated("Use field access instead!")]] float& dyn_fastJumpLimit();
    // Get instance field reference: public System.Single fastJumpMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_fastJumpMultiplier();
    // Get instance field reference: public System.Single slowJumpLimit
    [[deprecated("Use field access instead!")]] float& dyn_slowJumpLimit();
    // Get instance field reference: public System.Single slowJumpMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_slowJumpMultiplier();
    // Get instance field reference: private System.Boolean _sendReport
    [[deprecated("Use field access instead!")]] bool& dyn__sendReport();
    // Get instance field reference: private System.String _suspiciousPlayerId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__suspiciousPlayerId();
    // Get instance field reference: private System.String _suspiciousPlayerName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__suspiciousPlayerName();
    // Get instance field reference: private System.String _suspiciousReason
    [[deprecated("Use field access instead!")]] ::StringW& dyn__suspiciousReason();
    // Get instance field reference: public System.Collections.Generic.List`1<System.String> reportedPlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_reportedPlayers();
    // Get instance field reference: public System.Byte roomSize
    [[deprecated("Use field access instead!")]] uint8_t& dyn_roomSize();
    // Get instance field reference: public System.Single lastCheck
    [[deprecated("Use field access instead!")]] float& dyn_lastCheck();
    // Get instance field reference: public System.Single checkCooldown
    [[deprecated("Use field access instead!")]] float& dyn_checkCooldown();
    // Get instance field reference: public System.Single userDecayTime
    [[deprecated("Use field access instead!")]] float& dyn_userDecayTime();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.Int32,VRRig> playerVRRigDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::VRRig*>*& dyn_playerVRRigDict();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.Single> expectedUsersDecay
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, float>*& dyn_expectedUsersDecay();
    // Get instance field reference: public System.Collections.Generic.Dictionary`2<System.String,System.String> playerCosmeticsLookup
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn_playerCosmeticsLookup();
    // Get instance field reference: public System.String tempString
    [[deprecated("Use field access instead!")]] ::StringW& dyn_tempString();
    // Get instance field reference: public System.Single startingToLookForFriend
    [[deprecated("Use field access instead!")]] float& dyn_startingToLookForFriend();
    // Get instance field reference: public System.Single timeToSpendLookingForFriend
    [[deprecated("Use field access instead!")]] float& dyn_timeToSpendLookingForFriend();
    // Get instance field reference: public System.Boolean successfullyFoundFriend
    [[deprecated("Use field access instead!")]] bool& dyn_successfullyFoundFriend();
    // Get instance field reference: public System.Boolean takeMaster
    [[deprecated("Use field access instead!")]] bool& dyn_takeMaster();
    // Get instance field reference: public System.Boolean testAssault
    [[deprecated("Use field access instead!")]] bool& dyn_testAssault();
    // Get instance field reference: public System.Boolean endGameManually
    [[deprecated("Use field access instead!")]] bool& dyn_endGameManually();
    // Get instance field reference: public Photon.Realtime.Player currentMasterClient
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentMasterClient();
    // Get instance field reference: public Photon.Pun.PhotonView returnPhotonView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_returnPhotonView();
    // Get instance field reference: public VRRig returnRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_returnRig();
    // Get instance field reference: public Photon.Realtime.Player[] currentPlayerArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::Photon::Realtime::Player*>& dyn_currentPlayerArray();
    // public System.Boolean get_sendReport()
    // Offset: 0xC6AAB8
    bool get_sendReport();
    // public System.Void set_sendReport(System.Boolean value)
    // Offset: 0xC6AAC0
    void set_sendReport(bool value);
    // public System.String get_suspiciousPlayerId()
    // Offset: 0xC6AAD8
    ::StringW get_suspiciousPlayerId();
    // public System.Void set_suspiciousPlayerId(System.String value)
    // Offset: 0xC6AAE0
    void set_suspiciousPlayerId(::StringW value);
    // public System.String get_suspiciousPlayerName()
    // Offset: 0xC6AB4C
    ::StringW get_suspiciousPlayerName();
    // public System.Void set_suspiciousPlayerName(System.String value)
    // Offset: 0xC6AB54
    void set_suspiciousPlayerName(::StringW value);
    // public System.String get_suspiciousReason()
    // Offset: 0xC6ABC0
    ::StringW get_suspiciousReason();
    // public System.Void set_suspiciousReason(System.String value)
    // Offset: 0xC6ABC8
    void set_suspiciousReason(::StringW value);
    // protected System.Void .ctor()
    // Offset: 0xC66FC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaGameManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaGameManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaGameManager*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xC6725C
    void Awake();
    // public System.Void Update()
    // Offset: 0xC6AC34
    void Update();
    // public System.Void InfrequentUpdate()
    // Offset: 0xC6BA20
    void InfrequentUpdate();
    // public System.String GameMode()
    // Offset: 0xC6BA8C
    ::StringW GameMode();
    // public System.Void ReportTag(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    // Offset: 0xC6BAD4
    void ReportTag(::Photon::Realtime::Player* taggedPlayer, ::Photon::Realtime::Player* taggingPlayer);
    // public System.Void ReportStep(VRRig steppingRig, System.Boolean isLeftHand, System.Single velocityRatio)
    // Offset: 0xC6BAD8
    void ReportStep(::GlobalNamespace::VRRig* steppingRig, bool isLeftHand, float velocityRatio);
    // private System.Void Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC6BD8C
    void Photon_Pun_IPunInstantiateMagicCallback_OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void NewVRRig(Photon.Realtime.Player player, System.Int32 vrrigPhotonViewID, System.Boolean didTutorial)
    // Offset: 0xC6BE18
    void NewVRRig(::Photon::Realtime::Player* player, int vrrigPhotonViewID, bool didTutorial);
    // public System.Boolean LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0xC6BEB4
    bool LocalCanTag(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public Photon.Pun.PhotonView FindVRRigForPlayer(Photon.Realtime.Player player)
    // Offset: 0xC6BEBC
    ::Photon::Pun::PhotonView* FindVRRigForPlayer(::Photon::Realtime::Player* player);
    // public System.Void ReportTagRPC(Photon.Realtime.Player taggingPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC6C1B8
    void ReportTagRPC(::Photon::Realtime::Player* taggingPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void AttemptGetNewPlayerCosmetic(Photon.Realtime.Player playerToUpdate, System.Int32 attempts)
    // Offset: 0xC6C1BC
    void AttemptGetNewPlayerCosmetic(::Photon::Realtime::Player* playerToUpdate, int attempts);
    // public System.Void UpdatePlayerCosmetic(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC6C61C
    void UpdatePlayerCosmetic(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void JoinPubWithFreinds(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC6C628
    void JoinPubWithFreinds(::Photon::Pun::PhotonMessageInfo info);
    // public System.Single[] LocalPlayerSpeed()
    // Offset: 0xC6C780
    ::ArrayW<float> LocalPlayerSpeed();
    // public System.Boolean FindUserIDInRoom(System.String userID)
    // Offset: 0xC6C808
    bool FindUserIDInRoom(::StringW userID);
    // public System.Int32 MyMatIndex(Photon.Realtime.Player forPlayer)
    // Offset: 0xC6C8E4
    int MyMatIndex(::Photon::Realtime::Player* forPlayer);
    // private System.Void <Update>b__46_0(PlayFab.ClientModels.GetSharedGroupDataResult result)
    // Offset: 0xC6C8EC
    void $Update$b__46_0(::PlayFab::ClientModels::GetSharedGroupDataResult* result);
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0xC6C454
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0xC6C51C
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public override System.Void OnJoinedRoom()
    // Offset: 0xC6C5A4
    // Implemented from: Photon.Pun.MonoBehaviourPunCallbacks
    // Base method: System.Void MonoBehaviourPunCallbacks::OnJoinedRoom()
    void OnJoinedRoom();
  }; // GorillaGameManager
  #pragma pack(pop)
  static check_size<sizeof(GorillaGameManager), 200 + sizeof(::ArrayW<::Photon::Realtime::Player*>)> __GlobalNamespace_GorillaGameManagerSizeCheck;
  static_assert(sizeof(GorillaGameManager) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::get_sendReport
// Il2CppName: get_sendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::get_sendReport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "get_sendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::set_sendReport
// Il2CppName: set_sendReport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(bool)>(&GlobalNamespace::GorillaGameManager::set_sendReport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "set_sendReport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::get_suspiciousPlayerId
// Il2CppName: get_suspiciousPlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::get_suspiciousPlayerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "get_suspiciousPlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::set_suspiciousPlayerId
// Il2CppName: set_suspiciousPlayerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::StringW)>(&GlobalNamespace::GorillaGameManager::set_suspiciousPlayerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "set_suspiciousPlayerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::get_suspiciousPlayerName
// Il2CppName: get_suspiciousPlayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::get_suspiciousPlayerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "get_suspiciousPlayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::set_suspiciousPlayerName
// Il2CppName: set_suspiciousPlayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::StringW)>(&GlobalNamespace::GorillaGameManager::set_suspiciousPlayerName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "set_suspiciousPlayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::get_suspiciousReason
// Il2CppName: get_suspiciousReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::get_suspiciousReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "get_suspiciousReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::set_suspiciousReason
// Il2CppName: set_suspiciousReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::StringW)>(&GlobalNamespace::GorillaGameManager::set_suspiciousReason)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "set_suspiciousReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::InfrequentUpdate
// Il2CppName: InfrequentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::InfrequentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "InfrequentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::GameMode
// Il2CppName: GameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::GameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "GameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ReportTag
// Il2CppName: ReportTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::ReportTag)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* taggingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ReportTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, taggingPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ReportStep
// Il2CppName: ReportStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::GlobalNamespace::VRRig*, bool, float)>(&GlobalNamespace::GorillaGameManager::ReportStep)> {
  static const MethodInfo* get() {
    static auto* steppingRig = &::il2cpp_utils::GetClassFromName("", "VRRig")->byval_arg;
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* velocityRatio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ReportStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{steppingRig, isLeftHand, velocityRatio});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::Photon_Pun_IPunInstantiateMagicCallback_OnPhotonInstantiate
// Il2CppName: Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaGameManager::Photon_Pun_IPunInstantiateMagicCallback_OnPhotonInstantiate)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "Photon.Pun.IPunInstantiateMagicCallback.OnPhotonInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::NewVRRig
// Il2CppName: NewVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, int, bool)>(&GlobalNamespace::GorillaGameManager::NewVRRig)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* vrrigPhotonViewID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* didTutorial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "NewVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, vrrigPhotonViewID, didTutorial});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::LocalCanTag
// Il2CppName: LocalCanTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::LocalCanTag)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "LocalCanTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::FindVRRigForPlayer
// Il2CppName: FindVRRigForPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Photon::Pun::PhotonView* (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::FindVRRigForPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "FindVRRigForPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::ReportTagRPC
// Il2CppName: ReportTagRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaGameManager::ReportTagRPC)> {
  static const MethodInfo* get() {
    static auto* taggingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "ReportTagRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggingPlayer, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::AttemptGetNewPlayerCosmetic
// Il2CppName: AttemptGetNewPlayerCosmetic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*, int)>(&GlobalNamespace::GorillaGameManager::AttemptGetNewPlayerCosmetic)> {
  static const MethodInfo* get() {
    static auto* playerToUpdate = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* attempts = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "AttemptGetNewPlayerCosmetic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerToUpdate, attempts});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::UpdatePlayerCosmetic
// Il2CppName: UpdatePlayerCosmetic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaGameManager::UpdatePlayerCosmetic)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "UpdatePlayerCosmetic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::JoinPubWithFreinds
// Il2CppName: JoinPubWithFreinds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaGameManager::JoinPubWithFreinds)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "JoinPubWithFreinds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::LocalPlayerSpeed
// Il2CppName: LocalPlayerSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::LocalPlayerSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "LocalPlayerSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::FindUserIDInRoom
// Il2CppName: FindUserIDInRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaGameManager::*)(::StringW)>(&GlobalNamespace::GorillaGameManager::FindUserIDInRoom)> {
  static const MethodInfo* get() {
    static auto* userID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "FindUserIDInRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::MyMatIndex
// Il2CppName: MyMatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::MyMatIndex)> {
  static const MethodInfo* get() {
    static auto* forPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "MyMatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::$Update$b__46_0
// Il2CppName: <Update>b__46_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::PlayFab::ClientModels::GetSharedGroupDataResult*)>(&GlobalNamespace::GorillaGameManager::$Update$b__46_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::GetClassFromName("PlayFab.ClientModels", "GetSharedGroupDataResult")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "<Update>b__46_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaGameManager::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaGameManager::OnJoinedRoom
// Il2CppName: OnJoinedRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaGameManager::*)()>(&GlobalNamespace::GorillaGameManager::OnJoinedRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaGameManager*), "OnJoinedRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
