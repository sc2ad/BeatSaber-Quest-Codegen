// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightmapDataSO
  class LightmapDataSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BakedLightDataLoader
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: EFCD18
  class BakedLightDataLoader : public UnityEngine::MonoBehaviour {
    public:
    // [NullAllowed] Offset: 0xF13814
    // private LightmapDataSO _lightmapData
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::LightmapDataSO* lightmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LightmapDataSO*) == 0x8);
    // private UnityEngine.Texture2D _blackTexture
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Texture2D* blackTexture;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture2D*) == 0x8);
    // Creating value type constructor for type: BakedLightDataLoader
    BakedLightDataLoader(GlobalNamespace::LightmapDataSO* lightmapData_ = {}, UnityEngine::Texture2D* blackTexture_ = {}) noexcept : lightmapData{lightmapData_}, blackTexture{blackTexture_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xF13850
    // Get static field: static private readonly System.Int32 _lightMap1PropertyId
    static int _get__lightMap1PropertyId();
    // Set static field: static private readonly System.Int32 _lightMap1PropertyId
    static void _set__lightMap1PropertyId(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xF13860
    // Get static field: static private readonly System.Int32 _lightMap2PropertyId
    static int _get__lightMap2PropertyId();
    // Set static field: static private readonly System.Int32 _lightMap2PropertyId
    static void _set__lightMap2PropertyId(int value);
    // Get instance field reference: private LightmapDataSO _lightmapData
    GlobalNamespace::LightmapDataSO*& dyn__lightmapData();
    // Get instance field reference: private UnityEngine.Texture2D _blackTexture
    UnityEngine::Texture2D*& dyn__blackTexture();
    // public LightmapDataSO get_lightmapData()
    // Offset: 0x126977C
    GlobalNamespace::LightmapDataSO* get_lightmapData();
    // public System.Void set_lightmapData(LightmapDataSO value)
    // Offset: 0x1269784
    void set_lightmapData(GlobalNamespace::LightmapDataSO* value);
    // protected System.Void Start()
    // Offset: 0x126978C
    void Start();
    // private System.Void SetTextureDataToShaders()
    // Offset: 0x1269844
    void SetTextureDataToShaders();
    // public System.Void .ctor()
    // Offset: 0x12699A4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BakedLightDataLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BakedLightDataLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BakedLightDataLoader*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x12699AC
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // BakedLightDataLoader
  #pragma pack(pop)
  static check_size<sizeof(BakedLightDataLoader), 32 + sizeof(UnityEngine::Texture2D*)> __GlobalNamespace_BakedLightDataLoaderSizeCheck;
  static_assert(sizeof(BakedLightDataLoader) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BakedLightDataLoader*, "", "BakedLightDataLoader");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BakedLightDataLoader::get_lightmapData
// Il2CppName: get_lightmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::LightmapDataSO* (GlobalNamespace::BakedLightDataLoader::*)()>(&GlobalNamespace::BakedLightDataLoader::get_lightmapData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakedLightDataLoader*), "get_lightmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakedLightDataLoader::set_lightmapData
// Il2CppName: set_lightmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BakedLightDataLoader::*)(GlobalNamespace::LightmapDataSO*)>(&GlobalNamespace::BakedLightDataLoader::set_lightmapData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LightmapDataSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakedLightDataLoader*), "set_lightmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakedLightDataLoader::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BakedLightDataLoader::*)()>(&GlobalNamespace::BakedLightDataLoader::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakedLightDataLoader*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakedLightDataLoader::SetTextureDataToShaders
// Il2CppName: SetTextureDataToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BakedLightDataLoader::*)()>(&GlobalNamespace::BakedLightDataLoader::SetTextureDataToShaders)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakedLightDataLoader*), "SetTextureDataToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakedLightDataLoader::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BakedLightDataLoader::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BakedLightDataLoader::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakedLightDataLoader*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
