// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapEventTransitionType
#include "GlobalNamespace/BeatmapEventTransitionType.hpp"
// Including type: EnvironmentColorType
#include "GlobalNamespace/EnvironmentColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightColorBaseData
  class LightColorBaseData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightColorBaseData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightColorBaseData*, "", "LightColorBaseData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: LightColorBaseData
  // [TokenAttribute] Offset: FFFFFFFF
  class LightColorBaseData : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Single beat
    // Size: 0x4
    // Offset: 0x10
    float beat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly BeatmapEventTransitionType transitionType
    // Size: 0x4
    // Offset: 0x14
    ::GlobalNamespace::BeatmapEventTransitionType transitionType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapEventTransitionType) == 0x4);
    // public readonly EnvironmentColorType colorType
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::EnvironmentColorType colorType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentColorType) == 0x4);
    // public readonly System.Single brightness
    // Size: 0x4
    // Offset: 0x1C
    float brightness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Int32 strobeBeatFrequency
    // Size: 0x4
    // Offset: 0x20
    int strobeBeatFrequency;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly System.Single beat
    [[deprecated("Use field access instead!")]] float& dyn_beat();
    // Get instance field reference: public readonly BeatmapEventTransitionType transitionType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventTransitionType& dyn_transitionType();
    // Get instance field reference: public readonly EnvironmentColorType colorType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentColorType& dyn_colorType();
    // Get instance field reference: public readonly System.Single brightness
    [[deprecated("Use field access instead!")]] float& dyn_brightness();
    // Get instance field reference: public readonly System.Int32 strobeBeatFrequency
    [[deprecated("Use field access instead!")]] int& dyn_strobeBeatFrequency();
    // public System.Void .ctor(System.Single beat, BeatmapEventTransitionType transitionType, EnvironmentColorType colorType, System.Single brightness, System.Int32 strobeBeatFrequency)
    // Offset: 0x14B8E34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightColorBaseData* New_ctor(float beat, ::GlobalNamespace::BeatmapEventTransitionType transitionType, ::GlobalNamespace::EnvironmentColorType colorType, float brightness, int strobeBeatFrequency) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorBaseData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightColorBaseData*, creationType>(beat, transitionType, colorType, brightness, strobeBeatFrequency)));
    }
  }; // LightColorBaseData
  #pragma pack(pop)
  static check_size<sizeof(LightColorBaseData), 32 + sizeof(int)> __GlobalNamespace_LightColorBaseDataSizeCheck;
  static_assert(sizeof(LightColorBaseData) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightColorBaseData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
