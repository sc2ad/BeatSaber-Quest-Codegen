// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineVirtualCameraBase
  class CinemachineVirtualCameraBase;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CinemachineShotPlayable
  class CinemachineShotPlayable;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CinemachineShotPlayable);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CinemachineShotPlayable*, "", "CinemachineShotPlayable");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: CinemachineShotPlayable
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineShotPlayable : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    public:
    // public Cinemachine.CinemachineVirtualCameraBase VirtualCamera
    // Size: 0x8
    // Offset: 0x10
    ::Cinemachine::CinemachineVirtualCameraBase* VirtualCamera;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineVirtualCameraBase*) == 0x8);
    public:
    // Creating conversion operator: operator ::Cinemachine::CinemachineVirtualCameraBase*
    constexpr operator ::Cinemachine::CinemachineVirtualCameraBase*() const noexcept {
      return VirtualCamera;
    }
    // Get instance field reference: public Cinemachine.CinemachineVirtualCameraBase VirtualCamera
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineVirtualCameraBase*& dyn_VirtualCamera();
    // public System.Boolean get_IsValid()
    // Offset: 0x1BA2A24
    bool get_IsValid();
    // public System.Void .ctor()
    // Offset: 0x1BA374C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineShotPlayable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineShotPlayable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineShotPlayable*, creationType>()));
    }
  }; // CinemachineShotPlayable
  #pragma pack(pop)
  static check_size<sizeof(CinemachineShotPlayable), 16 + sizeof(::Cinemachine::CinemachineVirtualCameraBase*)> __GlobalNamespace_CinemachineShotPlayableSizeCheck;
  static_assert(sizeof(CinemachineShotPlayable) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CinemachineShotPlayable::get_IsValid
// Il2CppName: get_IsValid
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CinemachineShotPlayable::*)()>(&GlobalNamespace::CinemachineShotPlayable::get_IsValid)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineShotPlayable*), "get_IsValid", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CinemachineShotPlayable::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
