// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightGroup
  class LightGroup;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RuntimeLightWithLightGroupIds
  class RuntimeLightWithLightGroupIds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RuntimeLightWithLightGroupIds);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RuntimeLightWithLightGroupIds*, "", "RuntimeLightWithLightGroupIds");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: RuntimeLightWithLightGroupIds
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeLightWithLightGroupIds : public ::GlobalNamespace::LightWithIds {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x30
    char ___base_padding[0x6] = {};
    // Nested type: ::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId
    class LightIntensitiesWithId;
    public:
    // private LightGroup[] _lightGroupList
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::LightGroup*> lightGroupList;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightGroup*>) == 0x8);
    // [SpaceAttribute] Offset: 0x11087F0
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x38
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxIntensity
    // Size: 0x4
    // Offset: 0x3C
    float maxIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _multiplyColorByAlpha
    // Size: 0x1
    // Offset: 0x40
    bool multiplyColorByAlpha;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: multiplyColorByAlpha and: lightIntensityData
    char __padding3[0x7] = {};
    // private RuntimeLightWithLightGroupIds/LightIntensitiesWithId[] _lightIntensityData
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId*> lightIntensityData;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId*>) == 0x8);
    public:
    // Get instance field reference: private LightGroup[] _lightGroupList
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroup*>& dyn__lightGroupList();
    // Get instance field reference: private System.Single _intensity
    [[deprecated("Use field access instead!")]] float& dyn__intensity();
    // Get instance field reference: private System.Single _maxIntensity
    [[deprecated("Use field access instead!")]] float& dyn__maxIntensity();
    // Get instance field reference: private System.Boolean _multiplyColorByAlpha
    [[deprecated("Use field access instead!")]] bool& dyn__multiplyColorByAlpha();
    // Get instance field reference: private RuntimeLightWithLightGroupIds/LightIntensitiesWithId[] _lightIntensityData
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId*>& dyn__lightIntensityData();
    // protected System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ColorWasSet(::UnityEngine::Color color);
    // private UnityEngine.Color ProcessColor(UnityEngine.Color color, System.Single intensity)
    // Offset: 0x1CC48FC
    ::UnityEngine::Color ProcessColor(::UnityEngine::Color color, float intensity);
    // protected System.Void .ctor()
    // Offset: 0x1CBA184
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeLightWithLightGroupIds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithLightGroupIds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeLightWithLightGroupIds*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x1CC4500
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::Awake()
    void Awake();
    // protected override System.Void ProcessNewColorData()
    // Offset: 0x1CC4710
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::ProcessNewColorData()
    void ProcessNewColorData();
    // protected override System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> GetLightWithIds()
    // Offset: 0x1CC49C8
    // Implemented from: LightWithIds
    // Base method: System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> LightWithIds::GetLightWithIds()
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GetLightWithIds();
  }; // RuntimeLightWithLightGroupIds
  #pragma pack(pop)
  static check_size<sizeof(RuntimeLightWithLightGroupIds), 72 + sizeof(::ArrayW<::GlobalNamespace::RuntimeLightWithLightGroupIds::LightIntensitiesWithId*>)> __GlobalNamespace_RuntimeLightWithLightGroupIdsSizeCheck;
  static_assert(sizeof(RuntimeLightWithLightGroupIds) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithLightGroupIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RuntimeLightWithLightGroupIds::*)(::UnityEngine::Color)>(&GlobalNamespace::RuntimeLightWithLightGroupIds::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithLightGroupIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessColor
// Il2CppName: ProcessColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::RuntimeLightWithLightGroupIds::*)(::UnityEngine::Color, float)>(&GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithLightGroupIds*), "ProcessColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, intensity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithLightGroupIds::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithLightGroupIds::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RuntimeLightWithLightGroupIds::*)()>(&GlobalNamespace::RuntimeLightWithLightGroupIds::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithLightGroupIds*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessNewColorData
// Il2CppName: ProcessNewColorData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RuntimeLightWithLightGroupIds::*)()>(&GlobalNamespace::RuntimeLightWithLightGroupIds::ProcessNewColorData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithLightGroupIds*), "ProcessNewColorData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithLightGroupIds::GetLightWithIds
// Il2CppName: GetLightWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* (GlobalNamespace::RuntimeLightWithLightGroupIds::*)()>(&GlobalNamespace::RuntimeLightWithLightGroupIds::GetLightWithIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithLightGroupIds*), "GetLightWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
