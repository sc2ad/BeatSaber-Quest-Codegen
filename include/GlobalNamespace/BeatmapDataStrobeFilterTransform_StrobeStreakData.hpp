// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDataStrobeFilterTransform
#include "GlobalNamespace/BeatmapDataStrobeFilterTransform.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3D
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataStrobeFilterTransform/StrobeStreakData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapDataStrobeFilterTransform::StrobeStreakData : public ::Il2CppObject {
    public:
    // public System.Boolean isActive
    // Size: 0x1
    // Offset: 0x10
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: strobeStartTime
    char __padding0[0x3] = {};
    // public System.Single strobeStartTime
    // Size: 0x4
    // Offset: 0x14
    float strobeStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public ColorType startColorType
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::ColorType startColorType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorType) == 0x4);
    // public System.Single lastSwitchTime
    // Size: 0x4
    // Offset: 0x1C
    float lastSwitchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public ColorType lastColorType
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::ColorType lastColorType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorType) == 0x4);
    // public System.Boolean lastIsOn
    // Size: 0x1
    // Offset: 0x24
    bool lastIsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastIsOn and: lastSwitchBeatmapIndex
    char __padding5[0x3] = {};
    // public System.Int32 lastSwitchBeatmapIndex
    // Size: 0x4
    // Offset: 0x28
    int lastSwitchBeatmapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastSwitchBeatmapIndex and: originalBeatmapEventData
    char __padding6[0x4] = {};
    // public BeatmapEventData originalBeatmapEventData
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapEventData* originalBeatmapEventData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventData*) == 0x8);
    // public System.Int32 originalBeatmapDataIndex
    // Size: 0x4
    // Offset: 0x38
    int originalBeatmapDataIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _foundFirstColoredEventData
    // Size: 0x1
    // Offset: 0x3C
    bool foundFirstColoredEventData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: StrobeStreakData
    StrobeStreakData(bool isActive_ = {}, float strobeStartTime_ = {}, GlobalNamespace::ColorType startColorType_ = {}, float lastSwitchTime_ = {}, GlobalNamespace::ColorType lastColorType_ = {}, bool lastIsOn_ = {}, int lastSwitchBeatmapIndex_ = {}, GlobalNamespace::BeatmapEventData* originalBeatmapEventData_ = {}, int originalBeatmapDataIndex_ = {}, bool foundFirstColoredEventData_ = {}) noexcept : isActive{isActive_}, strobeStartTime{strobeStartTime_}, startColorType{startColorType_}, lastSwitchTime{lastSwitchTime_}, lastColorType{lastColorType_}, lastIsOn{lastIsOn_}, lastSwitchBeatmapIndex{lastSwitchBeatmapIndex_}, originalBeatmapEventData{originalBeatmapEventData_}, originalBeatmapDataIndex{originalBeatmapDataIndex_}, foundFirstColoredEventData{foundFirstColoredEventData_} {}
    // Get instance field reference: public System.Boolean isActive
    bool& dyn_isActive();
    // Get instance field reference: public System.Single strobeStartTime
    float& dyn_strobeStartTime();
    // Get instance field reference: public ColorType startColorType
    GlobalNamespace::ColorType& dyn_startColorType();
    // Get instance field reference: public System.Single lastSwitchTime
    float& dyn_lastSwitchTime();
    // Get instance field reference: public ColorType lastColorType
    GlobalNamespace::ColorType& dyn_lastColorType();
    // Get instance field reference: public System.Boolean lastIsOn
    bool& dyn_lastIsOn();
    // Get instance field reference: public System.Int32 lastSwitchBeatmapIndex
    int& dyn_lastSwitchBeatmapIndex();
    // Get instance field reference: public BeatmapEventData originalBeatmapEventData
    GlobalNamespace::BeatmapEventData*& dyn_originalBeatmapEventData();
    // Get instance field reference: public System.Int32 originalBeatmapDataIndex
    int& dyn_originalBeatmapDataIndex();
    // Get instance field reference: private System.Boolean _foundFirstColoredEventData
    bool& dyn__foundFirstColoredEventData();
    // public System.Void StartPotentialStrobe(BeatmapEventData startEventData, System.Int32 originalIndex)
    // Offset: 0x127A2AC
    void StartPotentialStrobe(GlobalNamespace::BeatmapEventData* startEventData, int originalIndex);
    // public System.Void AddStrobeData(BeatmapEventData eventData, System.Int32 beatmapIndex)
    // Offset: 0x127A0DC
    void AddStrobeData(GlobalNamespace::BeatmapEventData* eventData, int beatmapIndex);
    // public System.Void .ctor()
    // Offset: 0x127A0D4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataStrobeFilterTransform::StrobeStreakData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataStrobeFilterTransform::StrobeStreakData*, creationType>()));
    }
  }; // BeatmapDataStrobeFilterTransform/StrobeStreakData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataStrobeFilterTransform::StrobeStreakData), 60 + sizeof(bool)> __GlobalNamespace_BeatmapDataStrobeFilterTransform_StrobeStreakDataSizeCheck;
  static_assert(sizeof(BeatmapDataStrobeFilterTransform::StrobeStreakData) == 0x3D);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData*, "", "BeatmapDataStrobeFilterTransform/StrobeStreakData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::StartPotentialStrobe
// Il2CppName: StartPotentialStrobe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::*)(GlobalNamespace::BeatmapEventData*, int)>(&GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::StartPotentialStrobe)> {
  static const MethodInfo* get() {
    static auto* startEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    static auto* originalIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData*), "StartPotentialStrobe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startEventData, originalIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::AddStrobeData
// Il2CppName: AddStrobeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::*)(GlobalNamespace::BeatmapEventData*, int)>(&GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::AddStrobeData)> {
  static const MethodInfo* get() {
    static auto* eventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    static auto* beatmapIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData*), "AddStrobeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{eventData, beatmapIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
