// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDataStrobeFilterTransform
#include "GlobalNamespace/BeatmapDataStrobeFilterTransform.hpp"
// Including type: EnvironmentColorType
#include "GlobalNamespace/EnvironmentColorType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BasicBeatmapEventData
  class BasicBeatmapEventData;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData*, "", "BeatmapDataStrobeFilterTransform/StrobeStreakData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataStrobeFilterTransform/StrobeStreakData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapDataStrobeFilterTransform::StrobeStreakData : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean isActive
    // Size: 0x1
    // Offset: 0x10
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActive and: strobeStartTime
    char __padding0[0x3] = {};
    // public System.Single strobeStartTime
    // Size: 0x4
    // Offset: 0x14
    float strobeStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public EnvironmentColorType startColorType
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::EnvironmentColorType startColorType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentColorType) == 0x4);
    // public System.Single lastSwitchTime
    // Size: 0x4
    // Offset: 0x1C
    float lastSwitchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public EnvironmentColorType lastColorType
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::EnvironmentColorType lastColorType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentColorType) == 0x4);
    // public System.Boolean lastIsOn
    // Size: 0x1
    // Offset: 0x24
    bool lastIsOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lastIsOn and: originalBasicBeatmapEventData
    char __padding5[0x3] = {};
    // public BasicBeatmapEventData originalBasicBeatmapEventData
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BasicBeatmapEventData* originalBasicBeatmapEventData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasicBeatmapEventData*) == 0x8);
    // private System.Boolean _foundFirstColoredEventData
    // Size: 0x1
    // Offset: 0x30
    bool foundFirstColoredEventData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Boolean isActive
    [[deprecated("Use field access instead!")]] bool& dyn_isActive();
    // Get instance field reference: public System.Single strobeStartTime
    [[deprecated("Use field access instead!")]] float& dyn_strobeStartTime();
    // Get instance field reference: public EnvironmentColorType startColorType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentColorType& dyn_startColorType();
    // Get instance field reference: public System.Single lastSwitchTime
    [[deprecated("Use field access instead!")]] float& dyn_lastSwitchTime();
    // Get instance field reference: public EnvironmentColorType lastColorType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentColorType& dyn_lastColorType();
    // Get instance field reference: public System.Boolean lastIsOn
    [[deprecated("Use field access instead!")]] bool& dyn_lastIsOn();
    // Get instance field reference: public BasicBeatmapEventData originalBasicBeatmapEventData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventData*& dyn_originalBasicBeatmapEventData();
    // Get instance field reference: private System.Boolean _foundFirstColoredEventData
    [[deprecated("Use field access instead!")]] bool& dyn__foundFirstColoredEventData();
    // public System.Void .ctor()
    // Offset: 0x1506380
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataStrobeFilterTransform::StrobeStreakData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataStrobeFilterTransform::StrobeStreakData*, creationType>()));
    }
    // public System.Void StartPotentialStrobe(BasicBeatmapEventData startBasicBeatmapEventData)
    // Offset: 0x150644C
    void StartPotentialStrobe(::GlobalNamespace::BasicBeatmapEventData* startBasicBeatmapEventData);
    // public System.Void AddStrobeData(BasicBeatmapEventData basicBeatmapEventData)
    // Offset: 0x1506388
    void AddStrobeData(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData);
  }; // BeatmapDataStrobeFilterTransform/StrobeStreakData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataStrobeFilterTransform::StrobeStreakData), 48 + sizeof(bool)> __GlobalNamespace_BeatmapDataStrobeFilterTransform_StrobeStreakDataSizeCheck;
  static_assert(sizeof(BeatmapDataStrobeFilterTransform::StrobeStreakData) == 0x31);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::StartPotentialStrobe
// Il2CppName: StartPotentialStrobe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::*)(::GlobalNamespace::BasicBeatmapEventData*)>(&GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::StartPotentialStrobe)> {
  static const MethodInfo* get() {
    static auto* startBasicBeatmapEventData = &::il2cpp_utils::GetClassFromName("", "BasicBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData*), "StartPotentialStrobe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startBasicBeatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::AddStrobeData
// Il2CppName: AddStrobeData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::*)(::GlobalNamespace::BasicBeatmapEventData*)>(&GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData::AddStrobeData)> {
  static const MethodInfo* get() {
    static auto* basicBeatmapEventData = &::il2cpp_utils::GetClassFromName("", "BasicBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataStrobeFilterTransform::StrobeStreakData*), "AddStrobeData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basicBeatmapEventData});
  }
};
