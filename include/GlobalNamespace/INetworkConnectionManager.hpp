// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: IUnconnectedConnectionManager
#include "GlobalNamespace/IUnconnectedConnectionManager.hpp"
// Including type: NetworkStatisticsState
#include "GlobalNamespace/NetworkStatisticsState.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: INetworkConnectionManager
  class INetworkConnectionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::INetworkConnectionManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::INetworkConnectionManager*, "", "INetworkConnectionManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: INetworkConnectionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class INetworkConnectionManager/*, public ::GlobalNamespace::IConnectionManager, public ::GlobalNamespace::IUnconnectedConnectionManager*/ {
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IConnectionManager
    operator ::GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IConnectionManager*>(this);
    }
    // Creating interface conversion operator: i_IConnectionManager
    inline ::GlobalNamespace::IConnectionManager* i_IConnectionManager() noexcept {
      return reinterpret_cast<::GlobalNamespace::IConnectionManager*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IUnconnectedConnectionManager
    operator ::GlobalNamespace::IUnconnectedConnectionManager() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IUnconnectedConnectionManager*>(this);
    }
    // Creating interface conversion operator: i_IUnconnectedConnectionManager
    inline ::GlobalNamespace::IUnconnectedConnectionManager* i_IUnconnectedConnectionManager() noexcept {
      return reinterpret_cast<::GlobalNamespace::IUnconnectedConnectionManager*>(this);
    }
    // public System.Int32 get_port()
    // Offset: 0xFFFFFFFFFFFFFFFF
    int get_port();
    // public System.Boolean get_isClient()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isClient();
    // public System.Boolean get_isServer()
    // Offset: 0xFFFFFFFFFFFFFFFF
    bool get_isServer();
    // public System.Void add_onStatisticsUpdatedEvent(NetworkStatisticsState/NetworkStatisticsUpdateDelegate value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void add_onStatisticsUpdatedEvent(::GlobalNamespace::NetworkStatisticsState::NetworkStatisticsUpdateDelegate* value);
    // public System.Void remove_onStatisticsUpdatedEvent(NetworkStatisticsState/NetworkStatisticsUpdateDelegate value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void remove_onStatisticsUpdatedEvent(::GlobalNamespace::NetworkStatisticsState::NetworkStatisticsUpdateDelegate* value);
    // public System.Void ConnectToEndPoint(System.String userId, System.String userName, System.Net.IPEndPoint remoteEndPoint, System.String remoteUserId, System.String remoteUserName, System.Boolean remoteUserIsConnectionOwner)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ConnectToEndPoint(::StringW userId, ::StringW userName, ::System::Net::IPEndPoint* remoteEndPoint, ::StringW remoteUserId, ::StringW remoteUserName, bool remoteUserIsConnectionOwner);
  }; // INetworkConnectionManager
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::INetworkConnectionManager::get_port
// Il2CppName: get_port
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::INetworkConnectionManager::*)()>(&GlobalNamespace::INetworkConnectionManager::get_port)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConnectionManager*), "get_port", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConnectionManager::get_isClient
// Il2CppName: get_isClient
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::INetworkConnectionManager::*)()>(&GlobalNamespace::INetworkConnectionManager::get_isClient)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConnectionManager*), "get_isClient", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConnectionManager::get_isServer
// Il2CppName: get_isServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::INetworkConnectionManager::*)()>(&GlobalNamespace::INetworkConnectionManager::get_isServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConnectionManager*), "get_isServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConnectionManager::add_onStatisticsUpdatedEvent
// Il2CppName: add_onStatisticsUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::INetworkConnectionManager::*)(::GlobalNamespace::NetworkStatisticsState::NetworkStatisticsUpdateDelegate*)>(&GlobalNamespace::INetworkConnectionManager::add_onStatisticsUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NetworkStatisticsState/NetworkStatisticsUpdateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConnectionManager*), "add_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConnectionManager::remove_onStatisticsUpdatedEvent
// Il2CppName: remove_onStatisticsUpdatedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::INetworkConnectionManager::*)(::GlobalNamespace::NetworkStatisticsState::NetworkStatisticsUpdateDelegate*)>(&GlobalNamespace::INetworkConnectionManager::remove_onStatisticsUpdatedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NetworkStatisticsState/NetworkStatisticsUpdateDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConnectionManager*), "remove_onStatisticsUpdatedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::INetworkConnectionManager::ConnectToEndPoint
// Il2CppName: ConnectToEndPoint
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::INetworkConnectionManager::*)(::StringW, ::StringW, ::System::Net::IPEndPoint*, ::StringW, ::StringW, bool)>(&GlobalNamespace::INetworkConnectionManager::ConnectToEndPoint)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* userName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteEndPoint = &::il2cpp_utils::GetClassFromName("System.Net", "IPEndPoint")->byval_arg;
    static auto* remoteUserId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteUserName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* remoteUserIsConnectionOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::INetworkConnectionManager*), "ConnectToEndPoint", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, userName, remoteEndPoint, remoteUserId, remoteUserName, remoteUserIsConnectionOwner});
  }
};
