// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ResizableTextMeshPro
  class ResizableTextMeshPro;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ResizableTextMeshPro);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ResizableTextMeshPro*, "", "ResizableTextMeshPro");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: ResizableTextMeshPro
  // [TokenAttribute] Offset: FFFFFFFF
  class ResizableTextMeshPro : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private TMPro.TMP_Text _textMeshPro
    // Size: 0x8
    // Offset: 0x18
    ::TMPro::TMP_Text* textMeshPro;
    // Field size check
    static_assert(sizeof(::TMPro::TMP_Text*) == 0x8);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::RectTransform*) == 0x8);
    // [SpaceAttribute] Offset: 0x1130C18
    // private System.Single _textExtraSpace
    // Size: 0x4
    // Offset: 0x28
    float textExtraSpace;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private TMPro.TMP_Text _textMeshPro
    [[deprecated("Use field access instead!")]] ::TMPro::TMP_Text*& dyn__textMeshPro();
    // Get instance field reference: private UnityEngine.RectTransform _rectTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::RectTransform*& dyn__rectTransform();
    // Get instance field reference: private System.Single _textExtraSpace
    [[deprecated("Use field access instead!")]] float& dyn__textExtraSpace();
    // public System.Void .ctor()
    // Offset: 0x144ACB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResizableTextMeshPro* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ResizableTextMeshPro::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResizableTextMeshPro*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x144AA00
    void Start();
    // protected System.Void Update()
    // Offset: 0x144AAC4
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x144AB50
    void OnDestroy();
    // private System.Void HandleTextDidChange(UnityEngine.Object textMeshPro)
    // Offset: 0x144AC14
    void HandleTextDidChange(::UnityEngine::Object* textMeshPro);
  }; // ResizableTextMeshPro
  #pragma pack(pop)
  static check_size<sizeof(ResizableTextMeshPro), 40 + sizeof(float)> __GlobalNamespace_ResizableTextMeshProSizeCheck;
  static_assert(sizeof(ResizableTextMeshPro) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ResizableTextMeshPro::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ResizableTextMeshPro::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ResizableTextMeshPro::*)()>(&GlobalNamespace::ResizableTextMeshPro::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ResizableTextMeshPro*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ResizableTextMeshPro::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ResizableTextMeshPro::*)()>(&GlobalNamespace::ResizableTextMeshPro::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ResizableTextMeshPro*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ResizableTextMeshPro::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ResizableTextMeshPro::*)()>(&GlobalNamespace::ResizableTextMeshPro::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ResizableTextMeshPro*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ResizableTextMeshPro::HandleTextDidChange
// Il2CppName: HandleTextDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ResizableTextMeshPro::*)(::UnityEngine::Object*)>(&GlobalNamespace::ResizableTextMeshPro::HandleTextDidChange)> {
  static const MethodInfo* get() {
    static auto* textMeshPro = &::il2cpp_utils::GetClassFromName("UnityEngine", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ResizableTextMeshPro*), "HandleTextDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{textMeshPro});
  }
};
