// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IStandaloneThreadRunnable
  class IStandaloneThreadRunnable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: IStandaloneThreadRunner
  class IStandaloneThreadRunner;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::IStandaloneThreadRunner);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::IStandaloneThreadRunner*, "", "IStandaloneThreadRunner");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: IStandaloneThreadRunner
  // [TokenAttribute] Offset: FFFFFFFF
  class IStandaloneThreadRunner {
    public:
    // public System.Void Run(IStandaloneThreadRunnable runnable)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Run(::GlobalNamespace::IStandaloneThreadRunnable* runnable);
  }; // IStandaloneThreadRunner
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IStandaloneThreadRunner::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IStandaloneThreadRunner::*)(::GlobalNamespace::IStandaloneThreadRunnable*)>(&GlobalNamespace::IStandaloneThreadRunner::Run)> {
  static const MethodInfo* get() {
    static auto* runnable = &::il2cpp_utils::GetClassFromName("", "IStandaloneThreadRunnable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IStandaloneThreadRunner*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runnable});
  }
};
