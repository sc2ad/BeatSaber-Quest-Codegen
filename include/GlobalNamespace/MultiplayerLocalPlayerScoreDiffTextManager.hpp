// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: CoreGameHUDController
#include "GlobalNamespace/CoreGameHUDController.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerScoreDiffText
  class MultiplayerScoreDiffText;
  // Forward declaring type: MultiplayerScoreProvider
  class MultiplayerScoreProvider;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerLocalPlayerScoreDiffTextManager
  class MultiplayerLocalPlayerScoreDiffTextManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager*, "", "MultiplayerLocalPlayerScoreDiffTextManager");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: MultiplayerLocalPlayerScoreDiffTextManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerLocalPlayerScoreDiffTextManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MultiplayerScoreDiffText _scoreDiffText
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MultiplayerScoreDiffText* scoreDiffText;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerScoreDiffText*) == 0x8);
    // [InjectAttribute] Offset: 0x11257D8
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerController*) == 0x8);
    // [InjectAttribute] Offset: 0x11257E8
    // private readonly MultiplayerScoreProvider _scoreProvider
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MultiplayerScoreProvider* scoreProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerScoreProvider*) == 0x8);
    // [InjectAttribute] Offset: 0x11257F8
    // private readonly CoreGameHUDController/InitData _hudInitData
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::CoreGameHUDController::InitData* hudInitData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CoreGameHUDController::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0x1125808
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // private System.Single _timeToNextUpdate
    // Size: 0x4
    // Offset: 0x40
    float timeToNextUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Nullable`1<System.Boolean> _wasLocalPlayerLeader
    // Size: 0xFFFFFFFF
    // Offset: 0x44
    ::System::Nullable_1<bool> wasLocalPlayerLeader;
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kUpdateInterval
    static constexpr const float kUpdateInterval = 0.5;
    // Get static field: static private System.Single kUpdateInterval
    static float _get_kUpdateInterval();
    // Set static field: static private System.Single kUpdateInterval
    static void _set_kUpdateInterval(float value);
    // Get instance field reference: private MultiplayerScoreDiffText _scoreDiffText
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerScoreDiffText*& dyn__scoreDiffText();
    // Get instance field reference: private readonly MultiplayerController _multiplayerController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerController*& dyn__multiplayerController();
    // Get instance field reference: private readonly MultiplayerScoreProvider _scoreProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerScoreProvider*& dyn__scoreProvider();
    // Get instance field reference: private readonly CoreGameHUDController/InitData _hudInitData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CoreGameHUDController::InitData*& dyn__hudInitData();
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private System.Single _timeToNextUpdate
    [[deprecated("Use field access instead!")]] float& dyn__timeToNextUpdate();
    // Get instance field reference: private System.Nullable`1<System.Boolean> _wasLocalPlayerLeader
    [[deprecated("Use field access instead!")]] ::System::Nullable_1<bool>& dyn__wasLocalPlayerLeader();
    // public System.Void .ctor()
    // Offset: 0x13D944C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLocalPlayerScoreDiffTextManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLocalPlayerScoreDiffTextManager*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13D8EEC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x13D8FAC
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x13D9088
    void Update();
    // private System.Void HandleStateChanged(MultiplayerController/State newState)
    // Offset: 0x13D93F0
    void HandleStateChanged(::GlobalNamespace::MultiplayerController::State newState);
  }; // MultiplayerLocalPlayerScoreDiffTextManager
  // WARNING Not writing size check since size may be invalid!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::*)()>(&GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::*)()>(&GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::*)()>(&GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::*)(::GlobalNamespace::MultiplayerController::State)>(&GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager::HandleStateChanged)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "MultiplayerController/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerLocalPlayerScoreDiffTextManager*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
