// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IComparable`1
#include "System/IComparable_1.hpp"
// Including type: System.ValueTuple`3
#include "System/ValueTuple_3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: BeatmapEventDataBox
  class BeatmapEventDataBox;
  // Forward declaring type: BeatmapData
  class BeatmapData;
  // Forward declaring type: IBeatToTimeConvertor
  class IBeatToTimeConvertor;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
  // Forward declaring type: IReadOnlyDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IReadOnlyDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroup
  class BeatmapEventDataBoxGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapEventDataBoxGroup);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBoxGroup*, "", "BeatmapEventDataBoxGroup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataBoxGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventDataBoxGroup : public ::Il2CppObject/*, public ::System::IComparable_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData
    class ElementData;
    public:
    // private readonly System.Single beat
    // Size: 0x4
    // Offset: 0x10
    float beat;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: beat and: elementDataDict
    char __padding0[0x4] = {};
    // [TupleElementNamesAttribute] Offset: 0x111BF80
    // private readonly System.Collections.Generic.Dictionary`2<System.ValueTuple`3<System.Int32,System.Type,System.Int32>,BeatmapEventDataBoxGroup/ElementData> _elementDataDict
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::Dictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>* elementDataDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<BeatmapEventData> _unpackedBeatmapEventData
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* unpackedBeatmapEventData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>*) == 0x8);
    // private readonly System.Collections.Generic.IReadOnlyCollection`1<BeatmapEventDataBox> _beatmapEventDataBoxList
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>* beatmapEventDataBoxList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IComparable_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>
    operator ::System::IComparable_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>() noexcept {
      return *reinterpret_cast<::System::IComparable_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*>(this);
    }
    // Creating interface conversion operator: i_BeatmapEventDataBoxGroup
    inline ::System::IComparable_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* i_BeatmapEventDataBoxGroup() noexcept {
      return reinterpret_cast<::System::IComparable_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*>(this);
    }
    // Get instance field reference: private readonly System.Single beat
    [[deprecated("Use field access instead!")]] float& dyn_beat();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.ValueTuple`3<System.Int32,System.Type,System.Int32>,BeatmapEventDataBoxGroup/ElementData> _elementDataDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>*& dyn__elementDataDict();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<BeatmapEventData> _unpackedBeatmapEventData
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>*& dyn__unpackedBeatmapEventData();
    // Get instance field reference: private readonly System.Collections.Generic.IReadOnlyCollection`1<BeatmapEventDataBox> _beatmapEventDataBoxList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>*& dyn__beatmapEventDataBoxList();
    // public System.Collections.Generic.IReadOnlyDictionary`2<System.ValueTuple`3<System.Int32,System.Type,System.Int32>,BeatmapEventDataBoxGroup/ElementData> get_elementDataDict()
    // Offset: 0x15332D4
    ::System::Collections::Generic::IReadOnlyDictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>* get_elementDataDict();
    // public System.Void .ctor(System.Single beat, System.Collections.Generic.IReadOnlyCollection`1<BeatmapEventDataBox> beatmapEventDataBoxList)
    // Offset: 0x15332DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventDataBoxGroup* New_ctor(float beat, ::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>* beatmapEventDataBoxList) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventDataBoxGroup*, creationType>(beat, beatmapEventDataBoxList)));
    }
    // public BeatmapEventDataBoxGroup GetCopyWithNewBeat(System.Single newBeat)
    // Offset: 0x1533A04
    ::GlobalNamespace::BeatmapEventDataBoxGroup* GetCopyWithNewBeat(float newBeat);
    // public System.Void RemoveBeatmapEventDataFromBeatmapData(BeatmapData beatmapData)
    // Offset: 0x1533A78
    void RemoveBeatmapEventDataFromBeatmapData(::GlobalNamespace::BeatmapData* beatmapData);
    // public System.Void SyncWithBeatmapData(System.Int32 groupId, BeatmapData beatmapData, IBeatToTimeConvertor beatToTimeConvertor)
    // Offset: 0x1533B98
    void SyncWithBeatmapData(int groupId, ::GlobalNamespace::BeatmapData* beatmapData, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor);
    // public System.Int32 CompareTo(BeatmapEventDataBoxGroup b)
    // Offset: 0x1533DE8
    int CompareTo(::GlobalNamespace::BeatmapEventDataBoxGroup* b);
  }; // BeatmapEventDataBoxGroup
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventDataBoxGroup), 40 + sizeof(::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBox*>*)> __GlobalNamespace_BeatmapEventDataBoxGroupSizeCheck;
  static_assert(sizeof(BeatmapEventDataBoxGroup) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroup::get_elementDataDict
// Il2CppName: get_elementDataDict
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyDictionary_2<::System::ValueTuple_3<int, ::System::Type*, int>, ::GlobalNamespace::BeatmapEventDataBoxGroup::ElementData*>* (GlobalNamespace::BeatmapEventDataBoxGroup::*)()>(&GlobalNamespace::BeatmapEventDataBoxGroup::get_elementDataDict)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroup*), "get_elementDataDict", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroup::GetCopyWithNewBeat
// Il2CppName: GetCopyWithNewBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventDataBoxGroup* (GlobalNamespace::BeatmapEventDataBoxGroup::*)(float)>(&GlobalNamespace::BeatmapEventDataBoxGroup::GetCopyWithNewBeat)> {
  static const MethodInfo* get() {
    static auto* newBeat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroup*), "GetCopyWithNewBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newBeat});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroup::RemoveBeatmapEventDataFromBeatmapData
// Il2CppName: RemoveBeatmapEventDataFromBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroup::*)(::GlobalNamespace::BeatmapData*)>(&GlobalNamespace::BeatmapEventDataBoxGroup::RemoveBeatmapEventDataFromBeatmapData)> {
  static const MethodInfo* get() {
    static auto* beatmapData = &::il2cpp_utils::GetClassFromName("", "BeatmapData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroup*), "RemoveBeatmapEventDataFromBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroup::SyncWithBeatmapData
// Il2CppName: SyncWithBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroup::*)(int, ::GlobalNamespace::BeatmapData*, ::GlobalNamespace::IBeatToTimeConvertor*)>(&GlobalNamespace::BeatmapEventDataBoxGroup::SyncWithBeatmapData)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* beatmapData = &::il2cpp_utils::GetClassFromName("", "BeatmapData")->byval_arg;
    static auto* beatToTimeConvertor = &::il2cpp_utils::GetClassFromName("", "IBeatToTimeConvertor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroup*), "SyncWithBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId, beatmapData, beatToTimeConvertor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroup::CompareTo
// Il2CppName: CompareTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapEventDataBoxGroup::*)(::GlobalNamespace::BeatmapEventDataBoxGroup*)>(&GlobalNamespace::BeatmapEventDataBoxGroup::CompareTo)> {
  static const MethodInfo* get() {
    static auto* b = &::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBoxGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroup*), "CompareTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{b});
  }
};
