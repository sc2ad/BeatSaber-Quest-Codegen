// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: INetworkConnectionManager
  class INetworkConnectionManager;
  // Forward declaring type: ICertificateValidator
  class ICertificateValidator;
  // Forward declaring type: GameLiftClientMessageHandler
  class GameLiftClientMessageHandler;
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Forward declaring type: GameLiftClientConnectionRequestHandler
  class GameLiftClientConnectionRequestHandler;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: BGNet::Core
namespace BGNet::Core {
  // Forward declaring type: ITimeProvider
  class ITimeProvider;
  // Forward declaring type: ITaskUtility
  class ITaskUtility;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Forward declaring namespace: BGNet::Core::GameLift
namespace BGNet::Core::GameLift {
  // Forward declaring type: IGameLiftPlayerSessionProvider
  class IGameLiftPlayerSessionProvider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameLiftConnectionManager
  class GameLiftConnectionManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GameLiftConnectionManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameLiftConnectionManager*, "", "GameLiftConnectionManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: GameLiftConnectionManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GameLiftConnectionManager : public ::Il2CppObject/*, public ::GlobalNamespace::IConnectionManager*/ {
    public:
    // Nested type: ::GlobalNamespace::GameLiftConnectionManager::ConnectionState
    struct ConnectionState;
    // Nested type: ::GlobalNamespace::GameLiftConnectionManager::GameLiftConnectionManagerParamsBase
    class GameLiftConnectionManagerParamsBase;
    // Nested type: ::GlobalNamespace::GameLiftConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: ::GlobalNamespace::GameLiftConnectionManager::StartClientParams
    class StartClientParams;
    // Nested type: ::GlobalNamespace::GameLiftConnectionManager::$GameLiftConnectToServer$d__82
    struct $GameLiftConnectToServer$d__82;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GameLiftConnectionManager/ConnectionState
    // [TokenAttribute] Offset: FFFFFFFF
    struct ConnectionState/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GameLiftConnectionManager/ConnectionState Unconnected
      static constexpr const int Unconnected = 0;
      // Get static field: static public GameLiftConnectionManager/ConnectionState Unconnected
      static ::GlobalNamespace::GameLiftConnectionManager::ConnectionState _get_Unconnected();
      // Set static field: static public GameLiftConnectionManager/ConnectionState Unconnected
      static void _set_Unconnected(::GlobalNamespace::GameLiftConnectionManager::ConnectionState value);
      // static field const value: static public GameLiftConnectionManager/ConnectionState Connecting
      static constexpr const int Connecting = 1;
      // Get static field: static public GameLiftConnectionManager/ConnectionState Connecting
      static ::GlobalNamespace::GameLiftConnectionManager::ConnectionState _get_Connecting();
      // Set static field: static public GameLiftConnectionManager/ConnectionState Connecting
      static void _set_Connecting(::GlobalNamespace::GameLiftConnectionManager::ConnectionState value);
      // static field const value: static public GameLiftConnectionManager/ConnectionState Connected
      static constexpr const int Connected = 2;
      // Get static field: static public GameLiftConnectionManager/ConnectionState Connected
      static ::GlobalNamespace::GameLiftConnectionManager::ConnectionState _get_Connected();
      // Set static field: static public GameLiftConnectionManager/ConnectionState Connected
      static void _set_Connected(::GlobalNamespace::GameLiftConnectionManager::ConnectionState value);
      // static field const value: static public GameLiftConnectionManager/ConnectionState Disconnecting
      static constexpr const int Disconnecting = 3;
      // Get static field: static public GameLiftConnectionManager/ConnectionState Disconnecting
      static ::GlobalNamespace::GameLiftConnectionManager::ConnectionState _get_Disconnecting();
      // Set static field: static public GameLiftConnectionManager/ConnectionState Disconnecting
      static void _set_Disconnecting(::GlobalNamespace::GameLiftConnectionManager::ConnectionState value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GameLiftConnectionManager/ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(GameLiftConnectionManager::ConnectionState), 0 + sizeof(int)> __GlobalNamespace_GameLiftConnectionManager_ConnectionStateSizeCheck;
    static_assert(sizeof(GameLiftConnectionManager::ConnectionState) == 0x4);
    public:
    // private readonly BGNet.Core.ITimeProvider _timeProvider
    // Size: 0x8
    // Offset: 0x10
    ::BGNet::Core::ITimeProvider* timeProvider;
    // Field size check
    static_assert(sizeof(::BGNet::Core::ITimeProvider*) == 0x8);
    // private readonly BGNet.Core.ITaskUtility _taskUtility
    // Size: 0x8
    // Offset: 0x18
    ::BGNet::Core::ITaskUtility* taskUtility;
    // Field size check
    static_assert(sizeof(::BGNet::Core::ITaskUtility*) == 0x8);
    // private readonly INetworkConnectionManager _connectionManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::INetworkConnectionManager* connectionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::INetworkConnectionManager*) == 0x8);
    // private readonly ICertificateValidator _certificateValidator
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::ICertificateValidator* certificateValidator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ICertificateValidator*) == 0x8);
    // private System.String _code
    // Size: 0x8
    // Offset: 0x30
    ::StringW code;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _secret
    // Size: 0x8
    // Offset: 0x38
    ::StringW secret;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private BeatmapLevelSelectionMask _selectionMask
    // Size: 0x18
    // Offset: 0x40
    ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // private GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x58
    ::GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private GameLiftClientMessageHandler _messageHandler
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::GameLiftClientMessageHandler* messageHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameLiftClientMessageHandler*) == 0x8);
    // private GameLiftConnectionManager/ConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x78
    ::GlobalNamespace::GameLiftConnectionManager::ConnectionState connectionState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameLiftConnectionManager::ConnectionState) == 0x4);
    // Padding between fields: connectionState and: connectionCancellationTokenSource
    char __padding9[0x4] = {};
    // private System.Threading.CancellationTokenSource _connectionCancellationTokenSource
    // Size: 0x8
    // Offset: 0x80
    ::System::Threading::CancellationTokenSource* connectionCancellationTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    // private System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> _authenticationTokenProviderTask
    // Size: 0x8
    // Offset: 0x88
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>* authenticationTokenProviderTask;
    // Field size check
    static_assert(sizeof(::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*) == 0x8);
    // private BGNet.Core.GameLift.IGameLiftPlayerSessionProvider _gameLiftPlayerSessionProvider
    // Size: 0x8
    // Offset: 0x90
    ::BGNet::Core::GameLift::IGameLiftPlayerSessionProvider* gameLiftPlayerSessionProvider;
    // Field size check
    static_assert(sizeof(::BGNet::Core::GameLift::IGameLiftPlayerSessionProvider*) == 0x8);
    // private readonly GameLiftClientConnectionRequestHandler _connectionRequestHandler
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::GameLiftClientConnectionRequestHandler* connectionRequestHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameLiftClientConnectionRequestHandler*) == 0x8);
    // private System.Action onInitializedEvent
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action* onInitializedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action onConnectedEvent
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action* onConnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action_1<::GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::DisconnectedReason>*) == 0x8);
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Size: 0x8
    // Offset: 0xC0
    ::System::Action_1<::GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::IConnection*>*) == 0x8);
    // private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    // Size: 0x8
    // Offset: 0xC8
    ::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*) == 0x8);
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,BGNet.Core.DeliveryMethod> onReceivedDataEvent
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>* onReceivedDataEvent;
    // Field size check
    static_assert(sizeof(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IConnectionManager
    operator ::GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IConnectionManager*>(this);
    }
    // Creating interface conversion operator: i_IConnectionManager
    inline ::GlobalNamespace::IConnectionManager* i_IConnectionManager() noexcept {
      return reinterpret_cast<::GlobalNamespace::IConnectionManager*>(this);
    }
    // Get instance field reference: private readonly BGNet.Core.ITimeProvider _timeProvider
    [[deprecated("Use field access instead!")]] ::BGNet::Core::ITimeProvider*& dyn__timeProvider();
    // Get instance field reference: private readonly BGNet.Core.ITaskUtility _taskUtility
    [[deprecated("Use field access instead!")]] ::BGNet::Core::ITaskUtility*& dyn__taskUtility();
    // Get instance field reference: private readonly INetworkConnectionManager _connectionManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::INetworkConnectionManager*& dyn__connectionManager();
    // Get instance field reference: private readonly ICertificateValidator _certificateValidator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ICertificateValidator*& dyn__certificateValidator();
    // Get instance field reference: private System.String _code
    [[deprecated("Use field access instead!")]] ::StringW& dyn__code();
    // Get instance field reference: private System.String _secret
    [[deprecated("Use field access instead!")]] ::StringW& dyn__secret();
    // Get instance field reference: private BeatmapLevelSelectionMask _selectionMask
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn__selectionMask();
    // Get instance field reference: private GameplayServerConfiguration _configuration
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn__configuration();
    // Get instance field reference: private GameLiftClientMessageHandler _messageHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameLiftClientMessageHandler*& dyn__messageHandler();
    // Get instance field reference: private GameLiftConnectionManager/ConnectionState _connectionState
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameLiftConnectionManager::ConnectionState& dyn__connectionState();
    // Get instance field reference: private System.Threading.CancellationTokenSource _connectionCancellationTokenSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__connectionCancellationTokenSource();
    // Get instance field reference: private System.Threading.Tasks.Task`1<IAuthenticationTokenProvider> _authenticationTokenProviderTask
    [[deprecated("Use field access instead!")]] ::System::Threading::Tasks::Task_1<::GlobalNamespace::IAuthenticationTokenProvider*>*& dyn__authenticationTokenProviderTask();
    // Get instance field reference: private BGNet.Core.GameLift.IGameLiftPlayerSessionProvider _gameLiftPlayerSessionProvider
    [[deprecated("Use field access instead!")]] ::BGNet::Core::GameLift::IGameLiftPlayerSessionProvider*& dyn__gameLiftPlayerSessionProvider();
    // Get instance field reference: private readonly GameLiftClientConnectionRequestHandler _connectionRequestHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameLiftClientConnectionRequestHandler*& dyn__connectionRequestHandler();
    // Get instance field reference: private System.Action onInitializedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onInitializedEvent();
    // Get instance field reference: private System.Action onConnectedEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_onConnectedEvent();
    // Get instance field reference: private System.Action`1<DisconnectedReason> onDisconnectedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::DisconnectedReason>*& dyn_onDisconnectedEvent();
    // Get instance field reference: private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*& dyn_onConnectionFailedEvent();
    // Get instance field reference: private System.Action`1<IConnection> onConnectionConnectedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::IConnection*>*& dyn_onConnectionConnectedEvent();
    // Get instance field reference: private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*& dyn_onConnectionDisconnectedEvent();
    // Get instance field reference: private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,BGNet.Core.DeliveryMethod> onReceivedDataEvent
    [[deprecated("Use field access instead!")]] ::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>*& dyn_onReceivedDataEvent();
    // public System.String get_userId()
    // Offset: 0x161FFD4
    ::StringW get_userId();
    // public System.String get_userName()
    // Offset: 0x16200C4
    ::StringW get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x16201B4
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x16201C4
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x16201D4
    bool get_isDisconnecting();
    // public System.Int32 get_connectionCount()
    // Offset: 0x16201E4
    int get_connectionCount();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x1620298
    bool get_isConnectionOwner();
    // public System.Boolean get_isDisposed()
    // Offset: 0x162034C
    bool get_isDisposed();
    // public System.String get_playerSessionId()
    // Offset: 0x1620400
    ::StringW get_playerSessionId();
    // public BeatmapLevelSelectionMask get_selectionMask()
    // Offset: 0x162041C
    ::GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask();
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x1620430
    ::GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public System.String get_code()
    // Offset: 0x1620444
    ::StringW get_code();
    // public System.String get_secret()
    // Offset: 0x162044C
    ::StringW get_secret();
    // public System.Void add_onInitializedEvent(System.Action value)
    // Offset: 0x161F6DC
    void add_onInitializedEvent(::System::Action* value);
    // public System.Void remove_onInitializedEvent(System.Action value)
    // Offset: 0x161F780
    void remove_onInitializedEvent(::System::Action* value);
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x161F824
    void add_onConnectedEvent(::System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x161F8C8
    void remove_onConnectedEvent(::System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x161F96C
    void add_onDisconnectedEvent(::System::Action_1<::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x161FA10
    void remove_onDisconnectedEvent(::System::Action_1<::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x161FAB4
    void add_onConnectionFailedEvent(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x161FB58
    void remove_onConnectionFailedEvent(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x161FBFC
    void add_onConnectionConnectedEvent(::System::Action_1<::GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x161FCA0
    void remove_onConnectionConnectedEvent(::System::Action_1<::GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x161FD44
    void add_onConnectionDisconnectedEvent(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x161FDE8
    void remove_onConnectionDisconnectedEvent(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,BGNet.Core.DeliveryMethod> value)
    // Offset: 0x161FE8C
    void add_onReceivedDataEvent(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,BGNet.Core.DeliveryMethod> value)
    // Offset: 0x161FF30
    void remove_onReceivedDataEvent(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>* value);
    // public System.Void .ctor()
    // Offset: 0x16206AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameLiftConnectionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameLiftConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameLiftConnectionManager*, creationType>()));
    }
    // public System.Void .ctor(BGNet.Core.ITimeProvider timeProvider, BGNet.Core.ITaskUtility taskUtility, INetworkConnectionManager connectionManager, ICertificateValidator certificateValidator)
    // Offset: 0x1620894
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameLiftConnectionManager* New_ctor(::BGNet::Core::ITimeProvider* timeProvider, ::BGNet::Core::ITaskUtility* taskUtility, ::GlobalNamespace::INetworkConnectionManager* connectionManager, ::GlobalNamespace::ICertificateValidator* certificateValidator) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameLiftConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameLiftConnectionManager*, creationType>(timeProvider, taskUtility, connectionManager, certificateValidator)));
    }
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, BGNet.Core.DeliveryMethod deliveryMethod)
    // Offset: 0x1620454
    void SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, ::BGNet::Core::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, BGNet.Core.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x1620520
    void SendToAll(::LiteNetLib::Utils::NetDataWriter* writer, ::BGNet::Core::DeliveryMethod deliveryMethod, ::GlobalNamespace::IConnection* excludingConnection);
    // public System.Void PollUpdate()
    // Offset: 0x16205FC
    void PollUpdate();
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    bool Init(::GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::GlobalNamespace::IConnectionManager>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameLiftConnectionManager::Init");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initParams)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, initParams);
    }
    // public System.Threading.Tasks.Task DisposeAsync()
    // Offset: 0x1620CFC
    ::System::Threading::Tasks::Task* DisposeAsync();
    // public System.Void Dispose()
    // Offset: 0x1620DB0
    void Dispose();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x1620E60
    void Disconnect(::GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void DisconnectInternal(ConnectionFailedReason connectionFailedReason)
    // Offset: 0x16210EC
    void DisconnectInternal(::GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x1620E68
    void DisconnectInternal(::GlobalNamespace::DisconnectedReason disconnectedReason, ::GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x16210F8
    ::GlobalNamespace::IConnection* GetConnection(int index);
    // private System.Void HandleConnected()
    // Offset: 0x16211BC
    void HandleConnected();
    // private System.Void HandleConnectionConnected(IConnection connection)
    // Offset: 0x16211E8
    void HandleConnectionConnected(::GlobalNamespace::IConnection* connection);
    // private System.Void HandleConnectionDisconnected(IConnection connection, DisconnectedReason reason)
    // Offset: 0x162125C
    void HandleConnectionDisconnected(::GlobalNamespace::IConnection* connection, ::GlobalNamespace::DisconnectedReason reason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason failedReason)
    // Offset: 0x16212D8
    void HandleConnectionFailed(::GlobalNamespace::ConnectionFailedReason failedReason);
    // private System.Void HandleReceivedData(IConnection connection, LiteNetLib.Utils.NetDataReader reader, BGNet.Core.DeliveryMethod deliveryMethod)
    // Offset: 0x16212E4
    void HandleReceivedData(::GlobalNamespace::IConnection* connection, ::LiteNetLib::Utils::NetDataReader* reader, ::BGNet::Core::DeliveryMethod deliveryMethod);
    // private System.Void GameLiftConnectToServer(System.String secret, System.String code, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1621374
    void GameLiftConnectToServer(::StringW secret, ::StringW code, ::System::Threading::CancellationToken cancellationToken);
    // private System.Void HandleConnectToServerSuccess(System.String playerSessionId, System.String hostName, System.Int32 port, System.String gameSessionId, System.String secret, System.String code, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
    // Offset: 0x1621450
    void HandleConnectToServerSuccess(::StringW playerSessionId, ::StringW hostName, int port, ::StringW gameSessionId, ::StringW secret, ::StringW code, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Void GetPublicServers(System.Action`1<System.Collections.Generic.IReadOnlyList`1<PublicServerInfo>> onSuccess, System.Action`1<ConnectionFailedReason> onFailure, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.Int32 offset, System.Int32 count)
    // Offset: 0x16217D8
    void GetPublicServers(::System::Action_1<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PublicServerInfo>*>* onSuccess, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>* onFailure, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration, int offset, int count);
  }; // GameLiftConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(GameLiftConnectionManager), 208 + sizeof(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>*)> __GlobalNamespace_GameLiftConnectionManagerSizeCheck;
  static_assert(sizeof(GameLiftConnectionManager) == 0xD8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameLiftConnectionManager::ConnectionState, "", "GameLiftConnectionManager/ConnectionState");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_isConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_isConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_isDisconnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_connectionCount
// Il2CppName: get_connectionCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_connectionCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_connectionCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_isConnectionOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_isDisposed
// Il2CppName: get_isDisposed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_isDisposed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_isDisposed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_playerSessionId
// Il2CppName: get_playerSessionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_playerSessionId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_playerSessionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_selectionMask
// Il2CppName: get_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapLevelSelectionMask (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_selectionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayServerConfiguration (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_code
// Il2CppName: get_code
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_code)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_code", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::get_secret)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onInitializedEvent
// Il2CppName: add_onInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action*)>(&GlobalNamespace::GameLiftConnectionManager::add_onInitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onInitializedEvent
// Il2CppName: remove_onInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onInitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onConnectedEvent
// Il2CppName: add_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action*)>(&GlobalNamespace::GameLiftConnectionManager::add_onConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onConnectedEvent
// Il2CppName: remove_onConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onDisconnectedEvent
// Il2CppName: add_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::GameLiftConnectionManager::add_onDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onDisconnectedEvent
// Il2CppName: remove_onDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onConnectionFailedEvent
// Il2CppName: add_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::GameLiftConnectionManager::add_onConnectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onConnectionFailedEvent
// Il2CppName: remove_onConnectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onConnectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onConnectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onConnectionConnectedEvent
// Il2CppName: add_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::GlobalNamespace::IConnection*>*)>(&GlobalNamespace::GameLiftConnectionManager::add_onConnectionConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onConnectionConnectedEvent
// Il2CppName: remove_onConnectionConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::GlobalNamespace::IConnection*>*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onConnectionConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onConnectionConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onConnectionDisconnectedEvent
// Il2CppName: add_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::GameLiftConnectionManager::add_onConnectionDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onConnectionDisconnectedEvent
// Il2CppName: remove_onConnectionDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_2<::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onConnectionDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onConnectionDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::add_onReceivedDataEvent
// Il2CppName: add_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>*)>(&GlobalNamespace::GameLiftConnectionManager::add_onReceivedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader"), ::il2cpp_utils::GetClassFromName("BGNet.Core", "DeliveryMethod")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "add_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::remove_onReceivedDataEvent
// Il2CppName: remove_onReceivedDataEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_3<::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod>*)>(&GlobalNamespace::GameLiftConnectionManager::remove_onReceivedDataEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnection"), ::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader"), ::il2cpp_utils::GetClassFromName("BGNet.Core", "DeliveryMethod")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "remove_onReceivedDataEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::LiteNetLib::Utils::NetDataWriter*, ::BGNet::Core::DeliveryMethod)>(&GlobalNamespace::GameLiftConnectionManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("BGNet.Core", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::SendToAll
// Il2CppName: SendToAll
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::LiteNetLib::Utils::NetDataWriter*, ::BGNet::Core::DeliveryMethod, ::GlobalNamespace::IConnection*)>(&GlobalNamespace::GameLiftConnectionManager::SendToAll)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("BGNet.Core", "DeliveryMethod")->byval_arg;
    static auto* excludingConnection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "SendToAll", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, deliveryMethod, excludingConnection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::Init
// Il2CppName: Init
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::DisposeAsync
// Il2CppName: DisposeAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task* (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::DisposeAsync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "DisposeAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::GameLiftConnectionManager::Disconnect)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::GameLiftConnectionManager::DisconnectInternal)> {
  static const MethodInfo* get() {
    static auto* connectionFailedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionFailedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::DisconnectInternal
// Il2CppName: DisconnectInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::DisconnectedReason, ::GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::GameLiftConnectionManager::DisconnectInternal)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    static auto* connectionFailedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "DisconnectInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason, connectionFailedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::GetConnection
// Il2CppName: GetConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IConnection* (GlobalNamespace::GameLiftConnectionManager::*)(int)>(&GlobalNamespace::GameLiftConnectionManager::GetConnection)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "GetConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::HandleConnected
// Il2CppName: HandleConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)()>(&GlobalNamespace::GameLiftConnectionManager::HandleConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "HandleConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::HandleConnectionConnected
// Il2CppName: HandleConnectionConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::IConnection*)>(&GlobalNamespace::GameLiftConnectionManager::HandleConnectionConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "HandleConnectionConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::HandleConnectionDisconnected
// Il2CppName: HandleConnectionDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::IConnection*, ::GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::GameLiftConnectionManager::HandleConnectionDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "HandleConnectionDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::HandleConnectionFailed
// Il2CppName: HandleConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::GameLiftConnectionManager::HandleConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* failedReason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "HandleConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{failedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::HandleReceivedData
// Il2CppName: HandleReceivedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::GlobalNamespace::IConnection*, ::LiteNetLib::Utils::NetDataReader*, ::BGNet::Core::DeliveryMethod)>(&GlobalNamespace::GameLiftConnectionManager::HandleReceivedData)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("BGNet.Core", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "HandleReceivedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reader, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::GameLiftConnectToServer
// Il2CppName: GameLiftConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::StringW, ::StringW, ::System::Threading::CancellationToken)>(&GlobalNamespace::GameLiftConnectionManager::GameLiftConnectToServer)> {
  static const MethodInfo* get() {
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "GameLiftConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{secret, code, cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::HandleConnectToServerSuccess
// Il2CppName: HandleConnectToServerSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::StringW, ::StringW, int, ::StringW, ::StringW, ::StringW, ::GlobalNamespace::BeatmapLevelSelectionMask, ::GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::GameLiftConnectionManager::HandleConnectToServerSuccess)> {
  static const MethodInfo* get() {
    static auto* playerSessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* hostName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* port = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* gameSessionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* code = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "HandleConnectToServerSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerSessionId, hostName, port, gameSessionId, secret, code, selectionMask, configuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameLiftConnectionManager::GetPublicServers
// Il2CppName: GetPublicServers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameLiftConnectionManager::*)(::System::Action_1<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PublicServerInfo>*>*, ::System::Action_1<::GlobalNamespace::ConnectionFailedReason>*, ::GlobalNamespace::BeatmapLevelSelectionMask, ::GlobalNamespace::GameplayServerConfiguration, int, int)>(&GlobalNamespace::GameLiftConnectionManager::GetPublicServers)> {
  static const MethodInfo* get() {
    static auto* onSuccess = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "IReadOnlyList`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PublicServerInfo")})})->byval_arg;
    static auto* onFailure = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* offset = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* count = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameLiftConnectionManager*), "GetPublicServers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{onSuccess, onFailure, selectionMask, configuration, offset, count});
  }
};
