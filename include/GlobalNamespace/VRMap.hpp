// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: VRMap
  class VRMap;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::VRMap);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::VRMap*, "", "VRMap");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: VRMap
  // [TokenAttribute] Offset: FFFFFFFF
  class VRMap : public ::Il2CppObject {
    public:
    public:
    // public UnityEngine.XR.XRNode vrTargetNode
    // Size: 0x4
    // Offset: 0x10
    ::UnityEngine::XR::XRNode vrTargetNode;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::XRNode) == 0x4);
    // Padding between fields: vrTargetNode and: overrideTarget
    char __padding0[0x4] = {};
    // public UnityEngine.Transform overrideTarget
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* overrideTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rigTarget
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* rigTarget;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 trackingPositionOffset
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 trackingPositionOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 trackingRotationOffset
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 trackingRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Transform headTransform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* headTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 syncPos
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 syncPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion syncRotation
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Quaternion syncRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Single calcT
    // Size: 0x4
    // Offset: 0x64
    float calcT;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.XR.InputDevice myInputDevice
    // Size: 0x9
    // Offset: 0x68
    ::UnityEngine::XR::InputDevice myInputDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: myInputDevice and: tempPosition
    char __padding9[0x7] = {};
    // private UnityEngine.Vector3 tempPosition
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 tempPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion tempRotation
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Quaternion tempRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Int32 tempInt
    // Size: 0x4
    // Offset: 0x94
    int tempInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.XR.XRNode vrTargetNode
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::XRNode& dyn_vrTargetNode();
    // Get instance field reference: public UnityEngine.Transform overrideTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_overrideTarget();
    // Get instance field reference: public UnityEngine.Transform rigTarget
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rigTarget();
    // Get instance field reference: public UnityEngine.Vector3 trackingPositionOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_trackingPositionOffset();
    // Get instance field reference: public UnityEngine.Vector3 trackingRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_trackingRotationOffset();
    // Get instance field reference: public UnityEngine.Transform headTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_headTransform();
    // Get instance field reference: public UnityEngine.Vector3 syncPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_syncPos();
    // Get instance field reference: public UnityEngine.Quaternion syncRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_syncRotation();
    // Get instance field reference: public System.Single calcT
    [[deprecated("Use field access instead!")]] float& dyn_calcT();
    // Get instance field reference: private UnityEngine.XR.InputDevice myInputDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_myInputDevice();
    // Get instance field reference: private UnityEngine.Vector3 tempPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_tempPosition();
    // Get instance field reference: private UnityEngine.Quaternion tempRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_tempRotation();
    // Get instance field reference: public System.Int32 tempInt
    [[deprecated("Use field access instead!")]] int& dyn_tempInt();
    // public System.Void .ctor()
    // Offset: 0xCFBCAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRMap* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::VRMap::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRMap*, creationType>()));
    }
    // public System.Void MapOther(System.Single lerpValue)
    // Offset: 0xCFB498
    void MapOther(float lerpValue);
    // public System.Void MapMine(System.Single ratio, UnityEngine.Transform playerOffsetTransform)
    // Offset: 0xCFB608
    void MapMine(float ratio, ::UnityEngine::Transform* playerOffsetTransform);
    // public System.Void MapOtherFinger(System.Single handSync, System.Single lerpValue)
    // Offset: 0xCFBC8C
    void MapOtherFinger(float handSync, float lerpValue);
    // public System.Void MapMyFinger(System.Single lerpValue)
    // Offset: 0xCFBCA4
    void MapMyFinger(float lerpValue);
    // public System.Void LerpFinger(System.Single lerpValue, System.Boolean isOther)
    // Offset: 0xCFBCA8
    void LerpFinger(float lerpValue, bool isOther);
  }; // VRMap
  #pragma pack(pop)
  static check_size<sizeof(VRMap), 148 + sizeof(int)> __GlobalNamespace_VRMapSizeCheck;
  static_assert(sizeof(VRMap) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VRMap::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::VRMap::MapOther
// Il2CppName: MapOther
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRMap::*)(float)>(&GlobalNamespace::VRMap::MapOther)> {
  static const MethodInfo* get() {
    static auto* lerpValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRMap*), "MapOther", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lerpValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRMap::MapMine
// Il2CppName: MapMine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRMap::*)(float, ::UnityEngine::Transform*)>(&GlobalNamespace::VRMap::MapMine)> {
  static const MethodInfo* get() {
    static auto* ratio = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* playerOffsetTransform = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRMap*), "MapMine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ratio, playerOffsetTransform});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRMap::MapOtherFinger
// Il2CppName: MapOtherFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRMap::*)(float, float)>(&GlobalNamespace::VRMap::MapOtherFinger)> {
  static const MethodInfo* get() {
    static auto* handSync = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* lerpValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRMap*), "MapOtherFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{handSync, lerpValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRMap::MapMyFinger
// Il2CppName: MapMyFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRMap::*)(float)>(&GlobalNamespace::VRMap::MapMyFinger)> {
  static const MethodInfo* get() {
    static auto* lerpValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRMap*), "MapMyFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lerpValue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VRMap::LerpFinger
// Il2CppName: LerpFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VRMap::*)(float, bool)>(&GlobalNamespace::VRMap::LerpFinger)> {
  static const MethodInfo* get() {
    static auto* lerpValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isOther = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VRMap*), "LerpFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lerpValue, isOther});
  }
};
