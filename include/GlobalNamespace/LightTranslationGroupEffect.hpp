// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: BeatmapDataCallback`1<T>
  template<typename T>
  class BeatmapDataCallback_1;
  // Forward declaring type: LightTranslationBeatmapEventData
  class LightTranslationBeatmapEventData;
  // Forward declaring type: EaseType
  struct EaseType;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: SongTimeTweeningManager
  class SongTimeTweeningManager;
  // Forward declaring type: FloatTween
  class FloatTween;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightTranslationGroupEffect
  class LightTranslationGroupEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightTranslationGroupEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightTranslationGroupEffect*, "", "LightTranslationGroupEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: LightTranslationGroupEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class LightTranslationGroupEffect : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::LightTranslationGroupEffect::InitData
    class InitData;
    // Nested type: ::GlobalNamespace::LightTranslationGroupEffect::$$c__DisplayClass12_0
    class $$c__DisplayClass12_0;
    public:
    // private readonly Tweening.SongTimeTweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x10
    ::Tweening::SongTimeTweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(::Tweening::SongTimeTweeningManager*) == 0x8);
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // [TupleElementNamesAttribute] Offset: 0x112189C
    // private readonly System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.Transform,UnityEngine.Vector3>> _transformMask
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>>* transformMask;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>>*) == 0x8);
    // private readonly Tweening.FloatTween _xTranslationTween
    // Size: 0x8
    // Offset: 0x28
    ::Tweening::FloatTween* xTranslationTween;
    // Field size check
    static_assert(sizeof(::Tweening::FloatTween*) == 0x8);
    // private readonly Tweening.FloatTween _yTranslationTween
    // Size: 0x8
    // Offset: 0x30
    ::Tweening::FloatTween* yTranslationTween;
    // Field size check
    static_assert(sizeof(::Tweening::FloatTween*) == 0x8);
    // private readonly Tweening.FloatTween _zTranslationTween
    // Size: 0x8
    // Offset: 0x38
    ::Tweening::FloatTween* zTranslationTween;
    // Field size check
    static_assert(sizeof(::Tweening::FloatTween*) == 0x8);
    // private readonly BeatmapDataCallbackWrapper _lightTranslationXBeatmapEventCallbackWrapper
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::BeatmapDataCallbackWrapper* lightTranslationXBeatmapEventCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private readonly BeatmapDataCallbackWrapper _lightTranslationYBeatmapEventCallbackWrapper
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::BeatmapDataCallbackWrapper* lightTranslationYBeatmapEventCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    // private readonly BeatmapDataCallbackWrapper _lightTranslationZBeatmapEventCallbackWrapper
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::BeatmapDataCallbackWrapper* lightTranslationZBeatmapEventCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    public:
    // Get instance field reference: private readonly Tweening.SongTimeTweeningManager _tweeningManager
    [[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& dyn__tweeningManager();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<System.ValueTuple`2<UnityEngine.Transform,UnityEngine.Vector3>> _transformMask
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::System::ValueTuple_2<::UnityEngine::Transform*, ::UnityEngine::Vector3>>*& dyn__transformMask();
    // Get instance field reference: private readonly Tweening.FloatTween _xTranslationTween
    [[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& dyn__xTranslationTween();
    // Get instance field reference: private readonly Tweening.FloatTween _yTranslationTween
    [[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& dyn__yTranslationTween();
    // Get instance field reference: private readonly Tweening.FloatTween _zTranslationTween
    [[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& dyn__zTranslationTween();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper _lightTranslationXBeatmapEventCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__lightTranslationXBeatmapEventCallbackWrapper();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper _lightTranslationYBeatmapEventCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__lightTranslationYBeatmapEventCallbackWrapper();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper _lightTranslationZBeatmapEventCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__lightTranslationZBeatmapEventCallbackWrapper();
    // public System.Void .ctor(LightTranslationGroupEffect/InitData initData, Tweening.SongTimeTweeningManager tweeningManager, BeatmapCallbacksController beatmapCallbacksController)
    // Offset: 0x15152F8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightTranslationGroupEffect* New_ctor(::GlobalNamespace::LightTranslationGroupEffect::InitData* initData, ::Tweening::SongTimeTweeningManager* tweeningManager, ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationGroupEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightTranslationGroupEffect*, creationType>(initData, tweeningManager, beatmapCallbacksController)));
    }
    // public System.Void Cleanup()
    // Offset: 0x1515E08
    void Cleanup();
    // private BeatmapDataCallback`1<LightTranslationBeatmapEventData> GetTranslationEventHandler(Tweening.FloatTween translationTween, UnityEngine.Vector2 translationLimits, UnityEngine.Vector2 distributionLimits, System.Boolean mirrored)
    // Offset: 0x1515D24
    ::GlobalNamespace::BeatmapDataCallback_1<::GlobalNamespace::LightTranslationBeatmapEventData*>* GetTranslationEventHandler(::Tweening::FloatTween* translationTween, ::UnityEngine::Vector2 translationLimits, ::UnityEngine::Vector2 distributionLimits, bool mirrored);
    // private System.Void SetTranslation(System.Single _)
    // Offset: 0x1515E88
    void SetTranslation(float _);
    // static private System.Void SetTweenData(Tweening.FloatTween tween, System.Single from, System.Single to, System.Single startTime, System.Single endTime, EaseType easeType)
    // Offset: 0x151606C
    static void SetTweenData(::Tweening::FloatTween* tween, float from, float to, float startTime, float endTime, ::GlobalNamespace::EaseType easeType);
    // static private System.Single ComputeTranslation(System.Single translation, UnityEngine.Vector2 translationLimits, System.Single distribution, UnityEngine.Vector2 distributionLimits, System.Boolean mirrored)
    // Offset: 0x15160AC
    static float ComputeTranslation(float translation, ::UnityEngine::Vector2 translationLimits, float distribution, ::UnityEngine::Vector2 distributionLimits, bool mirrored);
  }; // LightTranslationGroupEffect
  #pragma pack(pop)
  static check_size<sizeof(LightTranslationGroupEffect), 80 + sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*)> __GlobalNamespace_LightTranslationGroupEffectSizeCheck;
  static_assert(sizeof(LightTranslationGroupEffect) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightTranslationGroupEffect::*)()>(&GlobalNamespace::LightTranslationGroupEffect::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffect*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::GetTranslationEventHandler
// Il2CppName: GetTranslationEventHandler
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDataCallback_1<::GlobalNamespace::LightTranslationBeatmapEventData*>* (GlobalNamespace::LightTranslationGroupEffect::*)(::Tweening::FloatTween*, ::UnityEngine::Vector2, ::UnityEngine::Vector2, bool)>(&GlobalNamespace::LightTranslationGroupEffect::GetTranslationEventHandler)> {
  static const MethodInfo* get() {
    static auto* translationTween = &::il2cpp_utils::GetClassFromName("Tweening", "FloatTween")->byval_arg;
    static auto* translationLimits = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distributionLimits = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* mirrored = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffect*), "GetTranslationEventHandler", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translationTween, translationLimits, distributionLimits, mirrored});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::SetTranslation
// Il2CppName: SetTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightTranslationGroupEffect::*)(float)>(&GlobalNamespace::LightTranslationGroupEffect::SetTranslation)> {
  static const MethodInfo* get() {
    static auto* _ = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffect*), "SetTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{_});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::SetTweenData
// Il2CppName: SetTweenData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Tweening::FloatTween*, float, float, float, float, ::GlobalNamespace::EaseType)>(&GlobalNamespace::LightTranslationGroupEffect::SetTweenData)> {
  static const MethodInfo* get() {
    static auto* tween = &::il2cpp_utils::GetClassFromName("Tweening", "FloatTween")->byval_arg;
    static auto* from = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* to = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("", "EaseType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffect*), "SetTweenData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tween, from, to, startTime, endTime, easeType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::ComputeTranslation
// Il2CppName: ComputeTranslation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, ::UnityEngine::Vector2, float, ::UnityEngine::Vector2, bool)>(&GlobalNamespace::LightTranslationGroupEffect::ComputeTranslation)> {
  static const MethodInfo* get() {
    static auto* translation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* translationLimits = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* distribution = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* distributionLimits = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    static auto* mirrored = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffect*), "ComputeTranslation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{translation, translationLimits, distribution, distributionLimits, mirrored});
  }
};
