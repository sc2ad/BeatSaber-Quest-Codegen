// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Cubemap
  class Cubemap;
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BakeryPointLight
  class BakeryPointLight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BakeryPointLight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryPointLight*, "", "BakeryPointLight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x84
  #pragma pack(push, 1)
  // Autogenerated type: BakeryPointLight
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class BakeryPointLight : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode
    struct ftLightProjectionMode;
    // Nested type: ::GlobalNamespace::BakeryPointLight::Direction
    struct Direction;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BakeryPointLight/ftLightProjectionMode
    // [TokenAttribute] Offset: FFFFFFFF
    struct ftLightProjectionMode/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ftLightProjectionMode
      constexpr ftLightProjectionMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BakeryPointLight/ftLightProjectionMode Omni
      static constexpr const int Omni = 0;
      // Get static field: static public BakeryPointLight/ftLightProjectionMode Omni
      static ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode _get_Omni();
      // Set static field: static public BakeryPointLight/ftLightProjectionMode Omni
      static void _set_Omni(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value);
      // static field const value: static public BakeryPointLight/ftLightProjectionMode Cookie
      static constexpr const int Cookie = 1;
      // Get static field: static public BakeryPointLight/ftLightProjectionMode Cookie
      static ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode _get_Cookie();
      // Set static field: static public BakeryPointLight/ftLightProjectionMode Cookie
      static void _set_Cookie(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value);
      // static field const value: static public BakeryPointLight/ftLightProjectionMode Cubemap
      static constexpr const int Cubemap = 2;
      // Get static field: static public BakeryPointLight/ftLightProjectionMode Cubemap
      static ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode _get_Cubemap();
      // Set static field: static public BakeryPointLight/ftLightProjectionMode Cubemap
      static void _set_Cubemap(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value);
      // static field const value: static public BakeryPointLight/ftLightProjectionMode IES
      static constexpr const int IES = 3;
      // Get static field: static public BakeryPointLight/ftLightProjectionMode IES
      static ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode _get_IES();
      // Set static field: static public BakeryPointLight/ftLightProjectionMode IES
      static void _set_IES(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value);
      // static field const value: static public BakeryPointLight/ftLightProjectionMode Cone
      static constexpr const int Cone = 4;
      // Get static field: static public BakeryPointLight/ftLightProjectionMode Cone
      static ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode _get_Cone();
      // Set static field: static public BakeryPointLight/ftLightProjectionMode Cone
      static void _set_Cone(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BakeryPointLight/ftLightProjectionMode
    #pragma pack(pop)
    static check_size<sizeof(BakeryPointLight::ftLightProjectionMode), 0 + sizeof(int)> __GlobalNamespace_BakeryPointLight_ftLightProjectionModeSizeCheck;
    static_assert(sizeof(BakeryPointLight::ftLightProjectionMode) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BakeryPointLight/Direction
    // [TokenAttribute] Offset: FFFFFFFF
    struct Direction/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Direction
      constexpr Direction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BakeryPointLight/Direction NegativeY
      static constexpr const int NegativeY = 0;
      // Get static field: static public BakeryPointLight/Direction NegativeY
      static ::GlobalNamespace::BakeryPointLight::Direction _get_NegativeY();
      // Set static field: static public BakeryPointLight/Direction NegativeY
      static void _set_NegativeY(::GlobalNamespace::BakeryPointLight::Direction value);
      // static field const value: static public BakeryPointLight/Direction PositiveZ
      static constexpr const int PositiveZ = 1;
      // Get static field: static public BakeryPointLight/Direction PositiveZ
      static ::GlobalNamespace::BakeryPointLight::Direction _get_PositiveZ();
      // Set static field: static public BakeryPointLight/Direction PositiveZ
      static void _set_PositiveZ(::GlobalNamespace::BakeryPointLight::Direction value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BakeryPointLight/Direction
    #pragma pack(pop)
    static check_size<sizeof(BakeryPointLight::Direction), 0 + sizeof(int)> __GlobalNamespace_BakeryPointLight_DirectionSizeCheck;
    static_assert(sizeof(BakeryPointLight::Direction) == 0x4);
    public:
    // public System.Int32 UID
    // Size: 0x4
    // Offset: 0x18
    int UID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single intensity
    // Size: 0x4
    // Offset: 0x2C
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shadowSpread
    // Size: 0x4
    // Offset: 0x30
    float shadowSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cutoff
    // Size: 0x4
    // Offset: 0x34
    float cutoff;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean realisticFalloff
    // Size: 0x1
    // Offset: 0x38
    bool realisticFalloff;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: realisticFalloff and: samples
    char __padding5[0x3] = {};
    // public System.Int32 samples
    // Size: 0x4
    // Offset: 0x3C
    int samples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public BakeryPointLight/ftLightProjectionMode projMode
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode projMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode) == 0x4);
    // Padding between fields: projMode and: cookie
    char __padding7[0x4] = {};
    // public UnityEngine.Texture2D cookie
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Texture2D* cookie;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Single angle
    // Size: 0x4
    // Offset: 0x50
    float angle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single innerAngle
    // Size: 0x4
    // Offset: 0x54
    float innerAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Cubemap cubemap
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Cubemap* cubemap;
    // Field size check
    static_assert(sizeof(::UnityEngine::Cubemap*) == 0x8);
    // public UnityEngine.Object iesFile
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Object* iesFile;
    // Field size check
    static_assert(sizeof(::UnityEngine::Object*) == 0x8);
    // public System.Int32 bitmask
    // Size: 0x4
    // Offset: 0x68
    int bitmask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean bakeToIndirect
    // Size: 0x1
    // Offset: 0x6C
    bool bakeToIndirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shadowmask
    // Size: 0x1
    // Offset: 0x6D
    bool shadowmask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shadowmask and: indirectIntensity
    char __padding15[0x2] = {};
    // public System.Single indirectIntensity
    // Size: 0x4
    // Offset: 0x70
    float indirectIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single falloffMinRadius
    // Size: 0x4
    // Offset: 0x74
    float falloffMinRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 shadowmaskGroupID
    // Size: 0x4
    // Offset: 0x78
    int shadowmaskGroupID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public BakeryPointLight/Direction directionMode
    // Size: 0x4
    // Offset: 0x7C
    ::GlobalNamespace::BakeryPointLight::Direction directionMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakeryPointLight::Direction) == 0x4);
    // private System.Single screenRadius
    // Size: 0x4
    // Offset: 0x80
    float screenRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single GIZMO_MAXSIZE
    static constexpr const float GIZMO_MAXSIZE = 0.1;
    // Get static field: static private System.Single GIZMO_MAXSIZE
    static float _get_GIZMO_MAXSIZE();
    // Set static field: static private System.Single GIZMO_MAXSIZE
    static void _set_GIZMO_MAXSIZE(float value);
    // static field const value: static private System.Single GIZMO_SCALE
    static constexpr const float GIZMO_SCALE = 0.01;
    // Get static field: static private System.Single GIZMO_SCALE
    static float _get_GIZMO_SCALE();
    // Set static field: static private System.Single GIZMO_SCALE
    static void _set_GIZMO_SCALE(float value);
    // Get static field: static public System.Int32 lightsChanged
    static int _get_lightsChanged();
    // Set static field: static public System.Int32 lightsChanged
    static void _set_lightsChanged(int value);
    // Get instance field reference: public System.Int32 UID
    [[deprecated("Use field access instead!")]] int& dyn_UID();
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public System.Single intensity
    [[deprecated("Use field access instead!")]] float& dyn_intensity();
    // Get instance field reference: public System.Single shadowSpread
    [[deprecated("Use field access instead!")]] float& dyn_shadowSpread();
    // Get instance field reference: public System.Single cutoff
    [[deprecated("Use field access instead!")]] float& dyn_cutoff();
    // Get instance field reference: public System.Boolean realisticFalloff
    [[deprecated("Use field access instead!")]] bool& dyn_realisticFalloff();
    // Get instance field reference: public System.Int32 samples
    [[deprecated("Use field access instead!")]] int& dyn_samples();
    // Get instance field reference: public BakeryPointLight/ftLightProjectionMode projMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryPointLight::ftLightProjectionMode& dyn_projMode();
    // Get instance field reference: public UnityEngine.Texture2D cookie
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_cookie();
    // Get instance field reference: public System.Single angle
    [[deprecated("Use field access instead!")]] float& dyn_angle();
    // Get instance field reference: public System.Single innerAngle
    [[deprecated("Use field access instead!")]] float& dyn_innerAngle();
    // Get instance field reference: public UnityEngine.Cubemap cubemap
    [[deprecated("Use field access instead!")]] ::UnityEngine::Cubemap*& dyn_cubemap();
    // Get instance field reference: public UnityEngine.Object iesFile
    [[deprecated("Use field access instead!")]] ::UnityEngine::Object*& dyn_iesFile();
    // Get instance field reference: public System.Int32 bitmask
    [[deprecated("Use field access instead!")]] int& dyn_bitmask();
    // Get instance field reference: public System.Boolean bakeToIndirect
    [[deprecated("Use field access instead!")]] bool& dyn_bakeToIndirect();
    // Get instance field reference: public System.Boolean shadowmask
    [[deprecated("Use field access instead!")]] bool& dyn_shadowmask();
    // Get instance field reference: public System.Single indirectIntensity
    [[deprecated("Use field access instead!")]] float& dyn_indirectIntensity();
    // Get instance field reference: public System.Single falloffMinRadius
    [[deprecated("Use field access instead!")]] float& dyn_falloffMinRadius();
    // Get instance field reference: public System.Int32 shadowmaskGroupID
    [[deprecated("Use field access instead!")]] int& dyn_shadowmaskGroupID();
    // Get instance field reference: public BakeryPointLight/Direction directionMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryPointLight::Direction& dyn_directionMode();
    // Get instance field reference: private System.Single screenRadius
    [[deprecated("Use field access instead!")]] float& dyn_screenRadius();
    // public System.Void .ctor()
    // Offset: 0x1BD5BEC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BakeryPointLight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryPointLight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BakeryPointLight*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BD5C60
    static void _cctor();
  }; // BakeryPointLight
  #pragma pack(pop)
  static check_size<sizeof(BakeryPointLight), 128 + sizeof(float)> __GlobalNamespace_BakeryPointLightSizeCheck;
  static_assert(sizeof(BakeryPointLight) == 0x84);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryPointLight::Direction, "", "BakeryPointLight/Direction");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryPointLight::ftLightProjectionMode, "", "BakeryPointLight/ftLightProjectionMode");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BakeryPointLight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BakeryPointLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BakeryPointLight::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryPointLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
