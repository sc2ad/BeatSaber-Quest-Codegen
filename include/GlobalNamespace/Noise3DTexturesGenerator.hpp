// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture3D
  class Texture3D;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: MaterialPropertyNameCouple because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Noise3DTexturesGenerator
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: EEB3D8
  class Noise3DTexturesGenerator : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple
    struct MaterialTextureParamsCouple;
    // Nested type: GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple
    struct MaterialPropertyNameCouple;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Noise3DTexturesGenerator/MaterialTextureParamsCouple
    // [TokenAttribute] Offset: FFFFFFFF
    struct MaterialTextureParamsCouple/*, public System::ValueType*/ {
      public:
      // public System.String globalPropertyName
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppString* globalPropertyName;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // public Noise3DTexturesGenerator/MaterialPropertyNameCouple[] materialPropertyNameCouples
      // Size: 0x8
      // Offset: 0x8
      ::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple>* materialPropertyNameCouples;
      // Field size check
      static_assert(sizeof(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple>*) == 0x8);
      // Creating value type constructor for type: MaterialTextureParamsCouple
      constexpr MaterialTextureParamsCouple(::Il2CppString* globalPropertyName_ = {}, ::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple>* materialPropertyNameCouples_ = {}) noexcept : globalPropertyName{globalPropertyName_}, materialPropertyNameCouples{materialPropertyNameCouples_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field reference: public System.String globalPropertyName
      ::Il2CppString*& dyn_globalPropertyName();
      // Get instance field reference: public Noise3DTexturesGenerator/MaterialPropertyNameCouple[] materialPropertyNameCouples
      ::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple>*& dyn_materialPropertyNameCouples();
    }; // Noise3DTexturesGenerator/MaterialTextureParamsCouple
    #pragma pack(pop)
    static check_size<sizeof(Noise3DTexturesGenerator::MaterialTextureParamsCouple), 8 + sizeof(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple>*)> __GlobalNamespace_Noise3DTexturesGenerator_MaterialTextureParamsCoupleSizeCheck;
    static_assert(sizeof(Noise3DTexturesGenerator::MaterialTextureParamsCouple) == 0x10);
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: Noise3DTexturesGenerator/MaterialPropertyNameCouple
    // [TokenAttribute] Offset: FFFFFFFF
    struct MaterialPropertyNameCouple/*, public System::ValueType*/ {
      public:
      // public System.String texturePropertyName
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppString* texturePropertyName;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // public UnityEngine.Material material
      // Size: 0x8
      // Offset: 0x8
      UnityEngine::Material* material;
      // Field size check
      static_assert(sizeof(UnityEngine::Material*) == 0x8);
      // Creating value type constructor for type: MaterialPropertyNameCouple
      constexpr MaterialPropertyNameCouple(::Il2CppString* texturePropertyName_ = {}, UnityEngine::Material* material_ = {}) noexcept : texturePropertyName{texturePropertyName_}, material{material_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Get instance field reference: public System.String texturePropertyName
      ::Il2CppString*& dyn_texturePropertyName();
      // Get instance field reference: public UnityEngine.Material material
      UnityEngine::Material*& dyn_material();
    }; // Noise3DTexturesGenerator/MaterialPropertyNameCouple
    #pragma pack(pop)
    static check_size<sizeof(Noise3DTexturesGenerator::MaterialPropertyNameCouple), 8 + sizeof(UnityEngine::Material*)> __GlobalNamespace_Noise3DTexturesGenerator_MaterialPropertyNameCoupleSizeCheck;
    static_assert(sizeof(Noise3DTexturesGenerator::MaterialPropertyNameCouple) == 0x10);
    // private Noise3DTexturesGenerator/MaterialTextureParamsCouple[] _data
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>* data;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>*) == 0x8);
    // Creating value type constructor for type: Noise3DTexturesGenerator
    Noise3DTexturesGenerator(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>* data_ = {}) noexcept : data{data_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private UnityEngine.Texture3D _texture
    static UnityEngine::Texture3D* _get__texture();
    // Set static field: static private UnityEngine.Texture3D _texture
    static void _set__texture(UnityEngine::Texture3D* value);
    // Get instance field reference: private Noise3DTexturesGenerator/MaterialTextureParamsCouple[] _data
    ::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>*& dyn__data();
    // protected System.Void Awake()
    // Offset: 0x258A074
    void Awake();
    // static private UnityEngine.Color32[] CreateNoisePixels(System.Int32 width, System.Int32 height, System.Int32 depth, System.Single scale, System.Int32 repeat, System.Single contrast)
    // Offset: 0x258A2F0
    static ::Array<UnityEngine::Color32>* CreateNoisePixels(int width, int height, int depth, float scale, int repeat, float contrast);
    // public System.Void .ctor()
    // Offset: 0x258A57C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Noise3DTexturesGenerator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Noise3DTexturesGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Noise3DTexturesGenerator*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x258A584
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // Noise3DTexturesGenerator
  #pragma pack(pop)
  static check_size<sizeof(Noise3DTexturesGenerator), 24 + sizeof(::Array<GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple>*)> __GlobalNamespace_Noise3DTexturesGeneratorSizeCheck;
  static_assert(sizeof(Noise3DTexturesGenerator) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::Noise3DTexturesGenerator*, "", "Noise3DTexturesGenerator");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::Noise3DTexturesGenerator::MaterialTextureParamsCouple, "", "Noise3DTexturesGenerator/MaterialTextureParamsCouple");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::Noise3DTexturesGenerator::MaterialPropertyNameCouple, "", "Noise3DTexturesGenerator/MaterialPropertyNameCouple");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Noise3DTexturesGenerator::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::Noise3DTexturesGenerator::*)()>(&GlobalNamespace::Noise3DTexturesGenerator::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Noise3DTexturesGenerator*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Noise3DTexturesGenerator::CreateNoisePixels
// Il2CppName: CreateNoisePixels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::Color32>* (*)(int, int, int, float, int, float)>(&GlobalNamespace::Noise3DTexturesGenerator::CreateNoisePixels)> {
  static const MethodInfo* get() {
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* depth = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* scale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* repeat = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* contrast = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Noise3DTexturesGenerator*), "CreateNoisePixels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{width, height, depth, scale, repeat, contrast});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::Noise3DTexturesGenerator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::Noise3DTexturesGenerator::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::Noise3DTexturesGenerator::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::Noise3DTexturesGenerator*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
