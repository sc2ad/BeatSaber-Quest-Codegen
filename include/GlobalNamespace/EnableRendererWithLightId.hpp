// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightWithIdMonoBehaviour
#include "GlobalNamespace/LightWithIdMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: EnableRendererWithLightId
  class EnableRendererWithLightId;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EnableRendererWithLightId);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EnableRendererWithLightId*, "", "EnableRendererWithLightId");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: EnableRendererWithLightId
  // [TokenAttribute] Offset: FFFFFFFF
  class EnableRendererWithLightId : public ::GlobalNamespace::LightWithIdMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x30
    char ___base_padding[0x7] = {};
    public:
    // private UnityEngine.Renderer _renderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Renderer* renderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::Renderer*) == 0x8);
    // private System.Single _hideAlphaRangeMin
    // Size: 0x4
    // Offset: 0x38
    float hideAlphaRangeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hideAlphaRangeMax
    // Size: 0x4
    // Offset: 0x3C
    float hideAlphaRangeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private UnityEngine.Renderer _renderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::Renderer*& dyn__renderer();
    // Get instance field reference: private System.Single _hideAlphaRangeMin
    [[deprecated("Use field access instead!")]] float& dyn__hideAlphaRangeMin();
    // Get instance field reference: private System.Single _hideAlphaRangeMax
    [[deprecated("Use field access instead!")]] float& dyn__hideAlphaRangeMax();
    // public System.Void .ctor()
    // Offset: 0x1E7DD4C
    // Implemented from: LightWithIdMonoBehaviour
    // Base method: System.Void LightWithIdMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnableRendererWithLightId* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EnableRendererWithLightId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnableRendererWithLightId*, creationType>()));
    }
    // public override System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0x1E7DD08
    // Implemented from: LightWithIdMonoBehaviour
    // Base method: System.Void LightWithIdMonoBehaviour::ColorWasSet(UnityEngine.Color color)
    void ColorWasSet(::UnityEngine::Color color);
  }; // EnableRendererWithLightId
  #pragma pack(pop)
  static check_size<sizeof(EnableRendererWithLightId), 60 + sizeof(float)> __GlobalNamespace_EnableRendererWithLightIdSizeCheck;
  static_assert(sizeof(EnableRendererWithLightId) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EnableRendererWithLightId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::EnableRendererWithLightId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::EnableRendererWithLightId::*)(::UnityEngine::Color)>(&GlobalNamespace::EnableRendererWithLightId::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EnableRendererWithLightId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
