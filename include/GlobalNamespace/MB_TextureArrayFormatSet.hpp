// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_TextureArrayFormat
  class MB_TextureArrayFormat;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB2_EditorMethodsInterface
  class MB2_EditorMethodsInterface;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB_TextureArrayFormatSet
  class MB_TextureArrayFormatSet;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB_TextureArrayFormatSet);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB_TextureArrayFormatSet*, "", "MB_TextureArrayFormatSet");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MB_TextureArrayFormatSet
  // [TokenAttribute] Offset: FFFFFFFF
  class MB_TextureArrayFormatSet : public ::Il2CppObject {
    public:
    public:
    // public System.String name
    // Size: 0x8
    // Offset: 0x10
    ::StringW name;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.TextureFormat defaultFormat
    // Size: 0x4
    // Offset: 0x18
    ::UnityEngine::TextureFormat defaultFormat;
    // Field size check
    static_assert(sizeof(::UnityEngine::TextureFormat) == 0x4);
    // Padding between fields: defaultFormat and: formatOverrides
    char __padding1[0x4] = {};
    // public MB_TextureArrayFormat[] formatOverrides
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::MB_TextureArrayFormat*> formatOverrides;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MB_TextureArrayFormat*>) == 0x8);
    public:
    // Get instance field reference: public System.String name
    [[deprecated("Use field access instead!")]] ::StringW& dyn_name();
    // Get instance field reference: public UnityEngine.TextureFormat defaultFormat
    [[deprecated("Use field access instead!")]] ::UnityEngine::TextureFormat& dyn_defaultFormat();
    // Get instance field reference: public MB_TextureArrayFormat[] formatOverrides
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MB_TextureArrayFormat*>& dyn_formatOverrides();
    // public System.Void .ctor()
    // Offset: 0x1B644DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_TextureArrayFormatSet* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB_TextureArrayFormatSet::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_TextureArrayFormatSet*, creationType>()));
    }
    // public System.Boolean ValidateTextureImporterFormatsExistsForTextureFormats(DigitalOpus.MB.Core.MB2_EditorMethodsInterface editorMethods, System.Int32 idx)
    // Offset: 0x1B5E180
    bool ValidateTextureImporterFormatsExistsForTextureFormats(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface* editorMethods, int idx);
    // public UnityEngine.TextureFormat GetFormatForProperty(System.String propName)
    // Offset: 0x1B64430
    ::UnityEngine::TextureFormat GetFormatForProperty(::StringW propName);
  }; // MB_TextureArrayFormatSet
  #pragma pack(pop)
  static check_size<sizeof(MB_TextureArrayFormatSet), 32 + sizeof(::ArrayW<::GlobalNamespace::MB_TextureArrayFormat*>)> __GlobalNamespace_MB_TextureArrayFormatSetSizeCheck;
  static_assert(sizeof(MB_TextureArrayFormatSet) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureArrayFormatSet::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureArrayFormatSet::ValidateTextureImporterFormatsExistsForTextureFormats
// Il2CppName: ValidateTextureImporterFormatsExistsForTextureFormats
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB_TextureArrayFormatSet::*)(::DigitalOpus::MB::Core::MB2_EditorMethodsInterface*, int)>(&GlobalNamespace::MB_TextureArrayFormatSet::ValidateTextureImporterFormatsExistsForTextureFormats)> {
  static const MethodInfo* get() {
    static auto* editorMethods = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB2_EditorMethodsInterface")->byval_arg;
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureArrayFormatSet*), "ValidateTextureImporterFormatsExistsForTextureFormats", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{editorMethods, idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB_TextureArrayFormatSet::GetFormatForProperty
// Il2CppName: GetFormatForProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::TextureFormat (GlobalNamespace::MB_TextureArrayFormatSet::*)(::StringW)>(&GlobalNamespace::MB_TextureArrayFormatSet::GetFormatForProperty)> {
  static const MethodInfo* get() {
    static auto* propName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_TextureArrayFormatSet*), "GetFormatForProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{propName});
  }
};
