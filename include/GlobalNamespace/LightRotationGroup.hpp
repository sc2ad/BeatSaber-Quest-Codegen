// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightGroupSubsystem
#include "GlobalNamespace/LightGroupSubsystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightRotationGroup
  class LightRotationGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightRotationGroup);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightRotationGroup*, "", "LightRotationGroup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: LightRotationGroup
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class LightRotationGroup : public ::GlobalNamespace::LightGroupSubsystem {
    public:
    public:
    // [SpaceAttribute] Offset: 0x10E0090
    // private System.Boolean _mirrorX
    // Size: 0x1
    // Offset: 0x20
    bool mirrorX;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _mirrorY
    // Size: 0x1
    // Offset: 0x21
    bool mirrorY;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disableAutomaticTransformsGathering
    // Size: 0x1
    // Offset: 0x22
    bool disableAutomaticTransformsGathering;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableAutomaticTransformsGathering and: xTransforms
    char __padding2[0x5] = {};
    // private UnityEngine.Transform[] _xTransforms
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::Transform*> xTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // private UnityEngine.Transform[] _yTransforms
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::UnityEngine::Transform*> yTransforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    public:
    // Get instance field reference: private System.Boolean _mirrorX
    [[deprecated("Use field access instead!")]] bool& dyn__mirrorX();
    // Get instance field reference: private System.Boolean _mirrorY
    [[deprecated("Use field access instead!")]] bool& dyn__mirrorY();
    // Get instance field reference: private System.Boolean _disableAutomaticTransformsGathering
    [[deprecated("Use field access instead!")]] bool& dyn__disableAutomaticTransformsGathering();
    // Get instance field reference: private UnityEngine.Transform[] _xTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn__xTransforms();
    // Get instance field reference: private UnityEngine.Transform[] _yTransforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn__yTransforms();
    // public System.Boolean get_mirrorX()
    // Offset: 0x14BC910
    bool get_mirrorX();
    // public System.Boolean get_mirrorY()
    // Offset: 0x14BC918
    bool get_mirrorY();
    // public UnityEngine.Transform[] get_xTransforms()
    // Offset: 0x14BC920
    ::ArrayW<::UnityEngine::Transform*> get_xTransforms();
    // public UnityEngine.Transform[] get_yTransforms()
    // Offset: 0x14BC928
    ::ArrayW<::UnityEngine::Transform*> get_yTransforms();
    // public System.Void .ctor()
    // Offset: 0x14BC930
    // Implemented from: LightGroupSubsystem
    // Base method: System.Void LightGroupSubsystem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightRotationGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightRotationGroup*, creationType>()));
    }
  }; // LightRotationGroup
  #pragma pack(pop)
  static check_size<sizeof(LightRotationGroup), 48 + sizeof(::ArrayW<::UnityEngine::Transform*>)> __GlobalNamespace_LightRotationGroupSizeCheck;
  static_assert(sizeof(LightRotationGroup) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroup::get_mirrorX
// Il2CppName: get_mirrorX
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LightRotationGroup::*)()>(&GlobalNamespace::LightRotationGroup::get_mirrorX)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroup*), "get_mirrorX", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroup::get_mirrorY
// Il2CppName: get_mirrorY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LightRotationGroup::*)()>(&GlobalNamespace::LightRotationGroup::get_mirrorY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroup*), "get_mirrorY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroup::get_xTransforms
// Il2CppName: get_xTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (GlobalNamespace::LightRotationGroup::*)()>(&GlobalNamespace::LightRotationGroup::get_xTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroup*), "get_xTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroup::get_yTransforms
// Il2CppName: get_yTransforms
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Transform*> (GlobalNamespace::LightRotationGroup::*)()>(&GlobalNamespace::LightRotationGroup::get_yTransforms)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroup*), "get_yTransforms", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
