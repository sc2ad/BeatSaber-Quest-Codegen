// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Rect
#include "UnityEngine/Rect.hpp"
// Including type: DigitalOpus.MB.Core.MB2_LogLevel
#include "DigitalOpus/MB/Core/MB2_LogLevel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MB_TextureCombinerRenderTexture
  class MB_TextureCombinerRenderTexture;
}
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_TextureCombinerNonTextureProperties
  class MB3_TextureCombinerNonTextureProperties;
  // Forward declaring type: MB_TexSet
  class MB_TexSet;
  // Forward declaring type: ShaderTextureProperty
  class ShaderTextureProperty;
  // Forward declaring type: MB3_TextureCombiner
  class MB3_TextureCombiner;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB3_AtlasPackerRenderTexture
  class MB3_AtlasPackerRenderTexture;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB3_AtlasPackerRenderTexture);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB3_AtlasPackerRenderTexture*, "", "MB3_AtlasPackerRenderTexture");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: MB3_AtlasPackerRenderTexture
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class MB3_AtlasPackerRenderTexture : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MB_TextureCombinerRenderTexture fastRenderer
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MB_TextureCombinerRenderTexture* fastRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MB_TextureCombinerRenderTexture*) == 0x8);
    // private System.Boolean _doRenderAtlas
    // Size: 0x1
    // Offset: 0x20
    bool doRenderAtlas;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: doRenderAtlas and: width
    char __padding1[0x3] = {};
    // public System.Int32 width
    // Size: 0x4
    // Offset: 0x24
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 height
    // Size: 0x4
    // Offset: 0x28
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 padding
    // Size: 0x4
    // Offset: 0x2C
    int padding;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean isNormalMap
    // Size: 0x1
    // Offset: 0x30
    bool isNormalMap;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean fixOutOfBoundsUVs
    // Size: 0x1
    // Offset: 0x31
    bool fixOutOfBoundsUVs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean considerNonTextureProperties
    // Size: 0x1
    // Offset: 0x32
    bool considerNonTextureProperties;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: considerNonTextureProperties and: resultMaterialTextureBlender
    char __padding7[0x5] = {};
    // public DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender
    // Size: 0x8
    // Offset: 0x38
    ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties* resultMaterialTextureBlender;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*) == 0x8);
    // public UnityEngine.Rect[] rects
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Rect> rects;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Rect>) == 0x8);
    // public UnityEngine.Texture2D tex1
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Texture2D* tex1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB_TexSet> textureSets
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>* textureSets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>*) == 0x8);
    // public System.Int32 indexOfTexSetToRender
    // Size: 0x4
    // Offset: 0x58
    int indexOfTexSetToRender;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: indexOfTexSetToRender and: texPropertyName
    char __padding12[0x4] = {};
    // public DigitalOpus.MB.Core.ShaderTextureProperty texPropertyName
    // Size: 0x8
    // Offset: 0x60
    ::DigitalOpus::MB::Core::ShaderTextureProperty* texPropertyName;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::ShaderTextureProperty*) == 0x8);
    // public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    // Size: 0x4
    // Offset: 0x68
    ::DigitalOpus::MB::Core::MB2_LogLevel LOG_LEVEL;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB2_LogLevel) == 0x4);
    // Padding between fields: LOG_LEVEL and: testTex
    char __padding14[0x4] = {};
    // public UnityEngine.Texture2D testTex
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Texture2D* testTex;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public UnityEngine.Material testMat
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Material* testMat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MB_TextureCombinerRenderTexture fastRenderer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MB_TextureCombinerRenderTexture*& dyn_fastRenderer();
    // Get instance field reference: private System.Boolean _doRenderAtlas
    [[deprecated("Use field access instead!")]] bool& dyn__doRenderAtlas();
    // Get instance field reference: public System.Int32 width
    [[deprecated("Use field access instead!")]] int& dyn_width();
    // Get instance field reference: public System.Int32 height
    [[deprecated("Use field access instead!")]] int& dyn_height();
    // Get instance field reference: public System.Int32 padding
    [[deprecated("Use field access instead!")]] int& dyn_padding();
    // Get instance field reference: public System.Boolean isNormalMap
    [[deprecated("Use field access instead!")]] bool& dyn_isNormalMap();
    // Get instance field reference: public System.Boolean fixOutOfBoundsUVs
    [[deprecated("Use field access instead!")]] bool& dyn_fixOutOfBoundsUVs();
    // Get instance field reference: public System.Boolean considerNonTextureProperties
    [[deprecated("Use field access instead!")]] bool& dyn_considerNonTextureProperties();
    // Get instance field reference: public DigitalOpus.MB.Core.MB3_TextureCombinerNonTextureProperties resultMaterialTextureBlender
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_TextureCombinerNonTextureProperties*& dyn_resultMaterialTextureBlender();
    // Get instance field reference: public UnityEngine.Rect[] rects
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Rect>& dyn_rects();
    // Get instance field reference: public UnityEngine.Texture2D tex1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_tex1();
    // Get instance field reference: public System.Collections.Generic.List`1<DigitalOpus.MB.Core.MB_TexSet> textureSets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::DigitalOpus::MB::Core::MB_TexSet*>*& dyn_textureSets();
    // Get instance field reference: public System.Int32 indexOfTexSetToRender
    [[deprecated("Use field access instead!")]] int& dyn_indexOfTexSetToRender();
    // Get instance field reference: public DigitalOpus.MB.Core.ShaderTextureProperty texPropertyName
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::ShaderTextureProperty*& dyn_texPropertyName();
    // Get instance field reference: public DigitalOpus.MB.Core.MB2_LogLevel LOG_LEVEL
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB2_LogLevel& dyn_LOG_LEVEL();
    // Get instance field reference: public UnityEngine.Texture2D testTex
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_testTex();
    // Get instance field reference: public UnityEngine.Material testMat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_testMat();
    // public System.Void .ctor()
    // Offset: 0x11C4424
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_AtlasPackerRenderTexture* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB3_AtlasPackerRenderTexture::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_AtlasPackerRenderTexture*, creationType>()));
    }
    // public UnityEngine.Texture2D OnRenderAtlas(DigitalOpus.MB.Core.MB3_TextureCombiner combiner)
    // Offset: 0x11C4304
    ::UnityEngine::Texture2D* OnRenderAtlas(::DigitalOpus::MB::Core::MB3_TextureCombiner* combiner);
    // private System.Void OnRenderObject()
    // Offset: 0x11C43E8
    void OnRenderObject();
  }; // MB3_AtlasPackerRenderTexture
  #pragma pack(pop)
  static check_size<sizeof(MB3_AtlasPackerRenderTexture), 120 + sizeof(::UnityEngine::Material*)> __GlobalNamespace_MB3_AtlasPackerRenderTextureSizeCheck;
  static_assert(sizeof(MB3_AtlasPackerRenderTexture) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB3_AtlasPackerRenderTexture::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB3_AtlasPackerRenderTexture::OnRenderAtlas
// Il2CppName: OnRenderAtlas
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Texture2D* (GlobalNamespace::MB3_AtlasPackerRenderTexture::*)(::DigitalOpus::MB::Core::MB3_TextureCombiner*)>(&GlobalNamespace::MB3_AtlasPackerRenderTexture::OnRenderAtlas)> {
  static const MethodInfo* get() {
    static auto* combiner = &::il2cpp_utils::GetClassFromName("DigitalOpus.MB.Core", "MB3_TextureCombiner")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_AtlasPackerRenderTexture*), "OnRenderAtlas", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{combiner});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_AtlasPackerRenderTexture::OnRenderObject
// Il2CppName: OnRenderObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_AtlasPackerRenderTexture::*)()>(&GlobalNamespace::MB3_AtlasPackerRenderTexture::OnRenderObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_AtlasPackerRenderTexture*), "OnRenderObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
