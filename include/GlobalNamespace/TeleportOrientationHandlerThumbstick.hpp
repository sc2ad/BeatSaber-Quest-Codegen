// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportOrientationHandler
#include "GlobalNamespace/TeleportOrientationHandler.hpp"
// Including type: TeleportOrientationHandler/OrientationModes
#include "GlobalNamespace/TeleportOrientationHandler_OrientationModes.hpp"
// Including type: OVRInput/Controller
#include "GlobalNamespace/OVRInput.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportOrientationHandlerThumbstick
  class TeleportOrientationHandlerThumbstick;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportOrientationHandlerThumbstick);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportOrientationHandlerThumbstick*, "", "TeleportOrientationHandlerThumbstick");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: TeleportOrientationHandlerThumbstick
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportOrientationHandlerThumbstick : public ::GlobalNamespace::TeleportOrientationHandler {
    public:
    public:
    // [TooltipAttribute] Offset: 0x9941C8
    // public TeleportOrientationHandler/OrientationModes OrientationMode
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::TeleportOrientationHandler::OrientationModes OrientationMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TeleportOrientationHandler::OrientationModes) == 0x4);
    // [TooltipAttribute] Offset: 0x994200
    // public OVRInput/Controller Thumbstick
    // Size: 0x4
    // Offset: 0x44
    ::GlobalNamespace::OVRInput::Controller Thumbstick;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRInput::Controller) == 0x4);
    // [TooltipAttribute] Offset: 0x994238
    // public System.Single RotateStickThreshold
    // Size: 0x4
    // Offset: 0x48
    float RotateStickThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion _initialRotation
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Quaternion initialRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _currentRotation
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Quaternion currentRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector2 _lastValidDirection
    // Size: 0x8
    // Offset: 0x6C
    ::UnityEngine::Vector2 lastValidDirection;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get instance field reference: public TeleportOrientationHandler/OrientationModes OrientationMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TeleportOrientationHandler::OrientationModes& dyn_OrientationMode();
    // Get instance field reference: public OVRInput/Controller Thumbstick
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRInput::Controller& dyn_Thumbstick();
    // Get instance field reference: public System.Single RotateStickThreshold
    [[deprecated("Use field access instead!")]] float& dyn_RotateStickThreshold();
    // Get instance field reference: private UnityEngine.Quaternion _initialRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__initialRotation();
    // Get instance field reference: private UnityEngine.Quaternion _currentRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__currentRotation();
    // Get instance field reference: private UnityEngine.Vector2 _lastValidDirection
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn__lastValidDirection();
    // public System.Void .ctor()
    // Offset: 0xCF6A70
    // Implemented from: TeleportOrientationHandler
    // Base method: System.Void TeleportOrientationHandler::.ctor()
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportOrientationHandlerThumbstick* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportOrientationHandlerThumbstick::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportOrientationHandlerThumbstick*, creationType>()));
    }
    // protected override System.Void InitializeTeleportDestination()
    // Offset: 0xCF65BC
    // Implemented from: TeleportOrientationHandler
    // Base method: System.Void TeleportOrientationHandler::InitializeTeleportDestination()
    void InitializeTeleportDestination();
    // protected override System.Void UpdateTeleportDestination()
    // Offset: 0xCF6600
    // Implemented from: TeleportOrientationHandler
    // Base method: System.Void TeleportOrientationHandler::UpdateTeleportDestination()
    void UpdateTeleportDestination();
  }; // TeleportOrientationHandlerThumbstick
  #pragma pack(pop)
  static check_size<sizeof(TeleportOrientationHandlerThumbstick), 108 + sizeof(::UnityEngine::Vector2)> __GlobalNamespace_TeleportOrientationHandlerThumbstickSizeCheck;
  static_assert(sizeof(TeleportOrientationHandlerThumbstick) == 0x74);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandlerThumbstick::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandlerThumbstick::InitializeTeleportDestination
// Il2CppName: InitializeTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandlerThumbstick::*)()>(&GlobalNamespace::TeleportOrientationHandlerThumbstick::InitializeTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandlerThumbstick*), "InitializeTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandlerThumbstick::UpdateTeleportDestination
// Il2CppName: UpdateTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandlerThumbstick::*)()>(&GlobalNamespace::TeleportOrientationHandlerThumbstick::UpdateTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandlerThumbstick*), "UpdateTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
