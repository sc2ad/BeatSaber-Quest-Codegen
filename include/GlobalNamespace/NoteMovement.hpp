// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: MovementPhase because it is already included!
  // Forward declaring type: NoteFloorMovement
  class NoteFloorMovement;
  // Forward declaring type: NoteJump
  class NoteJump;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteMovement
  class NoteMovement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteMovement);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteMovement*, "", "NoteMovement");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: NoteMovement
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteMovement : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::NoteMovement::MovementPhase
    struct MovementPhase;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: NoteMovement/MovementPhase
    // [TokenAttribute] Offset: FFFFFFFF
    struct MovementPhase/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MovementPhase
      constexpr MovementPhase(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public NoteMovement/MovementPhase None
      static constexpr const int None = 0;
      // Get static field: static public NoteMovement/MovementPhase None
      static ::GlobalNamespace::NoteMovement::MovementPhase _get_None();
      // Set static field: static public NoteMovement/MovementPhase None
      static void _set_None(::GlobalNamespace::NoteMovement::MovementPhase value);
      // static field const value: static public NoteMovement/MovementPhase MovingOnTheFloor
      static constexpr const int MovingOnTheFloor = 1;
      // Get static field: static public NoteMovement/MovementPhase MovingOnTheFloor
      static ::GlobalNamespace::NoteMovement::MovementPhase _get_MovingOnTheFloor();
      // Set static field: static public NoteMovement/MovementPhase MovingOnTheFloor
      static void _set_MovingOnTheFloor(::GlobalNamespace::NoteMovement::MovementPhase value);
      // static field const value: static public NoteMovement/MovementPhase Jumping
      static constexpr const int Jumping = 2;
      // Get static field: static public NoteMovement/MovementPhase Jumping
      static ::GlobalNamespace::NoteMovement::MovementPhase _get_Jumping();
      // Set static field: static public NoteMovement/MovementPhase Jumping
      static void _set_Jumping(::GlobalNamespace::NoteMovement::MovementPhase value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // NoteMovement/MovementPhase
    #pragma pack(pop)
    static check_size<sizeof(NoteMovement::MovementPhase), 0 + sizeof(int)> __GlobalNamespace_NoteMovement_MovementPhaseSizeCheck;
    static_assert(sizeof(NoteMovement::MovementPhase) == 0x4);
    public:
    // private NoteFloorMovement _floorMovement
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::NoteFloorMovement* floorMovement;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteFloorMovement*) == 0x8);
    // private NoteJump _jump
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NoteJump* jump;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteJump*) == 0x8);
    // [SpaceAttribute] Offset: 0x111F428
    // private System.Single _zOffset
    // Size: 0x4
    // Offset: 0x28
    float zOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: zOffset and: didInitEvent
    char __padding2[0x4] = {};
    // private System.Action didInitEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action* didInitEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action noteDidStartJumpEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* noteDidStartJumpEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action noteDidFinishJumpEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* noteDidFinishJumpEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action noteDidPassMissedMarkerEvent
    // Size: 0x8
    // Offset: 0x48
    ::System::Action* noteDidPassMissedMarkerEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action noteDidPassHalfJumpEvent
    // Size: 0x8
    // Offset: 0x50
    ::System::Action* noteDidPassHalfJumpEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<NoteMovement> noteDidPassJumpThreeQuartersEvent
    // Size: 0x8
    // Offset: 0x58
    ::System::Action_1<::GlobalNamespace::NoteMovement*>* noteDidPassJumpThreeQuartersEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::NoteMovement*>*) == 0x8);
    // private System.Action noteDidMoveInJumpPhaseEvent
    // Size: 0x8
    // Offset: 0x60
    ::System::Action* noteDidMoveInJumpPhaseEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private NoteMovement/MovementPhase <movementPhase>k__BackingField
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::NoteMovement::MovementPhase movementPhase;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteMovement::MovementPhase) == 0x4);
    // private UnityEngine.Vector3 _position
    // Size: 0xC
    // Offset: 0x6C
    ::UnityEngine::Vector3 position;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _prevPosition
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 prevPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _localPosition
    // Size: 0xC
    // Offset: 0x84
    ::UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _prevLocalPosition
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 prevLocalPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private NoteFloorMovement _floorMovement
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteFloorMovement*& dyn__floorMovement();
    // Get instance field reference: private NoteJump _jump
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteJump*& dyn__jump();
    // Get instance field reference: private System.Single _zOffset
    [[deprecated("Use field access instead!")]] float& dyn__zOffset();
    // Get instance field reference: private System.Action didInitEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didInitEvent();
    // Get instance field reference: private System.Action noteDidStartJumpEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_noteDidStartJumpEvent();
    // Get instance field reference: private System.Action noteDidFinishJumpEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_noteDidFinishJumpEvent();
    // Get instance field reference: private System.Action noteDidPassMissedMarkerEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_noteDidPassMissedMarkerEvent();
    // Get instance field reference: private System.Action noteDidPassHalfJumpEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_noteDidPassHalfJumpEvent();
    // Get instance field reference: private System.Action`1<NoteMovement> noteDidPassJumpThreeQuartersEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteMovement*>*& dyn_noteDidPassJumpThreeQuartersEvent();
    // Get instance field reference: private System.Action noteDidMoveInJumpPhaseEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_noteDidMoveInJumpPhaseEvent();
    // Get instance field reference: private NoteMovement/MovementPhase <movementPhase>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteMovement::MovementPhase& dyn_$movementPhase$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector3 _position
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__position();
    // Get instance field reference: private UnityEngine.Vector3 _prevPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__prevPosition();
    // Get instance field reference: private UnityEngine.Vector3 _localPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localPosition();
    // Get instance field reference: private UnityEngine.Vector3 _prevLocalPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__prevLocalPosition();
    // public NoteMovement/MovementPhase get_movementPhase()
    // Offset: 0x1586F18
    ::GlobalNamespace::NoteMovement::MovementPhase get_movementPhase();
    // private System.Void set_movementPhase(NoteMovement/MovementPhase value)
    // Offset: 0x1586F20
    void set_movementPhase(::GlobalNamespace::NoteMovement::MovementPhase value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x1586F28
    ::UnityEngine::Vector3 get_position();
    // public UnityEngine.Vector3 get_prevPosition()
    // Offset: 0x1586F34
    ::UnityEngine::Vector3 get_prevPosition();
    // public UnityEngine.Vector3 get_localPosition()
    // Offset: 0x1586F40
    ::UnityEngine::Vector3 get_localPosition();
    // public UnityEngine.Vector3 get_prevLocalPosition()
    // Offset: 0x1586F4C
    ::UnityEngine::Vector3 get_prevLocalPosition();
    // public UnityEngine.Quaternion get_worldRotation()
    // Offset: 0x1586F58
    ::UnityEngine::Quaternion get_worldRotation();
    // public UnityEngine.Quaternion get_inverseWorldRotation()
    // Offset: 0x1586F78
    ::UnityEngine::Quaternion get_inverseWorldRotation();
    // public UnityEngine.Vector3 get_moveEndPos()
    // Offset: 0x1586F98
    ::UnityEngine::Vector3 get_moveEndPos();
    // public System.Single get_moveStartTime()
    // Offset: 0x1586FB8
    float get_moveStartTime();
    // public System.Single get_moveDuration()
    // Offset: 0x1586FD4
    float get_moveDuration();
    // public UnityEngine.Vector3 get_beatPos()
    // Offset: 0x1586FF0
    ::UnityEngine::Vector3 get_beatPos();
    // public System.Single get_jumpDuration()
    // Offset: 0x158700C
    float get_jumpDuration();
    // public UnityEngine.Vector3 get_jumpMoveVec()
    // Offset: 0x1587028
    ::UnityEngine::Vector3 get_jumpMoveVec();
    // public System.Single get_distanceToPlayer()
    // Offset: 0x1587048
    float get_distanceToPlayer();
    // public System.Void add_didInitEvent(System.Action value)
    // Offset: 0x1586620
    void add_didInitEvent(::System::Action* value);
    // public System.Void remove_didInitEvent(System.Action value)
    // Offset: 0x15866C4
    void remove_didInitEvent(::System::Action* value);
    // public System.Void add_noteDidStartJumpEvent(System.Action value)
    // Offset: 0x1586768
    void add_noteDidStartJumpEvent(::System::Action* value);
    // public System.Void remove_noteDidStartJumpEvent(System.Action value)
    // Offset: 0x158680C
    void remove_noteDidStartJumpEvent(::System::Action* value);
    // public System.Void add_noteDidFinishJumpEvent(System.Action value)
    // Offset: 0x15868B0
    void add_noteDidFinishJumpEvent(::System::Action* value);
    // public System.Void remove_noteDidFinishJumpEvent(System.Action value)
    // Offset: 0x1586954
    void remove_noteDidFinishJumpEvent(::System::Action* value);
    // public System.Void add_noteDidPassMissedMarkerEvent(System.Action value)
    // Offset: 0x15869F8
    void add_noteDidPassMissedMarkerEvent(::System::Action* value);
    // public System.Void remove_noteDidPassMissedMarkerEvent(System.Action value)
    // Offset: 0x1586A9C
    void remove_noteDidPassMissedMarkerEvent(::System::Action* value);
    // public System.Void add_noteDidPassHalfJumpEvent(System.Action value)
    // Offset: 0x1586B40
    void add_noteDidPassHalfJumpEvent(::System::Action* value);
    // public System.Void remove_noteDidPassHalfJumpEvent(System.Action value)
    // Offset: 0x1586BE4
    void remove_noteDidPassHalfJumpEvent(::System::Action* value);
    // public System.Void add_noteDidPassJumpThreeQuartersEvent(System.Action`1<NoteMovement> value)
    // Offset: 0x1586C88
    void add_noteDidPassJumpThreeQuartersEvent(::System::Action_1<::GlobalNamespace::NoteMovement*>* value);
    // public System.Void remove_noteDidPassJumpThreeQuartersEvent(System.Action`1<NoteMovement> value)
    // Offset: 0x1586D2C
    void remove_noteDidPassJumpThreeQuartersEvent(::System::Action_1<::GlobalNamespace::NoteMovement*>* value);
    // public System.Void add_noteDidMoveInJumpPhaseEvent(System.Action value)
    // Offset: 0x1586DD0
    void add_noteDidMoveInJumpPhaseEvent(::System::Action* value);
    // public System.Void remove_noteDidMoveInJumpPhaseEvent(System.Action value)
    // Offset: 0x1586E74
    void remove_noteDidMoveInJumpPhaseEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x15877A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteMovement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteMovement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteMovement*, creationType>()));
    }
    // public System.Void Init(System.Single beatTime, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Single flipYSide, System.Single endRotation, System.Boolean rotateTowardsPlayer, System.Boolean useRandomRotation)
    // Offset: 0x1587088
    void Init(float beatTime, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float flipYSide, float endRotation, bool rotateTowardsPlayer, bool useRandomRotation);
    // protected System.Void Awake()
    // Offset: 0x1587234
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x15873C4
    void OnDestroy();
    // private System.Void HandleFloorMovementDidFinish()
    // Offset: 0x15875C8
    void HandleFloorMovementDidFinish();
    // private System.Void HandleNoteJumpDidFinish()
    // Offset: 0x1587638
    void HandleNoteJumpDidFinish();
    // private System.Void HandleNoteJumpDidPassMissedMark()
    // Offset: 0x1587654
    void HandleNoteJumpDidPassMissedMark();
    // private System.Void HandleNoteJumpDidPassThreeQuarters(NoteJump noteJump)
    // Offset: 0x1587668
    void HandleNoteJumpDidPassThreeQuarters(::GlobalNamespace::NoteJump* noteJump);
    // private System.Void HandleNoteJumpNoteJumpDidPassHalf()
    // Offset: 0x15876CC
    void HandleNoteJumpNoteJumpDidPassHalf();
    // public System.Void ManualUpdate()
    // Offset: 0x15876E0
    void ManualUpdate();
  }; // NoteMovement
  #pragma pack(pop)
  static check_size<sizeof(NoteMovement), 144 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_NoteMovementSizeCheck;
  static_assert(sizeof(NoteMovement) == 0x9C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteMovement::MovementPhase, "", "NoteMovement/MovementPhase");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_movementPhase
// Il2CppName: get_movementPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteMovement::MovementPhase (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_movementPhase)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_movementPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::set_movementPhase
// Il2CppName: set_movementPhase
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::GlobalNamespace::NoteMovement::MovementPhase)>(&GlobalNamespace::NoteMovement::set_movementPhase)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "NoteMovement/MovementPhase")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "set_movementPhase", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_position
// Il2CppName: get_position
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_position)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_position", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_prevPosition
// Il2CppName: get_prevPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_prevPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_prevPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_localPosition
// Il2CppName: get_localPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_localPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_localPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_prevLocalPosition
// Il2CppName: get_prevLocalPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_prevLocalPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_prevLocalPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_worldRotation
// Il2CppName: get_worldRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_worldRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_worldRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_inverseWorldRotation
// Il2CppName: get_inverseWorldRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_inverseWorldRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_inverseWorldRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_moveEndPos
// Il2CppName: get_moveEndPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_moveEndPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_moveEndPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_moveStartTime
// Il2CppName: get_moveStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_moveStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_moveStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_moveDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_beatPos
// Il2CppName: get_beatPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_beatPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_beatPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_jumpMoveVec
// Il2CppName: get_jumpMoveVec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_jumpMoveVec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_jumpMoveVec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::get_distanceToPlayer
// Il2CppName: get_distanceToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::get_distanceToPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "get_distanceToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_didInitEvent
// Il2CppName: add_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::add_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_didInitEvent
// Il2CppName: remove_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::remove_didInitEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_noteDidStartJumpEvent
// Il2CppName: add_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::add_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_noteDidStartJumpEvent
// Il2CppName: remove_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::remove_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_noteDidFinishJumpEvent
// Il2CppName: add_noteDidFinishJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::add_noteDidFinishJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_noteDidFinishJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_noteDidFinishJumpEvent
// Il2CppName: remove_noteDidFinishJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::remove_noteDidFinishJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_noteDidFinishJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_noteDidPassMissedMarkerEvent
// Il2CppName: add_noteDidPassMissedMarkerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::add_noteDidPassMissedMarkerEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_noteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_noteDidPassMissedMarkerEvent
// Il2CppName: remove_noteDidPassMissedMarkerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::remove_noteDidPassMissedMarkerEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_noteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_noteDidPassHalfJumpEvent
// Il2CppName: add_noteDidPassHalfJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::add_noteDidPassHalfJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_noteDidPassHalfJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_noteDidPassHalfJumpEvent
// Il2CppName: remove_noteDidPassHalfJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::remove_noteDidPassHalfJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_noteDidPassHalfJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_noteDidPassJumpThreeQuartersEvent
// Il2CppName: add_noteDidPassJumpThreeQuartersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action_1<::GlobalNamespace::NoteMovement*>*)>(&GlobalNamespace::NoteMovement::add_noteDidPassJumpThreeQuartersEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteMovement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_noteDidPassJumpThreeQuartersEvent
// Il2CppName: remove_noteDidPassJumpThreeQuartersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action_1<::GlobalNamespace::NoteMovement*>*)>(&GlobalNamespace::NoteMovement::remove_noteDidPassJumpThreeQuartersEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteMovement")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::add_noteDidMoveInJumpPhaseEvent
// Il2CppName: add_noteDidMoveInJumpPhaseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::add_noteDidMoveInJumpPhaseEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "add_noteDidMoveInJumpPhaseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::remove_noteDidMoveInJumpPhaseEvent
// Il2CppName: remove_noteDidMoveInJumpPhaseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::System::Action*)>(&GlobalNamespace::NoteMovement::remove_noteDidMoveInJumpPhaseEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "remove_noteDidMoveInJumpPhaseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(float, float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, float, float, float, bool, bool)>(&GlobalNamespace::NoteMovement::Init)> {
  static const MethodInfo* get() {
    static auto* beatTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* worldRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* moveStartPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* moveEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* jumpEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* moveDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* flipYSide = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rotateTowardsPlayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useRandomRotation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatTime, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, flipYSide, endRotation, rotateTowardsPlayer, useRandomRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::HandleFloorMovementDidFinish
// Il2CppName: HandleFloorMovementDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::HandleFloorMovementDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "HandleFloorMovementDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::HandleNoteJumpDidFinish
// Il2CppName: HandleNoteJumpDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::HandleNoteJumpDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "HandleNoteJumpDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::HandleNoteJumpDidPassMissedMark
// Il2CppName: HandleNoteJumpDidPassMissedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::HandleNoteJumpDidPassMissedMark)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "HandleNoteJumpDidPassMissedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::HandleNoteJumpDidPassThreeQuarters
// Il2CppName: HandleNoteJumpDidPassThreeQuarters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)(::GlobalNamespace::NoteJump*)>(&GlobalNamespace::NoteMovement::HandleNoteJumpDidPassThreeQuarters)> {
  static const MethodInfo* get() {
    static auto* noteJump = &::il2cpp_utils::GetClassFromName("", "NoteJump")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "HandleNoteJumpDidPassThreeQuarters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteJump});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::HandleNoteJumpNoteJumpDidPassHalf
// Il2CppName: HandleNoteJumpNoteJumpDidPassHalf
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::HandleNoteJumpNoteJumpDidPassHalf)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "HandleNoteJumpNoteJumpDidPassHalf", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteMovement::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteMovement::*)()>(&GlobalNamespace::NoteMovement::ManualUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteMovement*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
