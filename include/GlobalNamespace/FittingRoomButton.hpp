// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
// Including type: GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem
#include "GorillaNetworking/CosmeticsController_CosmeticItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FittingRoomButton
  class FittingRoomButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FittingRoomButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FittingRoomButton*, "", "FittingRoomButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: FittingRoomButton
  // [TokenAttribute] Offset: FFFFFFFF
  class FittingRoomButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem currentCosmeticItem
    // Size: 0x32
    // Offset: 0x58
    ::GorillaNetworking::CosmeticsController_CosmeticItem currentCosmeticItem;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    // Padding between fields: currentCosmeticItem and: currentImage
    char __padding0[0x6] = {};
    // public UnityEngine.UI.Image currentImage
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::UI::Image* currentImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.MeshRenderer button
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::MeshRenderer* button;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public UnityEngine.Material blank
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Material* blank;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.String noCosmeticText
    // Size: 0x8
    // Offset: 0xA8
    ::StringW noCosmeticText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.UI.Text buttonText
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::UI::Text* buttonText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem currentCosmeticItem
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_currentCosmeticItem();
    // Get instance field reference: public UnityEngine.UI.Image currentImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_currentImage();
    // Get instance field reference: public UnityEngine.MeshRenderer button
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_button();
    // Get instance field reference: public UnityEngine.Material blank
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_blank();
    // Get instance field reference: public System.String noCosmeticText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_noCosmeticText();
    // Get instance field reference: public UnityEngine.UI.Text buttonText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_buttonText();
    // public System.Void .ctor()
    // Offset: 0xC66FB4
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FittingRoomButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FittingRoomButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FittingRoomButton*, creationType>()));
    }
    // public override System.Void Start()
    // Offset: 0xC66DC8
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::Start()
    void Start();
    // public override System.Void UpdateColor()
    // Offset: 0xC66E44
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::UpdateColor()
    void UpdateColor();
    // public override System.Void ButtonActivationWithHand(System.Boolean isLeftHand)
    // Offset: 0xC66F24
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivationWithHand(System.Boolean isLeftHand)
    void ButtonActivationWithHand(bool isLeftHand);
  }; // FittingRoomButton
  #pragma pack(pop)
  static check_size<sizeof(FittingRoomButton), 176 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_FittingRoomButtonSizeCheck;
  static_assert(sizeof(FittingRoomButton) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FittingRoomButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FittingRoomButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FittingRoomButton::*)()>(&GlobalNamespace::FittingRoomButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FittingRoomButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FittingRoomButton::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FittingRoomButton::*)()>(&GlobalNamespace::FittingRoomButton::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FittingRoomButton*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FittingRoomButton::ButtonActivationWithHand
// Il2CppName: ButtonActivationWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FittingRoomButton::*)(bool)>(&GlobalNamespace::FittingRoomButton::ButtonActivationWithHand)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FittingRoomButton*), "ButtonActivationWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
