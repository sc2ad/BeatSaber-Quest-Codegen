// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LogType
  struct LogType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CrashManagerSO
  class CrashManagerSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CrashManagerSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CrashManagerSO*, "", "CrashManagerSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: CrashManagerSO
  // [TokenAttribute] Offset: FFFFFFFF
  class CrashManagerSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    public:
    // private System.String _logString
    // Size: 0x8
    // Offset: 0x18
    ::StringW logString;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _stackTrace
    // Size: 0x8
    // Offset: 0x20
    ::StringW stackTrace;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String _logString
    [[deprecated("Use field access instead!")]] ::StringW& dyn__logString();
    // Get instance field reference: private System.String _stackTrace
    [[deprecated("Use field access instead!")]] ::StringW& dyn__stackTrace();
    // public System.String get_logString()
    // Offset: 0x1459370
    ::StringW get_logString();
    // public System.String get_stackTrace()
    // Offset: 0x1459378
    ::StringW get_stackTrace();
    // public System.Void .ctor()
    // Offset: 0x145950C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrashManagerSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CrashManagerSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrashManagerSO*, creationType>()));
    }
    // public System.Void StartCatchingExceptions()
    // Offset: 0x1459380
    void StartCatchingExceptions();
    // protected System.Void OnDisable()
    // Offset: 0x14593F4
    void OnDisable();
    // private System.Void HandleLog(System.String logString, System.String stackTrace, UnityEngine.LogType type)
    // Offset: 0x1459468
    void HandleLog(::StringW logString, ::StringW stackTrace, ::UnityEngine::LogType type);
  }; // CrashManagerSO
  #pragma pack(pop)
  static check_size<sizeof(CrashManagerSO), 32 + sizeof(::StringW)> __GlobalNamespace_CrashManagerSOSizeCheck;
  static_assert(sizeof(CrashManagerSO) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CrashManagerSO::get_logString
// Il2CppName: get_logString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CrashManagerSO::*)()>(&GlobalNamespace::CrashManagerSO::get_logString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CrashManagerSO*), "get_logString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CrashManagerSO::get_stackTrace
// Il2CppName: get_stackTrace
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CrashManagerSO::*)()>(&GlobalNamespace::CrashManagerSO::get_stackTrace)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CrashManagerSO*), "get_stackTrace", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CrashManagerSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CrashManagerSO::StartCatchingExceptions
// Il2CppName: StartCatchingExceptions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CrashManagerSO::*)()>(&GlobalNamespace::CrashManagerSO::StartCatchingExceptions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CrashManagerSO*), "StartCatchingExceptions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CrashManagerSO::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CrashManagerSO::*)()>(&GlobalNamespace::CrashManagerSO::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CrashManagerSO*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CrashManagerSO::HandleLog
// Il2CppName: HandleLog
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CrashManagerSO::*)(::StringW, ::StringW, ::UnityEngine::LogType)>(&GlobalNamespace::CrashManagerSO::HandleLog)> {
  static const MethodInfo* get() {
    static auto* logString = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* stackTrace = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* type = &::il2cpp_utils::GetClassFromName("UnityEngine", "LogType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CrashManagerSO*), "HandleLog", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{logString, stackTrace, type});
  }
};
