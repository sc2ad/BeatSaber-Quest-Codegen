// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaLightmapData
  class GorillaLightmapData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaLightmapData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaLightmapData*, "", "GorillaLightmapData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLightmapData
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaLightmapData : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Texture2D[] dirTextures
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Texture2D*> dirTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public UnityEngine.Texture2D[] lightTextures
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::Texture2D*> lightTextures;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Texture2D*>) == 0x8);
    // public UnityEngine.Color[][] lights
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::ArrayW<::UnityEngine::Color>> lights;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Color>>) == 0x8);
    // public UnityEngine.Color[][] dirs
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::ArrayW<::UnityEngine::Color>> dirs;
    // Field size check
    static_assert(sizeof(::ArrayW<::ArrayW<::UnityEngine::Color>>) == 0x8);
    // public System.Boolean done
    // Size: 0x1
    // Offset: 0x38
    bool done;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Texture2D[] dirTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_dirTextures();
    // Get instance field reference: public UnityEngine.Texture2D[] lightTextures
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Texture2D*>& dyn_lightTextures();
    // Get instance field reference: public UnityEngine.Color[][] lights
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Color>>& dyn_lights();
    // Get instance field reference: public UnityEngine.Color[][] dirs
    [[deprecated("Use field access instead!")]] ::ArrayW<::ArrayW<::UnityEngine::Color>>& dyn_dirs();
    // Get instance field reference: public System.Boolean done
    [[deprecated("Use field access instead!")]] bool& dyn_done();
    // public System.Void .ctor()
    // Offset: 0xDB1B28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaLightmapData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaLightmapData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaLightmapData*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xDB18AC
    void Awake();
  }; // GorillaLightmapData
  #pragma pack(pop)
  static check_size<sizeof(GorillaLightmapData), 56 + sizeof(bool)> __GlobalNamespace_GorillaLightmapDataSizeCheck;
  static_assert(sizeof(GorillaLightmapData) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaLightmapData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaLightmapData::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaLightmapData::*)()>(&GlobalNamespace::GorillaLightmapData::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaLightmapData*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
