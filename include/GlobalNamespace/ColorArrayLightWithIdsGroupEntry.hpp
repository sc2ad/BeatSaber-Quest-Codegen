// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorArrayLightWithIds
  class ColorArrayLightWithIds;
  // Forward declaring type: LightGroupSO
  class LightGroupSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColorArrayLightWithIdsGroupEntry
  class ColorArrayLightWithIdsGroupEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColorArrayLightWithIdsGroupEntry);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColorArrayLightWithIdsGroupEntry*, "", "ColorArrayLightWithIdsGroupEntry");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ColorArrayLightWithIdsGroupEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorArrayLightWithIdsGroupEntry : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private ColorArrayLightWithIds _colorArrayLightWithIds
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::ColorArrayLightWithIds* colorArrayLightWithIds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorArrayLightWithIds*) == 0x8);
    // [SpaceAttribute] Offset: 0x1107A70
    // private LightGroupSO[] _lightGroups
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::LightGroupSO*> lightGroups;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightGroupSO*>) == 0x8);
    // private System.Int32[] _excludedLightIds
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<int> excludedLightIds;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private ColorArrayLightWithIds _colorArrayLightWithIds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorArrayLightWithIds*& dyn__colorArrayLightWithIds();
    // Get instance field reference: private LightGroupSO[] _lightGroups
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroupSO*>& dyn__lightGroups();
    // Get instance field reference: private System.Int32[] _excludedLightIds
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__excludedLightIds();
    // public LightGroupSO[] get_lightGroups()
    // Offset: 0x1CB9D70
    ::ArrayW<::GlobalNamespace::LightGroupSO*> get_lightGroups();
    // public System.Void .ctor()
    // Offset: 0x1CB9D78
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorArrayLightWithIdsGroupEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIdsGroupEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorArrayLightWithIdsGroupEntry*, creationType>()));
    }
  }; // ColorArrayLightWithIdsGroupEntry
  #pragma pack(pop)
  static check_size<sizeof(ColorArrayLightWithIdsGroupEntry), 40 + sizeof(::ArrayW<int>)> __GlobalNamespace_ColorArrayLightWithIdsGroupEntrySizeCheck;
  static_assert(sizeof(ColorArrayLightWithIdsGroupEntry) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColorArrayLightWithIdsGroupEntry::get_lightGroups
// Il2CppName: get_lightGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::LightGroupSO*> (GlobalNamespace::ColorArrayLightWithIdsGroupEntry::*)()>(&GlobalNamespace::ColorArrayLightWithIdsGroupEntry::get_lightGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorArrayLightWithIdsGroupEntry*), "get_lightGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorArrayLightWithIdsGroupEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
