// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaFlagSpawn
  class GorillaFlagSpawn;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaFlagSpawn);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaFlagSpawn*, "", "GorillaFlagSpawn");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: GorillaFlagSpawn
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaFlagSpawn : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean isRedFlagSpawn
    // Size: 0x1
    // Offset: 0x18
    bool isRedFlagSpawn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean isRedFlagSpawn
    [[deprecated("Use field access instead!")]] bool& dyn_isRedFlagSpawn();
    // public System.Void .ctor()
    // Offset: 0xC6A344
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaFlagSpawn* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFlagSpawn::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaFlagSpawn*, creationType>()));
    }
  }; // GorillaFlagSpawn
  #pragma pack(pop)
  static check_size<sizeof(GorillaFlagSpawn), 24 + sizeof(bool)> __GlobalNamespace_GorillaFlagSpawnSizeCheck;
  static_assert(sizeof(GorillaFlagSpawn) == 0x19);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaFlagSpawn::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
