// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightGroup
  class LightGroup;
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
  // Forward declaring type: BufferedLightColorGroupEffect
  class BufferedLightColorGroupEffect;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BufferedLightColorGroupEffectManager
  class BufferedLightColorGroupEffectManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BufferedLightColorGroupEffectManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BufferedLightColorGroupEffectManager*, "", "BufferedLightColorGroupEffectManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: BufferedLightColorGroupEffectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BufferedLightColorGroupEffectManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private LightGroup[] _lightGroups
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::LightGroup*> lightGroups;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightGroup*>) == 0x8);
    // private MaterialPropertyBlockController[] _materialPropertyBlockControllers
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*> materialPropertyBlockControllers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>) == 0x8);
    // [InjectAttribute] Offset: 0x1121228
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x28
    ::Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(::Zenject::DiContainer*) == 0x8);
    // private BufferedLightColorGroupEffect[] _bufferedLightColorGroupEffects
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::BufferedLightColorGroupEffect*> bufferedLightColorGroupEffects;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BufferedLightColorGroupEffect*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private LightGroup[] _lightGroups
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightGroup*>& dyn__lightGroups();
    // Get instance field reference: private MaterialPropertyBlockController[] _materialPropertyBlockControllers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyBlockController*>& dyn__materialPropertyBlockControllers();
    // Get instance field reference: private readonly Zenject.DiContainer _container
    [[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& dyn__container();
    // Get instance field reference: private BufferedLightColorGroupEffect[] _bufferedLightColorGroupEffects
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BufferedLightColorGroupEffect*>& dyn__bufferedLightColorGroupEffects();
    // public System.Void .ctor()
    // Offset: 0x13F2474
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BufferedLightColorGroupEffectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BufferedLightColorGroupEffectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BufferedLightColorGroupEffectManager*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13F2260
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x13F2404
    void OnDestroy();
  }; // BufferedLightColorGroupEffectManager
  #pragma pack(pop)
  static check_size<sizeof(BufferedLightColorGroupEffectManager), 48 + sizeof(::ArrayW<::GlobalNamespace::BufferedLightColorGroupEffect*>)> __GlobalNamespace_BufferedLightColorGroupEffectManagerSizeCheck;
  static_assert(sizeof(BufferedLightColorGroupEffectManager) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffectManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BufferedLightColorGroupEffectManager::*)()>(&GlobalNamespace::BufferedLightColorGroupEffectManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffectManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BufferedLightColorGroupEffectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BufferedLightColorGroupEffectManager::*)()>(&GlobalNamespace::BufferedLightColorGroupEffectManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BufferedLightColorGroupEffectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
