// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
// Including type: AppInitScenesTransitionSetupDataSO
#include "GlobalNamespace/AppInitScenesTransitionSetupDataSO.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerMockSettings
  class MultiplayerMockSettings;
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
  // Forward declaring type: MockPlayersModel
  class MockPlayersModel;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: AppInit
  // [TokenAttribute] Offset: FFFFFFFF
  class AppInit : public Zenject::MonoInstaller {
    public:
    // Nested type: GlobalNamespace::AppInit::AppStartType
    struct AppStartType;
    // Nested type: GlobalNamespace::AppInit::$$c
    class $$c;
    // Nested type: GlobalNamespace::AppInit::$StartCoroutine$d__8
    class $StartCoroutine$d__8;
    // private UnityEngine.GameObject _cameraGO
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::GameObject* cameraGO;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private MultiplayerMockSettings _multiplayerMockSettings
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerMockSettings* multiplayerMockSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerMockSettings*) == 0x8);
    // [InjectOptionalAttribute] Offset: 0xEFF7F4
    // private AppInitScenesTransitionSetupDataSO/AppInitSceneSetupData _sceneSetupData
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::AppInitScenesTransitionSetupDataSO::AppInitSceneSetupData* sceneSetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AppInitScenesTransitionSetupDataSO::AppInitSceneSetupData*) == 0x8);
    // [InjectAttribute] Offset: 0xEFF804
    // private GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameScenesManager*) == 0x8);
    // Creating value type constructor for type: AppInit
    AppInit(UnityEngine::GameObject* cameraGO_ = {}, GlobalNamespace::MultiplayerMockSettings* multiplayerMockSettings_ = {}, GlobalNamespace::AppInitScenesTransitionSetupDataSO::AppInitSceneSetupData* sceneSetupData_ = {}, GlobalNamespace::GameScenesManager* gameScenesManager_ = {}) noexcept : cameraGO{cameraGO_}, multiplayerMockSettings{multiplayerMockSettings_}, sceneSetupData{sceneSetupData_}, gameScenesManager{gameScenesManager_} {}
    // Get instance field reference: private UnityEngine.GameObject _cameraGO
    UnityEngine::GameObject*& dyn__cameraGO();
    // Get instance field reference: private MultiplayerMockSettings _multiplayerMockSettings
    GlobalNamespace::MultiplayerMockSettings*& dyn__multiplayerMockSettings();
    // Get instance field reference: private AppInitScenesTransitionSetupDataSO/AppInitSceneSetupData _sceneSetupData
    GlobalNamespace::AppInitScenesTransitionSetupDataSO::AppInitSceneSetupData*& dyn__sceneSetupData();
    // Get instance field reference: private GameScenesManager _gameScenesManager
    GlobalNamespace::GameScenesManager*& dyn__gameScenesManager();
    // protected GameScenesManager get_gameScenesManager()
    // Offset: 0x1245960
    GlobalNamespace::GameScenesManager* get_gameScenesManager();
    // private System.Collections.IEnumerator StartCoroutine()
    // Offset: 0x1245AE0
    System::Collections::IEnumerator* StartCoroutine();
    // protected System.Void OnDestroy()
    // Offset: 0x1245B7C
    void OnDestroy();
    // private System.Void HandleBeforeDismissingScenes()
    // Offset: 0x1245C50
    void HandleBeforeDismissingScenes();
    // protected MockPlayersModel GetMockPlayersModel()
    // Offset: 0x1245CF0
    GlobalNamespace::MockPlayersModel* GetMockPlayersModel();
    // protected AppInit/AppStartType GetAppStartType()
    // Offset: 0x1245A3C
    GlobalNamespace::AppInit::AppStartType GetAppStartType();
    // protected System.Void AppStartAndMultiSceneEditorSetup()
    // Offset: 0xFFFFFFFF
    void AppStartAndMultiSceneEditorSetup();
    // protected System.Void RepeatableSetup()
    // Offset: 0xFFFFFFFF
    void RepeatableSetup();
    // protected System.Void TransitionToNextScene()
    // Offset: 0xFFFFFFFF
    void TransitionToNextScene();
    // public override System.Void Start()
    // Offset: 0x1245968
    // Implemented from: Zenject.MonoInstallerBase
    // Base method: System.Void MonoInstallerBase::Start()
    void Start();
    // protected System.Void .ctor()
    // Offset: 0x1245D30
    // Implemented from: Zenject.MonoInstaller
    // Base method: System.Void MonoInstaller::.ctor()
    // Base method: System.Void MonoInstallerBase::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppInit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AppInit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppInit*, creationType>()));
    }
  }; // AppInit
  #pragma pack(pop)
  static check_size<sizeof(AppInit), 56 + sizeof(GlobalNamespace::GameScenesManager*)> __GlobalNamespace_AppInitSizeCheck;
  static_assert(sizeof(AppInit) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AppInit*, "", "AppInit");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AppInit::get_gameScenesManager
// Il2CppName: get_gameScenesManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameScenesManager* (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::get_gameScenesManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "get_gameScenesManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::StartCoroutine
// Il2CppName: StartCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::StartCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "StartCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::HandleBeforeDismissingScenes
// Il2CppName: HandleBeforeDismissingScenes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::HandleBeforeDismissingScenes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "HandleBeforeDismissingScenes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::GetMockPlayersModel
// Il2CppName: GetMockPlayersModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MockPlayersModel* (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::GetMockPlayersModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "GetMockPlayersModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::GetAppStartType
// Il2CppName: GetAppStartType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::AppInit::AppStartType (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::GetAppStartType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "GetAppStartType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::AppStartAndMultiSceneEditorSetup
// Il2CppName: AppStartAndMultiSceneEditorSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::AppStartAndMultiSceneEditorSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "AppStartAndMultiSceneEditorSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::RepeatableSetup
// Il2CppName: RepeatableSetup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::RepeatableSetup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "RepeatableSetup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::TransitionToNextScene
// Il2CppName: TransitionToNextScene
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::TransitionToNextScene)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "TransitionToNextScene", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AppInit::*)()>(&GlobalNamespace::AppInit::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AppInit*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AppInit::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
