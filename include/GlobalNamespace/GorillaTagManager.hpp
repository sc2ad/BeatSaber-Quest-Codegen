// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaGameManager
#include "GlobalNamespace/GorillaGameManager.hpp"
// Including type: Photon.Pun.IPunObservable
#include "Photon/Pun/IPunObservable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonStream
  class PhotonStream;
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaTagManager
  class GorillaTagManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaTagManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTagManager*, "", "GorillaTagManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x150
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaTagManager : public ::GlobalNamespace::GorillaGameManager/*, public ::Photon::Pun::IPunObservable*/ {
    public:
    // Nested type: ::GlobalNamespace::GorillaTagManager::$InfectionEnd$d__26
    class $InfectionEnd$d__26;
    public:
    // public System.Single tagDistanceThreshold
    // Size: 0x4
    // Offset: 0xD0
    float tagDistanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagCoolDown
    // Size: 0x4
    // Offset: 0xD4
    float tagCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 infectedModeThreshold
    // Size: 0x4
    // Offset: 0xD8
    int infectedModeThreshold;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: infectedModeThreshold and: currentInfected
    char __padding2[0x4] = {};
    // public System.Collections.Generic.List`1<Photon.Realtime.Player> currentInfected
    // Size: 0x8
    // Offset: 0xE0
    ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* currentInfected;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*) == 0x8);
    // public System.Int32[] currentInfectedArray
    // Size: 0x8
    // Offset: 0xE8
    ::ArrayW<int> currentInfectedArray;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public Photon.Realtime.Player currentIt
    // Size: 0x8
    // Offset: 0xF0
    ::Photon::Realtime::Player* currentIt;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public Photon.Realtime.Player lastInfectedPlayer
    // Size: 0x8
    // Offset: 0xF8
    ::Photon::Realtime::Player* lastInfectedPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public System.Double lastTag
    // Size: 0x8
    // Offset: 0x100
    double lastTag;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Double timeInfectedGameEnded
    // Size: 0x8
    // Offset: 0x108
    double timeInfectedGameEnded;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // public System.Boolean waitingToStartNextInfectionGame
    // Size: 0x1
    // Offset: 0x110
    bool waitingToStartNextInfectionGame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isCurrentlyTag
    // Size: 0x1
    // Offset: 0x111
    bool isCurrentlyTag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isCasual
    // Size: 0x1
    // Offset: 0x112
    bool isCasual;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isCasual and: tempItInt
    char __padding11[0x1] = {};
    // private System.Int32 tempItInt
    // Size: 0x4
    // Offset: 0x114
    int tempItInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Object objRef
    // Size: 0x8
    // Offset: 0x118
    ::Il2CppObject* objRef;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int32 iterator1
    // Size: 0x4
    // Offset: 0x120
    int iterator1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: iterator1 and: tempPlayer
    char __padding14[0x4] = {};
    // private Photon.Realtime.Player tempPlayer
    // Size: 0x8
    // Offset: 0x128
    ::Photon::Realtime::Player* tempPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private System.Boolean allInfected
    // Size: 0x1
    // Offset: 0x130
    bool allInfected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allInfected and: returnPlayerList
    char __padding16[0x7] = {};
    // private System.Collections.Generic.List`1<Photon.Realtime.Player> returnPlayerList
    // Size: 0x8
    // Offset: 0x138
    ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>* returnPlayerList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*) == 0x8);
    // private System.Boolean persistedIsTag
    // Size: 0x1
    // Offset: 0x140
    bool persistedIsTag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean persistedIsTagResult
    // Size: 0x1
    // Offset: 0x141
    bool persistedIsTagResult;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: persistedIsTagResult and: inspectorLocalPlayerSpeed
    char __padding19[0x6] = {};
    // public System.Single[] inspectorLocalPlayerSpeed
    // Size: 0x8
    // Offset: 0x148
    ::ArrayW<float> inspectorLocalPlayerSpeed;
    // Field size check
    static_assert(sizeof(::ArrayW<float>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunObservable
    operator ::Photon::Pun::IPunObservable() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunObservable*>(this);
    }
    // static field const value: static public System.Byte ReportTagEvent
    static constexpr const uint8_t ReportTagEvent = 1u;
    // Get static field: static public System.Byte ReportTagEvent
    static uint8_t _get_ReportTagEvent();
    // Set static field: static public System.Byte ReportTagEvent
    static void _set_ReportTagEvent(uint8_t value);
    // static field const value: static public System.Byte ReportInfectionTagEvent
    static constexpr const uint8_t ReportInfectionTagEvent = 2u;
    // Get static field: static public System.Byte ReportInfectionTagEvent
    static uint8_t _get_ReportInfectionTagEvent();
    // Set static field: static public System.Byte ReportInfectionTagEvent
    static void _set_ReportInfectionTagEvent(uint8_t value);
    // Get instance field reference: public System.Single tagDistanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_tagDistanceThreshold();
    // Get instance field reference: public System.Single tagCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_tagCoolDown();
    // Get instance field reference: public System.Int32 infectedModeThreshold
    [[deprecated("Use field access instead!")]] int& dyn_infectedModeThreshold();
    // Get instance field reference: public System.Collections.Generic.List`1<Photon.Realtime.Player> currentInfected
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*& dyn_currentInfected();
    // Get instance field reference: public System.Int32[] currentInfectedArray
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_currentInfectedArray();
    // Get instance field reference: public Photon.Realtime.Player currentIt
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_currentIt();
    // Get instance field reference: public Photon.Realtime.Player lastInfectedPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_lastInfectedPlayer();
    // Get instance field reference: public System.Double lastTag
    [[deprecated("Use field access instead!")]] double& dyn_lastTag();
    // Get instance field reference: public System.Double timeInfectedGameEnded
    [[deprecated("Use field access instead!")]] double& dyn_timeInfectedGameEnded();
    // Get instance field reference: public System.Boolean waitingToStartNextInfectionGame
    [[deprecated("Use field access instead!")]] bool& dyn_waitingToStartNextInfectionGame();
    // Get instance field reference: public System.Boolean isCurrentlyTag
    [[deprecated("Use field access instead!")]] bool& dyn_isCurrentlyTag();
    // Get instance field reference: public System.Boolean isCasual
    [[deprecated("Use field access instead!")]] bool& dyn_isCasual();
    // Get instance field reference: private System.Int32 tempItInt
    [[deprecated("Use field access instead!")]] int& dyn_tempItInt();
    // Get instance field reference: public System.Object objRef
    [[deprecated("Use field access instead!")]] ::Il2CppObject*& dyn_objRef();
    // Get instance field reference: private System.Int32 iterator1
    [[deprecated("Use field access instead!")]] int& dyn_iterator1();
    // Get instance field reference: private Photon.Realtime.Player tempPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tempPlayer();
    // Get instance field reference: private System.Boolean allInfected
    [[deprecated("Use field access instead!")]] bool& dyn_allInfected();
    // Get instance field reference: private System.Collections.Generic.List`1<Photon.Realtime.Player> returnPlayerList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::Photon::Realtime::Player*>*& dyn_returnPlayerList();
    // Get instance field reference: private System.Boolean persistedIsTag
    [[deprecated("Use field access instead!")]] bool& dyn_persistedIsTag();
    // Get instance field reference: private System.Boolean persistedIsTagResult
    [[deprecated("Use field access instead!")]] bool& dyn_persistedIsTagResult();
    // Get instance field reference: public System.Single[] inspectorLocalPlayerSpeed
    [[deprecated("Use field access instead!")]] ::ArrayW<float>& dyn_inspectorLocalPlayerSpeed();
    // public System.Void UpdateState()
    // Offset: 0xC7F3BC
    void UpdateState();
    // public System.Collections.IEnumerator InfectionEnd()
    // Offset: 0xC80074
    ::System::Collections::IEnumerator* InfectionEnd();
    // public System.Void UpdateInfectionState()
    // Offset: 0xC7FCC8
    void UpdateInfectionState();
    // public System.Void UpdateTagState()
    // Offset: 0xC80324
    void UpdateTagState();
    // private System.Void EndInfectionGame()
    // Offset: 0xC80110
    void EndInfectionGame();
    // private Photon.Realtime.Player[] CurrentInfectionPlayers()
    // Offset: 0xC7FB6C
    ::ArrayW<::Photon::Realtime::Player*> CurrentInfectionPlayers();
    // private System.Single InterpolatedInfectedJumpMultiplier(System.Int32 infectedCount)
    // Offset: 0xC8060C
    float InterpolatedInfectedJumpMultiplier(int infectedCount);
    // private System.Single InterpolatedInfectedJumpSpeed(System.Int32 infectedCount)
    // Offset: 0xC80654
    float InterpolatedInfectedJumpSpeed(int infectedCount);
    // private System.Single InterpolatedNoobJumpMultiplier(System.Int32 infectedCount)
    // Offset: 0xC8069C
    float InterpolatedNoobJumpMultiplier(int infectedCount);
    // private System.Single InterpolatedNoobJumpSpeed(System.Int32 infectedCount)
    // Offset: 0xC806F8
    float InterpolatedNoobJumpSpeed(int infectedCount);
    // private System.Void CopyInfectedListToArray()
    // Offset: 0xC7FE40
    void CopyInfectedListToArray();
    // private System.Void CopyInfectedArrayToList()
    // Offset: 0xC81140
    void CopyInfectedArrayToList();
    // public System.Void ChangeCurrentIt(Photon.Realtime.Player newCurrentIt)
    // Offset: 0xC7F774
    void ChangeCurrentIt(::Photon::Realtime::Player* newCurrentIt);
    // public System.Void SetisCurrentlyTag(System.Boolean newTagSetting)
    // Offset: 0xC7F7AC
    void SetisCurrentlyTag(bool newTagSetting);
    // public System.Void AddInfectedPlayer(Photon.Realtime.Player infectedPlayer)
    // Offset: 0xC7F9B8
    void AddInfectedPlayer(::Photon::Realtime::Player* infectedPlayer);
    // public System.Void AddInfectedPlayer(Photon.Realtime.Player infectedPlayer, System.Boolean withTagStop)
    // Offset: 0xC80DCC
    void AddInfectedPlayer(::Photon::Realtime::Player* infectedPlayer, bool withTagStop);
    // public System.Void ClearInfectionState()
    // Offset: 0xC7F70C
    void ClearInfectionState();
    // public System.Boolean IsGameModeTag()
    // Offset: 0xC7F600
    bool IsGameModeTag();
    // private System.Void Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched(Photon.Realtime.Player newMasterClient)
    // Offset: 0xC812E0
    void Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched(::Photon::Realtime::Player* newMasterClient);
    // public System.Void CopyRoomDataToLocalData()
    // Offset: 0xC81488
    void CopyRoomDataToLocalData();
    // private System.Void Photon.Pun.IPunObservable.OnPhotonSerializeView(Photon.Pun.PhotonStream stream, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC814F0
    void Photon_Pun_IPunObservable_OnPhotonSerializeView(::Photon::Pun::PhotonStream* stream, ::Photon::Pun::PhotonMessageInfo info);
    // public System.Void .ctor()
    // Offset: 0xC81EB0
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaTagManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTagManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaTagManager*, creationType>()));
    }
    // public override System.Void Awake()
    // Offset: 0xC7F2E8
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::Awake()
    void Awake();
    // public override System.Void InfrequentUpdate()
    // Offset: 0xC7FFC0
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::InfrequentUpdate()
    void InfrequentUpdate();
    // public override System.Boolean LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    // Offset: 0xC80544
    // Implemented from: GorillaGameManager
    // Base method: System.Boolean GorillaGameManager::LocalCanTag(Photon.Realtime.Player myPlayer, Photon.Realtime.Player otherPlayer)
    bool LocalCanTag(::Photon::Realtime::Player* myPlayer, ::Photon::Realtime::Player* otherPlayer);
    // public override System.Void ReportTag(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    // Offset: 0xC80754
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::ReportTag(Photon.Realtime.Player taggedPlayer, Photon.Realtime.Player taggingPlayer)
    void ReportTag(::Photon::Realtime::Player* taggedPlayer, ::Photon::Realtime::Player* taggingPlayer);
    // public override System.Void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    // Offset: 0xC80D0C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer)
    void OnPlayerEnteredRoom(::Photon::Realtime::Player* newPlayer);
    // public override System.Void NewVRRig(Photon.Realtime.Player player, System.Int32 vrrigPhotonViewID, System.Boolean didntDoTutorial)
    // Offset: 0xC80D2C
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::NewVRRig(Photon.Realtime.Player player, System.Int32 vrrigPhotonViewID, System.Boolean didntDoTutorial)
    void NewVRRig(::Photon::Realtime::Player* player, int vrrigPhotonViewID, bool didntDoTutorial);
    // public override System.Void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    // Offset: 0xC80F98
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer)
    void OnPlayerLeftRoom(::Photon::Realtime::Player* otherPlayer);
    // public override System.Void ReportTagRPC(Photon.Realtime.Player taggedPlayer, Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC814DC
    // Implemented from: GorillaGameManager
    // Base method: System.Void GorillaGameManager::ReportTagRPC(Photon.Realtime.Player taggedPlayer, Photon.Pun.PhotonMessageInfo info)
    void ReportTagRPC(::Photon::Realtime::Player* taggedPlayer, ::Photon::Pun::PhotonMessageInfo info);
    // public override System.String GameMode()
    // Offset: 0xC81B94
    // Implemented from: GorillaGameManager
    // Base method: System.String GorillaGameManager::GameMode()
    ::StringW GameMode();
    // public override System.Int32 MyMatIndex(Photon.Realtime.Player forPlayer)
    // Offset: 0xC81BF8
    // Implemented from: GorillaGameManager
    // Base method: System.Int32 GorillaGameManager::MyMatIndex(Photon.Realtime.Player forPlayer)
    int MyMatIndex(::Photon::Realtime::Player* forPlayer);
    // public override System.Single[] LocalPlayerSpeed()
    // Offset: 0xC81CA0
    // Implemented from: GorillaGameManager
    // Base method: System.Single[] GorillaGameManager::LocalPlayerSpeed()
    ::ArrayW<float> LocalPlayerSpeed();
  }; // GorillaTagManager
  #pragma pack(pop)
  static check_size<sizeof(GorillaTagManager), 328 + sizeof(::ArrayW<float>)> __GlobalNamespace_GorillaTagManagerSizeCheck;
  static_assert(sizeof(GorillaTagManager) == 0x150);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::UpdateState
// Il2CppName: UpdateState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::UpdateState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "UpdateState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InfectionEnd
// Il2CppName: InfectionEnd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::InfectionEnd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InfectionEnd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::UpdateInfectionState
// Il2CppName: UpdateInfectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::UpdateInfectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "UpdateInfectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::UpdateTagState
// Il2CppName: UpdateTagState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::UpdateTagState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "UpdateTagState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::EndInfectionGame
// Il2CppName: EndInfectionGame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::EndInfectionGame)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "EndInfectionGame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CurrentInfectionPlayers
// Il2CppName: CurrentInfectionPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Photon::Realtime::Player*> (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CurrentInfectionPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CurrentInfectionPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpMultiplier
// Il2CppName: InterpolatedInfectedJumpMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpMultiplier)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedInfectedJumpMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpSpeed
// Il2CppName: InterpolatedInfectedJumpSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedInfectedJumpSpeed)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedInfectedJumpSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpMultiplier
// Il2CppName: InterpolatedNoobJumpMultiplier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpMultiplier)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedNoobJumpMultiplier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpSpeed
// Il2CppName: InterpolatedNoobJumpSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagManager::*)(int)>(&GlobalNamespace::GorillaTagManager::InterpolatedNoobJumpSpeed)> {
  static const MethodInfo* get() {
    static auto* infectedCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InterpolatedNoobJumpSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedCount});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CopyInfectedListToArray
// Il2CppName: CopyInfectedListToArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CopyInfectedListToArray)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CopyInfectedListToArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CopyInfectedArrayToList
// Il2CppName: CopyInfectedArrayToList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CopyInfectedArrayToList)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CopyInfectedArrayToList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ChangeCurrentIt
// Il2CppName: ChangeCurrentIt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::ChangeCurrentIt)> {
  static const MethodInfo* get() {
    static auto* newCurrentIt = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ChangeCurrentIt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newCurrentIt});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::SetisCurrentlyTag
// Il2CppName: SetisCurrentlyTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(bool)>(&GlobalNamespace::GorillaTagManager::SetisCurrentlyTag)> {
  static const MethodInfo* get() {
    static auto* newTagSetting = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "SetisCurrentlyTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newTagSetting});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::AddInfectedPlayer
// Il2CppName: AddInfectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::AddInfectedPlayer)> {
  static const MethodInfo* get() {
    static auto* infectedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "AddInfectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::AddInfectedPlayer
// Il2CppName: AddInfectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, bool)>(&GlobalNamespace::GorillaTagManager::AddInfectedPlayer)> {
  static const MethodInfo* get() {
    static auto* infectedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* withTagStop = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "AddInfectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{infectedPlayer, withTagStop});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ClearInfectionState
// Il2CppName: ClearInfectionState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::ClearInfectionState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ClearInfectionState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::IsGameModeTag
// Il2CppName: IsGameModeTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::IsGameModeTag)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "IsGameModeTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched
// Il2CppName: Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::Photon_Realtime_IInRoomCallbacks_OnMasterClientSwitched)> {
  static const MethodInfo* get() {
    static auto* newMasterClient = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "Photon.Realtime.IInRoomCallbacks.OnMasterClientSwitched", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newMasterClient});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::CopyRoomDataToLocalData
// Il2CppName: CopyRoomDataToLocalData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::CopyRoomDataToLocalData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "CopyRoomDataToLocalData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::Photon_Pun_IPunObservable_OnPhotonSerializeView
// Il2CppName: Photon.Pun.IPunObservable.OnPhotonSerializeView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Pun::PhotonStream*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaTagManager::Photon_Pun_IPunObservable_OnPhotonSerializeView)> {
  static const MethodInfo* get() {
    static auto* stream = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonStream")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "Photon.Pun.IPunObservable.OnPhotonSerializeView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{stream, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::InfrequentUpdate
// Il2CppName: InfrequentUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::InfrequentUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "InfrequentUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::LocalCanTag
// Il2CppName: LocalCanTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::LocalCanTag)> {
  static const MethodInfo* get() {
    static auto* myPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "LocalCanTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{myPlayer, otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ReportTag
// Il2CppName: ReportTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, ::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::ReportTag)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* taggingPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ReportTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, taggingPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnPlayerEnteredRoom
// Il2CppName: OnPlayerEnteredRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::OnPlayerEnteredRoom)> {
  static const MethodInfo* get() {
    static auto* newPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnPlayerEnteredRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::NewVRRig
// Il2CppName: NewVRRig
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, int, bool)>(&GlobalNamespace::GorillaTagManager::NewVRRig)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* vrrigPhotonViewID = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* didntDoTutorial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "NewVRRig", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, vrrigPhotonViewID, didntDoTutorial});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::OnPlayerLeftRoom
// Il2CppName: OnPlayerLeftRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::OnPlayerLeftRoom)> {
  static const MethodInfo* get() {
    static auto* otherPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "OnPlayerLeftRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{otherPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::ReportTagRPC
// Il2CppName: ReportTagRPC
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*, ::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaTagManager::ReportTagRPC)> {
  static const MethodInfo* get() {
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "ReportTagRPC", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{taggedPlayer, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::GameMode
// Il2CppName: GameMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::GameMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "GameMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::MyMatIndex
// Il2CppName: MyMatIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GorillaTagManager::*)(::Photon::Realtime::Player*)>(&GlobalNamespace::GorillaTagManager::MyMatIndex)> {
  static const MethodInfo* get() {
    static auto* forPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "MyMatIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagManager::LocalPlayerSpeed
// Il2CppName: LocalPlayerSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float> (GlobalNamespace::GorillaTagManager::*)()>(&GlobalNamespace::GorillaTagManager::LocalPlayerSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagManager*), "LocalPlayerSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
