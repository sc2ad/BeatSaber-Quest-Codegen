// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture2D
  class Texture2D;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BakeryDirectLight
  class BakeryDirectLight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BakeryDirectLight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryDirectLight*, "", "BakeryDirectLight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: BakeryDirectLight
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: FFFFFFFF
  class BakeryDirectLight : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Color color
    // Size: 0x10
    // Offset: 0x18
    ::UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public System.Single intensity
    // Size: 0x4
    // Offset: 0x28
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single shadowSpread
    // Size: 0x4
    // Offset: 0x2C
    float shadowSpread;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 samples
    // Size: 0x4
    // Offset: 0x30
    int samples;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bitmask
    // Size: 0x4
    // Offset: 0x34
    int bitmask;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean bakeToIndirect
    // Size: 0x1
    // Offset: 0x38
    bool bakeToIndirect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shadowmask
    // Size: 0x1
    // Offset: 0x39
    bool shadowmask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean shadowmaskDenoise
    // Size: 0x1
    // Offset: 0x3A
    bool shadowmaskDenoise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: shadowmaskDenoise and: indirectIntensity
    char __padding7[0x1] = {};
    // public System.Single indirectIntensity
    // Size: 0x4
    // Offset: 0x3C
    float indirectIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Texture2D cloudShadow
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Texture2D* cloudShadow;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture2D*) == 0x8);
    // public System.Single cloudShadowTilingX
    // Size: 0x4
    // Offset: 0x48
    float cloudShadowTilingX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cloudShadowTilingY
    // Size: 0x4
    // Offset: 0x4C
    float cloudShadowTilingY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cloudShadowOffsetX
    // Size: 0x4
    // Offset: 0x50
    float cloudShadowOffsetX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single cloudShadowOffsetY
    // Size: 0x4
    // Offset: 0x54
    float cloudShadowOffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 UID
    // Size: 0x4
    // Offset: 0x58
    int UID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public System.Int32 lightsChanged
    static int _get_lightsChanged();
    // Set static field: static public System.Int32 lightsChanged
    static void _set_lightsChanged(int value);
    // Get instance field reference: public UnityEngine.Color color
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_color();
    // Get instance field reference: public System.Single intensity
    [[deprecated("Use field access instead!")]] float& dyn_intensity();
    // Get instance field reference: public System.Single shadowSpread
    [[deprecated("Use field access instead!")]] float& dyn_shadowSpread();
    // Get instance field reference: public System.Int32 samples
    [[deprecated("Use field access instead!")]] int& dyn_samples();
    // Get instance field reference: public System.Int32 bitmask
    [[deprecated("Use field access instead!")]] int& dyn_bitmask();
    // Get instance field reference: public System.Boolean bakeToIndirect
    [[deprecated("Use field access instead!")]] bool& dyn_bakeToIndirect();
    // Get instance field reference: public System.Boolean shadowmask
    [[deprecated("Use field access instead!")]] bool& dyn_shadowmask();
    // Get instance field reference: public System.Boolean shadowmaskDenoise
    [[deprecated("Use field access instead!")]] bool& dyn_shadowmaskDenoise();
    // Get instance field reference: public System.Single indirectIntensity
    [[deprecated("Use field access instead!")]] float& dyn_indirectIntensity();
    // Get instance field reference: public UnityEngine.Texture2D cloudShadow
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture2D*& dyn_cloudShadow();
    // Get instance field reference: public System.Single cloudShadowTilingX
    [[deprecated("Use field access instead!")]] float& dyn_cloudShadowTilingX();
    // Get instance field reference: public System.Single cloudShadowTilingY
    [[deprecated("Use field access instead!")]] float& dyn_cloudShadowTilingY();
    // Get instance field reference: public System.Single cloudShadowOffsetX
    [[deprecated("Use field access instead!")]] float& dyn_cloudShadowOffsetX();
    // Get instance field reference: public System.Single cloudShadowOffsetY
    [[deprecated("Use field access instead!")]] float& dyn_cloudShadowOffsetY();
    // Get instance field reference: public System.Int32 UID
    [[deprecated("Use field access instead!")]] int& dyn_UID();
    // public System.Void .ctor()
    // Offset: 0x1BD5870
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BakeryDirectLight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryDirectLight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BakeryDirectLight*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1BD58D0
    static void _cctor();
  }; // BakeryDirectLight
  #pragma pack(pop)
  static check_size<sizeof(BakeryDirectLight), 88 + sizeof(int)> __GlobalNamespace_BakeryDirectLightSizeCheck;
  static_assert(sizeof(BakeryDirectLight) == 0x5C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BakeryDirectLight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BakeryDirectLight::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::BakeryDirectLight::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryDirectLight*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
