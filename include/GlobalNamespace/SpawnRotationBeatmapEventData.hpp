// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapEventData
#include "GlobalNamespace/BeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: BeatmapDataItem because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpawnRotationBeatmapEventData
  class SpawnRotationBeatmapEventData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpawnRotationBeatmapEventData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpawnRotationBeatmapEventData*, "", "SpawnRotationBeatmapEventData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: SpawnRotationBeatmapEventData
  // [TokenAttribute] Offset: FFFFFFFF
  class SpawnRotationBeatmapEventData : public ::GlobalNamespace::BeatmapEventData {
    public:
    // Nested type: ::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType
    struct SpawnRotationEventType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SpawnRotationBeatmapEventData/SpawnRotationEventType
    // [TokenAttribute] Offset: FFFFFFFF
    struct SpawnRotationEventType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: SpawnRotationEventType
      constexpr SpawnRotationEventType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SpawnRotationBeatmapEventData/SpawnRotationEventType Early
      static constexpr const int Early = 1;
      // Get static field: static public SpawnRotationBeatmapEventData/SpawnRotationEventType Early
      static ::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType _get_Early();
      // Set static field: static public SpawnRotationBeatmapEventData/SpawnRotationEventType Early
      static void _set_Early(::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType value);
      // static field const value: static public SpawnRotationBeatmapEventData/SpawnRotationEventType Late
      static constexpr const int Late = 2;
      // Get static field: static public SpawnRotationBeatmapEventData/SpawnRotationEventType Late
      static ::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType _get_Late();
      // Set static field: static public SpawnRotationBeatmapEventData/SpawnRotationEventType Late
      static void _set_Late(::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // SpawnRotationBeatmapEventData/SpawnRotationEventType
    #pragma pack(pop)
    static check_size<sizeof(SpawnRotationBeatmapEventData::SpawnRotationEventType), 0 + sizeof(int)> __GlobalNamespace_SpawnRotationBeatmapEventData_SpawnRotationEventTypeSizeCheck;
    static_assert(sizeof(SpawnRotationBeatmapEventData::SpawnRotationEventType) == 0x4);
    public:
    // private System.Single <rotation>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    float rotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly SpawnRotationBeatmapEventData/SpawnRotationEventType spawnRotationEventType
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType spawnRotationEventType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType) == 0x4);
    // private System.Single _deltaRotation
    // Size: 0x4
    // Offset: 0x38
    float deltaRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10B7F4C
    // Get static field: static private readonly BeatmapEventData _defaultCopy
    static ::GlobalNamespace::BeatmapEventData* _get__defaultCopy();
    // Set static field: static private readonly BeatmapEventData _defaultCopy
    static void _set__defaultCopy(::GlobalNamespace::BeatmapEventData* value);
    // Get instance field reference: private System.Single <rotation>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$rotation$k__BackingField();
    // Get instance field reference: private readonly SpawnRotationBeatmapEventData/SpawnRotationEventType spawnRotationEventType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType& dyn_spawnRotationEventType();
    // Get instance field reference: private System.Single _deltaRotation
    [[deprecated("Use field access instead!")]] float& dyn__deltaRotation();
    // public System.Single get_rotation()
    // Offset: 0x283FBC8
    float get_rotation();
    // private System.Void set_rotation(System.Single value)
    // Offset: 0x283FBD0
    void set_rotation(float value);
    // public System.Void .ctor(System.Single time, SpawnRotationBeatmapEventData/SpawnRotationEventType spawnRotationEventType, System.Single deltaRotation)
    // Offset: 0x283FBD8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpawnRotationBeatmapEventData* New_ctor(float time, ::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType spawnRotationEventType, float deltaRotation) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpawnRotationBeatmapEventData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpawnRotationBeatmapEventData*, creationType>(time, spawnRotationEventType, deltaRotation)));
    }
    // static private System.Void .cctor()
    // Offset: 0x283FD74
    static void _cctor();
    // public System.Void Mirror()
    // Offset: 0x283FC44
    void Mirror();
    // public System.Void RecalculateRotationFromPreviousEvent(SpawnRotationBeatmapEventData previousSpawnRotationBeatmapEventData)
    // Offset: 0x283FCDC
    void RecalculateRotationFromPreviousEvent(::GlobalNamespace::SpawnRotationBeatmapEventData* previousSpawnRotationBeatmapEventData);
    // public System.Void SetFirstRotationEventRotation()
    // Offset: 0x283FD00
    void SetFirstRotationEventRotation();
    // public override BeatmapDataItem GetCopy()
    // Offset: 0x283FC60
    // Implemented from: BeatmapDataItem
    // Base method: BeatmapDataItem BeatmapDataItem::GetCopy()
    ::GlobalNamespace::BeatmapDataItem* GetCopy();
    // protected override BeatmapEventData GetDefault()
    // Offset: 0x283FD0C
    // Implemented from: BeatmapEventData
    // Base method: BeatmapEventData BeatmapEventData::GetDefault()
    ::GlobalNamespace::BeatmapEventData* GetDefault();
  }; // SpawnRotationBeatmapEventData
  #pragma pack(pop)
  static check_size<sizeof(SpawnRotationBeatmapEventData), 56 + sizeof(float)> __GlobalNamespace_SpawnRotationBeatmapEventDataSizeCheck;
  static_assert(sizeof(SpawnRotationBeatmapEventData) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpawnRotationBeatmapEventData::SpawnRotationEventType, "", "SpawnRotationBeatmapEventData/SpawnRotationEventType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::get_rotation
// Il2CppName: get_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SpawnRotationBeatmapEventData::*)()>(&GlobalNamespace::SpawnRotationBeatmapEventData::get_rotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "get_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::set_rotation
// Il2CppName: set_rotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpawnRotationBeatmapEventData::*)(float)>(&GlobalNamespace::SpawnRotationBeatmapEventData::set_rotation)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "set_rotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SpawnRotationBeatmapEventData::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::Mirror
// Il2CppName: Mirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpawnRotationBeatmapEventData::*)()>(&GlobalNamespace::SpawnRotationBeatmapEventData::Mirror)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "Mirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::RecalculateRotationFromPreviousEvent
// Il2CppName: RecalculateRotationFromPreviousEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpawnRotationBeatmapEventData::*)(::GlobalNamespace::SpawnRotationBeatmapEventData*)>(&GlobalNamespace::SpawnRotationBeatmapEventData::RecalculateRotationFromPreviousEvent)> {
  static const MethodInfo* get() {
    static auto* previousSpawnRotationBeatmapEventData = &::il2cpp_utils::GetClassFromName("", "SpawnRotationBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "RecalculateRotationFromPreviousEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previousSpawnRotationBeatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::SetFirstRotationEventRotation
// Il2CppName: SetFirstRotationEventRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpawnRotationBeatmapEventData::*)()>(&GlobalNamespace::SpawnRotationBeatmapEventData::SetFirstRotationEventRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "SetFirstRotationEventRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDataItem* (GlobalNamespace::SpawnRotationBeatmapEventData::*)()>(&GlobalNamespace::SpawnRotationBeatmapEventData::GetCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpawnRotationBeatmapEventData::GetDefault
// Il2CppName: GetDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventData* (GlobalNamespace::SpawnRotationBeatmapEventData::*)()>(&GlobalNamespace::SpawnRotationBeatmapEventData::GetDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpawnRotationBeatmapEventData*), "GetDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
