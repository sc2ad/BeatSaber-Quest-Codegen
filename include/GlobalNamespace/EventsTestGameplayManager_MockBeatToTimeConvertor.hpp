// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: EventsTestGameplayManager
#include "GlobalNamespace/EventsTestGameplayManager.hpp"
// Including type: IBeatToTimeConvertor
#include "GlobalNamespace/IBeatToTimeConvertor.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor*, "", "EventsTestGameplayManager/MockBeatToTimeConvertor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: EventsTestGameplayManager/MockBeatToTimeConvertor
  // [TokenAttribute] Offset: FFFFFFFF
  class EventsTestGameplayManager::MockBeatToTimeConvertor : public ::Il2CppObject/*, public ::GlobalNamespace::IBeatToTimeConvertor*/ {
    public:
    public:
    // private readonly System.Single _bpm
    // Size: 0x4
    // Offset: 0x10
    float bpm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatToTimeConvertor
    operator ::GlobalNamespace::IBeatToTimeConvertor() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatToTimeConvertor*>(this);
    }
    // Creating interface conversion operator: i_IBeatToTimeConvertor
    inline ::GlobalNamespace::IBeatToTimeConvertor* i_IBeatToTimeConvertor() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatToTimeConvertor*>(this);
    }
    // Creating conversion operator: operator float
    constexpr operator float() const noexcept {
      return bpm;
    }
    // Get instance field reference: private readonly System.Single _bpm
    [[deprecated("Use field access instead!")]] float& dyn__bpm();
    // public System.Void .ctor(System.Single bpm)
    // Offset: 0x1377840
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventsTestGameplayManager::MockBeatToTimeConvertor* New_ctor(float bpm) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventsTestGameplayManager::MockBeatToTimeConvertor*, creationType>(bpm)));
    }
    // public System.Single ConvertBeatToTime(System.Single beat)
    // Offset: 0x1379FC8
    float ConvertBeatToTime(float beat);
  }; // EventsTestGameplayManager/MockBeatToTimeConvertor
  #pragma pack(pop)
  static check_size<sizeof(EventsTestGameplayManager::MockBeatToTimeConvertor), 16 + sizeof(float)> __GlobalNamespace_EventsTestGameplayManager_MockBeatToTimeConvertorSizeCheck;
  static_assert(sizeof(EventsTestGameplayManager::MockBeatToTimeConvertor) == 0x14);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::ConvertBeatToTime
// Il2CppName: ConvertBeatToTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::*)(float)>(&GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor::ConvertBeatToTime)> {
  static const MethodInfo* get() {
    static auto* beat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::EventsTestGameplayManager::MockBeatToTimeConvertor*), "ConvertBeatToTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beat});
  }
};
