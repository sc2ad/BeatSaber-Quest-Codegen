// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ILightWithId
  class ILightWithId;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: LightWithIdManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LightWithIdManager : public UnityEngine::MonoBehaviour {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xEDEDE0
    // private System.Action didChangeSomeColorsThisFrameEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action* didChangeSomeColorsThisFrameEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xEDEDF0
    // private System.Action`2<System.Int32,UnityEngine.Color> didSetColorForIdEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action_2<int, UnityEngine::Color>* didSetColorForIdEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<int, UnityEngine::Color>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<ILightWithId>[] _lights
    // Size: 0x8
    // Offset: 0x28
    ::Array<System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*>* lights;
    // Field size check
    static_assert(sizeof(::Array<System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*>*) == 0x8);
    // private readonly System.Nullable`1<UnityEngine.Color>[] _colors
    // Size: 0x8
    // Offset: 0x30
    ::Array<System::Nullable_1<UnityEngine::Color>>* colors;
    // Field size check
    static_assert(sizeof(::Array<System::Nullable_1<UnityEngine::Color>>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<ILightWithId> _lightsToUnregister
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>* lightsToUnregister;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*) == 0x8);
    // private System.Boolean _didChangeSomeColorsThisFrame
    // Size: 0x1
    // Offset: 0x40
    bool didChangeSomeColorsThisFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LightWithIdManager
    LightWithIdManager(System::Action* didChangeSomeColorsThisFrameEvent_ = {}, System::Action_2<int, UnityEngine::Color>* didSetColorForIdEvent_ = {}, ::Array<System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*>* lights_ = {}, ::Array<System::Nullable_1<UnityEngine::Color>>* colors_ = {}, System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>* lightsToUnregister_ = {}, bool didChangeSomeColorsThisFrame_ = {}) noexcept : didChangeSomeColorsThisFrameEvent{didChangeSomeColorsThisFrameEvent_}, didSetColorForIdEvent{didSetColorForIdEvent_}, lights{lights_}, colors{colors_}, lightsToUnregister{lightsToUnregister_}, didChangeSomeColorsThisFrame{didChangeSomeColorsThisFrame_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kMaxLightId
    static constexpr const int kMaxLightId = 20;
    // Get static field: static private System.Int32 kMaxLightId
    static int _get_kMaxLightId();
    // Set static field: static private System.Int32 kMaxLightId
    static void _set_kMaxLightId(int value);
    // Get instance field reference: private System.Action didChangeSomeColorsThisFrameEvent
    System::Action*& dyn_didChangeSomeColorsThisFrameEvent();
    // Get instance field reference: private System.Action`2<System.Int32,UnityEngine.Color> didSetColorForIdEvent
    System::Action_2<int, UnityEngine::Color>*& dyn_didSetColorForIdEvent();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<ILightWithId>[] _lights
    ::Array<System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*>*& dyn__lights();
    // Get instance field reference: private readonly System.Nullable`1<UnityEngine.Color>[] _colors
    ::Array<System::Nullable_1<UnityEngine::Color>>*& dyn__colors();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<ILightWithId> _lightsToUnregister
    System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*& dyn__lightsToUnregister();
    // Get instance field reference: private System.Boolean _didChangeSomeColorsThisFrame
    bool& dyn__didChangeSomeColorsThisFrame();
    // public System.Void add_didChangeSomeColorsThisFrameEvent(System.Action value)
    // Offset: 0x1E295EC
    void add_didChangeSomeColorsThisFrameEvent(System::Action* value);
    // public System.Void remove_didChangeSomeColorsThisFrameEvent(System.Action value)
    // Offset: 0x1E29690
    void remove_didChangeSomeColorsThisFrameEvent(System::Action* value);
    // public System.Void add_didSetColorForIdEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x1E29734
    void add_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value);
    // public System.Void remove_didSetColorForIdEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x1E297D8
    void remove_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value);
    // public System.Nullable`1<UnityEngine.Color>[] get_colors()
    // Offset: 0x1E2987C
    ::Array<System::Nullable_1<UnityEngine::Color>>* get_colors();
    // protected System.Void LateUpdate()
    // Offset: 0x1E29884
    void LateUpdate();
    // public System.Void RegisterLight(ILightWithId lightWithId)
    // Offset: 0x1E29A74
    void RegisterLight(GlobalNamespace::ILightWithId* lightWithId);
    // public System.Void UnregisterLight(ILightWithId lightWithId)
    // Offset: 0x1E29DE4
    void UnregisterLight(GlobalNamespace::ILightWithId* lightWithId);
    // public System.Void SetColorForId(System.Int32 lightId, UnityEngine.Color color)
    // Offset: 0x1E29FC8
    void SetColorForId(int lightId, UnityEngine::Color color);
    // public UnityEngine.Color GetColorForId(System.Int32 lightId)
    // Offset: 0x1E2A22C
    UnityEngine::Color GetColorForId(int lightId);
    // public System.Void .ctor()
    // Offset: 0x1E2A2DC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightWithIdManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIdManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightWithIdManager*, creationType>()));
    }
  }; // LightWithIdManager
  #pragma pack(pop)
  static check_size<sizeof(LightWithIdManager), 64 + sizeof(bool)> __GlobalNamespace_LightWithIdManagerSizeCheck;
  static_assert(sizeof(LightWithIdManager) == 0x41);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightWithIdManager*, "", "LightWithIdManager");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::add_didChangeSomeColorsThisFrameEvent
// Il2CppName: add_didChangeSomeColorsThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(System::Action*)>(&GlobalNamespace::LightWithIdManager::add_didChangeSomeColorsThisFrameEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "add_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent
// Il2CppName: remove_didChangeSomeColorsThisFrameEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(System::Action*)>(&GlobalNamespace::LightWithIdManager::remove_didChangeSomeColorsThisFrameEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "remove_didChangeSomeColorsThisFrameEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::add_didSetColorForIdEvent
// Il2CppName: add_didSetColorForIdEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(System::Action_2<int, UnityEngine::Color>*)>(&GlobalNamespace::LightWithIdManager::add_didSetColorForIdEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "add_didSetColorForIdEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::remove_didSetColorForIdEvent
// Il2CppName: remove_didSetColorForIdEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(System::Action_2<int, UnityEngine::Color>*)>(&GlobalNamespace::LightWithIdManager::remove_didSetColorForIdEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "remove_didSetColorForIdEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::get_colors
// Il2CppName: get_colors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<System::Nullable_1<UnityEngine::Color>>* (GlobalNamespace::LightWithIdManager::*)()>(&GlobalNamespace::LightWithIdManager::get_colors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "get_colors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)()>(&GlobalNamespace::LightWithIdManager::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::RegisterLight
// Il2CppName: RegisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(GlobalNamespace::ILightWithId*)>(&GlobalNamespace::LightWithIdManager::RegisterLight)> {
  static const MethodInfo* get() {
    static auto* lightWithId = &::il2cpp_utils::GetClassFromName("", "ILightWithId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "RegisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightWithId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::UnregisterLight
// Il2CppName: UnregisterLight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(GlobalNamespace::ILightWithId*)>(&GlobalNamespace::LightWithIdManager::UnregisterLight)> {
  static const MethodInfo* get() {
    static auto* lightWithId = &::il2cpp_utils::GetClassFromName("", "ILightWithId")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "UnregisterLight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightWithId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::SetColorForId
// Il2CppName: SetColorForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightWithIdManager::*)(int, UnityEngine::Color)>(&GlobalNamespace::LightWithIdManager::SetColorForId)> {
  static const MethodInfo* get() {
    static auto* lightId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "SetColorForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightId, color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::GetColorForId
// Il2CppName: GetColorForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::Color (GlobalNamespace::LightWithIdManager::*)(int)>(&GlobalNamespace::LightWithIdManager::GetColorForId)> {
  static const MethodInfo* get() {
    static auto* lightId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightWithIdManager*), "GetColorForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightWithIdManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
