// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Signal
  class Signal;
  // Forward declaring type: RandomObjectPicker`1<T>
  template<typename T>
  class RandomObjectPicker_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BasicUIAudioManager
  class BasicUIAudioManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BasicUIAudioManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BasicUIAudioManager*, "", "BasicUIAudioManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: BasicUIAudioManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BasicUIAudioManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private Signal[] _buttonClickEvents
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::Signal*> buttonClickEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::Signal*>) == 0x8);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip[] _clickSounds
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::AudioClip*> clickSounds;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private System.Single _minPitch
    // Size: 0x4
    // Offset: 0x30
    float minPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxPitch
    // Size: 0x4
    // Offset: 0x34
    float maxPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _randomSoundPicker
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>* randomSoundPicker;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private Signal[] _buttonClickEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::Signal*>& dyn__buttonClickEvents();
    // Get instance field reference: private UnityEngine.AudioSource _audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSource();
    // Get instance field reference: private UnityEngine.AudioClip[] _clickSounds
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn__clickSounds();
    // Get instance field reference: private System.Single _minPitch
    [[deprecated("Use field access instead!")]] float& dyn__minPitch();
    // Get instance field reference: private System.Single _maxPitch
    [[deprecated("Use field access instead!")]] float& dyn__maxPitch();
    // Get instance field reference: private RandomObjectPicker`1<UnityEngine.AudioClip> _randomSoundPicker
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>*& dyn__randomSoundPicker();
    // public System.Void .ctor()
    // Offset: 0x13C1458
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BasicUIAudioManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BasicUIAudioManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BasicUIAudioManager*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x13C1138
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x13C11D0
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x13C12A4
    void OnDisable();
    // private System.Void HandleButtonClickEvent()
    // Offset: 0x13C1378
    void HandleButtonClickEvent();
  }; // BasicUIAudioManager
  #pragma pack(pop)
  static check_size<sizeof(BasicUIAudioManager), 56 + sizeof(::GlobalNamespace::RandomObjectPicker_1<::UnityEngine::AudioClip*>*)> __GlobalNamespace_BasicUIAudioManagerSizeCheck;
  static_assert(sizeof(BasicUIAudioManager) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BasicUIAudioManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BasicUIAudioManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasicUIAudioManager::*)()>(&GlobalNamespace::BasicUIAudioManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasicUIAudioManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasicUIAudioManager::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasicUIAudioManager::*)()>(&GlobalNamespace::BasicUIAudioManager::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasicUIAudioManager*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasicUIAudioManager::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasicUIAudioManager::*)()>(&GlobalNamespace::BasicUIAudioManager::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasicUIAudioManager*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BasicUIAudioManager::HandleButtonClickEvent
// Il2CppName: HandleButtonClickEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BasicUIAudioManager::*)()>(&GlobalNamespace::BasicUIAudioManager::HandleButtonClickEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BasicUIAudioManager*), "HandleButtonClickEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
