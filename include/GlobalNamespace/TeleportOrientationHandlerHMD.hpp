// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportOrientationHandler
#include "GlobalNamespace/TeleportOrientationHandler.hpp"
// Including type: TeleportOrientationHandler/OrientationModes
#include "GlobalNamespace/TeleportOrientationHandler_OrientationModes.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportOrientationHandlerHMD
  class TeleportOrientationHandlerHMD;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportOrientationHandlerHMD);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportOrientationHandlerHMD*, "", "TeleportOrientationHandlerHMD");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: TeleportOrientationHandlerHMD
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportOrientationHandlerHMD : public ::GlobalNamespace::TeleportOrientationHandler {
    public:
    public:
    // [TooltipAttribute] Offset: 0x9940E8
    // public TeleportOrientationHandler/OrientationModes OrientationMode
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::TeleportOrientationHandler::OrientationModes OrientationMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TeleportOrientationHandler::OrientationModes) == 0x4);
    // [TooltipAttribute] Offset: 0x994120
    // public System.Boolean UpdateOrientationDuringAim
    // Size: 0x1
    // Offset: 0x44
    bool UpdateOrientationDuringAim;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UpdateOrientationDuringAim and: AimDistanceThreshold
    char __padding1[0x3] = {};
    // [TooltipAttribute] Offset: 0x994158
    // public System.Single AimDistanceThreshold
    // Size: 0x4
    // Offset: 0x48
    float AimDistanceThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x994190
    // public System.Single AimDistanceMaxRange
    // Size: 0x4
    // Offset: 0x4C
    float AimDistanceMaxRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Quaternion _initialRotation
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Quaternion initialRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Get instance field reference: public TeleportOrientationHandler/OrientationModes OrientationMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TeleportOrientationHandler::OrientationModes& dyn_OrientationMode();
    // Get instance field reference: public System.Boolean UpdateOrientationDuringAim
    [[deprecated("Use field access instead!")]] bool& dyn_UpdateOrientationDuringAim();
    // Get instance field reference: public System.Single AimDistanceThreshold
    [[deprecated("Use field access instead!")]] float& dyn_AimDistanceThreshold();
    // Get instance field reference: public System.Single AimDistanceMaxRange
    [[deprecated("Use field access instead!")]] float& dyn_AimDistanceMaxRange();
    // Get instance field reference: private UnityEngine.Quaternion _initialRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__initialRotation();
    // public System.Void .ctor()
    // Offset: 0xCF65B8
    // Implemented from: TeleportOrientationHandler
    // Base method: System.Void TeleportOrientationHandler::.ctor()
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportOrientationHandlerHMD* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportOrientationHandlerHMD::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportOrientationHandlerHMD*, creationType>()));
    }
    // protected override System.Void InitializeTeleportDestination()
    // Offset: 0xCF60D0
    // Implemented from: TeleportOrientationHandler
    // Base method: System.Void TeleportOrientationHandler::InitializeTeleportDestination()
    void InitializeTeleportDestination();
    // protected override System.Void UpdateTeleportDestination()
    // Offset: 0xCF6140
    // Implemented from: TeleportOrientationHandler
    // Base method: System.Void TeleportOrientationHandler::UpdateTeleportDestination()
    void UpdateTeleportDestination();
  }; // TeleportOrientationHandlerHMD
  #pragma pack(pop)
  static check_size<sizeof(TeleportOrientationHandlerHMD), 80 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_TeleportOrientationHandlerHMDSizeCheck;
  static_assert(sizeof(TeleportOrientationHandlerHMD) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandlerHMD::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandlerHMD::InitializeTeleportDestination
// Il2CppName: InitializeTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandlerHMD::*)()>(&GlobalNamespace::TeleportOrientationHandlerHMD::InitializeTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandlerHMD*), "InitializeTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportOrientationHandlerHMD::UpdateTeleportDestination
// Il2CppName: UpdateTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportOrientationHandlerHMD::*)()>(&GlobalNamespace::TeleportOrientationHandlerHMD::UpdateTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportOrientationHandlerHMD*), "UpdateTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
