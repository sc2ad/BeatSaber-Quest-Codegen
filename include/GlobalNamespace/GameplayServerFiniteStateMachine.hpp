// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: BGNet::Core
namespace BGNet::Core {
  // Forward declaring type: ITaskUtility
  class ITaskUtility;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: IServerBeatmapProvider
  class IServerBeatmapProvider;
  // Forward declaring type: MenuRpcManager
  class MenuRpcManager;
  // Forward declaring type: GameplayRpcManager
  class GameplayRpcManager;
  // Forward declaring type: GameState
  class GameState;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GameplayServerFiniteStateMachine
  class GameplayServerFiniteStateMachine;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GameplayServerFiniteStateMachine);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameplayServerFiniteStateMachine*, "", "GameplayServerFiniteStateMachine");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x79
  #pragma pack(push, 1)
  // Autogenerated type: GameplayServerFiniteStateMachine
  // [TokenAttribute] Offset: FFFFFFFF
  class GameplayServerFiniteStateMachine : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::GameplayServerFiniteStateMachine::InitParams
    struct InitParams;
    // Size: 0x50
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: GameplayServerFiniteStateMachine/InitParams
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct InitParams/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly BGNet.Core.ITaskUtility taskUtility
      // Size: 0x8
      // Offset: 0x0
      ::BGNet::Core::ITaskUtility* taskUtility;
      // Field size check
      static_assert(sizeof(::BGNet::Core::ITaskUtility*) == 0x8);
      // public readonly IMultiplayerSessionManager multiplayerSessionManager
      // Size: 0x8
      // Offset: 0x8
      ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
      // public readonly System.String creatorId
      // Size: 0x8
      // Offset: 0x10
      ::StringW creatorId;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly BeatmapLevelSelectionMask selectionMask
      // Size: 0x18
      // Offset: 0x18
      ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
      // public readonly GameplayServerConfiguration configuration
      // Size: 0x18
      // Offset: 0x30
      ::GlobalNamespace::GameplayServerConfiguration configuration;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
      // public readonly IServerBeatmapProvider beatmapProvider
      // Size: 0x8
      // Offset: 0x48
      ::GlobalNamespace::IServerBeatmapProvider* beatmapProvider;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::IServerBeatmapProvider*) == 0x8);
      public:
      // Creating value type constructor for type: InitParams
      constexpr InitParams(::BGNet::Core::ITaskUtility* taskUtility_ = {}, ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, ::StringW creatorId_ = {}, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask_ = {}, ::GlobalNamespace::GameplayServerConfiguration configuration_ = {}, ::GlobalNamespace::IServerBeatmapProvider* beatmapProvider_ = {}) noexcept : taskUtility{taskUtility_}, multiplayerSessionManager{multiplayerSessionManager_}, creatorId{creatorId_}, selectionMask{selectionMask_}, configuration{configuration_}, beatmapProvider{beatmapProvider_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly BGNet.Core.ITaskUtility taskUtility
      [[deprecated("Use field access instead!")]] ::BGNet::Core::ITaskUtility*& dyn_taskUtility();
      // Get instance field reference: public readonly IMultiplayerSessionManager multiplayerSessionManager
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& dyn_multiplayerSessionManager();
      // Get instance field reference: public readonly System.String creatorId
      [[deprecated("Use field access instead!")]] ::StringW& dyn_creatorId();
      // Get instance field reference: public readonly BeatmapLevelSelectionMask selectionMask
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn_selectionMask();
      // Get instance field reference: public readonly GameplayServerConfiguration configuration
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn_configuration();
      // Get instance field reference: public readonly IServerBeatmapProvider beatmapProvider
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::IServerBeatmapProvider*& dyn_beatmapProvider();
      // public System.Void .ctor(BGNet.Core.ITaskUtility taskUtility, IMultiplayerSessionManager multiplayerSessionManager, System.String creatorId, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, IServerBeatmapProvider beatmapProvider)
      // Offset: 0x1625F20
      // ABORTED: conflicts with another method.  InitParams(::BGNet::Core::ITaskUtility* taskUtility, ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, ::StringW creatorId, ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask, ::GlobalNamespace::GameplayServerConfiguration configuration, ::GlobalNamespace::IServerBeatmapProvider* beatmapProvider);
    }; // GameplayServerFiniteStateMachine/InitParams
    #pragma pack(pop)
    static check_size<sizeof(GameplayServerFiniteStateMachine::InitParams), 72 + sizeof(::GlobalNamespace::IServerBeatmapProvider*)> __GlobalNamespace_GameplayServerFiniteStateMachine_InitParamsSizeCheck;
    static_assert(sizeof(GameplayServerFiniteStateMachine::InitParams) == 0x50);
    public:
    // private BGNet.Core.ITaskUtility <taskUtility>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::BGNet::Core::ITaskUtility* taskUtility;
    // Field size check
    static_assert(sizeof(::BGNet::Core::ITaskUtility*) == 0x8);
    // private IMultiplayerSessionManager <multiplayerSessionManager>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // private System.String <ownerUserId>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW ownerUserId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private BeatmapLevelSelectionMask <selectionMask>k__BackingField
    // Size: 0x18
    // Offset: 0x28
    ::GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // private GameplayServerConfiguration <configuration>k__BackingField
    // Size: 0x18
    // Offset: 0x40
    ::GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private IServerBeatmapProvider <beatmapProvider>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::IServerBeatmapProvider* beatmapProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IServerBeatmapProvider*) == 0x8);
    // private MenuRpcManager <menuRpcManager>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::MenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MenuRpcManager*) == 0x8);
    // private GameplayRpcManager <gameplayRpcManager>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::GameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayRpcManager*) == 0x8);
    // protected GameState state
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::GameState* state;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameState*) == 0x8);
    // protected System.Boolean enteringState
    // Size: 0x1
    // Offset: 0x78
    bool enteringState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private BGNet.Core.ITaskUtility <taskUtility>k__BackingField
    [[deprecated("Use field access instead!")]] ::BGNet::Core::ITaskUtility*& dyn_$taskUtility$k__BackingField();
    // Get instance field reference: private IMultiplayerSessionManager <multiplayerSessionManager>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& dyn_$multiplayerSessionManager$k__BackingField();
    // Get instance field reference: private System.String <ownerUserId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$ownerUserId$k__BackingField();
    // Get instance field reference: private BeatmapLevelSelectionMask <selectionMask>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSelectionMask& dyn_$selectionMask$k__BackingField();
    // Get instance field reference: private GameplayServerConfiguration <configuration>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayServerConfiguration& dyn_$configuration$k__BackingField();
    // Get instance field reference: private IServerBeatmapProvider <beatmapProvider>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IServerBeatmapProvider*& dyn_$beatmapProvider$k__BackingField();
    // Get instance field reference: private MenuRpcManager <menuRpcManager>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuRpcManager*& dyn_$menuRpcManager$k__BackingField();
    // Get instance field reference: private GameplayRpcManager <gameplayRpcManager>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayRpcManager*& dyn_$gameplayRpcManager$k__BackingField();
    // Get instance field reference: protected GameState state
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameState*& dyn_state();
    // Get instance field reference: protected System.Boolean enteringState
    [[deprecated("Use field access instead!")]] bool& dyn_enteringState();
    // public BGNet.Core.ITaskUtility get_taskUtility()
    // Offset: 0x16251AC
    ::BGNet::Core::ITaskUtility* get_taskUtility();
    // private System.Void set_taskUtility(BGNet.Core.ITaskUtility value)
    // Offset: 0x16251B4
    void set_taskUtility(::BGNet::Core::ITaskUtility* value);
    // public IMultiplayerSessionManager get_multiplayerSessionManager()
    // Offset: 0x16251BC
    ::GlobalNamespace::IMultiplayerSessionManager* get_multiplayerSessionManager();
    // private System.Void set_multiplayerSessionManager(IMultiplayerSessionManager value)
    // Offset: 0x16251C4
    void set_multiplayerSessionManager(::GlobalNamespace::IMultiplayerSessionManager* value);
    // public System.String get_ownerUserId()
    // Offset: 0x16251CC
    ::StringW get_ownerUserId();
    // private System.Void set_ownerUserId(System.String value)
    // Offset: 0x16251D4
    void set_ownerUserId(::StringW value);
    // public BeatmapLevelSelectionMask get_selectionMask()
    // Offset: 0x16251DC
    ::GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask();
    // private System.Void set_selectionMask(BeatmapLevelSelectionMask value)
    // Offset: 0x16251F0
    void set_selectionMask(::GlobalNamespace::BeatmapLevelSelectionMask value);
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x1625204
    ::GlobalNamespace::GameplayServerConfiguration get_configuration();
    // private System.Void set_configuration(GameplayServerConfiguration value)
    // Offset: 0x1625218
    void set_configuration(::GlobalNamespace::GameplayServerConfiguration value);
    // public IServerBeatmapProvider get_beatmapProvider()
    // Offset: 0x162522C
    ::GlobalNamespace::IServerBeatmapProvider* get_beatmapProvider();
    // private System.Void set_beatmapProvider(IServerBeatmapProvider value)
    // Offset: 0x1625234
    void set_beatmapProvider(::GlobalNamespace::IServerBeatmapProvider* value);
    // public MenuRpcManager get_menuRpcManager()
    // Offset: 0x162523C
    ::GlobalNamespace::MenuRpcManager* get_menuRpcManager();
    // private System.Void set_menuRpcManager(MenuRpcManager value)
    // Offset: 0x1625244
    void set_menuRpcManager(::GlobalNamespace::MenuRpcManager* value);
    // public GameplayRpcManager get_gameplayRpcManager()
    // Offset: 0x162524C
    ::GlobalNamespace::GameplayRpcManager* get_gameplayRpcManager();
    // private System.Void set_gameplayRpcManager(GameplayRpcManager value)
    // Offset: 0x1625254
    void set_gameplayRpcManager(::GlobalNamespace::GameplayRpcManager* value);
    // public System.Void .ctor(GameplayServerFiniteStateMachine/InitParams initParams)
    // Offset: 0x161AB80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplayServerFiniteStateMachine* New_ctor(::GlobalNamespace::GameplayServerFiniteStateMachine::InitParams initParams) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GameplayServerFiniteStateMachine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplayServerFiniteStateMachine*, creationType>(initParams)));
    }
  }; // GameplayServerFiniteStateMachine
  #pragma pack(pop)
  static check_size<sizeof(GameplayServerFiniteStateMachine), 120 + sizeof(bool)> __GlobalNamespace_GameplayServerFiniteStateMachineSizeCheck;
  static_assert(sizeof(GameplayServerFiniteStateMachine) == 0x79);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GameplayServerFiniteStateMachine::InitParams, "", "GameplayServerFiniteStateMachine/InitParams");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_taskUtility
// Il2CppName: get_taskUtility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::BGNet::Core::ITaskUtility* (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_taskUtility)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_taskUtility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_taskUtility
// Il2CppName: set_taskUtility
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::BGNet::Core::ITaskUtility*)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_taskUtility)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("BGNet.Core", "ITaskUtility")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_taskUtility", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_multiplayerSessionManager
// Il2CppName: get_multiplayerSessionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IMultiplayerSessionManager* (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_multiplayerSessionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_multiplayerSessionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_multiplayerSessionManager
// Il2CppName: set_multiplayerSessionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::GlobalNamespace::IMultiplayerSessionManager*)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_multiplayerSessionManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "IMultiplayerSessionManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_multiplayerSessionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_ownerUserId
// Il2CppName: get_ownerUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_ownerUserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_ownerUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_ownerUserId
// Il2CppName: set_ownerUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::StringW)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_ownerUserId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_ownerUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_selectionMask
// Il2CppName: get_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapLevelSelectionMask (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_selectionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_selectionMask
// Il2CppName: set_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::GlobalNamespace::BeatmapLevelSelectionMask)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_selectionMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayServerConfiguration (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_configuration
// Il2CppName: set_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_configuration)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_beatmapProvider
// Il2CppName: get_beatmapProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IServerBeatmapProvider* (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_beatmapProvider)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_beatmapProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_beatmapProvider
// Il2CppName: set_beatmapProvider
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::GlobalNamespace::IServerBeatmapProvider*)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_beatmapProvider)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "IServerBeatmapProvider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_beatmapProvider", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_menuRpcManager
// Il2CppName: get_menuRpcManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MenuRpcManager* (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_menuRpcManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_menuRpcManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_menuRpcManager
// Il2CppName: set_menuRpcManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::GlobalNamespace::MenuRpcManager*)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_menuRpcManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MenuRpcManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_menuRpcManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::get_gameplayRpcManager
// Il2CppName: get_gameplayRpcManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayRpcManager* (GlobalNamespace::GameplayServerFiniteStateMachine::*)()>(&GlobalNamespace::GameplayServerFiniteStateMachine::get_gameplayRpcManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "get_gameplayRpcManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::set_gameplayRpcManager
// Il2CppName: set_gameplayRpcManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GameplayServerFiniteStateMachine::*)(::GlobalNamespace::GameplayRpcManager*)>(&GlobalNamespace::GameplayServerFiniteStateMachine::set_gameplayRpcManager)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayRpcManager")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GameplayServerFiniteStateMachine*), "set_gameplayRpcManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GameplayServerFiniteStateMachine::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
