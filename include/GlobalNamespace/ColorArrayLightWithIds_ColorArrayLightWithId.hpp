// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ColorArrayLightWithIds
#include "GlobalNamespace/ColorArrayLightWithIds.hpp"
// Including type: LightWithIds/LightWithId
#include "GlobalNamespace/LightWithIds_LightWithId.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId*, "", "ColorArrayLightWithIds/ColorArrayLightWithId");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ColorArrayLightWithIds/ColorArrayLightWithId
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorArrayLightWithIds::ColorArrayLightWithId : public ::GlobalNamespace::LightWithIds::LightWithId {
    public:
    public:
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x30
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: index and: didSetColorEvent
    char __padding0[0x4] = {};
    // private System.Action`2<System.Int32,UnityEngine.Color> didSetColorEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_2<int, ::UnityEngine::Color>* didSetColorEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<int, ::UnityEngine::Color>*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _index
    [[deprecated("Use field access instead!")]] int& dyn__index();
    // Get instance field reference: private System.Action`2<System.Int32,UnityEngine.Color> didSetColorEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<int, ::UnityEngine::Color>*& dyn_didSetColorEvent();
    // public System.Void add_didSetColorEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x1CB9AD0
    void add_didSetColorEvent(::System::Action_2<int, ::UnityEngine::Color>* value);
    // public System.Void remove_didSetColorEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x1CB9B74
    void remove_didSetColorEvent(::System::Action_2<int, ::UnityEngine::Color>* value);
    // public System.Void .ctor(System.Int32 index, System.Int32 lightId)
    // Offset: 0x1CB9C28
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorArrayLightWithIds::ColorArrayLightWithId* New_ctor(int index, int lightId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorArrayLightWithIds::ColorArrayLightWithId*, creationType>(index, lightId)));
    }
    // public override System.Void ColorWasSet(UnityEngine.Color newColor)
    // Offset: 0x1CB9C90
    // Implemented from: LightWithIds/LightWithId
    // Base method: System.Void LightWithId::ColorWasSet(UnityEngine.Color newColor)
    void ColorWasSet(::UnityEngine::Color newColor);
  }; // ColorArrayLightWithIds/ColorArrayLightWithId
  #pragma pack(pop)
  static check_size<sizeof(ColorArrayLightWithIds::ColorArrayLightWithId), 56 + sizeof(::System::Action_2<int, ::UnityEngine::Color>*)> __GlobalNamespace_ColorArrayLightWithIds_ColorArrayLightWithIdSizeCheck;
  static_assert(sizeof(ColorArrayLightWithIds::ColorArrayLightWithId) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::add_didSetColorEvent
// Il2CppName: add_didSetColorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::*)(::System::Action_2<int, ::UnityEngine::Color>*)>(&GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::add_didSetColorEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId*), "add_didSetColorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::remove_didSetColorEvent
// Il2CppName: remove_didSetColorEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::*)(::System::Action_2<int, ::UnityEngine::Color>*)>(&GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::remove_didSetColorEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Color")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId*), "remove_didSetColorEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::*)(::UnityEngine::Color)>(&GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* newColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorArrayLightWithIds::ColorArrayLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newColor});
  }
};
