// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerPlayerStartState
#include "GlobalNamespace/MultiplayerPlayerStartState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerResultsData
  class MultiplayerResultsData;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: SceneStartSyncController
  class SceneStartSyncController;
  // Forward declaring type: SongStartSyncController
  class SongStartSyncController;
  // Forward declaring type: MultiplayerLevelFinishedController
  class MultiplayerLevelFinishedController;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: MultiplayerIntroAnimationController
  class MultiplayerIntroAnimationController;
  // Forward declaring type: MultiplayerOutroAnimationController
  class MultiplayerOutroAnimationController;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: GameplayCoreSceneSetupData
  class GameplayCoreSceneSetupData;
  // Forward declaring type: MultiplayerBadgesProvider
  class MultiplayerBadgesProvider;
  // Forward declaring type: PlayersSpecificSettingsAtGameStartModel
  class PlayersSpecificSettingsAtGameStartModel;
  // Skipping declaration: State because it is already included!
  // Forward declaring type: MultiplayerGameState
  struct MultiplayerGameState;
  // Forward declaring type: MultiplayerLevelCompletionResults
  class MultiplayerLevelCompletionResults;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerController
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerController::State
    struct State;
    // Nested type: GlobalNamespace::MultiplayerController::$PerformSongStartSync$d__37
    class $PerformSongStartSync$d__37;
    // Nested type: GlobalNamespace::MultiplayerController::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: GlobalNamespace::MultiplayerController::$$c
    class $$c;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MultiplayerController/State
    // [TokenAttribute] Offset: FFFFFFFF
    struct State/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerController/State CheckingLobbyState
      static constexpr const int CheckingLobbyState = 0;
      // Get static field: static public MultiplayerController/State CheckingLobbyState
      static GlobalNamespace::MultiplayerController::State _get_CheckingLobbyState();
      // Set static field: static public MultiplayerController/State CheckingLobbyState
      static void _set_CheckingLobbyState(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State WaitingForPlayers
      static constexpr const int WaitingForPlayers = 1;
      // Get static field: static public MultiplayerController/State WaitingForPlayers
      static GlobalNamespace::MultiplayerController::State _get_WaitingForPlayers();
      // Set static field: static public MultiplayerController/State WaitingForPlayers
      static void _set_WaitingForPlayers(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State SongStartSync
      static constexpr const int SongStartSync = 2;
      // Get static field: static public MultiplayerController/State SongStartSync
      static GlobalNamespace::MultiplayerController::State _get_SongStartSync();
      // Set static field: static public MultiplayerController/State SongStartSync
      static void _set_SongStartSync(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Intro
      static constexpr const int Intro = 3;
      // Get static field: static public MultiplayerController/State Intro
      static GlobalNamespace::MultiplayerController::State _get_Intro();
      // Set static field: static public MultiplayerController/State Intro
      static void _set_Intro(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Gameplay
      static constexpr const int Gameplay = 4;
      // Get static field: static public MultiplayerController/State Gameplay
      static GlobalNamespace::MultiplayerController::State _get_Gameplay();
      // Set static field: static public MultiplayerController/State Gameplay
      static void _set_Gameplay(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Outro
      static constexpr const int Outro = 5;
      // Get static field: static public MultiplayerController/State Outro
      static GlobalNamespace::MultiplayerController::State _get_Outro();
      // Set static field: static public MultiplayerController/State Outro
      static void _set_Outro(GlobalNamespace::MultiplayerController::State value);
      // static field const value: static public MultiplayerController/State Finished
      static constexpr const int Finished = 6;
      // Get static field: static public MultiplayerController/State Finished
      static GlobalNamespace::MultiplayerController::State _get_Finished();
      // Set static field: static public MultiplayerController/State Finished
      static void _set_Finished(GlobalNamespace::MultiplayerController::State value);
      // Get instance field reference: public System.Int32 value__
      int& dyn_value__();
    }; // MultiplayerController/State
    #pragma pack(pop)
    static check_size<sizeof(MultiplayerController::State), 0 + sizeof(int)> __GlobalNamespace_MultiplayerController_StateSizeCheck;
    static_assert(sizeof(MultiplayerController::State) == 0x4);
    // private UnityEngine.GameObject _loadingEnvironment
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::GameObject* loadingEnvironment;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [SpaceAttribute] Offset: 0xF09260
    // private MultiplayerLevelScenesTransitionSetupDataSO _multiplayerLevelSceneSetupData
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelSceneSetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*) == 0x8);
    // [InjectAttribute] Offset: 0xF09298
    // private readonly GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameScenesManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF092A8
    // private readonly MultiplayerPlayersManager _playersManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MultiplayerPlayersManager* playersManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF092B8
    // private readonly SceneStartSyncController _sceneStartSyncController
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::SceneStartSyncController* sceneStartSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SceneStartSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xF092C8
    // private readonly SongStartSyncController _songStartSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::SongStartSyncController* songStartSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongStartSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xF092D8
    // private readonly MultiplayerLevelFinishedController _multiplayerLevelFinishedController
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::MultiplayerLevelFinishedController* multiplayerLevelFinishedController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelFinishedController*) == 0x8);
    // [InjectAttribute] Offset: 0xF092E8
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xF092F8
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF09308
    // private readonly MultiplayerIntroAnimationController _introAnimationController
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::MultiplayerIntroAnimationController* introAnimationController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerIntroAnimationController*) == 0x8);
    // [InjectAttribute] Offset: 0xF09318
    // private readonly MultiplayerOutroAnimationController _outroAnimationController
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::MultiplayerOutroAnimationController* outroAnimationController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerOutroAnimationController*) == 0x8);
    // [InjectAttribute] Offset: 0xF09328
    // private readonly IMenuRpcManager _menuRpcManager
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMenuRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF09338
    // private readonly IGameplayRpcManager _gameplayRpcManager
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::IGameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IGameplayRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF09348
    // private readonly GameplayCoreSceneSetupData _sceneSetupData
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::GameplayCoreSceneSetupData* sceneSetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayCoreSceneSetupData*) == 0x8);
    // [InjectAttribute] Offset: 0xF09358
    // private readonly Zenject.DiContainer _diContainer
    // Size: 0x8
    // Offset: 0x88
    Zenject::DiContainer* diContainer;
    // Field size check
    static_assert(sizeof(Zenject::DiContainer*) == 0x8);
    // [InjectAttribute] Offset: 0xF09368
    // private readonly MultiplayerBadgesProvider _badgesProvider
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::MultiplayerBadgesProvider* badgesProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerBadgesProvider*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF09378
    // private System.Action`1<MultiplayerController/State> stateChangedEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action_1<GlobalNamespace::MultiplayerController::State>* stateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::MultiplayerController::State>*) == 0x8);
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0xA0
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private MultiplayerPlayerStartState _localPlayerSyncStartState
    // Size: 0x4
    // Offset: 0xA4
    GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncStartState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayerStartState) == 0x4);
    // private MultiplayerController/State _state
    // Size: 0x4
    // Offset: 0xA8
    GlobalNamespace::MultiplayerController::State state;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerController::State) == 0x4);
    // Padding between fields: state and: sessionGameId
    char __padding19[0x4] = {};
    // private System.String _sessionGameId
    // Size: 0x8
    // Offset: 0xB0
    ::Il2CppString* sessionGameId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private MultiplayerResultsData _resultsData
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::MultiplayerResultsData* resultsData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsData*) == 0x8);
    // private PlayersSpecificSettingsAtGameStartModel _playersSpecificSettingsAtGameStartModel
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::PlayersSpecificSettingsAtGameStartModel* playersSpecificSettingsAtGameStartModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*) == 0x8);
    // private UnityEngine.Coroutine _timeoutGetGameStateCoroutine
    // Size: 0x8
    // Offset: 0xC8
    UnityEngine::Coroutine* timeoutGetGameStateCoroutine;
    // Field size check
    static_assert(sizeof(UnityEngine::Coroutine*) == 0x8);
    // Creating value type constructor for type: MultiplayerController
    MultiplayerController(UnityEngine::GameObject* loadingEnvironment_ = {}, GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelSceneSetupData_ = {}, GlobalNamespace::GameScenesManager* gameScenesManager_ = {}, GlobalNamespace::MultiplayerPlayersManager* playersManager_ = {}, GlobalNamespace::SceneStartSyncController* sceneStartSyncController_ = {}, GlobalNamespace::SongStartSyncController* songStartSyncController_ = {}, GlobalNamespace::MultiplayerLevelFinishedController* multiplayerLevelFinishedController_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::MultiplayerIntroAnimationController* introAnimationController_ = {}, GlobalNamespace::MultiplayerOutroAnimationController* outroAnimationController_ = {}, GlobalNamespace::IMenuRpcManager* menuRpcManager_ = {}, GlobalNamespace::IGameplayRpcManager* gameplayRpcManager_ = {}, GlobalNamespace::GameplayCoreSceneSetupData* sceneSetupData_ = {}, Zenject::DiContainer* diContainer_ = {}, GlobalNamespace::MultiplayerBadgesProvider* badgesProvider_ = {}, System::Action_1<GlobalNamespace::MultiplayerController::State>* stateChangedEvent_ = {}, float startTime_ = {}, GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncStartState_ = {}, GlobalNamespace::MultiplayerController::State state_ = {}, ::Il2CppString* sessionGameId_ = {}, GlobalNamespace::MultiplayerResultsData* resultsData_ = {}, GlobalNamespace::PlayersSpecificSettingsAtGameStartModel* playersSpecificSettingsAtGameStartModel_ = {}, UnityEngine::Coroutine* timeoutGetGameStateCoroutine_ = {}) noexcept : loadingEnvironment{loadingEnvironment_}, multiplayerLevelSceneSetupData{multiplayerLevelSceneSetupData_}, gameScenesManager{gameScenesManager_}, playersManager{playersManager_}, sceneStartSyncController{sceneStartSyncController_}, songStartSyncController{songStartSyncController_}, multiplayerLevelFinishedController{multiplayerLevelFinishedController_}, fadeInOutController{fadeInOutController_}, multiplayerSessionManager{multiplayerSessionManager_}, introAnimationController{introAnimationController_}, outroAnimationController{outroAnimationController_}, menuRpcManager{menuRpcManager_}, gameplayRpcManager{gameplayRpcManager_}, sceneSetupData{sceneSetupData_}, diContainer{diContainer_}, badgesProvider{badgesProvider_}, stateChangedEvent{stateChangedEvent_}, startTime{startTime_}, localPlayerSyncStartState{localPlayerSyncStartState_}, state{state_}, sessionGameId{sessionGameId_}, resultsData{resultsData_}, playersSpecificSettingsAtGameStartModel{playersSpecificSettingsAtGameStartModel_}, timeoutGetGameStateCoroutine{timeoutGetGameStateCoroutine_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kSongTimeToSongStartSyncTimeOffset
    static constexpr const float kSongTimeToSongStartSyncTimeOffset = -0.6;
    // Get static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
    static float _get_kSongTimeToSongStartSyncTimeOffset();
    // Set static field: static private System.Single kSongTimeToSongStartSyncTimeOffset
    static void _set_kSongTimeToSongStartSyncTimeOffset(float value);
    // static field const value: static private System.Single kMinAnimationDurationPercentage
    static constexpr const float kMinAnimationDurationPercentage = 0.75;
    // Get static field: static private System.Single kMinAnimationDurationPercentage
    static float _get_kMinAnimationDurationPercentage();
    // Set static field: static private System.Single kMinAnimationDurationPercentage
    static void _set_kMinAnimationDurationPercentage(float value);
    // static field const value: static private System.Single kGetMultiplayerGameStateTimeout
    static constexpr const float kGetMultiplayerGameStateTimeout = 20;
    // Get static field: static private System.Single kGetMultiplayerGameStateTimeout
    static float _get_kGetMultiplayerGameStateTimeout();
    // Set static field: static private System.Single kGetMultiplayerGameStateTimeout
    static void _set_kGetMultiplayerGameStateTimeout(float value);
    // Get instance field reference: private UnityEngine.GameObject _loadingEnvironment
    UnityEngine::GameObject*& dyn__loadingEnvironment();
    // Get instance field reference: private MultiplayerLevelScenesTransitionSetupDataSO _multiplayerLevelSceneSetupData
    GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*& dyn__multiplayerLevelSceneSetupData();
    // Get instance field reference: private readonly GameScenesManager _gameScenesManager
    GlobalNamespace::GameScenesManager*& dyn__gameScenesManager();
    // Get instance field reference: private readonly MultiplayerPlayersManager _playersManager
    GlobalNamespace::MultiplayerPlayersManager*& dyn__playersManager();
    // Get instance field reference: private readonly SceneStartSyncController _sceneStartSyncController
    GlobalNamespace::SceneStartSyncController*& dyn__sceneStartSyncController();
    // Get instance field reference: private readonly SongStartSyncController _songStartSyncController
    GlobalNamespace::SongStartSyncController*& dyn__songStartSyncController();
    // Get instance field reference: private readonly MultiplayerLevelFinishedController _multiplayerLevelFinishedController
    GlobalNamespace::MultiplayerLevelFinishedController*& dyn__multiplayerLevelFinishedController();
    // Get instance field reference: private readonly FadeInOutController _fadeInOutController
    GlobalNamespace::FadeInOutController*& dyn__fadeInOutController();
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private readonly MultiplayerIntroAnimationController _introAnimationController
    GlobalNamespace::MultiplayerIntroAnimationController*& dyn__introAnimationController();
    // Get instance field reference: private readonly MultiplayerOutroAnimationController _outroAnimationController
    GlobalNamespace::MultiplayerOutroAnimationController*& dyn__outroAnimationController();
    // Get instance field reference: private readonly IMenuRpcManager _menuRpcManager
    GlobalNamespace::IMenuRpcManager*& dyn__menuRpcManager();
    // Get instance field reference: private readonly IGameplayRpcManager _gameplayRpcManager
    GlobalNamespace::IGameplayRpcManager*& dyn__gameplayRpcManager();
    // Get instance field reference: private readonly GameplayCoreSceneSetupData _sceneSetupData
    GlobalNamespace::GameplayCoreSceneSetupData*& dyn__sceneSetupData();
    // Get instance field reference: private readonly Zenject.DiContainer _diContainer
    Zenject::DiContainer*& dyn__diContainer();
    // Get instance field reference: private readonly MultiplayerBadgesProvider _badgesProvider
    GlobalNamespace::MultiplayerBadgesProvider*& dyn__badgesProvider();
    // Get instance field reference: private System.Action`1<MultiplayerController/State> stateChangedEvent
    System::Action_1<GlobalNamespace::MultiplayerController::State>*& dyn_stateChangedEvent();
    // Get instance field reference: private System.Single _startTime
    float& dyn__startTime();
    // Get instance field reference: private MultiplayerPlayerStartState _localPlayerSyncStartState
    GlobalNamespace::MultiplayerPlayerStartState& dyn__localPlayerSyncStartState();
    // Get instance field reference: private MultiplayerController/State _state
    GlobalNamespace::MultiplayerController::State& dyn__state();
    // Get instance field reference: private System.String _sessionGameId
    ::Il2CppString*& dyn__sessionGameId();
    // Get instance field reference: private MultiplayerResultsData _resultsData
    GlobalNamespace::MultiplayerResultsData*& dyn__resultsData();
    // Get instance field reference: private PlayersSpecificSettingsAtGameStartModel _playersSpecificSettingsAtGameStartModel
    GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*& dyn__playersSpecificSettingsAtGameStartModel();
    // Get instance field reference: private UnityEngine.Coroutine _timeoutGetGameStateCoroutine
    UnityEngine::Coroutine*& dyn__timeoutGetGameStateCoroutine();
    // public MultiplayerController/State get_state()
    // Offset: 0x1214B6C
    GlobalNamespace::MultiplayerController::State get_state();
    // public System.Void add_stateChangedEvent(System.Action`1<MultiplayerController/State> value)
    // Offset: 0x1214B74
    void add_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value);
    // public System.Void remove_stateChangedEvent(System.Action`1<MultiplayerController/State> value)
    // Offset: 0x1214C18
    void remove_stateChangedEvent(System::Action_1<GlobalNamespace::MultiplayerController::State>* value);
    // protected System.Void Start()
    // Offset: 0x1214CBC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x12154A8
    void OnDestroy();
    // private System.Void HandleSetMultiplayerGameState(System.String userId, MultiplayerGameState gameState)
    // Offset: 0x1215A00
    void HandleSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState gameState);
    // private System.Void CreateAndBindPlayersSpecificSettingsAtGameStartModel()
    // Offset: 0x1214FE4
    void CreateAndBindPlayersSpecificSettingsAtGameStartModel();
    // private System.Void StartSceneLoadSync()
    // Offset: 0x1215BB4
    void StartSceneLoadSync();
    // private System.Collections.IEnumerator PerformSongStartSync(MultiplayerPlayerStartState localPlayerSyncState)
    // Offset: 0x1215CF0
    System::Collections::IEnumerator* PerformSongStartSync(GlobalNamespace::MultiplayerPlayerStartState localPlayerSyncState);
    // private System.Void HandleDidSwitchPlayerToInactive()
    // Offset: 0x1215D9C
    void HandleDidSwitchPlayerToInactive();
    // private System.Void HandleSceneStartSyncControllerSyncStartDidSuccess(System.String sessionGameId)
    // Offset: 0x1216014
    void HandleSceneStartSyncControllerSyncStartDidSuccess(::Il2CppString* sessionGameId);
    // private System.Void HandleSceneStartSyncControllerSyncStartDidReceiveTooLate(System.String sessionGameId)
    // Offset: 0x1216048
    void HandleSceneStartSyncControllerSyncStartDidReceiveTooLate(::Il2CppString* sessionGameId);
    // private System.Void HandleSceneStartSyncControllerSyncStartDidFail()
    // Offset: 0x121607C
    void HandleSceneStartSyncControllerSyncStartDidFail();
    // private System.Void HandleSongStartSyncControllerSyncStartSuccess(System.Single introAnimationStartSyncTime)
    // Offset: 0x12162EC
    void HandleSongStartSyncControllerSyncStartSuccess(float introAnimationStartSyncTime);
    // private System.Void HandleSongStartSyncControllerSyncResume(System.Single introAnimationStartSyncTime)
    // Offset: 0x1217218
    void HandleSongStartSyncControllerSyncResume(float introAnimationStartSyncTime);
    // private System.Void HandleSongStartSyncControllerSyncStartFailed()
    // Offset: 0x1217678
    void HandleSongStartSyncControllerSyncStartFailed();
    // private System.Void StartGameplay(System.Single introAnimationStartSyncTime)
    // Offset: 0x1216A28
    void StartGameplay(float introAnimationStartSyncTime);
    // private System.Void HandleAllResultsCollected(MultiplayerLevelCompletionResults localPlayerResults, System.Collections.Generic.Dictionary`2<System.String,MultiplayerLevelCompletionResults> otherPlayerResults)
    // Offset: 0x12176BC
    void HandleAllResultsCollected(GlobalNamespace::MultiplayerLevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* otherPlayerResults);
    // private System.Void EndGameplay(MultiplayerLevelCompletionResults localPlayerResults, System.Collections.Generic.Dictionary`2<System.String,MultiplayerLevelCompletionResults> otherPlayerResults)
    // Offset: 0x12160C0
    void EndGameplay(GlobalNamespace::MultiplayerLevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>* otherPlayerResults);
    // private System.Void HandleOutroAnimationDidFinish()
    // Offset: 0x12176C0
    void HandleOutroAnimationDidFinish();
    // private System.Void HandleRpcReturnToMenu(System.String userId)
    // Offset: 0x12176F8
    void HandleRpcReturnToMenu(::Il2CppString* userId);
    // private System.Void HandleDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x12177C4
    void HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void ChangeState(MultiplayerController/State newState)
    // Offset: 0x1215430
    void ChangeState(GlobalNamespace::MultiplayerController::State newState);
    // private System.Single GetCurrentSongTime(System.Single songStartSyncTime)
    // Offset: 0x1215F4C
    float GetCurrentSongTime(float songStartSyncTime);
    // private System.Single GetSongStartSyncTime(System.Single introAnimationStartSyncTime)
    // Offset: 0x1215F10
    float GetSongStartSyncTime(float introAnimationStartSyncTime);
    // public System.Void .ctor()
    // Offset: 0x1217800
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerController*, creationType>()));
    }
  }; // MultiplayerController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerController), 200 + sizeof(UnityEngine::Coroutine*)> __GlobalNamespace_MultiplayerControllerSizeCheck;
  static_assert(sizeof(MultiplayerController) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerController*, "", "MultiplayerController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerController::State, "", "MultiplayerController/State");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::get_state
// Il2CppName: get_state
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::MultiplayerController::State (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::get_state)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "get_state", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::add_stateChangedEvent
// Il2CppName: add_stateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(System::Action_1<GlobalNamespace::MultiplayerController::State>*)>(&GlobalNamespace::MultiplayerController::add_stateChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerController/State")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "add_stateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::remove_stateChangedEvent
// Il2CppName: remove_stateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(System::Action_1<GlobalNamespace::MultiplayerController::State>*)>(&GlobalNamespace::MultiplayerController::remove_stateChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "MultiplayerController/State")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "remove_stateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSetMultiplayerGameState
// Il2CppName: HandleSetMultiplayerGameState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(::Il2CppString*, GlobalNamespace::MultiplayerGameState)>(&GlobalNamespace::MultiplayerController::HandleSetMultiplayerGameState)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* gameState = &::il2cpp_utils::GetClassFromName("", "MultiplayerGameState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSetMultiplayerGameState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, gameState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::CreateAndBindPlayersSpecificSettingsAtGameStartModel
// Il2CppName: CreateAndBindPlayersSpecificSettingsAtGameStartModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::CreateAndBindPlayersSpecificSettingsAtGameStartModel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "CreateAndBindPlayersSpecificSettingsAtGameStartModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::StartSceneLoadSync
// Il2CppName: StartSceneLoadSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::StartSceneLoadSync)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "StartSceneLoadSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::PerformSongStartSync
// Il2CppName: PerformSongStartSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::IEnumerator* (GlobalNamespace::MultiplayerController::*)(GlobalNamespace::MultiplayerPlayerStartState)>(&GlobalNamespace::MultiplayerController::PerformSongStartSync)> {
  static const MethodInfo* get() {
    static auto* localPlayerSyncState = &::il2cpp_utils::GetClassFromName("", "MultiplayerPlayerStartState")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "PerformSongStartSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPlayerSyncState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleDidSwitchPlayerToInactive
// Il2CppName: HandleDidSwitchPlayerToInactive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::HandleDidSwitchPlayerToInactive)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleDidSwitchPlayerToInactive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidSuccess
// Il2CppName: HandleSceneStartSyncControllerSyncStartDidSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(::Il2CppString*)>(&GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidSuccess)> {
  static const MethodInfo* get() {
    static auto* sessionGameId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSceneStartSyncControllerSyncStartDidSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionGameId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidReceiveTooLate
// Il2CppName: HandleSceneStartSyncControllerSyncStartDidReceiveTooLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(::Il2CppString*)>(&GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidReceiveTooLate)> {
  static const MethodInfo* get() {
    static auto* sessionGameId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSceneStartSyncControllerSyncStartDidReceiveTooLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionGameId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidFail
// Il2CppName: HandleSceneStartSyncControllerSyncStartDidFail
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::HandleSceneStartSyncControllerSyncStartDidFail)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSceneStartSyncControllerSyncStartDidFail", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartSuccess
// Il2CppName: HandleSongStartSyncControllerSyncStartSuccess
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(float)>(&GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartSuccess)> {
  static const MethodInfo* get() {
    static auto* introAnimationStartSyncTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSongStartSyncControllerSyncStartSuccess", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{introAnimationStartSyncTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncResume
// Il2CppName: HandleSongStartSyncControllerSyncResume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(float)>(&GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncResume)> {
  static const MethodInfo* get() {
    static auto* introAnimationStartSyncTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSongStartSyncControllerSyncResume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{introAnimationStartSyncTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartFailed
// Il2CppName: HandleSongStartSyncControllerSyncStartFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::HandleSongStartSyncControllerSyncStartFailed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleSongStartSyncControllerSyncStartFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::StartGameplay
// Il2CppName: StartGameplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(float)>(&GlobalNamespace::MultiplayerController::StartGameplay)> {
  static const MethodInfo* get() {
    static auto* introAnimationStartSyncTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "StartGameplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{introAnimationStartSyncTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleAllResultsCollected
// Il2CppName: HandleAllResultsCollected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(GlobalNamespace::MultiplayerLevelCompletionResults*, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GlobalNamespace::MultiplayerController::HandleAllResultsCollected)> {
  static const MethodInfo* get() {
    static auto* localPlayerResults = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")->byval_arg;
    static auto* otherPlayerResults = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleAllResultsCollected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPlayerResults, otherPlayerResults});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::EndGameplay
// Il2CppName: EndGameplay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(GlobalNamespace::MultiplayerLevelCompletionResults*, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerLevelCompletionResults*>*)>(&GlobalNamespace::MultiplayerController::EndGameplay)> {
  static const MethodInfo* get() {
    static auto* localPlayerResults = &::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")->byval_arg;
    static auto* otherPlayerResults = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "Dictionary`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String"), ::il2cpp_utils::GetClassFromName("", "MultiplayerLevelCompletionResults")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "EndGameplay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{localPlayerResults, otherPlayerResults});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleOutroAnimationDidFinish
// Il2CppName: HandleOutroAnimationDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)()>(&GlobalNamespace::MultiplayerController::HandleOutroAnimationDidFinish)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleOutroAnimationDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleRpcReturnToMenu
// Il2CppName: HandleRpcReturnToMenu
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(::Il2CppString*)>(&GlobalNamespace::MultiplayerController::HandleRpcReturnToMenu)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleRpcReturnToMenu", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::HandleDisconnected
// Il2CppName: HandleDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::MultiplayerController::HandleDisconnected)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "HandleDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::ChangeState
// Il2CppName: ChangeState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerController::*)(GlobalNamespace::MultiplayerController::State)>(&GlobalNamespace::MultiplayerController::ChangeState)> {
  static const MethodInfo* get() {
    static auto* newState = &::il2cpp_utils::GetClassFromName("", "MultiplayerController/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "ChangeState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::GetCurrentSongTime
// Il2CppName: GetCurrentSongTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MultiplayerController::*)(float)>(&GlobalNamespace::MultiplayerController::GetCurrentSongTime)> {
  static const MethodInfo* get() {
    static auto* songStartSyncTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "GetCurrentSongTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{songStartSyncTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::GetSongStartSyncTime
// Il2CppName: GetSongStartSyncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::MultiplayerController::*)(float)>(&GlobalNamespace::MultiplayerController::GetSongStartSyncTime)> {
  static const MethodInfo* get() {
    static auto* introAnimationStartSyncTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerController*), "GetSongStartSyncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{introAnimationStartSyncTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
