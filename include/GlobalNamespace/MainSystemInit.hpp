// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MainSettingsModelSO
  class MainSettingsModelSO;
  // Forward declaring type: AudioManagerSO
  class AudioManagerSO;
  // Forward declaring type: PerceivedLoudnessPerLevelSO
  class PerceivedLoudnessPerLevelSO;
  // Forward declaring type: RelativeSfxVolumePerLevelSO
  class RelativeSfxVolumePerLevelSO;
  // Forward declaring type: AvatarDataModel
  class AvatarDataModel;
  // Forward declaring type: AvatarPartsModelSO
  class AvatarPartsModelSO;
  // Forward declaring type: SkinColorSetSO
  class SkinColorSetSO;
  // Forward declaring type: MirrorRendererGraphicsSettingsPresets
  class MirrorRendererGraphicsSettingsPresets;
  // Forward declaring type: MainEffectGraphicsSettingsPresetsSO
  class MainEffectGraphicsSettingsPresetsSO;
  // Forward declaring type: BloomPrePassGraphicsSettingsPresetsSO
  class BloomPrePassGraphicsSettingsPresetsSO;
  // Forward declaring type: MirrorRendererSO
  class MirrorRendererSO;
  // Forward declaring type: MainEffectContainerSO
  class MainEffectContainerSO;
  // Forward declaring type: BloomPrePassEffectContainerSO
  class BloomPrePassEffectContainerSO;
  // Forward declaring type: SongPackMaskModelSO
  class SongPackMaskModelSO;
  // Forward declaring type: AppStaticSettingsSO
  class AppStaticSettingsSO;
  // Forward declaring type: StandardLevelScenesTransitionSetupDataSO
  class StandardLevelScenesTransitionSetupDataSO;
  // Forward declaring type: MissionLevelScenesTransitionSetupDataSO
  class MissionLevelScenesTransitionSetupDataSO;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: TimeHelper
  class TimeHelper;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: CampaignProgressModel
  class CampaignProgressModel;
  // Forward declaring type: BeatmapLevelsModel
  class BeatmapLevelsModel;
  // Forward declaring type: CustomLevelLoader
  class CustomLevelLoader;
  // Forward declaring type: CachedMediaAsyncLoader
  class CachedMediaAsyncLoader;
  // Forward declaring type: ExternalCamerasManager
  class ExternalCamerasManager;
  // Forward declaring type: MultiplayerSessionManager
  class MultiplayerSessionManager;
  // Forward declaring type: VoipManager
  class VoipManager;
  // Forward declaring type: LocalNetworkPlayerModel
  class LocalNetworkPlayerModel;
  // Forward declaring type: GameLiftNetworkPlayerModel
  class GameLiftNetworkPlayerModel;
  // Forward declaring type: NetworkPlayerEntitlementChecker
  class NetworkPlayerEntitlementChecker;
  // Forward declaring type: HapticFeedbackController
  class HapticFeedbackController;
  // Forward declaring type: BloomPrePassLightsUpdateSystem
  class BloomPrePassLightsUpdateSystem;
  // Forward declaring type: EnvironmentAudioEffectsPlayer
  class EnvironmentAudioEffectsPlayer;
  // Forward declaring type: NodePoseSyncStateManager
  class NodePoseSyncStateManager;
  // Forward declaring type: AlwaysOwnedContentContainerSO
  class AlwaysOwnedContentContainerSO;
  // Forward declaring type: PSVRHelper
  class PSVRHelper;
  // Forward declaring type: OculusVRHelper
  class OculusVRHelper;
  // Forward declaring type: OpenVRHelper
  class OpenVRHelper;
  // Forward declaring type: DevicelessVRHelper
  class DevicelessVRHelper;
  // Forward declaring type: TestPlatformAdditionalContentModel
  class TestPlatformAdditionalContentModel;
  // Forward declaring type: PS4PlatformAdditionalContentModel
  class PS4PlatformAdditionalContentModel;
  // Forward declaring type: OculusPlatformAdditionalContentModel
  class OculusPlatformAdditionalContentModel;
  // Forward declaring type: SteamPlatformAdditionalContentModel
  class SteamPlatformAdditionalContentModel;
  // Forward declaring type: SteamLevelProductsModelSO
  class SteamLevelProductsModelSO;
  // Forward declaring type: OculusLevelProductsModelSO
  class OculusLevelProductsModelSO;
  // Forward declaring type: PS4LevelProductsModelSO
  class PS4LevelProductsModelSO;
  // Forward declaring type: PS4LeaderboardIdsModelSO
  class PS4LeaderboardIdsModelSO;
  // Forward declaring type: LeaderboardIdsModelSO
  class LeaderboardIdsModelSO;
  // Forward declaring type: RichPresenceManager
  class RichPresenceManager;
  // Forward declaring type: DlcPromoPanelDataSO
  class DlcPromoPanelDataSO;
  // Forward declaring type: BeatmapLevelsPromoDataSO
  class BeatmapLevelsPromoDataSO;
  // Forward declaring type: NetworkConfigSO
  class NetworkConfigSO;
  // Forward declaring type: SteamNetworkPlayerModel
  class SteamNetworkPlayerModel;
  // Forward declaring type: OculusNetworkPlayerModel
  class OculusNetworkPlayerModel;
  // Forward declaring type: PS4NetworkPlayerModel
  class PS4NetworkPlayerModel;
  // Forward declaring type: BeatmapCharacteristicCollectionSO
  class BeatmapCharacteristicCollectionSO;
  // Forward declaring type: LeaderboardScoreUploader
  class LeaderboardScoreUploader;
  // Forward declaring type: PlatformLeaderboardsModel
  class PlatformLeaderboardsModel;
  // Forward declaring type: BeatmapLevelSO
  class BeatmapLevelSO;
  // Forward declaring type: RecordingToolInstallerSO
  class RecordingToolInstallerSO;
  // Forward declaring type: EnvironmentCommandLineArgsProvider
  class EnvironmentCommandLineArgsProvider;
  // Forward declaring type: MockPlayersModel
  class MockPlayersModel;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TimeTweeningManager
  class TimeTweeningManager;
}
// Forward declaring namespace: OnlineServices
namespace OnlineServices {
  // Forward declaring type: ServerManager
  class ServerManager;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MainSystemInit
  class MainSystemInit;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MainSystemInit);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MainSystemInit*, "", "MainSystemInit");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x228
  #pragma pack(push, 1)
  // Autogenerated type: MainSystemInit
  // [TokenAttribute] Offset: FFFFFFFF
  class MainSystemInit : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private MainSettingsModelSO _mainSettingsModel
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MainSettingsModelSO* mainSettingsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainSettingsModelSO*) == 0x8);
    // private AudioManagerSO _audioManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::AudioManagerSO* audioManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AudioManagerSO*) == 0x8);
    // private PerceivedLoudnessPerLevelSO _perceivedLoudnessPerLevel
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::PerceivedLoudnessPerLevelSO* perceivedLoudnessPerLevel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PerceivedLoudnessPerLevelSO*) == 0x8);
    // private RelativeSfxVolumePerLevelSO _relativeSfxVolumePerLevel
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::RelativeSfxVolumePerLevelSO* relativeSfxVolumePerLevel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RelativeSfxVolumePerLevelSO*) == 0x8);
    // private AvatarDataModel _avatarDataModel
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::AvatarDataModel* avatarDataModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AvatarDataModel*) == 0x8);
    // private AvatarPartsModelSO _avatarPartsModel
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::AvatarPartsModelSO* avatarPartsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AvatarPartsModelSO*) == 0x8);
    // private SkinColorSetSO _skinColorSet
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SkinColorSetSO* skinColorSet;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SkinColorSetSO*) == 0x8);
    // private MirrorRendererGraphicsSettingsPresets _mirrorRendererGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::MirrorRendererGraphicsSettingsPresets* mirrorRendererGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*) == 0x8);
    // private MainEffectGraphicsSettingsPresetsSO _mainEffectGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::MainEffectGraphicsSettingsPresetsSO* mainEffectGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainEffectGraphicsSettingsPresetsSO*) == 0x8);
    // private BloomPrePassGraphicsSettingsPresetsSO _bloomPrePassGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO* bloomPrePassGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO*) == 0x8);
    // private MirrorRendererSO _mirrorRenderer
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::MirrorRendererSO* mirrorRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirrorRendererSO*) == 0x8);
    // private MainEffectContainerSO _mainEffectContainer
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::MainEffectContainerSO* mainEffectContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainEffectContainerSO*) == 0x8);
    // private BloomPrePassEffectContainerSO _bloomPrePassEffectContainer
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::BloomPrePassEffectContainerSO* bloomPrePassEffectContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassEffectContainerSO*) == 0x8);
    // private SongPackMaskModelSO _songPackMaskModel
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::SongPackMaskModelSO* songPackMaskModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SongPackMaskModelSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119A58
    // private AppStaticSettingsSO _appStaticSettings
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::AppStaticSettingsSO* appStaticSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AppStaticSettingsSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119A90
    // private StandardLevelScenesTransitionSetupDataSO _standardLevelScenesTransitionSetupData
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO* standardLevelScenesTransitionSetupData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*) == 0x8);
    // private MissionLevelScenesTransitionSetupDataSO _missionLevelScenesTransitionSetupData
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::MissionLevelScenesTransitionSetupDataSO* missionLevelScenesTransitionSetupData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MissionLevelScenesTransitionSetupDataSO*) == 0x8);
    // private MultiplayerLevelScenesTransitionSetupDataSO _multiplayerLevelScenesTransitionSetupData
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119AE8
    // private TimeHelper _timeHelperPrefab
    // Size: 0x8
    // Offset: 0xA8
    ::GlobalNamespace::TimeHelper* timeHelperPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TimeHelper*) == 0x8);
    // private PlayerDataModel _playerDataModelPrefab
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::PlayerDataModel* playerDataModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerDataModel*) == 0x8);
    // private CampaignProgressModel _campaignProgressModelPrefab
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::CampaignProgressModel* campaignProgressModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CampaignProgressModel*) == 0x8);
    // private BeatmapLevelsModel _beatmapLevelsModelPrefab
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelsModel*) == 0x8);
    // private CustomLevelLoader _customLevelLoaderPrefab
    // Size: 0x8
    // Offset: 0xC8
    ::GlobalNamespace::CustomLevelLoader* customLevelLoaderPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CustomLevelLoader*) == 0x8);
    // private CachedMediaAsyncLoader _cachedMediaAsyncLoaderPrefab
    // Size: 0x8
    // Offset: 0xD0
    ::GlobalNamespace::CachedMediaAsyncLoader* cachedMediaAsyncLoaderPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CachedMediaAsyncLoader*) == 0x8);
    // private ExternalCamerasManager _externalCamerasManagerPrefab
    // Size: 0x8
    // Offset: 0xD8
    ::GlobalNamespace::ExternalCamerasManager* externalCamerasManagerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ExternalCamerasManager*) == 0x8);
    // private MultiplayerSessionManager _multiplayerSessionManagerPrefab
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::MultiplayerSessionManager* multiplayerSessionManagerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerSessionManager*) == 0x8);
    // private VoipManager _voipManagerPrefab
    // Size: 0x8
    // Offset: 0xE8
    ::GlobalNamespace::VoipManager* voipManagerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VoipManager*) == 0x8);
    // private LocalNetworkPlayerModel _localNetworkPlayerModelPrefab
    // Size: 0x8
    // Offset: 0xF0
    ::GlobalNamespace::LocalNetworkPlayerModel* localNetworkPlayerModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocalNetworkPlayerModel*) == 0x8);
    // private GameLiftNetworkPlayerModel _gameLiftNetworkPlayerModelPrefab
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::GameLiftNetworkPlayerModel* gameLiftNetworkPlayerModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameLiftNetworkPlayerModel*) == 0x8);
    // private NetworkPlayerEntitlementChecker _networkPlayerEntitlementCheckerPrefab
    // Size: 0x8
    // Offset: 0x100
    ::GlobalNamespace::NetworkPlayerEntitlementChecker* networkPlayerEntitlementCheckerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkPlayerEntitlementChecker*) == 0x8);
    // private HapticFeedbackController _hapticFeedbackControllerPrefab
    // Size: 0x8
    // Offset: 0x108
    ::GlobalNamespace::HapticFeedbackController* hapticFeedbackControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::HapticFeedbackController*) == 0x8);
    // private Tweening.TimeTweeningManager _tweeningManagerPrefab
    // Size: 0x8
    // Offset: 0x110
    ::Tweening::TimeTweeningManager* tweeningManagerPrefab;
    // Field size check
    static_assert(sizeof(::Tweening::TimeTweeningManager*) == 0x8);
    // private BloomPrePassLightsUpdateSystem _lightsUpdateSystemPrefab
    // Size: 0x8
    // Offset: 0x118
    ::GlobalNamespace::BloomPrePassLightsUpdateSystem* lightsUpdateSystemPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassLightsUpdateSystem*) == 0x8);
    // private EnvironmentAudioEffectsPlayer _environmentAudioEffectsPlayerPrefab
    // Size: 0x8
    // Offset: 0x120
    ::GlobalNamespace::EnvironmentAudioEffectsPlayer* environmentAudioEffectsPlayerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentAudioEffectsPlayer*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119C10
    // private NodePoseSyncStateManager _nodePoseSyncStateManagerPrefab
    // Size: 0x8
    // Offset: 0x128
    ::GlobalNamespace::NodePoseSyncStateManager* nodePoseSyncStateManagerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NodePoseSyncStateManager*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119C48
    // private AlwaysOwnedContentContainerSO _alwaysOwnedContentContainer
    // Size: 0x8
    // Offset: 0x130
    ::GlobalNamespace::AlwaysOwnedContentContainerSO* alwaysOwnedContentContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AlwaysOwnedContentContainerSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119C80
    // private PSVRHelper _psVRHelperPrefab
    // Size: 0x8
    // Offset: 0x138
    ::GlobalNamespace::PSVRHelper* psVRHelperPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PSVRHelper*) == 0x8);
    // private OculusVRHelper _oculusVRHelperPrefab
    // Size: 0x8
    // Offset: 0x140
    ::GlobalNamespace::OculusVRHelper* oculusVRHelperPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OculusVRHelper*) == 0x8);
    // private OpenVRHelper _openVRHelperPrefab
    // Size: 0x8
    // Offset: 0x148
    ::GlobalNamespace::OpenVRHelper* openVRHelperPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OpenVRHelper*) == 0x8);
    // private DevicelessVRHelper _devicelessVRHelperPrefab
    // Size: 0x8
    // Offset: 0x150
    ::GlobalNamespace::DevicelessVRHelper* devicelessVRHelperPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DevicelessVRHelper*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119CE8
    // private TestPlatformAdditionalContentModel _testPlatformAdditionalContentModelPrefab
    // Size: 0x8
    // Offset: 0x158
    ::GlobalNamespace::TestPlatformAdditionalContentModel* testPlatformAdditionalContentModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TestPlatformAdditionalContentModel*) == 0x8);
    // private PS4PlatformAdditionalContentModel _ps4PlatformAdditionalContentModelPrefab
    // Size: 0x8
    // Offset: 0x160
    ::GlobalNamespace::PS4PlatformAdditionalContentModel* ps4PlatformAdditionalContentModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PS4PlatformAdditionalContentModel*) == 0x8);
    // private OculusPlatformAdditionalContentModel _oculusPlatformAdditionalContentModelPrefab
    // Size: 0x8
    // Offset: 0x168
    ::GlobalNamespace::OculusPlatformAdditionalContentModel* oculusPlatformAdditionalContentModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OculusPlatformAdditionalContentModel*) == 0x8);
    // private SteamPlatformAdditionalContentModel _steamPlatformAdditionalContentModelPrefab
    // Size: 0x8
    // Offset: 0x170
    ::GlobalNamespace::SteamPlatformAdditionalContentModel* steamPlatformAdditionalContentModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamPlatformAdditionalContentModel*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119D50
    // private SteamLevelProductsModelSO _steamLevelProductsModel
    // Size: 0x8
    // Offset: 0x178
    ::GlobalNamespace::SteamLevelProductsModelSO* steamLevelProductsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamLevelProductsModelSO*) == 0x8);
    // private OculusLevelProductsModelSO _oculusLevelProducsModel
    // Size: 0x8
    // Offset: 0x180
    ::GlobalNamespace::OculusLevelProductsModelSO* oculusLevelProducsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OculusLevelProductsModelSO*) == 0x8);
    // private PS4LevelProductsModelSO _ps4LevelProductsModel
    // Size: 0x8
    // Offset: 0x188
    ::GlobalNamespace::PS4LevelProductsModelSO* ps4LevelProductsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PS4LevelProductsModelSO*) == 0x8);
    // private PS4LeaderboardIdsModelSO _ps4LeaderboardIdsModel
    // Size: 0x8
    // Offset: 0x190
    ::GlobalNamespace::PS4LeaderboardIdsModelSO* ps4LeaderboardIdsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PS4LeaderboardIdsModelSO*) == 0x8);
    // private LeaderboardIdsModelSO _riftLeaderboardIdsModel
    // Size: 0x8
    // Offset: 0x198
    ::GlobalNamespace::LeaderboardIdsModelSO* riftLeaderboardIdsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeaderboardIdsModelSO*) == 0x8);
    // private LeaderboardIdsModelSO _questLeaderboardIdsModel
    // Size: 0x8
    // Offset: 0x1A0
    ::GlobalNamespace::LeaderboardIdsModelSO* questLeaderboardIdsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeaderboardIdsModelSO*) == 0x8);
    // private LeaderboardIdsModelSO _steamLeaderboardIdsModel
    // Size: 0x8
    // Offset: 0x1A8
    ::GlobalNamespace::LeaderboardIdsModelSO* steamLeaderboardIdsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeaderboardIdsModelSO*) == 0x8);
    // private OnlineServices.ServerManager _onlineServicesServerManagerPrefab
    // Size: 0x8
    // Offset: 0x1B0
    ::OnlineServices::ServerManager* onlineServicesServerManagerPrefab;
    // Field size check
    static_assert(sizeof(::OnlineServices::ServerManager*) == 0x8);
    // private RichPresenceManager _richPresenceManagerPrefab
    // Size: 0x8
    // Offset: 0x1B8
    ::GlobalNamespace::RichPresenceManager* richPresenceManagerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RichPresenceManager*) == 0x8);
    // private DlcPromoPanelDataSO _dlcPromoPanelData
    // Size: 0x8
    // Offset: 0x1C0
    ::GlobalNamespace::DlcPromoPanelDataSO* dlcPromoPanelData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DlcPromoPanelDataSO*) == 0x8);
    // private BeatmapLevelsPromoDataSO _beatmapLevelsPromoData
    // Size: 0x8
    // Offset: 0x1C8
    ::GlobalNamespace::BeatmapLevelsPromoDataSO* beatmapLevelsPromoData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelsPromoDataSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119E28
    // private NetworkConfigSO _networkConfig
    // Size: 0x8
    // Offset: 0x1D0
    ::GlobalNamespace::NetworkConfigSO* networkConfig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NetworkConfigSO*) == 0x8);
    // private SteamNetworkPlayerModel _steamNetworkPlayerModelPrefab
    // Size: 0x8
    // Offset: 0x1D8
    ::GlobalNamespace::SteamNetworkPlayerModel* steamNetworkPlayerModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SteamNetworkPlayerModel*) == 0x8);
    // private OculusNetworkPlayerModel _oculusNetworkPlayerModelPrefab
    // Size: 0x8
    // Offset: 0x1E0
    ::GlobalNamespace::OculusNetworkPlayerModel* oculusNetworkPlayerModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OculusNetworkPlayerModel*) == 0x8);
    // private PS4NetworkPlayerModel _ps4NetworkPlayerModelPrefab
    // Size: 0x8
    // Offset: 0x1E8
    ::GlobalNamespace::PS4NetworkPlayerModel* ps4NetworkPlayerModelPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PS4NetworkPlayerModel*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119E90
    // private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    // Size: 0x8
    // Offset: 0x1F0
    ::GlobalNamespace::BeatmapCharacteristicCollectionSO* beatmapCharacteristicCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicCollectionSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119EC8
    // private LeaderboardScoreUploader _leaderboardScoreUploader
    // Size: 0x8
    // Offset: 0x1F8
    ::GlobalNamespace::LeaderboardScoreUploader* leaderboardScoreUploader;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LeaderboardScoreUploader*) == 0x8);
    // private PlatformLeaderboardsModel _platformLeaderboardsModel
    // Size: 0x8
    // Offset: 0x200
    ::GlobalNamespace::PlatformLeaderboardsModel* platformLeaderboardsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlatformLeaderboardsModel*) == 0x8);
    // private BeatmapLevelSO _anyBeatmapLevelSO
    // Size: 0x8
    // Offset: 0x208
    ::GlobalNamespace::BeatmapLevelSO* anyBeatmapLevelSO;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1119F20
    // private RecordingToolInstallerSO _recordingToolInstaller
    // Size: 0x8
    // Offset: 0x210
    ::GlobalNamespace::RecordingToolInstallerSO* recordingToolInstaller;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RecordingToolInstallerSO*) == 0x8);
    // private readonly EnvironmentCommandLineArgsProvider _commandLineArgsProvider
    // Size: 0x8
    // Offset: 0x218
    ::GlobalNamespace::EnvironmentCommandLineArgsProvider* commandLineArgsProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentCommandLineArgsProvider*) == 0x8);
    // private MockPlayersModel _mockPlayersModel
    // Size: 0x8
    // Offset: 0x220
    ::GlobalNamespace::MockPlayersModel* mockPlayersModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MockPlayersModel*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MainSettingsModelSO _mainSettingsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainSettingsModelSO*& dyn__mainSettingsModel();
    // Get instance field reference: private AudioManagerSO _audioManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioManagerSO*& dyn__audioManager();
    // Get instance field reference: private PerceivedLoudnessPerLevelSO _perceivedLoudnessPerLevel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PerceivedLoudnessPerLevelSO*& dyn__perceivedLoudnessPerLevel();
    // Get instance field reference: private RelativeSfxVolumePerLevelSO _relativeSfxVolumePerLevel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RelativeSfxVolumePerLevelSO*& dyn__relativeSfxVolumePerLevel();
    // Get instance field reference: private AvatarDataModel _avatarDataModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AvatarDataModel*& dyn__avatarDataModel();
    // Get instance field reference: private AvatarPartsModelSO _avatarPartsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AvatarPartsModelSO*& dyn__avatarPartsModel();
    // Get instance field reference: private SkinColorSetSO _skinColorSet
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SkinColorSetSO*& dyn__skinColorSet();
    // Get instance field reference: private MirrorRendererGraphicsSettingsPresets _mirrorRendererGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*& dyn__mirrorRendererGraphicsSettingsPresets();
    // Get instance field reference: private MainEffectGraphicsSettingsPresetsSO _mainEffectGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainEffectGraphicsSettingsPresetsSO*& dyn__mainEffectGraphicsSettingsPresets();
    // Get instance field reference: private BloomPrePassGraphicsSettingsPresetsSO _bloomPrePassGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO*& dyn__bloomPrePassGraphicsSettingsPresets();
    // Get instance field reference: private MirrorRendererSO _mirrorRenderer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirrorRendererSO*& dyn__mirrorRenderer();
    // Get instance field reference: private MainEffectContainerSO _mainEffectContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainEffectContainerSO*& dyn__mainEffectContainer();
    // Get instance field reference: private BloomPrePassEffectContainerSO _bloomPrePassEffectContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassEffectContainerSO*& dyn__bloomPrePassEffectContainer();
    // Get instance field reference: private SongPackMaskModelSO _songPackMaskModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPackMaskModelSO*& dyn__songPackMaskModel();
    // Get instance field reference: private AppStaticSettingsSO _appStaticSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AppStaticSettingsSO*& dyn__appStaticSettings();
    // Get instance field reference: private StandardLevelScenesTransitionSetupDataSO _standardLevelScenesTransitionSetupData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::StandardLevelScenesTransitionSetupDataSO*& dyn__standardLevelScenesTransitionSetupData();
    // Get instance field reference: private MissionLevelScenesTransitionSetupDataSO _missionLevelScenesTransitionSetupData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionLevelScenesTransitionSetupDataSO*& dyn__missionLevelScenesTransitionSetupData();
    // Get instance field reference: private MultiplayerLevelScenesTransitionSetupDataSO _multiplayerLevelScenesTransitionSetupData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO*& dyn__multiplayerLevelScenesTransitionSetupData();
    // Get instance field reference: private TimeHelper _timeHelperPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TimeHelper*& dyn__timeHelperPrefab();
    // Get instance field reference: private PlayerDataModel _playerDataModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& dyn__playerDataModelPrefab();
    // Get instance field reference: private CampaignProgressModel _campaignProgressModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CampaignProgressModel*& dyn__campaignProgressModelPrefab();
    // Get instance field reference: private BeatmapLevelsModel _beatmapLevelsModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelsModel*& dyn__beatmapLevelsModelPrefab();
    // Get instance field reference: private CustomLevelLoader _customLevelLoaderPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CustomLevelLoader*& dyn__customLevelLoaderPrefab();
    // Get instance field reference: private CachedMediaAsyncLoader _cachedMediaAsyncLoaderPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CachedMediaAsyncLoader*& dyn__cachedMediaAsyncLoaderPrefab();
    // Get instance field reference: private ExternalCamerasManager _externalCamerasManagerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ExternalCamerasManager*& dyn__externalCamerasManagerPrefab();
    // Get instance field reference: private MultiplayerSessionManager _multiplayerSessionManagerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerSessionManager*& dyn__multiplayerSessionManagerPrefab();
    // Get instance field reference: private VoipManager _voipManagerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VoipManager*& dyn__voipManagerPrefab();
    // Get instance field reference: private LocalNetworkPlayerModel _localNetworkPlayerModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocalNetworkPlayerModel*& dyn__localNetworkPlayerModelPrefab();
    // Get instance field reference: private GameLiftNetworkPlayerModel _gameLiftNetworkPlayerModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameLiftNetworkPlayerModel*& dyn__gameLiftNetworkPlayerModelPrefab();
    // Get instance field reference: private NetworkPlayerEntitlementChecker _networkPlayerEntitlementCheckerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkPlayerEntitlementChecker*& dyn__networkPlayerEntitlementCheckerPrefab();
    // Get instance field reference: private HapticFeedbackController _hapticFeedbackControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::HapticFeedbackController*& dyn__hapticFeedbackControllerPrefab();
    // Get instance field reference: private Tweening.TimeTweeningManager _tweeningManagerPrefab
    [[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& dyn__tweeningManagerPrefab();
    // Get instance field reference: private BloomPrePassLightsUpdateSystem _lightsUpdateSystemPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassLightsUpdateSystem*& dyn__lightsUpdateSystemPrefab();
    // Get instance field reference: private EnvironmentAudioEffectsPlayer _environmentAudioEffectsPlayerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentAudioEffectsPlayer*& dyn__environmentAudioEffectsPlayerPrefab();
    // Get instance field reference: private NodePoseSyncStateManager _nodePoseSyncStateManagerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NodePoseSyncStateManager*& dyn__nodePoseSyncStateManagerPrefab();
    // Get instance field reference: private AlwaysOwnedContentContainerSO _alwaysOwnedContentContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AlwaysOwnedContentContainerSO*& dyn__alwaysOwnedContentContainer();
    // Get instance field reference: private PSVRHelper _psVRHelperPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PSVRHelper*& dyn__psVRHelperPrefab();
    // Get instance field reference: private OculusVRHelper _oculusVRHelperPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OculusVRHelper*& dyn__oculusVRHelperPrefab();
    // Get instance field reference: private OpenVRHelper _openVRHelperPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OpenVRHelper*& dyn__openVRHelperPrefab();
    // Get instance field reference: private DevicelessVRHelper _devicelessVRHelperPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DevicelessVRHelper*& dyn__devicelessVRHelperPrefab();
    // Get instance field reference: private TestPlatformAdditionalContentModel _testPlatformAdditionalContentModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TestPlatformAdditionalContentModel*& dyn__testPlatformAdditionalContentModelPrefab();
    // Get instance field reference: private PS4PlatformAdditionalContentModel _ps4PlatformAdditionalContentModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PS4PlatformAdditionalContentModel*& dyn__ps4PlatformAdditionalContentModelPrefab();
    // Get instance field reference: private OculusPlatformAdditionalContentModel _oculusPlatformAdditionalContentModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OculusPlatformAdditionalContentModel*& dyn__oculusPlatformAdditionalContentModelPrefab();
    // Get instance field reference: private SteamPlatformAdditionalContentModel _steamPlatformAdditionalContentModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamPlatformAdditionalContentModel*& dyn__steamPlatformAdditionalContentModelPrefab();
    // Get instance field reference: private SteamLevelProductsModelSO _steamLevelProductsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamLevelProductsModelSO*& dyn__steamLevelProductsModel();
    // Get instance field reference: private OculusLevelProductsModelSO _oculusLevelProducsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OculusLevelProductsModelSO*& dyn__oculusLevelProducsModel();
    // Get instance field reference: private PS4LevelProductsModelSO _ps4LevelProductsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PS4LevelProductsModelSO*& dyn__ps4LevelProductsModel();
    // Get instance field reference: private PS4LeaderboardIdsModelSO _ps4LeaderboardIdsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PS4LeaderboardIdsModelSO*& dyn__ps4LeaderboardIdsModel();
    // Get instance field reference: private LeaderboardIdsModelSO _riftLeaderboardIdsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeaderboardIdsModelSO*& dyn__riftLeaderboardIdsModel();
    // Get instance field reference: private LeaderboardIdsModelSO _questLeaderboardIdsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeaderboardIdsModelSO*& dyn__questLeaderboardIdsModel();
    // Get instance field reference: private LeaderboardIdsModelSO _steamLeaderboardIdsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeaderboardIdsModelSO*& dyn__steamLeaderboardIdsModel();
    // Get instance field reference: private OnlineServices.ServerManager _onlineServicesServerManagerPrefab
    [[deprecated("Use field access instead!")]] ::OnlineServices::ServerManager*& dyn__onlineServicesServerManagerPrefab();
    // Get instance field reference: private RichPresenceManager _richPresenceManagerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RichPresenceManager*& dyn__richPresenceManagerPrefab();
    // Get instance field reference: private DlcPromoPanelDataSO _dlcPromoPanelData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DlcPromoPanelDataSO*& dyn__dlcPromoPanelData();
    // Get instance field reference: private BeatmapLevelsPromoDataSO _beatmapLevelsPromoData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelsPromoDataSO*& dyn__beatmapLevelsPromoData();
    // Get instance field reference: private NetworkConfigSO _networkConfig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NetworkConfigSO*& dyn__networkConfig();
    // Get instance field reference: private SteamNetworkPlayerModel _steamNetworkPlayerModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SteamNetworkPlayerModel*& dyn__steamNetworkPlayerModelPrefab();
    // Get instance field reference: private OculusNetworkPlayerModel _oculusNetworkPlayerModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OculusNetworkPlayerModel*& dyn__oculusNetworkPlayerModelPrefab();
    // Get instance field reference: private PS4NetworkPlayerModel _ps4NetworkPlayerModelPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PS4NetworkPlayerModel*& dyn__ps4NetworkPlayerModelPrefab();
    // Get instance field reference: private BeatmapCharacteristicCollectionSO _beatmapCharacteristicCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicCollectionSO*& dyn__beatmapCharacteristicCollection();
    // Get instance field reference: private LeaderboardScoreUploader _leaderboardScoreUploader
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LeaderboardScoreUploader*& dyn__leaderboardScoreUploader();
    // Get instance field reference: private PlatformLeaderboardsModel _platformLeaderboardsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlatformLeaderboardsModel*& dyn__platformLeaderboardsModel();
    // Get instance field reference: private BeatmapLevelSO _anyBeatmapLevelSO
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO*& dyn__anyBeatmapLevelSO();
    // Get instance field reference: private RecordingToolInstallerSO _recordingToolInstaller
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RecordingToolInstallerSO*& dyn__recordingToolInstaller();
    // Get instance field reference: private readonly EnvironmentCommandLineArgsProvider _commandLineArgsProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentCommandLineArgsProvider*& dyn__commandLineArgsProvider();
    // Get instance field reference: private MockPlayersModel _mockPlayersModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MockPlayersModel*& dyn__mockPlayersModel();
    // public System.Void .ctor()
    // Offset: 0x1388768
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainSystemInit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MainSystemInit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainSystemInit*, creationType>()));
    }
    // public System.Void Init()
    // Offset: 0x1386EE8
    void Init();
    // public System.Void PreInstall(MockPlayersModel mockPlayersModel)
    // Offset: 0x13872A0
    void PreInstall(::GlobalNamespace::MockPlayersModel* mockPlayersModel);
    // public System.Void InstallBindings(Zenject.DiContainer container)
    // Offset: 0x13872A8
    void InstallBindings(::Zenject::DiContainer* container);
    // private System.Void InstallRichPresence(Zenject.DiContainer container)
    // Offset: 0x138855C
    void InstallRichPresence(::Zenject::DiContainer* container);
    // private System.Void InstallOculusDestinationBindings(Zenject.DiContainer container)
    // Offset: 0x1388480
    void InstallOculusDestinationBindings(::Zenject::DiContainer* container);
    // private System.Void InstallPlatformLeaderboardsModel(Zenject.DiContainer container)
    // Offset: 0x138861C
    void InstallPlatformLeaderboardsModel(::Zenject::DiContainer* container);
    // private System.Boolean IsRunningFromNUnit()
    // Offset: 0x1388478
    bool IsRunningFromNUnit();
  }; // MainSystemInit
  #pragma pack(pop)
  static check_size<sizeof(MainSystemInit), 544 + sizeof(::GlobalNamespace::MockPlayersModel*)> __GlobalNamespace_MainSystemInitSizeCheck;
  static_assert(sizeof(MainSystemInit) == 0x228);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainSystemInit::*)()>(&GlobalNamespace::MainSystemInit::Init)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::PreInstall
// Il2CppName: PreInstall
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainSystemInit::*)(::GlobalNamespace::MockPlayersModel*)>(&GlobalNamespace::MainSystemInit::PreInstall)> {
  static const MethodInfo* get() {
    static auto* mockPlayersModel = &::il2cpp_utils::GetClassFromName("", "MockPlayersModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "PreInstall", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mockPlayersModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainSystemInit::*)(::Zenject::DiContainer*)>(&GlobalNamespace::MainSystemInit::InstallBindings)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::InstallRichPresence
// Il2CppName: InstallRichPresence
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainSystemInit::*)(::Zenject::DiContainer*)>(&GlobalNamespace::MainSystemInit::InstallRichPresence)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "InstallRichPresence", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::InstallOculusDestinationBindings
// Il2CppName: InstallOculusDestinationBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainSystemInit::*)(::Zenject::DiContainer*)>(&GlobalNamespace::MainSystemInit::InstallOculusDestinationBindings)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "InstallOculusDestinationBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::InstallPlatformLeaderboardsModel
// Il2CppName: InstallPlatformLeaderboardsModel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainSystemInit::*)(::Zenject::DiContainer*)>(&GlobalNamespace::MainSystemInit::InstallPlatformLeaderboardsModel)> {
  static const MethodInfo* get() {
    static auto* container = &::il2cpp_utils::GetClassFromName("Zenject", "DiContainer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "InstallPlatformLeaderboardsModel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{container});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainSystemInit::IsRunningFromNUnit
// Il2CppName: IsRunningFromNUnit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MainSystemInit::*)()>(&GlobalNamespace::MainSystemInit::IsRunningFromNUnit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainSystemInit*), "IsRunningFromNUnit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
