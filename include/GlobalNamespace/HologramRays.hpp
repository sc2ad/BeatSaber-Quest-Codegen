// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
  // Forward declaring type: EaseType
  struct EaseType;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MaterialPropertyBlock
  class MaterialPropertyBlock;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TimeTweeningManager
  class TimeTweeningManager;
  // Forward declaring type: FloatTween
  class FloatTween;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HologramRays
  class HologramRays;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HologramRays);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HologramRays*, "", "HologramRays");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x9D
  #pragma pack(push, 1)
  // Autogenerated type: HologramRays
  // [TokenAttribute] Offset: FFFFFFFF
  class HologramRays : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HologramRays::$FadingCoroutine$d__28
    class $FadingCoroutine$d__28;
    public:
    // private TubeBloomPrePassLight _bloomLight
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::TubeBloomPrePassLight* bloomLight;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TubeBloomPrePassLight*) == 0x8);
    // private UnityEngine.MeshRenderer _raysMeshRenderer
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::MeshRenderer* raysMeshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Transform _targetTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _laserHolderTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* laserHolderTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _hologramRaysTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* hologramRaysTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Mesh _hologramRaysMesh
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Mesh* hologramRaysMesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private System.Single _topYPosition
    // Size: 0x4
    // Offset: 0x48
    float topYPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _bottomYPosition
    // Size: 0x4
    // Offset: 0x4C
    float bottomYPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x10E27A8
    // private System.Single cachedExtent
    // Size: 0x4
    // Offset: 0x50
    float cachedExtent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: cachedExtent and: tweeningManager
    char __padding8[0x4] = {};
    // [InjectAttribute] Offset: 0x10E27F4
    // private readonly Tweening.TimeTweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x58
    ::Tweening::TimeTweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(::Tweening::TimeTweeningManager*) == 0x8);
    // private Tweening.FloatTween _transitionTween
    // Size: 0x8
    // Offset: 0x60
    ::Tweening::FloatTween* transitionTween;
    // Field size check
    static_assert(sizeof(::Tweening::FloatTween*) == 0x8);
    // private UnityEngine.Color _bloomColor
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Color bloomColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _bloomTransparentColor
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Color bloomTransparentColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single _alpha
    // Size: 0x4
    // Offset: 0x88
    float alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _raysDistance
    // Size: 0x4
    // Offset: 0x8C
    float raysDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _raysLocalScale
    // Size: 0xC
    // Offset: 0x90
    ::UnityEngine::Vector3 raysLocalScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean boundsInitialized
    // Size: 0x1
    // Offset: 0x9C
    bool boundsInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2804
    // Get static field: static private readonly System.Int32 _materialBottomPositionID
    static int _get__materialBottomPositionID();
    // Set static field: static private readonly System.Int32 _materialBottomPositionID
    static void _set__materialBottomPositionID(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2814
    // Get static field: static private readonly System.Int32 _materialTopPositionID
    static int _get__materialTopPositionID();
    // Set static field: static private readonly System.Int32 _materialTopPositionID
    static void _set__materialTopPositionID(int value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10E2824
    // Get static field: static private readonly System.Int32 _materialAlphaID
    static int _get__materialAlphaID();
    // Set static field: static private readonly System.Int32 _materialAlphaID
    static void _set__materialAlphaID(int value);
    // Get static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
    static ::UnityEngine::MaterialPropertyBlock* _get__materialPropertyBlock();
    // Set static field: static private UnityEngine.MaterialPropertyBlock _materialPropertyBlock
    static void _set__materialPropertyBlock(::UnityEngine::MaterialPropertyBlock* value);
    // Get instance field reference: private TubeBloomPrePassLight _bloomLight
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TubeBloomPrePassLight*& dyn__bloomLight();
    // Get instance field reference: private UnityEngine.MeshRenderer _raysMeshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__raysMeshRenderer();
    // Get instance field reference: private UnityEngine.Transform _targetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__targetTransform();
    // Get instance field reference: private UnityEngine.Transform _laserHolderTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__laserHolderTransform();
    // Get instance field reference: private UnityEngine.Transform _hologramRaysTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__hologramRaysTransform();
    // Get instance field reference: private UnityEngine.Mesh _hologramRaysMesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__hologramRaysMesh();
    // Get instance field reference: private System.Single _topYPosition
    [[deprecated("Use field access instead!")]] float& dyn__topYPosition();
    // Get instance field reference: private System.Single _bottomYPosition
    [[deprecated("Use field access instead!")]] float& dyn__bottomYPosition();
    // Get instance field reference: private System.Single cachedExtent
    [[deprecated("Use field access instead!")]] float& dyn_cachedExtent();
    // Get instance field reference: private readonly Tweening.TimeTweeningManager _tweeningManager
    [[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& dyn__tweeningManager();
    // Get instance field reference: private Tweening.FloatTween _transitionTween
    [[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& dyn__transitionTween();
    // Get instance field reference: private UnityEngine.Color _bloomColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__bloomColor();
    // Get instance field reference: private UnityEngine.Color _bloomTransparentColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__bloomTransparentColor();
    // Get instance field reference: private System.Single _alpha
    [[deprecated("Use field access instead!")]] float& dyn__alpha();
    // Get instance field reference: private System.Single _raysDistance
    [[deprecated("Use field access instead!")]] float& dyn__raysDistance();
    // Get instance field reference: private UnityEngine.Vector3 _raysLocalScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__raysLocalScale();
    // Get instance field reference: private System.Boolean boundsInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_boundsInitialized();
    // public System.Void .ctor()
    // Offset: 0x13A03B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HologramRays* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HologramRays::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HologramRays*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x13A03D4
    static void _cctor();
    // static private System.Void RuntimeInit()
    // Offset: 0x139FBDC
    static void RuntimeInit();
    // protected System.Void Awake()
    // Offset: 0x139FC44
    void Awake();
    // protected System.Void OnDisable()
    // Offset: 0x139FD78
    void OnDisable();
    // protected System.Void OnValidate()
    // Offset: 0x139FD98
    void OnValidate();
    // private System.Void Update()
    // Offset: 0x13A0118
    void Update();
    // private System.Void Refresh()
    // Offset: 0x139FEA8
    void Refresh();
    // public System.Void Animate(System.Boolean turningOn, System.Single duration, EaseType easeType)
    // Offset: 0x13A011C
    void Animate(bool turningOn, float duration, ::GlobalNamespace::EaseType easeType);
    // private System.Collections.IEnumerator FadingCoroutine(System.Boolean turningOn, System.Single duration, EaseType easeType)
    // Offset: 0x13A01EC
    ::System::Collections::IEnumerator* FadingCoroutine(bool turningOn, float duration, ::GlobalNamespace::EaseType easeType);
    // private System.Void UpdateBounds()
    // Offset: 0x13A0288
    void UpdateBounds();
    // private System.Void <Awake>b__22_0(System.Single f)
    // Offset: 0x13A0480
    void $Awake$b__22_0(float f);
  }; // HologramRays
  #pragma pack(pop)
  static check_size<sizeof(HologramRays), 156 + sizeof(bool)> __GlobalNamespace_HologramRaysSizeCheck;
  static_assert(sizeof(HologramRays) == 0x9D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::HologramRays::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::RuntimeInit
// Il2CppName: RuntimeInit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::HologramRays::RuntimeInit)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "RuntimeInit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)()>(&GlobalNamespace::HologramRays::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)()>(&GlobalNamespace::HologramRays::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)()>(&GlobalNamespace::HologramRays::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)()>(&GlobalNamespace::HologramRays::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)()>(&GlobalNamespace::HologramRays::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::Animate
// Il2CppName: Animate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)(bool, float, ::GlobalNamespace::EaseType)>(&GlobalNamespace::HologramRays::Animate)> {
  static const MethodInfo* get() {
    static auto* turningOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("", "EaseType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "Animate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turningOn, duration, easeType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::FadingCoroutine
// Il2CppName: FadingCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::HologramRays::*)(bool, float, ::GlobalNamespace::EaseType)>(&GlobalNamespace::HologramRays::FadingCoroutine)> {
  static const MethodInfo* get() {
    static auto* turningOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* easeType = &::il2cpp_utils::GetClassFromName("", "EaseType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "FadingCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{turningOn, duration, easeType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::UpdateBounds
// Il2CppName: UpdateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)()>(&GlobalNamespace::HologramRays::UpdateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "UpdateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HologramRays::$Awake$b__22_0
// Il2CppName: <Awake>b__22_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HologramRays::*)(float)>(&GlobalNamespace::HologramRays::$Awake$b__22_0)> {
  static const MethodInfo* get() {
    static auto* f = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HologramRays*), "<Awake>b__22_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{f});
  }
};
