// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: IMasterServerMessage
  class IMasterServerMessage;
  // Forward declaring type: IMasterServerResponse
  class IMasterServerResponse;
  // Forward declaring type: IAnalyticsManager
  class IAnalyticsManager;
  // Forward declaring type: IMasterServerReliableRequest
  class IMasterServerReliableRequest;
  // Forward declaring type: IMasterServerReliableResponse
  class IMasterServerReliableResponse;
  // Forward declaring type: IMasterServerUnreliableMessage
  class IMasterServerUnreliableMessage;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: MessageHandlerAnalyticsManagerExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class MessageHandlerAnalyticsManagerExtensions : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: MessageHandlerAnalyticsManagerExtensions
    MessageHandlerAnalyticsManagerExtensions() noexcept {}
    // static field const value: static private System.String kReceivedMessagesMetricName
    static constexpr const char* kReceivedMessagesMetricName = "ReceivedMessages";
    // Get static field: static private System.String kReceivedMessagesMetricName
    static ::Il2CppString* _get_kReceivedMessagesMetricName();
    // Set static field: static private System.String kReceivedMessagesMetricName
    static void _set_kReceivedMessagesMetricName(::Il2CppString* value);
    // static field const value: static private System.String kSentMessagesMetricName
    static constexpr const char* kSentMessagesMetricName = "SentMessages";
    // Get static field: static private System.String kSentMessagesMetricName
    static ::Il2CppString* _get_kSentMessagesMetricName();
    // Set static field: static private System.String kSentMessagesMetricName
    static void _set_kSentMessagesMetricName(::Il2CppString* value);
    // static field const value: static private System.String kDeliveryTypeKey
    static constexpr const char* kDeliveryTypeKey = "DeliveryType";
    // Get static field: static private System.String kDeliveryTypeKey
    static ::Il2CppString* _get_kDeliveryTypeKey();
    // Set static field: static private System.String kDeliveryTypeKey
    static void _set_kDeliveryTypeKey(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryKey
    static constexpr const char* kMessageCategoryKey = "MessageCategory";
    // Get static field: static private System.String kMessageCategoryKey
    static ::Il2CppString* _get_kMessageCategoryKey();
    // Set static field: static private System.String kMessageCategoryKey
    static void _set_kMessageCategoryKey(::Il2CppString* value);
    // static field const value: static private System.String kMessageTypeKey
    static constexpr const char* kMessageTypeKey = "MessageType";
    // Get static field: static private System.String kMessageTypeKey
    static ::Il2CppString* _get_kMessageTypeKey();
    // Set static field: static private System.String kMessageTypeKey
    static void _set_kMessageTypeKey(::Il2CppString* value);
    // static field const value: static private System.String kResultKey
    static constexpr const char* kResultKey = "Result";
    // Get static field: static private System.String kResultKey
    static ::Il2CppString* _get_kResultKey();
    // Set static field: static private System.String kResultKey
    static void _set_kResultKey(::Il2CppString* value);
    // static field const value: static private System.String kDeliveryTypeReliable
    static constexpr const char* kDeliveryTypeReliable = "Reliable";
    // Get static field: static private System.String kDeliveryTypeReliable
    static ::Il2CppString* _get_kDeliveryTypeReliable();
    // Set static field: static private System.String kDeliveryTypeReliable
    static void _set_kDeliveryTypeReliable(::Il2CppString* value);
    // static field const value: static private System.String kDeliveryTypeUnreliable
    static constexpr const char* kDeliveryTypeUnreliable = "Unreliable";
    // Get static field: static private System.String kDeliveryTypeUnreliable
    static ::Il2CppString* _get_kDeliveryTypeUnreliable();
    // Set static field: static private System.String kDeliveryTypeUnreliable
    static void _set_kDeliveryTypeUnreliable(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryRequest
    static constexpr const char* kMessageCategoryRequest = "Request";
    // Get static field: static private System.String kMessageCategoryRequest
    static ::Il2CppString* _get_kMessageCategoryRequest();
    // Set static field: static private System.String kMessageCategoryRequest
    static void _set_kMessageCategoryRequest(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryResponse
    static constexpr const char* kMessageCategoryResponse = "Response";
    // Get static field: static private System.String kMessageCategoryResponse
    static ::Il2CppString* _get_kMessageCategoryResponse();
    // Set static field: static private System.String kMessageCategoryResponse
    static void _set_kMessageCategoryResponse(::Il2CppString* value);
    // static field const value: static private System.String kMessageCategoryMessage
    static constexpr const char* kMessageCategoryMessage = "Message";
    // Get static field: static private System.String kMessageCategoryMessage
    static ::Il2CppString* _get_kMessageCategoryMessage();
    // Set static field: static private System.String kMessageCategoryMessage
    static void _set_kMessageCategoryMessage(::Il2CppString* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _typeNameLookup
    static System::Collections::Generic::Dictionary_2<System::Type*, ::Il2CppString*>* _get__typeNameLookup();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.String> _typeNameLookup
    static void _set__typeNameLookup(System::Collections::Generic::Dictionary_2<System::Type*, ::Il2CppString*>* value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Dictionary`2<System.Byte,System.String>> _responseCodeLookup
    static System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppString*>*>* _get__responseCodeLookup();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.Dictionary`2<System.Byte,System.String>> _responseCodeLookup
    static void _set__responseCodeLookup(System::Collections::Generic::Dictionary_2<System::Type*, System::Collections::Generic::Dictionary_2<uint8_t, ::Il2CppString*>*>* value);
    // static private System.String GetMessageName(MasterServer.IMasterServerMessage message)
    // Offset: 0x18C8F1C
    static ::Il2CppString* GetMessageName(MasterServer::IMasterServerMessage* message);
    // static private System.String GetResponseCodeName(MasterServer.IMasterServerResponse response)
    // Offset: 0x18C9064
    static ::Il2CppString* GetResponseCodeName(MasterServer::IMasterServerResponse* response);
    // static public System.Void ReceivedReliableRequestEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerReliableRequest request)
    // Offset: 0x18C9324
    static void ReceivedReliableRequestEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerReliableRequest* request);
    // static public System.Void SentReliableRequestEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerReliableRequest request)
    // Offset: 0x18C95C0
    static void SentReliableRequestEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerReliableRequest* request);
    // static public System.Void ReceivedReliableResponseEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerReliableResponse response)
    // Offset: 0x18C9790
    static void ReceivedReliableResponseEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerReliableResponse* response);
    // static public System.Void SentReliableResponseEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerReliableResponse response)
    // Offset: 0x18C998C
    static void SentReliableResponseEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerReliableResponse* response);
    // static public System.Void ReceivedUnreliableMessageEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0x18C9B88
    static void ReceivedUnreliableMessageEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerUnreliableMessage* message);
    // static public System.Void SentUnreliableMessageEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0x18C9D58
    static void SentUnreliableMessageEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerUnreliableMessage* message);
    // static public System.Void ReceivedUnreliableResponseEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerResponse response)
    // Offset: 0x18C9F28
    static void ReceivedUnreliableResponseEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerResponse* response);
    // static public System.Void SentUnreliableResponseEvent(MasterServer.IAnalyticsManager analyticsManager, MasterServer.IMasterServerResponse response)
    // Offset: 0x18CA124
    static void SentUnreliableResponseEvent(MasterServer::IAnalyticsManager* analyticsManager, MasterServer::IMasterServerResponse* response);
    // static private System.Void .cctor()
    // Offset: 0x18CA320
    static void _cctor();
  }; // MessageHandlerAnalyticsManagerExtensions
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*, "", "MessageHandlerAnalyticsManagerExtensions");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::GetMessageName
// Il2CppName: GetMessageName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(MasterServer::IMasterServerMessage*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::GetMessageName)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "GetMessageName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::GetResponseCodeName
// Il2CppName: GetResponseCodeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (*)(MasterServer::IMasterServerResponse*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::GetResponseCodeName)> {
  static const MethodInfo* get() {
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "GetResponseCodeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{response});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedReliableRequestEvent
// Il2CppName: ReceivedReliableRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerReliableRequest*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedReliableRequestEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "ReceivedReliableRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, request});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentReliableRequestEvent
// Il2CppName: SentReliableRequestEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerReliableRequest*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentReliableRequestEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* request = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableRequest")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "SentReliableRequestEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, request});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedReliableResponseEvent
// Il2CppName: ReceivedReliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerReliableResponse*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedReliableResponseEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "ReceivedReliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, response});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentReliableResponseEvent
// Il2CppName: SentReliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerReliableResponse*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentReliableResponseEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerReliableResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "SentReliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, response});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedUnreliableMessageEvent
// Il2CppName: ReceivedUnreliableMessageEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerUnreliableMessage*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedUnreliableMessageEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerUnreliableMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "ReceivedUnreliableMessageEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentUnreliableMessageEvent
// Il2CppName: SentUnreliableMessageEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerUnreliableMessage*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentUnreliableMessageEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerUnreliableMessage")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "SentUnreliableMessageEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedUnreliableResponseEvent
// Il2CppName: ReceivedUnreliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerResponse*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::ReceivedUnreliableResponseEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "ReceivedUnreliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, response});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentUnreliableResponseEvent
// Il2CppName: SentUnreliableResponseEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(MasterServer::IAnalyticsManager*, MasterServer::IMasterServerResponse*)>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::SentUnreliableResponseEvent)> {
  static const MethodInfo* get() {
    static auto* analyticsManager = &::il2cpp_utils::GetClassFromName("MasterServer", "IAnalyticsManager")->byval_arg;
    static auto* response = &::il2cpp_utils::GetClassFromName("MasterServer", "IMasterServerResponse")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), "SentUnreliableResponseEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{analyticsManager, response});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::MessageHandlerAnalyticsManagerExtensions::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MessageHandlerAnalyticsManagerExtensions*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
