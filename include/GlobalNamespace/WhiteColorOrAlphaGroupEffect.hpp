// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightColorGroupEffect
#include "GlobalNamespace/LightColorGroupEffect.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightWithIdManager
  class LightWithIdManager;
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: IBpmController
  class IBpmController;
  // Forward declaring type: EnvironmentColorType
  struct EnvironmentColorType;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: SongTimeTweeningManager
  class SongTimeTweeningManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: WhiteColorOrAlphaGroupEffect
  class WhiteColorOrAlphaGroupEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::WhiteColorOrAlphaGroupEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::WhiteColorOrAlphaGroupEffect*, "", "WhiteColorOrAlphaGroupEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAC
  #pragma pack(push, 1)
  // Autogenerated type: WhiteColorOrAlphaGroupEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class WhiteColorOrAlphaGroupEffect : public ::GlobalNamespace::LightColorGroupEffect {
    public:
    // Writing base type padding for base size: 0x99 to desired offset: 0x9C
    char ___base_padding[0x3] = {};
    public:
    // private readonly UnityEngine.Color _defaultColor
    // Size: 0x10
    // Offset: 0x9C
    ::UnityEngine::Color defaultColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Creating conversion operator: operator ::UnityEngine::Color
    constexpr operator ::UnityEngine::Color() const noexcept {
      return defaultColor;
    }
    // Get instance field reference: private readonly UnityEngine.Color _defaultColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__defaultColor();
    // public System.Void .ctor(LightColorGroupEffect/InitData initData, UnityEngine.Color defaultColor, LightWithIdManager lightManager, Tweening.SongTimeTweeningManager tweeningManager, ColorManager colorManager, BeatmapCallbacksController beatmapCallbacksController, IBpmController bpmController)
    // Offset: 0x15EEACC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WhiteColorOrAlphaGroupEffect* New_ctor(::GlobalNamespace::LightColorGroupEffect::InitData* initData, ::UnityEngine::Color defaultColor, ::GlobalNamespace::LightWithIdManager* lightManager, ::Tweening::SongTimeTweeningManager* tweeningManager, ::GlobalNamespace::ColorManager* colorManager, ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController, ::GlobalNamespace::IBpmController* bpmController) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::WhiteColorOrAlphaGroupEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WhiteColorOrAlphaGroupEffect*, creationType>(initData, defaultColor, lightManager, tweeningManager, colorManager, beatmapCallbacksController, bpmController)));
    }
    // protected override UnityEngine.Color GetColor(EnvironmentColorType colorType, System.Boolean colorBoost, System.Single brightness)
    // Offset: 0x15EEBA8
    // Implemented from: LightColorGroupEffect
    // Base method: UnityEngine.Color LightColorGroupEffect::GetColor(EnvironmentColorType colorType, System.Boolean colorBoost, System.Single brightness)
    ::UnityEngine::Color GetColor(::GlobalNamespace::EnvironmentColorType colorType, bool colorBoost, float brightness);
  }; // WhiteColorOrAlphaGroupEffect
  #pragma pack(pop)
  static check_size<sizeof(WhiteColorOrAlphaGroupEffect), 156 + sizeof(::UnityEngine::Color)> __GlobalNamespace_WhiteColorOrAlphaGroupEffectSizeCheck;
  static_assert(sizeof(WhiteColorOrAlphaGroupEffect) == 0xAC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::WhiteColorOrAlphaGroupEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::WhiteColorOrAlphaGroupEffect::GetColor
// Il2CppName: GetColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::WhiteColorOrAlphaGroupEffect::*)(::GlobalNamespace::EnvironmentColorType, bool, float)>(&GlobalNamespace::WhiteColorOrAlphaGroupEffect::GetColor)> {
  static const MethodInfo* get() {
    static auto* colorType = &::il2cpp_utils::GetClassFromName("", "EnvironmentColorType")->byval_arg;
    static auto* colorBoost = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* brightness = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::WhiteColorOrAlphaGroupEffect*), "GetColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorType, colorBoost, brightness});
  }
};
