// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapEventDataBox
#include "GlobalNamespace/BeatmapEventDataBox.hpp"
// Including type: LightRotationBeatmapEventData/Axis
#include "GlobalNamespace/LightRotationBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightRotationBaseData
  class LightRotationBaseData;
  // Forward declaring type: IIndexFilter
  class IIndexFilter;
  // Forward declaring type: IBeatToTimeConvertor
  class IBeatToTimeConvertor;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightRotationBeatmapEventDataBox
  class LightRotationBeatmapEventDataBox;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightRotationBeatmapEventDataBox);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightRotationBeatmapEventDataBox*, "", "LightRotationBeatmapEventDataBox");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: LightRotationBeatmapEventDataBox
  // [TokenAttribute] Offset: FFFFFFFF
  class LightRotationBeatmapEventDataBox : public ::GlobalNamespace::BeatmapEventDataBox {
    public:
    public:
    // private readonly System.Collections.Generic.IReadOnlyList`1<LightRotationBaseData> _lightRotationBaseDataList
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightRotationBaseData*>* lightRotationBaseDataList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightRotationBaseData*>*) == 0x8);
    // private readonly LightRotationBeatmapEventData/Axis _axis
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::LightRotationBeatmapEventData::Axis axis;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightRotationBeatmapEventData::Axis) == 0x4);
    // private readonly System.Single _rotationDirection
    // Size: 0x4
    // Offset: 0x2C
    float rotationDirection;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single _rotationStep
    // Size: 0x4
    // Offset: 0x30
    float rotationStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single _beatStep
    // Size: 0x4
    // Offset: 0x34
    float beatStep;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Boolean _rotationDistributionShouldAffectFirstBaseEvent
    // Size: 0x1
    // Offset: 0x38
    bool rotationDistributionShouldAffectFirstBaseEvent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.IReadOnlyList`1<LightRotationBaseData> _lightRotationBaseDataList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightRotationBaseData*>*& dyn__lightRotationBaseDataList();
    // Get instance field reference: private readonly LightRotationBeatmapEventData/Axis _axis
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightRotationBeatmapEventData::Axis& dyn__axis();
    // Get instance field reference: private readonly System.Single _rotationDirection
    [[deprecated("Use field access instead!")]] float& dyn__rotationDirection();
    // Get instance field reference: private readonly System.Single _rotationStep
    [[deprecated("Use field access instead!")]] float& dyn__rotationStep();
    // Get instance field reference: private readonly System.Single _beatStep
    [[deprecated("Use field access instead!")]] float& dyn__beatStep();
    // Get instance field reference: private readonly System.Boolean _rotationDistributionShouldAffectFirstBaseEvent
    [[deprecated("Use field access instead!")]] bool& dyn__rotationDistributionShouldAffectFirstBaseEvent();
    // public System.Void .ctor(IIndexFilter indexFilter, System.Single beatDistributionParam, BeatmapEventDataBox/DistributionParamType beatDistributionParamType, LightRotationBeatmapEventData/Axis axis, System.Boolean flipRotation, System.Single rotationDistributionParam, BeatmapEventDataBox/DistributionParamType rotationDistributionParamType, System.Boolean rotationDistributionShouldAffectFirstBaseEvent, System.Collections.Generic.IReadOnlyList`1<LightRotationBaseData> lightRotationBaseDataList)
    // Offset: 0x14BBE30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightRotationBeatmapEventDataBox* New_ctor(::GlobalNamespace::IIndexFilter* indexFilter, float beatDistributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType beatDistributionParamType, ::GlobalNamespace::LightRotationBeatmapEventData::Axis axis, bool flipRotation, float rotationDistributionParam, ::GlobalNamespace::BeatmapEventDataBox::DistributionParamType rotationDistributionParamType, bool rotationDistributionShouldAffectFirstBaseEvent, ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::LightRotationBaseData*>* lightRotationBaseDataList) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationBeatmapEventDataBox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightRotationBeatmapEventDataBox*, creationType>(indexFilter, beatDistributionParam, beatDistributionParamType, axis, flipRotation, rotationDistributionParam, rotationDistributionParamType, rotationDistributionShouldAffectFirstBaseEvent, lightRotationBaseDataList)));
    }
    // public override System.Int32 get_subtypeIdentifier()
    // Offset: 0x14BBE20
    // Implemented from: BeatmapEventDataBox
    // Base method: System.Int32 BeatmapEventDataBox::get_subtypeIdentifier()
    int get_subtypeIdentifier();
    // public override System.Single get_beatStep()
    // Offset: 0x14BBE28
    // Implemented from: BeatmapEventDataBox
    // Base method: System.Single BeatmapEventDataBox::get_beatStep()
    float get_beatStep();
    // public override System.Void Unpack(System.Single groupBoxBeat, System.Int32 groupId, System.Int32 elementId, System.Int32 orderIndex, System.Single maxBeat, IBeatToTimeConvertor beatToTimeConvertor, System.Collections.Generic.List`1<BeatmapEventData> output)
    // Offset: 0x14BC084
    // Implemented from: BeatmapEventDataBox
    // Base method: System.Void BeatmapEventDataBox::Unpack(System.Single groupBoxBeat, System.Int32 groupId, System.Int32 elementId, System.Int32 orderIndex, System.Single maxBeat, IBeatToTimeConvertor beatToTimeConvertor, System.Collections.Generic.List`1<BeatmapEventData> output)
    void Unpack(float groupBoxBeat, int groupId, int elementId, int orderIndex, float maxBeat, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>* output);
  }; // LightRotationBeatmapEventDataBox
  #pragma pack(pop)
  static check_size<sizeof(LightRotationBeatmapEventDataBox), 56 + sizeof(bool)> __GlobalNamespace_LightRotationBeatmapEventDataBoxSizeCheck;
  static_assert(sizeof(LightRotationBeatmapEventDataBox) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightRotationBeatmapEventDataBox::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightRotationBeatmapEventDataBox::get_subtypeIdentifier
// Il2CppName: get_subtypeIdentifier
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightRotationBeatmapEventDataBox::*)()>(&GlobalNamespace::LightRotationBeatmapEventDataBox::get_subtypeIdentifier)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationBeatmapEventDataBox*), "get_subtypeIdentifier", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationBeatmapEventDataBox::get_beatStep
// Il2CppName: get_beatStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LightRotationBeatmapEventDataBox::*)()>(&GlobalNamespace::LightRotationBeatmapEventDataBox::get_beatStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationBeatmapEventDataBox*), "get_beatStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationBeatmapEventDataBox::Unpack
// Il2CppName: Unpack
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightRotationBeatmapEventDataBox::*)(float, int, int, int, float, ::GlobalNamespace::IBeatToTimeConvertor*, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::LightRotationBeatmapEventDataBox::Unpack)> {
  static const MethodInfo* get() {
    static auto* groupBoxBeat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* elementId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* orderIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* maxBeat = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* beatToTimeConvertor = &::il2cpp_utils::GetClassFromName("", "IBeatToTimeConvertor")->byval_arg;
    static auto* output = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationBeatmapEventDataBox*), "Unpack", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupBoxBeat, groupId, elementId, orderIndex, maxBeat, beatToTimeConvertor, output});
  }
};
