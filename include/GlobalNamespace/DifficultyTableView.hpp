// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.TableView/HMUI.IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: TableView because it is already included!
  // Forward declaring type: TableCell
  class TableCell;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: DifficultyTableCell
  class DifficultyTableCell;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: String
  class String;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DifficultyTableView
  class DifficultyTableView;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DifficultyTableView);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DifficultyTableView*, "", "DifficultyTableView");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: DifficultyTableView
  // [TokenAttribute] Offset: FFFFFFFF
  class DifficultyTableView : public ::UnityEngine::MonoBehaviour/*, public ::HMUI::TableView::IDataSource*/ {
    public:
    public:
    // private HMUI.TableView _tableView
    // Size: 0x8
    // Offset: 0x18
    ::HMUI::TableView* tableView;
    // Field size check
    static_assert(sizeof(::HMUI::TableView*) == 0x8);
    // private DifficultyTableCell _cellPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::DifficultyTableCell* cellPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DifficultyTableCell*) == 0x8);
    // private DifficultyTableCell _nonSelectableCellPrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::DifficultyTableCell* nonSelectableCellPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::DifficultyTableCell*) == 0x8);
    // private System.Single _cellHeight
    // Size: 0x4
    // Offset: 0x30
    float cellHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: cellHeight and: didSelectRow
    char __padding3[0x4] = {};
    // private System.Action`2<DifficultyTableView,System.Int32> didSelectRow
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>* didSelectRow;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>*) == 0x8);
    // private IDifficultyBeatmap[] _difficultyBeatmaps
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::IDifficultyBeatmap*> difficultyBeatmaps;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::IDifficultyBeatmap*>) == 0x8);
    public:
    // Creating interface conversion operator: operator ::HMUI::TableView::IDataSource
    operator ::HMUI::TableView::IDataSource() noexcept {
      return *reinterpret_cast<::HMUI::TableView::IDataSource*>(this);
    }
    // Creating interface conversion operator: i_IDataSource
    inline ::HMUI::TableView::IDataSource* i_IDataSource() noexcept {
      return reinterpret_cast<::HMUI::TableView::IDataSource*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String kCellIdentifier
    static constexpr const char* kCellIdentifier = "Cell";
    // Get static field: static private System.String kCellIdentifier
    static ::StringW _get_kCellIdentifier();
    // Set static field: static private System.String kCellIdentifier
    static void _set_kCellIdentifier(::StringW value);
    // static field const value: static private System.String kNonSelectableCellIdentifier
    static constexpr const char* kNonSelectableCellIdentifier = "NonSelectableCell";
    // Get static field: static private System.String kNonSelectableCellIdentifier
    static ::StringW _get_kNonSelectableCellIdentifier();
    // Set static field: static private System.String kNonSelectableCellIdentifier
    static void _set_kNonSelectableCellIdentifier(::StringW value);
    // Get instance field reference: private HMUI.TableView _tableView
    [[deprecated("Use field access instead!")]] ::HMUI::TableView*& dyn__tableView();
    // Get instance field reference: private DifficultyTableCell _cellPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DifficultyTableCell*& dyn__cellPrefab();
    // Get instance field reference: private DifficultyTableCell _nonSelectableCellPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::DifficultyTableCell*& dyn__nonSelectableCellPrefab();
    // Get instance field reference: private System.Single _cellHeight
    [[deprecated("Use field access instead!")]] float& dyn__cellHeight();
    // Get instance field reference: private System.Action`2<DifficultyTableView,System.Int32> didSelectRow
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>*& dyn_didSelectRow();
    // Get instance field reference: private IDifficultyBeatmap[] _difficultyBeatmaps
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::IDifficultyBeatmap*>& dyn__difficultyBeatmaps();
    // public System.Void add_didSelectRow(System.Action`2<DifficultyTableView,System.Int32> value)
    // Offset: 0x1492E10
    void add_didSelectRow(::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>* value);
    // public System.Void remove_didSelectRow(System.Action`2<DifficultyTableView,System.Int32> value)
    // Offset: 0x1492EB4
    void remove_didSelectRow(::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>* value);
    // public System.Void .ctor()
    // Offset: 0x1493574
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DifficultyTableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DifficultyTableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DifficultyTableView*, creationType>()));
    }
    // public System.Void Init(IDifficultyBeatmap[] difficultyBeatmaps)
    // Offset: 0x1492F58
    void Init(::ArrayW<::GlobalNamespace::IDifficultyBeatmap*> difficultyBeatmaps);
    // public System.Void SetDifficultyBeatmaps(IDifficultyBeatmap[] difficultyBeatmaps)
    // Offset: 0x1493048
    void SetDifficultyBeatmaps(::ArrayW<::GlobalNamespace::IDifficultyBeatmap*> difficultyBeatmaps);
    // public System.Single CellSize()
    // Offset: 0x1493070
    float CellSize();
    // public System.Int32 NumberOfCells()
    // Offset: 0x1493078
    int NumberOfCells();
    // public HMUI.TableCell CellForIdx(HMUI.TableView tableView, System.Int32 row)
    // Offset: 0x1493098
    ::HMUI::TableCell* CellForIdx(::HMUI::TableView* tableView, int row);
    // private System.Void HandleDidSelectRowEvent(HMUI.TableView tableView, System.Int32 row)
    // Offset: 0x1493400
    void HandleDidSelectRowEvent(::HMUI::TableView* tableView, int row);
    // public System.Void SelectRow(System.Int32 row, System.Boolean callbackTable)
    // Offset: 0x14934A8
    void SelectRow(int row, bool callbackTable);
    // public System.Void SelectRow(IDifficultyBeatmap difficultyBeatmap, System.Boolean callbackTable)
    // Offset: 0x14934C8
    void SelectRow(::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, bool callbackTable);
    // public System.Void ClearSelection()
    // Offset: 0x1493558
    void ClearSelection();
  }; // DifficultyTableView
  #pragma pack(pop)
  static check_size<sizeof(DifficultyTableView), 64 + sizeof(::ArrayW<::GlobalNamespace::IDifficultyBeatmap*>)> __GlobalNamespace_DifficultyTableViewSizeCheck;
  static_assert(sizeof(DifficultyTableView) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::add_didSelectRow
// Il2CppName: add_didSelectRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>*)>(&GlobalNamespace::DifficultyTableView::add_didSelectRow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DifficultyTableView"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "add_didSelectRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::remove_didSelectRow
// Il2CppName: remove_didSelectRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(::System::Action_2<::GlobalNamespace::DifficultyTableView*, int>*)>(&GlobalNamespace::DifficultyTableView::remove_didSelectRow)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DifficultyTableView"), ::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "remove_didSelectRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(::ArrayW<::GlobalNamespace::IDifficultyBeatmap*>)>(&GlobalNamespace::DifficultyTableView::Init)> {
  static const MethodInfo* get() {
    static auto* difficultyBeatmaps = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "IDifficultyBeatmap"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{difficultyBeatmaps});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::SetDifficultyBeatmaps
// Il2CppName: SetDifficultyBeatmaps
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(::ArrayW<::GlobalNamespace::IDifficultyBeatmap*>)>(&GlobalNamespace::DifficultyTableView::SetDifficultyBeatmaps)> {
  static const MethodInfo* get() {
    static auto* difficultyBeatmaps = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "IDifficultyBeatmap"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "SetDifficultyBeatmaps", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{difficultyBeatmaps});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::CellSize
// Il2CppName: CellSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::DifficultyTableView::*)()>(&GlobalNamespace::DifficultyTableView::CellSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "CellSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::NumberOfCells
// Il2CppName: NumberOfCells
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::DifficultyTableView::*)()>(&GlobalNamespace::DifficultyTableView::NumberOfCells)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "NumberOfCells", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::CellForIdx
// Il2CppName: CellForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::HMUI::TableCell* (GlobalNamespace::DifficultyTableView::*)(::HMUI::TableView*, int)>(&GlobalNamespace::DifficultyTableView::CellForIdx)> {
  static const MethodInfo* get() {
    static auto* tableView = &::il2cpp_utils::GetClassFromName("HMUI", "TableView")->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "CellForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableView, row});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::HandleDidSelectRowEvent
// Il2CppName: HandleDidSelectRowEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(::HMUI::TableView*, int)>(&GlobalNamespace::DifficultyTableView::HandleDidSelectRowEvent)> {
  static const MethodInfo* get() {
    static auto* tableView = &::il2cpp_utils::GetClassFromName("HMUI", "TableView")->byval_arg;
    static auto* row = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "HandleDidSelectRowEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{tableView, row});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::SelectRow
// Il2CppName: SelectRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(int, bool)>(&GlobalNamespace::DifficultyTableView::SelectRow)> {
  static const MethodInfo* get() {
    static auto* row = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* callbackTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "SelectRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{row, callbackTable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::SelectRow
// Il2CppName: SelectRow
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)(::GlobalNamespace::IDifficultyBeatmap*, bool)>(&GlobalNamespace::DifficultyTableView::SelectRow)> {
  static const MethodInfo* get() {
    static auto* difficultyBeatmap = &::il2cpp_utils::GetClassFromName("", "IDifficultyBeatmap")->byval_arg;
    static auto* callbackTable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "SelectRow", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{difficultyBeatmap, callbackTable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DifficultyTableView::ClearSelection
// Il2CppName: ClearSelection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::DifficultyTableView::*)()>(&GlobalNamespace::DifficultyTableView::ClearSelection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DifficultyTableView*), "ClearSelection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
