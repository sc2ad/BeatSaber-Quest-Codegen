// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB_PreserveLightmapData
  class MB_PreserveLightmapData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB_PreserveLightmapData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB_PreserveLightmapData*, "", "MB_PreserveLightmapData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: MB_PreserveLightmapData
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class MB_PreserveLightmapData : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 lightmapIndex
    // Size: 0x4
    // Offset: 0x18
    int lightmapIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Vector4 lightmapScaleOffset
    // Size: 0x10
    // Offset: 0x1C
    ::UnityEngine::Vector4 lightmapScaleOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector4) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 lightmapIndex
    [[deprecated("Use field access instead!")]] int& dyn_lightmapIndex();
    // Get instance field reference: public UnityEngine.Vector4 lightmapScaleOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector4& dyn_lightmapScaleOffset();
    // public System.Void .ctor()
    // Offset: 0x1B63E44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB_PreserveLightmapData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB_PreserveLightmapData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB_PreserveLightmapData*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x1B63CB8
    void Awake();
  }; // MB_PreserveLightmapData
  #pragma pack(pop)
  static check_size<sizeof(MB_PreserveLightmapData), 28 + sizeof(::UnityEngine::Vector4)> __GlobalNamespace_MB_PreserveLightmapDataSizeCheck;
  static_assert(sizeof(MB_PreserveLightmapData) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB_PreserveLightmapData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB_PreserveLightmapData::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB_PreserveLightmapData::*)()>(&GlobalNamespace::MB_PreserveLightmapData::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB_PreserveLightmapData*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
