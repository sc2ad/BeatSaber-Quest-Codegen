// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: LightAxis
#include "GlobalNamespace/LightAxis.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BasicSpectrogramData
  class BasicSpectrogramData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TransformSpectrogram
  class TransformSpectrogram;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TransformSpectrogram);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TransformSpectrogram*, "", "TransformSpectrogram");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: TransformSpectrogram
  // [TokenAttribute] Offset: FFFFFFFF
  class TransformSpectrogram : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private UnityEngine.Transform[] _transforms
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Transform*> transforms;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // [SpaceAttribute] Offset: 0x11229C0
    // private LightAxis _axis
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::LightAxis axis;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightAxis) == 0x4);
    // private System.Single _minPosition
    // Size: 0x4
    // Offset: 0x24
    float minPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxPosition
    // Size: 0x4
    // Offset: 0x28
    float maxPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x1122A18
    // private System.Boolean _scaleSamples
    // Size: 0x1
    // Offset: 0x2C
    bool scaleSamples;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: scaleSamples and: scale
    char __padding4[0x3] = {};
    // [TooltipAttribute] Offset: 0x1122A64
    // private System.Single _scale
    // Size: 0x4
    // Offset: 0x30
    float scale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: scale and: spectrogramData
    char __padding5[0x4] = {};
    // [InjectAttribute] Offset: 0x1122AB0
    // private readonly BasicSpectrogramData _spectrogramData
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BasicSpectrogramData* spectrogramData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasicSpectrogramData*) == 0x8);
    // private UnityEngine.Vector3 _direction
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 direction;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: direction and: defaultPositions
    char __padding7[0x4] = {};
    // private UnityEngine.Vector3[] _defaultPositions
    // Size: 0x8
    // Offset: 0x50
    ::ArrayW<::UnityEngine::Vector3> defaultPositions;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Transform[] _transforms
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn__transforms();
    // Get instance field reference: private LightAxis _axis
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightAxis& dyn__axis();
    // Get instance field reference: private System.Single _minPosition
    [[deprecated("Use field access instead!")]] float& dyn__minPosition();
    // Get instance field reference: private System.Single _maxPosition
    [[deprecated("Use field access instead!")]] float& dyn__maxPosition();
    // Get instance field reference: private System.Boolean _scaleSamples
    [[deprecated("Use field access instead!")]] bool& dyn__scaleSamples();
    // Get instance field reference: private System.Single _scale
    [[deprecated("Use field access instead!")]] float& dyn__scale();
    // Get instance field reference: private readonly BasicSpectrogramData _spectrogramData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicSpectrogramData*& dyn__spectrogramData();
    // Get instance field reference: private UnityEngine.Vector3 _direction
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__direction();
    // Get instance field reference: private UnityEngine.Vector3[] _defaultPositions
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn__defaultPositions();
    // public System.Void .ctor()
    // Offset: 0x13B54C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TransformSpectrogram* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TransformSpectrogram::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TransformSpectrogram*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x13B4FF4
    void Awake();
    // protected System.Void Update()
    // Offset: 0x13B5274
    void Update();
  }; // TransformSpectrogram
  #pragma pack(pop)
  static check_size<sizeof(TransformSpectrogram), 80 + sizeof(::ArrayW<::UnityEngine::Vector3>)> __GlobalNamespace_TransformSpectrogramSizeCheck;
  static_assert(sizeof(TransformSpectrogram) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TransformSpectrogram::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TransformSpectrogram::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransformSpectrogram::*)()>(&GlobalNamespace::TransformSpectrogram::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransformSpectrogram*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TransformSpectrogram::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TransformSpectrogram::*)()>(&GlobalNamespace::TransformSpectrogram::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TransformSpectrogram*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
