// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IAuthenticationTokenProvider
#include "GlobalNamespace/IAuthenticationTokenProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MockPlayerAuthenticationTokenProvider
  class MockPlayerAuthenticationTokenProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MockPlayerAuthenticationTokenProvider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MockPlayerAuthenticationTokenProvider*, "", "MockPlayerAuthenticationTokenProvider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: MockPlayerAuthenticationTokenProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class MockPlayerAuthenticationTokenProvider : public ::Il2CppObject/*, public ::GlobalNamespace::IAuthenticationTokenProvider*/ {
    public:
    public:
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x10
    ::StringW userId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String _password
    // Size: 0x8
    // Offset: 0x18
    ::StringW password;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <hashedUserId>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW hashedUserId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <userName>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::StringW userName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IAuthenticationTokenProvider
    operator ::GlobalNamespace::IAuthenticationTokenProvider() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IAuthenticationTokenProvider*>(this);
    }
    // Creating interface conversion operator: i_IAuthenticationTokenProvider
    inline ::GlobalNamespace::IAuthenticationTokenProvider* i_IAuthenticationTokenProvider() noexcept {
      return reinterpret_cast<::GlobalNamespace::IAuthenticationTokenProvider*>(this);
    }
    // Get instance field reference: private readonly System.String _userId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__userId();
    // Get instance field reference: private readonly System.String _password
    [[deprecated("Use field access instead!")]] ::StringW& dyn__password();
    // Get instance field reference: private readonly System.String <hashedUserId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$hashedUserId$k__BackingField();
    // Get instance field reference: private readonly System.String <userName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$userName$k__BackingField();
    // public System.String get_hashedUserId()
    // Offset: 0x2B20680
    ::StringW get_hashedUserId();
    // public System.String get_userName()
    // Offset: 0x2B20688
    ::StringW get_userName();
    // public System.Void .ctor(System.String userId, System.String userName, System.String password)
    // Offset: 0x2B20690
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MockPlayerAuthenticationTokenProvider* New_ctor(::StringW userId, ::StringW userName, ::StringW password) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MockPlayerAuthenticationTokenProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MockPlayerAuthenticationTokenProvider*, creationType>(userId, userName, password)));
    }
    // public System.Threading.Tasks.Task`1<AuthenticationToken> GetAuthenticationToken()
    // Offset: 0x2B20734
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::AuthenticationToken>* GetAuthenticationToken();
  }; // MockPlayerAuthenticationTokenProvider
  #pragma pack(pop)
  static check_size<sizeof(MockPlayerAuthenticationTokenProvider), 40 + sizeof(::StringW)> __GlobalNamespace_MockPlayerAuthenticationTokenProviderSizeCheck;
  static_assert(sizeof(MockPlayerAuthenticationTokenProvider) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerAuthenticationTokenProvider::get_hashedUserId
// Il2CppName: get_hashedUserId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MockPlayerAuthenticationTokenProvider::*)()>(&GlobalNamespace::MockPlayerAuthenticationTokenProvider::get_hashedUserId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerAuthenticationTokenProvider*), "get_hashedUserId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerAuthenticationTokenProvider::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::MockPlayerAuthenticationTokenProvider::*)()>(&GlobalNamespace::MockPlayerAuthenticationTokenProvider::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerAuthenticationTokenProvider*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerAuthenticationTokenProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MockPlayerAuthenticationTokenProvider::GetAuthenticationToken
// Il2CppName: GetAuthenticationToken
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::AuthenticationToken>* (GlobalNamespace::MockPlayerAuthenticationTokenProvider::*)()>(&GlobalNamespace::MockPlayerAuthenticationTokenProvider::GetAuthenticationToken)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MockPlayerAuthenticationTokenProvider*), "GetAuthenticationToken", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
