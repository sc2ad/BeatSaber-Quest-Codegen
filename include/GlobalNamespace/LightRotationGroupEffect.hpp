// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightRotationBeatmapEventData/Axis
#include "GlobalNamespace/LightRotationBeatmapEventData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Skipping declaration: LightRotationBeatmapEventData because it is already included!
  // Forward declaring type: LightRotationDirection
  struct LightRotationDirection;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: SongTimeTweeningManager
  class SongTimeTweeningManager;
  // Forward declaring type: FloatTween
  class FloatTween;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightRotationGroupEffect
  class LightRotationGroupEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightRotationGroupEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightRotationGroupEffect*, "", "LightRotationGroupEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: LightRotationGroupEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class LightRotationGroupEffect : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::LightRotationGroupEffect::InitData
    class InitData;
    public:
    // private readonly UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x10
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private readonly LightRotationBeatmapEventData/Axis _axis
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::LightRotationBeatmapEventData::Axis axis;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightRotationBeatmapEventData::Axis) == 0x4);
    // private readonly System.Boolean _mirrored
    // Size: 0x1
    // Offset: 0x1C
    bool mirrored;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: mirrored and: tweeningManager
    char __padding2[0x3] = {};
    // private readonly Tweening.SongTimeTweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x20
    ::Tweening::SongTimeTweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(::Tweening::SongTimeTweeningManager*) == 0x8);
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // private readonly Tweening.FloatTween _rotationTween
    // Size: 0x8
    // Offset: 0x30
    ::Tweening::FloatTween* rotationTween;
    // Field size check
    static_assert(sizeof(::Tweening::FloatTween*) == 0x8);
    // private readonly BeatmapDataCallbackWrapper _lightRotationBeatmapEventCallbackWrapper
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BeatmapDataCallbackWrapper* lightRotationBeatmapEventCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    public:
    // Get instance field reference: private readonly UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private readonly LightRotationBeatmapEventData/Axis _axis
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightRotationBeatmapEventData::Axis& dyn__axis();
    // Get instance field reference: private readonly System.Boolean _mirrored
    [[deprecated("Use field access instead!")]] bool& dyn__mirrored();
    // Get instance field reference: private readonly Tweening.SongTimeTweeningManager _tweeningManager
    [[deprecated("Use field access instead!")]] ::Tweening::SongTimeTweeningManager*& dyn__tweeningManager();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly Tweening.FloatTween _rotationTween
    [[deprecated("Use field access instead!")]] ::Tweening::FloatTween*& dyn__rotationTween();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper _lightRotationBeatmapEventCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__lightRotationBeatmapEventCallbackWrapper();
    // public System.Void .ctor(LightRotationGroupEffect/InitData initData, Tweening.SongTimeTweeningManager tweeningManager, BeatmapCallbacksController beatmapCallbacksController)
    // Offset: 0x14BC938
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightRotationGroupEffect* New_ctor(::GlobalNamespace::LightRotationGroupEffect::InitData* initData, ::Tweening::SongTimeTweeningManager* tweeningManager, ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightRotationGroupEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightRotationGroupEffect*, creationType>(initData, tweeningManager, beatmapCallbacksController)));
    }
    // public System.Void Cleanup()
    // Offset: 0x14BCB20
    void Cleanup();
    // private System.Void HandleRotationChangeBeatmapEvent(LightRotationBeatmapEventData currentEventData)
    // Offset: 0x14BCBCC
    void HandleRotationChangeBeatmapEvent(::GlobalNamespace::LightRotationBeatmapEventData* currentEventData);
    // private System.Void SetRotation(System.Single rotation)
    // Offset: 0x14BCD84
    void SetRotation(float rotation);
    // static public System.Single ComputeTargetAngle(System.Single startAngle, System.Single targetAngle, System.Int32 loopCount, LightRotationDirection rotationOrientation)
    // Offset: 0x14BCE88
    static float ComputeTargetAngle(float startAngle, float targetAngle, int loopCount, ::GlobalNamespace::LightRotationDirection rotationOrientation);
  }; // LightRotationGroupEffect
  #pragma pack(pop)
  static check_size<sizeof(LightRotationGroupEffect), 56 + sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*)> __GlobalNamespace_LightRotationGroupEffectSizeCheck;
  static_assert(sizeof(LightRotationGroupEffect) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroupEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroupEffect::Cleanup
// Il2CppName: Cleanup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightRotationGroupEffect::*)()>(&GlobalNamespace::LightRotationGroupEffect::Cleanup)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroupEffect*), "Cleanup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroupEffect::HandleRotationChangeBeatmapEvent
// Il2CppName: HandleRotationChangeBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightRotationGroupEffect::*)(::GlobalNamespace::LightRotationBeatmapEventData*)>(&GlobalNamespace::LightRotationGroupEffect::HandleRotationChangeBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* currentEventData = &::il2cpp_utils::GetClassFromName("", "LightRotationBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroupEffect*), "HandleRotationChangeBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroupEffect::SetRotation
// Il2CppName: SetRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightRotationGroupEffect::*)(float)>(&GlobalNamespace::LightRotationGroupEffect::SetRotation)> {
  static const MethodInfo* get() {
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroupEffect*), "SetRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightRotationGroupEffect::ComputeTargetAngle
// Il2CppName: ComputeTargetAngle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (*)(float, float, int, ::GlobalNamespace::LightRotationDirection)>(&GlobalNamespace::LightRotationGroupEffect::ComputeTargetAngle)> {
  static const MethodInfo* get() {
    static auto* startAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* targetAngle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* loopCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rotationOrientation = &::il2cpp_utils::GetClassFromName("", "LightRotationDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightRotationGroupEffect*), "ComputeTargetAngle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startAngle, targetAngle, loopCount, rotationOrientation});
  }
};
