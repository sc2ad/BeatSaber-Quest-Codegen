// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Bounds
#include "UnityEngine/Bounds.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture3D
  class Texture3D;
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BakeryVolume
  class BakeryVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BakeryVolume);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryVolume*, "", "BakeryVolume");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: BakeryVolume
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class BakeryVolume : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::BakeryVolume::Encoding
    struct Encoding;
    // Nested type: ::GlobalNamespace::BakeryVolume::ShadowmaskEncoding
    struct ShadowmaskEncoding;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BakeryVolume/Encoding
    // [TokenAttribute] Offset: FFFFFFFF
    struct Encoding/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: Encoding
      constexpr Encoding(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BakeryVolume/Encoding Half4
      static constexpr const int Half4 = 0;
      // Get static field: static public BakeryVolume/Encoding Half4
      static ::GlobalNamespace::BakeryVolume::Encoding _get_Half4();
      // Set static field: static public BakeryVolume/Encoding Half4
      static void _set_Half4(::GlobalNamespace::BakeryVolume::Encoding value);
      // static field const value: static public BakeryVolume/Encoding RGBA8
      static constexpr const int RGBA8 = 1;
      // Get static field: static public BakeryVolume/Encoding RGBA8
      static ::GlobalNamespace::BakeryVolume::Encoding _get_RGBA8();
      // Set static field: static public BakeryVolume/Encoding RGBA8
      static void _set_RGBA8(::GlobalNamespace::BakeryVolume::Encoding value);
      // static field const value: static public BakeryVolume/Encoding RGBA8Mono
      static constexpr const int RGBA8Mono = 2;
      // Get static field: static public BakeryVolume/Encoding RGBA8Mono
      static ::GlobalNamespace::BakeryVolume::Encoding _get_RGBA8Mono();
      // Set static field: static public BakeryVolume/Encoding RGBA8Mono
      static void _set_RGBA8Mono(::GlobalNamespace::BakeryVolume::Encoding value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BakeryVolume/Encoding
    #pragma pack(pop)
    static check_size<sizeof(BakeryVolume::Encoding), 0 + sizeof(int)> __GlobalNamespace_BakeryVolume_EncodingSizeCheck;
    static_assert(sizeof(BakeryVolume::Encoding) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: BakeryVolume/ShadowmaskEncoding
    // [TokenAttribute] Offset: FFFFFFFF
    struct ShadowmaskEncoding/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ShadowmaskEncoding
      constexpr ShadowmaskEncoding(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public BakeryVolume/ShadowmaskEncoding RGBA8
      static constexpr const int RGBA8 = 0;
      // Get static field: static public BakeryVolume/ShadowmaskEncoding RGBA8
      static ::GlobalNamespace::BakeryVolume::ShadowmaskEncoding _get_RGBA8();
      // Set static field: static public BakeryVolume/ShadowmaskEncoding RGBA8
      static void _set_RGBA8(::GlobalNamespace::BakeryVolume::ShadowmaskEncoding value);
      // static field const value: static public BakeryVolume/ShadowmaskEncoding A8
      static constexpr const int A8 = 1;
      // Get static field: static public BakeryVolume/ShadowmaskEncoding A8
      static ::GlobalNamespace::BakeryVolume::ShadowmaskEncoding _get_A8();
      // Set static field: static public BakeryVolume/ShadowmaskEncoding A8
      static void _set_A8(::GlobalNamespace::BakeryVolume::ShadowmaskEncoding value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // BakeryVolume/ShadowmaskEncoding
    #pragma pack(pop)
    static check_size<sizeof(BakeryVolume::ShadowmaskEncoding), 0 + sizeof(int)> __GlobalNamespace_BakeryVolume_ShadowmaskEncodingSizeCheck;
    static_assert(sizeof(BakeryVolume::ShadowmaskEncoding) == 0x4);
    public:
    // public System.Boolean enableBaking
    // Size: 0x1
    // Offset: 0x18
    bool enableBaking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableBaking and: bounds
    char __padding0[0x3] = {};
    // public UnityEngine.Bounds bounds
    // Size: 0x18
    // Offset: 0x1C
    ::UnityEngine::Bounds bounds;
    // Field size check
    static_assert(sizeof(::UnityEngine::Bounds) == 0x18);
    // public System.Boolean adaptiveRes
    // Size: 0x1
    // Offset: 0x34
    bool adaptiveRes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: adaptiveRes and: voxelsPerUnit
    char __padding2[0x3] = {};
    // public System.Single voxelsPerUnit
    // Size: 0x4
    // Offset: 0x38
    float voxelsPerUnit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 resolutionX
    // Size: 0x4
    // Offset: 0x3C
    int resolutionX;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 resolutionY
    // Size: 0x4
    // Offset: 0x40
    int resolutionY;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 resolutionZ
    // Size: 0x4
    // Offset: 0x44
    int resolutionZ;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public BakeryVolume/Encoding encoding
    // Size: 0x4
    // Offset: 0x48
    ::GlobalNamespace::BakeryVolume::Encoding encoding;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakeryVolume::Encoding) == 0x4);
    // public BakeryVolume/ShadowmaskEncoding shadowmaskEncoding
    // Size: 0x4
    // Offset: 0x4C
    ::GlobalNamespace::BakeryVolume::ShadowmaskEncoding shadowmaskEncoding;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakeryVolume::ShadowmaskEncoding) == 0x4);
    // public System.Boolean denoise
    // Size: 0x1
    // Offset: 0x50
    bool denoise;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isGlobal
    // Size: 0x1
    // Offset: 0x51
    bool isGlobal;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isGlobal and: bakedTexture0
    char __padding10[0x6] = {};
    // public UnityEngine.Texture3D bakedTexture0
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Texture3D* bakedTexture0;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture3D*) == 0x8);
    // public UnityEngine.Texture3D bakedTexture1
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Texture3D* bakedTexture1;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture3D*) == 0x8);
    // public UnityEngine.Texture3D bakedTexture2
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Texture3D* bakedTexture2;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture3D*) == 0x8);
    // public UnityEngine.Texture3D bakedTexture3
    // Size: 0x8
    // Offset: 0x70
    ::UnityEngine::Texture3D* bakedTexture3;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture3D*) == 0x8);
    // public UnityEngine.Texture3D bakedMask
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::Texture3D* bakedMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::Texture3D*) == 0x8);
    // public System.Boolean supportRotationAfterBake
    // Size: 0x1
    // Offset: 0x80
    bool supportRotationAfterBake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: supportRotationAfterBake and: tform
    char __padding16[0x7] = {};
    // private UnityEngine.Transform tform
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Transform* tform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public BakeryVolume globalVolume
    static ::GlobalNamespace::BakeryVolume* _get_globalVolume();
    // Set static field: static public BakeryVolume globalVolume
    static void _set_globalVolume(::GlobalNamespace::BakeryVolume* value);
    // Get instance field reference: public System.Boolean enableBaking
    [[deprecated("Use field access instead!")]] bool& dyn_enableBaking();
    // Get instance field reference: public UnityEngine.Bounds bounds
    [[deprecated("Use field access instead!")]] ::UnityEngine::Bounds& dyn_bounds();
    // Get instance field reference: public System.Boolean adaptiveRes
    [[deprecated("Use field access instead!")]] bool& dyn_adaptiveRes();
    // Get instance field reference: public System.Single voxelsPerUnit
    [[deprecated("Use field access instead!")]] float& dyn_voxelsPerUnit();
    // Get instance field reference: public System.Int32 resolutionX
    [[deprecated("Use field access instead!")]] int& dyn_resolutionX();
    // Get instance field reference: public System.Int32 resolutionY
    [[deprecated("Use field access instead!")]] int& dyn_resolutionY();
    // Get instance field reference: public System.Int32 resolutionZ
    [[deprecated("Use field access instead!")]] int& dyn_resolutionZ();
    // Get instance field reference: public BakeryVolume/Encoding encoding
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryVolume::Encoding& dyn_encoding();
    // Get instance field reference: public BakeryVolume/ShadowmaskEncoding shadowmaskEncoding
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakeryVolume::ShadowmaskEncoding& dyn_shadowmaskEncoding();
    // Get instance field reference: public System.Boolean denoise
    [[deprecated("Use field access instead!")]] bool& dyn_denoise();
    // Get instance field reference: public System.Boolean isGlobal
    [[deprecated("Use field access instead!")]] bool& dyn_isGlobal();
    // Get instance field reference: public UnityEngine.Texture3D bakedTexture0
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& dyn_bakedTexture0();
    // Get instance field reference: public UnityEngine.Texture3D bakedTexture1
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& dyn_bakedTexture1();
    // Get instance field reference: public UnityEngine.Texture3D bakedTexture2
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& dyn_bakedTexture2();
    // Get instance field reference: public UnityEngine.Texture3D bakedTexture3
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& dyn_bakedTexture3();
    // Get instance field reference: public UnityEngine.Texture3D bakedMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::Texture3D*& dyn_bakedMask();
    // Get instance field reference: public System.Boolean supportRotationAfterBake
    [[deprecated("Use field access instead!")]] bool& dyn_supportRotationAfterBake();
    // Get instance field reference: private UnityEngine.Transform tform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_tform();
    // public System.Void .ctor()
    // Offset: 0x1BD6440
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BakeryVolume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BakeryVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BakeryVolume*, creationType>()));
    }
    // public UnityEngine.Vector3 GetMin()
    // Offset: 0x1BD5EBC
    ::UnityEngine::Vector3 GetMin();
    // public UnityEngine.Vector3 GetInvSize()
    // Offset: 0x1BD5EC8
    ::UnityEngine::Vector3 GetInvSize();
    // public UnityEngine.Matrix4x4 GetMatrix()
    // Offset: 0x1BD5F50
    ::UnityEngine::Matrix4x4 GetMatrix();
    // public System.Void SetGlobalParams()
    // Offset: 0x1BD60FC
    void SetGlobalParams();
    // public System.Void UpdateBounds()
    // Offset: 0x1BD6334
    void UpdateBounds();
    // public System.Void OnEnable()
    // Offset: 0x1BD63D4
    void OnEnable();
  }; // BakeryVolume
  #pragma pack(pop)
  static check_size<sizeof(BakeryVolume), 136 + sizeof(::UnityEngine::Transform*)> __GlobalNamespace_BakeryVolumeSizeCheck;
  static_assert(sizeof(BakeryVolume) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryVolume::ShadowmaskEncoding, "", "BakeryVolume/ShadowmaskEncoding");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BakeryVolume::Encoding, "", "BakeryVolume/Encoding");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::GetMin
// Il2CppName: GetMin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BakeryVolume::*)()>(&GlobalNamespace::BakeryVolume::GetMin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryVolume*), "GetMin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::GetInvSize
// Il2CppName: GetInvSize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BakeryVolume::*)()>(&GlobalNamespace::BakeryVolume::GetInvSize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryVolume*), "GetInvSize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::GetMatrix
// Il2CppName: GetMatrix
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Matrix4x4 (GlobalNamespace::BakeryVolume::*)()>(&GlobalNamespace::BakeryVolume::GetMatrix)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryVolume*), "GetMatrix", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::SetGlobalParams
// Il2CppName: SetGlobalParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BakeryVolume::*)()>(&GlobalNamespace::BakeryVolume::SetGlobalParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryVolume*), "SetGlobalParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::UpdateBounds
// Il2CppName: UpdateBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BakeryVolume::*)()>(&GlobalNamespace::BakeryVolume::UpdateBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryVolume*), "UpdateBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BakeryVolume::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BakeryVolume::*)()>(&GlobalNamespace::BakeryVolume::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BakeryVolume*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
