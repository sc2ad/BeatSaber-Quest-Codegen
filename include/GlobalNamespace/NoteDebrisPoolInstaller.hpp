// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.ScriptableObjectInstaller
#include "Zenject/ScriptableObjectInstaller.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteDebris
  class NoteDebris;
  // Forward declaring type: BoolSO
  class BoolSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteDebrisPoolInstaller
  class NoteDebrisPoolInstaller;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteDebrisPoolInstaller);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteDebrisPoolInstaller*, "", "NoteDebrisPoolInstaller");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: NoteDebrisPoolInstaller
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteDebrisPoolInstaller : public ::Zenject::ScriptableObjectInstaller {
    public:
    public:
    // private NoteDebris _normalNoteDebrisHDPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::NoteDebris* normalNoteDebrisHDPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteDebris*) == 0x8);
    // private NoteDebris _normalNoteDebrisLWPrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::NoteDebris* normalNoteDebrisLWPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteDebris*) == 0x8);
    // private NoteDebris _burstSliderHeadNoteDebrisHDPrefab
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::NoteDebris* burstSliderHeadNoteDebrisHDPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteDebris*) == 0x8);
    // private NoteDebris _burstSliderHeadNoteDebrisLWPrefab
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::NoteDebris* burstSliderHeadNoteDebrisLWPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteDebris*) == 0x8);
    // private NoteDebris _burstSliderElementNoteHDPrefab
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::NoteDebris* burstSliderElementNoteHDPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteDebris*) == 0x8);
    // private NoteDebris _burstSliderElementNoteLWPrefab
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::NoteDebris* burstSliderElementNoteLWPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteDebris*) == 0x8);
    // private BoolSO _noteDebrisHDConditionVariable
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::BoolSO* noteDebrisHDConditionVariable;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BoolSO*) == 0x8);
    public:
    // Get instance field reference: private NoteDebris _normalNoteDebrisHDPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris*& dyn__normalNoteDebrisHDPrefab();
    // Get instance field reference: private NoteDebris _normalNoteDebrisLWPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris*& dyn__normalNoteDebrisLWPrefab();
    // Get instance field reference: private NoteDebris _burstSliderHeadNoteDebrisHDPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris*& dyn__burstSliderHeadNoteDebrisHDPrefab();
    // Get instance field reference: private NoteDebris _burstSliderHeadNoteDebrisLWPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris*& dyn__burstSliderHeadNoteDebrisLWPrefab();
    // Get instance field reference: private NoteDebris _burstSliderElementNoteHDPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris*& dyn__burstSliderElementNoteHDPrefab();
    // Get instance field reference: private NoteDebris _burstSliderElementNoteLWPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteDebris*& dyn__burstSliderElementNoteLWPrefab();
    // Get instance field reference: private BoolSO _noteDebrisHDConditionVariable
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BoolSO*& dyn__noteDebrisHDConditionVariable();
    // public System.Void .ctor()
    // Offset: 0x14D18FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteDebrisPoolInstaller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteDebrisPoolInstaller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteDebrisPoolInstaller*, creationType>()));
    }
    // public override System.Void InstallBindings()
    // Offset: 0x14D16E8
    // Implemented from: Zenject.ScriptableObjectInstallerBase
    // Base method: System.Void ScriptableObjectInstallerBase::InstallBindings()
    void InstallBindings();
  }; // NoteDebrisPoolInstaller
  #pragma pack(pop)
  static check_size<sizeof(NoteDebrisPoolInstaller), 80 + sizeof(::GlobalNamespace::BoolSO*)> __GlobalNamespace_NoteDebrisPoolInstallerSizeCheck;
  static_assert(sizeof(NoteDebrisPoolInstaller) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteDebrisPoolInstaller::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::NoteDebrisPoolInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteDebrisPoolInstaller::*)()>(&GlobalNamespace::NoteDebrisPoolInstaller::InstallBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteDebrisPoolInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
