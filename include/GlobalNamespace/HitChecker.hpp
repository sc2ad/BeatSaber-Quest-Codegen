// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LayerMask
  struct LayerMask;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaTriggerColliderHandIndicator
  class GorillaTriggerColliderHandIndicator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HitChecker
  class HitChecker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HitChecker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HitChecker*, "", "HitChecker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: HitChecker
  // [TokenAttribute] Offset: FFFFFFFF
  class HitChecker : public ::UnityEngine::MonoBehaviour {
    public:
    // public System.Void .ctor()
    // Offset: 0xE8B684
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HitChecker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HitChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HitChecker*, creationType>()));
    }
    // static public System.Void CheckHandHit(ref System.Int32 collidersHitCount, UnityEngine.LayerMask layerMask, System.Single sphereRadius, ref UnityEngine.RaycastHit nullHit, ref UnityEngine.RaycastHit[] raycastHits, ref System.Collections.Generic.List`1<UnityEngine.RaycastHit> raycastHitList, ref UnityEngine.Vector3 spherecastSweep, ref GorillaTriggerColliderHandIndicator handIndicator)
    // Offset: 0xE8B188
    static void CheckHandHit(ByRef<int> collidersHitCount, ::UnityEngine::LayerMask layerMask, float sphereRadius, ByRef<::UnityEngine::RaycastHit> nullHit, ByRef<::ArrayW<::UnityEngine::RaycastHit>> raycastHits, ByRef<::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*> raycastHitList, ByRef<::UnityEngine::Vector3> spherecastSweep, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*> handIndicator);
    // static public System.Boolean CheckHandIn(ref System.Boolean anyHit, ref UnityEngine.Collider[] colliderHit, System.Single sphereRadius, System.Int32 layerMask, ref GorillaTriggerColliderHandIndicator handIndicator, ref System.Collections.Generic.List`1<UnityEngine.Collider> collidersToBeIn)
    // Offset: 0xE8B4D8
    static bool CheckHandIn(ByRef<bool> anyHit, ByRef<::ArrayW<::UnityEngine::Collider*>> colliderHit, float sphereRadius, int layerMask, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*> handIndicator, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Collider*>*> collidersToBeIn);
    // static public System.Int32 RayCastHitCompare(UnityEngine.RaycastHit a, UnityEngine.RaycastHit b)
    // Offset: 0xE8B610
    static int RayCastHitCompare(::UnityEngine::RaycastHit a, ::UnityEngine::RaycastHit b);
  }; // HitChecker
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HitChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HitChecker::CheckHandHit
// Il2CppName: CheckHandHit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int>, ::UnityEngine::LayerMask, float, ByRef<::UnityEngine::RaycastHit>, ByRef<::ArrayW<::UnityEngine::RaycastHit>>, ByRef<::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*>, ByRef<::UnityEngine::Vector3>, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*>)>(&GlobalNamespace::HitChecker::CheckHandHit)> {
  static const MethodInfo* get() {
    static auto* collidersHitCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* sphereRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* nullHit = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    static auto* raycastHits = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit"), 1)->this_arg;
    static auto* raycastHitList = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")})->this_arg;
    static auto* spherecastSweep = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->this_arg;
    static auto* handIndicator = &::il2cpp_utils::GetClassFromName("", "GorillaTriggerColliderHandIndicator")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitChecker*), "CheckHandHit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collidersHitCount, layerMask, sphereRadius, nullHit, raycastHits, raycastHitList, spherecastSweep, handIndicator});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitChecker::CheckHandIn
// Il2CppName: CheckHandIn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<bool>, ByRef<::ArrayW<::UnityEngine::Collider*>>, float, int, ByRef<::GlobalNamespace::GorillaTriggerColliderHandIndicator*>, ByRef<::System::Collections::Generic::List_1<::UnityEngine::Collider*>*>)>(&GlobalNamespace::HitChecker::CheckHandIn)> {
  static const MethodInfo* get() {
    static auto* anyHit = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* colliderHit = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "Collider"), 1)->this_arg;
    static auto* sphereRadius = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* layerMask = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* handIndicator = &::il2cpp_utils::GetClassFromName("", "GorillaTriggerColliderHandIndicator")->this_arg;
    static auto* collidersToBeIn = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitChecker*), "CheckHandIn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{anyHit, colliderHit, sphereRadius, layerMask, handIndicator, collidersToBeIn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HitChecker::RayCastHitCompare
// Il2CppName: RayCastHitCompare
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(::UnityEngine::RaycastHit, ::UnityEngine::RaycastHit)>(&GlobalNamespace::HitChecker::RayCastHitCompare)> {
  static const MethodInfo* get() {
    static auto* a = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* b = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HitChecker*), "RayCastHitCompare", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{a, b});
  }
};
