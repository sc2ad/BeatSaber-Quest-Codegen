// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IReadonlyBeatmapData
#include "GlobalNamespace/IReadonlyBeatmapData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: BeatmapDataItem
  class BeatmapDataItem;
  // Forward declaring type: ISortedList`1<T>
  template<typename T>
  class ISortedList_1;
  // Forward declaring type: BeatmapDataSortedListForTypeAndIds`1<TBase>
  template<typename TBase>
  class BeatmapDataSortedListForTypeAndIds_1;
  // Forward declaring type: BeatmapObjectsInTimeRowProcessor
  class BeatmapObjectsInTimeRowProcessor;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: LinkedList`1<T>
  template<typename T>
  class LinkedList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapData
  class BeatmapData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapData*, "", "BeatmapData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6D
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapData : public ::Il2CppObject/*, public ::GlobalNamespace::IReadonlyBeatmapData*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapData::BeatmapDataBinaryHeapItem
    class BeatmapDataBinaryHeapItem;
    // Nested type: ::GlobalNamespace::BeatmapData::$$c__DisplayClass45_0_1<T>
    template<typename T>
    class $$c__DisplayClass45_0_1;
    public:
    // private System.Boolean <updateAllBeatmapDataOnInsert>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool updateAllBeatmapDataOnInsert;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: updateAllBeatmapDataOnInsert and: cuttableNotesCount
    char __padding0[0x3] = {};
    // private System.Int32 <cuttableNotesCount>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int cuttableNotesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <obstaclesCount>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int obstaclesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 <bombsCount>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int bombsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> beatmapEventDataWasInsertedEvent
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* beatmapEventDataWasInsertedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*) == 0x8);
    // private System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> beatmapEventDataWillBeRemovedEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* beatmapEventDataWillBeRemovedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*) == 0x8);
    // private System.Action`1<BeatmapEventData> beatmapEventDataWasRemovedEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::GlobalNamespace::BeatmapEventData*>* beatmapEventDataWasRemovedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::BeatmapEventData*>*) == 0x8);
    // private readonly ISortedList`1<BeatmapDataItem> _allBeatmapData
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::ISortedList_1<::GlobalNamespace::BeatmapDataItem*>* allBeatmapData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ISortedList_1<::GlobalNamespace::BeatmapDataItem*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<BeatmapDataItem,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> _allBeatmapDataItemToNodeMap
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BeatmapDataItem*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* allBeatmapDataItemToNodeMap;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BeatmapDataItem*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*) == 0x8);
    // private readonly BeatmapDataSortedListForTypeAndIds`1<BeatmapDataItem> _beatmapDataItemsPerTypeAndId
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::BeatmapDataSortedListForTypeAndIds_1<::GlobalNamespace::BeatmapDataItem*>* beatmapDataItemsPerTypeAndId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataSortedListForTypeAndIds_1<::GlobalNamespace::BeatmapDataItem*>*) == 0x8);
    // private readonly System.Int32 _numberOfLines
    // Size: 0x4
    // Offset: 0x50
    int numberOfLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: numberOfLines and: specialBasicBeatmapEventKeywords
    char __padding10[0x4] = {};
    // private readonly System.Collections.Generic.HashSet`1<System.String> _specialBasicBeatmapEventKeywords
    // Size: 0x8
    // Offset: 0x58
    ::System::Collections::Generic::HashSet_1<::StringW>* specialBasicBeatmapEventKeywords;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private readonly BeatmapObjectsInTimeRowProcessor _beatmapObjectsInTimeRowProcessor
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::BeatmapObjectsInTimeRowProcessor* beatmapObjectsInTimeRowProcessor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectsInTimeRowProcessor*) == 0x8);
    // private System.Single _prevAddedBeatmapObjectDataTime
    // Size: 0x4
    // Offset: 0x68
    float prevAddedBeatmapObjectDataTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isCreatingFilteredCopy
    // Size: 0x1
    // Offset: 0x6C
    bool isCreatingFilteredCopy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IReadonlyBeatmapData
    operator ::GlobalNamespace::IReadonlyBeatmapData() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IReadonlyBeatmapData*>(this);
    }
    // Creating interface conversion operator: i_IReadonlyBeatmapData
    inline ::GlobalNamespace::IReadonlyBeatmapData* i_IReadonlyBeatmapData() noexcept {
      return reinterpret_cast<::GlobalNamespace::IReadonlyBeatmapData*>(this);
    }
    // Get instance field reference: private System.Boolean <updateAllBeatmapDataOnInsert>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$updateAllBeatmapDataOnInsert$k__BackingField();
    // Get instance field reference: private System.Int32 <cuttableNotesCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$cuttableNotesCount$k__BackingField();
    // Get instance field reference: private System.Int32 <obstaclesCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$obstaclesCount$k__BackingField();
    // Get instance field reference: private System.Int32 <bombsCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$bombsCount$k__BackingField();
    // Get instance field reference: private System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> beatmapEventDataWasInsertedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*& dyn_beatmapEventDataWasInsertedEvent();
    // Get instance field reference: private System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> beatmapEventDataWillBeRemovedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*& dyn_beatmapEventDataWillBeRemovedEvent();
    // Get instance field reference: private System.Action`1<BeatmapEventData> beatmapEventDataWasRemovedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::BeatmapEventData*>*& dyn_beatmapEventDataWasRemovedEvent();
    // Get instance field reference: private readonly ISortedList`1<BeatmapDataItem> _allBeatmapData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ISortedList_1<::GlobalNamespace::BeatmapDataItem*>*& dyn__allBeatmapData();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<BeatmapDataItem,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> _allBeatmapDataItemToNodeMap
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::GlobalNamespace::BeatmapDataItem*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*& dyn__allBeatmapDataItemToNodeMap();
    // Get instance field reference: private readonly BeatmapDataSortedListForTypeAndIds`1<BeatmapDataItem> _beatmapDataItemsPerTypeAndId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataSortedListForTypeAndIds_1<::GlobalNamespace::BeatmapDataItem*>*& dyn__beatmapDataItemsPerTypeAndId();
    // Get instance field reference: private readonly System.Int32 _numberOfLines
    [[deprecated("Use field access instead!")]] int& dyn__numberOfLines();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _specialBasicBeatmapEventKeywords
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__specialBasicBeatmapEventKeywords();
    // Get instance field reference: private readonly BeatmapObjectsInTimeRowProcessor _beatmapObjectsInTimeRowProcessor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectsInTimeRowProcessor*& dyn__beatmapObjectsInTimeRowProcessor();
    // Get instance field reference: private System.Single _prevAddedBeatmapObjectDataTime
    [[deprecated("Use field access instead!")]] float& dyn__prevAddedBeatmapObjectDataTime();
    // Get instance field reference: private System.Boolean _isCreatingFilteredCopy
    [[deprecated("Use field access instead!")]] bool& dyn__isCreatingFilteredCopy();
    // public System.Boolean get_updateAllBeatmapDataOnInsert()
    // Offset: 0x13C6FF8
    bool get_updateAllBeatmapDataOnInsert();
    // public System.Void set_updateAllBeatmapDataOnInsert(System.Boolean value)
    // Offset: 0x13C7000
    void set_updateAllBeatmapDataOnInsert(bool value);
    // public System.Collections.Generic.LinkedList`1<BeatmapDataItem> get_allBeatmapDataItems()
    // Offset: 0x13C700C
    ::System::Collections::Generic::LinkedList_1<::GlobalNamespace::BeatmapDataItem*>* get_allBeatmapDataItems();
    // public System.Int32 get_numberOfLines()
    // Offset: 0x13C70BC
    int get_numberOfLines();
    // public System.Int32 get_cuttableNotesCount()
    // Offset: 0x13C70C4
    int get_cuttableNotesCount();
    // private System.Void set_cuttableNotesCount(System.Int32 value)
    // Offset: 0x13C70CC
    void set_cuttableNotesCount(int value);
    // public System.Int32 get_obstaclesCount()
    // Offset: 0x13C70D4
    int get_obstaclesCount();
    // private System.Void set_obstaclesCount(System.Int32 value)
    // Offset: 0x13C70DC
    void set_obstaclesCount(int value);
    // public System.Int32 get_bombsCount()
    // Offset: 0x13C70E4
    int get_bombsCount();
    // private System.Void set_bombsCount(System.Int32 value)
    // Offset: 0x13C70EC
    void set_bombsCount(int value);
    // public System.Int32 get_spawnRotationEventsCount()
    // Offset: 0x13C70F4
    int get_spawnRotationEventsCount();
    // public System.Collections.Generic.IEnumerable`1<System.String> get_specialBasicBeatmapEventKeywords()
    // Offset: 0x13C7148
    ::System::Collections::Generic::IEnumerable_1<::StringW>* get_specialBasicBeatmapEventKeywords();
    // public System.Void add_beatmapEventDataWasInsertedEvent(System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> value)
    // Offset: 0x13C7150
    void add_beatmapEventDataWasInsertedEvent(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* value);
    // public System.Void remove_beatmapEventDataWasInsertedEvent(System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> value)
    // Offset: 0x13C71F4
    void remove_beatmapEventDataWasInsertedEvent(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* value);
    // public System.Void add_beatmapEventDataWillBeRemovedEvent(System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> value)
    // Offset: 0x13C7298
    void add_beatmapEventDataWillBeRemovedEvent(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* value);
    // public System.Void remove_beatmapEventDataWillBeRemovedEvent(System.Action`2<BeatmapEventData,System.Collections.Generic.LinkedListNode`1<BeatmapDataItem>> value)
    // Offset: 0x13C733C
    void remove_beatmapEventDataWillBeRemovedEvent(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>* value);
    // public System.Void add_beatmapEventDataWasRemovedEvent(System.Action`1<BeatmapEventData> value)
    // Offset: 0x13C73E0
    void add_beatmapEventDataWasRemovedEvent(::System::Action_1<::GlobalNamespace::BeatmapEventData*>* value);
    // public System.Void remove_beatmapEventDataWasRemovedEvent(System.Action`1<BeatmapEventData> value)
    // Offset: 0x13C7484
    void remove_beatmapEventDataWasRemovedEvent(::System::Action_1<::GlobalNamespace::BeatmapEventData*>* value);
    // public System.Void .ctor(System.Int32 numberOfLines)
    // Offset: 0x13C7528
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapData* New_ctor(int numberOfLines) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapData*, creationType>(numberOfLines)));
    }
    // public System.Collections.Generic.IEnumerable`1<T> GetBeatmapDataItems(System.Int32 subtypeGroupIdentifier)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Collections::Generic::IEnumerable_1<T>* GetBeatmapDataItems(int subtypeGroupIdentifier) {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::BeatmapDataItem*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapData::GetBeatmapDataItems");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataItems", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subtypeGroupIdentifier)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(this, ___generic__method, subtypeGroupIdentifier);
    }
    // public System.Int32 GetBeatmapDataItemsCount(System.Int32 subtypeGroupIdentifier)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    int GetBeatmapDataItemsCount(int subtypeGroupIdentifier) {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::BeatmapDataItem*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapData::GetBeatmapDataItemsCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataItemsCount", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subtypeGroupIdentifier)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, subtypeGroupIdentifier);
    }
    // public System.Collections.Generic.IEnumerable`1<T> GetBeatmapDataItemsMerged(params System.Int32[] subtypeGroupIdentifiers)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    ::System::Collections::Generic::IEnumerable_1<T>* GetBeatmapDataItemsMerged(::ArrayW<int> subtypeGroupIdentifiers) {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::BeatmapDataItem*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapData::GetBeatmapDataItemsMerged");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataItemsMerged", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subtypeGroupIdentifiers)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<::System::Collections::Generic::IEnumerable_1<T>*, false>(this, ___generic__method, subtypeGroupIdentifiers);
    }
    // public System.Int32 GetBeatmapDataItemsMergedCount(params System.Int32[] subtypeGroupIdentifiers)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<class T>
    int GetBeatmapDataItemsMergedCount(::ArrayW<int> subtypeGroupIdentifiers) {
      static_assert(std::is_convertible_v<T, ::GlobalNamespace::BeatmapDataItem*>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapData::GetBeatmapDataItemsMergedCount");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetBeatmapDataItemsMergedCount", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(subtypeGroupIdentifiers)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___generic__method, subtypeGroupIdentifiers);
    }
    // public System.Void AddBeatmapObjectData(BeatmapObjectData beatmapObjectData)
    // Offset: 0x13C764C
    void AddBeatmapObjectData(::GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // public System.Void AddBeatmapObjectDataInOrder(BeatmapObjectData beatmapObjectData)
    // Offset: 0x13C799C
    void AddBeatmapObjectDataInOrder(::GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // public System.Void InsertBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x13C79CC
    void InsertBeatmapEventData(::GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void InsertBeatmapEventDataInOrder(BeatmapEventData beatmapEventData)
    // Offset: 0x13C7A80
    void InsertBeatmapEventDataInOrder(::GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void RemoveBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x13C7B18
    void RemoveBeatmapEventData(::GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void AddSpecialBasicBeatmapEventKeyword(System.String specialBasicBeatmapEventKeyword)
    // Offset: 0x13C7C68
    void AddSpecialBasicBeatmapEventKeyword(::StringW specialBasicBeatmapEventKeyword);
    // public System.Void ProcessRemainingData()
    // Offset: 0x13C7CD0
    void ProcessRemainingData();
    // public System.Void ProcessAndSortBeatmapData()
    // Offset: 0x13C7CEC
    void ProcessAndSortBeatmapData();
    // public BeatmapData GetCopy()
    // Offset: 0x13C8014
    ::GlobalNamespace::BeatmapData* GetCopy();
    // public BeatmapData GetFilteredCopy(System.Func`2<BeatmapDataItem,BeatmapDataItem> processDataItem)
    // Offset: 0x13C8214
    ::GlobalNamespace::BeatmapData* GetFilteredCopy(::System::Func_2<::GlobalNamespace::BeatmapDataItem*, ::GlobalNamespace::BeatmapDataItem*>* processDataItem);
    // private System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> InsertToAllBeatmapData(BeatmapDataItem beatmapDataItem, System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> node)
    // Offset: 0x13C77D8
    ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>* InsertToAllBeatmapData(::GlobalNamespace::BeatmapDataItem* beatmapDataItem, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>* node);
  }; // BeatmapData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapData), 108 + sizeof(bool)> __GlobalNamespace_BeatmapDataSizeCheck;
  static_assert(sizeof(BeatmapData) == 0x6D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_updateAllBeatmapDataOnInsert
// Il2CppName: get_updateAllBeatmapDataOnInsert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_updateAllBeatmapDataOnInsert)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_updateAllBeatmapDataOnInsert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::set_updateAllBeatmapDataOnInsert
// Il2CppName: set_updateAllBeatmapDataOnInsert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(bool)>(&GlobalNamespace::BeatmapData::set_updateAllBeatmapDataOnInsert)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "set_updateAllBeatmapDataOnInsert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_allBeatmapDataItems
// Il2CppName: get_allBeatmapDataItems
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedList_1<::GlobalNamespace::BeatmapDataItem*>* (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_allBeatmapDataItems)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_allBeatmapDataItems", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_numberOfLines
// Il2CppName: get_numberOfLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_numberOfLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_numberOfLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_cuttableNotesCount
// Il2CppName: get_cuttableNotesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_cuttableNotesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_cuttableNotesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::set_cuttableNotesCount
// Il2CppName: set_cuttableNotesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(int)>(&GlobalNamespace::BeatmapData::set_cuttableNotesCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "set_cuttableNotesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_obstaclesCount
// Il2CppName: get_obstaclesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_obstaclesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_obstaclesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::set_obstaclesCount
// Il2CppName: set_obstaclesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(int)>(&GlobalNamespace::BeatmapData::set_obstaclesCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "set_obstaclesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_bombsCount
// Il2CppName: get_bombsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_bombsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_bombsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::set_bombsCount
// Il2CppName: set_bombsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(int)>(&GlobalNamespace::BeatmapData::set_bombsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "set_bombsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_spawnRotationEventsCount
// Il2CppName: get_spawnRotationEventsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_spawnRotationEventsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_spawnRotationEventsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::get_specialBasicBeatmapEventKeywords
// Il2CppName: get_specialBasicBeatmapEventKeywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::get_specialBasicBeatmapEventKeywords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "get_specialBasicBeatmapEventKeywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::add_beatmapEventDataWasInsertedEvent
// Il2CppName: add_beatmapEventDataWasInsertedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*)>(&GlobalNamespace::BeatmapData::add_beatmapEventDataWasInsertedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "add_beatmapEventDataWasInsertedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::remove_beatmapEventDataWasInsertedEvent
// Il2CppName: remove_beatmapEventDataWasInsertedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*)>(&GlobalNamespace::BeatmapData::remove_beatmapEventDataWasInsertedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "remove_beatmapEventDataWasInsertedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::add_beatmapEventDataWillBeRemovedEvent
// Il2CppName: add_beatmapEventDataWillBeRemovedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*)>(&GlobalNamespace::BeatmapData::add_beatmapEventDataWillBeRemovedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "add_beatmapEventDataWillBeRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::remove_beatmapEventDataWillBeRemovedEvent
// Il2CppName: remove_beatmapEventDataWillBeRemovedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::System::Action_2<::GlobalNamespace::BeatmapEventData*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*>*)>(&GlobalNamespace::BeatmapData::remove_beatmapEventDataWillBeRemovedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "remove_beatmapEventDataWillBeRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::add_beatmapEventDataWasRemovedEvent
// Il2CppName: add_beatmapEventDataWasRemovedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::System::Action_1<::GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::BeatmapData::add_beatmapEventDataWasRemovedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "add_beatmapEventDataWasRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::remove_beatmapEventDataWasRemovedEvent
// Il2CppName: remove_beatmapEventDataWasRemovedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::System::Action_1<::GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::BeatmapData::remove_beatmapEventDataWasRemovedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "remove_beatmapEventDataWasRemovedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::GetBeatmapDataItems
// Il2CppName: GetBeatmapDataItems
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::GetBeatmapDataItemsCount
// Il2CppName: GetBeatmapDataItemsCount
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::GetBeatmapDataItemsMerged
// Il2CppName: GetBeatmapDataItemsMerged
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::GetBeatmapDataItemsMergedCount
// Il2CppName: GetBeatmapDataItemsMergedCount
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::AddBeatmapObjectData
// Il2CppName: AddBeatmapObjectData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::BeatmapData::AddBeatmapObjectData)> {
  static const MethodInfo* get() {
    static auto* beatmapObjectData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "AddBeatmapObjectData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapObjectData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::AddBeatmapObjectDataInOrder
// Il2CppName: AddBeatmapObjectDataInOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::GlobalNamespace::BeatmapObjectData*)>(&GlobalNamespace::BeatmapData::AddBeatmapObjectDataInOrder)> {
  static const MethodInfo* get() {
    static auto* beatmapObjectData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "AddBeatmapObjectDataInOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapObjectData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::InsertBeatmapEventData
// Il2CppName: InsertBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapData::InsertBeatmapEventData)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "InsertBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::InsertBeatmapEventDataInOrder
// Il2CppName: InsertBeatmapEventDataInOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapData::InsertBeatmapEventDataInOrder)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "InsertBeatmapEventDataInOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::RemoveBeatmapEventData
// Il2CppName: RemoveBeatmapEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapData::RemoveBeatmapEventData)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "RemoveBeatmapEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::AddSpecialBasicBeatmapEventKeyword
// Il2CppName: AddSpecialBasicBeatmapEventKeyword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)(::StringW)>(&GlobalNamespace::BeatmapData::AddSpecialBasicBeatmapEventKeyword)> {
  static const MethodInfo* get() {
    static auto* specialBasicBeatmapEventKeyword = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "AddSpecialBasicBeatmapEventKeyword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{specialBasicBeatmapEventKeyword});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::ProcessRemainingData
// Il2CppName: ProcessRemainingData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::ProcessRemainingData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "ProcessRemainingData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::ProcessAndSortBeatmapData
// Il2CppName: ProcessAndSortBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::ProcessAndSortBeatmapData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "ProcessAndSortBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::GetCopy
// Il2CppName: GetCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapData* (GlobalNamespace::BeatmapData::*)()>(&GlobalNamespace::BeatmapData::GetCopy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "GetCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::GetFilteredCopy
// Il2CppName: GetFilteredCopy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapData* (GlobalNamespace::BeatmapData::*)(::System::Func_2<::GlobalNamespace::BeatmapDataItem*, ::GlobalNamespace::BeatmapDataItem*>*)>(&GlobalNamespace::BeatmapData::GetFilteredCopy)> {
  static const MethodInfo* get() {
    static auto* processDataItem = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapDataItem"), ::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "GetFilteredCopy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{processDataItem});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapData::InsertToAllBeatmapData
// Il2CppName: InsertToAllBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>* (GlobalNamespace::BeatmapData::*)(::GlobalNamespace::BeatmapDataItem*, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*)>(&GlobalNamespace::BeatmapData::InsertToAllBeatmapData)> {
  static const MethodInfo* get() {
    static auto* beatmapDataItem = &::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")->byval_arg;
    static auto* node = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapData*), "InsertToAllBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapDataItem, node});
  }
};
