// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Voice::Unity
namespace Photon::Voice::Unity {
  // Forward declaring type: Recorder
  class Recorder;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
  // Skipping declaration: StatusEffect because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SphereCollider
  class SphereCollider;
  // Forward declaring type: CapsuleCollider
  class CapsuleCollider;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonView
  class PhotonView;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaTagger
  class GorillaTagger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaTagger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTagger*, "", "GorillaTagger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x220
  #pragma pack(push, 1)
  // Autogenerated type: GorillaTagger
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaTagger : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaTagger::StatusEffect
    struct StatusEffect;
    // Nested type: ::GlobalNamespace::GorillaTagger::$HapticPulses$d__80
    class $HapticPulses$d__80;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaTagger/StatusEffect
    // [TokenAttribute] Offset: FFFFFFFF
    struct StatusEffect/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: StatusEffect
      constexpr StatusEffect(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaTagger/StatusEffect None
      static constexpr const int None = 0;
      // Get static field: static public GorillaTagger/StatusEffect None
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_None();
      // Set static field: static public GorillaTagger/StatusEffect None
      static void _set_None(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Frozen
      static constexpr const int Frozen = 1;
      // Get static field: static public GorillaTagger/StatusEffect Frozen
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Frozen();
      // Set static field: static public GorillaTagger/StatusEffect Frozen
      static void _set_Frozen(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Slowed
      static constexpr const int Slowed = 2;
      // Get static field: static public GorillaTagger/StatusEffect Slowed
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Slowed();
      // Set static field: static public GorillaTagger/StatusEffect Slowed
      static void _set_Slowed(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Dead
      static constexpr const int Dead = 3;
      // Get static field: static public GorillaTagger/StatusEffect Dead
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Dead();
      // Set static field: static public GorillaTagger/StatusEffect Dead
      static void _set_Dead(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect Infected
      static constexpr const int Infected = 4;
      // Get static field: static public GorillaTagger/StatusEffect Infected
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_Infected();
      // Set static field: static public GorillaTagger/StatusEffect Infected
      static void _set_Infected(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // static field const value: static public GorillaTagger/StatusEffect It
      static constexpr const int It = 5;
      // Get static field: static public GorillaTagger/StatusEffect It
      static ::GlobalNamespace::GorillaTagger::StatusEffect _get_It();
      // Set static field: static public GorillaTagger/StatusEffect It
      static void _set_It(::GlobalNamespace::GorillaTagger::StatusEffect value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaTagger/StatusEffect
    #pragma pack(pop)
    static check_size<sizeof(GorillaTagger::StatusEffect), 0 + sizeof(int)> __GlobalNamespace_GorillaTagger_StatusEffectSizeCheck;
    static_assert(sizeof(GorillaTagger::StatusEffect) == 0x4);
    public:
    // private System.Single _sphereCastRadius
    // Size: 0x4
    // Offset: 0x18
    float sphereCastRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean inCosmeticsRoom
    // Size: 0x1
    // Offset: 0x1C
    bool inCosmeticsRoom;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inCosmeticsRoom and: headCollider
    char __padding1[0x3] = {};
    // public UnityEngine.SphereCollider headCollider
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::SphereCollider* headCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::SphereCollider*) == 0x8);
    // public UnityEngine.CapsuleCollider bodyCollider
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::CapsuleCollider* bodyCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::CapsuleCollider*) == 0x8);
    // private UnityEngine.Vector3 lastLeftHandPositionForTag
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 lastLeftHandPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastRightHandPositionForTag
    // Size: 0xC
    // Offset: 0x3C
    ::UnityEngine::Vector3 lastRightHandPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastBodyPositionForTag
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 lastBodyPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastHeadPositionForTag
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 lastHeadPositionForTag;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Transform rightHandTransform
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Transform* rightHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftHandTransform
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Transform* leftHandTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single hapticWaitSeconds
    // Size: 0x4
    // Offset: 0x70
    float hapticWaitSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single handTapVolume
    // Size: 0x4
    // Offset: 0x74
    float handTapVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tapCoolDown
    // Size: 0x4
    // Offset: 0x78
    float tapCoolDown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastLeftTap
    // Size: 0x4
    // Offset: 0x7C
    float lastLeftTap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single lastRightTap
    // Size: 0x4
    // Offset: 0x80
    float lastRightTap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tapHapticDuration
    // Size: 0x4
    // Offset: 0x84
    float tapHapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tapHapticStrength
    // Size: 0x4
    // Offset: 0x88
    float tapHapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagHapticDuration
    // Size: 0x4
    // Offset: 0x8C
    float tagHapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagHapticStrength
    // Size: 0x4
    // Offset: 0x90
    float tagHapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single taggedHapticDuration
    // Size: 0x4
    // Offset: 0x94
    float taggedHapticDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single taggedHapticStrength
    // Size: 0x4
    // Offset: 0x98
    float taggedHapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean leftHandTouching
    // Size: 0x1
    // Offset: 0x9C
    bool leftHandTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean rightHandTouching
    // Size: 0x1
    // Offset: 0x9D
    bool rightHandTouching;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: rightHandTouching and: taggedTime
    char __padding22[0x2] = {};
    // public System.Single taggedTime
    // Size: 0x4
    // Offset: 0xA0
    float taggedTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single tagCooldown
    // Size: 0x4
    // Offset: 0xA4
    float tagCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single slowCooldown
    // Size: 0x4
    // Offset: 0xA8
    float slowCooldown;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: slowCooldown and: myVRRig
    char __padding25[0x4] = {};
    // public VRRig myVRRig
    // Size: 0x8
    // Offset: 0xB0
    ::GlobalNamespace::VRRig* myVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public VRRig offlineVRRig
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::VRRig* offlineVRRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public UnityEngine.GameObject thirdPersonCamera
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::GameObject* thirdPersonCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject mainCamera
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* mainCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean testTutorial
    // Size: 0x1
    // Offset: 0xD0
    bool testTutorial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean disableTutorial
    // Size: 0x1
    // Offset: 0xD1
    bool disableTutorial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean frameRateUpdated
    // Size: 0x1
    // Offset: 0xD2
    bool frameRateUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: frameRateUpdated and: leftHandTriggerCollider
    char __padding32[0x5] = {};
    // public UnityEngine.GameObject leftHandTriggerCollider
    // Size: 0x8
    // Offset: 0xD8
    ::UnityEngine::GameObject* leftHandTriggerCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.GameObject rightHandTriggerCollider
    // Size: 0x8
    // Offset: 0xE0
    ::UnityEngine::GameObject* rightHandTriggerCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public UnityEngine.Camera mirrorCamera
    // Size: 0x8
    // Offset: 0xE8
    ::UnityEngine::Camera* mirrorCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // public UnityEngine.AudioSource leftHandSlideSource
    // Size: 0x8
    // Offset: 0xF0
    ::UnityEngine::AudioSource* leftHandSlideSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource rightHandSlideSource
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::AudioSource* rightHandSlideSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.Vector3 leftRaycastSweep
    // Size: 0xC
    // Offset: 0x100
    ::UnityEngine::Vector3 leftRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 leftHeadRaycastSweep
    // Size: 0xC
    // Offset: 0x10C
    ::UnityEngine::Vector3 leftHeadRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightRaycastSweep
    // Size: 0xC
    // Offset: 0x118
    ::UnityEngine::Vector3 rightRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 rightHeadRaycastSweep
    // Size: 0xC
    // Offset: 0x124
    ::UnityEngine::Vector3 rightHeadRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 headRaycastSweep
    // Size: 0xC
    // Offset: 0x130
    ::UnityEngine::Vector3 headRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bodyRaycastSweep
    // Size: 0xC
    // Offset: 0x13C
    ::UnityEngine::Vector3 bodyRaycastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.XR.InputDevice rightDevice
    // Size: 0x9
    // Offset: 0x148
    ::UnityEngine::XR::InputDevice rightDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: rightDevice and: leftDevice
    char __padding44[0x7] = {};
    // private UnityEngine.XR.InputDevice leftDevice
    // Size: 0x9
    // Offset: 0x158
    ::UnityEngine::XR::InputDevice leftDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: leftDevice and: primaryButtonPressRight
    char __padding45[0x7] = {};
    // private System.Boolean primaryButtonPressRight
    // Size: 0x1
    // Offset: 0x168
    bool primaryButtonPressRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean secondaryButtonPressRight
    // Size: 0x1
    // Offset: 0x169
    bool secondaryButtonPressRight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean primaryButtonPressLeft
    // Size: 0x1
    // Offset: 0x16A
    bool primaryButtonPressLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean secondaryButtonPressLeft
    // Size: 0x1
    // Offset: 0x16B
    bool secondaryButtonPressLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.RaycastHit hitInfo
    // Size: 0x2C
    // Offset: 0x16C
    ::UnityEngine::RaycastHit hitInfo;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // public Photon.Realtime.Player otherPlayer
    // Size: 0x8
    // Offset: 0x198
    ::Photon::Realtime::Player* otherPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private Photon.Realtime.Player tryPlayer
    // Size: 0x8
    // Offset: 0x1A0
    ::Photon::Realtime::Player* tryPlayer;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // private UnityEngine.Vector3 topVector
    // Size: 0xC
    // Offset: 0x1A8
    ::UnityEngine::Vector3 topVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bottomVector
    // Size: 0xC
    // Offset: 0x1B4
    ::UnityEngine::Vector3 bottomVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 bodyVector
    // Size: 0xC
    // Offset: 0x1C0
    ::UnityEngine::Vector3 bodyVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 tempInt
    // Size: 0x4
    // Offset: 0x1CC
    int tempInt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.XR.InputDevice inputDevice
    // Size: 0x9
    // Offset: 0x1D0
    ::UnityEngine::XR::InputDevice inputDevice;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: inputDevice and: wasInOverlay
    char __padding57[0x7] = {};
    // private System.Boolean wasInOverlay
    // Size: 0x1
    // Offset: 0x1E0
    bool wasInOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: wasInOverlay and: tempView
    char __padding58[0x7] = {};
    // private Photon.Pun.PhotonView tempView
    // Size: 0x8
    // Offset: 0x1E8
    ::Photon::Pun::PhotonView* tempView;
    // Field size check
    static_assert(sizeof(::Photon::Pun::PhotonView*) == 0x8);
    // public GorillaTagger/StatusEffect currentStatus
    // Size: 0x4
    // Offset: 0x1F0
    ::GlobalNamespace::GorillaTagger::StatusEffect currentStatus;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTagger::StatusEffect) == 0x4);
    // public System.Single statusStartTime
    // Size: 0x4
    // Offset: 0x1F4
    float statusStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single statusEndTime
    // Size: 0x4
    // Offset: 0x1F8
    float statusEndTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single refreshRate
    // Size: 0x4
    // Offset: 0x1FC
    float refreshRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single baseSlideControl
    // Size: 0x4
    // Offset: 0x200
    float baseSlideControl;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: baseSlideControl and: nonAllocRaycastHits
    char __padding64[0x4] = {};
    // private UnityEngine.RaycastHit[] nonAllocRaycastHits
    // Size: 0x8
    // Offset: 0x208
    ::ArrayW<::UnityEngine::RaycastHit> nonAllocRaycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private System.Int32 nonAllocHits
    // Size: 0x4
    // Offset: 0x210
    int nonAllocHits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: nonAllocHits and: myRecorder
    char __padding66[0x4] = {};
    // private Photon.Voice.Unity.Recorder myRecorder
    // Size: 0x8
    // Offset: 0x218
    ::Photon::Voice::Unity::Recorder* myRecorder;
    // Field size check
    static_assert(sizeof(::Photon::Voice::Unity::Recorder*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static private GorillaTagger _instance
    static ::GlobalNamespace::GorillaTagger* _get__instance();
    // Set static field: static private GorillaTagger _instance
    static void _set__instance(::GlobalNamespace::GorillaTagger* value);
    // Get instance field reference: private System.Single _sphereCastRadius
    [[deprecated("Use field access instead!")]] float& dyn__sphereCastRadius();
    // Get instance field reference: public System.Boolean inCosmeticsRoom
    [[deprecated("Use field access instead!")]] bool& dyn_inCosmeticsRoom();
    // Get instance field reference: public UnityEngine.SphereCollider headCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::SphereCollider*& dyn_headCollider();
    // Get instance field reference: public UnityEngine.CapsuleCollider bodyCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::CapsuleCollider*& dyn_bodyCollider();
    // Get instance field reference: private UnityEngine.Vector3 lastLeftHandPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastLeftHandPositionForTag();
    // Get instance field reference: private UnityEngine.Vector3 lastRightHandPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastRightHandPositionForTag();
    // Get instance field reference: private UnityEngine.Vector3 lastBodyPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastBodyPositionForTag();
    // Get instance field reference: private UnityEngine.Vector3 lastHeadPositionForTag
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastHeadPositionForTag();
    // Get instance field reference: public UnityEngine.Transform rightHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_rightHandTransform();
    // Get instance field reference: public UnityEngine.Transform leftHandTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_leftHandTransform();
    // Get instance field reference: public System.Single hapticWaitSeconds
    [[deprecated("Use field access instead!")]] float& dyn_hapticWaitSeconds();
    // Get instance field reference: public System.Single handTapVolume
    [[deprecated("Use field access instead!")]] float& dyn_handTapVolume();
    // Get instance field reference: public System.Single tapCoolDown
    [[deprecated("Use field access instead!")]] float& dyn_tapCoolDown();
    // Get instance field reference: public System.Single lastLeftTap
    [[deprecated("Use field access instead!")]] float& dyn_lastLeftTap();
    // Get instance field reference: public System.Single lastRightTap
    [[deprecated("Use field access instead!")]] float& dyn_lastRightTap();
    // Get instance field reference: public System.Single tapHapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_tapHapticDuration();
    // Get instance field reference: public System.Single tapHapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_tapHapticStrength();
    // Get instance field reference: public System.Single tagHapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_tagHapticDuration();
    // Get instance field reference: public System.Single tagHapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_tagHapticStrength();
    // Get instance field reference: public System.Single taggedHapticDuration
    [[deprecated("Use field access instead!")]] float& dyn_taggedHapticDuration();
    // Get instance field reference: public System.Single taggedHapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_taggedHapticStrength();
    // Get instance field reference: private System.Boolean leftHandTouching
    [[deprecated("Use field access instead!")]] bool& dyn_leftHandTouching();
    // Get instance field reference: private System.Boolean rightHandTouching
    [[deprecated("Use field access instead!")]] bool& dyn_rightHandTouching();
    // Get instance field reference: public System.Single taggedTime
    [[deprecated("Use field access instead!")]] float& dyn_taggedTime();
    // Get instance field reference: public System.Single tagCooldown
    [[deprecated("Use field access instead!")]] float& dyn_tagCooldown();
    // Get instance field reference: public System.Single slowCooldown
    [[deprecated("Use field access instead!")]] float& dyn_slowCooldown();
    // Get instance field reference: public VRRig myVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myVRRig();
    // Get instance field reference: public VRRig offlineVRRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_offlineVRRig();
    // Get instance field reference: public UnityEngine.GameObject thirdPersonCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_thirdPersonCamera();
    // Get instance field reference: public UnityEngine.GameObject mainCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_mainCamera();
    // Get instance field reference: public System.Boolean testTutorial
    [[deprecated("Use field access instead!")]] bool& dyn_testTutorial();
    // Get instance field reference: public System.Boolean disableTutorial
    [[deprecated("Use field access instead!")]] bool& dyn_disableTutorial();
    // Get instance field reference: public System.Boolean frameRateUpdated
    [[deprecated("Use field access instead!")]] bool& dyn_frameRateUpdated();
    // Get instance field reference: public UnityEngine.GameObject leftHandTriggerCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_leftHandTriggerCollider();
    // Get instance field reference: public UnityEngine.GameObject rightHandTriggerCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_rightHandTriggerCollider();
    // Get instance field reference: public UnityEngine.Camera mirrorCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_mirrorCamera();
    // Get instance field reference: public UnityEngine.AudioSource leftHandSlideSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_leftHandSlideSource();
    // Get instance field reference: public UnityEngine.AudioSource rightHandSlideSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_rightHandSlideSource();
    // Get instance field reference: private UnityEngine.Vector3 leftRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 leftHeadRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_leftHeadRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 rightRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 rightHeadRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_rightHeadRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 headRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_headRaycastSweep();
    // Get instance field reference: private UnityEngine.Vector3 bodyRaycastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyRaycastSweep();
    // Get instance field reference: private UnityEngine.XR.InputDevice rightDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_rightDevice();
    // Get instance field reference: private UnityEngine.XR.InputDevice leftDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_leftDevice();
    // Get instance field reference: private System.Boolean primaryButtonPressRight
    [[deprecated("Use field access instead!")]] bool& dyn_primaryButtonPressRight();
    // Get instance field reference: private System.Boolean secondaryButtonPressRight
    [[deprecated("Use field access instead!")]] bool& dyn_secondaryButtonPressRight();
    // Get instance field reference: private System.Boolean primaryButtonPressLeft
    [[deprecated("Use field access instead!")]] bool& dyn_primaryButtonPressLeft();
    // Get instance field reference: private System.Boolean secondaryButtonPressLeft
    [[deprecated("Use field access instead!")]] bool& dyn_secondaryButtonPressLeft();
    // Get instance field reference: private UnityEngine.RaycastHit hitInfo
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_hitInfo();
    // Get instance field reference: public Photon.Realtime.Player otherPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_otherPlayer();
    // Get instance field reference: private Photon.Realtime.Player tryPlayer
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tryPlayer();
    // Get instance field reference: private UnityEngine.Vector3 topVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_topVector();
    // Get instance field reference: private UnityEngine.Vector3 bottomVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bottomVector();
    // Get instance field reference: private UnityEngine.Vector3 bodyVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_bodyVector();
    // Get instance field reference: private System.Int32 tempInt
    [[deprecated("Use field access instead!")]] int& dyn_tempInt();
    // Get instance field reference: private UnityEngine.XR.InputDevice inputDevice
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_inputDevice();
    // Get instance field reference: private System.Boolean wasInOverlay
    [[deprecated("Use field access instead!")]] bool& dyn_wasInOverlay();
    // Get instance field reference: private Photon.Pun.PhotonView tempView
    [[deprecated("Use field access instead!")]] ::Photon::Pun::PhotonView*& dyn_tempView();
    // Get instance field reference: public GorillaTagger/StatusEffect currentStatus
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTagger::StatusEffect& dyn_currentStatus();
    // Get instance field reference: public System.Single statusStartTime
    [[deprecated("Use field access instead!")]] float& dyn_statusStartTime();
    // Get instance field reference: public System.Single statusEndTime
    [[deprecated("Use field access instead!")]] float& dyn_statusEndTime();
    // Get instance field reference: private System.Single refreshRate
    [[deprecated("Use field access instead!")]] float& dyn_refreshRate();
    // Get instance field reference: private System.Single baseSlideControl
    [[deprecated("Use field access instead!")]] float& dyn_baseSlideControl();
    // Get instance field reference: private UnityEngine.RaycastHit[] nonAllocRaycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_nonAllocRaycastHits();
    // Get instance field reference: private System.Int32 nonAllocHits
    [[deprecated("Use field access instead!")]] int& dyn_nonAllocHits();
    // Get instance field reference: private Photon.Voice.Unity.Recorder myRecorder
    [[deprecated("Use field access instead!")]] ::Photon::Voice::Unity::Recorder*& dyn_myRecorder();
    // static public GorillaTagger get_Instance()
    // Offset: 0xC82198
    static ::GlobalNamespace::GorillaTagger* get_Instance();
    // public System.Single get_sphereCastRadius()
    // Offset: 0xC821E8
    float get_sphereCastRadius();
    // public System.Void set_sphereCastRadius(System.Single value)
    // Offset: 0xC821F0
    void set_sphereCastRadius(float value);
    // public System.Void .ctor()
    // Offset: 0xC85A9C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaTagger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaTagger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaTagger*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xC82200
    void Awake();
    // private System.Void Start()
    // Offset: 0xC82628
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0xC827E0
    void LateUpdate();
    // private System.Boolean TryToTag(UnityEngine.RaycastHit hitInfo, System.Boolean isBodyTag, out Photon.Realtime.Player taggedPlayer)
    // Offset: 0xC85210
    bool TryToTag(::UnityEngine::RaycastHit hitInfo, bool isBodyTag, ByRef<::Photon::Realtime::Player*> taggedPlayer);
    // public System.Void StartVibration(System.Boolean forLeftController, System.Single amplitude, System.Single duration)
    // Offset: 0xC739B0
    void StartVibration(bool forLeftController, float amplitude, float duration);
    // private System.Collections.IEnumerator HapticPulses(System.Boolean forLeftController, System.Single amplitude, System.Single duration)
    // Offset: 0xC855EC
    ::System::Collections::IEnumerator* HapticPulses(bool forLeftController, float amplitude, float duration);
    // public System.Void UpdateColor(System.Single red, System.Single green, System.Single blue)
    // Offset: 0xC825C4
    void UpdateColor(float red, float green, float blue);
    // private System.Void OnTriggerEnter(UnityEngine.Collider other)
    // Offset: 0xC856B4
    void OnTriggerEnter(::UnityEngine::Collider* other);
    // public System.Void ShowCosmeticParticles(System.Boolean showParticles)
    // Offset: 0xC85850
    void ShowCosmeticParticles(bool showParticles);
    // public System.Void ApplyStatusEffect(GorillaTagger/StatusEffect newStatus, System.Single duration)
    // Offset: 0xC8598C
    void ApplyStatusEffect(::GlobalNamespace::GorillaTagger::StatusEffect newStatus, float duration);
    // private System.Void CheckEndStatusEffect()
    // Offset: 0xC855A8
    void CheckEndStatusEffect();
    // private System.Void EndStatusEffect(GorillaTagger/StatusEffect effectToEnd)
    // Offset: 0xC85A28
    void EndStatusEffect(::GlobalNamespace::GorillaTagger::StatusEffect effectToEnd);
    // private System.Single CalcSlideControl(System.Single fps)
    // Offset: 0xC85180
    float CalcSlideControl(float fps);
  }; // GorillaTagger
  #pragma pack(pop)
  static check_size<sizeof(GorillaTagger), 536 + sizeof(::Photon::Voice::Unity::Recorder*)> __GlobalNamespace_GorillaTaggerSizeCheck;
  static_assert(sizeof(GorillaTagger) == 0x220);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaTagger::StatusEffect, "", "GorillaTagger/StatusEffect");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_Instance
// Il2CppName: get_Instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GorillaTagger* (*)()>(&GlobalNamespace::GorillaTagger::get_Instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_Instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::get_sphereCastRadius
// Il2CppName: get_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::get_sphereCastRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "get_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::set_sphereCastRadius
// Il2CppName: set_sphereCastRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(float)>(&GlobalNamespace::GorillaTagger::set_sphereCastRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "set_sphereCastRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::TryToTag
// Il2CppName: TryToTag
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaTagger::*)(::UnityEngine::RaycastHit, bool, ByRef<::Photon::Realtime::Player*>)>(&GlobalNamespace::GorillaTagger::TryToTag)> {
  static const MethodInfo* get() {
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->byval_arg;
    static auto* isBodyTag = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* taggedPlayer = &::il2cpp_utils::GetClassFromName("Photon.Realtime", "Player")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "TryToTag", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hitInfo, isBodyTag, taggedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::StartVibration
// Il2CppName: StartVibration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(bool, float, float)>(&GlobalNamespace::GorillaTagger::StartVibration)> {
  static const MethodInfo* get() {
    static auto* forLeftController = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "StartVibration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forLeftController, amplitude, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::HapticPulses
// Il2CppName: HapticPulses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaTagger::*)(bool, float, float)>(&GlobalNamespace::GorillaTagger::HapticPulses)> {
  static const MethodInfo* get() {
    static auto* forLeftController = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* amplitude = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "HapticPulses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{forLeftController, amplitude, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(float, float, float)>(&GlobalNamespace::GorillaTagger::UpdateColor)> {
  static const MethodInfo* get() {
    static auto* red = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* green = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* blue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{red, green, blue});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GorillaTagger::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* other = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{other});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::ShowCosmeticParticles
// Il2CppName: ShowCosmeticParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(bool)>(&GlobalNamespace::GorillaTagger::ShowCosmeticParticles)> {
  static const MethodInfo* get() {
    static auto* showParticles = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "ShowCosmeticParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{showParticles});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::ApplyStatusEffect
// Il2CppName: ApplyStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::GlobalNamespace::GorillaTagger::StatusEffect, float)>(&GlobalNamespace::GorillaTagger::ApplyStatusEffect)> {
  static const MethodInfo* get() {
    static auto* newStatus = &::il2cpp_utils::GetClassFromName("", "GorillaTagger/StatusEffect")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "ApplyStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newStatus, duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::CheckEndStatusEffect
// Il2CppName: CheckEndStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)()>(&GlobalNamespace::GorillaTagger::CheckEndStatusEffect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "CheckEndStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::EndStatusEffect
// Il2CppName: EndStatusEffect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaTagger::*)(::GlobalNamespace::GorillaTagger::StatusEffect)>(&GlobalNamespace::GorillaTagger::EndStatusEffect)> {
  static const MethodInfo* get() {
    static auto* effectToEnd = &::il2cpp_utils::GetClassFromName("", "GorillaTagger/StatusEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "EndStatusEffect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{effectToEnd});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaTagger::CalcSlideControl
// Il2CppName: CalcSlideControl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaTagger::*)(float)>(&GlobalNamespace::GorillaTagger::CalcSlideControl)> {
  static const MethodInfo* get() {
    static auto* fps = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaTagger*), "CalcSlideControl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{fps});
  }
};
