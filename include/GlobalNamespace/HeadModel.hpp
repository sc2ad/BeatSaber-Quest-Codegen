// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HeadModel
  class HeadModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HeadModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeadModel*, "", "HeadModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: HeadModel
  // [TokenAttribute] Offset: FFFFFFFF
  class HeadModel : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::HeadModel::$DisableAfterASecond$d__6
    class $DisableAfterASecond$d__6;
    public:
    // public UnityEngine.GameObject[] cosmetics
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::GameObject*> cosmetics;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject objRef
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::GameObject* objRef;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> currentActiveObjects
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>* currentActiveObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> cosmeticDict
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>* cosmeticDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x38
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject[] cosmetics
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn_cosmetics();
    // Get instance field reference: private UnityEngine.GameObject objRef
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_objRef();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.GameObject> currentActiveObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::GameObject*>*& dyn_currentActiveObjects();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,UnityEngine.GameObject> cosmeticDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::UnityEngine::GameObject*>*& dyn_cosmeticDict();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // public System.Void .ctor()
    // Offset: 0xE8AD84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeadModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeadModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeadModel*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xE8A868
    void Awake();
    // private System.Collections.IEnumerator DisableAfterASecond()
    // Offset: 0xE8A894
    ::System::Collections::IEnumerator* DisableAfterASecond();
    // public System.Void OnEnable()
    // Offset: 0xE8A930
    void OnEnable();
    // public System.Void SetCosmeticActive(System.String activeCosmeticName)
    // Offset: 0xE8A95C
    void SetCosmeticActive(::StringW activeCosmeticName);
    // public System.Void SetCosmeticActiveArray(System.String[] activeCosmeticNames)
    // Offset: 0xE8ABD4
    void SetCosmeticActiveArray(::ArrayW<::StringW> activeCosmeticNames);
    // private System.Void SetChildRenderers(UnityEngine.GameObject obj, System.Boolean setEnabled)
    // Offset: 0xE8AABC
    void SetChildRenderers(::UnityEngine::GameObject* obj, bool setEnabled);
  }; // HeadModel
  #pragma pack(pop)
  static check_size<sizeof(HeadModel), 56 + sizeof(bool)> __GlobalNamespace_HeadModelSizeCheck;
  static_assert(sizeof(HeadModel) == 0x39);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)()>(&GlobalNamespace::HeadModel::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::DisableAfterASecond
// Il2CppName: DisableAfterASecond
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::HeadModel::*)()>(&GlobalNamespace::HeadModel::DisableAfterASecond)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "DisableAfterASecond", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)()>(&GlobalNamespace::HeadModel::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::SetCosmeticActive
// Il2CppName: SetCosmeticActive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::StringW)>(&GlobalNamespace::HeadModel::SetCosmeticActive)> {
  static const MethodInfo* get() {
    static auto* activeCosmeticName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "SetCosmeticActive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeCosmeticName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::SetCosmeticActiveArray
// Il2CppName: SetCosmeticActiveArray
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::ArrayW<::StringW>)>(&GlobalNamespace::HeadModel::SetCosmeticActiveArray)> {
  static const MethodInfo* get() {
    static auto* activeCosmeticNames = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "String"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "SetCosmeticActiveArray", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{activeCosmeticNames});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::HeadModel::SetChildRenderers
// Il2CppName: SetChildRenderers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeadModel::*)(::UnityEngine::GameObject*, bool)>(&GlobalNamespace::HeadModel::SetChildRenderers)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* setEnabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeadModel*), "SetChildRenderers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, setEnabled});
  }
};
