// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GorillaNetworking
namespace GorillaNetworking {
  // Forward declaring type: CosmeticsController
  class CosmeticsController;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: HeadModel
  class HeadModel;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CosmeticsControllerUpdateStand
  class CosmeticsControllerUpdateStand;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CosmeticsControllerUpdateStand);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CosmeticsControllerUpdateStand*, "", "CosmeticsControllerUpdateStand");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: CosmeticsControllerUpdateStand
  // [TokenAttribute] Offset: FFFFFFFF
  class CosmeticsControllerUpdateStand : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public GorillaNetworking.CosmeticsController cosmeticsController
    // Size: 0x8
    // Offset: 0x18
    ::GorillaNetworking::CosmeticsController* cosmeticsController;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController*) == 0x8);
    // public System.Boolean FailEntitlement
    // Size: 0x1
    // Offset: 0x20
    bool FailEntitlement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean PlayerUnlocked
    // Size: 0x1
    // Offset: 0x21
    bool PlayerUnlocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ItemNotGrantedYet
    // Size: 0x1
    // Offset: 0x22
    bool ItemNotGrantedYet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean ItemSuccessfullyGranted
    // Size: 0x1
    // Offset: 0x23
    bool ItemSuccessfullyGranted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean AttemptToConsumeEntitlement
    // Size: 0x1
    // Offset: 0x24
    bool AttemptToConsumeEntitlement;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean EntitlementSuccessfullyConsumed
    // Size: 0x1
    // Offset: 0x25
    bool EntitlementSuccessfullyConsumed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean LockSuccessfullyCleared
    // Size: 0x1
    // Offset: 0x26
    bool LockSuccessfullyCleared;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean RunDebug
    // Size: 0x1
    // Offset: 0x27
    bool RunDebug;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public HeadModel[] inventoryHeadModels
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::HeadModel*> inventoryHeadModels;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::HeadModel*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public GorillaNetworking.CosmeticsController cosmeticsController
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController*& dyn_cosmeticsController();
    // Get instance field reference: public System.Boolean FailEntitlement
    [[deprecated("Use field access instead!")]] bool& dyn_FailEntitlement();
    // Get instance field reference: public System.Boolean PlayerUnlocked
    [[deprecated("Use field access instead!")]] bool& dyn_PlayerUnlocked();
    // Get instance field reference: public System.Boolean ItemNotGrantedYet
    [[deprecated("Use field access instead!")]] bool& dyn_ItemNotGrantedYet();
    // Get instance field reference: public System.Boolean ItemSuccessfullyGranted
    [[deprecated("Use field access instead!")]] bool& dyn_ItemSuccessfullyGranted();
    // Get instance field reference: public System.Boolean AttemptToConsumeEntitlement
    [[deprecated("Use field access instead!")]] bool& dyn_AttemptToConsumeEntitlement();
    // Get instance field reference: public System.Boolean EntitlementSuccessfullyConsumed
    [[deprecated("Use field access instead!")]] bool& dyn_EntitlementSuccessfullyConsumed();
    // Get instance field reference: public System.Boolean LockSuccessfullyCleared
    [[deprecated("Use field access instead!")]] bool& dyn_LockSuccessfullyCleared();
    // Get instance field reference: public System.Boolean RunDebug
    [[deprecated("Use field access instead!")]] bool& dyn_RunDebug();
    // Get instance field reference: public HeadModel[] inventoryHeadModels
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::HeadModel*>& dyn_inventoryHeadModels();
    // public System.Void .ctor()
    // Offset: 0xC62748
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CosmeticsControllerUpdateStand* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CosmeticsControllerUpdateStand::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CosmeticsControllerUpdateStand*, creationType>()));
    }
    // public System.Void CallGetIAPPurchases()
    // Offset: 0xC621F4
    void CallGetIAPPurchases();
    // public System.Void UpdateCosmeticStands()
    // Offset: 0xC622F4
    void UpdateCosmeticStands();
    // public System.Void UpdateInventoryHeadModels()
    // Offset: 0xC62574
    void UpdateInventoryHeadModels();
  }; // CosmeticsControllerUpdateStand
  #pragma pack(pop)
  static check_size<sizeof(CosmeticsControllerUpdateStand), 40 + sizeof(::ArrayW<::GlobalNamespace::HeadModel*>)> __GlobalNamespace_CosmeticsControllerUpdateStandSizeCheck;
  static_assert(sizeof(CosmeticsControllerUpdateStand) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CosmeticsControllerUpdateStand::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CosmeticsControllerUpdateStand::CallGetIAPPurchases
// Il2CppName: CallGetIAPPurchases
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticsControllerUpdateStand::*)()>(&GlobalNamespace::CosmeticsControllerUpdateStand::CallGetIAPPurchases)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticsControllerUpdateStand*), "CallGetIAPPurchases", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticsControllerUpdateStand::UpdateCosmeticStands
// Il2CppName: UpdateCosmeticStands
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticsControllerUpdateStand::*)()>(&GlobalNamespace::CosmeticsControllerUpdateStand::UpdateCosmeticStands)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticsControllerUpdateStand*), "UpdateCosmeticStands", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CosmeticsControllerUpdateStand::UpdateInventoryHeadModels
// Il2CppName: UpdateInventoryHeadModels
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CosmeticsControllerUpdateStand::*)()>(&GlobalNamespace::CosmeticsControllerUpdateStand::UpdateInventoryHeadModels)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CosmeticsControllerUpdateStand*), "UpdateInventoryHeadModels", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
