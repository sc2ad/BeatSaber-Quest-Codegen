// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ParticleSystemEmitEventEffect
#include "GlobalNamespace/ParticleSystemEmitEventEffect.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: BasicBeatmapEventType
#include "GlobalNamespace/BasicBeatmapEventType.hpp"
// Including type: ParticleSystemEventController
#include "GlobalNamespace/ParticleSystemEventController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: MemoryPoolContainer`1<T>
  template<typename T>
  class MemoryPoolContainer_1;
  // Forward declaring type: BasicBeatmapEventData
  class BasicBeatmapEventData;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior*, "", "ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior
  // [TokenAttribute] Offset: FFFFFFFF
  class ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // protected readonly IAudioTimeSource _audioTimeSource
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::IAudioTimeSource* audioTimeSource;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IAudioTimeSource*) == 0x8);
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // protected readonly MemoryPoolContainer`1<ParticleSystemEventController> _particleSystemEventControllerPoolContainer
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ParticleSystemEventController*>* particleSystemEventControllerPoolContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ParticleSystemEventController*>*) == 0x8);
    // private readonly UnityEngine.Transform _particleSystemParentTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* particleSystemParentTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private readonly System.Int32 _particleSystemMaxSpawnedSystems
    // Size: 0x4
    // Offset: 0x30
    int particleSystemMaxSpawnedSystems;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: particleSystemMaxSpawnedSystems and: beatmapDataCallbackWrapper
    char __padding4[0x4] = {};
    // private readonly BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BeatmapDataCallbackWrapper* beatmapDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get instance field reference: protected readonly IAudioTimeSource _audioTimeSource
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& dyn__audioTimeSource();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: protected readonly MemoryPoolContainer`1<ParticleSystemEventController> _particleSystemEventControllerPoolContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MemoryPoolContainer_1<::GlobalNamespace::ParticleSystemEventController*>*& dyn__particleSystemEventControllerPoolContainer();
    // Get instance field reference: private readonly UnityEngine.Transform _particleSystemParentTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__particleSystemParentTransform();
    // Get instance field reference: private readonly System.Int32 _particleSystemMaxSpawnedSystems
    [[deprecated("Use field access instead!")]] int& dyn__particleSystemMaxSpawnedSystems();
    // Get instance field reference: private readonly BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__beatmapDataCallbackWrapper();
    // protected System.Void .ctor(BasicBeatmapEventType beatmapEvent, UnityEngine.Transform particleSystemParentTransform, System.Int32 particleSystemMaxSpawnedSystems, IAudioTimeSource audioTimeSource, BeatmapCallbacksController beatmapCallbacksController, ParticleSystemEventController/Pool particleSystemEventControllerPool)
    // Offset: 0x1353B34
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior* New_ctor(::GlobalNamespace::BasicBeatmapEventType beatmapEvent, ::UnityEngine::Transform* particleSystemParentTransform, int particleSystemMaxSpawnedSystems, ::GlobalNamespace::IAudioTimeSource* audioTimeSource, ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController, ::GlobalNamespace::ParticleSystemEventController::Pool* particleSystemEventControllerPool) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior*, creationType>(beatmapEvent, particleSystemParentTransform, particleSystemMaxSpawnedSystems, audioTimeSource, beatmapCallbacksController, particleSystemEventControllerPool)));
    }
    // public System.Void Dispose()
    // Offset: 0x1354098
    void Dispose();
    // private System.Void HandleBeatmapEvent(BasicBeatmapEventData basicBeatmapEventData)
    // Offset: 0x1354B54
    void HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData);
    // protected ParticleSystemEventController EmitParticles(System.Single startTime)
    // Offset: 0x13549A8
    ::GlobalNamespace::ParticleSystemEventController* EmitParticles(float startTime);
  }; // ParticleSystemEmitEventEffect/ParticleSystemEmitBehavior
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior), 56 + sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*)> __GlobalNamespace_ParticleSystemEmitEventEffect_ParticleSystemEmitBehaviorSizeCheck;
  static_assert(sizeof(ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::*)()>(&GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::HandleBeatmapEvent
// Il2CppName: HandleBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::*)(::GlobalNamespace::BasicBeatmapEventData*)>(&GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::HandleBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* basicBeatmapEventData = &::il2cpp_utils::GetClassFromName("", "BasicBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior*), "HandleBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basicBeatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::EmitParticles
// Il2CppName: EmitParticles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ParticleSystemEventController* (GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::*)(float)>(&GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior::EmitParticles)> {
  static const MethodInfo* get() {
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ParticleSystemEmitEventEffect::ParticleSystemEmitBehavior*), "EmitParticles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startTime});
  }
};
