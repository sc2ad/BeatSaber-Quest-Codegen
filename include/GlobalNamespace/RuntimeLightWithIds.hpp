// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RuntimeLightWithIds
  class RuntimeLightWithIds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RuntimeLightWithIds);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RuntimeLightWithIds*, "", "RuntimeLightWithIds");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: RuntimeLightWithIds
  // [TokenAttribute] Offset: FFFFFFFF
  class RuntimeLightWithIds : public ::GlobalNamespace::LightWithIds {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x30
    char ___base_padding[0x6] = {};
    // Nested type: ::GlobalNamespace::RuntimeLightWithIds::MixType
    struct MixType;
    // Nested type: ::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId
    class LightIntensitiesWithId;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RuntimeLightWithIds/MixType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MixType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MixType
      constexpr MixType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RuntimeLightWithIds/MixType Maximum
      static constexpr const int Maximum = 0;
      // Get static field: static public RuntimeLightWithIds/MixType Maximum
      static ::GlobalNamespace::RuntimeLightWithIds::MixType _get_Maximum();
      // Set static field: static public RuntimeLightWithIds/MixType Maximum
      static void _set_Maximum(::GlobalNamespace::RuntimeLightWithIds::MixType value);
      // static field const value: static public RuntimeLightWithIds/MixType Sum
      static constexpr const int Sum = 1;
      // Get static field: static public RuntimeLightWithIds/MixType Sum
      static ::GlobalNamespace::RuntimeLightWithIds::MixType _get_Sum();
      // Set static field: static public RuntimeLightWithIds/MixType Sum
      static void _set_Sum(::GlobalNamespace::RuntimeLightWithIds::MixType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // RuntimeLightWithIds/MixType
    #pragma pack(pop)
    static check_size<sizeof(RuntimeLightWithIds::MixType), 0 + sizeof(int)> __GlobalNamespace_RuntimeLightWithIds_MixTypeSizeCheck;
    static_assert(sizeof(RuntimeLightWithIds::MixType) == 0x4);
    public:
    // private RuntimeLightWithIds/LightIntensitiesWithId[] _lightIntensityData
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId*> lightIntensityData;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId*>) == 0x8);
    // [SpaceAttribute] Offset: 0x10C7E64
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x38
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxIntensity
    // Size: 0x4
    // Offset: 0x3C
    float maxIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _multiplyColorByAlpha
    // Size: 0x1
    // Offset: 0x40
    bool multiplyColorByAlpha;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: multiplyColorByAlpha and: mixType
    char __padding3[0x3] = {};
    // private RuntimeLightWithIds/MixType _mixType
    // Size: 0x4
    // Offset: 0x44
    ::GlobalNamespace::RuntimeLightWithIds::MixType mixType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::RuntimeLightWithIds::MixType) == 0x4);
    public:
    // Get instance field reference: private RuntimeLightWithIds/LightIntensitiesWithId[] _lightIntensityData
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::RuntimeLightWithIds::LightIntensitiesWithId*>& dyn__lightIntensityData();
    // Get instance field reference: private System.Single _intensity
    [[deprecated("Use field access instead!")]] float& dyn__intensity();
    // Get instance field reference: private System.Single _maxIntensity
    [[deprecated("Use field access instead!")]] float& dyn__maxIntensity();
    // Get instance field reference: private System.Boolean _multiplyColorByAlpha
    [[deprecated("Use field access instead!")]] bool& dyn__multiplyColorByAlpha();
    // Get instance field reference: private RuntimeLightWithIds/MixType _mixType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::RuntimeLightWithIds::MixType& dyn__mixType();
    // protected System.Void Awake()
    // Offset: 0x1E836A0
    void Awake();
    // protected System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ColorWasSet(::UnityEngine::Color color);
    // private UnityEngine.Color ProcessColor(UnityEngine.Color color, System.Single intensity)
    // Offset: 0x1E87BD8
    ::UnityEngine::Color ProcessColor(::UnityEngine::Color color, float intensity);
    // protected System.Void .ctor()
    // Offset: 0x1E79E30
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeLightWithIds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RuntimeLightWithIds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeLightWithIds*, creationType>()));
    }
    // protected override System.Void ProcessNewColorData()
    // Offset: 0x1E87994
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::ProcessNewColorData()
    void ProcessNewColorData();
  }; // RuntimeLightWithIds
  #pragma pack(pop)
  static check_size<sizeof(RuntimeLightWithIds), 68 + sizeof(::GlobalNamespace::RuntimeLightWithIds::MixType)> __GlobalNamespace_RuntimeLightWithIdsSizeCheck;
  static_assert(sizeof(RuntimeLightWithIds) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RuntimeLightWithIds::MixType, "", "RuntimeLightWithIds/MixType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithIds::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RuntimeLightWithIds::*)()>(&GlobalNamespace::RuntimeLightWithIds::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithIds*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithIds::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RuntimeLightWithIds::*)(::UnityEngine::Color)>(&GlobalNamespace::RuntimeLightWithIds::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithIds*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithIds::ProcessColor
// Il2CppName: ProcessColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::RuntimeLightWithIds::*)(::UnityEngine::Color, float)>(&GlobalNamespace::RuntimeLightWithIds::ProcessColor)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* intensity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithIds*), "ProcessColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color, intensity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithIds::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RuntimeLightWithIds::ProcessNewColorData
// Il2CppName: ProcessNewColorData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RuntimeLightWithIds::*)()>(&GlobalNamespace::RuntimeLightWithIds::ProcessNewColorData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RuntimeLightWithIds*), "ProcessNewColorData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
