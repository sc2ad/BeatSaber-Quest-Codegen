// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ChestObjectHysteresis
  class ChestObjectHysteresis;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ChestObjectHysteresis);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ChestObjectHysteresis*, "", "ChestObjectHysteresis");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: ChestObjectHysteresis
  // [TokenAttribute] Offset: FFFFFFFF
  class ChestObjectHysteresis : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Single angleHysteresis
    // Size: 0x4
    // Offset: 0x18
    float angleHysteresis;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single angleBetween
    // Size: 0x4
    // Offset: 0x1C
    float angleBetween;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform angleFollower
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* angleFollower;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Quaternion lastAngleQuat
    // Size: 0x10
    // Offset: 0x28
    ::UnityEngine::Quaternion lastAngleQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion currentAngleQuat
    // Size: 0x10
    // Offset: 0x38
    ::UnityEngine::Quaternion currentAngleQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Single angleHysteresis
    [[deprecated("Use field access instead!")]] float& dyn_angleHysteresis();
    // Get instance field reference: public System.Single angleBetween
    [[deprecated("Use field access instead!")]] float& dyn_angleBetween();
    // Get instance field reference: public UnityEngine.Transform angleFollower
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_angleFollower();
    // Get instance field reference: private UnityEngine.Quaternion lastAngleQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_lastAngleQuat();
    // Get instance field reference: private UnityEngine.Quaternion currentAngleQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_currentAngleQuat();
    // public System.Void .ctor()
    // Offset: 0xC61D2C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChestObjectHysteresis* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestObjectHysteresis::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChestObjectHysteresis*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xC61B20
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0xC61B7C
    void LateUpdate();
  }; // ChestObjectHysteresis
  #pragma pack(pop)
  static check_size<sizeof(ChestObjectHysteresis), 56 + sizeof(::UnityEngine::Quaternion)> __GlobalNamespace_ChestObjectHysteresisSizeCheck;
  static_assert(sizeof(ChestObjectHysteresis) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestObjectHysteresis::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestObjectHysteresis::*)()>(&GlobalNamespace::ChestObjectHysteresis::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestObjectHysteresis*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
