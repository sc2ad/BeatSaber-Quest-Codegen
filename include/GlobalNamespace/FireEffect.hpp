// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
  // Forward declaring type: BloomPrePassBackgroundNonLightRenderer
  class BloomPrePassBackgroundNonLightRenderer;
  // Forward declaring type: ColorSO
  class ColorSO;
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: LightWithIdManager
  class LightWithIdManager;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: LightColorBeatmapEventData
  class LightColorBeatmapEventData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FireEffect
  class FireEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FireEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FireEffect*, "", "FireEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: FireEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class FireEffect : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 _groupId
    // Size: 0x4
    // Offset: 0x18
    int groupId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _elementId
    // Size: 0x4
    // Offset: 0x1C
    int elementId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lightId
    // Size: 0x4
    // Offset: 0x20
    int lightId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lightId and: flipBookPropertyBlockController
    char __padding2[0x4] = {};
    // protected MaterialPropertyBlockController _flipBookPropertyBlockController
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MaterialPropertyBlockController* flipBookPropertyBlockController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockController*) == 0x8);
    // protected MaterialPropertyBlockController _bloomPropertyBlockController
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MaterialPropertyBlockController* bloomPropertyBlockController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockController*) == 0x8);
    // protected MaterialPropertyBlockController _privatePointLightPropertyBlockController
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::MaterialPropertyBlockController* privatePointLightPropertyBlockController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockController*) == 0x8);
    // protected BloomPrePassBackgroundNonLightRenderer _bloomPrePassRenderer
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer* bloomPrePassRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer*) == 0x8);
    // protected System.Single _bloomIntensityMultiplier
    // Size: 0x4
    // Offset: 0x48
    float bloomIntensityMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [ColorUsageAttribute] Offset: 0x10D856C
    // protected UnityEngine.Color _pointLightColor
    // Size: 0x10
    // Offset: 0x4C
    ::UnityEngine::Color pointLightColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // [SpaceAttribute] Offset: 0x10D85AC
    // private System.Boolean _contributeCustomLightColor
    // Size: 0x1
    // Offset: 0x5C
    bool contributeCustomLightColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: contributeCustomLightColor and: customLightColorContribution
    char __padding9[0x3] = {};
    // [DrawIfAttribute] Offset: 0x10D85E4
    // [NullAllowed] Offset: 0x10D85E4
    // private ColorSO _customLightColorContribution
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::ColorSO* customLightColorContribution;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // [InjectAttribute] Offset: 0x10D869C
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // [InjectAttribute] Offset: 0x10D86AC
    // private readonly LightWithIdManager _lightWithIdManager
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::LightWithIdManager* lightWithIdManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightWithIdManager*) == 0x8);
    // private BeatmapDataCallbackWrapper _lightColorBeatmapEventCallbackWrapper
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::BeatmapDataCallbackWrapper* lightColorBeatmapEventCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _groupId
    [[deprecated("Use field access instead!")]] int& dyn__groupId();
    // Get instance field reference: private System.Int32 _elementId
    [[deprecated("Use field access instead!")]] int& dyn__elementId();
    // Get instance field reference: private System.Int32 _lightId
    [[deprecated("Use field access instead!")]] int& dyn__lightId();
    // Get instance field reference: protected MaterialPropertyBlockController _flipBookPropertyBlockController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& dyn__flipBookPropertyBlockController();
    // Get instance field reference: protected MaterialPropertyBlockController _bloomPropertyBlockController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& dyn__bloomPropertyBlockController();
    // Get instance field reference: protected MaterialPropertyBlockController _privatePointLightPropertyBlockController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& dyn__privatePointLightPropertyBlockController();
    // Get instance field reference: protected BloomPrePassBackgroundNonLightRenderer _bloomPrePassRenderer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassBackgroundNonLightRenderer*& dyn__bloomPrePassRenderer();
    // Get instance field reference: protected System.Single _bloomIntensityMultiplier
    [[deprecated("Use field access instead!")]] float& dyn__bloomIntensityMultiplier();
    // Get instance field reference: protected UnityEngine.Color _pointLightColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__pointLightColor();
    // Get instance field reference: private System.Boolean _contributeCustomLightColor
    [[deprecated("Use field access instead!")]] bool& dyn__contributeCustomLightColor();
    // Get instance field reference: private ColorSO _customLightColorContribution
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__customLightColorContribution();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly LightWithIdManager _lightWithIdManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightWithIdManager*& dyn__lightWithIdManager();
    // Get instance field reference: private BeatmapDataCallbackWrapper _lightColorBeatmapEventCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__lightColorBeatmapEventCallbackWrapper();
    // protected System.Void .ctor()
    // Offset: 0x137E678
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FireEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FireEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FireEffect*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x137E434
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x137E550
    void OnDestroy();
    // protected System.Void HandleColorChangeBeatmapEvent(LightColorBeatmapEventData e)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HandleColorChangeBeatmapEvent(::GlobalNamespace::LightColorBeatmapEventData* e);
    // protected System.Void SetRenderersEnabled(System.Boolean enabled)
    // Offset: 0x137E56C
    void SetRenderersEnabled(bool enabled);
    // protected System.Void NotifyAlphaWasChanged(System.Single currentAlpha)
    // Offset: 0x137E604
    void NotifyAlphaWasChanged(float currentAlpha);
  }; // FireEffect
  #pragma pack(pop)
  static check_size<sizeof(FireEffect), 120 + sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*)> __GlobalNamespace_FireEffectSizeCheck;
  static_assert(sizeof(FireEffect) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FireEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FireEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireEffect::*)()>(&GlobalNamespace::FireEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireEffect::*)()>(&GlobalNamespace::FireEffect::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireEffect::HandleColorChangeBeatmapEvent
// Il2CppName: HandleColorChangeBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireEffect::*)(::GlobalNamespace::LightColorBeatmapEventData*)>(&GlobalNamespace::FireEffect::HandleColorChangeBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* e = &::il2cpp_utils::GetClassFromName("", "LightColorBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireEffect*), "HandleColorChangeBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{e});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireEffect::SetRenderersEnabled
// Il2CppName: SetRenderersEnabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireEffect::*)(bool)>(&GlobalNamespace::FireEffect::SetRenderersEnabled)> {
  static const MethodInfo* get() {
    static auto* enabled = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireEffect*), "SetRenderersEnabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enabled});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FireEffect::NotifyAlphaWasChanged
// Il2CppName: NotifyAlphaWasChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FireEffect::*)(float)>(&GlobalNamespace::FireEffect::NotifyAlphaWasChanged)> {
  static const MethodInfo* get() {
    static auto* currentAlpha = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FireEffect*), "NotifyAlphaWasChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentAlpha});
  }
};
