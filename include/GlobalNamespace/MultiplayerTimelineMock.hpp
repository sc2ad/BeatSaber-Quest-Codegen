// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerTimelineMock
  class MultiplayerTimelineMock;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerTimelineMock);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerTimelineMock*, "", "MultiplayerTimelineMock");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerTimelineMock
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerTimelineMock : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [HeaderAttribute] Offset: 0x10EECD8
    // private UnityEngine.GameObject[] _connectedPlayerIntroAnimators
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::GameObject*> connectedPlayerIntroAnimators;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] _connectedPlayerScoreRingItems
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::GameObject*> connectedPlayerScoreRingItems;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] _connectedPlayerOutroAnimators
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::UnityEngine::GameObject*> connectedPlayerOutroAnimators;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // [HeaderAttribute] Offset: 0x10EED44
    // private UnityEngine.GameObject _localPlayerIntroAnimator
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::GameObject* localPlayerIntroAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localPlayerScoreRingItem
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* localPlayerScoreRingItem;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localPlayerOutroAnimator
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* localPlayerOutroAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0x10EEDB0
    // private UnityEngine.GameObject _connectedDuelIntroAnimator
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::GameObject* connectedDuelIntroAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _connectedDuelOutroAnimator
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::GameObject* connectedDuelOutroAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localDuelIntroAnimator
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* localDuelIntroAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localDuelOutroAnimator
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::GameObject* localDuelOutroAnimator;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0x10EEE2C
    // private UnityEngine.GameObject[] _resultAvatars
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::GameObject*> resultAvatars;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // private UnityEngine.GameObject[] _badgeTimelines
    // Size: 0x8
    // Offset: 0x70
    ::ArrayW<::UnityEngine::GameObject*> badgeTimelines;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::GameObject*>) == 0x8);
    // [HeaderAttribute] Offset: 0x10EEE88
    // private UnityEngine.GameObject _resultsMocks
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::GameObject* resultsMocks;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _ringsGroup
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::GameObject* ringsGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _playersGroup
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::GameObject* playersGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _duelGroup
    // Size: 0x8
    // Offset: 0x90
    ::UnityEngine::GameObject* duelGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject[] _connectedPlayerIntroAnimators
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__connectedPlayerIntroAnimators();
    // Get instance field reference: private UnityEngine.GameObject[] _connectedPlayerScoreRingItems
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__connectedPlayerScoreRingItems();
    // Get instance field reference: private UnityEngine.GameObject[] _connectedPlayerOutroAnimators
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__connectedPlayerOutroAnimators();
    // Get instance field reference: private UnityEngine.GameObject _localPlayerIntroAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__localPlayerIntroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _localPlayerScoreRingItem
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__localPlayerScoreRingItem();
    // Get instance field reference: private UnityEngine.GameObject _localPlayerOutroAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__localPlayerOutroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _connectedDuelIntroAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__connectedDuelIntroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _connectedDuelOutroAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__connectedDuelOutroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _localDuelIntroAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__localDuelIntroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _localDuelOutroAnimator
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__localDuelOutroAnimator();
    // Get instance field reference: private UnityEngine.GameObject[] _resultAvatars
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__resultAvatars();
    // Get instance field reference: private UnityEngine.GameObject[] _badgeTimelines
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::GameObject*>& dyn__badgeTimelines();
    // Get instance field reference: private UnityEngine.GameObject _resultsMocks
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__resultsMocks();
    // Get instance field reference: private UnityEngine.GameObject _ringsGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__ringsGroup();
    // Get instance field reference: private UnityEngine.GameObject _playersGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__playersGroup();
    // Get instance field reference: private UnityEngine.GameObject _duelGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__duelGroup();
    // public UnityEngine.GameObject[] get_connectedPlayerIntroAnimators()
    // Offset: 0x13C5550
    ::ArrayW<::UnityEngine::GameObject*> get_connectedPlayerIntroAnimators();
    // public UnityEngine.GameObject[] get_connectedPlayerScoreRings()
    // Offset: 0x13C5558
    ::ArrayW<::UnityEngine::GameObject*> get_connectedPlayerScoreRings();
    // public UnityEngine.GameObject[] get_connectedPlayerOutroAnimators()
    // Offset: 0x13C5560
    ::ArrayW<::UnityEngine::GameObject*> get_connectedPlayerOutroAnimators();
    // public UnityEngine.GameObject get_localPlayerIntroAnimator()
    // Offset: 0x13C5568
    ::UnityEngine::GameObject* get_localPlayerIntroAnimator();
    // public UnityEngine.GameObject get_localPlayerScoreRingItem()
    // Offset: 0x13C5570
    ::UnityEngine::GameObject* get_localPlayerScoreRingItem();
    // public UnityEngine.GameObject get_localPlayerOutroAnimator()
    // Offset: 0x13C5578
    ::UnityEngine::GameObject* get_localPlayerOutroAnimator();
    // public UnityEngine.GameObject get_connectedDuelIntroAnimator()
    // Offset: 0x13C5580
    ::UnityEngine::GameObject* get_connectedDuelIntroAnimator();
    // public UnityEngine.GameObject get_connectedDuelOutroAnimator()
    // Offset: 0x13C5588
    ::UnityEngine::GameObject* get_connectedDuelOutroAnimator();
    // public UnityEngine.GameObject get_localDuelIntroAnimator()
    // Offset: 0x13C5590
    ::UnityEngine::GameObject* get_localDuelIntroAnimator();
    // public UnityEngine.GameObject get_localDuelOutroAnimator()
    // Offset: 0x13C5598
    ::UnityEngine::GameObject* get_localDuelOutroAnimator();
    // public UnityEngine.GameObject[] get_resultAvatars()
    // Offset: 0x13C55A0
    ::ArrayW<::UnityEngine::GameObject*> get_resultAvatars();
    // public UnityEngine.GameObject[] get_badgeTimelines()
    // Offset: 0x13C55A8
    ::ArrayW<::UnityEngine::GameObject*> get_badgeTimelines();
    // public UnityEngine.GameObject get_resultsMocks()
    // Offset: 0x13C55B0
    ::UnityEngine::GameObject* get_resultsMocks();
    // public System.Void .ctor()
    // Offset: 0x13C561C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerTimelineMock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerTimelineMock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerTimelineMock*, creationType>()));
    }
    // public System.Void HandleActivations(System.Boolean isDuel)
    // Offset: 0x13C55B8
    void HandleActivations(bool isDuel);
  }; // MultiplayerTimelineMock
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerTimelineMock), 144 + sizeof(::UnityEngine::GameObject*)> __GlobalNamespace_MultiplayerTimelineMockSizeCheck;
  static_assert(sizeof(MultiplayerTimelineMock) == 0x98);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerIntroAnimators
// Il2CppName: get_connectedPlayerIntroAnimators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerIntroAnimators)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedPlayerIntroAnimators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerScoreRings
// Il2CppName: get_connectedPlayerScoreRings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerScoreRings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedPlayerScoreRings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerOutroAnimators
// Il2CppName: get_connectedPlayerOutroAnimators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerOutroAnimators)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedPlayerOutroAnimators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localPlayerIntroAnimator
// Il2CppName: get_localPlayerIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localPlayerIntroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localPlayerIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localPlayerScoreRingItem
// Il2CppName: get_localPlayerScoreRingItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localPlayerScoreRingItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localPlayerScoreRingItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localPlayerOutroAnimator
// Il2CppName: get_localPlayerOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localPlayerOutroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localPlayerOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelIntroAnimator
// Il2CppName: get_connectedDuelIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelIntroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedDuelIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelOutroAnimator
// Il2CppName: get_connectedDuelOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelOutroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedDuelOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localDuelIntroAnimator
// Il2CppName: get_localDuelIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localDuelIntroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localDuelIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localDuelOutroAnimator
// Il2CppName: get_localDuelOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localDuelOutroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localDuelOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_resultAvatars
// Il2CppName: get_resultAvatars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_resultAvatars)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_resultAvatars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_badgeTimelines
// Il2CppName: get_badgeTimelines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::GameObject*> (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_badgeTimelines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_badgeTimelines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_resultsMocks
// Il2CppName: get_resultsMocks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_resultsMocks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_resultsMocks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::HandleActivations
// Il2CppName: HandleActivations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerTimelineMock::*)(bool)>(&GlobalNamespace::MultiplayerTimelineMock::HandleActivations)> {
  static const MethodInfo* get() {
    static auto* isDuel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "HandleActivations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isDuel});
  }
};
