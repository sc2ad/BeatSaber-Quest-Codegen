// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerTimelineMock
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerTimelineMock : public UnityEngine::MonoBehaviour {
    public:
    // [HeaderAttribute] Offset: 0xF140F4
    // private UnityEngine.GameObject[] _connectedPlayerIntroAnimators
    // Size: 0x8
    // Offset: 0x18
    ::Array<UnityEngine::GameObject*>* connectedPlayerIntroAnimators;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.GameObject[] _connectedPlayerScoreRingItems
    // Size: 0x8
    // Offset: 0x20
    ::Array<UnityEngine::GameObject*>* connectedPlayerScoreRingItems;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.GameObject[] _connectedPlayerOutroAnimators
    // Size: 0x8
    // Offset: 0x28
    ::Array<UnityEngine::GameObject*>* connectedPlayerOutroAnimators;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::GameObject*>*) == 0x8);
    // [HeaderAttribute] Offset: 0xF14160
    // private UnityEngine.GameObject _localPlayerIntroAnimator
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::GameObject* localPlayerIntroAnimator;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localPlayerScoreRingItem
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::GameObject* localPlayerScoreRingItem;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localPlayerOutroAnimator
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::GameObject* localPlayerOutroAnimator;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0xF141CC
    // private UnityEngine.GameObject _connectedDuelIntroAnimator
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::GameObject* connectedDuelIntroAnimator;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _connectedDuelOutroAnimator
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::GameObject* connectedDuelOutroAnimator;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localDuelIntroAnimator
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::GameObject* localDuelIntroAnimator;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _localDuelOutroAnimator
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::GameObject* localDuelOutroAnimator;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [HeaderAttribute] Offset: 0xF14248
    // private UnityEngine.GameObject[] _resultAvatars
    // Size: 0x8
    // Offset: 0x68
    ::Array<UnityEngine::GameObject*>* resultAvatars;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::GameObject*>*) == 0x8);
    // private UnityEngine.GameObject[] _badgeTimelines
    // Size: 0x8
    // Offset: 0x70
    ::Array<UnityEngine::GameObject*>* badgeTimelines;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::GameObject*>*) == 0x8);
    // [HeaderAttribute] Offset: 0xF142A4
    // private UnityEngine.GameObject _resultsMocks
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::GameObject* resultsMocks;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _ringsGroup
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::GameObject* ringsGroup;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _playersGroup
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::GameObject* playersGroup;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _duelGroup
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::GameObject* duelGroup;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // Creating value type constructor for type: MultiplayerTimelineMock
    MultiplayerTimelineMock(::Array<UnityEngine::GameObject*>* connectedPlayerIntroAnimators_ = {}, ::Array<UnityEngine::GameObject*>* connectedPlayerScoreRingItems_ = {}, ::Array<UnityEngine::GameObject*>* connectedPlayerOutroAnimators_ = {}, UnityEngine::GameObject* localPlayerIntroAnimator_ = {}, UnityEngine::GameObject* localPlayerScoreRingItem_ = {}, UnityEngine::GameObject* localPlayerOutroAnimator_ = {}, UnityEngine::GameObject* connectedDuelIntroAnimator_ = {}, UnityEngine::GameObject* connectedDuelOutroAnimator_ = {}, UnityEngine::GameObject* localDuelIntroAnimator_ = {}, UnityEngine::GameObject* localDuelOutroAnimator_ = {}, ::Array<UnityEngine::GameObject*>* resultAvatars_ = {}, ::Array<UnityEngine::GameObject*>* badgeTimelines_ = {}, UnityEngine::GameObject* resultsMocks_ = {}, UnityEngine::GameObject* ringsGroup_ = {}, UnityEngine::GameObject* playersGroup_ = {}, UnityEngine::GameObject* duelGroup_ = {}) noexcept : connectedPlayerIntroAnimators{connectedPlayerIntroAnimators_}, connectedPlayerScoreRingItems{connectedPlayerScoreRingItems_}, connectedPlayerOutroAnimators{connectedPlayerOutroAnimators_}, localPlayerIntroAnimator{localPlayerIntroAnimator_}, localPlayerScoreRingItem{localPlayerScoreRingItem_}, localPlayerOutroAnimator{localPlayerOutroAnimator_}, connectedDuelIntroAnimator{connectedDuelIntroAnimator_}, connectedDuelOutroAnimator{connectedDuelOutroAnimator_}, localDuelIntroAnimator{localDuelIntroAnimator_}, localDuelOutroAnimator{localDuelOutroAnimator_}, resultAvatars{resultAvatars_}, badgeTimelines{badgeTimelines_}, resultsMocks{resultsMocks_}, ringsGroup{ringsGroup_}, playersGroup{playersGroup_}, duelGroup{duelGroup_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.GameObject[] _connectedPlayerIntroAnimators
    ::Array<UnityEngine::GameObject*>*& dyn__connectedPlayerIntroAnimators();
    // Get instance field reference: private UnityEngine.GameObject[] _connectedPlayerScoreRingItems
    ::Array<UnityEngine::GameObject*>*& dyn__connectedPlayerScoreRingItems();
    // Get instance field reference: private UnityEngine.GameObject[] _connectedPlayerOutroAnimators
    ::Array<UnityEngine::GameObject*>*& dyn__connectedPlayerOutroAnimators();
    // Get instance field reference: private UnityEngine.GameObject _localPlayerIntroAnimator
    UnityEngine::GameObject*& dyn__localPlayerIntroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _localPlayerScoreRingItem
    UnityEngine::GameObject*& dyn__localPlayerScoreRingItem();
    // Get instance field reference: private UnityEngine.GameObject _localPlayerOutroAnimator
    UnityEngine::GameObject*& dyn__localPlayerOutroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _connectedDuelIntroAnimator
    UnityEngine::GameObject*& dyn__connectedDuelIntroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _connectedDuelOutroAnimator
    UnityEngine::GameObject*& dyn__connectedDuelOutroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _localDuelIntroAnimator
    UnityEngine::GameObject*& dyn__localDuelIntroAnimator();
    // Get instance field reference: private UnityEngine.GameObject _localDuelOutroAnimator
    UnityEngine::GameObject*& dyn__localDuelOutroAnimator();
    // Get instance field reference: private UnityEngine.GameObject[] _resultAvatars
    ::Array<UnityEngine::GameObject*>*& dyn__resultAvatars();
    // Get instance field reference: private UnityEngine.GameObject[] _badgeTimelines
    ::Array<UnityEngine::GameObject*>*& dyn__badgeTimelines();
    // Get instance field reference: private UnityEngine.GameObject _resultsMocks
    UnityEngine::GameObject*& dyn__resultsMocks();
    // Get instance field reference: private UnityEngine.GameObject _ringsGroup
    UnityEngine::GameObject*& dyn__ringsGroup();
    // Get instance field reference: private UnityEngine.GameObject _playersGroup
    UnityEngine::GameObject*& dyn__playersGroup();
    // Get instance field reference: private UnityEngine.GameObject _duelGroup
    UnityEngine::GameObject*& dyn__duelGroup();
    // public UnityEngine.GameObject[] get_connectedPlayerIntroAnimators()
    // Offset: 0x1133154
    ::Array<UnityEngine::GameObject*>* get_connectedPlayerIntroAnimators();
    // public UnityEngine.GameObject[] get_connectedPlayerScoreRings()
    // Offset: 0x113315C
    ::Array<UnityEngine::GameObject*>* get_connectedPlayerScoreRings();
    // public UnityEngine.GameObject[] get_connectedPlayerOutroAnimators()
    // Offset: 0x1133164
    ::Array<UnityEngine::GameObject*>* get_connectedPlayerOutroAnimators();
    // public UnityEngine.GameObject get_localPlayerIntroAnimator()
    // Offset: 0x113316C
    UnityEngine::GameObject* get_localPlayerIntroAnimator();
    // public UnityEngine.GameObject get_localPlayerScoreRingItem()
    // Offset: 0x1133174
    UnityEngine::GameObject* get_localPlayerScoreRingItem();
    // public UnityEngine.GameObject get_localPlayerOutroAnimator()
    // Offset: 0x113317C
    UnityEngine::GameObject* get_localPlayerOutroAnimator();
    // public UnityEngine.GameObject get_connectedDuelIntroAnimator()
    // Offset: 0x1133184
    UnityEngine::GameObject* get_connectedDuelIntroAnimator();
    // public UnityEngine.GameObject get_connectedDuelOutroAnimator()
    // Offset: 0x113318C
    UnityEngine::GameObject* get_connectedDuelOutroAnimator();
    // public UnityEngine.GameObject get_localDuelIntroAnimator()
    // Offset: 0x1133194
    UnityEngine::GameObject* get_localDuelIntroAnimator();
    // public UnityEngine.GameObject get_localDuelOutroAnimator()
    // Offset: 0x113319C
    UnityEngine::GameObject* get_localDuelOutroAnimator();
    // public UnityEngine.GameObject[] get_resultAvatars()
    // Offset: 0x11331A4
    ::Array<UnityEngine::GameObject*>* get_resultAvatars();
    // public UnityEngine.GameObject[] get_badgeTimelines()
    // Offset: 0x11331AC
    ::Array<UnityEngine::GameObject*>* get_badgeTimelines();
    // public UnityEngine.GameObject get_resultsMocks()
    // Offset: 0x11331B4
    UnityEngine::GameObject* get_resultsMocks();
    // public System.Void HandleActivations(System.Boolean isDuel)
    // Offset: 0x11331BC
    void HandleActivations(bool isDuel);
    // public System.Void .ctor()
    // Offset: 0x1133220
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerTimelineMock* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerTimelineMock::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerTimelineMock*, creationType>()));
    }
  }; // MultiplayerTimelineMock
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerTimelineMock), 144 + sizeof(UnityEngine::GameObject*)> __GlobalNamespace_MultiplayerTimelineMockSizeCheck;
  static_assert(sizeof(MultiplayerTimelineMock) == 0x98);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerTimelineMock*, "", "MultiplayerTimelineMock");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerIntroAnimators
// Il2CppName: get_connectedPlayerIntroAnimators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerIntroAnimators)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedPlayerIntroAnimators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerScoreRings
// Il2CppName: get_connectedPlayerScoreRings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerScoreRings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedPlayerScoreRings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerOutroAnimators
// Il2CppName: get_connectedPlayerOutroAnimators
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedPlayerOutroAnimators)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedPlayerOutroAnimators", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localPlayerIntroAnimator
// Il2CppName: get_localPlayerIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localPlayerIntroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localPlayerIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localPlayerScoreRingItem
// Il2CppName: get_localPlayerScoreRingItem
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localPlayerScoreRingItem)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localPlayerScoreRingItem", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localPlayerOutroAnimator
// Il2CppName: get_localPlayerOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localPlayerOutroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localPlayerOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelIntroAnimator
// Il2CppName: get_connectedDuelIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelIntroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedDuelIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelOutroAnimator
// Il2CppName: get_connectedDuelOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_connectedDuelOutroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_connectedDuelOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localDuelIntroAnimator
// Il2CppName: get_localDuelIntroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localDuelIntroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localDuelIntroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_localDuelOutroAnimator
// Il2CppName: get_localDuelOutroAnimator
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_localDuelOutroAnimator)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_localDuelOutroAnimator", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_resultAvatars
// Il2CppName: get_resultAvatars
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_resultAvatars)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_resultAvatars", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_badgeTimelines
// Il2CppName: get_badgeTimelines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Array<UnityEngine::GameObject*>* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_badgeTimelines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_badgeTimelines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::get_resultsMocks
// Il2CppName: get_resultsMocks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<UnityEngine::GameObject* (GlobalNamespace::MultiplayerTimelineMock::*)()>(&GlobalNamespace::MultiplayerTimelineMock::get_resultsMocks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "get_resultsMocks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::HandleActivations
// Il2CppName: HandleActivations
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerTimelineMock::*)(bool)>(&GlobalNamespace::MultiplayerTimelineMock::HandleActivations)> {
  static const MethodInfo* get() {
    static auto* isDuel = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerTimelineMock*), "HandleActivations", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isDuel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerTimelineMock::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
