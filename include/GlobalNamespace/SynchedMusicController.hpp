// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Random
  class Random;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaPressableButton
  class GorillaPressableButton;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SynchedMusicController
  class SynchedMusicController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SynchedMusicController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SynchedMusicController*, "", "SynchedMusicController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: SynchedMusicController
  // [TokenAttribute] Offset: FFFFFFFF
  class SynchedMusicController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Int32 mySeed
    // Size: 0x4
    // Offset: 0x18
    int mySeed;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: mySeed and: randomNumberGenerator
    char __padding0[0x4] = {};
    // public System.Random randomNumberGenerator
    // Size: 0x8
    // Offset: 0x20
    ::System::Random* randomNumberGenerator;
    // Field size check
    static_assert(sizeof(::System::Random*) == 0x8);
    // public System.Int64 minimumWait
    // Size: 0x8
    // Offset: 0x28
    int64_t minimumWait;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Int32 randomInterval
    // Size: 0x4
    // Offset: 0x30
    int randomInterval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: randomInterval and: songStartTimes
    char __padding3[0x4] = {};
    // public System.Int64[] songStartTimes
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<int64_t> songStartTimes;
    // Field size check
    static_assert(sizeof(::ArrayW<int64_t>) == 0x8);
    // public System.Int32[] audioSourcesForPlaying
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<int> audioSourcesForPlaying;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32[] audioClipsForPlaying
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<int> audioClipsForPlaying;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.AudioSource[] audioSourceArray
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::AudioSource*> audioSourceArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioSource*>) == 0x8);
    // public UnityEngine.AudioClip[] songsArray
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::AudioClip*> songsArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // public System.Int32 lastPlayIndex
    // Size: 0x4
    // Offset: 0x68
    int lastPlayIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastPlayIndex and: currentTime
    char __padding10[0x4] = {};
    // public System.Int64 currentTime
    // Size: 0x8
    // Offset: 0x70
    int64_t currentTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public System.Boolean isMuted
    // Size: 0x1
    // Offset: 0x78
    bool isMuted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMuted and: totalLoopTime
    char __padding12[0x7] = {};
    // public System.Int64 totalLoopTime
    // Size: 0x8
    // Offset: 0x80
    int64_t totalLoopTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public GorillaPressableButton muteButton
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::GorillaPressableButton* muteButton;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaPressableButton*) == 0x8);
    // public System.Boolean usingMultipleSongs
    // Size: 0x1
    // Offset: 0x90
    bool usingMultipleSongs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean usingMultipleSources
    // Size: 0x1
    // Offset: 0x91
    bool usingMultipleSources;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean isPlayingCurrently
    // Size: 0x1
    // Offset: 0x92
    bool isPlayingCurrently;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testPlay
    // Size: 0x1
    // Offset: 0x93
    bool testPlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean twoLayer
    // Size: 0x1
    // Offset: 0x94
    bool twoLayer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: twoLayer and: locationName
    char __padding19[0x3] = {};
    // public System.String locationName
    // Size: 0x8
    // Offset: 0x98
    ::StringW locationName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 mySeed
    [[deprecated("Use field access instead!")]] int& dyn_mySeed();
    // Get instance field reference: public System.Random randomNumberGenerator
    [[deprecated("Use field access instead!")]] ::System::Random*& dyn_randomNumberGenerator();
    // Get instance field reference: public System.Int64 minimumWait
    [[deprecated("Use field access instead!")]] int64_t& dyn_minimumWait();
    // Get instance field reference: public System.Int32 randomInterval
    [[deprecated("Use field access instead!")]] int& dyn_randomInterval();
    // Get instance field reference: public System.Int64[] songStartTimes
    [[deprecated("Use field access instead!")]] ::ArrayW<int64_t>& dyn_songStartTimes();
    // Get instance field reference: public System.Int32[] audioSourcesForPlaying
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_audioSourcesForPlaying();
    // Get instance field reference: public System.Int32[] audioClipsForPlaying
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_audioClipsForPlaying();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.AudioSource[] audioSourceArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioSource*>& dyn_audioSourceArray();
    // Get instance field reference: public UnityEngine.AudioClip[] songsArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_songsArray();
    // Get instance field reference: public System.Int32 lastPlayIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastPlayIndex();
    // Get instance field reference: public System.Int64 currentTime
    [[deprecated("Use field access instead!")]] int64_t& dyn_currentTime();
    // Get instance field reference: public System.Boolean isMuted
    [[deprecated("Use field access instead!")]] bool& dyn_isMuted();
    // Get instance field reference: public System.Int64 totalLoopTime
    [[deprecated("Use field access instead!")]] int64_t& dyn_totalLoopTime();
    // Get instance field reference: public GorillaPressableButton muteButton
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaPressableButton*& dyn_muteButton();
    // Get instance field reference: public System.Boolean usingMultipleSongs
    [[deprecated("Use field access instead!")]] bool& dyn_usingMultipleSongs();
    // Get instance field reference: public System.Boolean usingMultipleSources
    [[deprecated("Use field access instead!")]] bool& dyn_usingMultipleSources();
    // Get instance field reference: public System.Boolean isPlayingCurrently
    [[deprecated("Use field access instead!")]] bool& dyn_isPlayingCurrently();
    // Get instance field reference: public System.Boolean testPlay
    [[deprecated("Use field access instead!")]] bool& dyn_testPlay();
    // Get instance field reference: public System.Boolean twoLayer
    [[deprecated("Use field access instead!")]] bool& dyn_twoLayer();
    // Get instance field reference: public System.String locationName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_locationName();
    // public System.Void .ctor()
    // Offset: 0xCC3AC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SynchedMusicController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SynchedMusicController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SynchedMusicController*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xCC302C
    void Start();
    // private System.Void Update()
    // Offset: 0xCC346C
    void Update();
    // private System.Void StartPlayingSong(System.Int64 timeStarted, System.Int64 currentTime)
    // Offset: 0xCC3A48
    void StartPlayingSong(int64_t timeStarted, int64_t currentTime);
    // private System.Void StartPlayingSongs(System.Int64 timeStarted, System.Int64 currentTime)
    // Offset: 0xCC38FC
    void StartPlayingSongs(int64_t timeStarted, int64_t currentTime);
    // private System.Void StartPlayingSong(System.Int64 timeStarted, System.Int64 currentTime, UnityEngine.AudioClip clipToPlay, UnityEngine.AudioSource sourceToPlay)
    // Offset: 0xCC39B4
    void StartPlayingSong(int64_t timeStarted, int64_t currentTime, ::UnityEngine::AudioClip* clipToPlay, ::UnityEngine::AudioSource* sourceToPlay);
    // private System.Void GenerateSongStartRandomTimes()
    // Offset: 0xCC31A4
    void GenerateSongStartRandomTimes();
    // public System.Void MuteAudio(GorillaPressableButton pressedButton)
    // Offset: 0xCC2E7C
    void MuteAudio(::GlobalNamespace::GorillaPressableButton* pressedButton);
  }; // SynchedMusicController
  #pragma pack(pop)
  static check_size<sizeof(SynchedMusicController), 152 + sizeof(::StringW)> __GlobalNamespace_SynchedMusicControllerSizeCheck;
  static_assert(sizeof(SynchedMusicController) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::StartPlayingSong
// Il2CppName: StartPlayingSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(int64_t, int64_t)>(&GlobalNamespace::SynchedMusicController::StartPlayingSong)> {
  static const MethodInfo* get() {
    static auto* timeStarted = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "StartPlayingSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStarted, currentTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::StartPlayingSongs
// Il2CppName: StartPlayingSongs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(int64_t, int64_t)>(&GlobalNamespace::SynchedMusicController::StartPlayingSongs)> {
  static const MethodInfo* get() {
    static auto* timeStarted = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "StartPlayingSongs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStarted, currentTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::StartPlayingSong
// Il2CppName: StartPlayingSong
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(int64_t, int64_t, ::UnityEngine::AudioClip*, ::UnityEngine::AudioSource*)>(&GlobalNamespace::SynchedMusicController::StartPlayingSong)> {
  static const MethodInfo* get() {
    static auto* timeStarted = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* currentTime = &::il2cpp_utils::GetClassFromName("System", "Int64")->byval_arg;
    static auto* clipToPlay = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* sourceToPlay = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "StartPlayingSong", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{timeStarted, currentTime, clipToPlay, sourceToPlay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::GenerateSongStartRandomTimes
// Il2CppName: GenerateSongStartRandomTimes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)()>(&GlobalNamespace::SynchedMusicController::GenerateSongStartRandomTimes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "GenerateSongStartRandomTimes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SynchedMusicController::MuteAudio
// Il2CppName: MuteAudio
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SynchedMusicController::*)(::GlobalNamespace::GorillaPressableButton*)>(&GlobalNamespace::SynchedMusicController::MuteAudio)> {
  static const MethodInfo* get() {
    static auto* pressedButton = &::il2cpp_utils::GetClassFromName("", "GorillaPressableButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SynchedMusicController*), "MuteAudio", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pressedButton});
  }
};
