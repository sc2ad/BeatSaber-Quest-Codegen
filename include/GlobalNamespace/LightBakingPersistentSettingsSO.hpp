// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Boolean
#include "System/Boolean.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BloomPrePassEffectSO
  class BloomPrePassEffectSO;
  // Forward declaring type: MainEffectSO
  class MainEffectSO;
  // Forward declaring type: MainSettingsModelSO
  class MainSettingsModelSO;
  // Forward declaring type: MirrorRendererGraphicsSettingsPresets
  class MirrorRendererGraphicsSettingsPresets;
  // Forward declaring type: MainEffectGraphicsSettingsPresetsSO
  class MainEffectGraphicsSettingsPresetsSO;
  // Forward declaring type: BloomPrePassGraphicsSettingsPresetsSO
  class BloomPrePassGraphicsSettingsPresetsSO;
  // Forward declaring type: MirrorRendererSO
  class MirrorRendererSO;
  // Forward declaring type: MainEffectContainerSO
  class MainEffectContainerSO;
  // Forward declaring type: BloomPrePassEffectContainerSO
  class BloomPrePassEffectContainerSO;
  // Forward declaring type: BakedLightDataLoader
  class BakedLightDataLoader;
  // Forward declaring type: BakedReflectionProbe
  class BakedReflectionProbe;
  // Forward declaring type: LightmapLightsWithIds
  class LightmapLightsWithIds;
  // Forward declaring type: FakeMirrorObjectsInstaller
  class FakeMirrorObjectsInstaller;
  // Forward declaring type: FakeMirrorSettings
  class FakeMirrorSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightBakingPersistentSettingsSO
  class LightBakingPersistentSettingsSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightBakingPersistentSettingsSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightBakingPersistentSettingsSO*, "", "LightBakingPersistentSettingsSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA8
  #pragma pack(push, 1)
  // Autogenerated type: LightBakingPersistentSettingsSO
  // [TokenAttribute] Offset: FFFFFFFF
  class LightBakingPersistentSettingsSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    public:
    // private System.Int32 _reflectionsCount
    // Size: 0x4
    // Offset: 0x18
    int reflectionsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: reflectionsCount and: bloomPrePassEffectToneMappingOff
    char __padding0[0x4] = {};
    // [SpaceAttribute] Offset: 0x10EE300
    // private BloomPrePassEffectSO _bloomPrePassEffectToneMappingOff
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BloomPrePassEffectSO* bloomPrePassEffectToneMappingOff;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassEffectSO*) == 0x8);
    // private MainEffectSO _mainEffectForBaking
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MainEffectSO* mainEffectForBaking;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainEffectSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x10EE348
    // private System.Single _colorFromSchemeAlpha
    // Size: 0x4
    // Offset: 0x30
    float colorFromSchemeAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: colorFromSchemeAlpha and: bakedLightEditorColors
    char __padding3[0x4] = {};
    // private UnityEngine.Color[] _bakedLightEditorColors
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Color> bakedLightEditorColors;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // [SpaceAttribute] Offset: 0x10EE390
    // private MainSettingsModelSO _mainSettingsModel
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::MainSettingsModelSO* mainSettingsModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainSettingsModelSO*) == 0x8);
    // private MirrorRendererGraphicsSettingsPresets _mirrorRendererGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::MirrorRendererGraphicsSettingsPresets* mirrorRendererGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*) == 0x8);
    // private MainEffectGraphicsSettingsPresetsSO _mainEffectGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::MainEffectGraphicsSettingsPresetsSO* mainEffectGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainEffectGraphicsSettingsPresetsSO*) == 0x8);
    // private BloomPrePassGraphicsSettingsPresetsSO _bloomPrePassGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO* bloomPrePassGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO*) == 0x8);
    // private MirrorRendererSO _mirrorRenderer
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::MirrorRendererSO* mirrorRenderer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirrorRendererSO*) == 0x8);
    // private MainEffectContainerSO _mainEffectContainer
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::MainEffectContainerSO* mainEffectContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainEffectContainerSO*) == 0x8);
    // private BloomPrePassEffectContainerSO _bloomPrePassEffectContainer
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::BloomPrePassEffectContainerSO* bloomPrePassEffectContainer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BloomPrePassEffectContainerSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x10EE428
    // private BakedLightDataLoader _bakedLightDataLoaderPrefab
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::BakedLightDataLoader* bakedLightDataLoaderPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakedLightDataLoader*) == 0x8);
    // private BakedReflectionProbe _bakedReflectionProbePrefab
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::BakedReflectionProbe* bakedReflectionProbePrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakedReflectionProbe*) == 0x8);
    // private LightmapLightsWithIds _lightmapLightsWithIds
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::LightmapLightsWithIds* lightmapLightsWithIds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightmapLightsWithIds*) == 0x8);
    // private FakeMirrorObjectsInstaller _fakeMirrorObjectsInstallerPrefab
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::FakeMirrorObjectsInstaller* fakeMirrorObjectsInstallerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FakeMirrorObjectsInstaller*) == 0x8);
    // private FakeMirrorSettings _fakeMirrorSettingsPrefab
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::FakeMirrorSettings* fakeMirrorSettingsPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FakeMirrorSettings*) == 0x8);
    // private UnityEngine.Material _defaultDepthOnlyWriteMaterialForFakeMirror
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Material* defaultDepthOnlyWriteMaterialForFakeMirror;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kDefaultMirrorGraphicsSettings
    static constexpr const int kDefaultMirrorGraphicsSettings = 0;
    // Get static field: static private System.Int32 kDefaultMirrorGraphicsSettings
    static int _get_kDefaultMirrorGraphicsSettings();
    // Set static field: static private System.Int32 kDefaultMirrorGraphicsSettings
    static void _set_kDefaultMirrorGraphicsSettings(int value);
    // static field const value: static private System.Int32 kDefaultMainEffectGraphicsSettings
    static constexpr const int kDefaultMainEffectGraphicsSettings = 1;
    // Get static field: static private System.Int32 kDefaultMainEffectGraphicsSettings
    static int _get_kDefaultMainEffectGraphicsSettings();
    // Set static field: static private System.Int32 kDefaultMainEffectGraphicsSettings
    static void _set_kDefaultMainEffectGraphicsSettings(int value);
    // static field const value: static private System.Int32 kDefaultAntiAliasingLevel
    static constexpr const int kDefaultAntiAliasingLevel = 8;
    // Get static field: static private System.Int32 kDefaultAntiAliasingLevel
    static int _get_kDefaultAntiAliasingLevel();
    // Set static field: static private System.Int32 kDefaultAntiAliasingLevel
    static void _set_kDefaultAntiAliasingLevel(int value);
    // static field const value: static private System.Single kDefaultVrResolutionScale
    static constexpr const float kDefaultVrResolutionScale = 1;
    // Get static field: static private System.Single kDefaultVrResolutionScale
    static float _get_kDefaultVrResolutionScale();
    // Set static field: static private System.Single kDefaultVrResolutionScale
    static void _set_kDefaultVrResolutionScale(float value);
    // static field const value: static private System.Single kDefaultMenuVRResolutionScaleMultiplier
    static constexpr const float kDefaultMenuVRResolutionScaleMultiplier = 1;
    // Get static field: static private System.Single kDefaultMenuVRResolutionScaleMultiplier
    static float _get_kDefaultMenuVRResolutionScaleMultiplier();
    // Set static field: static private System.Single kDefaultMenuVRResolutionScaleMultiplier
    static void _set_kDefaultMenuVRResolutionScaleMultiplier(float value);
    // static field const value: static private System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
    static constexpr const bool kDefaultUseFixedFoveatedRenderingDuringGameplay = false;
    // Get static field: static private System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
    static bool _get_kDefaultUseFixedFoveatedRenderingDuringGameplay();
    // Set static field: static private System.Boolean kDefaultUseFixedFoveatedRenderingDuringGameplay
    static void _set_kDefaultUseFixedFoveatedRenderingDuringGameplay(bool value);
    // static field const value: static private System.Boolean kDefaultBurnMarkTrailsEnabled
    static constexpr const bool kDefaultBurnMarkTrailsEnabled = true;
    // Get static field: static private System.Boolean kDefaultBurnMarkTrailsEnabled
    static bool _get_kDefaultBurnMarkTrailsEnabled();
    // Set static field: static private System.Boolean kDefaultBurnMarkTrailsEnabled
    static void _set_kDefaultBurnMarkTrailsEnabled(bool value);
    // static field const value: static private System.Boolean kDefaultScreenDisplacementEffectsEnabled
    static constexpr const bool kDefaultScreenDisplacementEffectsEnabled = true;
    // Get static field: static private System.Boolean kDefaultScreenDisplacementEffectsEnabled
    static bool _get_kDefaultScreenDisplacementEffectsEnabled();
    // Set static field: static private System.Boolean kDefaultScreenDisplacementEffectsEnabled
    static void _set_kDefaultScreenDisplacementEffectsEnabled(bool value);
    // Get instance field reference: private System.Int32 _reflectionsCount
    [[deprecated("Use field access instead!")]] int& dyn__reflectionsCount();
    // Get instance field reference: private BloomPrePassEffectSO _bloomPrePassEffectToneMappingOff
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassEffectSO*& dyn__bloomPrePassEffectToneMappingOff();
    // Get instance field reference: private MainEffectSO _mainEffectForBaking
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainEffectSO*& dyn__mainEffectForBaking();
    // Get instance field reference: private System.Single _colorFromSchemeAlpha
    [[deprecated("Use field access instead!")]] float& dyn__colorFromSchemeAlpha();
    // Get instance field reference: private UnityEngine.Color[] _bakedLightEditorColors
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn__bakedLightEditorColors();
    // Get instance field reference: private MainSettingsModelSO _mainSettingsModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainSettingsModelSO*& dyn__mainSettingsModel();
    // Get instance field reference: private MirrorRendererGraphicsSettingsPresets _mirrorRendererGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*& dyn__mirrorRendererGraphicsSettingsPresets();
    // Get instance field reference: private MainEffectGraphicsSettingsPresetsSO _mainEffectGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainEffectGraphicsSettingsPresetsSO*& dyn__mainEffectGraphicsSettingsPresets();
    // Get instance field reference: private BloomPrePassGraphicsSettingsPresetsSO _bloomPrePassGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassGraphicsSettingsPresetsSO*& dyn__bloomPrePassGraphicsSettingsPresets();
    // Get instance field reference: private MirrorRendererSO _mirrorRenderer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirrorRendererSO*& dyn__mirrorRenderer();
    // Get instance field reference: private MainEffectContainerSO _mainEffectContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainEffectContainerSO*& dyn__mainEffectContainer();
    // Get instance field reference: private BloomPrePassEffectContainerSO _bloomPrePassEffectContainer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BloomPrePassEffectContainerSO*& dyn__bloomPrePassEffectContainer();
    // Get instance field reference: private BakedLightDataLoader _bakedLightDataLoaderPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakedLightDataLoader*& dyn__bakedLightDataLoaderPrefab();
    // Get instance field reference: private BakedReflectionProbe _bakedReflectionProbePrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakedReflectionProbe*& dyn__bakedReflectionProbePrefab();
    // Get instance field reference: private LightmapLightsWithIds _lightmapLightsWithIds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightsWithIds*& dyn__lightmapLightsWithIds();
    // Get instance field reference: private FakeMirrorObjectsInstaller _fakeMirrorObjectsInstallerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FakeMirrorObjectsInstaller*& dyn__fakeMirrorObjectsInstallerPrefab();
    // Get instance field reference: private FakeMirrorSettings _fakeMirrorSettingsPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FakeMirrorSettings*& dyn__fakeMirrorSettingsPrefab();
    // Get instance field reference: private UnityEngine.Material _defaultDepthOnlyWriteMaterialForFakeMirror
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__defaultDepthOnlyWriteMaterialForFakeMirror();
    // public System.Int32 get_reflectionsCount()
    // Offset: 0x14B8584
    int get_reflectionsCount();
    // public System.Void set_reflectionsCount(System.Int32 value)
    // Offset: 0x14B858C
    void set_reflectionsCount(int value);
    // public System.Single get_colorFromSchemeAlpha()
    // Offset: 0x14B8594
    float get_colorFromSchemeAlpha();
    // public System.Void set_colorFromSchemeAlpha(System.Single value)
    // Offset: 0x14B859C
    void set_colorFromSchemeAlpha(float value);
    // public UnityEngine.Color[] get_bakedLightEditorColors()
    // Offset: 0x14B85A4
    ::ArrayW<::UnityEngine::Color> get_bakedLightEditorColors();
    // public UnityEngine.Material get_defaultDepthOnlyWriteMaterialForFakeMirror()
    // Offset: 0x14B85AC
    ::UnityEngine::Material* get_defaultDepthOnlyWriteMaterialForFakeMirror();
    // public System.Boolean get_mainEffectForBakingIsOn()
    // Offset: 0x14B85B4
    bool get_mainEffectForBakingIsOn();
    // public System.Void set_mainEffectForBakingIsOn(System.Boolean value)
    // Offset: 0x14B8634
    void set_mainEffectForBakingIsOn(bool value);
    // public BakedLightDataLoader get_bakedLightDataLoaderPrefab()
    // Offset: 0x14B86F8
    ::GlobalNamespace::BakedLightDataLoader* get_bakedLightDataLoaderPrefab();
    // public BakedReflectionProbe get_bakedReflectionProbePrefab()
    // Offset: 0x14B8700
    ::GlobalNamespace::BakedReflectionProbe* get_bakedReflectionProbePrefab();
    // public LightmapLightsWithIds get_lightmapLightsWithIds()
    // Offset: 0x14B8708
    ::GlobalNamespace::LightmapLightsWithIds* get_lightmapLightsWithIds();
    // public FakeMirrorObjectsInstaller get_fakeMirrorObjectsInstallerPrefab()
    // Offset: 0x14B8710
    ::GlobalNamespace::FakeMirrorObjectsInstaller* get_fakeMirrorObjectsInstallerPrefab();
    // public FakeMirrorSettings get_fakeMirrorSettingsPrefab()
    // Offset: 0x14B8718
    ::GlobalNamespace::FakeMirrorSettings* get_fakeMirrorSettingsPrefab();
    // public System.Void .ctor()
    // Offset: 0x14B8D08
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightBakingPersistentSettingsSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightBakingPersistentSettingsSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightBakingPersistentSettingsSO*, creationType>()));
    }
    // public System.Void SetGraphicsSettingsForBaking()
    // Offset: 0x14B8720
    void SetGraphicsSettingsForBaking();
    // public System.Void SetPlatformGraphics()
    // Offset: 0x14B8A24
    void SetPlatformGraphics();
    // public System.Void SetToneMappingOn(System.Boolean isOn)
    // Offset: 0x14B895C
    void SetToneMappingOn(bool isOn);
    // public System.Boolean IsToneMappingOn()
    // Offset: 0x14B8CD0
    bool IsToneMappingOn();
  }; // LightBakingPersistentSettingsSO
  #pragma pack(pop)
  static check_size<sizeof(LightBakingPersistentSettingsSO), 160 + sizeof(::UnityEngine::Material*)> __GlobalNamespace_LightBakingPersistentSettingsSOSizeCheck;
  static_assert(sizeof(LightBakingPersistentSettingsSO) == 0xA8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_reflectionsCount
// Il2CppName: get_reflectionsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_reflectionsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_reflectionsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::set_reflectionsCount
// Il2CppName: set_reflectionsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightBakingPersistentSettingsSO::*)(int)>(&GlobalNamespace::LightBakingPersistentSettingsSO::set_reflectionsCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "set_reflectionsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_colorFromSchemeAlpha
// Il2CppName: get_colorFromSchemeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_colorFromSchemeAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_colorFromSchemeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::set_colorFromSchemeAlpha
// Il2CppName: set_colorFromSchemeAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightBakingPersistentSettingsSO::*)(float)>(&GlobalNamespace::LightBakingPersistentSettingsSO::set_colorFromSchemeAlpha)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "set_colorFromSchemeAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightEditorColors
// Il2CppName: get_bakedLightEditorColors
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::UnityEngine::Color> (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightEditorColors)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_bakedLightEditorColors", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_defaultDepthOnlyWriteMaterialForFakeMirror
// Il2CppName: get_defaultDepthOnlyWriteMaterialForFakeMirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Material* (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_defaultDepthOnlyWriteMaterialForFakeMirror)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_defaultDepthOnlyWriteMaterialForFakeMirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_mainEffectForBakingIsOn
// Il2CppName: get_mainEffectForBakingIsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_mainEffectForBakingIsOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_mainEffectForBakingIsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::set_mainEffectForBakingIsOn
// Il2CppName: set_mainEffectForBakingIsOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightBakingPersistentSettingsSO::*)(bool)>(&GlobalNamespace::LightBakingPersistentSettingsSO::set_mainEffectForBakingIsOn)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "set_mainEffectForBakingIsOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightDataLoaderPrefab
// Il2CppName: get_bakedLightDataLoaderPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BakedLightDataLoader* (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedLightDataLoaderPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_bakedLightDataLoaderPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedReflectionProbePrefab
// Il2CppName: get_bakedReflectionProbePrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BakedReflectionProbe* (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_bakedReflectionProbePrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_bakedReflectionProbePrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_lightmapLightsWithIds
// Il2CppName: get_lightmapLightsWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LightmapLightsWithIds* (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_lightmapLightsWithIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_lightmapLightsWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorObjectsInstallerPrefab
// Il2CppName: get_fakeMirrorObjectsInstallerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FakeMirrorObjectsInstaller* (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorObjectsInstallerPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_fakeMirrorObjectsInstallerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorSettingsPrefab
// Il2CppName: get_fakeMirrorSettingsPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::FakeMirrorSettings* (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::get_fakeMirrorSettingsPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "get_fakeMirrorSettingsPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::SetGraphicsSettingsForBaking
// Il2CppName: SetGraphicsSettingsForBaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::SetGraphicsSettingsForBaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "SetGraphicsSettingsForBaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::SetPlatformGraphics
// Il2CppName: SetPlatformGraphics
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::SetPlatformGraphics)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "SetPlatformGraphics", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::SetToneMappingOn
// Il2CppName: SetToneMappingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightBakingPersistentSettingsSO::*)(bool)>(&GlobalNamespace::LightBakingPersistentSettingsSO::SetToneMappingOn)> {
  static const MethodInfo* get() {
    static auto* isOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "SetToneMappingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isOn});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightBakingPersistentSettingsSO::IsToneMappingOn
// Il2CppName: IsToneMappingOn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LightBakingPersistentSettingsSO::*)()>(&GlobalNamespace::LightBakingPersistentSettingsSO::IsToneMappingOn)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightBakingPersistentSettingsSO*), "IsToneMappingOn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
