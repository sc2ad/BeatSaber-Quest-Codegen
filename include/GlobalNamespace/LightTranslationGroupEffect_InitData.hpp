// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightTranslationGroupEffect
#include "GlobalNamespace/LightTranslationGroupEffect.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightTranslationGroupEffect::InitData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightTranslationGroupEffect::InitData*, "", "LightTranslationGroupEffect/InitData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: LightTranslationGroupEffect/InitData
  // [TokenAttribute] Offset: FFFFFFFF
  class LightTranslationGroupEffect::InitData : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Int32 groupId
    // Size: 0x4
    // Offset: 0x10
    int groupId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 elementId
    // Size: 0x4
    // Offset: 0x14
    int elementId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Boolean xMirrored
    // Size: 0x1
    // Offset: 0x18
    bool xMirrored;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean yMirrored
    // Size: 0x1
    // Offset: 0x19
    bool yMirrored;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean zMirrored
    // Size: 0x1
    // Offset: 0x1A
    bool zMirrored;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: zMirrored and: xTransform
    char __padding4[0x5] = {};
    // public readonly UnityEngine.Transform xTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* xTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public readonly UnityEngine.Transform yTransform
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Transform* yTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public readonly UnityEngine.Transform zTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* zTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public readonly UnityEngine.Vector2 xTranslationLimits
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 xTranslationLimits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly UnityEngine.Vector2 xDistributionLimits
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Vector2 xDistributionLimits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly UnityEngine.Vector2 yTranslationLimits
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Vector2 yTranslationLimits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly UnityEngine.Vector2 yDistributionLimits
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::Vector2 yDistributionLimits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly UnityEngine.Vector2 zTranslationLimits
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::Vector2 zTranslationLimits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // public readonly UnityEngine.Vector2 zDistributionLimits
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Vector2 zDistributionLimits;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    public:
    // Get instance field reference: public readonly System.Int32 groupId
    [[deprecated("Use field access instead!")]] int& dyn_groupId();
    // Get instance field reference: public readonly System.Int32 elementId
    [[deprecated("Use field access instead!")]] int& dyn_elementId();
    // Get instance field reference: public readonly System.Boolean xMirrored
    [[deprecated("Use field access instead!")]] bool& dyn_xMirrored();
    // Get instance field reference: public readonly System.Boolean yMirrored
    [[deprecated("Use field access instead!")]] bool& dyn_yMirrored();
    // Get instance field reference: public readonly System.Boolean zMirrored
    [[deprecated("Use field access instead!")]] bool& dyn_zMirrored();
    // Get instance field reference: public readonly UnityEngine.Transform xTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_xTransform();
    // Get instance field reference: public readonly UnityEngine.Transform yTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_yTransform();
    // Get instance field reference: public readonly UnityEngine.Transform zTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_zTransform();
    // Get instance field reference: public readonly UnityEngine.Vector2 xTranslationLimits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_xTranslationLimits();
    // Get instance field reference: public readonly UnityEngine.Vector2 xDistributionLimits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_xDistributionLimits();
    // Get instance field reference: public readonly UnityEngine.Vector2 yTranslationLimits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_yTranslationLimits();
    // Get instance field reference: public readonly UnityEngine.Vector2 yDistributionLimits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_yDistributionLimits();
    // Get instance field reference: public readonly UnityEngine.Vector2 zTranslationLimits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_zTranslationLimits();
    // Get instance field reference: public readonly UnityEngine.Vector2 zDistributionLimits
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_zDistributionLimits();
    // public System.Void .ctor(System.Int32 groupId, System.Int32 elementId, System.Boolean xMirrored, System.Boolean yMirrored, System.Boolean zMirrored, UnityEngine.Transform xTransform, UnityEngine.Transform yTransform, UnityEngine.Transform zTransform, UnityEngine.Vector2 xTranslationLimits, UnityEngine.Vector2 xDistributionLimits, UnityEngine.Vector2 yTranslationLimits, UnityEngine.Vector2 yDistributionLimits, UnityEngine.Vector2 zTranslationLimits, UnityEngine.Vector2 zDistributionLimits)
    // Offset: 0x151631C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightTranslationGroupEffect::InitData* New_ctor(int groupId, int elementId, bool xMirrored, bool yMirrored, bool zMirrored, ::UnityEngine::Transform* xTransform, ::UnityEngine::Transform* yTransform, ::UnityEngine::Transform* zTransform, ::UnityEngine::Vector2 xTranslationLimits, ::UnityEngine::Vector2 xDistributionLimits, ::UnityEngine::Vector2 yTranslationLimits, ::UnityEngine::Vector2 yDistributionLimits, ::UnityEngine::Vector2 zTranslationLimits, ::UnityEngine::Vector2 zDistributionLimits) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationGroupEffect::InitData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightTranslationGroupEffect::InitData*, creationType>(groupId, elementId, xMirrored, yMirrored, zMirrored, xTransform, yTransform, zTransform, xTranslationLimits, xDistributionLimits, yTranslationLimits, yDistributionLimits, zTranslationLimits, zDistributionLimits)));
    }
  }; // LightTranslationGroupEffect/InitData
  #pragma pack(pop)
  static check_size<sizeof(LightTranslationGroupEffect::InitData), 96 + sizeof(::UnityEngine::Vector2)> __GlobalNamespace_LightTranslationGroupEffect_InitDataSizeCheck;
  static_assert(sizeof(LightTranslationGroupEffect::InitData) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffect::InitData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
