// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PlatformNetworkPlayerModel
#include "GlobalNamespace/PlatformNetworkPlayerModel.hpp"
// Including type: Oculus.Platform.RoomJoinPolicy
#include "Oculus/Platform/RoomJoinPolicy.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPlatformUserModel
  class IPlatformUserModel;
  // Skipping declaration: INetworkPlayerModel because it is already included!
  // Forward declaring type: INetworkPlayer
  class INetworkPlayer;
  // Forward declaring type: OculusConnectionManager
  class OculusConnectionManager;
  // Forward declaring type: INetworkPlayerModelPartyConfig`1<T>
  template<typename T>
  class INetworkPlayerModelPartyConfig_1;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: RoomInviteNotification
  class RoomInviteNotification;
  // Forward declaring type: Room
  class Room;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OculusNetworkPlayerModel
  class OculusNetworkPlayerModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OculusNetworkPlayerModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OculusNetworkPlayerModel*, "", "OculusNetworkPlayerModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: OculusNetworkPlayerModel
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusNetworkPlayerModel : public ::GlobalNamespace::PlatformNetworkPlayerModel {
    public:
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer
    class OculusNetworkPlayer;
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::$Start$d__42
    struct $Start$d__42;
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass50_0
    class $$c__DisplayClass50_0;
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass51_0
    class $$c__DisplayClass51_0;
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::$HandleRoomInviteReceived$d__51
    struct $HandleRoomInviteReceived$d__51;
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass55_0
    class $$c__DisplayClass55_0;
    // Nested type: ::GlobalNamespace::OculusNetworkPlayerModel::$$c__DisplayClass64_0
    class $$c__DisplayClass64_0;
    public:
    // [InjectAttribute] Offset: 0x111DA04
    // private readonly IPlatformUserModel _platformUserModel
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::IPlatformUserModel* platformUserModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPlatformUserModel*) == 0x8);
    // private System.Single _lastRefreshTime
    // Size: 0x4
    // Offset: 0x98
    float lastRefreshTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isRefreshing
    // Size: 0x1
    // Offset: 0x9C
    bool isRefreshing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRefreshing and: localPlayer
    char __padding2[0x3] = {};
    // private OculusNetworkPlayerModel/OculusNetworkPlayer _localPlayer
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* localPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*) == 0x8);
    // private Oculus.Platform.RoomJoinPolicy _joinPolicy
    // Size: 0x4
    // Offset: 0xA8
    ::Oculus::Platform::RoomJoinPolicy joinPolicy;
    // Field size check
    static_assert(sizeof(::Oculus::Platform::RoomJoinPolicy) == 0x4);
    // private System.Boolean _partyEnabled
    // Size: 0x1
    // Offset: 0xAC
    bool partyEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _waitingOnRoomCreate
    // Size: 0x1
    // Offset: 0xAD
    bool waitingOnRoomCreate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: waitingOnRoomCreate and: roomDataStore
    char __padding6[0x2] = {};
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _roomDataStore
    // Size: 0x8
    // Offset: 0xB0
    ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>* roomDataStore;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<OculusNetworkPlayerModel/OculusNetworkPlayer> _partyPlayers
    // Size: 0x8
    // Offset: 0xB8
    ::System::Collections::Generic::List_1<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>* partyPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<OculusNetworkPlayerModel/OculusNetworkPlayer> _otherPlayers
    // Size: 0x8
    // Offset: 0xC0
    ::System::Collections::Generic::List_1<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>* otherPlayers;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>*) == 0x8);
    // private System.Action`1<System.Int32> partySizeChangedEvent
    // Size: 0x8
    // Offset: 0xC8
    ::System::Action_1<int>* partySizeChangedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<int>*) == 0x8);
    // private System.Action`1<INetworkPlayerModel> partyChangedEvent
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>* partyChangedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>*) == 0x8);
    // private System.Action`1<INetworkPlayer> inviteRequestedEvent
    // Size: 0x8
    // Offset: 0xD8
    ::System::Action_1<::GlobalNamespace::INetworkPlayer*>* inviteRequestedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::INetworkPlayer*>*) == 0x8);
    public:
    // static field const value: static private System.String kConnectionTypeKey
    static constexpr const char* kConnectionTypeKey = "connection";
    // Get static field: static private System.String kConnectionTypeKey
    static ::StringW _get_kConnectionTypeKey();
    // Set static field: static private System.String kConnectionTypeKey
    static void _set_kConnectionTypeKey(::StringW value);
    // static field const value: static private System.String kConnectionTypeOculus
    static constexpr const char* kConnectionTypeOculus = "oculus";
    // Get static field: static private System.String kConnectionTypeOculus
    static ::StringW _get_kConnectionTypeOculus();
    // Set static field: static private System.String kConnectionTypeOculus
    static void _set_kConnectionTypeOculus(::StringW value);
    // static field const value: static private System.String kConnectionTypeLiteNetLib
    static constexpr const char* kConnectionTypeLiteNetLib = "litenetlib";
    // Get static field: static private System.String kConnectionTypeLiteNetLib
    static ::StringW _get_kConnectionTypeLiteNetLib();
    // Set static field: static private System.String kConnectionTypeLiteNetLib
    static void _set_kConnectionTypeLiteNetLib(::StringW value);
    // static field const value: static private System.String kCurrentPartySizeKey
    static constexpr const char* kCurrentPartySizeKey = "currentPartySize";
    // Get static field: static private System.String kCurrentPartySizeKey
    static ::StringW _get_kCurrentPartySizeKey();
    // Set static field: static private System.String kCurrentPartySizeKey
    static void _set_kCurrentPartySizeKey(::StringW value);
    // static field const value: static private System.String kDifficultiesKey
    static constexpr const char* kDifficultiesKey = "difficulties";
    // Get static field: static private System.String kDifficultiesKey
    static ::StringW _get_kDifficultiesKey();
    // Set static field: static private System.String kDifficultiesKey
    static void _set_kDifficultiesKey(::StringW value);
    // static field const value: static private System.String kModifiersKey
    static constexpr const char* kModifiersKey = "modifiers";
    // Get static field: static private System.String kModifiersKey
    static ::StringW _get_kModifiersKey();
    // Set static field: static private System.String kModifiersKey
    static void _set_kModifiersKey(::StringW value);
    // static field const value: static private System.String kSongPacksKey
    static constexpr const char* kSongPacksKey = "songPacks";
    // Get static field: static private System.String kSongPacksKey
    static ::StringW _get_kSongPacksKey();
    // Set static field: static private System.String kSongPacksKey
    static void _set_kSongPacksKey(::StringW value);
    // static field const value: static private System.String kMaxPlayerCountKey
    static constexpr const char* kMaxPlayerCountKey = "maxPlayerCount";
    // Get static field: static private System.String kMaxPlayerCountKey
    static ::StringW _get_kMaxPlayerCountKey();
    // Set static field: static private System.String kMaxPlayerCountKey
    static void _set_kMaxPlayerCountKey(::StringW value);
    // static field const value: static private System.String kDiscoveryPolicyKey
    static constexpr const char* kDiscoveryPolicyKey = "discoveryPolicy";
    // Get static field: static private System.String kDiscoveryPolicyKey
    static ::StringW _get_kDiscoveryPolicyKey();
    // Set static field: static private System.String kDiscoveryPolicyKey
    static void _set_kDiscoveryPolicyKey(::StringW value);
    // static field const value: static private System.String kInvitePolicyKey
    static constexpr const char* kInvitePolicyKey = "invitePolicy";
    // Get static field: static private System.String kInvitePolicyKey
    static ::StringW _get_kInvitePolicyKey();
    // Set static field: static private System.String kInvitePolicyKey
    static void _set_kInvitePolicyKey(::StringW value);
    // static field const value: static private System.String kGameplayServerModeKey
    static constexpr const char* kGameplayServerModeKey = "gameplayServerMode";
    // Get static field: static private System.String kGameplayServerModeKey
    static ::StringW _get_kGameplayServerModeKey();
    // Set static field: static private System.String kGameplayServerModeKey
    static void _set_kGameplayServerModeKey(::StringW value);
    // static field const value: static private System.String kSongSelectionModeKey
    static constexpr const char* kSongSelectionModeKey = "songSelectionMode";
    // Get static field: static private System.String kSongSelectionModeKey
    static ::StringW _get_kSongSelectionModeKey();
    // Set static field: static private System.String kSongSelectionModeKey
    static void _set_kSongSelectionModeKey(::StringW value);
    // static field const value: static private System.String kGameplayServerControlSettingsKey
    static constexpr const char* kGameplayServerControlSettingsKey = "gameplayServerControlSettings";
    // Get static field: static private System.String kGameplayServerControlSettingsKey
    static ::StringW _get_kGameplayServerControlSettingsKey();
    // Set static field: static private System.String kGameplayServerControlSettingsKey
    static void _set_kGameplayServerControlSettingsKey(::StringW value);
    // static field const value: static private System.Single kAutoRefreshRate
    static constexpr const float kAutoRefreshRate = 30;
    // Get static field: static private System.Single kAutoRefreshRate
    static float _get_kAutoRefreshRate();
    // Set static field: static private System.Single kAutoRefreshRate
    static void _set_kAutoRefreshRate(float value);
    // Get instance field reference: private readonly IPlatformUserModel _platformUserModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPlatformUserModel*& dyn__platformUserModel();
    // Get instance field reference: private System.Single _lastRefreshTime
    [[deprecated("Use field access instead!")]] float& dyn__lastRefreshTime();
    // Get instance field reference: private System.Boolean _isRefreshing
    [[deprecated("Use field access instead!")]] bool& dyn__isRefreshing();
    // Get instance field reference: private OculusNetworkPlayerModel/OculusNetworkPlayer _localPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*& dyn__localPlayer();
    // Get instance field reference: private Oculus.Platform.RoomJoinPolicy _joinPolicy
    [[deprecated("Use field access instead!")]] ::Oculus::Platform::RoomJoinPolicy& dyn__joinPolicy();
    // Get instance field reference: private System.Boolean _partyEnabled
    [[deprecated("Use field access instead!")]] bool& dyn__partyEnabled();
    // Get instance field reference: private System.Boolean _waitingOnRoomCreate
    [[deprecated("Use field access instead!")]] bool& dyn__waitingOnRoomCreate();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,System.String> _roomDataStore
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::StringW>*& dyn__roomDataStore();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<OculusNetworkPlayerModel/OculusNetworkPlayer> _partyPlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>*& dyn__partyPlayers();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<OculusNetworkPlayerModel/OculusNetworkPlayer> _otherPlayers
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer*>*& dyn__otherPlayers();
    // Get instance field reference: private System.Action`1<System.Int32> partySizeChangedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<int>*& dyn_partySizeChangedEvent();
    // Get instance field reference: private System.Action`1<INetworkPlayerModel> partyChangedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>*& dyn_partyChangedEvent();
    // Get instance field reference: private System.Action`1<INetworkPlayer> inviteRequestedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::INetworkPlayer*>*& dyn_inviteRequestedEvent();
    // public INetworkPlayer get_localPlayer()
    // Offset: 0x1592D54
    ::GlobalNamespace::INetworkPlayer* get_localPlayer();
    // protected OculusConnectionManager get_oculusConnectionManager()
    // Offset: 0x15931C0
    ::GlobalNamespace::OculusConnectionManager* get_oculusConnectionManager();
    // private OculusNetworkPlayerModel/OculusNetworkPlayer GetPlayer(System.UInt64 id)
    // Offset: 0x15934E8
    ::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* GetPlayer(uint64_t id);
    // private OculusNetworkPlayerModel/OculusNetworkPlayer GetPlayer(System.String userId)
    // Offset: 0x1593618
    ::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* GetPlayer(::StringW userId);
    // private System.Boolean TryCreateRoom()
    // Offset: 0x1593758
    bool TryCreateRoom();
    // public System.String GetUserName(System.UInt64 id)
    // Offset: 0x1590214
    ::StringW GetUserName(uint64_t id);
    // private System.Threading.Tasks.Task`1<System.String> GetUserNameAsync(System.UInt64 id)
    // Offset: 0x1593984
    ::System::Threading::Tasks::Task_1<::StringW>* GetUserNameAsync(uint64_t id);
    // private System.Void HandleRoomInviteReceived(Oculus.Platform.Message`1<Oculus.Platform.Models.RoomInviteNotification> message)
    // Offset: 0x1593A94
    void HandleRoomInviteReceived(::Oculus::Platform::Message_1<::Oculus::Platform::Models::RoomInviteNotification*>* message);
    // private System.Void HandleRoomInviteAccepted(Oculus.Platform.Message`1<System.String> message)
    // Offset: 0x1593B58
    void HandleRoomInviteAccepted(::Oculus::Platform::Message_1<::StringW>* message);
    // private System.Void HandleRoomUpdate(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> message)
    // Offset: 0x1593B5C
    void HandleRoomUpdate(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* message);
    // private System.Void HandlePlayersChanged()
    // Offset: 0x159401C
    void HandlePlayersChanged();
    // public System.Void Refresh()
    // Offset: 0x159334C
    void Refresh();
    // private System.Void UpdateRoomDataStore()
    // Offset: 0x159468C
    void UpdateRoomDataStore();
    // private System.Void TryLeaveRoom()
    // Offset: 0x1594270
    void TryLeaveRoom();
    // private System.Void TryConnectToServer()
    // Offset: 0x1594180
    void TryConnectToServer();
    // public System.Threading.Tasks.Task`1<System.Boolean> ShouldAcceptConnectionFromPlayer(System.UInt64 userId)
    // Offset: 0x1590664
    ::System::Threading::Tasks::Task_1<bool>* ShouldAcceptConnectionFromPlayer(uint64_t userId);
    // private System.Void <TryCreateRoom>b__48_0(Oculus.Platform.Message`1<Oculus.Platform.Models.Room> result)
    // Offset: 0x15947C0
    void $TryCreateRoom$b__48_0(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>* result);
    // public override System.Boolean get_localPlayerIsPartyOwner()
    // Offset: 0x1592D5C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::get_localPlayerIsPartyOwner()
    bool get_localPlayerIsPartyOwner();
    // public override System.Int32 get_currentPartySize()
    // Offset: 0x1592D98
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Int32 BaseNetworkPlayerModel::get_currentPartySize()
    int get_currentPartySize();
    // public override System.Void add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0x1592DE8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void add_partySizeChangedEvent(::System::Action_1<int>* value);
    // public override System.Void remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0x1592E8C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void remove_partySizeChangedEvent(::System::Action_1<int>* value);
    // public override System.Void add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0x1592F30
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void add_partyChangedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>* value);
    // public override System.Void remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0x1592FD4
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void remove_partyChangedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>* value);
    // public override System.Void add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0x1593078
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_inviteRequestedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0x159311C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_inviteRequestedEvent(::System::Action_1<::GlobalNamespace::INetworkPlayer*>* value);
    // public System.Void .ctor()
    // Offset: 0x15946F8
    // Implemented from: PlatformNetworkPlayerModel
    // Base method: System.Void PlatformNetworkPlayerModel::.ctor()
    // Base method: System.Void BaseNetworkPlayerModel::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusNetworkPlayerModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusNetworkPlayerModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusNetworkPlayerModel*, creationType>()));
    }
    // protected override System.Void Start()
    // Offset: 0x1593218
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::Start()
    void Start();
    // protected override System.Void Update()
    // Offset: 0x15932D8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Update()
    void Update();
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetPartyPlayers()
    // Offset: 0x15934D8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetPartyPlayers()
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* GetPartyPlayers();
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetOtherPlayers()
    // Offset: 0x15934E0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetOtherPlayers()
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* GetOtherPlayers();
    // public override System.Boolean CreatePartyConnection(INetworkPlayerModelPartyConfig`1<T> createConfig)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::CreatePartyConnection(INetworkPlayerModelPartyConfig`1<T> createConfig)
    template<class T>
    bool CreatePartyConnection(::GlobalNamespace::INetworkPlayerModelPartyConfig_1<T>* createConfig) {
      static_assert(std::is_convertible_v<std::remove_pointer_t<T>, ::GlobalNamespace::INetworkPlayerModel>);
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusNetworkPlayerModel::CreatePartyConnection");
      auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "CreatePartyConnection", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(createConfig)})));
      auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___generic__method, createConfig);
    }
    // public override System.Void DestroyPartyConnection()
    // Offset: 0x1594244
    // Implemented from: PlatformNetworkPlayerModel
    // Base method: System.Void PlatformNetworkPlayerModel::DestroyPartyConnection()
    void DestroyPartyConnection();
    // protected override System.Void PlayerConnected(IConnectedPlayer connectedPlayer)
    // Offset: 0x1594428
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerConnected(IConnectedPlayer connectedPlayer)
    void PlayerConnected(::GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // protected override System.Void PlayerDisconnected(IConnectedPlayer connectedPlayer)
    // Offset: 0x15944FC
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerDisconnected(IConnectedPlayer connectedPlayer)
    void PlayerDisconnected(::GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // protected override System.Void PartySizeChanged(System.Int32 currentPartySize)
    // Offset: 0x15945E4
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PartySizeChanged(System.Int32 currentPartySize)
    void PartySizeChanged(int currentPartySize);
  }; // OculusNetworkPlayerModel
  #pragma pack(pop)
  static check_size<sizeof(OculusNetworkPlayerModel), 216 + sizeof(::System::Action_1<::GlobalNamespace::INetworkPlayer*>*)> __GlobalNamespace_OculusNetworkPlayerModelSizeCheck;
  static_assert(sizeof(OculusNetworkPlayerModel) == 0xE0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::INetworkPlayer* (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::get_localPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::get_oculusConnectionManager
// Il2CppName: get_oculusConnectionManager
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OculusConnectionManager* (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::get_oculusConnectionManager)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "get_oculusConnectionManager", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* (GlobalNamespace::OculusNetworkPlayerModel::*)(uint64_t)>(&GlobalNamespace::OculusNetworkPlayerModel::GetPlayer)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OculusNetworkPlayerModel::OculusNetworkPlayer* (GlobalNamespace::OculusNetworkPlayerModel::*)(::StringW)>(&GlobalNamespace::OculusNetworkPlayerModel::GetPlayer)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::TryCreateRoom
// Il2CppName: TryCreateRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::TryCreateRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "TryCreateRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::GetUserName
// Il2CppName: GetUserName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::OculusNetworkPlayerModel::*)(uint64_t)>(&GlobalNamespace::OculusNetworkPlayerModel::GetUserName)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "GetUserName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::GetUserNameAsync
// Il2CppName: GetUserNameAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::StringW>* (GlobalNamespace::OculusNetworkPlayerModel::*)(uint64_t)>(&GlobalNamespace::OculusNetworkPlayerModel::GetUserNameAsync)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "GetUserNameAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteReceived
// Il2CppName: HandleRoomInviteReceived
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::RoomInviteNotification*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteReceived)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "RoomInviteNotification")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "HandleRoomInviteReceived", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteAccepted
// Il2CppName: HandleRoomInviteAccepted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::Oculus::Platform::Message_1<::StringW>*)>(&GlobalNamespace::OculusNetworkPlayerModel::HandleRoomInviteAccepted)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "HandleRoomInviteAccepted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::HandleRoomUpdate
// Il2CppName: HandleRoomUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::HandleRoomUpdate)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "HandleRoomUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::HandlePlayersChanged
// Il2CppName: HandlePlayersChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::HandlePlayersChanged)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "HandlePlayersChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::UpdateRoomDataStore
// Il2CppName: UpdateRoomDataStore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::UpdateRoomDataStore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "UpdateRoomDataStore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::TryLeaveRoom
// Il2CppName: TryLeaveRoom
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::TryLeaveRoom)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "TryLeaveRoom", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::TryConnectToServer
// Il2CppName: TryConnectToServer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::TryConnectToServer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "TryConnectToServer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::ShouldAcceptConnectionFromPlayer
// Il2CppName: ShouldAcceptConnectionFromPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<bool>* (GlobalNamespace::OculusNetworkPlayerModel::*)(uint64_t)>(&GlobalNamespace::OculusNetworkPlayerModel::ShouldAcceptConnectionFromPlayer)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "ShouldAcceptConnectionFromPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::$TryCreateRoom$b__48_0
// Il2CppName: <TryCreateRoom>b__48_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::Oculus::Platform::Message_1<::Oculus::Platform::Models::Room*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::$TryCreateRoom$b__48_0)> {
  static const MethodInfo* get() {
    static auto* result = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("Oculus.Platform", "Message`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("Oculus.Platform.Models", "Room")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "<TryCreateRoom>b__48_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{result});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::get_localPlayerIsPartyOwner
// Il2CppName: get_localPlayerIsPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::get_localPlayerIsPartyOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "get_localPlayerIsPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::get_currentPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::add_partySizeChangedEvent
// Il2CppName: add_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::System::Action_1<int>*)>(&GlobalNamespace::OculusNetworkPlayerModel::add_partySizeChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "add_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::remove_partySizeChangedEvent
// Il2CppName: remove_partySizeChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::System::Action_1<int>*)>(&GlobalNamespace::OculusNetworkPlayerModel::remove_partySizeChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "remove_partySizeChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::add_partyChangedEvent
// Il2CppName: add_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::add_partyChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayerModel")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "add_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::remove_partyChangedEvent
// Il2CppName: remove_partyChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::System::Action_1<::GlobalNamespace::INetworkPlayerModel*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::remove_partyChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayerModel")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "remove_partyChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::add_inviteRequestedEvent
// Il2CppName: add_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::System::Action_1<::GlobalNamespace::INetworkPlayer*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::add_inviteRequestedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "add_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::remove_inviteRequestedEvent
// Il2CppName: remove_inviteRequestedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::System::Action_1<::GlobalNamespace::INetworkPlayer*>*)>(&GlobalNamespace::OculusNetworkPlayerModel::remove_inviteRequestedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "INetworkPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "remove_inviteRequestedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::GetPartyPlayers
// Il2CppName: GetPartyPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::GetPartyPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "GetPartyPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::GetOtherPlayers
// Il2CppName: GetOtherPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::INetworkPlayer*>* (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::GetOtherPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "GetOtherPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::CreatePartyConnection
// Il2CppName: CreatePartyConnection
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::DestroyPartyConnection
// Il2CppName: DestroyPartyConnection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)()>(&GlobalNamespace::OculusNetworkPlayerModel::DestroyPartyConnection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "DestroyPartyConnection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::PlayerConnected
// Il2CppName: PlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::OculusNetworkPlayerModel::PlayerConnected)> {
  static const MethodInfo* get() {
    static auto* connectedPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "PlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::PlayerDisconnected
// Il2CppName: PlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(::GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::OculusNetworkPlayerModel::PlayerDisconnected)> {
  static const MethodInfo* get() {
    static auto* connectedPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "PlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusNetworkPlayerModel::PartySizeChanged
// Il2CppName: PartySizeChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusNetworkPlayerModel::*)(int)>(&GlobalNamespace::OculusNetworkPlayerModel::PartySizeChanged)> {
  static const MethodInfo* get() {
    static auto* currentPartySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusNetworkPlayerModel*), "PartySizeChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{currentPartySize});
  }
};
