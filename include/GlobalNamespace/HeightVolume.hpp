// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: HeightVolume
  class HeightVolume;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::HeightVolume);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::HeightVolume*, "", "HeightVolume");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: HeightVolume
  // [TokenAttribute] Offset: FFFFFFFF
  class HeightVolume : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Transform heightTop
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Transform* heightTop;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform heightBottom
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* heightBottom;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Single baseVolume
    // Size: 0x4
    // Offset: 0x30
    float baseVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minVolume
    // Size: 0x4
    // Offset: 0x34
    float minVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform targetTransform
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Transform* targetTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Boolean invertHeightVol
    // Size: 0x1
    // Offset: 0x40
    bool invertHeightVol;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Transform heightTop
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_heightTop();
    // Get instance field reference: public UnityEngine.Transform heightBottom
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_heightBottom();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public System.Single baseVolume
    [[deprecated("Use field access instead!")]] float& dyn_baseVolume();
    // Get instance field reference: public System.Single minVolume
    [[deprecated("Use field access instead!")]] float& dyn_minVolume();
    // Get instance field reference: public UnityEngine.Transform targetTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_targetTransform();
    // Get instance field reference: public System.Boolean invertHeightVol
    [[deprecated("Use field access instead!")]] bool& dyn_invertHeightVol();
    // public System.Void .ctor()
    // Offset: 0xE8B180
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HeightVolume* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::HeightVolume::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HeightVolume*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0xE8AFE8
    void Update();
  }; // HeightVolume
  #pragma pack(pop)
  static check_size<sizeof(HeightVolume), 64 + sizeof(bool)> __GlobalNamespace_HeightVolumeSizeCheck;
  static_assert(sizeof(HeightVolume) == 0x41);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::HeightVolume::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::HeightVolume::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::HeightVolume::*)()>(&GlobalNamespace::HeightVolume::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::HeightVolume*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
