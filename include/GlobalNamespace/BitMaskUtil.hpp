// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BitMaskUtil
  class BitMaskUtil;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BitMaskUtil);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BitMaskUtil*, "", "BitMaskUtil");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: BitMaskUtil
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class BitMaskUtil : public ::Il2CppObject {
    public:
    // static public System.UInt32 NumberOfSetBits(System.UInt64 i)
    // Offset: 0x283DA18
    static uint NumberOfSetBits(uint64_t i);
    // static public System.UInt32 NumberOfSetBits(System.UInt32 i)
    // Offset: 0x2837CF4
    static uint NumberOfSetBits(uint i);
    // static public System.UInt64 ShiftLeft(in System.UInt64 value, in System.Int32 shift)
    // Offset: 0x283DA7C
    static uint64_t ShiftLeft(ByRef<uint64_t> value, ByRef<int> shift);
    // static public System.UInt64 ShiftRight(in System.UInt64 value, in System.Int32 shift)
    // Offset: 0x283DAD0
    static uint64_t ShiftRight(ByRef<uint64_t> value, ByRef<int> shift);
  }; // BitMaskUtil
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BitMaskUtil::NumberOfSetBits
// Il2CppName: NumberOfSetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint64_t)>(&GlobalNamespace::BitMaskUtil::NumberOfSetBits)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt64")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BitMaskUtil*), "NumberOfSetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BitMaskUtil::NumberOfSetBits
// Il2CppName: NumberOfSetBits
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (*)(uint)>(&GlobalNamespace::BitMaskUtil::NumberOfSetBits)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BitMaskUtil*), "NumberOfSetBits", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BitMaskUtil::ShiftLeft
// Il2CppName: ShiftLeft
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<uint64_t>, ByRef<int>)>(&GlobalNamespace::BitMaskUtil::ShiftLeft)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BitMaskUtil*), "ShiftLeft", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, shift});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BitMaskUtil::ShiftRight
// Il2CppName: ShiftRight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)(ByRef<uint64_t>, ByRef<int>)>(&GlobalNamespace::BitMaskUtil::ShiftRight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "UInt64")->this_arg;
    static auto* shift = &::il2cpp_utils::GetClassFromName("System", "Int32")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BitMaskUtil*), "ShiftRight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value, shift});
  }
};
