// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: AudioPlayerBase
#include "GlobalNamespace/AudioPlayerBase.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioManagerSO
  class AudioManagerSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SongPreviewPlayer
  class SongPreviewPlayer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SongPreviewPlayer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SongPreviewPlayer*, "", "SongPreviewPlayer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: SongPreviewPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class SongPreviewPlayer : public ::GlobalNamespace::AudioPlayerBase {
    public:
    // Nested type: ::GlobalNamespace::SongPreviewPlayer::InitData
    class InitData;
    // Nested type: ::GlobalNamespace::SongPreviewPlayer::AudioSourceParams
    class AudioSourceParams;
    // Nested type: ::GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController
    class AudioSourceVolumeController;
    // Nested type: ::GlobalNamespace::SongPreviewPlayer::$CrossFadeAfterDelayCoroutine$d__28
    class $CrossFadeAfterDelayCoroutine$d__28;
    public:
    // [RangeAttribute] Offset: 0x10D9878
    // private System.Int32 _channelsCount
    // Size: 0x4
    // Offset: 0x18
    int channelsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: channelsCount and: audioSourcePrefab
    char __padding0[0x4] = {};
    // private UnityEngine.AudioSource _audioSourcePrefab
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* audioSourcePrefab;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _defaultAudioClip
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioClip* defaultAudioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single _volume
    // Size: 0x4
    // Offset: 0x30
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _crossFadeToAnotherSongSpeed
    // Size: 0x4
    // Offset: 0x34
    float crossFadeToAnotherSongSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _crossFadeToDefaultSpeed
    // Size: 0x4
    // Offset: 0x38
    float crossFadeToDefaultSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadeInSpeed
    // Size: 0x4
    // Offset: 0x3C
    float fadeInSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x10D9918
    // private SongPreviewPlayer/AudioSourceParams _defaultAudioSourceParams
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SongPreviewPlayer::AudioSourceParams* defaultAudioSourceParams;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SongPreviewPlayer::AudioSourceParams*) == 0x8);
    // [SpaceAttribute] Offset: 0x10D9964
    // private SongPreviewPlayer/AudioSourceParams _othersAudioSourceParams
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::SongPreviewPlayer::AudioSourceParams* othersAudioSourceParams;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SongPreviewPlayer::AudioSourceParams*) == 0x8);
    // [InjectAttribute] Offset: 0x10D999C
    // private readonly SongPreviewPlayer/InitData _initData
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::SongPreviewPlayer::InitData* initData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SongPreviewPlayer::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0x10D99AC
    // private readonly AudioManagerSO _audioManager
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::AudioManagerSO* audioManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AudioManagerSO*) == 0x8);
    // private SongPreviewPlayer/AudioSourceVolumeController[] _audioSourceControllers
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController*> audioSourceControllers;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController*>) == 0x8);
    // private System.Int32 _activeChannel
    // Size: 0x4
    // Offset: 0x68
    int activeChannel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _timeToDefaultAudioTransition
    // Size: 0x4
    // Offset: 0x6C
    float timeToDefaultAudioTransition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _transitionAfterDelay
    // Size: 0x1
    // Offset: 0x70
    bool transitionAfterDelay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: transitionAfterDelay and: volumeScale
    char __padding14[0x3] = {};
    // private System.Single _volumeScale
    // Size: 0x4
    // Offset: 0x74
    float volumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadeSpeed
    // Size: 0x4
    // Offset: 0x78
    float fadeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _ambientVolumeScale
    // Size: 0x4
    // Offset: 0x7C
    float ambientVolumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isActiveChannelPaused
    // Size: 0x1
    // Offset: 0x80
    bool isActiveChannelPaused;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isActiveChannelPaused and: channelToFadeOutCallbackDictionary
    char __padding18[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Action> _channelToFadeOutCallbackDictionary
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::Dictionary_2<int, ::System::Action*>* channelToFadeOutCallbackDictionary;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Action*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _channelsCount
    [[deprecated("Use field access instead!")]] int& dyn__channelsCount();
    // Get instance field reference: private UnityEngine.AudioSource _audioSourcePrefab
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn__audioSourcePrefab();
    // Get instance field reference: private UnityEngine.AudioClip _defaultAudioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__defaultAudioClip();
    // Get instance field reference: private System.Single _volume
    [[deprecated("Use field access instead!")]] float& dyn__volume();
    // Get instance field reference: private System.Single _crossFadeToAnotherSongSpeed
    [[deprecated("Use field access instead!")]] float& dyn__crossFadeToAnotherSongSpeed();
    // Get instance field reference: private System.Single _crossFadeToDefaultSpeed
    [[deprecated("Use field access instead!")]] float& dyn__crossFadeToDefaultSpeed();
    // Get instance field reference: private System.Single _fadeInSpeed
    [[deprecated("Use field access instead!")]] float& dyn__fadeInSpeed();
    // Get instance field reference: private SongPreviewPlayer/AudioSourceParams _defaultAudioSourceParams
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPreviewPlayer::AudioSourceParams*& dyn__defaultAudioSourceParams();
    // Get instance field reference: private SongPreviewPlayer/AudioSourceParams _othersAudioSourceParams
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPreviewPlayer::AudioSourceParams*& dyn__othersAudioSourceParams();
    // Get instance field reference: private readonly SongPreviewPlayer/InitData _initData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SongPreviewPlayer::InitData*& dyn__initData();
    // Get instance field reference: private readonly AudioManagerSO _audioManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AudioManagerSO*& dyn__audioManager();
    // Get instance field reference: private SongPreviewPlayer/AudioSourceVolumeController[] _audioSourceControllers
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SongPreviewPlayer::AudioSourceVolumeController*>& dyn__audioSourceControllers();
    // Get instance field reference: private System.Int32 _activeChannel
    [[deprecated("Use field access instead!")]] int& dyn__activeChannel();
    // Get instance field reference: private System.Single _timeToDefaultAudioTransition
    [[deprecated("Use field access instead!")]] float& dyn__timeToDefaultAudioTransition();
    // Get instance field reference: private System.Boolean _transitionAfterDelay
    [[deprecated("Use field access instead!")]] bool& dyn__transitionAfterDelay();
    // Get instance field reference: private System.Single _volumeScale
    [[deprecated("Use field access instead!")]] float& dyn__volumeScale();
    // Get instance field reference: private System.Single _fadeSpeed
    [[deprecated("Use field access instead!")]] float& dyn__fadeSpeed();
    // Get instance field reference: private System.Single _ambientVolumeScale
    [[deprecated("Use field access instead!")]] float& dyn__ambientVolumeScale();
    // Get instance field reference: private System.Boolean _isActiveChannelPaused
    [[deprecated("Use field access instead!")]] bool& dyn__isActiveChannelPaused();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.Int32,System.Action> _channelToFadeOutCallbackDictionary
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::System::Action*>*& dyn__channelToFadeOutCallbackDictionary();
    // protected System.Void Awake()
    // Offset: 0x13EE318
    void Awake();
    // protected System.Void Start()
    // Offset: 0x13EE520
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0x13EE540
    void OnEnable();
    // private System.Collections.IEnumerator CrossFadeAfterDelayCoroutine(System.Single delay)
    // Offset: 0x13EE654
    ::System::Collections::IEnumerator* CrossFadeAfterDelayCoroutine(float delay);
    // protected System.Void OnDisable()
    // Offset: 0x13EE700
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x13EE7EC
    void Update();
    // public System.Void CrossfadeToDefault()
    // Offset: 0x13EED60
    void CrossfadeToDefault();
    // public System.Void CrossfadeToNewDefault(UnityEngine.AudioClip audioClip)
    // Offset: 0x13EEF3C
    void CrossfadeToNewDefault(::UnityEngine::AudioClip* audioClip);
    // public System.Void CrossfadeTo(UnityEngine.AudioClip audioClip, System.Single musicVolume, System.Single startTime, System.Single duration, System.Action onFadeOutCallback)
    // Offset: 0x13EF064
    void CrossfadeTo(::UnityEngine::AudioClip* audioClip, float musicVolume, float startTime, float duration, ::System::Action* onFadeOutCallback);
    // private System.Void CrossfadeTo(UnityEngine.AudioClip audioClip, System.Single musicVolume, System.Single startTime, System.Single duration, System.Boolean isDefault, System.Action onFadeOutCallback)
    // Offset: 0x13EEAA4
    void CrossfadeTo(::UnityEngine::AudioClip* audioClip, float musicVolume, float startTime, float duration, bool isDefault, ::System::Action* onFadeOutCallback);
    // private System.Void ReportChannelDidFadeOut(System.Int32 channel)
    // Offset: 0x13EEA00
    void ReportChannelDidFadeOut(int channel);
    // public override UnityEngine.AudioClip get_activeAudioClip()
    // Offset: 0x13EE2B8
    // Implemented from: AudioPlayerBase
    // Base method: UnityEngine.AudioClip AudioPlayerBase::get_activeAudioClip()
    ::UnityEngine::AudioClip* get_activeAudioClip();
    // public System.Void .ctor()
    // Offset: 0x13EF188
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SongPreviewPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SongPreviewPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SongPreviewPlayer*, creationType>()));
    }
    // public override System.Void PauseCurrentChannel()
    // Offset: 0x13EF070
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::PauseCurrentChannel()
    void PauseCurrentChannel();
    // public override System.Void UnPauseCurrentChannel()
    // Offset: 0x13EF0F0
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::UnPauseCurrentChannel()
    void UnPauseCurrentChannel();
    // public override System.Void FadeOut(System.Single duration)
    // Offset: 0x13EF16C
    // Implemented from: AudioPlayerBase
    // Base method: System.Void AudioPlayerBase::FadeOut(System.Single duration)
    void FadeOut(float duration);
  }; // SongPreviewPlayer
  #pragma pack(pop)
  static check_size<sizeof(SongPreviewPlayer), 136 + sizeof(::System::Collections::Generic::Dictionary_2<int, ::System::Action*>*)> __GlobalNamespace_SongPreviewPlayerSizeCheck;
  static_assert(sizeof(SongPreviewPlayer) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::CrossFadeAfterDelayCoroutine
// Il2CppName: CrossFadeAfterDelayCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SongPreviewPlayer::*)(float)>(&GlobalNamespace::SongPreviewPlayer::CrossFadeAfterDelayCoroutine)> {
  static const MethodInfo* get() {
    static auto* delay = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "CrossFadeAfterDelayCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{delay});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::CrossfadeToDefault
// Il2CppName: CrossfadeToDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::CrossfadeToDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "CrossfadeToDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::CrossfadeToNewDefault
// Il2CppName: CrossfadeToNewDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)(::UnityEngine::AudioClip*)>(&GlobalNamespace::SongPreviewPlayer::CrossfadeToNewDefault)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "CrossfadeToNewDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::CrossfadeTo
// Il2CppName: CrossfadeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)(::UnityEngine::AudioClip*, float, float, float, ::System::Action*)>(&GlobalNamespace::SongPreviewPlayer::CrossfadeTo)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* musicVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* onFadeOutCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "CrossfadeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip, musicVolume, startTime, duration, onFadeOutCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::CrossfadeTo
// Il2CppName: CrossfadeTo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)(::UnityEngine::AudioClip*, float, float, float, bool, ::System::Action*)>(&GlobalNamespace::SongPreviewPlayer::CrossfadeTo)> {
  static const MethodInfo* get() {
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* musicVolume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* isDefault = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* onFadeOutCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "CrossfadeTo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{audioClip, musicVolume, startTime, duration, isDefault, onFadeOutCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::ReportChannelDidFadeOut
// Il2CppName: ReportChannelDidFadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)(int)>(&GlobalNamespace::SongPreviewPlayer::ReportChannelDidFadeOut)> {
  static const MethodInfo* get() {
    static auto* channel = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "ReportChannelDidFadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{channel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::get_activeAudioClip
// Il2CppName: get_activeAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::get_activeAudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "get_activeAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::PauseCurrentChannel
// Il2CppName: PauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::PauseCurrentChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "PauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::UnPauseCurrentChannel
// Il2CppName: UnPauseCurrentChannel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)()>(&GlobalNamespace::SongPreviewPlayer::UnPauseCurrentChannel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "UnPauseCurrentChannel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SongPreviewPlayer::FadeOut
// Il2CppName: FadeOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SongPreviewPlayer::*)(float)>(&GlobalNamespace::SongPreviewPlayer::FadeOut)> {
  static const MethodInfo* get() {
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SongPreviewPlayer*), "FadeOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{duration});
  }
};
