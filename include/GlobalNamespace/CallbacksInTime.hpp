// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueTuple`2
#include "System/ValueTuple_2.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDataItem
  class BeatmapDataItem;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CallbacksInTime
  class CallbacksInTime;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CallbacksInTime);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CallbacksInTime*, "", "CallbacksInTime");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CallbacksInTime
  // [TokenAttribute] Offset: FFFFFFFF
  class CallbacksInTime : public ::Il2CppObject {
    public:
    public:
    // public System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> lastProcessedNode
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>* lastProcessedNode;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*) == 0x8);
    // public readonly System.Single aheadTime
    // Size: 0x4
    // Offset: 0x18
    float aheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: aheadTime and: beatmapEventDataForCallbacksAfterNodeRemoval
    char __padding1[0x4] = {};
    // public BeatmapEventData beatmapEventDataForCallbacksAfterNodeRemoval
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapEventData* beatmapEventDataForCallbacksAfterNodeRemoval;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapEventData*) == 0x8);
    // [TupleElementNamesAttribute] Offset: 0x111E954
    // private readonly System.Collections.Generic.Dictionary`2<System.ValueTuple`2<System.Type,System.Int32>,System.Collections.Generic.List`1<BeatmapDataCallbackWrapper>> _callbacksWithSubtypeIdentifier
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::System::ValueTuple_2<::System::Type*, int>, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>* callbacksWithSubtypeIdentifier;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::ValueTuple_2<::System::Type*, int>, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<BeatmapDataCallbackWrapper>> _callbacks
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>* callbacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>*) == 0x8);
    public:
    // Get instance field reference: public System.Collections.Generic.LinkedListNode`1<BeatmapDataItem> lastProcessedNode
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapDataItem*>*& dyn_lastProcessedNode();
    // Get instance field reference: public readonly System.Single aheadTime
    [[deprecated("Use field access instead!")]] float& dyn_aheadTime();
    // Get instance field reference: public BeatmapEventData beatmapEventDataForCallbacksAfterNodeRemoval
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventData*& dyn_beatmapEventDataForCallbacksAfterNodeRemoval();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.ValueTuple`2<System.Type,System.Int32>,System.Collections.Generic.List`1<BeatmapDataCallbackWrapper>> _callbacksWithSubtypeIdentifier
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::ValueTuple_2<::System::Type*, int>, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>*& dyn__callbacksWithSubtypeIdentifier();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Type,System.Collections.Generic.List`1<BeatmapDataCallbackWrapper>> _callbacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>*& dyn__callbacks();
    // public System.Boolean get_isEmpty()
    // Offset: 0x13F4CF8
    bool get_isEmpty();
    // public System.Void .ctor(System.Single aheadTime)
    // Offset: 0x13F4D80
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CallbacksInTime* New_ctor(float aheadTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CallbacksInTime::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CallbacksInTime*, creationType>(aheadTime)));
    }
    // public System.Void AddCallback(BeatmapDataCallbackWrapper callbackWrapper)
    // Offset: 0x13F4E2C
    void AddCallback(::GlobalNamespace::BeatmapDataCallbackWrapper* callbackWrapper);
    // public System.Void RemoveCallback(BeatmapDataCallbackWrapper callbackWrapper)
    // Offset: 0x13F5078
    void RemoveCallback(::GlobalNamespace::BeatmapDataCallbackWrapper* callbackWrapper);
    // public System.Void CallCallbacks(BeatmapDataItem beatmapDataItem)
    // Offset: 0x13F5234
    void CallCallbacks(::GlobalNamespace::BeatmapDataItem* beatmapDataItem);
    // private System.Void CallCallbacks(System.Type beatmapEventDataType, BeatmapDataItem beatmapDataItem)
    // Offset: 0x13F5318
    void CallCallbacks(::System::Type* beatmapEventDataType, ::GlobalNamespace::BeatmapDataItem* beatmapDataItem);
  }; // CallbacksInTime
  #pragma pack(pop)
  static check_size<sizeof(CallbacksInTime), 48 + sizeof(::System::Collections::Generic::Dictionary_2<::System::Type*, ::System::Collections::Generic::List_1<::GlobalNamespace::BeatmapDataCallbackWrapper*>*>*)> __GlobalNamespace_CallbacksInTimeSizeCheck;
  static_assert(sizeof(CallbacksInTime) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CallbacksInTime::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CallbacksInTime::*)()>(&GlobalNamespace::CallbacksInTime::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CallbacksInTime*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CallbacksInTime::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CallbacksInTime::AddCallback
// Il2CppName: AddCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CallbacksInTime::*)(::GlobalNamespace::BeatmapDataCallbackWrapper*)>(&GlobalNamespace::CallbacksInTime::AddCallback)> {
  static const MethodInfo* get() {
    static auto* callbackWrapper = &::il2cpp_utils::GetClassFromName("", "BeatmapDataCallbackWrapper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CallbacksInTime*), "AddCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackWrapper});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CallbacksInTime::RemoveCallback
// Il2CppName: RemoveCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CallbacksInTime::*)(::GlobalNamespace::BeatmapDataCallbackWrapper*)>(&GlobalNamespace::CallbacksInTime::RemoveCallback)> {
  static const MethodInfo* get() {
    static auto* callbackWrapper = &::il2cpp_utils::GetClassFromName("", "BeatmapDataCallbackWrapper")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CallbacksInTime*), "RemoveCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackWrapper});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CallbacksInTime::CallCallbacks
// Il2CppName: CallCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CallbacksInTime::*)(::GlobalNamespace::BeatmapDataItem*)>(&GlobalNamespace::CallbacksInTime::CallCallbacks)> {
  static const MethodInfo* get() {
    static auto* beatmapDataItem = &::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CallbacksInTime*), "CallCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapDataItem});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CallbacksInTime::CallCallbacks
// Il2CppName: CallCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CallbacksInTime::*)(::System::Type*, ::GlobalNamespace::BeatmapDataItem*)>(&GlobalNamespace::CallbacksInTime::CallCallbacks)> {
  static const MethodInfo* get() {
    static auto* beatmapEventDataType = &::il2cpp_utils::GetClassFromName("System", "Type")->byval_arg;
    static auto* beatmapDataItem = &::il2cpp_utils::GetClassFromName("", "BeatmapDataItem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CallbacksInTime*), "CallCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventDataType, beatmapDataItem});
  }
};
