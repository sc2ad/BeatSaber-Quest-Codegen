// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRMixedRealityCaptureConfiguration
#include "GlobalNamespace/OVRMixedRealityCaptureConfiguration.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager_CompositionMethod.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
#include "GlobalNamespace/OVRManager_CameraDevice.hpp"
// Including type: OVRManager/DepthQuality
#include "GlobalNamespace/OVRManager_DepthQuality.hpp"
// Including type: OVRManager/VirtualGreenScreenType
#include "GlobalNamespace/OVRManager_VirtualGreenScreenType.hpp"
// Including type: OVRManager/MrcActivationMode
#include "GlobalNamespace/OVRManager_MrcActivationMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
  // Forward declaring type: InstantiateMrcCameraDelegate
  class OVRManager_InstantiateMrcCameraDelegate;
  // Forward declaring type: MrcCameraType
  struct OVRManager_MrcCameraType;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OculusMRCManager
  class OculusMRCManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OculusMRCManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OculusMRCManager*, "", "OculusMRCManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: OculusMRCManager
  // [TokenAttribute] Offset: FFFFFFFF
  class OculusMRCManager : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::OVRMixedRealityCaptureConfiguration*/ {
    public:
    public:
    // [InjectAttribute] Offset: 0x10F5EB0
    // private IVRPlatformHelper _vrPlatformHelper
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::IVRPlatformHelper* vrPlatformHelper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IVRPlatformHelper*) == 0x8);
    // private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityBackgroundCameraGameObject
    // Size: 0x8
    // Offset: 0x20
    ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityBackgroundCameraGameObject;
    // Field size check
    static_assert(sizeof(::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*) == 0x8);
    // private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityForegroundCameraGameObject
    // Size: 0x8
    // Offset: 0x28
    ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityForegroundCameraGameObject;
    // Field size check
    static_assert(sizeof(::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*) == 0x8);
    // private System.Boolean <enableMixedReality>k__BackingField
    // Size: 0x1
    // Offset: 0x30
    bool enableMixedReality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableMixedReality and: extraHiddenLayers
    char __padding3[0x3] = {};
    // private UnityEngine.LayerMask <extraHiddenLayers>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    ::UnityEngine::LayerMask extraHiddenLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private UnityEngine.LayerMask <extraVisibleLayers>k__BackingField
    // Size: 0x4
    // Offset: 0x38
    ::UnityEngine::LayerMask extraVisibleLayers;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // private System.Boolean <dynamicCullingMask>k__BackingField
    // Size: 0x1
    // Offset: 0x3C
    bool dynamicCullingMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dynamicCullingMask and: compositionMethod
    char __padding6[0x3] = {};
    // private OVRManager/CompositionMethod <compositionMethod>k__BackingField
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::OVRManager_CompositionMethod compositionMethod;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_CompositionMethod) == 0x4);
    // private UnityEngine.Color <externalCompositionBackdropColorRift>k__BackingField
    // Size: 0x10
    // Offset: 0x44
    ::UnityEngine::Color externalCompositionBackdropColorRift;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private UnityEngine.Color <externalCompositionBackdropColorQuest>k__BackingField
    // Size: 0x10
    // Offset: 0x54
    ::UnityEngine::Color externalCompositionBackdropColorQuest;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private OVRManager/CameraDevice <capturingCameraDevice>k__BackingField
    // Size: 0x4
    // Offset: 0x64
    ::GlobalNamespace::OVRManager_CameraDevice capturingCameraDevice;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_CameraDevice) == 0x4);
    // private System.Boolean <flipCameraFrameHorizontally>k__BackingField
    // Size: 0x1
    // Offset: 0x68
    bool flipCameraFrameHorizontally;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <flipCameraFrameVertically>k__BackingField
    // Size: 0x1
    // Offset: 0x69
    bool flipCameraFrameVertically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipCameraFrameVertically and: handPoseStateLatency
    char __padding12[0x2] = {};
    // private System.Single <handPoseStateLatency>k__BackingField
    // Size: 0x4
    // Offset: 0x6C
    float handPoseStateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <sandwichCompositionRenderLatency>k__BackingField
    // Size: 0x4
    // Offset: 0x70
    float sandwichCompositionRenderLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 <sandwichCompositionBufferedFrames>k__BackingField
    // Size: 0x4
    // Offset: 0x74
    int sandwichCompositionBufferedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Color <chromaKeyColor>k__BackingField
    // Size: 0x10
    // Offset: 0x78
    ::UnityEngine::Color chromaKeyColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // private System.Single <chromaKeySimilarity>k__BackingField
    // Size: 0x4
    // Offset: 0x88
    float chromaKeySimilarity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <chromaKeySmoothRange>k__BackingField
    // Size: 0x4
    // Offset: 0x8C
    float chromaKeySmoothRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <chromaKeySpillRange>k__BackingField
    // Size: 0x4
    // Offset: 0x90
    float chromaKeySpillRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <useDynamicLighting>k__BackingField
    // Size: 0x1
    // Offset: 0x94
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: depthQuality
    char __padding20[0x3] = {};
    // private OVRManager/DepthQuality <depthQuality>k__BackingField
    // Size: 0x4
    // Offset: 0x98
    ::GlobalNamespace::OVRManager_DepthQuality depthQuality;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_DepthQuality) == 0x4);
    // private System.Single <dynamicLightingSmoothFactor>k__BackingField
    // Size: 0x4
    // Offset: 0x9C
    float dynamicLightingSmoothFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <dynamicLightingDepthVariationClampingValue>k__BackingField
    // Size: 0x4
    // Offset: 0xA0
    float dynamicLightingDepthVariationClampingValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OVRManager/VirtualGreenScreenType <virtualGreenScreenType>k__BackingField
    // Size: 0x4
    // Offset: 0xA4
    ::GlobalNamespace::OVRManager_VirtualGreenScreenType virtualGreenScreenType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_VirtualGreenScreenType) == 0x4);
    // private System.Single <virtualGreenScreenTopY>k__BackingField
    // Size: 0x4
    // Offset: 0xA8
    float virtualGreenScreenTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <virtualGreenScreenBottomY>k__BackingField
    // Size: 0x4
    // Offset: 0xAC
    float virtualGreenScreenBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean <virtualGreenScreenApplyDepthCulling>k__BackingField
    // Size: 0x1
    // Offset: 0xB0
    bool virtualGreenScreenApplyDepthCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: virtualGreenScreenApplyDepthCulling and: virtualGreenScreenDepthTolerance
    char __padding27[0x3] = {};
    // private System.Single <virtualGreenScreenDepthTolerance>k__BackingField
    // Size: 0x4
    // Offset: 0xB4
    float virtualGreenScreenDepthTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private OVRManager/MrcActivationMode <mrcActivationMode>k__BackingField
    // Size: 0x4
    // Offset: 0xB8
    ::GlobalNamespace::OVRManager_MrcActivationMode mrcActivationMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_MrcActivationMode) == 0x4);
    // Padding between fields: mrcActivationMode and: instantiateMixedRealityCameraGameObject
    char __padding29[0x4] = {};
    // private OVRManager/InstantiateMrcCameraDelegate _instantiateMixedRealityCameraGameObject
    // Size: 0x8
    // Offset: 0xC0
    ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* instantiateMixedRealityCameraGameObject;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::OVRMixedRealityCaptureConfiguration
    operator ::GlobalNamespace::OVRMixedRealityCaptureConfiguration() noexcept {
      return *reinterpret_cast<::GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(this);
    }
    // Creating interface conversion operator: i_OVRMixedRealityCaptureConfiguration
    inline ::GlobalNamespace::OVRMixedRealityCaptureConfiguration* i_OVRMixedRealityCaptureConfiguration() noexcept {
      return reinterpret_cast<::GlobalNamespace::OVRMixedRealityCaptureConfiguration*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private IVRPlatformHelper _vrPlatformHelper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& dyn__vrPlatformHelper();
    // Get instance field reference: private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityBackgroundCameraGameObject
    [[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*& dyn__instantiateMixedRealityBackgroundCameraGameObject();
    // Get instance field reference: private System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> _instantiateMixedRealityForegroundCameraGameObject
    [[deprecated("Use field access instead!")]] ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*& dyn__instantiateMixedRealityForegroundCameraGameObject();
    // Get instance field reference: private System.Boolean <enableMixedReality>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$enableMixedReality$k__BackingField();
    // Get instance field reference: private UnityEngine.LayerMask <extraHiddenLayers>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_$extraHiddenLayers$k__BackingField();
    // Get instance field reference: private UnityEngine.LayerMask <extraVisibleLayers>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_$extraVisibleLayers$k__BackingField();
    // Get instance field reference: private System.Boolean <dynamicCullingMask>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$dynamicCullingMask$k__BackingField();
    // Get instance field reference: private OVRManager/CompositionMethod <compositionMethod>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CompositionMethod& dyn_$compositionMethod$k__BackingField();
    // Get instance field reference: private UnityEngine.Color <externalCompositionBackdropColorRift>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$externalCompositionBackdropColorRift$k__BackingField();
    // Get instance field reference: private UnityEngine.Color <externalCompositionBackdropColorQuest>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$externalCompositionBackdropColorQuest$k__BackingField();
    // Get instance field reference: private OVRManager/CameraDevice <capturingCameraDevice>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_CameraDevice& dyn_$capturingCameraDevice$k__BackingField();
    // Get instance field reference: private System.Boolean <flipCameraFrameHorizontally>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$flipCameraFrameHorizontally$k__BackingField();
    // Get instance field reference: private System.Boolean <flipCameraFrameVertically>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$flipCameraFrameVertically$k__BackingField();
    // Get instance field reference: private System.Single <handPoseStateLatency>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$handPoseStateLatency$k__BackingField();
    // Get instance field reference: private System.Single <sandwichCompositionRenderLatency>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$sandwichCompositionRenderLatency$k__BackingField();
    // Get instance field reference: private System.Int32 <sandwichCompositionBufferedFrames>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$sandwichCompositionBufferedFrames$k__BackingField();
    // Get instance field reference: private UnityEngine.Color <chromaKeyColor>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_$chromaKeyColor$k__BackingField();
    // Get instance field reference: private System.Single <chromaKeySimilarity>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$chromaKeySimilarity$k__BackingField();
    // Get instance field reference: private System.Single <chromaKeySmoothRange>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$chromaKeySmoothRange$k__BackingField();
    // Get instance field reference: private System.Single <chromaKeySpillRange>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$chromaKeySpillRange$k__BackingField();
    // Get instance field reference: private System.Boolean <useDynamicLighting>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$useDynamicLighting$k__BackingField();
    // Get instance field reference: private OVRManager/DepthQuality <depthQuality>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_DepthQuality& dyn_$depthQuality$k__BackingField();
    // Get instance field reference: private System.Single <dynamicLightingSmoothFactor>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$dynamicLightingSmoothFactor$k__BackingField();
    // Get instance field reference: private System.Single <dynamicLightingDepthVariationClampingValue>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$dynamicLightingDepthVariationClampingValue$k__BackingField();
    // Get instance field reference: private OVRManager/VirtualGreenScreenType <virtualGreenScreenType>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_VirtualGreenScreenType& dyn_$virtualGreenScreenType$k__BackingField();
    // Get instance field reference: private System.Single <virtualGreenScreenTopY>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$virtualGreenScreenTopY$k__BackingField();
    // Get instance field reference: private System.Single <virtualGreenScreenBottomY>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$virtualGreenScreenBottomY$k__BackingField();
    // Get instance field reference: private System.Boolean <virtualGreenScreenApplyDepthCulling>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$virtualGreenScreenApplyDepthCulling$k__BackingField();
    // Get instance field reference: private System.Single <virtualGreenScreenDepthTolerance>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$virtualGreenScreenDepthTolerance$k__BackingField();
    // Get instance field reference: private OVRManager/MrcActivationMode <mrcActivationMode>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_MrcActivationMode& dyn_$mrcActivationMode$k__BackingField();
    // Get instance field reference: private OVRManager/InstantiateMrcCameraDelegate _instantiateMixedRealityCameraGameObject
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*& dyn__instantiateMixedRealityCameraGameObject();
    // public System.Boolean get_enableMixedReality()
    // Offset: 0x16419F8
    bool get_enableMixedReality();
    // public System.Void set_enableMixedReality(System.Boolean value)
    // Offset: 0x1641A00
    void set_enableMixedReality(bool value);
    // public UnityEngine.LayerMask get_extraHiddenLayers()
    // Offset: 0x1641A0C
    ::UnityEngine::LayerMask get_extraHiddenLayers();
    // public System.Void set_extraHiddenLayers(UnityEngine.LayerMask value)
    // Offset: 0x1641A14
    void set_extraHiddenLayers(::UnityEngine::LayerMask value);
    // public UnityEngine.LayerMask get_extraVisibleLayers()
    // Offset: 0x1641A1C
    ::UnityEngine::LayerMask get_extraVisibleLayers();
    // public System.Void set_extraVisibleLayers(UnityEngine.LayerMask value)
    // Offset: 0x1641A24
    void set_extraVisibleLayers(::UnityEngine::LayerMask value);
    // public System.Boolean get_dynamicCullingMask()
    // Offset: 0x1641A2C
    bool get_dynamicCullingMask();
    // public System.Void set_dynamicCullingMask(System.Boolean value)
    // Offset: 0x1641A34
    void set_dynamicCullingMask(bool value);
    // public OVRManager/CompositionMethod get_compositionMethod()
    // Offset: 0x1641A40
    ::GlobalNamespace::OVRManager_CompositionMethod get_compositionMethod();
    // public System.Void set_compositionMethod(OVRManager/CompositionMethod value)
    // Offset: 0x1641A48
    void set_compositionMethod(::GlobalNamespace::OVRManager_CompositionMethod value);
    // public UnityEngine.Color get_externalCompositionBackdropColorRift()
    // Offset: 0x1641A50
    ::UnityEngine::Color get_externalCompositionBackdropColorRift();
    // public System.Void set_externalCompositionBackdropColorRift(UnityEngine.Color value)
    // Offset: 0x1641A5C
    void set_externalCompositionBackdropColorRift(::UnityEngine::Color value);
    // public UnityEngine.Color get_externalCompositionBackdropColorQuest()
    // Offset: 0x1641A68
    ::UnityEngine::Color get_externalCompositionBackdropColorQuest();
    // public System.Void set_externalCompositionBackdropColorQuest(UnityEngine.Color value)
    // Offset: 0x1641A74
    void set_externalCompositionBackdropColorQuest(::UnityEngine::Color value);
    // public OVRManager/CameraDevice get_capturingCameraDevice()
    // Offset: 0x1641A80
    ::GlobalNamespace::OVRManager_CameraDevice get_capturingCameraDevice();
    // public System.Void set_capturingCameraDevice(OVRManager/CameraDevice value)
    // Offset: 0x1641A88
    void set_capturingCameraDevice(::GlobalNamespace::OVRManager_CameraDevice value);
    // public System.Boolean get_flipCameraFrameHorizontally()
    // Offset: 0x1641A90
    bool get_flipCameraFrameHorizontally();
    // public System.Void set_flipCameraFrameHorizontally(System.Boolean value)
    // Offset: 0x1641A98
    void set_flipCameraFrameHorizontally(bool value);
    // public System.Boolean get_flipCameraFrameVertically()
    // Offset: 0x1641AA4
    bool get_flipCameraFrameVertically();
    // public System.Void set_flipCameraFrameVertically(System.Boolean value)
    // Offset: 0x1641AAC
    void set_flipCameraFrameVertically(bool value);
    // public System.Single get_handPoseStateLatency()
    // Offset: 0x1641AB8
    float get_handPoseStateLatency();
    // public System.Void set_handPoseStateLatency(System.Single value)
    // Offset: 0x1641AC0
    void set_handPoseStateLatency(float value);
    // public System.Single get_sandwichCompositionRenderLatency()
    // Offset: 0x1641AC8
    float get_sandwichCompositionRenderLatency();
    // public System.Void set_sandwichCompositionRenderLatency(System.Single value)
    // Offset: 0x1641AD0
    void set_sandwichCompositionRenderLatency(float value);
    // public System.Int32 get_sandwichCompositionBufferedFrames()
    // Offset: 0x1641AD8
    int get_sandwichCompositionBufferedFrames();
    // public System.Void set_sandwichCompositionBufferedFrames(System.Int32 value)
    // Offset: 0x1641AE0
    void set_sandwichCompositionBufferedFrames(int value);
    // public UnityEngine.Color get_chromaKeyColor()
    // Offset: 0x1641AE8
    ::UnityEngine::Color get_chromaKeyColor();
    // public System.Void set_chromaKeyColor(UnityEngine.Color value)
    // Offset: 0x1641AF4
    void set_chromaKeyColor(::UnityEngine::Color value);
    // public System.Single get_chromaKeySimilarity()
    // Offset: 0x1641B00
    float get_chromaKeySimilarity();
    // public System.Void set_chromaKeySimilarity(System.Single value)
    // Offset: 0x1641B08
    void set_chromaKeySimilarity(float value);
    // public System.Single get_chromaKeySmoothRange()
    // Offset: 0x1641B10
    float get_chromaKeySmoothRange();
    // public System.Void set_chromaKeySmoothRange(System.Single value)
    // Offset: 0x1641B18
    void set_chromaKeySmoothRange(float value);
    // public System.Single get_chromaKeySpillRange()
    // Offset: 0x1641B20
    float get_chromaKeySpillRange();
    // public System.Void set_chromaKeySpillRange(System.Single value)
    // Offset: 0x1641B28
    void set_chromaKeySpillRange(float value);
    // public System.Boolean get_useDynamicLighting()
    // Offset: 0x1641B30
    bool get_useDynamicLighting();
    // public System.Void set_useDynamicLighting(System.Boolean value)
    // Offset: 0x1641B38
    void set_useDynamicLighting(bool value);
    // public OVRManager/DepthQuality get_depthQuality()
    // Offset: 0x1641B44
    ::GlobalNamespace::OVRManager_DepthQuality get_depthQuality();
    // public System.Void set_depthQuality(OVRManager/DepthQuality value)
    // Offset: 0x1641B4C
    void set_depthQuality(::GlobalNamespace::OVRManager_DepthQuality value);
    // public System.Single get_dynamicLightingSmoothFactor()
    // Offset: 0x1641B54
    float get_dynamicLightingSmoothFactor();
    // public System.Void set_dynamicLightingSmoothFactor(System.Single value)
    // Offset: 0x1641B5C
    void set_dynamicLightingSmoothFactor(float value);
    // public System.Single get_dynamicLightingDepthVariationClampingValue()
    // Offset: 0x1641B64
    float get_dynamicLightingDepthVariationClampingValue();
    // public System.Void set_dynamicLightingDepthVariationClampingValue(System.Single value)
    // Offset: 0x1641B6C
    void set_dynamicLightingDepthVariationClampingValue(float value);
    // public OVRManager/VirtualGreenScreenType get_virtualGreenScreenType()
    // Offset: 0x1641B74
    ::GlobalNamespace::OVRManager_VirtualGreenScreenType get_virtualGreenScreenType();
    // public System.Void set_virtualGreenScreenType(OVRManager/VirtualGreenScreenType value)
    // Offset: 0x1641B7C
    void set_virtualGreenScreenType(::GlobalNamespace::OVRManager_VirtualGreenScreenType value);
    // public System.Single get_virtualGreenScreenTopY()
    // Offset: 0x1641B84
    float get_virtualGreenScreenTopY();
    // public System.Void set_virtualGreenScreenTopY(System.Single value)
    // Offset: 0x1641B8C
    void set_virtualGreenScreenTopY(float value);
    // public System.Single get_virtualGreenScreenBottomY()
    // Offset: 0x1641B94
    float get_virtualGreenScreenBottomY();
    // public System.Void set_virtualGreenScreenBottomY(System.Single value)
    // Offset: 0x1641B9C
    void set_virtualGreenScreenBottomY(float value);
    // public System.Boolean get_virtualGreenScreenApplyDepthCulling()
    // Offset: 0x1641BA4
    bool get_virtualGreenScreenApplyDepthCulling();
    // public System.Void set_virtualGreenScreenApplyDepthCulling(System.Boolean value)
    // Offset: 0x1641BAC
    void set_virtualGreenScreenApplyDepthCulling(bool value);
    // public System.Single get_virtualGreenScreenDepthTolerance()
    // Offset: 0x1641BB8
    float get_virtualGreenScreenDepthTolerance();
    // public System.Void set_virtualGreenScreenDepthTolerance(System.Single value)
    // Offset: 0x1641BC0
    void set_virtualGreenScreenDepthTolerance(float value);
    // public OVRManager/MrcActivationMode get_mrcActivationMode()
    // Offset: 0x1641BC8
    ::GlobalNamespace::OVRManager_MrcActivationMode get_mrcActivationMode();
    // public System.Void set_mrcActivationMode(OVRManager/MrcActivationMode value)
    // Offset: 0x1641BD0
    void set_mrcActivationMode(::GlobalNamespace::OVRManager_MrcActivationMode value);
    // public OVRManager/InstantiateMrcCameraDelegate get_instantiateMixedRealityCameraGameObject()
    // Offset: 0x1641BD8
    ::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* get_instantiateMixedRealityCameraGameObject();
    // public System.Void set_instantiateMixedRealityCameraGameObject(OVRManager/InstantiateMrcCameraDelegate value)
    // Offset: 0x1641C54
    void set_instantiateMixedRealityCameraGameObject(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* value);
    // public System.Void .ctor()
    // Offset: 0x1641F1C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusMRCManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OculusMRCManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusMRCManager*, creationType>()));
    }
    // protected System.Void Update()
    // Offset: 0x1641C58
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x1641CDC
    void OnDestroy();
    // public System.Void Init(System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> instantiateMixedRealityBackgroundCameraGameObject, System.Func`2<UnityEngine.GameObject,UnityEngine.GameObject> instantiateMixedRealityForegroundCameraGameObject)
    // Offset: 0x1641D44
    void Init(::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityBackgroundCameraGameObject, ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>* instantiateMixedRealityForegroundCameraGameObject);
    // private UnityEngine.GameObject InstantiateMixedRealityCameraGameObject(UnityEngine.GameObject mainCameraGameObject, OVRManager/MrcCameraType cameraType)
    // Offset: 0x1641EA0
    ::UnityEngine::GameObject* InstantiateMixedRealityCameraGameObject(::UnityEngine::GameObject* mainCameraGameObject, ::GlobalNamespace::OVRManager_MrcCameraType cameraType);
  }; // OculusMRCManager
  #pragma pack(pop)
  static check_size<sizeof(OculusMRCManager), 192 + sizeof(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)> __GlobalNamespace_OculusMRCManagerSizeCheck;
  static_assert(sizeof(OculusMRCManager) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_enableMixedReality
// Il2CppName: get_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_enableMixedReality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_enableMixedReality
// Il2CppName: set_enableMixedReality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(bool)>(&GlobalNamespace::OculusMRCManager::set_enableMixedReality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_enableMixedReality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_extraHiddenLayers
// Il2CppName: get_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_extraHiddenLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_extraHiddenLayers
// Il2CppName: set_extraHiddenLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::UnityEngine::LayerMask)>(&GlobalNamespace::OculusMRCManager::set_extraHiddenLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_extraHiddenLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_extraVisibleLayers
// Il2CppName: get_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::LayerMask (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_extraVisibleLayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_extraVisibleLayers
// Il2CppName: set_extraVisibleLayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::UnityEngine::LayerMask)>(&GlobalNamespace::OculusMRCManager::set_extraVisibleLayers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_extraVisibleLayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_dynamicCullingMask
// Il2CppName: get_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_dynamicCullingMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_dynamicCullingMask
// Il2CppName: set_dynamicCullingMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(bool)>(&GlobalNamespace::OculusMRCManager::set_dynamicCullingMask)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_dynamicCullingMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_compositionMethod
// Il2CppName: get_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_CompositionMethod (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_compositionMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_compositionMethod
// Il2CppName: set_compositionMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::GlobalNamespace::OVRManager_CompositionMethod)>(&GlobalNamespace::OculusMRCManager::set_compositionMethod)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/CompositionMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_compositionMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorRift
// Il2CppName: get_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorRift)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorRift
// Il2CppName: set_externalCompositionBackdropColorRift
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::UnityEngine::Color)>(&GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorRift)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_externalCompositionBackdropColorRift", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorQuest
// Il2CppName: get_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_externalCompositionBackdropColorQuest)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorQuest
// Il2CppName: set_externalCompositionBackdropColorQuest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::UnityEngine::Color)>(&GlobalNamespace::OculusMRCManager::set_externalCompositionBackdropColorQuest)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_externalCompositionBackdropColorQuest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_capturingCameraDevice
// Il2CppName: get_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_CameraDevice (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_capturingCameraDevice)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_capturingCameraDevice
// Il2CppName: set_capturingCameraDevice
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::GlobalNamespace::OVRManager_CameraDevice)>(&GlobalNamespace::OculusMRCManager::set_capturingCameraDevice)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/CameraDevice")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_capturingCameraDevice", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_flipCameraFrameHorizontally
// Il2CppName: get_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_flipCameraFrameHorizontally)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_flipCameraFrameHorizontally
// Il2CppName: set_flipCameraFrameHorizontally
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(bool)>(&GlobalNamespace::OculusMRCManager::set_flipCameraFrameHorizontally)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_flipCameraFrameHorizontally", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_flipCameraFrameVertically
// Il2CppName: get_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_flipCameraFrameVertically)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_flipCameraFrameVertically
// Il2CppName: set_flipCameraFrameVertically
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(bool)>(&GlobalNamespace::OculusMRCManager::set_flipCameraFrameVertically)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_flipCameraFrameVertically", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_handPoseStateLatency
// Il2CppName: get_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_handPoseStateLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_handPoseStateLatency
// Il2CppName: set_handPoseStateLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_handPoseStateLatency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_handPoseStateLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_sandwichCompositionRenderLatency
// Il2CppName: get_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_sandwichCompositionRenderLatency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_sandwichCompositionRenderLatency
// Il2CppName: set_sandwichCompositionRenderLatency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_sandwichCompositionRenderLatency)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_sandwichCompositionRenderLatency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_sandwichCompositionBufferedFrames
// Il2CppName: get_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_sandwichCompositionBufferedFrames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_sandwichCompositionBufferedFrames
// Il2CppName: set_sandwichCompositionBufferedFrames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(int)>(&GlobalNamespace::OculusMRCManager::set_sandwichCompositionBufferedFrames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_sandwichCompositionBufferedFrames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_chromaKeyColor
// Il2CppName: get_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_chromaKeyColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_chromaKeyColor
// Il2CppName: set_chromaKeyColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::UnityEngine::Color)>(&GlobalNamespace::OculusMRCManager::set_chromaKeyColor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_chromaKeyColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_chromaKeySimilarity
// Il2CppName: get_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_chromaKeySimilarity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_chromaKeySimilarity
// Il2CppName: set_chromaKeySimilarity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_chromaKeySimilarity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_chromaKeySimilarity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_chromaKeySmoothRange
// Il2CppName: get_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_chromaKeySmoothRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_chromaKeySmoothRange
// Il2CppName: set_chromaKeySmoothRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_chromaKeySmoothRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_chromaKeySmoothRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_chromaKeySpillRange
// Il2CppName: get_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_chromaKeySpillRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_chromaKeySpillRange
// Il2CppName: set_chromaKeySpillRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_chromaKeySpillRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_chromaKeySpillRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_useDynamicLighting
// Il2CppName: get_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_useDynamicLighting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_useDynamicLighting
// Il2CppName: set_useDynamicLighting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(bool)>(&GlobalNamespace::OculusMRCManager::set_useDynamicLighting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_useDynamicLighting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_depthQuality
// Il2CppName: get_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_DepthQuality (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_depthQuality)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_depthQuality
// Il2CppName: set_depthQuality
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::GlobalNamespace::OVRManager_DepthQuality)>(&GlobalNamespace::OculusMRCManager::set_depthQuality)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/DepthQuality")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_depthQuality", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_dynamicLightingSmoothFactor
// Il2CppName: get_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_dynamicLightingSmoothFactor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_dynamicLightingSmoothFactor
// Il2CppName: set_dynamicLightingSmoothFactor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_dynamicLightingSmoothFactor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_dynamicLightingSmoothFactor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_dynamicLightingDepthVariationClampingValue
// Il2CppName: get_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_dynamicLightingDepthVariationClampingValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_dynamicLightingDepthVariationClampingValue
// Il2CppName: set_dynamicLightingDepthVariationClampingValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_dynamicLightingDepthVariationClampingValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_dynamicLightingDepthVariationClampingValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_virtualGreenScreenType
// Il2CppName: get_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_VirtualGreenScreenType (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_virtualGreenScreenType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_virtualGreenScreenType
// Il2CppName: set_virtualGreenScreenType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::GlobalNamespace::OVRManager_VirtualGreenScreenType)>(&GlobalNamespace::OculusMRCManager::set_virtualGreenScreenType)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/VirtualGreenScreenType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_virtualGreenScreenType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_virtualGreenScreenTopY
// Il2CppName: get_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_virtualGreenScreenTopY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_virtualGreenScreenTopY
// Il2CppName: set_virtualGreenScreenTopY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_virtualGreenScreenTopY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_virtualGreenScreenTopY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_virtualGreenScreenBottomY
// Il2CppName: get_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_virtualGreenScreenBottomY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_virtualGreenScreenBottomY
// Il2CppName: set_virtualGreenScreenBottomY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_virtualGreenScreenBottomY)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_virtualGreenScreenBottomY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_virtualGreenScreenApplyDepthCulling
// Il2CppName: get_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_virtualGreenScreenApplyDepthCulling)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_virtualGreenScreenApplyDepthCulling
// Il2CppName: set_virtualGreenScreenApplyDepthCulling
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(bool)>(&GlobalNamespace::OculusMRCManager::set_virtualGreenScreenApplyDepthCulling)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_virtualGreenScreenApplyDepthCulling", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_virtualGreenScreenDepthTolerance
// Il2CppName: get_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_virtualGreenScreenDepthTolerance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_virtualGreenScreenDepthTolerance
// Il2CppName: set_virtualGreenScreenDepthTolerance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(float)>(&GlobalNamespace::OculusMRCManager::set_virtualGreenScreenDepthTolerance)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_virtualGreenScreenDepthTolerance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_mrcActivationMode
// Il2CppName: get_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_MrcActivationMode (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_mrcActivationMode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_mrcActivationMode
// Il2CppName: set_mrcActivationMode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::GlobalNamespace::OVRManager_MrcActivationMode)>(&GlobalNamespace::OculusMRCManager::set_mrcActivationMode)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/MrcActivationMode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_mrcActivationMode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::get_instantiateMixedRealityCameraGameObject
// Il2CppName: get_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate* (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::get_instantiateMixedRealityCameraGameObject)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "get_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::set_instantiateMixedRealityCameraGameObject
// Il2CppName: set_instantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::GlobalNamespace::OVRManager_InstantiateMrcCameraDelegate*)>(&GlobalNamespace::OculusMRCManager::set_instantiateMixedRealityCameraGameObject)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OVRManager/InstantiateMrcCameraDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "set_instantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)()>(&GlobalNamespace::OculusMRCManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OculusMRCManager::*)(::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*, ::System::Func_2<::UnityEngine::GameObject*, ::UnityEngine::GameObject*>*)>(&GlobalNamespace::OculusMRCManager::Init)> {
  static const MethodInfo* get() {
    static auto* instantiateMixedRealityBackgroundCameraGameObject = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    static auto* instantiateMixedRealityForegroundCameraGameObject = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Func`2"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), ::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instantiateMixedRealityBackgroundCameraGameObject, instantiateMixedRealityForegroundCameraGameObject});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OculusMRCManager::InstantiateMixedRealityCameraGameObject
// Il2CppName: InstantiateMixedRealityCameraGameObject
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::GameObject* (GlobalNamespace::OculusMRCManager::*)(::UnityEngine::GameObject*, ::GlobalNamespace::OVRManager_MrcCameraType)>(&GlobalNamespace::OculusMRCManager::InstantiateMixedRealityCameraGameObject)> {
  static const MethodInfo* get() {
    static auto* mainCameraGameObject = &::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject")->byval_arg;
    static auto* cameraType = &::il2cpp_utils::GetClassFromName("", "OVRManager/MrcCameraType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OculusMRCManager*), "InstantiateMixedRealityCameraGameObject", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainCameraGameObject, cameraType});
  }
};
