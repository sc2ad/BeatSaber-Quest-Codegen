// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDataSO
#include "GlobalNamespace/BeatmapDataSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0*, "", "BeatmapDataSO/<>c__DisplayClass6_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataSO/<>c__DisplayClass6_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class BeatmapDataSO::$$c__DisplayClass6_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Action action
    // Size: 0x8
    // Offset: 0x10
    ::System::Action* action;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Action*
    constexpr operator ::System::Action*() const noexcept {
      return action;
    }
    // Get instance field reference: public System.Action action
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_action();
    // public System.Void .ctor()
    // Offset: 0x152F394
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataSO::$$c__DisplayClass6_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataSO::$$c__DisplayClass6_0*, creationType>()));
    }
    // System.Void <RunTaskAndLogException>b__0()
    // Offset: 0x152F39C
    void $RunTaskAndLogException$b__0();
  }; // BeatmapDataSO/<>c__DisplayClass6_0
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataSO::$$c__DisplayClass6_0), 16 + sizeof(::System::Action*)> __GlobalNamespace_BeatmapDataSO_$$c__DisplayClass6_0SizeCheck;
  static_assert(sizeof(BeatmapDataSO::$$c__DisplayClass6_0) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0::$RunTaskAndLogException$b__0
// Il2CppName: <RunTaskAndLogException>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0::*)()>(&GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0::$RunTaskAndLogException$b__0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataSO::$$c__DisplayClass6_0*), "<RunTaskAndLogException>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
