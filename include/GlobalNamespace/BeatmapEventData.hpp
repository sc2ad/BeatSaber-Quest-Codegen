// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDataItem
#include "GlobalNamespace/BeatmapDataItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapEventData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventData*, "", "BeatmapEventData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventData : public ::GlobalNamespace::BeatmapDataItem {
    public:
    public:
    // private BeatmapEventData <previousSameTypeEventData>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::BeatmapEventData* previousSameTypeEventData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapEventData*) == 0x8);
    // private BeatmapEventData <nextSameTypeEventData>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::BeatmapEventData* nextSameTypeEventData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapEventData*) == 0x8);
    public:
    // Get instance field reference: private BeatmapEventData <previousSameTypeEventData>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventData*& dyn_$previousSameTypeEventData$k__BackingField();
    // Get instance field reference: private BeatmapEventData <nextSameTypeEventData>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapEventData*& dyn_$nextSameTypeEventData$k__BackingField();
    // public BeatmapEventData get_previousSameTypeEventData()
    // Offset: 0x2837F2C
    ::GlobalNamespace::BeatmapEventData* get_previousSameTypeEventData();
    // private System.Void set_previousSameTypeEventData(BeatmapEventData value)
    // Offset: 0x2837F34
    void set_previousSameTypeEventData(::GlobalNamespace::BeatmapEventData* value);
    // public BeatmapEventData get_nextSameTypeEventData()
    // Offset: 0x2837F3C
    ::GlobalNamespace::BeatmapEventData* get_nextSameTypeEventData();
    // private System.Void set_nextSameTypeEventData(BeatmapEventData value)
    // Offset: 0x2837F44
    void set_nextSameTypeEventData(::GlobalNamespace::BeatmapEventData* value);
    // protected System.Void .ctor(System.Single time, System.Int32 executionOrder, System.Int32 subtypeIdentifier)
    // Offset: 0x2837108
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventData* New_ctor(float time, int executionOrder, int subtypeIdentifier) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventData*, creationType>(time, executionOrder, subtypeIdentifier)));
    }
    // public System.Void __ConnectWithPreviousSameTypeEventData(BeatmapEventData newPreviousSameTypeEvent)
    // Offset: 0x2837F4C
    void __ConnectWithPreviousSameTypeEventData(::GlobalNamespace::BeatmapEventData* newPreviousSameTypeEvent);
    // public System.Void __ConnectWithNextSameTypeEventData(BeatmapEventData newNextSameTypeEvent)
    // Offset: 0x2837F5C
    void __ConnectWithNextSameTypeEventData(::GlobalNamespace::BeatmapEventData* newNextSameTypeEvent);
    // public System.Void __ResetConnections()
    // Offset: 0x2837F6C
    void __ResetConnections();
    // protected BeatmapEventData GetDefault()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::GlobalNamespace::BeatmapEventData* GetDefault();
    // public BeatmapEventData GetDefault(BeatmapEventData nextData)
    // Offset: 0x2837F74
    ::GlobalNamespace::BeatmapEventData* GetDefault(::GlobalNamespace::BeatmapEventData* nextData);
  }; // BeatmapEventData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventData), 40 + sizeof(::GlobalNamespace::BeatmapEventData*)> __GlobalNamespace_BeatmapEventDataSizeCheck;
  static_assert(sizeof(BeatmapEventData) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::get_previousSameTypeEventData
// Il2CppName: get_previousSameTypeEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventData* (GlobalNamespace::BeatmapEventData::*)()>(&GlobalNamespace::BeatmapEventData::get_previousSameTypeEventData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "get_previousSameTypeEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::set_previousSameTypeEventData
// Il2CppName: set_previousSameTypeEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapEventData::set_previousSameTypeEventData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "set_previousSameTypeEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::get_nextSameTypeEventData
// Il2CppName: get_nextSameTypeEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventData* (GlobalNamespace::BeatmapEventData::*)()>(&GlobalNamespace::BeatmapEventData::get_nextSameTypeEventData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "get_nextSameTypeEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::set_nextSameTypeEventData
// Il2CppName: set_nextSameTypeEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapEventData::set_nextSameTypeEventData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "set_nextSameTypeEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::__ConnectWithPreviousSameTypeEventData
// Il2CppName: __ConnectWithPreviousSameTypeEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapEventData::__ConnectWithPreviousSameTypeEventData)> {
  static const MethodInfo* get() {
    static auto* newPreviousSameTypeEvent = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "__ConnectWithPreviousSameTypeEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPreviousSameTypeEvent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::__ConnectWithNextSameTypeEventData
// Il2CppName: __ConnectWithNextSameTypeEventData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapEventData::__ConnectWithNextSameTypeEventData)> {
  static const MethodInfo* get() {
    static auto* newNextSameTypeEvent = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "__ConnectWithNextSameTypeEventData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newNextSameTypeEvent});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::__ResetConnections
// Il2CppName: __ResetConnections
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventData::*)()>(&GlobalNamespace::BeatmapEventData::__ResetConnections)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "__ResetConnections", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::GetDefault
// Il2CppName: GetDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventData* (GlobalNamespace::BeatmapEventData::*)()>(&GlobalNamespace::BeatmapEventData::GetDefault)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "GetDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventData::GetDefault
// Il2CppName: GetDefault
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapEventData* (GlobalNamespace::BeatmapEventData::*)(::GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapEventData::GetDefault)> {
  static const MethodInfo* get() {
    static auto* nextData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventData*), "GetDefault", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nextData});
  }
};
