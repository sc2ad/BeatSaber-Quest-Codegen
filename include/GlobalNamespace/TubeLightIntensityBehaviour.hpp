// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
  // Forward declaring type: DirectionalLight
  class DirectionalLight;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: TubeLightIntensityBehaviour
  // [TokenAttribute] Offset: FFFFFFFF
  class TubeLightIntensityBehaviour : public UnityEngine::Playables::PlayableBehaviour {
    public:
    // [HeaderAttribute] Offset: 0xF14904
    // public System.Boolean _noPredefinedStartValue
    // Size: 0x1
    // Offset: 0x10
    bool noPredefinedStartValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: noPredefinedStartValue and: startLightIntensity
    char __padding0[0x3] = {};
    // [DrawIfAttribute] Offset: 0xF1493C
    // public System.Single _startLightIntensity
    // Size: 0x4
    // Offset: 0x14
    float startLightIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0xF149D0
    // public System.Single _startLaserIntensity
    // Size: 0x4
    // Offset: 0x18
    float startLaserIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0xF14A64
    // public System.Single _endLightIntensity
    // Size: 0x4
    // Offset: 0x1C
    float endLightIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _endLaserIntensity
    // Size: 0x4
    // Offset: 0x20
    float endLaserIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean _disableWhenFinished
    // Size: 0x1
    // Offset: 0x24
    bool disableWhenFinished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disableWhenFinished and: blend
    char __padding5[0x3] = {};
    // public System.Single _blend
    // Size: 0x4
    // Offset: 0x28
    float blend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x2C
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: originalLightIntensity
    char __padding7[0x3] = {};
    // private System.Single _originalLightIntensity
    // Size: 0x4
    // Offset: 0x30
    float originalLightIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _originalLaserIntensity
    // Size: 0x4
    // Offset: 0x34
    float originalLaserIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private TubeBloomPrePassLight[] _tubeLights
    // Size: 0x8
    // Offset: 0x38
    ::Array<GlobalNamespace::TubeBloomPrePassLight*>* tubeLights;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TubeBloomPrePassLight*>*) == 0x8);
    // private DirectionalLight[] _directionalLights
    // Size: 0x8
    // Offset: 0x40
    ::Array<GlobalNamespace::DirectionalLight*>* directionalLights;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::DirectionalLight*>*) == 0x8);
    // private System.Boolean _started
    // Size: 0x1
    // Offset: 0x48
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _finished
    // Size: 0x1
    // Offset: 0x49
    bool finished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: finished and: firstFrameLightIntensity
    char __padding13[0x2] = {};
    // private System.Single _firstFrameLightIntensity
    // Size: 0x4
    // Offset: 0x4C
    float firstFrameLightIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _firstFrameLaserIntensity
    // Size: 0x4
    // Offset: 0x50
    float firstFrameLaserIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: TubeLightIntensityBehaviour
    TubeLightIntensityBehaviour(bool noPredefinedStartValue_ = {}, float startLightIntensity_ = {}, float startLaserIntensity_ = {}, float endLightIntensity_ = {}, float endLaserIntensity_ = {}, bool disableWhenFinished_ = {}, float blend_ = {}, bool initialized_ = {}, float originalLightIntensity_ = {}, float originalLaserIntensity_ = {}, ::Array<GlobalNamespace::TubeBloomPrePassLight*>* tubeLights_ = {}, ::Array<GlobalNamespace::DirectionalLight*>* directionalLights_ = {}, bool started_ = {}, bool finished_ = {}, float firstFrameLightIntensity_ = {}, float firstFrameLaserIntensity_ = {}) noexcept : noPredefinedStartValue{noPredefinedStartValue_}, startLightIntensity{startLightIntensity_}, startLaserIntensity{startLaserIntensity_}, endLightIntensity{endLightIntensity_}, endLaserIntensity{endLaserIntensity_}, disableWhenFinished{disableWhenFinished_}, blend{blend_}, initialized{initialized_}, originalLightIntensity{originalLightIntensity_}, originalLaserIntensity{originalLaserIntensity_}, tubeLights{tubeLights_}, directionalLights{directionalLights_}, started{started_}, finished{finished_}, firstFrameLightIntensity{firstFrameLightIntensity_}, firstFrameLaserIntensity{firstFrameLaserIntensity_} {}
    // Get instance field reference: public System.Boolean _noPredefinedStartValue
    bool& dyn__noPredefinedStartValue();
    // Get instance field reference: public System.Single _startLightIntensity
    float& dyn__startLightIntensity();
    // Get instance field reference: public System.Single _startLaserIntensity
    float& dyn__startLaserIntensity();
    // Get instance field reference: public System.Single _endLightIntensity
    float& dyn__endLightIntensity();
    // Get instance field reference: public System.Single _endLaserIntensity
    float& dyn__endLaserIntensity();
    // Get instance field reference: public System.Boolean _disableWhenFinished
    bool& dyn__disableWhenFinished();
    // Get instance field reference: public System.Single _blend
    float& dyn__blend();
    // Get instance field reference: private System.Boolean _initialized
    bool& dyn__initialized();
    // Get instance field reference: private System.Single _originalLightIntensity
    float& dyn__originalLightIntensity();
    // Get instance field reference: private System.Single _originalLaserIntensity
    float& dyn__originalLaserIntensity();
    // Get instance field reference: private TubeBloomPrePassLight[] _tubeLights
    ::Array<GlobalNamespace::TubeBloomPrePassLight*>*& dyn__tubeLights();
    // Get instance field reference: private DirectionalLight[] _directionalLights
    ::Array<GlobalNamespace::DirectionalLight*>*& dyn__directionalLights();
    // Get instance field reference: private System.Boolean _started
    bool& dyn__started();
    // Get instance field reference: private System.Boolean _finished
    bool& dyn__finished();
    // Get instance field reference: private System.Single _firstFrameLightIntensity
    float& dyn__firstFrameLightIntensity();
    // Get instance field reference: private System.Single _firstFrameLaserIntensity
    float& dyn__firstFrameLaserIntensity();
    // private System.Void EnableObjects(System.Boolean on)
    // Offset: 0x1163BB4
    void EnableObjects(bool on);
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x11637FC
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
    // public override System.Void OnPlayableDestroy(UnityEngine.Playables.Playable playable)
    // Offset: 0x1163C94
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::OnPlayableDestroy(UnityEngine.Playables.Playable playable)
    void OnPlayableDestroy(UnityEngine::Playables::Playable playable);
    // public System.Void .ctor()
    // Offset: 0x1163D90
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TubeLightIntensityBehaviour* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TubeLightIntensityBehaviour::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TubeLightIntensityBehaviour*, creationType>()));
    }
  }; // TubeLightIntensityBehaviour
  #pragma pack(pop)
  static check_size<sizeof(TubeLightIntensityBehaviour), 80 + sizeof(float)> __GlobalNamespace_TubeLightIntensityBehaviourSizeCheck;
  static_assert(sizeof(TubeLightIntensityBehaviour) == 0x54);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TubeLightIntensityBehaviour*, "", "TubeLightIntensityBehaviour");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TubeLightIntensityBehaviour::EnableObjects
// Il2CppName: EnableObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TubeLightIntensityBehaviour::*)(bool)>(&GlobalNamespace::TubeLightIntensityBehaviour::EnableObjects)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TubeLightIntensityBehaviour*), "EnableObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TubeLightIntensityBehaviour::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TubeLightIntensityBehaviour::*)(UnityEngine::Playables::Playable, UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&GlobalNamespace::TubeLightIntensityBehaviour::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TubeLightIntensityBehaviour*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TubeLightIntensityBehaviour::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TubeLightIntensityBehaviour::*)(UnityEngine::Playables::Playable)>(&GlobalNamespace::TubeLightIntensityBehaviour::OnPlayableDestroy)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TubeLightIntensityBehaviour*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TubeLightIntensityBehaviour::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
