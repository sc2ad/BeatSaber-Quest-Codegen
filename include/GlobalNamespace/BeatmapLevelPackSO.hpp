// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelCollectionSO
  class BeatmapLevelCollectionSO;
  // Forward declaring type: IBeatmapLevelCollection
  class IBeatmapLevelCollection;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelPackSO
  class BeatmapLevelPackSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapLevelPackSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelPackSO*, "", "BeatmapLevelPackSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelPackSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelPackSO : public ::GlobalNamespace::PersistentScriptableObject/*, public ::GlobalNamespace::IBeatmapLevelPack*/ {
    public:
    public:
    // private System.String _packID
    // Size: 0x8
    // Offset: 0x18
    ::StringW packID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _packName
    // Size: 0x8
    // Offset: 0x20
    ::StringW packName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _shortPackName
    // Size: 0x8
    // Offset: 0x28
    ::StringW shortPackName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.Sprite _coverImage
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Sprite* coverImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private UnityEngine.Sprite _smallCoverImage
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Sprite* smallCoverImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // [SpaceAttribute] Offset: 0x111C0D8
    // private BeatmapLevelCollectionSO _beatmapLevelCollection
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::BeatmapLevelCollectionSO* beatmapLevelCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelCollectionSO*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapLevelPack
    operator ::GlobalNamespace::IBeatmapLevelPack() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelPack*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapLevelPack
    inline ::GlobalNamespace::IBeatmapLevelPack* i_IBeatmapLevelPack() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapLevelPack*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String _packID
    [[deprecated("Use field access instead!")]] ::StringW& dyn__packID();
    // Get instance field reference: private System.String _packName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__packName();
    // Get instance field reference: private System.String _shortPackName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__shortPackName();
    // Get instance field reference: private UnityEngine.Sprite _coverImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__coverImage();
    // Get instance field reference: private UnityEngine.Sprite _smallCoverImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__smallCoverImage();
    // Get instance field reference: private BeatmapLevelCollectionSO _beatmapLevelCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelCollectionSO*& dyn__beatmapLevelCollection();
    // public System.String get_packID()
    // Offset: 0x153CAE0
    ::StringW get_packID();
    // public System.String get_packName()
    // Offset: 0x153CAE8
    ::StringW get_packName();
    // public System.String get_shortPackName()
    // Offset: 0x153CAF0
    ::StringW get_shortPackName();
    // public System.String get_collectionName()
    // Offset: 0x153CAF8
    ::StringW get_collectionName();
    // public UnityEngine.Sprite get_coverImage()
    // Offset: 0x153CB00
    ::UnityEngine::Sprite* get_coverImage();
    // public UnityEngine.Sprite get_smallCoverImage()
    // Offset: 0x153CB08
    ::UnityEngine::Sprite* get_smallCoverImage();
    // public IBeatmapLevelCollection get_beatmapLevelCollection()
    // Offset: 0x153CB10
    ::GlobalNamespace::IBeatmapLevelCollection* get_beatmapLevelCollection();
    // public System.Void .ctor()
    // Offset: 0x153CB18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelPackSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelPackSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelPackSO*, creationType>()));
    }
  }; // BeatmapLevelPackSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelPackSO), 64 + sizeof(::GlobalNamespace::BeatmapLevelCollectionSO*)> __GlobalNamespace_BeatmapLevelPackSOSizeCheck;
  static_assert(sizeof(BeatmapLevelPackSO) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_packID
// Il2CppName: get_packID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_packID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_packID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_packName
// Il2CppName: get_packName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_packName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_packName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_shortPackName
// Il2CppName: get_shortPackName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_shortPackName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_shortPackName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_collectionName
// Il2CppName: get_collectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_collectionName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_collectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_coverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_smallCoverImage
// Il2CppName: get_smallCoverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_smallCoverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_smallCoverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::get_beatmapLevelCollection
// Il2CppName: get_beatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IBeatmapLevelCollection* (GlobalNamespace::BeatmapLevelPackSO::*)()>(&GlobalNamespace::BeatmapLevelPackSO::get_beatmapLevelCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelPackSO*), "get_beatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelPackSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
