// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ftUniqueIDRegistry
  class ftUniqueIDRegistry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ftUniqueIDRegistry);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ftUniqueIDRegistry*, "", "ftUniqueIDRegistry");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: ftUniqueIDRegistry
  // [TokenAttribute] Offset: FFFFFFFF
  class ftUniqueIDRegistry : public ::Il2CppObject {
    public:
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> Mapping
    static ::System::Collections::Generic::Dictionary_2<int, int>* _get_Mapping();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> Mapping
    static void _set_Mapping(::System::Collections::Generic::Dictionary_2<int, int>* value);
    // Get static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> MappingInv
    static ::System::Collections::Generic::Dictionary_2<int, int>* _get_MappingInv();
    // Set static field: static public System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> MappingInv
    static void _set_MappingInv(::System::Collections::Generic::Dictionary_2<int, int>* value);
    // static private System.Void .cctor()
    // Offset: 0x1BD91B8
    static void _cctor();
    // static public System.Void Deregister(System.Int32 id)
    // Offset: 0x1BD8E8C
    static void Deregister(int id);
    // static public System.Void Register(System.Int32 id, System.Int32 value)
    // Offset: 0x1BD9010
    static void Register(int id, int value);
    // static public System.Int32 GetInstanceId(System.Int32 id)
    // Offset: 0x1BD8F6C
    static int GetInstanceId(int id);
    // static public System.Int32 GetUID(System.Int32 instanceId)
    // Offset: 0x1BD9114
    static int GetUID(int instanceId);
  }; // ftUniqueIDRegistry
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ftUniqueIDRegistry::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ftUniqueIDRegistry::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftUniqueIDRegistry*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftUniqueIDRegistry::Deregister
// Il2CppName: Deregister
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int)>(&GlobalNamespace::ftUniqueIDRegistry::Deregister)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftUniqueIDRegistry*), "Deregister", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftUniqueIDRegistry::Register
// Il2CppName: Register
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int, int)>(&GlobalNamespace::ftUniqueIDRegistry::Register)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftUniqueIDRegistry*), "Register", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftUniqueIDRegistry::GetInstanceId
// Il2CppName: GetInstanceId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&GlobalNamespace::ftUniqueIDRegistry::GetInstanceId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftUniqueIDRegistry*), "GetInstanceId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ftUniqueIDRegistry::GetUID
// Il2CppName: GetUID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&GlobalNamespace::ftUniqueIDRegistry::GetUID)> {
  static const MethodInfo* get() {
    static auto* instanceId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ftUniqueIDRegistry*), "GetUID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{instanceId});
  }
};
