// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OnWillRenderObjectTrigger
  class OnWillRenderObjectTrigger;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OnWillRenderObjectTrigger);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OnWillRenderObjectTrigger*, "", "OnWillRenderObjectTrigger");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: OnWillRenderObjectTrigger
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: FFFFFFFF
  class OnWillRenderObjectTrigger : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [NullAllowed] Offset: 0x1108F88
    // private UnityEngine.Shader _overrideShader
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Shader* overrideShader;
    // Field size check
    static_assert(sizeof(::UnityEngine::Shader*) == 0x8);
    // private System.Int32 _renderQueue
    // Size: 0x4
    // Offset: 0x20
    int renderQueue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: renderQueue and: material
    char __padding1[0x4] = {};
    // private UnityEngine.Material _material
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // private UnityEngine.Mesh _mesh
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Mesh* mesh;
    // Field size check
    static_assert(sizeof(::UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.MeshFilter _meshFilter
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::MeshFilter* meshFilter;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.MeshRenderer _meshRenderer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Shader _overrideShader
    [[deprecated("Use field access instead!")]] ::UnityEngine::Shader*& dyn__overrideShader();
    // Get instance field reference: private System.Int32 _renderQueue
    [[deprecated("Use field access instead!")]] int& dyn__renderQueue();
    // Get instance field reference: private UnityEngine.Material _material
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn__material();
    // Get instance field reference: private UnityEngine.Mesh _mesh
    [[deprecated("Use field access instead!")]] ::UnityEngine::Mesh*& dyn__mesh();
    // Get instance field reference: private UnityEngine.MeshFilter _meshFilter
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshFilter*& dyn__meshFilter();
    // Get instance field reference: private UnityEngine.MeshRenderer _meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn__meshRenderer();
    // public System.Void .ctor()
    // Offset: 0x1CC15C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OnWillRenderObjectTrigger* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OnWillRenderObjectTrigger::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OnWillRenderObjectTrigger*, creationType>()));
    }
    // protected System.Void OnEnable()
    // Offset: 0x1CC1190
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x1CC158C
    void OnDisable();
  }; // OnWillRenderObjectTrigger
  #pragma pack(pop)
  static check_size<sizeof(OnWillRenderObjectTrigger), 64 + sizeof(::UnityEngine::MeshRenderer*)> __GlobalNamespace_OnWillRenderObjectTriggerSizeCheck;
  static_assert(sizeof(OnWillRenderObjectTrigger) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OnWillRenderObjectTrigger::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OnWillRenderObjectTrigger::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OnWillRenderObjectTrigger::*)()>(&GlobalNamespace::OnWillRenderObjectTrigger::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnWillRenderObjectTrigger*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OnWillRenderObjectTrigger::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OnWillRenderObjectTrigger::*)()>(&GlobalNamespace::OnWillRenderObjectTrigger::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OnWillRenderObjectTrigger*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
