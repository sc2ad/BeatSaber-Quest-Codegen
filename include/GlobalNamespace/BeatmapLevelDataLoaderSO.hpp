// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicCollectionSO
  class BeatmapCharacteristicCollectionSO;
  // Forward declaring type: AsyncCache`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class AsyncCache_2;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapLevelDataSO
  class BeatmapLevelDataSO;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelDataLoaderSO
  class BeatmapLevelDataLoaderSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapLevelDataLoaderSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelDataLoaderSO*, "", "BeatmapLevelDataLoaderSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelDataLoaderSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelDataLoaderSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo
    struct AssetBundleLevelInfo;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::BeatmapLevelFromPreview
    class BeatmapLevelFromPreview;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelFormAssetBundleAsync$d__4
    struct $LoadBeatmapLevelFormAssetBundleAsync$d__4;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelAsync$d__5
    struct $LoadBeatmapLevelAsync$d__5;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_0
    class $$c__DisplayClass6_0;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_1
    class $$c__DisplayClass6_1;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::$$c__DisplayClass6_2
    class $$c__DisplayClass6_2;
    // Nested type: ::GlobalNamespace::BeatmapLevelDataLoaderSO::$LoadBeatmapLevelDataAsync$d__6
    struct $LoadBeatmapLevelDataAsync$d__6;
    // Size: 0x18
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BeatmapLevelDataLoaderSO/AssetBundleLevelInfo
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct AssetBundleLevelInfo/*, public ::System::ValueType*/ {
      public:
      public:
      // public readonly System.String assetBundlePath
      // Size: 0x8
      // Offset: 0x0
      ::StringW assetBundlePath;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly System.String levelDataAssetName
      // Size: 0x8
      // Offset: 0x8
      ::StringW levelDataAssetName;
      // Field size check
      static_assert(sizeof(::StringW) == 0x8);
      // public readonly IPreviewBeatmapLevel previewBeatmapLevel
      // Size: 0x8
      // Offset: 0x10
      ::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::IPreviewBeatmapLevel*) == 0x8);
      public:
      // Creating value type constructor for type: AssetBundleLevelInfo
      constexpr AssetBundleLevelInfo(::StringW assetBundlePath_ = {}, ::StringW levelDataAssetName_ = {}, ::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel_ = {}) noexcept : assetBundlePath{assetBundlePath_}, levelDataAssetName{levelDataAssetName_}, previewBeatmapLevel{previewBeatmapLevel_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly System.String assetBundlePath
      [[deprecated("Use field access instead!")]] ::StringW& dyn_assetBundlePath();
      // Get instance field reference: public readonly System.String levelDataAssetName
      [[deprecated("Use field access instead!")]] ::StringW& dyn_levelDataAssetName();
      // Get instance field reference: public readonly IPreviewBeatmapLevel previewBeatmapLevel
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& dyn_previewBeatmapLevel();
      // public System.Void .ctor(System.String assetBundlePath, System.String levelDataAssetName, IPreviewBeatmapLevel previewBeatmapLevel)
      // Offset: 0x15390CC
      // ABORTED: conflicts with another method.  AssetBundleLevelInfo(::StringW assetBundlePath, ::StringW levelDataAssetName, ::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel);
    }; // BeatmapLevelDataLoaderSO/AssetBundleLevelInfo
    #pragma pack(pop)
    static check_size<sizeof(BeatmapLevelDataLoaderSO::AssetBundleLevelInfo), 16 + sizeof(::GlobalNamespace::IPreviewBeatmapLevel*)> __GlobalNamespace_BeatmapLevelDataLoaderSO_AssetBundleLevelInfoSizeCheck;
    static_assert(sizeof(BeatmapLevelDataLoaderSO::AssetBundleLevelInfo) == 0x18);
    public:
    // private BeatmapCharacteristicCollectionSO _allBeatmapCharacteristicCollection
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapCharacteristicCollectionSO* allBeatmapCharacteristicCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicCollectionSO*) == 0x8);
    // private AsyncCache`2<System.String,IBeatmapLevel> _beatmapLevelsAsyncCache
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::AsyncCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>* beatmapLevelsAsyncCache;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::AsyncCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,BeatmapLevelDataLoaderSO/AssetBundleLevelInfo> _bundleLevelInfos
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo>* bundleLevelInfos;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private BeatmapCharacteristicCollectionSO _allBeatmapCharacteristicCollection
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicCollectionSO*& dyn__allBeatmapCharacteristicCollection();
    // Get instance field reference: private AsyncCache`2<System.String,IBeatmapLevel> _beatmapLevelsAsyncCache
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::AsyncCache_2<::StringW, ::GlobalNamespace::IBeatmapLevel*>*& dyn__beatmapLevelsAsyncCache();
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.String,BeatmapLevelDataLoaderSO/AssetBundleLevelInfo> _bundleLevelInfos
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo>*& dyn__bundleLevelInfos();
    // public System.Void .ctor()
    // Offset: 0x153828C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelDataLoaderSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataLoaderSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelDataLoaderSO*, creationType>()));
    }
    // public System.Threading.Tasks.Task`1<IBeatmapLevel> LoadBeatmapLevelFormAssetBundleAsync(IPreviewBeatmapLevel previewBeatmapLevel, System.String assetBundlePath, System.String levelDataAssetName, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1537F10
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>* LoadBeatmapLevelFormAssetBundleAsync(::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, ::StringW assetBundlePath, ::StringW levelDataAssetName, ::System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<IBeatmapLevel> LoadBeatmapLevelAsync(System.String levelID)
    // Offset: 0x1538044
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>* LoadBeatmapLevelAsync(::StringW levelID);
    // private System.Threading.Tasks.Task`1<BeatmapLevelDataSO> LoadBeatmapLevelDataAsync(System.String assetBundlePath, System.String levelDataAssetName)
    // Offset: 0x1538168
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelDataSO*>* LoadBeatmapLevelDataAsync(::StringW assetBundlePath, ::StringW levelDataAssetName);
  }; // BeatmapLevelDataLoaderSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelDataLoaderSO), 40 + sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo>*)> __GlobalNamespace_BeatmapLevelDataLoaderSOSizeCheck;
  static_assert(sizeof(BeatmapLevelDataLoaderSO) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelDataLoaderSO::AssetBundleLevelInfo, "", "BeatmapLevelDataLoaderSO/AssetBundleLevelInfo");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataLoaderSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelFormAssetBundleAsync
// Il2CppName: LoadBeatmapLevelFormAssetBundleAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>* (GlobalNamespace::BeatmapLevelDataLoaderSO::*)(::GlobalNamespace::IPreviewBeatmapLevel*, ::StringW, ::StringW, ::System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelFormAssetBundleAsync)> {
  static const MethodInfo* get() {
    static auto* previewBeatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    static auto* assetBundlePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelDataAssetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelDataLoaderSO*), "LoadBeatmapLevelFormAssetBundleAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previewBeatmapLevel, assetBundlePath, levelDataAssetName, cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelAsync
// Il2CppName: LoadBeatmapLevelAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::IBeatmapLevel*>* (GlobalNamespace::BeatmapLevelDataLoaderSO::*)(::StringW)>(&GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelAsync)> {
  static const MethodInfo* get() {
    static auto* levelID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelDataLoaderSO*), "LoadBeatmapLevelAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelID});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelDataAsync
// Il2CppName: LoadBeatmapLevelDataAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelDataSO*>* (GlobalNamespace::BeatmapLevelDataLoaderSO::*)(::StringW, ::StringW)>(&GlobalNamespace::BeatmapLevelDataLoaderSO::LoadBeatmapLevelDataAsync)> {
  static const MethodInfo* get() {
    static auto* assetBundlePath = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelDataAssetName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelDataLoaderSO*), "LoadBeatmapLevelDataAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{assetBundlePath, levelDataAssetName});
  }
};
