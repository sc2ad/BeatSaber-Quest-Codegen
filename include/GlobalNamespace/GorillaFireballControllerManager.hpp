// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.InputDevice
#include "UnityEngine/XR/InputDevice.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaFireballControllerManager
  class GorillaFireballControllerManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaFireballControllerManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaFireballControllerManager*, "", "GorillaFireballControllerManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: GorillaFireballControllerManager
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaFireballControllerManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.XR.InputDevice leftHand
    // Size: 0x9
    // Offset: 0x18
    ::UnityEngine::XR::InputDevice leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: leftHand and: rightHand
    char __padding0[0x7] = {};
    // public UnityEngine.XR.InputDevice rightHand
    // Size: 0x9
    // Offset: 0x28
    ::UnityEngine::XR::InputDevice rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::InputDevice) == 0x9);
    // Padding between fields: rightHand and: hasInitialized
    char __padding1[0x7] = {};
    // public System.Boolean hasInitialized
    // Size: 0x1
    // Offset: 0x38
    bool hasInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasInitialized and: leftHandLastState
    char __padding2[0x3] = {};
    // public System.Single leftHandLastState
    // Size: 0x4
    // Offset: 0x3C
    float leftHandLastState;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single rightHandLastState
    // Size: 0x4
    // Offset: 0x40
    float rightHandLastState;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single throwingThreshold
    // Size: 0x4
    // Offset: 0x44
    float throwingThreshold;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.XR.InputDevice leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_leftHand();
    // Get instance field reference: public UnityEngine.XR.InputDevice rightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::InputDevice& dyn_rightHand();
    // Get instance field reference: public System.Boolean hasInitialized
    [[deprecated("Use field access instead!")]] bool& dyn_hasInitialized();
    // Get instance field reference: public System.Single leftHandLastState
    [[deprecated("Use field access instead!")]] float& dyn_leftHandLastState();
    // Get instance field reference: public System.Single rightHandLastState
    [[deprecated("Use field access instead!")]] float& dyn_rightHandLastState();
    // Get instance field reference: public System.Single throwingThreshold
    [[deprecated("Use field access instead!")]] float& dyn_throwingThreshold();
    // public System.Void .ctor()
    // Offset: 0xC6A1F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaFireballControllerManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFireballControllerManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaFireballControllerManager*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0xC69B64
    void Update();
    // public System.Void TryThrowFireball(System.Boolean isLeftHand)
    // Offset: 0xC69FD4
    void TryThrowFireball(bool isLeftHand);
    // public System.Void CreateFireball(System.Boolean isLeftHand)
    // Offset: 0xC69D68
    void CreateFireball(bool isLeftHand);
  }; // GorillaFireballControllerManager
  #pragma pack(pop)
  static check_size<sizeof(GorillaFireballControllerManager), 68 + sizeof(float)> __GlobalNamespace_GorillaFireballControllerManagerSizeCheck;
  static_assert(sizeof(GorillaFireballControllerManager) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireballControllerManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireballControllerManager::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireballControllerManager::*)()>(&GlobalNamespace::GorillaFireballControllerManager::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireballControllerManager*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireballControllerManager::TryThrowFireball
// Il2CppName: TryThrowFireball
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireballControllerManager::*)(bool)>(&GlobalNamespace::GorillaFireballControllerManager::TryThrowFireball)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireballControllerManager*), "TryThrowFireball", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireballControllerManager::CreateFireball
// Il2CppName: CreateFireball
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireballControllerManager::*)(bool)>(&GlobalNamespace::GorillaFireballControllerManager::CreateFireball)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireballControllerManager*), "CreateFireball", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
