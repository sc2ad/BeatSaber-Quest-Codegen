// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MainCameraCullingMask
  // [TokenAttribute] Offset: FFFFFFFF
  class MainCameraCullingMask : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MainCameraCullingMask::InitData
    class InitData;
    // private UnityEngine.Camera _camera
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Camera* camera;
    // Field size check
    static_assert(sizeof(UnityEngine::Camera*) == 0x8);
    // [InjectOptionalAttribute] Offset: 0xEEB698
    // private MainCameraCullingMask/InitData _initData
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MainCameraCullingMask::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MainCameraCullingMask::InitData*) == 0x8);
    // Creating value type constructor for type: MainCameraCullingMask
    MainCameraCullingMask(UnityEngine::Camera* camera_ = {}, GlobalNamespace::MainCameraCullingMask::InitData* initData_ = {}) noexcept : camera{camera_}, initData{initData_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Camera _camera
    UnityEngine::Camera*& dyn__camera();
    // Get instance field reference: private MainCameraCullingMask/InitData _initData
    GlobalNamespace::MainCameraCullingMask::InitData*& dyn__initData();
    // protected System.Void Start()
    // Offset: 0x25876A4
    void Start();
    // public System.Void .ctor()
    // Offset: 0x258778C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainCameraCullingMask* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainCameraCullingMask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainCameraCullingMask*, creationType>()));
    }
  }; // MainCameraCullingMask
  #pragma pack(pop)
  static check_size<sizeof(MainCameraCullingMask), 32 + sizeof(GlobalNamespace::MainCameraCullingMask::InitData*)> __GlobalNamespace_MainCameraCullingMaskSizeCheck;
  static_assert(sizeof(MainCameraCullingMask) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MainCameraCullingMask*, "", "MainCameraCullingMask");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MainCameraCullingMask::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MainCameraCullingMask::*)()>(&GlobalNamespace::MainCameraCullingMask::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MainCameraCullingMask*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MainCameraCullingMask::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
