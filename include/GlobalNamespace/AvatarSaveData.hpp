// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AvatarSaveData
  class AvatarSaveData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AvatarSaveData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AvatarSaveData*, "", "AvatarSaveData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: AvatarSaveData
  // [TokenAttribute] Offset: FFFFFFFF
  class AvatarSaveData : public ::Il2CppObject {
    public:
    public:
    // public System.String headTopId
    // Size: 0x8
    // Offset: 0x10
    ::StringW headTopId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String glassesId
    // Size: 0x8
    // Offset: 0x18
    ::StringW glassesId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String facialHairId
    // Size: 0x8
    // Offset: 0x20
    ::StringW facialHairId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String handsId
    // Size: 0x8
    // Offset: 0x28
    ::StringW handsId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String clothesId
    // Size: 0x8
    // Offset: 0x30
    ::StringW clothesId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String skinColorId
    // Size: 0x8
    // Offset: 0x38
    ::StringW skinColorId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String mouthId
    // Size: 0x8
    // Offset: 0x40
    ::StringW mouthId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String eyesId
    // Size: 0x8
    // Offset: 0x48
    ::StringW eyesId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Color headTopPrimaryColor
    // Size: 0x10
    // Offset: 0x50
    ::UnityEngine::Color headTopPrimaryColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color headTopSecondaryColor
    // Size: 0x10
    // Offset: 0x60
    ::UnityEngine::Color headTopSecondaryColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color glassesColor
    // Size: 0x10
    // Offset: 0x70
    ::UnityEngine::Color glassesColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color facialHairColor
    // Size: 0x10
    // Offset: 0x80
    ::UnityEngine::Color facialHairColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color handsColor
    // Size: 0x10
    // Offset: 0x90
    ::UnityEngine::Color handsColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color clothesPrimaryColor
    // Size: 0x10
    // Offset: 0xA0
    ::UnityEngine::Color clothesPrimaryColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color clothesSecondaryColor
    // Size: 0x10
    // Offset: 0xB0
    ::UnityEngine::Color clothesSecondaryColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    // public UnityEngine.Color clothesDetailColor
    // Size: 0x10
    // Offset: 0xC0
    ::UnityEngine::Color clothesDetailColor;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: public System.String headTopId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_headTopId();
    // Get instance field reference: public System.String glassesId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_glassesId();
    // Get instance field reference: public System.String facialHairId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_facialHairId();
    // Get instance field reference: public System.String handsId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_handsId();
    // Get instance field reference: public System.String clothesId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_clothesId();
    // Get instance field reference: public System.String skinColorId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_skinColorId();
    // Get instance field reference: public System.String mouthId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_mouthId();
    // Get instance field reference: public System.String eyesId
    [[deprecated("Use field access instead!")]] ::StringW& dyn_eyesId();
    // Get instance field reference: public UnityEngine.Color headTopPrimaryColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_headTopPrimaryColor();
    // Get instance field reference: public UnityEngine.Color headTopSecondaryColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_headTopSecondaryColor();
    // Get instance field reference: public UnityEngine.Color glassesColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_glassesColor();
    // Get instance field reference: public UnityEngine.Color facialHairColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_facialHairColor();
    // Get instance field reference: public UnityEngine.Color handsColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_handsColor();
    // Get instance field reference: public UnityEngine.Color clothesPrimaryColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_clothesPrimaryColor();
    // Get instance field reference: public UnityEngine.Color clothesSecondaryColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_clothesSecondaryColor();
    // Get instance field reference: public UnityEngine.Color clothesDetailColor
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn_clothesDetailColor();
    // public System.Void .ctor()
    // Offset: 0x157DD68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarSaveData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AvatarSaveData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarSaveData*, creationType>()));
    }
  }; // AvatarSaveData
  #pragma pack(pop)
  static check_size<sizeof(AvatarSaveData), 192 + sizeof(::UnityEngine::Color)> __GlobalNamespace_AvatarSaveDataSizeCheck;
  static_assert(sizeof(AvatarSaveData) == 0xD0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AvatarSaveData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
