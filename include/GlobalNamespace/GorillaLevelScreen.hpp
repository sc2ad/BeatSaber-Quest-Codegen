// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaLevelScreen
  class GorillaLevelScreen;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaLevelScreen);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaLevelScreen*, "", "GorillaLevelScreen");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GorillaLevelScreen
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaLevelScreen : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.String startingText
    // Size: 0x8
    // Offset: 0x18
    ::StringW startingText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.Material goodMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* goodMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material badMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* badMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.UI.Text myText
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Text* myText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.String startingText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_startingText();
    // Get instance field reference: public UnityEngine.Material goodMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_goodMaterial();
    // Get instance field reference: public UnityEngine.Material badMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_badMaterial();
    // Get instance field reference: public UnityEngine.UI.Text myText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_myText();
    // public System.Void .ctor()
    // Offset: 0xDB18A4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaLevelScreen* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaLevelScreen::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaLevelScreen*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xDB1768
    void Awake();
    // public System.Void UpdateText(System.String newText, System.Boolean setToGoodMaterial)
    // Offset: 0xDB17A4
    void UpdateText(::StringW newText, bool setToGoodMaterial);
  }; // GorillaLevelScreen
  #pragma pack(pop)
  static check_size<sizeof(GorillaLevelScreen), 48 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_GorillaLevelScreenSizeCheck;
  static_assert(sizeof(GorillaLevelScreen) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaLevelScreen::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaLevelScreen::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaLevelScreen::*)()>(&GlobalNamespace::GorillaLevelScreen::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaLevelScreen*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaLevelScreen::UpdateText
// Il2CppName: UpdateText
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaLevelScreen::*)(::StringW, bool)>(&GlobalNamespace::GorillaLevelScreen::UpdateText)> {
  static const MethodInfo* get() {
    static auto* newText = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* setToGoodMaterial = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaLevelScreen*), "UpdateText", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newText, setToGoodMaterial});
  }
};
