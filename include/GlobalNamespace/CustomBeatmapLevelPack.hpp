// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IBeatmapLevelPack
#include "GlobalNamespace/IBeatmapLevelPack.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatmapLevelCollection
  class IBeatmapLevelCollection;
  // Forward declaring type: CustomBeatmapLevelCollection
  class CustomBeatmapLevelCollection;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CustomBeatmapLevelPack
  class CustomBeatmapLevelPack;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CustomBeatmapLevelPack);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CustomBeatmapLevelPack*, "", "CustomBeatmapLevelPack");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: CustomBeatmapLevelPack
  // [TokenAttribute] Offset: FFFFFFFF
  class CustomBeatmapLevelPack : public ::Il2CppObject/*, public ::GlobalNamespace::IBeatmapLevelPack*/ {
    public:
    public:
    // private readonly System.String <packID>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW packID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <packName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW packName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly System.String <shortPackName>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::StringW shortPackName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private readonly UnityEngine.Sprite <coverImage>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Sprite* coverImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private readonly UnityEngine.Sprite <smallCoverImage>k__BackingField
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Sprite* smallCoverImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private readonly IBeatmapLevelCollection <beatmapLevelCollection>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::IBeatmapLevelCollection* beatmapLevelCollection;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatmapLevelCollection*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapLevelPack
    operator ::GlobalNamespace::IBeatmapLevelPack() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapLevelPack*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapLevelPack
    inline ::GlobalNamespace::IBeatmapLevelPack* i_IBeatmapLevelPack() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapLevelPack*>(this);
    }
    // Get instance field reference: private readonly System.String <packID>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$packID$k__BackingField();
    // Get instance field reference: private readonly System.String <packName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$packName$k__BackingField();
    // Get instance field reference: private readonly System.String <shortPackName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$shortPackName$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Sprite <coverImage>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_$coverImage$k__BackingField();
    // Get instance field reference: private readonly UnityEngine.Sprite <smallCoverImage>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_$smallCoverImage$k__BackingField();
    // Get instance field reference: private readonly IBeatmapLevelCollection <beatmapLevelCollection>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelCollection*& dyn_$beatmapLevelCollection$k__BackingField();
    // public System.String get_packID()
    // Offset: 0x148D400
    ::StringW get_packID();
    // public System.String get_packName()
    // Offset: 0x148D408
    ::StringW get_packName();
    // public System.String get_shortPackName()
    // Offset: 0x148D410
    ::StringW get_shortPackName();
    // public System.String get_collectionName()
    // Offset: 0x148D418
    ::StringW get_collectionName();
    // public UnityEngine.Sprite get_coverImage()
    // Offset: 0x148D420
    ::UnityEngine::Sprite* get_coverImage();
    // public UnityEngine.Sprite get_smallCoverImage()
    // Offset: 0x148D428
    ::UnityEngine::Sprite* get_smallCoverImage();
    // public IBeatmapLevelCollection get_beatmapLevelCollection()
    // Offset: 0x148D430
    ::GlobalNamespace::IBeatmapLevelCollection* get_beatmapLevelCollection();
    // public System.Boolean get_isPackAlwaysOwned()
    // Offset: 0x148D438
    bool get_isPackAlwaysOwned();
    // public System.Void .ctor(System.String packID, System.String packName, System.String shortPackName, UnityEngine.Sprite coverImage, UnityEngine.Sprite smallCoverImage, CustomBeatmapLevelCollection beatmapLevelCollection)
    // Offset: 0x148D440
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CustomBeatmapLevelPack* New_ctor(::StringW packID, ::StringW packName, ::StringW shortPackName, ::UnityEngine::Sprite* coverImage, ::UnityEngine::Sprite* smallCoverImage, ::GlobalNamespace::CustomBeatmapLevelCollection* beatmapLevelCollection) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CustomBeatmapLevelPack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CustomBeatmapLevelPack*, creationType>(packID, packName, shortPackName, coverImage, smallCoverImage, beatmapLevelCollection)));
    }
  }; // CustomBeatmapLevelPack
  #pragma pack(pop)
  static check_size<sizeof(CustomBeatmapLevelPack), 56 + sizeof(::GlobalNamespace::IBeatmapLevelCollection*)> __GlobalNamespace_CustomBeatmapLevelPackSizeCheck;
  static_assert(sizeof(CustomBeatmapLevelPack) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_packID
// Il2CppName: get_packID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_packID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_packID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_packName
// Il2CppName: get_packName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_packName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_packName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_shortPackName
// Il2CppName: get_shortPackName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_shortPackName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_shortPackName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_collectionName
// Il2CppName: get_collectionName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_collectionName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_collectionName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_coverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_smallCoverImage
// Il2CppName: get_smallCoverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_smallCoverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_smallCoverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_beatmapLevelCollection
// Il2CppName: get_beatmapLevelCollection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IBeatmapLevelCollection* (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_beatmapLevelCollection)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_beatmapLevelCollection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::get_isPackAlwaysOwned
// Il2CppName: get_isPackAlwaysOwned
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CustomBeatmapLevelPack::*)()>(&GlobalNamespace::CustomBeatmapLevelPack::get_isPackAlwaysOwned)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CustomBeatmapLevelPack*), "get_isPackAlwaysOwned", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CustomBeatmapLevelPack::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
