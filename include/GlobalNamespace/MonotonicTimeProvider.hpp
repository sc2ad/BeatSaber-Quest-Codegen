// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BGNet.Core.ITimeProvider
#include "BGNet/Core/ITimeProvider.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MonotonicTimeProvider
  class MonotonicTimeProvider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MonotonicTimeProvider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MonotonicTimeProvider*, "", "MonotonicTimeProvider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MonotonicTimeProvider
  // [TokenAttribute] Offset: FFFFFFFF
  class MonotonicTimeProvider : public ::Il2CppObject/*, public ::BGNet::Core::ITimeProvider*/ {
    public:
    public:
    // private readonly System.Double _timeSpanTicksPerStopwatchTick
    // Size: 0x8
    // Offset: 0x10
    double timeSpanTicksPerStopwatchTick;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // private readonly System.Int64 _startTicks
    // Size: 0x8
    // Offset: 0x18
    int64_t startTicks;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly System.Diagnostics.Stopwatch _stopwatch
    // Size: 0x8
    // Offset: 0x20
    ::System::Diagnostics::Stopwatch* stopwatch;
    // Field size check
    static_assert(sizeof(::System::Diagnostics::Stopwatch*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::BGNet::Core::ITimeProvider
    operator ::BGNet::Core::ITimeProvider() noexcept {
      return *reinterpret_cast<::BGNet::Core::ITimeProvider*>(this);
    }
    // Creating interface conversion operator: i_ITimeProvider
    inline ::BGNet::Core::ITimeProvider* i_ITimeProvider() noexcept {
      return reinterpret_cast<::BGNet::Core::ITimeProvider*>(this);
    }
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x11016A4
    // Get static field: static public readonly MonotonicTimeProvider instance
    static ::GlobalNamespace::MonotonicTimeProvider* _get_instance();
    // Set static field: static public readonly MonotonicTimeProvider instance
    static void _set_instance(::GlobalNamespace::MonotonicTimeProvider* value);
    // Get instance field reference: private readonly System.Double _timeSpanTicksPerStopwatchTick
    [[deprecated("Use field access instead!")]] double& dyn__timeSpanTicksPerStopwatchTick();
    // Get instance field reference: private readonly System.Int64 _startTicks
    [[deprecated("Use field access instead!")]] int64_t& dyn__startTicks();
    // Get instance field reference: private readonly System.Diagnostics.Stopwatch _stopwatch
    [[deprecated("Use field access instead!")]] ::System::Diagnostics::Stopwatch*& dyn__stopwatch();
    // private System.Void .ctor()
    // Offset: 0x19F8540
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonotonicTimeProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MonotonicTimeProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonotonicTimeProvider*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x19F8780
    static void _cctor();
    // public System.Int64 GetTimeMs()
    // Offset: 0x19F86F4
    int64_t GetTimeMs();
    // public System.Int64 GetTicks()
    // Offset: 0x19F8724
    int64_t GetTicks();
  }; // MonotonicTimeProvider
  #pragma pack(pop)
  static check_size<sizeof(MonotonicTimeProvider), 32 + sizeof(::System::Diagnostics::Stopwatch*)> __GlobalNamespace_MonotonicTimeProviderSizeCheck;
  static_assert(sizeof(MonotonicTimeProvider) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MonotonicTimeProvider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MonotonicTimeProvider::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::MonotonicTimeProvider::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MonotonicTimeProvider*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MonotonicTimeProvider::GetTimeMs
// Il2CppName: GetTimeMs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (GlobalNamespace::MonotonicTimeProvider::*)()>(&GlobalNamespace::MonotonicTimeProvider::GetTimeMs)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MonotonicTimeProvider*), "GetTimeMs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MonotonicTimeProvider::GetTicks
// Il2CppName: GetTicks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int64_t (GlobalNamespace::MonotonicTimeProvider::*)()>(&GlobalNamespace::MonotonicTimeProvider::GetTicks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MonotonicTimeProvider*), "GetTicks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
