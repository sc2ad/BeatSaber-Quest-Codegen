// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BasicBeatmapEventType
#include "GlobalNamespace/BasicBeatmapEventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCallbacksController
  class BeatmapCallbacksController;
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: BeatmapDataCallbackWrapper
  class BeatmapDataCallbackWrapper;
  // Forward declaring type: BasicBeatmapEventData
  class BasicBeatmapEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightPairRotationEventEffect
  class LightPairRotationEventEffect;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightPairRotationEventEffect);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightPairRotationEventEffect*, "", "LightPairRotationEventEffect");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: LightPairRotationEventEffect
  // [TokenAttribute] Offset: FFFFFFFF
  class LightPairRotationEventEffect : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LightPairRotationEventEffect::RotationData
    class RotationData;
    public:
    // private BasicBeatmapEventType _eventL
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::BasicBeatmapEventType eventL;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasicBeatmapEventType) == 0x4);
    // private BasicBeatmapEventType _eventR
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::BasicBeatmapEventType eventR;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasicBeatmapEventType) == 0x4);
    // private BasicBeatmapEventType _switchOverrideRandomValuesEvent
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::BasicBeatmapEventType switchOverrideRandomValuesEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BasicBeatmapEventType) == 0x4);
    // private UnityEngine.Vector3 _rotationVector
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 rotationVector;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0x10E0168
    // private System.Boolean _overrideRandomValues
    // Size: 0x1
    // Offset: 0x30
    bool overrideRandomValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useZPositionForAngleOffset
    // Size: 0x1
    // Offset: 0x31
    bool useZPositionForAngleOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useZPositionForAngleOffset and: zPositionAngleOffsetScale
    char __padding5[0x2] = {};
    // private System.Single _zPositionAngleOffsetScale
    // Size: 0x4
    // Offset: 0x34
    float zPositionAngleOffsetScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startRotation
    // Size: 0x4
    // Offset: 0x38
    float startRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: startRotation and: transformL
    char __padding7[0x4] = {};
    // [SpaceAttribute] Offset: 0x10E01D0
    // private UnityEngine.Transform _transformL
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* transformL;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _transformR
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::Transform* transformR;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // [InjectAttribute] Offset: 0x10E0218
    // private readonly BeatmapCallbacksController _beatmapCallbacksController
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::BeatmapCallbacksController* beatmapCallbacksController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCallbacksController*) == 0x8);
    // [InjectAttribute] Offset: 0x10E0228
    // private readonly IAudioTimeSource _audioTimeSource
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::IAudioTimeSource* audioTimeSource;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IAudioTimeSource*) == 0x8);
    // private LightPairRotationEventEffect/RotationData _rotationDataL
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationDataL;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightPairRotationEventEffect::RotationData*) == 0x8);
    // private LightPairRotationEventEffect/RotationData _rotationDataR
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationDataR;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightPairRotationEventEffect::RotationData*) == 0x8);
    // private System.Int32 _randomGenerationFrameNum
    // Size: 0x4
    // Offset: 0x70
    int randomGenerationFrameNum;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _randomStartRotation
    // Size: 0x4
    // Offset: 0x74
    float randomStartRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _randomDirection
    // Size: 0x4
    // Offset: 0x78
    float randomDirection;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: randomDirection and: beatmapDataCallbackWrapper
    char __padding16[0x4] = {};
    // private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::BeatmapDataCallbackWrapper* beatmapDataCallbackWrapper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kSpeedMultiplier
    static constexpr const float kSpeedMultiplier = 20;
    // Get static field: static private System.Single kSpeedMultiplier
    static float _get_kSpeedMultiplier();
    // Set static field: static private System.Single kSpeedMultiplier
    static void _set_kSpeedMultiplier(float value);
    // Get instance field reference: private BasicBeatmapEventType _eventL
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& dyn__eventL();
    // Get instance field reference: private BasicBeatmapEventType _eventR
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& dyn__eventR();
    // Get instance field reference: private BasicBeatmapEventType _switchOverrideRandomValuesEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BasicBeatmapEventType& dyn__switchOverrideRandomValuesEvent();
    // Get instance field reference: private UnityEngine.Vector3 _rotationVector
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rotationVector();
    // Get instance field reference: private System.Boolean _overrideRandomValues
    [[deprecated("Use field access instead!")]] bool& dyn__overrideRandomValues();
    // Get instance field reference: private System.Boolean _useZPositionForAngleOffset
    [[deprecated("Use field access instead!")]] bool& dyn__useZPositionForAngleOffset();
    // Get instance field reference: private System.Single _zPositionAngleOffsetScale
    [[deprecated("Use field access instead!")]] float& dyn__zPositionAngleOffsetScale();
    // Get instance field reference: private System.Single _startRotation
    [[deprecated("Use field access instead!")]] float& dyn__startRotation();
    // Get instance field reference: private UnityEngine.Transform _transformL
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transformL();
    // Get instance field reference: private UnityEngine.Transform _transformR
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transformR();
    // Get instance field reference: private readonly BeatmapCallbacksController _beatmapCallbacksController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCallbacksController*& dyn__beatmapCallbacksController();
    // Get instance field reference: private readonly IAudioTimeSource _audioTimeSource
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& dyn__audioTimeSource();
    // Get instance field reference: private LightPairRotationEventEffect/RotationData _rotationDataL
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightPairRotationEventEffect::RotationData*& dyn__rotationDataL();
    // Get instance field reference: private LightPairRotationEventEffect/RotationData _rotationDataR
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightPairRotationEventEffect::RotationData*& dyn__rotationDataR();
    // Get instance field reference: private System.Int32 _randomGenerationFrameNum
    [[deprecated("Use field access instead!")]] int& dyn__randomGenerationFrameNum();
    // Get instance field reference: private System.Single _randomStartRotation
    [[deprecated("Use field access instead!")]] float& dyn__randomStartRotation();
    // Get instance field reference: private System.Single _randomDirection
    [[deprecated("Use field access instead!")]] float& dyn__randomDirection();
    // Get instance field reference: private BeatmapDataCallbackWrapper _beatmapDataCallbackWrapper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDataCallbackWrapper*& dyn__beatmapDataCallbackWrapper();
    // public System.Void .ctor()
    // Offset: 0x14BB17C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightPairRotationEventEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightPairRotationEventEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightPairRotationEventEffect*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x14BA500
    void Start();
    // protected System.Void Update()
    // Offset: 0x14BA860
    void Update();
    // private System.Void OnDestroy()
    // Offset: 0x14BAB4C
    void OnDestroy();
    // private System.Void HandleBeatmapEvent(BasicBeatmapEventData basicBeatmapEventData)
    // Offset: 0x14BAB68
    void HandleBeatmapEvent(::GlobalNamespace::BasicBeatmapEventData* basicBeatmapEventData);
    // private System.Void UpdateRotationData(System.Int32 beatmapEventDataValue, LightPairRotationEventEffect/RotationData rotationData, System.Single startRotationOffset, System.Single direction)
    // Offset: 0x14BAF08
    void UpdateRotationData(int beatmapEventDataValue, ::GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationData, float startRotationOffset, float direction);
  }; // LightPairRotationEventEffect
  #pragma pack(pop)
  static check_size<sizeof(LightPairRotationEventEffect), 128 + sizeof(::GlobalNamespace::BeatmapDataCallbackWrapper*)> __GlobalNamespace_LightPairRotationEventEffectSizeCheck;
  static_assert(sizeof(LightPairRotationEventEffect) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightPairRotationEventEffect::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightPairRotationEventEffect::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightPairRotationEventEffect::*)()>(&GlobalNamespace::LightPairRotationEventEffect::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightPairRotationEventEffect*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightPairRotationEventEffect::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightPairRotationEventEffect::*)()>(&GlobalNamespace::LightPairRotationEventEffect::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightPairRotationEventEffect*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightPairRotationEventEffect::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightPairRotationEventEffect::*)()>(&GlobalNamespace::LightPairRotationEventEffect::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightPairRotationEventEffect*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightPairRotationEventEffect::HandleBeatmapEvent
// Il2CppName: HandleBeatmapEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightPairRotationEventEffect::*)(::GlobalNamespace::BasicBeatmapEventData*)>(&GlobalNamespace::LightPairRotationEventEffect::HandleBeatmapEvent)> {
  static const MethodInfo* get() {
    static auto* basicBeatmapEventData = &::il2cpp_utils::GetClassFromName("", "BasicBeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightPairRotationEventEffect*), "HandleBeatmapEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{basicBeatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightPairRotationEventEffect::UpdateRotationData
// Il2CppName: UpdateRotationData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightPairRotationEventEffect::*)(int, ::GlobalNamespace::LightPairRotationEventEffect::RotationData*, float, float)>(&GlobalNamespace::LightPairRotationEventEffect::UpdateRotationData)> {
  static const MethodInfo* get() {
    static auto* beatmapEventDataValue = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* rotationData = &::il2cpp_utils::GetClassFromName("", "LightPairRotationEventEffect/RotationData")->byval_arg;
    static auto* startRotationOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* direction = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightPairRotationEventEffect*), "UpdateRotationData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventDataValue, rotationData, startRotationOffset, direction});
  }
};
