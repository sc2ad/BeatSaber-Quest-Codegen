// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: ILevelGameplaySetupData
#include "GlobalNamespace/ILevelGameplaySetupData.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: LevelGameplaySetupData
  // [TokenAttribute] Offset: FFFFFFFF
  class LevelGameplaySetupData : public ::Il2CppObject/*, public GlobalNamespace::ILevelGameplaySetupData*/ {
    public:
    // private GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF02DBC
    // private IPreviewBeatmapLevel <beatmapLevel>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IPreviewBeatmapLevel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF02DCC
    // private BeatmapCharacteristicSO <beatmapCharacteristic>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCharacteristicSO*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF02DDC
    // private BeatmapDifficulty <beatmapDifficulty>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::BeatmapDifficulty beatmapDifficulty;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficulty) == 0x4);
    // Creating value type constructor for type: LevelGameplaySetupData
    LevelGameplaySetupData(GlobalNamespace::GameplayModifiers* gameplayModifiers_ = {}, GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel_ = {}, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic_ = {}, GlobalNamespace::BeatmapDifficulty beatmapDifficulty_ = {}) noexcept : gameplayModifiers{gameplayModifiers_}, beatmapLevel{beatmapLevel_}, beatmapCharacteristic{beatmapCharacteristic_}, beatmapDifficulty{beatmapDifficulty_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ILevelGameplaySetupData
    operator GlobalNamespace::ILevelGameplaySetupData() noexcept {
      return *reinterpret_cast<GlobalNamespace::ILevelGameplaySetupData*>(this);
    }
    // Get instance field reference: private GameplayModifiers _gameplayModifiers
    GlobalNamespace::GameplayModifiers*& dyn__gameplayModifiers();
    // Get instance field reference: private IPreviewBeatmapLevel <beatmapLevel>k__BackingField
    GlobalNamespace::IPreviewBeatmapLevel*& dyn_$beatmapLevel$k__BackingField();
    // Get instance field reference: private BeatmapCharacteristicSO <beatmapCharacteristic>k__BackingField
    GlobalNamespace::BeatmapCharacteristicSO*& dyn_$beatmapCharacteristic$k__BackingField();
    // Get instance field reference: private BeatmapDifficulty <beatmapDifficulty>k__BackingField
    GlobalNamespace::BeatmapDifficulty& dyn_$beatmapDifficulty$k__BackingField();
    // public IPreviewBeatmapLevel get_beatmapLevel()
    // Offset: 0x1309DE0
    GlobalNamespace::IPreviewBeatmapLevel* get_beatmapLevel();
    // public System.Void set_beatmapLevel(IPreviewBeatmapLevel value)
    // Offset: 0x1309DE8
    void set_beatmapLevel(GlobalNamespace::IPreviewBeatmapLevel* value);
    // public BeatmapCharacteristicSO get_beatmapCharacteristic()
    // Offset: 0x1309DF0
    GlobalNamespace::BeatmapCharacteristicSO* get_beatmapCharacteristic();
    // public System.Void set_beatmapCharacteristic(BeatmapCharacteristicSO value)
    // Offset: 0x1309DF8
    void set_beatmapCharacteristic(GlobalNamespace::BeatmapCharacteristicSO* value);
    // public BeatmapDifficulty get_beatmapDifficulty()
    // Offset: 0x1309E00
    GlobalNamespace::BeatmapDifficulty get_beatmapDifficulty();
    // public System.Void set_beatmapDifficulty(BeatmapDifficulty value)
    // Offset: 0x1309E08
    void set_beatmapDifficulty(GlobalNamespace::BeatmapDifficulty value);
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0x1309E10
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // public System.Void set_gameplayModifiers(GameplayModifiers value)
    // Offset: 0x1309E7C
    void set_gameplayModifiers(GlobalNamespace::GameplayModifiers* value);
    // public System.Void .ctor()
    // Offset: 0x1309E84
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelGameplaySetupData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LevelGameplaySetupData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelGameplaySetupData*, creationType>()));
    }
  }; // LevelGameplaySetupData
  #pragma pack(pop)
  static check_size<sizeof(LevelGameplaySetupData), 40 + sizeof(GlobalNamespace::BeatmapDifficulty)> __GlobalNamespace_LevelGameplaySetupDataSizeCheck;
  static_assert(sizeof(LevelGameplaySetupData) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LevelGameplaySetupData*, "", "LevelGameplaySetupData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::get_beatmapLevel
// Il2CppName: get_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IPreviewBeatmapLevel* (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::get_beatmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "get_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::set_beatmapLevel
// Il2CppName: set_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)(GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::LevelGameplaySetupData::set_beatmapLevel)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "set_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::get_beatmapCharacteristic
// Il2CppName: get_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapCharacteristicSO* (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::get_beatmapCharacteristic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "get_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::set_beatmapCharacteristic
// Il2CppName: set_beatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)(GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::LevelGameplaySetupData::set_beatmapCharacteristic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "set_beatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::get_beatmapDifficulty
// Il2CppName: get_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapDifficulty (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::get_beatmapDifficulty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "get_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::set_beatmapDifficulty
// Il2CppName: set_beatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)(GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::LevelGameplaySetupData::set_beatmapDifficulty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "set_beatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayModifiers* (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::get_gameplayModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::set_gameplayModifiers
// Il2CppName: set_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)(GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::LevelGameplaySetupData::set_gameplayModifiers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "set_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
