// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ILevelGameplaySetupData
#include "GlobalNamespace/ILevelGameplaySetupData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PreviewDifficultyBeatmap
  class PreviewDifficultyBeatmap;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LevelGameplaySetupData
  class LevelGameplaySetupData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LevelGameplaySetupData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LevelGameplaySetupData*, "", "LevelGameplaySetupData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: LevelGameplaySetupData
  // [TokenAttribute] Offset: FFFFFFFF
  class LevelGameplaySetupData : public ::Il2CppObject/*, public ::GlobalNamespace::ILevelGameplaySetupData*/ {
    public:
    public:
    // private PreviewDifficultyBeatmap _beatmapLevel
    // Size: 0x8
    // Offset: 0x10
    ::GlobalNamespace::PreviewDifficultyBeatmap* beatmapLevel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PreviewDifficultyBeatmap*) == 0x8);
    // private GameplayModifiers _gameplayModifiers
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayModifiers*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ILevelGameplaySetupData
    operator ::GlobalNamespace::ILevelGameplaySetupData() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ILevelGameplaySetupData*>(this);
    }
    // Creating interface conversion operator: i_ILevelGameplaySetupData
    inline ::GlobalNamespace::ILevelGameplaySetupData* i_ILevelGameplaySetupData() noexcept {
      return reinterpret_cast<::GlobalNamespace::ILevelGameplaySetupData*>(this);
    }
    // Get instance field reference: private PreviewDifficultyBeatmap _beatmapLevel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PreviewDifficultyBeatmap*& dyn__beatmapLevel();
    // Get instance field reference: private GameplayModifiers _gameplayModifiers
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers*& dyn__gameplayModifiers();
    // public PreviewDifficultyBeatmap get_beatmapLevel()
    // Offset: 0x1563DE4
    ::GlobalNamespace::PreviewDifficultyBeatmap* get_beatmapLevel();
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0x1563DEC
    ::GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // public System.Void .ctor()
    // Offset: 0x1563DF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelGameplaySetupData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelGameplaySetupData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelGameplaySetupData*, creationType>()));
    }
    // public System.Void .ctor(PreviewDifficultyBeatmap beatmapLevel, GameplayModifiers gameplayModifiers)
    // Offset: 0x1563E6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelGameplaySetupData* New_ctor(::GlobalNamespace::PreviewDifficultyBeatmap* beatmapLevel, ::GlobalNamespace::GameplayModifiers* gameplayModifiers) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelGameplaySetupData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelGameplaySetupData*, creationType>(beatmapLevel, gameplayModifiers)));
    }
    // public System.Void ClearGameplaySetupData()
    // Offset: 0x1563F28
    void ClearGameplaySetupData();
    // public System.Void SetBeatmapLevel(PreviewDifficultyBeatmap beatmapLevel)
    // Offset: 0x1563F9C
    void SetBeatmapLevel(::GlobalNamespace::PreviewDifficultyBeatmap* beatmapLevel);
    // public System.Void SetGameplayModifiers(GameplayModifiers gameplayModifiers)
    // Offset: 0x1563FA4
    void SetGameplayModifiers(::GlobalNamespace::GameplayModifiers* gameplayModifiers);
  }; // LevelGameplaySetupData
  #pragma pack(pop)
  static check_size<sizeof(LevelGameplaySetupData), 24 + sizeof(::GlobalNamespace::GameplayModifiers*)> __GlobalNamespace_LevelGameplaySetupDataSizeCheck;
  static_assert(sizeof(LevelGameplaySetupData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::get_beatmapLevel
// Il2CppName: get_beatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PreviewDifficultyBeatmap* (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::get_beatmapLevel)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "get_beatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayModifiers* (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::get_gameplayModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::ClearGameplaySetupData
// Il2CppName: ClearGameplaySetupData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)()>(&GlobalNamespace::LevelGameplaySetupData::ClearGameplaySetupData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "ClearGameplaySetupData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::SetBeatmapLevel
// Il2CppName: SetBeatmapLevel
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)(::GlobalNamespace::PreviewDifficultyBeatmap*)>(&GlobalNamespace::LevelGameplaySetupData::SetBeatmapLevel)> {
  static const MethodInfo* get() {
    static auto* beatmapLevel = &::il2cpp_utils::GetClassFromName("", "PreviewDifficultyBeatmap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "SetBeatmapLevel", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelGameplaySetupData::SetGameplayModifiers
// Il2CppName: SetGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelGameplaySetupData::*)(::GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::LevelGameplaySetupData::SetGameplayModifiers)> {
  static const MethodInfo* get() {
    static auto* gameplayModifiers = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelGameplaySetupData*), "SetGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gameplayModifiers});
  }
};
