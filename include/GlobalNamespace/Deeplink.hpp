// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Deeplink
  class Deeplink;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Deeplink);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Deeplink*, "", "Deeplink");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Deeplink
  // [TokenAttribute] Offset: FFFFFFFF
  class Deeplink : public ::Il2CppObject {
    public:
    public:
    // public System.String Destination
    // Size: 0x8
    // Offset: 0x10
    ::StringW Destination;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String LevelID
    // Size: 0x8
    // Offset: 0x18
    ::StringW LevelID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String PackID
    // Size: 0x8
    // Offset: 0x20
    ::StringW PackID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Difficulty
    // Size: 0x8
    // Offset: 0x28
    ::StringW Difficulty;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String Characteristic
    // Size: 0x8
    // Offset: 0x30
    ::StringW Characteristic;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String MultiplayerLobbyCode
    // Size: 0x8
    // Offset: 0x38
    ::StringW MultiplayerLobbyCode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String MultiplayerSecret
    // Size: 0x8
    // Offset: 0x40
    ::StringW MultiplayerSecret;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.UInt64 MultiplayerRoomId
    // Size: 0x8
    // Offset: 0x48
    uint64_t MultiplayerRoomId;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    public:
    // Get instance field reference: public System.String Destination
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Destination();
    // Get instance field reference: public System.String LevelID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_LevelID();
    // Get instance field reference: public System.String PackID
    [[deprecated("Use field access instead!")]] ::StringW& dyn_PackID();
    // Get instance field reference: public System.String Difficulty
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Difficulty();
    // Get instance field reference: public System.String Characteristic
    [[deprecated("Use field access instead!")]] ::StringW& dyn_Characteristic();
    // Get instance field reference: public System.String MultiplayerLobbyCode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MultiplayerLobbyCode();
    // Get instance field reference: public System.String MultiplayerSecret
    [[deprecated("Use field access instead!")]] ::StringW& dyn_MultiplayerSecret();
    // Get instance field reference: public System.UInt64 MultiplayerRoomId
    [[deprecated("Use field access instead!")]] uint64_t& dyn_MultiplayerRoomId();
    // public System.Void .ctor()
    // Offset: 0x1491814
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Deeplink* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Deeplink::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Deeplink*, creationType>()));
    }
  }; // Deeplink
  #pragma pack(pop)
  static check_size<sizeof(Deeplink), 72 + sizeof(uint64_t)> __GlobalNamespace_DeeplinkSizeCheck;
  static_assert(sizeof(Deeplink) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Deeplink::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
