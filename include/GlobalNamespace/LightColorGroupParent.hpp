// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IEditTimeValidated
#include "GlobalNamespace/IEditTimeValidated.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightColorGroupParent
  class LightColorGroupParent;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightColorGroupParent);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightColorGroupParent*, "", "LightColorGroupParent");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: LightColorGroupParent
  // [TokenAttribute] Offset: FFFFFFFF
  class LightColorGroupParent : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IEditTimeValidated*/ {
    public:
    public:
    // private System.Int32 _lightId
    // Size: 0x4
    // Offset: 0x18
    int lightId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IEditTimeValidated
    operator ::GlobalNamespace::IEditTimeValidated() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IEditTimeValidated*>(this);
    }
    // Creating interface conversion operator: i_IEditTimeValidated
    inline ::GlobalNamespace::IEditTimeValidated* i_IEditTimeValidated() noexcept {
      return reinterpret_cast<::GlobalNamespace::IEditTimeValidated*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _lightId
    [[deprecated("Use field access instead!")]] int& dyn__lightId();
    // public System.Int32 get_lightId()
    // Offset: 0x14BA3F8
    int get_lightId();
    // public System.Void .ctor()
    // Offset: 0x14BA400
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightColorGroupParent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightColorGroupParent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightColorGroupParent*, creationType>()));
    }
  }; // LightColorGroupParent
  #pragma pack(pop)
  static check_size<sizeof(LightColorGroupParent), 24 + sizeof(int)> __GlobalNamespace_LightColorGroupParentSizeCheck;
  static_assert(sizeof(LightColorGroupParent) == 0x1C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupParent::get_lightId
// Il2CppName: get_lightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightColorGroupParent::*)()>(&GlobalNamespace::LightColorGroupParent::get_lightId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightColorGroupParent*), "get_lightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightColorGroupParent::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
