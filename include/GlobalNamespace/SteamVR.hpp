// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: Valve.VR.VRTextureBounds_t
#include "Valve/VR/VRTextureBounds_t.hpp"
// Including type: SteamVR_Utils/RigidTransform
#include "GlobalNamespace/SteamVR_Utils_RigidTransform.hpp"
// Including type: Valve.VR.ETextureType
#include "Valve/VR/ETextureType.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
  // Forward declaring type: CVRCompositor
  class CVRCompositor;
  // Forward declaring type: CVROverlay
  class CVROverlay;
  // Forward declaring type: EVRInitError
  struct EVRInitError;
  // Forward declaring type: ETrackedDeviceProperty
  struct ETrackedDeviceProperty;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SteamVR
  class SteamVR;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamVR);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamVR*, "", "SteamVR");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamVR : public ::Il2CppObject/*, public ::System::IDisposable*/ {
    public:
    public:
    // private Valve.VR.CVRSystem <hmd>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::Valve::VR::CVRSystem* hmd;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRSystem*) == 0x8);
    // private Valve.VR.CVRCompositor <compositor>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Valve::VR::CVRCompositor* compositor;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVRCompositor*) == 0x8);
    // private Valve.VR.CVROverlay <overlay>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::Valve::VR::CVROverlay* overlay;
    // Field size check
    static_assert(sizeof(::Valve::VR::CVROverlay*) == 0x8);
    // private System.Single <sceneWidth>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float sceneWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <sceneHeight>k__BackingField
    // Size: 0x4
    // Offset: 0x2C
    float sceneHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <aspect>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    float aspect;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <fieldOfView>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    float fieldOfView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector2 <tanHalfFov>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Vector2 tanHalfFov;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector2) == 0x8);
    // private Valve.VR.VRTextureBounds_t[] <textureBounds>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::Valve::VR::VRTextureBounds_t> textureBounds;
    // Field size check
    static_assert(sizeof(::ArrayW<::Valve::VR::VRTextureBounds_t>) == 0x8);
    // private SteamVR_Utils/RigidTransform[] <eyes>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform> eyes;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform>) == 0x8);
    // public Valve.VR.ETextureType textureType
    // Size: 0x4
    // Offset: 0x50
    ::Valve::VR::ETextureType textureType;
    // Field size check
    static_assert(sizeof(::Valve::VR::ETextureType) == 0x4);
    public:
    // Creating interface conversion operator: operator ::System::IDisposable
    operator ::System::IDisposable() noexcept {
      return *reinterpret_cast<::System::IDisposable*>(this);
    }
    // Creating interface conversion operator: i_IDisposable
    inline ::System::IDisposable* i_IDisposable() noexcept {
      return reinterpret_cast<::System::IDisposable*>(this);
    }
    // Get static field: static private System.Boolean _enabled
    static bool _get__enabled();
    // Set static field: static private System.Boolean _enabled
    static void _set__enabled(bool value);
    // Get static field: static private SteamVR _instance
    static ::GlobalNamespace::SteamVR* _get__instance();
    // Set static field: static private SteamVR _instance
    static void _set__instance(::GlobalNamespace::SteamVR* value);
    // Get static field: static private System.Boolean <initializing>k__BackingField
    static bool _get_$initializing$k__BackingField();
    // Set static field: static private System.Boolean <initializing>k__BackingField
    static void _set_$initializing$k__BackingField(bool value);
    // Get static field: static private System.Boolean <calibrating>k__BackingField
    static bool _get_$calibrating$k__BackingField();
    // Set static field: static private System.Boolean <calibrating>k__BackingField
    static void _set_$calibrating$k__BackingField(bool value);
    // Get static field: static private System.Boolean <outOfRange>k__BackingField
    static bool _get_$outOfRange$k__BackingField();
    // Set static field: static private System.Boolean <outOfRange>k__BackingField
    static void _set_$outOfRange$k__BackingField(bool value);
    // Get static field: static public System.Boolean[] connected
    static ::ArrayW<bool> _get_connected();
    // Set static field: static public System.Boolean[] connected
    static void _set_connected(::ArrayW<bool> value);
    // Get instance field reference: private Valve.VR.CVRSystem <hmd>k__BackingField
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRSystem*& dyn_$hmd$k__BackingField();
    // Get instance field reference: private Valve.VR.CVRCompositor <compositor>k__BackingField
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVRCompositor*& dyn_$compositor$k__BackingField();
    // Get instance field reference: private Valve.VR.CVROverlay <overlay>k__BackingField
    [[deprecated("Use field access instead!")]] ::Valve::VR::CVROverlay*& dyn_$overlay$k__BackingField();
    // Get instance field reference: private System.Single <sceneWidth>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$sceneWidth$k__BackingField();
    // Get instance field reference: private System.Single <sceneHeight>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$sceneHeight$k__BackingField();
    // Get instance field reference: private System.Single <aspect>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$aspect$k__BackingField();
    // Get instance field reference: private System.Single <fieldOfView>k__BackingField
    [[deprecated("Use field access instead!")]] float& dyn_$fieldOfView$k__BackingField();
    // Get instance field reference: private UnityEngine.Vector2 <tanHalfFov>k__BackingField
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector2& dyn_$tanHalfFov$k__BackingField();
    // Get instance field reference: private Valve.VR.VRTextureBounds_t[] <textureBounds>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::Valve::VR::VRTextureBounds_t>& dyn_$textureBounds$k__BackingField();
    // Get instance field reference: private SteamVR_Utils/RigidTransform[] <eyes>k__BackingField
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform>& dyn_$eyes$k__BackingField();
    // Get instance field reference: public Valve.VR.ETextureType textureType
    [[deprecated("Use field access instead!")]] ::Valve::VR::ETextureType& dyn_textureType();
    // static public System.Boolean get_active()
    // Offset: 0x18B2A60
    static bool get_active();
    // static public System.Boolean get_enabled()
    // Offset: 0x18B2AD0
    static bool get_enabled();
    // static public System.Void set_enabled(System.Boolean value)
    // Offset: 0x18B2B6C
    static void set_enabled(bool value);
    // static public SteamVR get_instance()
    // Offset: 0x18B2CB0
    static ::GlobalNamespace::SteamVR* get_instance();
    // static public System.Boolean get_usingNativeSupport()
    // Offset: 0x18B2FF0
    static bool get_usingNativeSupport();
    // public Valve.VR.CVRSystem get_hmd()
    // Offset: 0x18B39C0
    ::Valve::VR::CVRSystem* get_hmd();
    // private System.Void set_hmd(Valve.VR.CVRSystem value)
    // Offset: 0x18B39C8
    void set_hmd(::Valve::VR::CVRSystem* value);
    // public Valve.VR.CVRCompositor get_compositor()
    // Offset: 0x18B39D0
    ::Valve::VR::CVRCompositor* get_compositor();
    // private System.Void set_compositor(Valve.VR.CVRCompositor value)
    // Offset: 0x18B39D8
    void set_compositor(::Valve::VR::CVRCompositor* value);
    // public Valve.VR.CVROverlay get_overlay()
    // Offset: 0x18B39E0
    ::Valve::VR::CVROverlay* get_overlay();
    // private System.Void set_overlay(Valve.VR.CVROverlay value)
    // Offset: 0x18B39E8
    void set_overlay(::Valve::VR::CVROverlay* value);
    // static public System.Boolean get_initializing()
    // Offset: 0x18B39F0
    static bool get_initializing();
    // static private System.Void set_initializing(System.Boolean value)
    // Offset: 0x18B3A58
    static void set_initializing(bool value);
    // static public System.Boolean get_calibrating()
    // Offset: 0x18B3AC8
    static bool get_calibrating();
    // static private System.Void set_calibrating(System.Boolean value)
    // Offset: 0x18B3B30
    static void set_calibrating(bool value);
    // static public System.Boolean get_outOfRange()
    // Offset: 0x18B3BA0
    static bool get_outOfRange();
    // static private System.Void set_outOfRange(System.Boolean value)
    // Offset: 0x18B3C08
    static void set_outOfRange(bool value);
    // public System.Single get_sceneWidth()
    // Offset: 0x18B3C78
    float get_sceneWidth();
    // private System.Void set_sceneWidth(System.Single value)
    // Offset: 0x18B3C80
    void set_sceneWidth(float value);
    // public System.Single get_sceneHeight()
    // Offset: 0x18B3C88
    float get_sceneHeight();
    // private System.Void set_sceneHeight(System.Single value)
    // Offset: 0x18B3C90
    void set_sceneHeight(float value);
    // public System.Single get_aspect()
    // Offset: 0x18B3C98
    float get_aspect();
    // private System.Void set_aspect(System.Single value)
    // Offset: 0x18B3CA0
    void set_aspect(float value);
    // public System.Single get_fieldOfView()
    // Offset: 0x18B3CA8
    float get_fieldOfView();
    // private System.Void set_fieldOfView(System.Single value)
    // Offset: 0x18B3CB0
    void set_fieldOfView(float value);
    // public UnityEngine.Vector2 get_tanHalfFov()
    // Offset: 0x18B3CB8
    ::UnityEngine::Vector2 get_tanHalfFov();
    // private System.Void set_tanHalfFov(UnityEngine.Vector2 value)
    // Offset: 0x18B3CC0
    void set_tanHalfFov(::UnityEngine::Vector2 value);
    // public Valve.VR.VRTextureBounds_t[] get_textureBounds()
    // Offset: 0x18B3CC8
    ::ArrayW<::Valve::VR::VRTextureBounds_t> get_textureBounds();
    // private System.Void set_textureBounds(Valve.VR.VRTextureBounds_t[] value)
    // Offset: 0x18B3CD0
    void set_textureBounds(::ArrayW<::Valve::VR::VRTextureBounds_t> value);
    // public SteamVR_Utils/RigidTransform[] get_eyes()
    // Offset: 0x18B3CD8
    ::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform> get_eyes();
    // private System.Void set_eyes(SteamVR_Utils/RigidTransform[] value)
    // Offset: 0x18B3CE0
    void set_eyes(::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform> value);
    // public System.String get_hmd_TrackingSystemName()
    // Offset: 0x18B3CE8
    ::StringW get_hmd_TrackingSystemName();
    // public System.String get_hmd_ModelNumber()
    // Offset: 0x18B3E3C
    ::StringW get_hmd_ModelNumber();
    // public System.String get_hmd_SerialNumber()
    // Offset: 0x18B3E48
    ::StringW get_hmd_SerialNumber();
    // public System.Single get_hmd_SecondsFromVsyncToPhotons()
    // Offset: 0x18B3E54
    float get_hmd_SecondsFromVsyncToPhotons();
    // public System.Single get_hmd_DisplayFrequency()
    // Offset: 0x18B3EA0
    float get_hmd_DisplayFrequency();
    // private System.Void .ctor()
    // Offset: 0x18B31B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamVR::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x18B4A24
    static void _cctor();
    // static private SteamVR CreateInstance()
    // Offset: 0x18B2DC8
    static ::GlobalNamespace::SteamVR* CreateInstance();
    // static private System.Void ReportError(Valve.VR.EVRInitError error)
    // Offset: 0x18B305C
    static void ReportError(::Valve::VR::EVRInitError error);
    // public System.String GetTrackedDeviceString(System.UInt32 deviceId)
    // Offset: 0x18B3EAC
    ::StringW GetTrackedDeviceString(uint deviceId);
    // public System.String GetStringProperty(Valve.VR.ETrackedDeviceProperty prop, System.UInt32 deviceId)
    // Offset: 0x18B3CF4
    ::StringW GetStringProperty(::Valve::VR::ETrackedDeviceProperty prop, uint deviceId);
    // public System.Single GetFloatProperty(Valve.VR.ETrackedDeviceProperty prop, System.UInt32 deviceId)
    // Offset: 0x18B3E60
    float GetFloatProperty(::Valve::VR::ETrackedDeviceProperty prop, uint deviceId);
    // private System.Void OnInitializing(System.Boolean initializing)
    // Offset: 0x18B3F94
    void OnInitializing(bool initializing);
    // private System.Void OnCalibrating(System.Boolean calibrating)
    // Offset: 0x18B4048
    void OnCalibrating(bool calibrating);
    // private System.Void OnOutOfRange(System.Boolean outOfRange)
    // Offset: 0x18B40FC
    void OnOutOfRange(bool outOfRange);
    // private System.Void OnDeviceConnected(System.Int32 i, System.Boolean connected)
    // Offset: 0x18B41B0
    void OnDeviceConnected(int i, bool connected);
    // private System.Void OnNewPoses(Valve.VR.TrackedDevicePose_t[] poses)
    // Offset: 0x18B4254
    void OnNewPoses(::ArrayW<::Valve::VR::TrackedDevicePose_t> poses);
    // public System.Void Dispose()
    // Offset: 0x18B49B0
    void Dispose();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x18B476C
    void Dispose(bool disposing);
    // static public System.Void SafeDispose()
    // Offset: 0x18B2C0C
    static void SafeDispose();
    // protected override System.Void Finalize()
    // Offset: 0x18B4700
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // SteamVR
  #pragma pack(pop)
  static check_size<sizeof(SteamVR), 80 + sizeof(::Valve::VR::ETextureType)> __GlobalNamespace_SteamVRSizeCheck;
  static_assert(sizeof(SteamVR) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_active
// Il2CppName: get_active
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::SteamVR::get_active)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_active", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_enabled
// Il2CppName: get_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::SteamVR::get_enabled)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_enabled
// Il2CppName: set_enabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::SteamVR::set_enabled)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_enabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_instance
// Il2CppName: get_instance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR* (*)()>(&GlobalNamespace::SteamVR::get_instance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_instance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_usingNativeSupport
// Il2CppName: get_usingNativeSupport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::SteamVR::get_usingNativeSupport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_usingNativeSupport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_hmd
// Il2CppName: get_hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRSystem* (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_hmd)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_hmd
// Il2CppName: set_hmd
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::Valve::VR::CVRSystem*)>(&GlobalNamespace::SteamVR::set_hmd)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Valve.VR", "CVRSystem")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_hmd", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_compositor
// Il2CppName: get_compositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVRCompositor* (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_compositor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_compositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_compositor
// Il2CppName: set_compositor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::Valve::VR::CVRCompositor*)>(&GlobalNamespace::SteamVR::set_compositor)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Valve.VR", "CVRCompositor")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_compositor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_overlay
// Il2CppName: get_overlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Valve::VR::CVROverlay* (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_overlay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_overlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_overlay
// Il2CppName: set_overlay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::Valve::VR::CVROverlay*)>(&GlobalNamespace::SteamVR::set_overlay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("Valve.VR", "CVROverlay")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_overlay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_initializing
// Il2CppName: get_initializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::SteamVR::get_initializing)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_initializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_initializing
// Il2CppName: set_initializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::SteamVR::set_initializing)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_initializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_calibrating
// Il2CppName: get_calibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::SteamVR::get_calibrating)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_calibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_calibrating
// Il2CppName: set_calibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::SteamVR::set_calibrating)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_calibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_outOfRange
// Il2CppName: get_outOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::SteamVR::get_outOfRange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_outOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_outOfRange
// Il2CppName: set_outOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::SteamVR::set_outOfRange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_outOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_sceneWidth
// Il2CppName: get_sceneWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_sceneWidth)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_sceneWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_sceneWidth
// Il2CppName: set_sceneWidth
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(float)>(&GlobalNamespace::SteamVR::set_sceneWidth)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_sceneWidth", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_sceneHeight
// Il2CppName: get_sceneHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_sceneHeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_sceneHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_sceneHeight
// Il2CppName: set_sceneHeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(float)>(&GlobalNamespace::SteamVR::set_sceneHeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_sceneHeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_aspect
// Il2CppName: get_aspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_aspect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_aspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_aspect
// Il2CppName: set_aspect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(float)>(&GlobalNamespace::SteamVR::set_aspect)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_aspect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_fieldOfView
// Il2CppName: get_fieldOfView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_fieldOfView)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_fieldOfView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_fieldOfView
// Il2CppName: set_fieldOfView
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(float)>(&GlobalNamespace::SteamVR::set_fieldOfView)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_fieldOfView", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_tanHalfFov
// Il2CppName: get_tanHalfFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_tanHalfFov)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_tanHalfFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_tanHalfFov
// Il2CppName: set_tanHalfFov
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::UnityEngine::Vector2)>(&GlobalNamespace::SteamVR::set_tanHalfFov)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector2")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_tanHalfFov", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_textureBounds
// Il2CppName: get_textureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::Valve::VR::VRTextureBounds_t> (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_textureBounds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_textureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_textureBounds
// Il2CppName: set_textureBounds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::ArrayW<::Valve::VR::VRTextureBounds_t>)>(&GlobalNamespace::SteamVR::set_textureBounds)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "VRTextureBounds_t"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_textureBounds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_eyes
// Il2CppName: get_eyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform> (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_eyes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_eyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::set_eyes
// Il2CppName: set_eyes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::ArrayW<::GlobalNamespace::SteamVR_Utils::RigidTransform>)>(&GlobalNamespace::SteamVR::set_eyes)> {
  static const MethodInfo* get() {
    static auto* value = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "SteamVR_Utils/RigidTransform"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "set_eyes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_hmd_TrackingSystemName
// Il2CppName: get_hmd_TrackingSystemName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_hmd_TrackingSystemName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_hmd_TrackingSystemName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_hmd_ModelNumber
// Il2CppName: get_hmd_ModelNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_hmd_ModelNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_hmd_ModelNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_hmd_SerialNumber
// Il2CppName: get_hmd_SerialNumber
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_hmd_SerialNumber)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_hmd_SerialNumber", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons
// Il2CppName: get_hmd_SecondsFromVsyncToPhotons
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_hmd_SecondsFromVsyncToPhotons)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_hmd_SecondsFromVsyncToPhotons", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::get_hmd_DisplayFrequency
// Il2CppName: get_hmd_DisplayFrequency
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::get_hmd_DisplayFrequency)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "get_hmd_DisplayFrequency", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SteamVR::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::CreateInstance
// Il2CppName: CreateInstance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::SteamVR* (*)()>(&GlobalNamespace::SteamVR::CreateInstance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "CreateInstance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::ReportError
// Il2CppName: ReportError
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(::Valve::VR::EVRInitError)>(&GlobalNamespace::SteamVR::ReportError)> {
  static const MethodInfo* get() {
    static auto* error = &::il2cpp_utils::GetClassFromName("Valve.VR", "EVRInitError")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "ReportError", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{error});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::GetTrackedDeviceString
// Il2CppName: GetTrackedDeviceString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SteamVR::*)(uint)>(&GlobalNamespace::SteamVR::GetTrackedDeviceString)> {
  static const MethodInfo* get() {
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "GetTrackedDeviceString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deviceId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::GetStringProperty
// Il2CppName: GetStringProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SteamVR::*)(::Valve::VR::ETrackedDeviceProperty, uint)>(&GlobalNamespace::SteamVR::GetStringProperty)> {
  static const MethodInfo* get() {
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "GetStringProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prop, deviceId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::GetFloatProperty
// Il2CppName: GetFloatProperty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SteamVR::*)(::Valve::VR::ETrackedDeviceProperty, uint)>(&GlobalNamespace::SteamVR::GetFloatProperty)> {
  static const MethodInfo* get() {
    static auto* prop = &::il2cpp_utils::GetClassFromName("Valve.VR", "ETrackedDeviceProperty")->byval_arg;
    static auto* deviceId = &::il2cpp_utils::GetClassFromName("System", "UInt32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "GetFloatProperty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{prop, deviceId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::OnInitializing
// Il2CppName: OnInitializing
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(bool)>(&GlobalNamespace::SteamVR::OnInitializing)> {
  static const MethodInfo* get() {
    static auto* initializing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "OnInitializing", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{initializing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::OnCalibrating
// Il2CppName: OnCalibrating
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(bool)>(&GlobalNamespace::SteamVR::OnCalibrating)> {
  static const MethodInfo* get() {
    static auto* calibrating = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "OnCalibrating", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{calibrating});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::OnOutOfRange
// Il2CppName: OnOutOfRange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(bool)>(&GlobalNamespace::SteamVR::OnOutOfRange)> {
  static const MethodInfo* get() {
    static auto* outOfRange = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "OnOutOfRange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{outOfRange});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::OnDeviceConnected
// Il2CppName: OnDeviceConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(int, bool)>(&GlobalNamespace::SteamVR::OnDeviceConnected)> {
  static const MethodInfo* get() {
    static auto* i = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* connected = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "OnDeviceConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{i, connected});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::OnNewPoses
// Il2CppName: OnNewPoses
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(::ArrayW<::Valve::VR::TrackedDevicePose_t>)>(&GlobalNamespace::SteamVR::OnNewPoses)> {
  static const MethodInfo* get() {
    static auto* poses = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("Valve.VR", "TrackedDevicePose_t"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "OnNewPoses", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{poses});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)(bool)>(&GlobalNamespace::SteamVR::Dispose)> {
  static const MethodInfo* get() {
    static auto* disposing = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disposing});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::SafeDispose
// Il2CppName: SafeDispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::SteamVR::SafeDispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "SafeDispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamVR::Finalize
// Il2CppName: Finalize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SteamVR::*)()>(&GlobalNamespace::SteamVR::Finalize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamVR*), "Finalize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
