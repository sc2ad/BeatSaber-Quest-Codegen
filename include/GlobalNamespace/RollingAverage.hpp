// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RollingAverage
  class RollingAverage;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RollingAverage);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RollingAverage*, "", "RollingAverage");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RollingAverage
  // [TokenAttribute] Offset: FFFFFFFF
  class RollingAverage : public ::Il2CppObject {
    public:
    public:
    // private System.Int64 _currentTotal
    // Size: 0x8
    // Offset: 0x10
    int64_t currentTotal;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Single _currentAverage
    // Size: 0x4
    // Offset: 0x18
    float currentAverage;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: currentAverage and: buffer
    char __padding1[0x4] = {};
    // private readonly System.Int64[] _buffer
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int64_t> buffer;
    // Field size check
    static_assert(sizeof(::ArrayW<int64_t>) == 0x8);
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x28
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _length
    // Size: 0x4
    // Offset: 0x2C
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // static field const value: static private System.Int64 kGranularity
    static constexpr const int64_t kGranularity = 1000;
    // Get static field: static private System.Int64 kGranularity
    static int64_t _get_kGranularity();
    // Set static field: static private System.Int64 kGranularity
    static void _set_kGranularity(int64_t value);
    // Get instance field reference: private System.Int64 _currentTotal
    [[deprecated("Use field access instead!")]] int64_t& dyn__currentTotal();
    // Get instance field reference: private System.Single _currentAverage
    [[deprecated("Use field access instead!")]] float& dyn__currentAverage();
    // Get instance field reference: private readonly System.Int64[] _buffer
    [[deprecated("Use field access instead!")]] ::ArrayW<int64_t>& dyn__buffer();
    // Get instance field reference: private System.Int32 _index
    [[deprecated("Use field access instead!")]] int& dyn__index();
    // Get instance field reference: private System.Int32 _length
    [[deprecated("Use field access instead!")]] int& dyn__length();
    // public System.Single get_currentAverage()
    // Offset: 0x264413C
    float get_currentAverage();
    // public System.Boolean get_hasValue()
    // Offset: 0x2644144
    bool get_hasValue();
    // public System.Void .ctor(System.Int32 window)
    // Offset: 0x2644154
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RollingAverage* New_ctor(int window) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RollingAverage::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RollingAverage*, creationType>(window)));
    }
    // public System.Void Update(System.Single value)
    // Offset: 0x26441C4
    void Update(float value);
    // public System.Void Reset()
    // Offset: 0x2644314
    void Reset();
  }; // RollingAverage
  #pragma pack(pop)
  static check_size<sizeof(RollingAverage), 44 + sizeof(int)> __GlobalNamespace_RollingAverageSizeCheck;
  static_assert(sizeof(RollingAverage) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RollingAverage::get_currentAverage
// Il2CppName: get_currentAverage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::RollingAverage::*)()>(&GlobalNamespace::RollingAverage::get_currentAverage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RollingAverage*), "get_currentAverage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RollingAverage::get_hasValue
// Il2CppName: get_hasValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::RollingAverage::*)()>(&GlobalNamespace::RollingAverage::get_hasValue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RollingAverage*), "get_hasValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RollingAverage::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RollingAverage::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RollingAverage::*)(float)>(&GlobalNamespace::RollingAverage::Update)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RollingAverage*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RollingAverage::Reset
// Il2CppName: Reset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RollingAverage::*)()>(&GlobalNamespace::RollingAverage::Reset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RollingAverage*), "Reset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
