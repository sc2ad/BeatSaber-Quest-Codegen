// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: ISaberMovementData
  class ISaberMovementData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteCutInfo, "", "NoteCutInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x90
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: NoteCutInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct NoteCutInfo/*, public ::System::ValueType*/ {
    public:
    // Nested type: ::GlobalNamespace::NoteCutInfo::FailReason
    struct FailReason;
    public:
    // public readonly NoteData noteData
    // Size: 0x8
    // Offset: 0x0
    ::GlobalNamespace::NoteData* noteData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteData*) == 0x8);
    // public readonly System.Boolean speedOK
    // Size: 0x1
    // Offset: 0x8
    bool speedOK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean directionOK
    // Size: 0x1
    // Offset: 0x9
    bool directionOK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean saberTypeOK
    // Size: 0x1
    // Offset: 0xA
    bool saberTypeOK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean wasCutTooSoon
    // Size: 0x1
    // Offset: 0xB
    bool wasCutTooSoon;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Single saberSpeed
    // Size: 0x4
    // Offset: 0xC
    float saberSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly UnityEngine.Vector3 saberDir
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 saberDir;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly SaberType saberType
    // Size: 0x4
    // Offset: 0x1C
    ::GlobalNamespace::SaberType saberType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SaberType) == 0x4);
    // public readonly System.Single timeDeviation
    // Size: 0x4
    // Offset: 0x20
    float timeDeviation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single cutDirDeviation
    // Size: 0x4
    // Offset: 0x24
    float cutDirDeviation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly UnityEngine.Vector3 cutPoint
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 cutPoint;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Vector3 cutNormal
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 cutNormal;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public readonly System.Single cutAngle
    // Size: 0x4
    // Offset: 0x40
    float cutAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single cutDistanceToCenter
    // Size: 0x4
    // Offset: 0x44
    float cutDistanceToCenter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly UnityEngine.Quaternion worldRotation
    // Size: 0x10
    // Offset: 0x48
    ::UnityEngine::Quaternion worldRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public readonly UnityEngine.Quaternion inverseWorldRotation
    // Size: 0x10
    // Offset: 0x58
    ::UnityEngine::Quaternion inverseWorldRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public readonly UnityEngine.Quaternion noteRotation
    // Size: 0x10
    // Offset: 0x68
    ::UnityEngine::Quaternion noteRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public readonly UnityEngine.Vector3 notePosition
    // Size: 0xC
    // Offset: 0x78
    ::UnityEngine::Vector3 notePosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: notePosition and: saberMovementData
    char __padding17[0x4] = {};
    // public readonly ISaberMovementData saberMovementData
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::ISaberMovementData* saberMovementData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ISaberMovementData*) == 0x8);
    public:
    // Creating value type constructor for type: NoteCutInfo
    constexpr NoteCutInfo(::GlobalNamespace::NoteData* noteData_ = {}, bool speedOK_ = {}, bool directionOK_ = {}, bool saberTypeOK_ = {}, bool wasCutTooSoon_ = {}, float saberSpeed_ = {}, ::UnityEngine::Vector3 saberDir_ = {}, ::GlobalNamespace::SaberType saberType_ = {}, float timeDeviation_ = {}, float cutDirDeviation_ = {}, ::UnityEngine::Vector3 cutPoint_ = {}, ::UnityEngine::Vector3 cutNormal_ = {}, float cutAngle_ = {}, float cutDistanceToCenter_ = {}, ::UnityEngine::Quaternion worldRotation_ = {}, ::UnityEngine::Quaternion inverseWorldRotation_ = {}, ::UnityEngine::Quaternion noteRotation_ = {}, ::UnityEngine::Vector3 notePosition_ = {}, ::GlobalNamespace::ISaberMovementData* saberMovementData_ = {}) noexcept : noteData{noteData_}, speedOK{speedOK_}, directionOK{directionOK_}, saberTypeOK{saberTypeOK_}, wasCutTooSoon{wasCutTooSoon_}, saberSpeed{saberSpeed_}, saberDir{saberDir_}, saberType{saberType_}, timeDeviation{timeDeviation_}, cutDirDeviation{cutDirDeviation_}, cutPoint{cutPoint_}, cutNormal{cutNormal_}, cutAngle{cutAngle_}, cutDistanceToCenter{cutDistanceToCenter_}, worldRotation{worldRotation_}, inverseWorldRotation{inverseWorldRotation_}, noteRotation{noteRotation_}, notePosition{notePosition_}, saberMovementData{saberMovementData_} {}
    // Creating interface conversion operator: operator ::System::ValueType
    operator ::System::ValueType() noexcept {
      return *reinterpret_cast<::System::ValueType*>(this);
    }
    // Creating interface conversion operator: i_ValueType
    inline ::System::ValueType* i_ValueType() noexcept {
      return reinterpret_cast<::System::ValueType*>(this);
    }
    // Get instance field reference: public readonly NoteData noteData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData*& dyn_noteData();
    // Get instance field reference: public readonly System.Boolean speedOK
    [[deprecated("Use field access instead!")]] bool& dyn_speedOK();
    // Get instance field reference: public readonly System.Boolean directionOK
    [[deprecated("Use field access instead!")]] bool& dyn_directionOK();
    // Get instance field reference: public readonly System.Boolean saberTypeOK
    [[deprecated("Use field access instead!")]] bool& dyn_saberTypeOK();
    // Get instance field reference: public readonly System.Boolean wasCutTooSoon
    [[deprecated("Use field access instead!")]] bool& dyn_wasCutTooSoon();
    // Get instance field reference: public readonly System.Single saberSpeed
    [[deprecated("Use field access instead!")]] float& dyn_saberSpeed();
    // Get instance field reference: public readonly UnityEngine.Vector3 saberDir
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_saberDir();
    // Get instance field reference: public readonly SaberType saberType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SaberType& dyn_saberType();
    // Get instance field reference: public readonly System.Single timeDeviation
    [[deprecated("Use field access instead!")]] float& dyn_timeDeviation();
    // Get instance field reference: public readonly System.Single cutDirDeviation
    [[deprecated("Use field access instead!")]] float& dyn_cutDirDeviation();
    // Get instance field reference: public readonly UnityEngine.Vector3 cutPoint
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cutPoint();
    // Get instance field reference: public readonly UnityEngine.Vector3 cutNormal
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_cutNormal();
    // Get instance field reference: public readonly System.Single cutAngle
    [[deprecated("Use field access instead!")]] float& dyn_cutAngle();
    // Get instance field reference: public readonly System.Single cutDistanceToCenter
    [[deprecated("Use field access instead!")]] float& dyn_cutDistanceToCenter();
    // Get instance field reference: public readonly UnityEngine.Quaternion worldRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_worldRotation();
    // Get instance field reference: public readonly UnityEngine.Quaternion inverseWorldRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_inverseWorldRotation();
    // Get instance field reference: public readonly UnityEngine.Quaternion noteRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_noteRotation();
    // Get instance field reference: public readonly UnityEngine.Vector3 notePosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_notePosition();
    // Get instance field reference: public readonly ISaberMovementData saberMovementData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ISaberMovementData*& dyn_saberMovementData();
    // public System.Boolean get_allIsOK()
    // Offset: 0x2A16FB8
    bool get_allIsOK();
    // public System.Boolean get_allExceptSaberTypeIsOK()
    // Offset: 0x2A16FE8
    bool get_allExceptSaberTypeIsOK();
    // public NoteCutInfo/FailReason get_failReason()
    // Offset: 0x2A17010
    ::GlobalNamespace::NoteCutInfo::FailReason get_failReason();
    // public System.Void .ctor(NoteData noteData, System.Boolean speedOK, System.Boolean directionOK, System.Boolean saberTypeOK, System.Boolean wasCutTooSoon, System.Single saberSpeed, UnityEngine.Vector3 saberDir, SaberType saberType, System.Single timeDeviation, System.Single cutDirDeviation, UnityEngine.Vector3 cutPoint, UnityEngine.Vector3 cutNormal, System.Single cutDistanceToCenter, System.Single cutAngle, UnityEngine.Quaternion worldRotation, UnityEngine.Quaternion inverseWorldRotation, UnityEngine.Quaternion noteRotation, UnityEngine.Vector3 notePosition, ISaberMovementData saberMovementData)
    // Offset: 0x2A17054
    // ABORTED: conflicts with another method.  NoteCutInfo(::GlobalNamespace::NoteData* noteData, bool speedOK, bool directionOK, bool saberTypeOK, bool wasCutTooSoon, float saberSpeed, ::UnityEngine::Vector3 saberDir, ::GlobalNamespace::SaberType saberType, float timeDeviation, float cutDirDeviation, ::UnityEngine::Vector3 cutPoint, ::UnityEngine::Vector3 cutNormal, float cutDistanceToCenter, float cutAngle, ::UnityEngine::Quaternion worldRotation, ::UnityEngine::Quaternion inverseWorldRotation, ::UnityEngine::Quaternion noteRotation, ::UnityEngine::Vector3 notePosition, ::GlobalNamespace::ISaberMovementData* saberMovementData);
  }; // NoteCutInfo
  #pragma pack(pop)
  static check_size<sizeof(NoteCutInfo), 136 + sizeof(::GlobalNamespace::ISaberMovementData*)> __GlobalNamespace_NoteCutInfoSizeCheck;
  static_assert(sizeof(NoteCutInfo) == 0x90);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::get_allIsOK
// Il2CppName: get_allIsOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteCutInfo::*)()>(&GlobalNamespace::NoteCutInfo::get_allIsOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutInfo), "get_allIsOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::get_allExceptSaberTypeIsOK
// Il2CppName: get_allExceptSaberTypeIsOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteCutInfo::*)()>(&GlobalNamespace::NoteCutInfo::get_allExceptSaberTypeIsOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutInfo), "get_allExceptSaberTypeIsOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::get_failReason
// Il2CppName: get_failReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteCutInfo::FailReason (GlobalNamespace::NoteCutInfo::*)()>(&GlobalNamespace::NoteCutInfo::get_failReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutInfo), "get_failReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::NoteCutInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
