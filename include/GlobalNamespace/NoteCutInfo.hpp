// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ISaberSwingRatingCounter
  class ISaberSwingRatingCounter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: NoteCutInfo
  // [TokenAttribute] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct NoteCutInfo/*, public System::ValueType*/ {
    public:
    // Nested type: GlobalNamespace::NoteCutInfo::FailReason
    struct FailReason;
    // public readonly System.Boolean speedOK
    // Size: 0x1
    // Offset: 0x0
    bool speedOK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean directionOK
    // Size: 0x1
    // Offset: 0x1
    bool directionOK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean saberTypeOK
    // Size: 0x1
    // Offset: 0x2
    bool saberTypeOK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean wasCutTooSoon
    // Size: 0x1
    // Offset: 0x3
    bool wasCutTooSoon;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Single saberSpeed
    // Size: 0x4
    // Offset: 0x4
    float saberSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly UnityEngine.Vector3 saberDir
    // Size: 0xC
    // Offset: 0x8
    UnityEngine::Vector3 saberDir;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public readonly SaberType saberType
    // Size: 0x4
    // Offset: 0x14
    GlobalNamespace::SaberType saberType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberType) == 0x4);
    // public readonly System.Single timeDeviation
    // Size: 0x4
    // Offset: 0x18
    float timeDeviation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single cutDirDeviation
    // Size: 0x4
    // Offset: 0x1C
    float cutDirDeviation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly UnityEngine.Vector3 cutPoint
    // Size: 0xC
    // Offset: 0x20
    UnityEngine::Vector3 cutPoint;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public readonly UnityEngine.Vector3 cutNormal
    // Size: 0xC
    // Offset: 0x2C
    UnityEngine::Vector3 cutNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public readonly System.Single cutAngle
    // Size: 0x4
    // Offset: 0x38
    float cutAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly System.Single cutDistanceToCenter
    // Size: 0x4
    // Offset: 0x3C
    float cutDistanceToCenter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public readonly ISaberSwingRatingCounter swingRatingCounter
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ISaberSwingRatingCounter*) == 0x8);
    // Creating value type constructor for type: NoteCutInfo
    constexpr NoteCutInfo(bool speedOK_ = {}, bool directionOK_ = {}, bool saberTypeOK_ = {}, bool wasCutTooSoon_ = {}, float saberSpeed_ = {}, UnityEngine::Vector3 saberDir_ = {}, GlobalNamespace::SaberType saberType_ = {}, float timeDeviation_ = {}, float cutDirDeviation_ = {}, UnityEngine::Vector3 cutPoint_ = {}, UnityEngine::Vector3 cutNormal_ = {}, float cutAngle_ = {}, float cutDistanceToCenter_ = {}, GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter_ = {}) noexcept : speedOK{speedOK_}, directionOK{directionOK_}, saberTypeOK{saberTypeOK_}, wasCutTooSoon{wasCutTooSoon_}, saberSpeed{saberSpeed_}, saberDir{saberDir_}, saberType{saberType_}, timeDeviation{timeDeviation_}, cutDirDeviation{cutDirDeviation_}, cutPoint{cutPoint_}, cutNormal{cutNormal_}, cutAngle{cutAngle_}, cutDistanceToCenter{cutDistanceToCenter_}, swingRatingCounter{swingRatingCounter_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Get instance field reference: public readonly System.Boolean speedOK
    bool& dyn_speedOK();
    // Get instance field reference: public readonly System.Boolean directionOK
    bool& dyn_directionOK();
    // Get instance field reference: public readonly System.Boolean saberTypeOK
    bool& dyn_saberTypeOK();
    // Get instance field reference: public readonly System.Boolean wasCutTooSoon
    bool& dyn_wasCutTooSoon();
    // Get instance field reference: public readonly System.Single saberSpeed
    float& dyn_saberSpeed();
    // Get instance field reference: public readonly UnityEngine.Vector3 saberDir
    UnityEngine::Vector3& dyn_saberDir();
    // Get instance field reference: public readonly SaberType saberType
    GlobalNamespace::SaberType& dyn_saberType();
    // Get instance field reference: public readonly System.Single timeDeviation
    float& dyn_timeDeviation();
    // Get instance field reference: public readonly System.Single cutDirDeviation
    float& dyn_cutDirDeviation();
    // Get instance field reference: public readonly UnityEngine.Vector3 cutPoint
    UnityEngine::Vector3& dyn_cutPoint();
    // Get instance field reference: public readonly UnityEngine.Vector3 cutNormal
    UnityEngine::Vector3& dyn_cutNormal();
    // Get instance field reference: public readonly System.Single cutAngle
    float& dyn_cutAngle();
    // Get instance field reference: public readonly System.Single cutDistanceToCenter
    float& dyn_cutDistanceToCenter();
    // Get instance field reference: public readonly ISaberSwingRatingCounter swingRatingCounter
    GlobalNamespace::ISaberSwingRatingCounter*& dyn_swingRatingCounter();
    // public System.Boolean get_allIsOK()
    // Offset: 0x2571B98
    bool get_allIsOK();
    // public System.Boolean get_allExceptSaberTypeIsOK()
    // Offset: 0x2571BC8
    bool get_allExceptSaberTypeIsOK();
    // public NoteCutInfo/FailReason get_failReason()
    // Offset: 0x2571BF0
    GlobalNamespace::NoteCutInfo::FailReason get_failReason();
    // public System.Void .ctor(System.Boolean speedOK, System.Boolean directionOK, System.Boolean saberTypeOK, System.Boolean wasCutTooSoon, System.Single saberSpeed, UnityEngine.Vector3 saberDir, SaberType saberType, System.Single timeDeviation, System.Single cutDirDeviation, UnityEngine.Vector3 cutPoint, UnityEngine.Vector3 cutNormal, System.Single cutDistanceToCenter, System.Single cutAngle, ISaberSwingRatingCounter swingRatingCounter)
    // Offset: 0x2571C34
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  NoteCutInfo(bool speedOK, bool directionOK, bool saberTypeOK, bool wasCutTooSoon, float saberSpeed, UnityEngine::Vector3 saberDir, GlobalNamespace::SaberType saberType, float timeDeviation, float cutDirDeviation, UnityEngine::Vector3 cutPoint, UnityEngine::Vector3 cutNormal, float cutDistanceToCenter, float cutAngle, GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter)
  }; // NoteCutInfo
  #pragma pack(pop)
  static check_size<sizeof(NoteCutInfo), 64 + sizeof(GlobalNamespace::ISaberSwingRatingCounter*)> __GlobalNamespace_NoteCutInfoSizeCheck;
  static_assert(sizeof(NoteCutInfo) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteCutInfo, "", "NoteCutInfo");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::get_allIsOK
// Il2CppName: get_allIsOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteCutInfo::*)()>(&GlobalNamespace::NoteCutInfo::get_allIsOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutInfo), "get_allIsOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::get_allExceptSaberTypeIsOK
// Il2CppName: get_allExceptSaberTypeIsOK
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteCutInfo::*)()>(&GlobalNamespace::NoteCutInfo::get_allExceptSaberTypeIsOK)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutInfo), "get_allExceptSaberTypeIsOK", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::get_failReason
// Il2CppName: get_failReason
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteCutInfo::FailReason (GlobalNamespace::NoteCutInfo::*)()>(&GlobalNamespace::NoteCutInfo::get_failReason)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteCutInfo), "get_failReason", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteCutInfo::NoteCutInfo
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
