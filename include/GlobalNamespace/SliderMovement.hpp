// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: PlayerTransforms
  class PlayerTransforms;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SliderMovement
  class SliderMovement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SliderMovement);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SliderMovement*, "", "SliderMovement");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: SliderMovement
  // [TokenAttribute] Offset: FFFFFFFF
  class SliderMovement : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [InjectAttribute] Offset: 0x10DEB18
    // private readonly IAudioTimeSource _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::IAudioTimeSource* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IAudioTimeSource*) == 0x8);
    // [InjectAttribute] Offset: 0x10DEB28
    // private readonly PlayerTransforms _playerTransforms
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::PlayerTransforms* playerTransforms;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerTransforms*) == 0x8);
    // private System.Action movementDidFinishEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* movementDidFinishEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<System.Single> movementDidMoveEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<float>* movementDidMoveEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<float>*) == 0x8);
    // private System.Action headDidMovePastCutMarkEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* headDidMovePastCutMarkEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action tailDidMovePastCutMarkEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action* tailDidMovePastCutMarkEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private UnityEngine.Vector3 _headNoteJumpStartPos
    // Size: 0xC
    // Offset: 0x48
    ::UnityEngine::Vector3 headNoteJumpStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _headNoteJumpEndPos
    // Size: 0xC
    // Offset: 0x54
    ::UnityEngine::Vector3 headNoteJumpEndPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Single _headNoteTime
    // Size: 0x4
    // Offset: 0x60
    float headNoteTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _tailNoteTime
    // Size: 0x4
    // Offset: 0x64
    float tailNoteTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _localPosition
    // Size: 0xC
    // Offset: 0x68
    ::UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion _worldRotation
    // Size: 0x10
    // Offset: 0x74
    ::UnityEngine::Quaternion worldRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _inverseWorldRotation
    // Size: 0x10
    // Offset: 0x84
    ::UnityEngine::Quaternion inverseWorldRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // private System.Single _jumpDuration
    // Size: 0x4
    // Offset: 0x94
    float jumpDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _headNoteGravity
    // Size: 0x4
    // Offset: 0x98
    float headNoteGravity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _tailNoteGravity
    // Size: 0x4
    // Offset: 0x9C
    float tailNoteGravity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean _movementEndReported
    // Size: 0x1
    // Offset: 0xA8
    bool movementEndReported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _headDidMovePastCutMarkReported
    // Size: 0x1
    // Offset: 0xA9
    bool headDidMovePastCutMarkReported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _tailDidMovePastCutMarkReported
    // Size: 0x1
    // Offset: 0xAA
    bool tailDidMovePastCutMarkReported;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tailDidMovePastCutMarkReported and: timeSinceHeadNoteJump
    char __padding19[0x1] = {};
    // private System.Single _timeSinceHeadNoteJump
    // Size: 0x4
    // Offset: 0xAC
    float timeSinceHeadNoteJump;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private readonly IAudioTimeSource _audioTimeSyncController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IAudioTimeSource*& dyn__audioTimeSyncController();
    // Get instance field reference: private readonly PlayerTransforms _playerTransforms
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerTransforms*& dyn__playerTransforms();
    // Get instance field reference: private System.Action movementDidFinishEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_movementDidFinishEvent();
    // Get instance field reference: private System.Action`1<System.Single> movementDidMoveEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<float>*& dyn_movementDidMoveEvent();
    // Get instance field reference: private System.Action headDidMovePastCutMarkEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_headDidMovePastCutMarkEvent();
    // Get instance field reference: private System.Action tailDidMovePastCutMarkEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_tailDidMovePastCutMarkEvent();
    // Get instance field reference: private UnityEngine.Vector3 _headNoteJumpStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headNoteJumpStartPos();
    // Get instance field reference: private UnityEngine.Vector3 _headNoteJumpEndPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__headNoteJumpEndPos();
    // Get instance field reference: private System.Single _headNoteTime
    [[deprecated("Use field access instead!")]] float& dyn__headNoteTime();
    // Get instance field reference: private System.Single _tailNoteTime
    [[deprecated("Use field access instead!")]] float& dyn__tailNoteTime();
    // Get instance field reference: private UnityEngine.Vector3 _localPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localPosition();
    // Get instance field reference: private UnityEngine.Quaternion _worldRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__worldRotation();
    // Get instance field reference: private UnityEngine.Quaternion _inverseWorldRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn__inverseWorldRotation();
    // Get instance field reference: private System.Single _jumpDuration
    [[deprecated("Use field access instead!")]] float& dyn__jumpDuration();
    // Get instance field reference: private System.Single _headNoteGravity
    [[deprecated("Use field access instead!")]] float& dyn__headNoteGravity();
    // Get instance field reference: private System.Single _tailNoteGravity
    [[deprecated("Use field access instead!")]] float& dyn__tailNoteGravity();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private System.Boolean _movementEndReported
    [[deprecated("Use field access instead!")]] bool& dyn__movementEndReported();
    // Get instance field reference: private System.Boolean _headDidMovePastCutMarkReported
    [[deprecated("Use field access instead!")]] bool& dyn__headDidMovePastCutMarkReported();
    // Get instance field reference: private System.Boolean _tailDidMovePastCutMarkReported
    [[deprecated("Use field access instead!")]] bool& dyn__tailDidMovePastCutMarkReported();
    // Get instance field reference: private System.Single _timeSinceHeadNoteJump
    [[deprecated("Use field access instead!")]] float& dyn__timeSinceHeadNoteJump();
    // public System.Single get_jumpDuration()
    // Offset: 0x13E9934
    float get_jumpDuration();
    // public System.Single get_headNoteGravity()
    // Offset: 0x13E993C
    float get_headNoteGravity();
    // public System.Single get_tailNoteGravity()
    // Offset: 0x13E9944
    float get_tailNoteGravity();
    // public System.Single get_timeSinceHeadNoteJump()
    // Offset: 0x13E994C
    float get_timeSinceHeadNoteJump();
    // public System.Void add_movementDidFinishEvent(System.Action value)
    // Offset: 0x13E579C
    void add_movementDidFinishEvent(::System::Action* value);
    // public System.Void remove_movementDidFinishEvent(System.Action value)
    // Offset: 0x13E5D90
    void remove_movementDidFinishEvent(::System::Action* value);
    // public System.Void add_movementDidMoveEvent(System.Action`1<System.Single> value)
    // Offset: 0x13E97EC
    void add_movementDidMoveEvent(::System::Action_1<float>* value);
    // public System.Void remove_movementDidMoveEvent(System.Action`1<System.Single> value)
    // Offset: 0x13E9890
    void remove_movementDidMoveEvent(::System::Action_1<float>* value);
    // public System.Void add_headDidMovePastCutMarkEvent(System.Action value)
    // Offset: 0x13E5840
    void add_headDidMovePastCutMarkEvent(::System::Action* value);
    // public System.Void remove_headDidMovePastCutMarkEvent(System.Action value)
    // Offset: 0x13E5E34
    void remove_headDidMovePastCutMarkEvent(::System::Action* value);
    // public System.Void add_tailDidMovePastCutMarkEvent(System.Action value)
    // Offset: 0x13E58E4
    void add_tailDidMovePastCutMarkEvent(::System::Action* value);
    // public System.Void remove_tailDidMovePastCutMarkEvent(System.Action value)
    // Offset: 0x13E5ED8
    void remove_tailDidMovePastCutMarkEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x13E9954
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SliderMovement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SliderMovement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SliderMovement*, creationType>()));
    }
    // public System.Void Init(System.Single headNoteTime, System.Single tailNoteTime, System.Single worldRotation, UnityEngine.Vector3 headNoteJumpStartPos, UnityEngine.Vector3 headNoteJumpEndPos, System.Single jumpDuration, System.Single headNoteGravity, System.Single tailNoteGravity)
    // Offset: 0x13E4608
    void Init(float headNoteTime, float tailNoteTime, float worldRotation, ::UnityEngine::Vector3 headNoteJumpStartPos, ::UnityEngine::Vector3 headNoteJumpEndPos, float jumpDuration, float headNoteGravity, float tailNoteGravity);
    // public System.Void StartMovement()
    // Offset: 0x13E564C
    void StartMovement();
    // public System.Void ManualUpdate()
    // Offset: 0x13E60D4
    void ManualUpdate();
  }; // SliderMovement
  #pragma pack(pop)
  static check_size<sizeof(SliderMovement), 172 + sizeof(float)> __GlobalNamespace_SliderMovementSizeCheck;
  static_assert(sizeof(SliderMovement) == 0xB0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderMovement::*)()>(&GlobalNamespace::SliderMovement::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::get_headNoteGravity
// Il2CppName: get_headNoteGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderMovement::*)()>(&GlobalNamespace::SliderMovement::get_headNoteGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "get_headNoteGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::get_tailNoteGravity
// Il2CppName: get_tailNoteGravity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderMovement::*)()>(&GlobalNamespace::SliderMovement::get_tailNoteGravity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "get_tailNoteGravity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::get_timeSinceHeadNoteJump
// Il2CppName: get_timeSinceHeadNoteJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::SliderMovement::*)()>(&GlobalNamespace::SliderMovement::get_timeSinceHeadNoteJump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "get_timeSinceHeadNoteJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::add_movementDidFinishEvent
// Il2CppName: add_movementDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action*)>(&GlobalNamespace::SliderMovement::add_movementDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "add_movementDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::remove_movementDidFinishEvent
// Il2CppName: remove_movementDidFinishEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action*)>(&GlobalNamespace::SliderMovement::remove_movementDidFinishEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "remove_movementDidFinishEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::add_movementDidMoveEvent
// Il2CppName: add_movementDidMoveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action_1<float>*)>(&GlobalNamespace::SliderMovement::add_movementDidMoveEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "add_movementDidMoveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::remove_movementDidMoveEvent
// Il2CppName: remove_movementDidMoveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action_1<float>*)>(&GlobalNamespace::SliderMovement::remove_movementDidMoveEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "remove_movementDidMoveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::add_headDidMovePastCutMarkEvent
// Il2CppName: add_headDidMovePastCutMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action*)>(&GlobalNamespace::SliderMovement::add_headDidMovePastCutMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "add_headDidMovePastCutMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::remove_headDidMovePastCutMarkEvent
// Il2CppName: remove_headDidMovePastCutMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action*)>(&GlobalNamespace::SliderMovement::remove_headDidMovePastCutMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "remove_headDidMovePastCutMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::add_tailDidMovePastCutMarkEvent
// Il2CppName: add_tailDidMovePastCutMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action*)>(&GlobalNamespace::SliderMovement::add_tailDidMovePastCutMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "add_tailDidMovePastCutMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::remove_tailDidMovePastCutMarkEvent
// Il2CppName: remove_tailDidMovePastCutMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(::System::Action*)>(&GlobalNamespace::SliderMovement::remove_tailDidMovePastCutMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "remove_tailDidMovePastCutMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)(float, float, float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, float)>(&GlobalNamespace::SliderMovement::Init)> {
  static const MethodInfo* get() {
    static auto* headNoteTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailNoteTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* worldRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* headNoteJumpStartPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* headNoteJumpEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* jumpDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* headNoteGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* tailNoteGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{headNoteTime, tailNoteTime, worldRotation, headNoteJumpStartPos, headNoteJumpEndPos, jumpDuration, headNoteGravity, tailNoteGravity});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::StartMovement
// Il2CppName: StartMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)()>(&GlobalNamespace::SliderMovement::StartMovement)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "StartMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SliderMovement::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SliderMovement::*)()>(&GlobalNamespace::SliderMovement::ManualUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SliderMovement*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
