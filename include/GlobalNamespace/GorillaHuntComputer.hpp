// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem
#include "GorillaNetworking/CosmeticsController_CosmeticItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRRig
  class VRRig;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: Photon::Realtime
namespace Photon::Realtime {
  // Forward declaring type: Player
  class Player;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaHuntComputer
  class GorillaHuntComputer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaHuntComputer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaHuntComputer*, "", "GorillaHuntComputer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA2
  #pragma pack(push, 1)
  // Autogenerated type: GorillaHuntComputer
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaHuntComputer : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaHuntComputer::$$c
    class $$c;
    public:
    // public UnityEngine.UI.Text text
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Text* text;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public UnityEngine.UI.Image material
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Image* material;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image hat
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Image* hat;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image face
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Image* face;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image badge
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Image* badge;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image leftHand
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::UI::Image* leftHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public UnityEngine.UI.Image rightHand
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Image* rightHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Image*) == 0x8);
    // public Photon.Realtime.Player myTarget
    // Size: 0x8
    // Offset: 0x50
    ::Photon::Realtime::Player* myTarget;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public Photon.Realtime.Player tempTarget
    // Size: 0x8
    // Offset: 0x58
    ::Photon::Realtime::Player* tempTarget;
    // Field size check
    static_assert(sizeof(::Photon::Realtime::Player*) == 0x8);
    // public VRRig myRig
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::VRRig* myRig;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRRig*) == 0x8);
    // public UnityEngine.Sprite tempSprite
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::Sprite* tempSprite;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem tempItem
    // Size: 0x32
    // Offset: 0x70
    ::GorillaNetworking::CosmeticsController_CosmeticItem tempItem;
    // Field size check
    static_assert(sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem) == 0x32);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.UI.Text text
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_text();
    // Get instance field reference: public UnityEngine.UI.Image material
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_material();
    // Get instance field reference: public UnityEngine.UI.Image hat
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_hat();
    // Get instance field reference: public UnityEngine.UI.Image face
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_face();
    // Get instance field reference: public UnityEngine.UI.Image badge
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_badge();
    // Get instance field reference: public UnityEngine.UI.Image leftHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_leftHand();
    // Get instance field reference: public UnityEngine.UI.Image rightHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Image*& dyn_rightHand();
    // Get instance field reference: public Photon.Realtime.Player myTarget
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_myTarget();
    // Get instance field reference: public Photon.Realtime.Player tempTarget
    [[deprecated("Use field access instead!")]] ::Photon::Realtime::Player*& dyn_tempTarget();
    // Get instance field reference: public VRRig myRig
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRRig*& dyn_myRig();
    // Get instance field reference: public UnityEngine.Sprite tempSprite
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn_tempSprite();
    // Get instance field reference: public GorillaNetworking.CosmeticsController/GorillaNetworking.CosmeticItem tempItem
    [[deprecated("Use field access instead!")]] ::GorillaNetworking::CosmeticsController_CosmeticItem& dyn_tempItem();
    // public System.Void .ctor()
    // Offset: 0xC6EFF8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaHuntComputer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaHuntComputer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaHuntComputer*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0xC6E038
    void Update();
    // private System.Void SetImage(System.String itemDisplayName, ref UnityEngine.UI.Image image)
    // Offset: 0xC6EE54
    void SetImage(::StringW itemDisplayName, ByRef<::UnityEngine::UI::Image*> image);
    // public System.String NormalizeName(System.Boolean doIt, System.String text)
    // Offset: 0xC6ECF0
    ::StringW NormalizeName(bool doIt, ::StringW text);
  }; // GorillaHuntComputer
  #pragma pack(pop)
  static check_size<sizeof(GorillaHuntComputer), 112 + sizeof(::GorillaNetworking::CosmeticsController_CosmeticItem)> __GlobalNamespace_GorillaHuntComputerSizeCheck;
  static_assert(sizeof(GorillaHuntComputer) == 0xA2);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaHuntComputer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaHuntComputer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHuntComputer::*)()>(&GlobalNamespace::GorillaHuntComputer::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHuntComputer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHuntComputer::SetImage
// Il2CppName: SetImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHuntComputer::*)(::StringW, ByRef<::UnityEngine::UI::Image*>)>(&GlobalNamespace::GorillaHuntComputer::SetImage)> {
  static const MethodInfo* get() {
    static auto* itemDisplayName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* image = &::il2cpp_utils::GetClassFromName("UnityEngine.UI", "Image")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHuntComputer*), "SetImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{itemDisplayName, image});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHuntComputer::NormalizeName
// Il2CppName: NormalizeName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GorillaHuntComputer::*)(bool, ::StringW)>(&GlobalNamespace::GorillaHuntComputer::NormalizeName)> {
  static const MethodInfo* get() {
    static auto* doIt = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* text = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHuntComputer*), "NormalizeName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{doIt, text});
  }
};
