// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IJumpOffsetYProvider
  class IJumpOffsetYProvider;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: SliderData
  class SliderData;
  // Forward declaring type: NoteLineLayer
  struct NoteLineLayer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnMovementData
  class BeatmapObjectSpawnMovementData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapObjectSpawnMovementData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapObjectSpawnMovementData*, "", "BeatmapObjectSpawnMovementData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectSpawnMovementData
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectSpawnMovementData : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData
    struct ObstacleSpawnData;
    // Nested type: ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData
    struct NoteSpawnData;
    // Nested type: ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData
    struct SliderSpawnData;
    // Nested type: ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpValueType
    struct NoteJumpValueType;
    public:
    // [HeaderAttribute] Offset: 0x10DDAC4
    // private UnityEngine.Vector3 _centerPos
    // Size: 0xC
    // Offset: 0x10
    ::UnityEngine::Vector3 centerPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // [HeaderAttribute] Offset: 0x10DDB10
    // [TooltipAttribute] Offset: 0x10DDB10
    // private System.Single _maxHalfJumpDistance
    // Size: 0x4
    // Offset: 0x1C
    float maxHalfJumpDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startHalfJumpDurationInBeats
    // Size: 0x4
    // Offset: 0x20
    float startHalfJumpDurationInBeats;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _baseLinesHighestJumpPosY
    // Size: 0x4
    // Offset: 0x24
    float baseLinesHighestJumpPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _upperLinesHighestJumpPosY
    // Size: 0x4
    // Offset: 0x28
    float upperLinesHighestJumpPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _topLinesHighestJumpPosY
    // Size: 0x4
    // Offset: 0x2C
    float topLinesHighestJumpPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x10DDBC0
    // private System.Single _moveSpeed
    // Size: 0x4
    // Offset: 0x30
    float moveSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _moveDuration
    // Size: 0x4
    // Offset: 0x34
    float moveDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HeaderAttribute] Offset: 0x10DDC1C
    // private System.Single _verticalObstaclePosY
    // Size: 0x4
    // Offset: 0x38
    float verticalObstaclePosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _obstacleTopPosY
    // Size: 0x4
    // Offset: 0x3C
    float obstacleTopPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _spawnAheadTime
    // Size: 0x4
    // Offset: 0x40
    float spawnAheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _jumpDuration
    // Size: 0x4
    // Offset: 0x44
    float jumpDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _noteJumpStartBeatOffset
    // Size: 0x4
    // Offset: 0x48
    float noteJumpStartBeatOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _noteJumpMovementSpeed
    // Size: 0x4
    // Offset: 0x4C
    float noteJumpMovementSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _jumpDistance
    // Size: 0x4
    // Offset: 0x50
    float jumpDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _moveDistance
    // Size: 0x4
    // Offset: 0x54
    float moveDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _moveStartPos
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 moveStartPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _moveEndPos
    // Size: 0xC
    // Offset: 0x64
    ::UnityEngine::Vector3 moveEndPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _jumpEndPos
    // Size: 0xC
    // Offset: 0x70
    ::UnityEngine::Vector3 jumpEndPos;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Int32 _noteLinesCount
    // Size: 0x4
    // Offset: 0x7C
    int noteLinesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private IJumpOffsetYProvider _jumpOffsetYProvider
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::IJumpOffsetYProvider* jumpOffsetYProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IJumpOffsetYProvider*) == 0x8);
    // private UnityEngine.Vector3 _rightVec
    // Size: 0xC
    // Offset: 0x88
    ::UnityEngine::Vector3 rightVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _forwardVec
    // Size: 0xC
    // Offset: 0x94
    ::UnityEngine::Vector3 forwardVec;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // static field const value: static public System.Single kDefaultMaxHalfJumpDistance
    static constexpr const float kDefaultMaxHalfJumpDistance = 18;
    // Get static field: static public System.Single kDefaultMaxHalfJumpDistance
    static float _get_kDefaultMaxHalfJumpDistance();
    // Set static field: static public System.Single kDefaultMaxHalfJumpDistance
    static void _set_kDefaultMaxHalfJumpDistance(float value);
    // static field const value: static public System.Single kDefaultStartHalfJumpDurationInBeats
    static constexpr const float kDefaultStartHalfJumpDurationInBeats = 4;
    // Get static field: static public System.Single kDefaultStartHalfJumpDurationInBeats
    static float _get_kDefaultStartHalfJumpDurationInBeats();
    // Set static field: static public System.Single kDefaultStartHalfJumpDurationInBeats
    static void _set_kDefaultStartHalfJumpDurationInBeats(float value);
    // Get instance field reference: private UnityEngine.Vector3 _centerPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__centerPos();
    // Get instance field reference: private System.Single _maxHalfJumpDistance
    [[deprecated("Use field access instead!")]] float& dyn__maxHalfJumpDistance();
    // Get instance field reference: private System.Single _startHalfJumpDurationInBeats
    [[deprecated("Use field access instead!")]] float& dyn__startHalfJumpDurationInBeats();
    // Get instance field reference: private System.Single _baseLinesHighestJumpPosY
    [[deprecated("Use field access instead!")]] float& dyn__baseLinesHighestJumpPosY();
    // Get instance field reference: private System.Single _upperLinesHighestJumpPosY
    [[deprecated("Use field access instead!")]] float& dyn__upperLinesHighestJumpPosY();
    // Get instance field reference: private System.Single _topLinesHighestJumpPosY
    [[deprecated("Use field access instead!")]] float& dyn__topLinesHighestJumpPosY();
    // Get instance field reference: private System.Single _moveSpeed
    [[deprecated("Use field access instead!")]] float& dyn__moveSpeed();
    // Get instance field reference: private System.Single _moveDuration
    [[deprecated("Use field access instead!")]] float& dyn__moveDuration();
    // Get instance field reference: private System.Single _verticalObstaclePosY
    [[deprecated("Use field access instead!")]] float& dyn__verticalObstaclePosY();
    // Get instance field reference: private System.Single _obstacleTopPosY
    [[deprecated("Use field access instead!")]] float& dyn__obstacleTopPosY();
    // Get instance field reference: private System.Single _spawnAheadTime
    [[deprecated("Use field access instead!")]] float& dyn__spawnAheadTime();
    // Get instance field reference: private System.Single _jumpDuration
    [[deprecated("Use field access instead!")]] float& dyn__jumpDuration();
    // Get instance field reference: private System.Single _noteJumpStartBeatOffset
    [[deprecated("Use field access instead!")]] float& dyn__noteJumpStartBeatOffset();
    // Get instance field reference: private System.Single _noteJumpMovementSpeed
    [[deprecated("Use field access instead!")]] float& dyn__noteJumpMovementSpeed();
    // Get instance field reference: private System.Single _jumpDistance
    [[deprecated("Use field access instead!")]] float& dyn__jumpDistance();
    // Get instance field reference: private System.Single _moveDistance
    [[deprecated("Use field access instead!")]] float& dyn__moveDistance();
    // Get instance field reference: private UnityEngine.Vector3 _moveStartPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__moveStartPos();
    // Get instance field reference: private UnityEngine.Vector3 _moveEndPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__moveEndPos();
    // Get instance field reference: private UnityEngine.Vector3 _jumpEndPos
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__jumpEndPos();
    // Get instance field reference: private System.Int32 _noteLinesCount
    [[deprecated("Use field access instead!")]] int& dyn__noteLinesCount();
    // Get instance field reference: private IJumpOffsetYProvider _jumpOffsetYProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IJumpOffsetYProvider*& dyn__jumpOffsetYProvider();
    // Get instance field reference: private UnityEngine.Vector3 _rightVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rightVec();
    // Get instance field reference: private UnityEngine.Vector3 _forwardVec
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__forwardVec();
    // public System.Single get_spawnAheadTime()
    // Offset: 0x151BA2C
    float get_spawnAheadTime();
    // public System.Single get_moveDuration()
    // Offset: 0x151BA34
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x151BA3C
    float get_jumpDuration();
    // public System.Single get_noteLinesDistance()
    // Offset: 0x151A61C
    float get_noteLinesDistance();
    // public System.Single get_verticalLayersDistance()
    // Offset: 0x151A5D4
    float get_verticalLayersDistance();
    // public System.Single get_jumpDistance()
    // Offset: 0x151BA44
    float get_jumpDistance();
    // public System.Single get_noteJumpMovementSpeed()
    // Offset: 0x151BA4C
    float get_noteJumpMovementSpeed();
    // public System.Int32 get_noteLinesCount()
    // Offset: 0x151BA54
    int get_noteLinesCount();
    // public UnityEngine.Vector3 get_centerPos()
    // Offset: 0x151BA5C
    ::UnityEngine::Vector3 get_centerPos();
    // public System.Single get_jumpOffsetY()
    // Offset: 0x151A4B0
    float get_jumpOffsetY();
    // public System.Void .ctor()
    // Offset: 0x151B900
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectSpawnMovementData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapObjectSpawnMovementData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectSpawnMovementData*, creationType>()));
    }
    // public System.Void Init(System.Int32 noteLinesCount, System.Single startNoteJumpMovementSpeed, System.Single startBpm, BeatmapObjectSpawnMovementData/NoteJumpValueType noteJumpValueType, System.Single noteJumpValue, IJumpOffsetYProvider jumpOffsetYProvider, UnityEngine.Vector3 rightVec, UnityEngine.Vector3 forwardVec)
    // Offset: 0x151AA6C
    void Init(int noteLinesCount, float startNoteJumpMovementSpeed, float startBpm, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpValueType noteJumpValueType, float noteJumpValue, ::GlobalNamespace::IJumpOffsetYProvider* jumpOffsetYProvider, ::UnityEngine::Vector3 rightVec, ::UnityEngine::Vector3 forwardVec);
    // public BeatmapObjectSpawnMovementData/ObstacleSpawnData GetObstacleSpawnData(ObstacleData obstacleData)
    // Offset: 0x151AE64
    ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData GetObstacleSpawnData(::GlobalNamespace::ObstacleData* obstacleData);
    // public BeatmapObjectSpawnMovementData/NoteSpawnData GetJumpingNoteSpawnData(NoteData noteData)
    // Offset: 0x151B1EC
    ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData GetJumpingNoteSpawnData(::GlobalNamespace::NoteData* noteData);
    // public BeatmapObjectSpawnMovementData/SliderSpawnData GetSliderSpawnData(SliderData sliderData)
    // Offset: 0x151B51C
    ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData GetSliderSpawnData(::GlobalNamespace::SliderData* sliderData);
    // public UnityEngine.Vector3 GetNoteOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x151BB98
    ::UnityEngine::Vector3 GetNoteOffset(int noteLineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer);
    // public UnityEngine.Vector3 GetObstacleOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x151BA68
    ::UnityEngine::Vector3 GetObstacleOffset(int noteLineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer);
    // public UnityEngine.Vector2 Get2DNoteOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0x151B7F4
    ::UnityEngine::Vector2 Get2DNoteOffset(int noteLineIndex, ::GlobalNamespace::NoteLineLayer noteLineLayer);
    // public System.Single JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(NoteLineLayer lineLayer, System.Single distanceFromPlayer)
    // Offset: 0x151B820
    float JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(::GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer);
    // private System.Single HighestJumpPosYForLineLayer(NoteLineLayer lineLayer)
    // Offset: 0x151BD80
    float HighestJumpPosYForLineLayer(::GlobalNamespace::NoteLineLayer lineLayer);
    // private System.Single HighestJumpPosYForLineLayerWithoutJumpOffset(NoteLineLayer lineLayer)
    // Offset: 0x151BEFC
    float HighestJumpPosYForLineLayerWithoutJumpOffset(::GlobalNamespace::NoteLineLayer lineLayer);
    // private System.Single NoteJumpGravityForLineLayer(NoteLineLayer lineLayer, NoteLineLayer beforeJumpLineLayer)
    // Offset: 0x151BCC0
    float NoteJumpGravityForLineLayer(::GlobalNamespace::NoteLineLayer lineLayer, ::GlobalNamespace::NoteLineLayer beforeJumpLineLayer);
    // private System.Single NoteJumpGravityForLineLayerWithoutJumpOffset(NoteLineLayer lineLayer, NoteLineLayer beforeJumpLineLayer)
    // Offset: 0x151BD18
    float NoteJumpGravityForLineLayerWithoutJumpOffset(::GlobalNamespace::NoteLineLayer lineLayer, ::GlobalNamespace::NoteLineLayer beforeJumpLineLayer);
  }; // BeatmapObjectSpawnMovementData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectSpawnMovementData), 148 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_BeatmapObjectSpawnMovementDataSizeCheck;
  static_assert(sizeof(BeatmapObjectSpawnMovementData) == 0xA0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_spawnAheadTime
// Il2CppName: get_spawnAheadTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_spawnAheadTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_spawnAheadTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_moveDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesDistance
// Il2CppName: get_noteLinesDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_noteLinesDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_verticalLayersDistance
// Il2CppName: get_verticalLayersDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_verticalLayersDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_verticalLayersDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDistance
// Il2CppName: get_jumpDistance
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpDistance)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_jumpDistance", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed
// Il2CppName: get_noteJumpMovementSpeed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteJumpMovementSpeed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_noteJumpMovementSpeed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesCount
// Il2CppName: get_noteLinesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_noteLinesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_noteLinesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_centerPos
// Il2CppName: get_centerPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_centerPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_centerPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpOffsetY
// Il2CppName: get_jumpOffsetY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)()>(&GlobalNamespace::BeatmapObjectSpawnMovementData::get_jumpOffsetY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "get_jumpOffsetY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(int, float, float, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpValueType, float, ::GlobalNamespace::IJumpOffsetYProvider*, ::UnityEngine::Vector3, ::UnityEngine::Vector3)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::Init)> {
  static const MethodInfo* get() {
    static auto* noteLinesCount = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startNoteJumpMovementSpeed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* startBpm = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* noteJumpValueType = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteJumpValueType")->byval_arg;
    static auto* noteJumpValue = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpOffsetYProvider = &::il2cpp_utils::GetClassFromName("", "IJumpOffsetYProvider")->byval_arg;
    static auto* rightVec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* forwardVec = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLinesCount, startNoteJumpMovementSpeed, startBpm, noteJumpValueType, noteJumpValue, jumpOffsetYProvider, rightVec, forwardVec});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleSpawnData
// Il2CppName: GetObstacleSpawnData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::ObstacleData*)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleSpawnData)> {
  static const MethodInfo* get() {
    static auto* obstacleData = &::il2cpp_utils::GetClassFromName("", "ObstacleData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "GetObstacleSpawnData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData
// Il2CppName: GetJumpingNoteSpawnData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::NoteData*)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::GetJumpingNoteSpawnData)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "GetJumpingNoteSpawnData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::GetSliderSpawnData
// Il2CppName: GetSliderSpawnData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::SliderData*)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::GetSliderSpawnData)> {
  static const MethodInfo* get() {
    static auto* sliderData = &::il2cpp_utils::GetClassFromName("", "SliderData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "GetSliderSpawnData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::GetNoteOffset
// Il2CppName: GetNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(int, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::GetNoteOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "GetNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleOffset
// Il2CppName: GetObstacleOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(int, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::GetObstacleOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "GetObstacleOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::Get2DNoteOffset
// Il2CppName: Get2DNoteOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector2 (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(int, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::Get2DNoteOffset)> {
  static const MethodInfo* get() {
    static auto* noteLineIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "Get2DNoteOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteLineIndex, noteLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
// Il2CppName: JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::NoteLineLayer, float)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* distanceFromPlayer = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer, distanceFromPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer
// Il2CppName: HighestJumpPosYForLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "HighestJumpPosYForLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset
// Il2CppName: HighestJumpPosYForLineLayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::HighestJumpPosYForLineLayerWithoutJumpOffset)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "HighestJumpPosYForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer
// Il2CppName: NoteJumpGravityForLineLayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayer)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* beforeJumpLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "NoteJumpGravityForLineLayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer, beforeJumpLineLayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset
// Il2CppName: NoteJumpGravityForLineLayerWithoutJumpOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapObjectSpawnMovementData::*)(::GlobalNamespace::NoteLineLayer, ::GlobalNamespace::NoteLineLayer)>(&GlobalNamespace::BeatmapObjectSpawnMovementData::NoteJumpGravityForLineLayerWithoutJumpOffset)> {
  static const MethodInfo* get() {
    static auto* lineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    static auto* beforeJumpLineLayer = &::il2cpp_utils::GetClassFromName("", "NoteLineLayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectSpawnMovementData*), "NoteJumpGravityForLineLayerWithoutJumpOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lineLayer, beforeJumpLineLayer});
  }
};
