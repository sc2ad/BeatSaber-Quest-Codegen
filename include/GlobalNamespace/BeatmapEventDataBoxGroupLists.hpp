// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroupList
  class BeatmapEventDataBoxGroupList;
  // Forward declaring type: BeatmapData
  class BeatmapData;
  // Forward declaring type: IBeatToTimeConvertor
  class IBeatToTimeConvertor;
  // Forward declaring type: BeatmapEventDataBoxGroup
  class BeatmapEventDataBoxGroup;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroupLists
  class BeatmapEventDataBoxGroupLists;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapEventDataBoxGroupLists);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBoxGroupLists*, "", "BeatmapEventDataBoxGroupLists");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataBoxGroupLists
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventDataBoxGroupLists : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,BeatmapEventDataBoxGroupList> _beatmapEventDataBoxGroupListDict
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BeatmapEventDataBoxGroupList*>* beatmapEventDataBoxGroupListDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BeatmapEventDataBoxGroupList*>*) == 0x8);
    // private readonly BeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::BeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapData*) == 0x8);
    // private readonly IBeatToTimeConvertor _beatToTimeConvertor
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatToTimeConvertor*) == 0x8);
    // private System.Boolean _updateBeatmapDataOnInsert
    // Size: 0x1
    // Offset: 0x28
    bool updateBeatmapDataOnInsert;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private readonly System.Collections.Generic.Dictionary`2<System.Int32,BeatmapEventDataBoxGroupList> _beatmapEventDataBoxGroupListDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<int, ::GlobalNamespace::BeatmapEventDataBoxGroupList*>*& dyn__beatmapEventDataBoxGroupListDict();
    // Get instance field reference: private readonly BeatmapData _beatmapData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapData*& dyn__beatmapData();
    // Get instance field reference: private readonly IBeatToTimeConvertor _beatToTimeConvertor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatToTimeConvertor*& dyn__beatToTimeConvertor();
    // Get instance field reference: private System.Boolean _updateBeatmapDataOnInsert
    [[deprecated("Use field access instead!")]] bool& dyn__updateBeatmapDataOnInsert();
    // public System.Void .ctor(BeatmapData beatmapData, IBeatToTimeConvertor beatToTimeConvertor, System.Boolean updateBeatmapDataOnInsert)
    // Offset: 0x15355FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventDataBoxGroupLists* New_ctor(::GlobalNamespace::BeatmapData* beatmapData, ::GlobalNamespace::IBeatToTimeConvertor* beatToTimeConvertor, bool updateBeatmapDataOnInsert) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupLists::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventDataBoxGroupLists*, creationType>(beatmapData, beatToTimeConvertor, updateBeatmapDataOnInsert)));
    }
    // public System.Collections.Generic.LinkedListNode`1<BeatmapEventDataBoxGroup> Insert(System.Int32 groupId, BeatmapEventDataBoxGroup beatmapEventDataBoxGroup)
    // Offset: 0x1535698
    ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* Insert(int groupId, ::GlobalNamespace::BeatmapEventDataBoxGroup* beatmapEventDataBoxGroup);
    // public System.Void Remove(System.Int32 groupId, System.Collections.Generic.LinkedListNode`1<BeatmapEventDataBoxGroup> nodeToDelete)
    // Offset: 0x153578C
    void Remove(int groupId, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* nodeToDelete);
    // public System.Void ToggleUpdateBeatmapDataOnInsert(System.Boolean enableUpdateOnInsert)
    // Offset: 0x1535850
    void ToggleUpdateBeatmapDataOnInsert(bool enableUpdateOnInsert);
    // public System.Void SyncWithBeatmapData()
    // Offset: 0x153595C
    void SyncWithBeatmapData();
  }; // BeatmapEventDataBoxGroupLists
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventDataBoxGroupLists), 40 + sizeof(bool)> __GlobalNamespace_BeatmapEventDataBoxGroupListsSizeCheck;
  static_assert(sizeof(BeatmapEventDataBoxGroupLists) == 0x29);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupLists::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupLists::Insert
// Il2CppName: Insert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* (GlobalNamespace::BeatmapEventDataBoxGroupLists::*)(int, ::GlobalNamespace::BeatmapEventDataBoxGroup*)>(&GlobalNamespace::BeatmapEventDataBoxGroupLists::Insert)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* beatmapEventDataBoxGroup = &::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBoxGroup")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupLists*), "Insert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId, beatmapEventDataBoxGroup});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupLists::Remove
// Il2CppName: Remove
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroupLists::*)(int, ::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*)>(&GlobalNamespace::BeatmapEventDataBoxGroupLists::Remove)> {
  static const MethodInfo* get() {
    static auto* groupId = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* nodeToDelete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBoxGroup")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupLists*), "Remove", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{groupId, nodeToDelete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupLists::ToggleUpdateBeatmapDataOnInsert
// Il2CppName: ToggleUpdateBeatmapDataOnInsert
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroupLists::*)(bool)>(&GlobalNamespace::BeatmapEventDataBoxGroupLists::ToggleUpdateBeatmapDataOnInsert)> {
  static const MethodInfo* get() {
    static auto* enableUpdateOnInsert = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupLists*), "ToggleUpdateBeatmapDataOnInsert", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableUpdateOnInsert});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupLists::SyncWithBeatmapData
// Il2CppName: SyncWithBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroupLists::*)()>(&GlobalNamespace::BeatmapEventDataBoxGroupLists::SyncWithBeatmapData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupLists*), "SyncWithBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
