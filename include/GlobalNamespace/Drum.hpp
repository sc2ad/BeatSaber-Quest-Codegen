// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: Drum
  class Drum;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::Drum);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Drum*, "", "Drum");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: Drum
  // [TokenAttribute] Offset: FFFFFFFF
  class Drum : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean disabler
    // Size: 0x1
    // Offset: 0x18
    bool disabler;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disabler and: mySource
    char __padding0[0x7] = {};
    // public UnityEngine.AudioSource mySource
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::AudioSource* mySource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public System.Int32 myIndex
    // Size: 0x4
    // Offset: 0x28
    int myIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean disabler
    [[deprecated("Use field access instead!")]] bool& dyn_disabler();
    // Get instance field reference: public UnityEngine.AudioSource mySource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_mySource();
    // Get instance field reference: public System.Int32 myIndex
    [[deprecated("Use field access instead!")]] int& dyn_myIndex();
    // public System.Void .ctor()
    // Offset: 0xC65D58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Drum* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::Drum::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Drum*, creationType>()));
    }
  }; // Drum
  #pragma pack(pop)
  static check_size<sizeof(Drum), 40 + sizeof(int)> __GlobalNamespace_DrumSizeCheck;
  static_assert(sizeof(Drum) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::Drum::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
