// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: SceneStartHandler
  class SceneStartHandler;
  // Forward declaring type: PlayersSpecificSettingsAtGameStartModel
  class PlayersSpecificSettingsAtGameStartModel;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SceneStartSyncController
  class SceneStartSyncController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SceneStartSyncController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SceneStartSyncController*, "", "SceneStartSyncController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: SceneStartSyncController
  // [TokenAttribute] Offset: FFFFFFFF
  class SceneStartSyncController : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [InjectAttribute] Offset: 0x10DCA1C
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0x10DCA2C
    // private readonly IGameplayRpcManager _gameplayRpcManager
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IGameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IGameplayRpcManager*) == 0x8);
    // private System.Action`1<System.String> syncStartDidSuccessEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::StringW>* syncStartDidSuccessEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action`1<System.String> syncStartDidReceiveTooLateEvent
    // Size: 0x8
    // Offset: 0x30
    ::System::Action_1<::StringW>* syncStartDidReceiveTooLateEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::StringW>*) == 0x8);
    // private System.Action syncStartDidFailEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action* syncStartDidFailEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private SceneStartHandler _sceneStartHandler
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::SceneStartHandler* sceneStartHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::SceneStartHandler*) == 0x8);
    // private PlayersSpecificSettingsAtGameStartModel _playersAtGameStartModel
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel* playersAtGameStartModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*) == 0x8);
    // private System.Single _waitStartTime
    // Size: 0x4
    // Offset: 0x50
    float waitStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _sceneSyncStarted
    // Size: 0x1
    // Offset: 0x54
    bool sceneSyncStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kLoadOtherTimeout
    static constexpr const float kLoadOtherTimeout = 15;
    // Get static field: static private System.Single kLoadOtherTimeout
    static float _get_kLoadOtherTimeout();
    // Set static field: static private System.Single kLoadOtherTimeout
    static void _set_kLoadOtherTimeout(float value);
    // static field const value: static private System.Single kLoadSelfTimeout
    static constexpr const float kLoadSelfTimeout = 20;
    // Get static field: static private System.Single kLoadSelfTimeout
    static float _get_kLoadSelfTimeout();
    // Set static field: static private System.Single kLoadSelfTimeout
    static void _set_kLoadSelfTimeout(float value);
    // Get instance field reference: private readonly IMultiplayerSessionManager _multiplayerSessionManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSessionManager*& dyn__multiplayerSessionManager();
    // Get instance field reference: private readonly IGameplayRpcManager _gameplayRpcManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IGameplayRpcManager*& dyn__gameplayRpcManager();
    // Get instance field reference: private System.Action`1<System.String> syncStartDidSuccessEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_syncStartDidSuccessEvent();
    // Get instance field reference: private System.Action`1<System.String> syncStartDidReceiveTooLateEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::StringW>*& dyn_syncStartDidReceiveTooLateEvent();
    // Get instance field reference: private System.Action syncStartDidFailEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_syncStartDidFailEvent();
    // Get instance field reference: private SceneStartHandler _sceneStartHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::SceneStartHandler*& dyn__sceneStartHandler();
    // Get instance field reference: private PlayersSpecificSettingsAtGameStartModel _playersAtGameStartModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*& dyn__playersAtGameStartModel();
    // Get instance field reference: private System.Single _waitStartTime
    [[deprecated("Use field access instead!")]] float& dyn__waitStartTime();
    // Get instance field reference: private System.Boolean _sceneSyncStarted
    [[deprecated("Use field access instead!")]] bool& dyn__sceneSyncStarted();
    // public System.Void add_syncStartDidSuccessEvent(System.Action`1<System.String> value)
    // Offset: 0x145F0A4
    void add_syncStartDidSuccessEvent(::System::Action_1<::StringW>* value);
    // public System.Void remove_syncStartDidSuccessEvent(System.Action`1<System.String> value)
    // Offset: 0x145F148
    void remove_syncStartDidSuccessEvent(::System::Action_1<::StringW>* value);
    // public System.Void add_syncStartDidReceiveTooLateEvent(System.Action`1<System.String> value)
    // Offset: 0x145F1EC
    void add_syncStartDidReceiveTooLateEvent(::System::Action_1<::StringW>* value);
    // public System.Void remove_syncStartDidReceiveTooLateEvent(System.Action`1<System.String> value)
    // Offset: 0x145F290
    void remove_syncStartDidReceiveTooLateEvent(::System::Action_1<::StringW>* value);
    // public System.Void add_syncStartDidFailEvent(System.Action value)
    // Offset: 0x145F334
    void add_syncStartDidFailEvent(::System::Action* value);
    // public System.Void remove_syncStartDidFailEvent(System.Action value)
    // Offset: 0x145F3D8
    void remove_syncStartDidFailEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x145F83C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SceneStartSyncController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SceneStartSyncController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SceneStartSyncController*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x145F47C
    void Start();
    // protected System.Void Update()
    // Offset: 0x145F494
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x145F4F4
    void OnDestroy();
    // public System.Void StartSceneLoadSync(PlayersSpecificSettingsAtGameStartModel playersAtGameStartModel)
    // Offset: 0x145F5F0
    void StartSceneLoadSync(::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel* playersAtGameStartModel);
    // private System.Void HandleSceneSetupDidFinish(System.String sessionGameId)
    // Offset: 0x145F734
    void HandleSceneSetupDidFinish(::StringW sessionGameId);
    // private System.Void HandleSceneSetupDidReceiveTooLate(System.String sessionGameId)
    // Offset: 0x145F7B8
    void HandleSceneSetupDidReceiveTooLate(::StringW sessionGameId);
  }; // SceneStartSyncController
  #pragma pack(pop)
  static check_size<sizeof(SceneStartSyncController), 84 + sizeof(bool)> __GlobalNamespace_SceneStartSyncControllerSizeCheck;
  static_assert(sizeof(SceneStartSyncController) == 0x55);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::add_syncStartDidSuccessEvent
// Il2CppName: add_syncStartDidSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::SceneStartSyncController::add_syncStartDidSuccessEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "add_syncStartDidSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::remove_syncStartDidSuccessEvent
// Il2CppName: remove_syncStartDidSuccessEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::SceneStartSyncController::remove_syncStartDidSuccessEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "remove_syncStartDidSuccessEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::add_syncStartDidReceiveTooLateEvent
// Il2CppName: add_syncStartDidReceiveTooLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::SceneStartSyncController::add_syncStartDidReceiveTooLateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "add_syncStartDidReceiveTooLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::remove_syncStartDidReceiveTooLateEvent
// Il2CppName: remove_syncStartDidReceiveTooLateEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::System::Action_1<::StringW>*)>(&GlobalNamespace::SceneStartSyncController::remove_syncStartDidReceiveTooLateEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "remove_syncStartDidReceiveTooLateEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::add_syncStartDidFailEvent
// Il2CppName: add_syncStartDidFailEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::System::Action*)>(&GlobalNamespace::SceneStartSyncController::add_syncStartDidFailEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "add_syncStartDidFailEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::remove_syncStartDidFailEvent
// Il2CppName: remove_syncStartDidFailEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::System::Action*)>(&GlobalNamespace::SceneStartSyncController::remove_syncStartDidFailEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "remove_syncStartDidFailEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)()>(&GlobalNamespace::SceneStartSyncController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)()>(&GlobalNamespace::SceneStartSyncController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)()>(&GlobalNamespace::SceneStartSyncController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::StartSceneLoadSync
// Il2CppName: StartSceneLoadSync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::GlobalNamespace::PlayersSpecificSettingsAtGameStartModel*)>(&GlobalNamespace::SceneStartSyncController::StartSceneLoadSync)> {
  static const MethodInfo* get() {
    static auto* playersAtGameStartModel = &::il2cpp_utils::GetClassFromName("", "PlayersSpecificSettingsAtGameStartModel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "StartSceneLoadSync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playersAtGameStartModel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidFinish
// Il2CppName: HandleSceneSetupDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::StringW)>(&GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidFinish)> {
  static const MethodInfo* get() {
    static auto* sessionGameId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "HandleSceneSetupDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionGameId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidReceiveTooLate
// Il2CppName: HandleSceneSetupDidReceiveTooLate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SceneStartSyncController::*)(::StringW)>(&GlobalNamespace::SceneStartSyncController::HandleSceneSetupDidReceiveTooLate)> {
  static const MethodInfo* get() {
    static auto* sessionGameId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SceneStartSyncController*), "HandleSceneSetupDidReceiveTooLate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sessionGameId});
  }
};
