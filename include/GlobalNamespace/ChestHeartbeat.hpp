// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ChestHeartbeat
  class ChestHeartbeat;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ChestHeartbeat);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ChestHeartbeat*, "", "ChestHeartbeat");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: ChestHeartbeat
  // [TokenAttribute] Offset: FFFFFFFF
  class ChestHeartbeat : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ChestHeartbeat::$HeartBeat$d__13
    class $HeartBeat$d__13;
    public:
    // public System.Int32 millisToWait
    // Size: 0x4
    // Offset: 0x18
    int millisToWait;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 millisMin
    // Size: 0x4
    // Offset: 0x1C
    int millisMin;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lastShot
    // Size: 0x4
    // Offset: 0x20
    int lastShot;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastShot and: audioSource
    char __padding2[0x4] = {};
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.Transform scaleTransform
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Transform* scaleTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Single deltaTime
    // Size: 0x4
    // Offset: 0x38
    float deltaTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single heartMinSize
    // Size: 0x4
    // Offset: 0x3C
    float heartMinSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single heartMaxSize
    // Size: 0x4
    // Offset: 0x40
    float heartMaxSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single minTime
    // Size: 0x4
    // Offset: 0x44
    float minTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single maxTime
    // Size: 0x4
    // Offset: 0x48
    float maxTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single endtime
    // Size: 0x4
    // Offset: 0x4C
    float endtime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single currentTime
    // Size: 0x4
    // Offset: 0x50
    float currentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Int32 millisToWait
    [[deprecated("Use field access instead!")]] int& dyn_millisToWait();
    // Get instance field reference: public System.Int32 millisMin
    [[deprecated("Use field access instead!")]] int& dyn_millisMin();
    // Get instance field reference: public System.Int32 lastShot
    [[deprecated("Use field access instead!")]] int& dyn_lastShot();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.Transform scaleTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_scaleTransform();
    // Get instance field reference: private System.Single deltaTime
    [[deprecated("Use field access instead!")]] float& dyn_deltaTime();
    // Get instance field reference: private System.Single heartMinSize
    [[deprecated("Use field access instead!")]] float& dyn_heartMinSize();
    // Get instance field reference: private System.Single heartMaxSize
    [[deprecated("Use field access instead!")]] float& dyn_heartMaxSize();
    // Get instance field reference: private System.Single minTime
    [[deprecated("Use field access instead!")]] float& dyn_minTime();
    // Get instance field reference: private System.Single maxTime
    [[deprecated("Use field access instead!")]] float& dyn_maxTime();
    // Get instance field reference: private System.Single endtime
    [[deprecated("Use field access instead!")]] float& dyn_endtime();
    // Get instance field reference: private System.Single currentTime
    [[deprecated("Use field access instead!")]] float& dyn_currentTime();
    // public System.Void .ctor()
    // Offset: 0xC617B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ChestHeartbeat* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ChestHeartbeat::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ChestHeartbeat*, creationType>()));
    }
    // public System.Void Update()
    // Offset: 0xC614B0
    void Update();
    // private System.Collections.IEnumerator HeartBeat()
    // Offset: 0xC61718
    ::System::Collections::IEnumerator* HeartBeat();
  }; // ChestHeartbeat
  #pragma pack(pop)
  static check_size<sizeof(ChestHeartbeat), 80 + sizeof(float)> __GlobalNamespace_ChestHeartbeatSizeCheck;
  static_assert(sizeof(ChestHeartbeat) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ChestHeartbeat::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ChestHeartbeat::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ChestHeartbeat::*)()>(&GlobalNamespace::ChestHeartbeat::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestHeartbeat*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ChestHeartbeat::HeartBeat
// Il2CppName: HeartBeat
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::ChestHeartbeat::*)()>(&GlobalNamespace::ChestHeartbeat::HeartBeat)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ChestHeartbeat*), "HeartBeat", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
