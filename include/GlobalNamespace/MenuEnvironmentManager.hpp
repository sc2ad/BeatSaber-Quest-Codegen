// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: MenuEnvironmentType because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MenuEnvironmentManager
  class MenuEnvironmentManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MenuEnvironmentManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MenuEnvironmentManager*, "", "MenuEnvironmentManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: MenuEnvironmentManager
  // [TokenAttribute] Offset: FFFFFFFF
  class MenuEnvironmentManager : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType
    struct MenuEnvironmentType;
    // Nested type: ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects
    class MenuEnvironmentObjects;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MenuEnvironmentManager/MenuEnvironmentType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MenuEnvironmentType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MenuEnvironmentType
      constexpr MenuEnvironmentType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MenuEnvironmentManager/MenuEnvironmentType None
      static constexpr const int None = 0;
      // Get static field: static public MenuEnvironmentManager/MenuEnvironmentType None
      static ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType _get_None();
      // Set static field: static public MenuEnvironmentManager/MenuEnvironmentType None
      static void _set_None(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value);
      // static field const value: static public MenuEnvironmentManager/MenuEnvironmentType Default
      static constexpr const int Default = 1;
      // Get static field: static public MenuEnvironmentManager/MenuEnvironmentType Default
      static ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType _get_Default();
      // Set static field: static public MenuEnvironmentManager/MenuEnvironmentType Default
      static void _set_Default(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value);
      // static field const value: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
      static constexpr const int Lobby = 2;
      // Get static field: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
      static ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType _get_Lobby();
      // Set static field: static public MenuEnvironmentManager/MenuEnvironmentType Lobby
      static void _set_Lobby(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // MenuEnvironmentManager/MenuEnvironmentType
    #pragma pack(pop)
    static check_size<sizeof(MenuEnvironmentManager::MenuEnvironmentType), 0 + sizeof(int)> __GlobalNamespace_MenuEnvironmentManager_MenuEnvironmentTypeSizeCheck;
    static_assert(sizeof(MenuEnvironmentManager::MenuEnvironmentType) == 0x4);
    public:
    // private MenuEnvironmentManager/MenuEnvironmentObjects[] _data
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects*> data;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects*>) == 0x8);
    // private MenuEnvironmentManager/MenuEnvironmentType _prevMenuEnvironmentType
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType prevMenuEnvironmentType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MenuEnvironmentManager/MenuEnvironmentObjects[] _data
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentObjects*>& dyn__data();
    // Get instance field reference: private MenuEnvironmentManager/MenuEnvironmentType _prevMenuEnvironmentType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType& dyn__prevMenuEnvironmentType();
    // public System.Void .ctor()
    // Offset: 0x138A014
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MenuEnvironmentManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MenuEnvironmentManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MenuEnvironmentManager*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0x1389E5C
    void Start();
    // public System.Void ShowEnvironmentType(MenuEnvironmentManager/MenuEnvironmentType menuEnvironmentType)
    // Offset: 0x1389E64
    void ShowEnvironmentType(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType menuEnvironmentType);
  }; // MenuEnvironmentManager
  #pragma pack(pop)
  static check_size<sizeof(MenuEnvironmentManager), 32 + sizeof(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType)> __GlobalNamespace_MenuEnvironmentManagerSizeCheck;
  static_assert(sizeof(MenuEnvironmentManager) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType, "", "MenuEnvironmentManager/MenuEnvironmentType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MenuEnvironmentManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MenuEnvironmentManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MenuEnvironmentManager::*)()>(&GlobalNamespace::MenuEnvironmentManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MenuEnvironmentManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MenuEnvironmentManager::ShowEnvironmentType
// Il2CppName: ShowEnvironmentType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MenuEnvironmentManager::*)(::GlobalNamespace::MenuEnvironmentManager::MenuEnvironmentType)>(&GlobalNamespace::MenuEnvironmentManager::ShowEnvironmentType)> {
  static const MethodInfo* get() {
    static auto* menuEnvironmentType = &::il2cpp_utils::GetClassFromName("", "MenuEnvironmentManager/MenuEnvironmentType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MenuEnvironmentManager*), "ShowEnvironmentType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{menuEnvironmentType});
  }
};
