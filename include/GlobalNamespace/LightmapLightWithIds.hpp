// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
// Including type: LightConstants/BakeId
#include "GlobalNamespace/LightConstants_BakeId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BakedLightsNormalizer
  class BakedLightsNormalizer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightmapLightWithIds
  class LightmapLightWithIds;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightmapLightWithIds);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightmapLightWithIds*, "", "LightmapLightWithIds");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: LightmapLightWithIds
  // [TokenAttribute] Offset: FFFFFFFF
  class LightmapLightWithIds : public ::GlobalNamespace::LightWithIds {
    public:
    // Writing base type padding for base size: 0x2A to desired offset: 0x2C
    char ___base_padding[0x2] = {};
    // Nested type: ::GlobalNamespace::LightmapLightWithIds::MixType
    struct MixType;
    // Nested type: ::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId
    class LightIntensitiesWithId;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LightmapLightWithIds/MixType
    // [TokenAttribute] Offset: FFFFFFFF
    struct MixType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: MixType
      constexpr MixType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LightmapLightWithIds/MixType Maximum
      static constexpr const int Maximum = 0;
      // Get static field: static public LightmapLightWithIds/MixType Maximum
      static ::GlobalNamespace::LightmapLightWithIds::MixType _get_Maximum();
      // Set static field: static public LightmapLightWithIds/MixType Maximum
      static void _set_Maximum(::GlobalNamespace::LightmapLightWithIds::MixType value);
      // static field const value: static public LightmapLightWithIds/MixType Sum
      static constexpr const int Sum = 1;
      // Get static field: static public LightmapLightWithIds/MixType Sum
      static ::GlobalNamespace::LightmapLightWithIds::MixType _get_Sum();
      // Set static field: static public LightmapLightWithIds/MixType Sum
      static void _set_Sum(::GlobalNamespace::LightmapLightWithIds::MixType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LightmapLightWithIds/MixType
    #pragma pack(pop)
    static check_size<sizeof(LightmapLightWithIds::MixType), 0 + sizeof(int)> __GlobalNamespace_LightmapLightWithIds_MixTypeSizeCheck;
    static_assert(sizeof(LightmapLightWithIds::MixType) == 0x4);
    public:
    // private LightConstants/BakeId _bakeId
    // Size: 0x4
    // Offset: 0x2C
    ::GlobalNamespace::LightConstants::BakeId bakeId;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightConstants::BakeId) == 0x4);
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x30
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _probeIntensity
    // Size: 0x4
    // Offset: 0x34
    float probeIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private LightmapLightWithIds/LightIntensitiesWithId[] _lightIntensityData
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId*> lightIntensityData;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId*>) == 0x8);
    // private LightmapLightWithIds/MixType _mixType
    // Size: 0x4
    // Offset: 0x40
    ::GlobalNamespace::LightmapLightWithIds::MixType mixType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightmapLightWithIds::MixType) == 0x4);
    // private System.Single _normalizerWeight
    // Size: 0x4
    // Offset: 0x44
    float normalizerWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private BakedLightsNormalizer _bakedLightsNormalizer
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::BakedLightsNormalizer* bakedLightsNormalizer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BakedLightsNormalizer*) == 0x8);
    // private System.Int32 _lightmapLightIdColorPropertyId
    // Size: 0x4
    // Offset: 0x50
    int lightmapLightIdColorPropertyId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _lightProbeLightIdColorPropertyId
    // Size: 0x4
    // Offset: 0x54
    int lightProbeLightIdColorPropertyId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _initializedPropertyIds
    // Size: 0x1
    // Offset: 0x58
    bool initializedPropertyIds;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _initializedNormalizer
    // Size: 0x1
    // Offset: 0x59
    bool initializedNormalizer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isNormalizerInScene
    // Size: 0x1
    // Offset: 0x5A
    bool isNormalizerInScene;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isNormalizerInScene and: calculatedColorPreNormalization
    char __padding11[0x1] = {};
    // private UnityEngine.Color _calculatedColorPreNormalization
    // Size: 0x10
    // Offset: 0x5C
    ::UnityEngine::Color calculatedColorPreNormalization;
    // Field size check
    static_assert(sizeof(::UnityEngine::Color) == 0x10);
    public:
    // Get instance field reference: private LightConstants/BakeId _bakeId
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightConstants::BakeId& dyn__bakeId();
    // Get instance field reference: private System.Single _intensity
    [[deprecated("Use field access instead!")]] float& dyn__intensity();
    // Get instance field reference: private System.Single _probeIntensity
    [[deprecated("Use field access instead!")]] float& dyn__probeIntensity();
    // Get instance field reference: private LightmapLightWithIds/LightIntensitiesWithId[] _lightIntensityData
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightWithIds::LightIntensitiesWithId*>& dyn__lightIntensityData();
    // Get instance field reference: private LightmapLightWithIds/MixType _mixType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightWithIds::MixType& dyn__mixType();
    // Get instance field reference: private System.Single _normalizerWeight
    [[deprecated("Use field access instead!")]] float& dyn__normalizerWeight();
    // Get instance field reference: private BakedLightsNormalizer _bakedLightsNormalizer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BakedLightsNormalizer*& dyn__bakedLightsNormalizer();
    // Get instance field reference: private System.Int32 _lightmapLightIdColorPropertyId
    [[deprecated("Use field access instead!")]] int& dyn__lightmapLightIdColorPropertyId();
    // Get instance field reference: private System.Int32 _lightProbeLightIdColorPropertyId
    [[deprecated("Use field access instead!")]] int& dyn__lightProbeLightIdColorPropertyId();
    // Get instance field reference: private System.Boolean _initializedPropertyIds
    [[deprecated("Use field access instead!")]] bool& dyn__initializedPropertyIds();
    // Get instance field reference: private System.Boolean _initializedNormalizer
    [[deprecated("Use field access instead!")]] bool& dyn__initializedNormalizer();
    // Get instance field reference: private System.Boolean _isNormalizerInScene
    [[deprecated("Use field access instead!")]] bool& dyn__isNormalizerInScene();
    // Get instance field reference: private UnityEngine.Color _calculatedColorPreNormalization
    [[deprecated("Use field access instead!")]] ::UnityEngine::Color& dyn__calculatedColorPreNormalization();
    // public System.Single get_intensity()
    // Offset: 0x1CBE8FC
    float get_intensity();
    // public System.Void set_intensity(System.Single value)
    // Offset: 0x1CBE904
    void set_intensity(float value);
    // public System.Single get_normalizerWeight()
    // Offset: 0x1CBE90C
    float get_normalizerWeight();
    // public System.Void set_normalizerWeight(System.Single value)
    // Offset: 0x1CBE914
    void set_normalizerWeight(float value);
    // public UnityEngine.Color get_calculatedColorPreNormalization()
    // Offset: 0x1CBE91C
    ::UnityEngine::Color get_calculatedColorPreNormalization();
    // public LightConstants/BakeId get_bakeId()
    // Offset: 0x1CBE928
    ::GlobalNamespace::LightConstants::BakeId get_bakeId();
    // private System.Void SetDataToShaders(UnityEngine.Color lightmapColor, UnityEngine.Color probeColor)
    // Offset: 0x1CBEB44
    void SetDataToShaders(::UnityEngine::Color lightmapColor, ::UnityEngine::Color probeColor);
    // private System.Void SetShaderProperties()
    // Offset: 0x1CBEA74
    void SetShaderProperties();
    // private System.Void GetBakedLightsNormalizer()
    // Offset: 0x1CBE9E4
    void GetBakedLightsNormalizer();
    // public System.Void .ctor()
    // Offset: 0x1CBEFB4
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightmapLightWithIds* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIds::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightmapLightWithIds*, creationType>()));
    }
    // protected override System.Void Awake()
    // Offset: 0x1CBE930
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::Awake()
    void Awake();
    // protected override System.Void ProcessNewColorData()
    // Offset: 0x1CBEBA4
    // Implemented from: LightWithIds
    // Base method: System.Void LightWithIds::ProcessNewColorData()
    void ProcessNewColorData();
    // protected override System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> GetLightWithIds()
    // Offset: 0x1CBEFAC
    // Implemented from: LightWithIds
    // Base method: System.Collections.Generic.IEnumerable`1<LightWithIds/LightWithId> LightWithIds::GetLightWithIds()
    ::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* GetLightWithIds();
  }; // LightmapLightWithIds
  #pragma pack(pop)
  static check_size<sizeof(LightmapLightWithIds), 92 + sizeof(::UnityEngine::Color)> __GlobalNamespace_LightmapLightWithIdsSizeCheck;
  static_assert(sizeof(LightmapLightWithIds) == 0x6C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightmapLightWithIds::MixType, "", "LightmapLightWithIds/MixType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::get_intensity
// Il2CppName: get_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::get_intensity)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "get_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::set_intensity
// Il2CppName: set_intensity
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)(float)>(&GlobalNamespace::LightmapLightWithIds::set_intensity)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "set_intensity", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::get_normalizerWeight
// Il2CppName: get_normalizerWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::get_normalizerWeight)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "get_normalizerWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::set_normalizerWeight
// Il2CppName: set_normalizerWeight
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)(float)>(&GlobalNamespace::LightmapLightWithIds::set_normalizerWeight)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "set_normalizerWeight", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::get_calculatedColorPreNormalization
// Il2CppName: get_calculatedColorPreNormalization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::get_calculatedColorPreNormalization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "get_calculatedColorPreNormalization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::get_bakeId
// Il2CppName: get_bakeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LightConstants::BakeId (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::get_bakeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "get_bakeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::SetDataToShaders
// Il2CppName: SetDataToShaders
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)(::UnityEngine::Color, ::UnityEngine::Color)>(&GlobalNamespace::LightmapLightWithIds::SetDataToShaders)> {
  static const MethodInfo* get() {
    static auto* lightmapColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    static auto* probeColor = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "SetDataToShaders", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lightmapColor, probeColor});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::SetShaderProperties
// Il2CppName: SetShaderProperties
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::SetShaderProperties)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "SetShaderProperties", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::GetBakedLightsNormalizer
// Il2CppName: GetBakedLightsNormalizer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::GetBakedLightsNormalizer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "GetBakedLightsNormalizer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::ProcessNewColorData
// Il2CppName: ProcessNewColorData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::ProcessNewColorData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "ProcessNewColorData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIds::GetLightWithIds
// Il2CppName: GetLightWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::GlobalNamespace::LightWithIds::LightWithId*>* (GlobalNamespace::LightmapLightWithIds::*)()>(&GlobalNamespace::LightmapLightWithIds::GetLightWithIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIds*), "GetLightWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
