// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightmapLightWithIds
  class LightmapLightWithIds;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightmapLightWithIdsGroupEntry
  class LightmapLightWithIdsGroupEntry;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightmapLightWithIdsGroupEntry);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightmapLightWithIdsGroupEntry*, "", "LightmapLightWithIdsGroupEntry");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: LightmapLightWithIdsGroupEntry
  // [TokenAttribute] Offset: FFFFFFFF
  class LightmapLightWithIdsGroupEntry : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting
    struct GroupLightsWeighting;
    // Nested type: ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData
    class GroupLightData;
    // Nested type: ::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId
    class LightIntensitiesWithId;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LightmapLightWithIdsGroupEntry/GroupLightsWeighting
    // [TokenAttribute] Offset: FFFFFFFF
    struct GroupLightsWeighting/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: GroupLightsWeighting
      constexpr GroupLightsWeighting(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting Maximum
      static constexpr const int Maximum = 0;
      // Get static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting Maximum
      static ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting _get_Maximum();
      // Set static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting Maximum
      static void _set_Maximum(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting value);
      // static field const value: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
      static constexpr const int LinearFraction = 1;
      // Get static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
      static ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting _get_LinearFraction();
      // Set static field: static public LightmapLightWithIdsGroupEntry/GroupLightsWeighting LinearFraction
      static void _set_LinearFraction(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LightmapLightWithIdsGroupEntry/GroupLightsWeighting
    #pragma pack(pop)
    static check_size<sizeof(LightmapLightWithIdsGroupEntry::GroupLightsWeighting), 0 + sizeof(int)> __GlobalNamespace_LightmapLightWithIdsGroupEntry_GroupLightsWeightingSizeCheck;
    static_assert(sizeof(LightmapLightWithIdsGroupEntry::GroupLightsWeighting) == 0x4);
    public:
    // private LightmapLightWithIds _lightmapLightWithIds
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::LightmapLightWithIds* lightmapLightWithIds;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightmapLightWithIds*) == 0x8);
    // [SpaceAttribute] Offset: 0x1107EB8
    // private LightmapLightWithIdsGroupEntry/GroupLightData[] _groupLightData
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData*> groupLightData;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData*>) == 0x8);
    // private LightmapLightWithIdsGroupEntry/LightIntensitiesWithId[] _individualLightData
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId*> individualLightData;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId*>) == 0x8);
    // private System.Int32[] _excludedLightIds
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<int> excludedLightIds;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // [SpaceAttribute] Offset: 0x1107F10
    // private LightmapLightWithIdsGroupEntry/GroupLightsWeighting _groupLightsWeighting
    // Size: 0x4
    // Offset: 0x38
    ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting groupLightsWeighting;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private LightmapLightWithIds _lightmapLightWithIds
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightWithIds*& dyn__lightmapLightWithIds();
    // Get instance field reference: private LightmapLightWithIdsGroupEntry/GroupLightData[] _groupLightData
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightData*>& dyn__groupLightData();
    // Get instance field reference: private LightmapLightWithIdsGroupEntry/LightIntensitiesWithId[] _individualLightData
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightmapLightWithIdsGroupEntry::LightIntensitiesWithId*>& dyn__individualLightData();
    // Get instance field reference: private System.Int32[] _excludedLightIds
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn__excludedLightIds();
    // Get instance field reference: private LightmapLightWithIdsGroupEntry/GroupLightsWeighting _groupLightsWeighting
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting& dyn__groupLightsWeighting();
    // public LightmapLightWithIds get_lightmapLightWithIds()
    // Offset: 0x1CBF024
    ::GlobalNamespace::LightmapLightWithIds* get_lightmapLightWithIds();
    // public System.Void .ctor()
    // Offset: 0x1CBF02C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightmapLightWithIdsGroupEntry* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightmapLightWithIdsGroupEntry::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightmapLightWithIdsGroupEntry*, creationType>()));
    }
  }; // LightmapLightWithIdsGroupEntry
  #pragma pack(pop)
  static check_size<sizeof(LightmapLightWithIdsGroupEntry), 56 + sizeof(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting)> __GlobalNamespace_LightmapLightWithIdsGroupEntrySizeCheck;
  static_assert(sizeof(LightmapLightWithIdsGroupEntry) == 0x3C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightmapLightWithIdsGroupEntry::GroupLightsWeighting, "", "LightmapLightWithIdsGroupEntry/GroupLightsWeighting");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIdsGroupEntry::get_lightmapLightWithIds
// Il2CppName: get_lightmapLightWithIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LightmapLightWithIds* (GlobalNamespace::LightmapLightWithIdsGroupEntry::*)()>(&GlobalNamespace::LightmapLightWithIdsGroupEntry::get_lightmapLightWithIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightmapLightWithIdsGroupEntry*), "get_lightmapLightWithIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightmapLightWithIdsGroupEntry::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
