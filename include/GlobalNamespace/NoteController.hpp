// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: NoteControllerBase
#include "GlobalNamespace/NoteControllerBase.hpp"
// Including type: IBeatmapObjectController
#include "GlobalNamespace/IBeatmapObjectController.hpp"
// Including type: INoteMirrorable
#include "GlobalNamespace/INoteMirrorable.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteMovement
  class NoteMovement;
  // Forward declaring type: LazyCopyHashSet`1<T>
  template<typename T>
  class LazyCopyHashSet_1;
  // Forward declaring type: INoteControllerDidInitEvent
  class INoteControllerDidInitEvent;
  // Forward declaring type: INoteControllerNoteDidStartJumpEvent
  class INoteControllerNoteDidStartJumpEvent;
  // Forward declaring type: INoteControllerNoteDidFinishJumpEvent
  class INoteControllerNoteDidFinishJumpEvent;
  // Forward declaring type: INoteControllerNoteDidPassJumpThreeQuartersEvent
  class INoteControllerNoteDidPassJumpThreeQuartersEvent;
  // Forward declaring type: INoteControllerNoteWasCutEvent
  class INoteControllerNoteWasCutEvent;
  // Forward declaring type: INoteControllerNoteWasMissedEvent
  class INoteControllerNoteWasMissedEvent;
  // Forward declaring type: INoteControllerNoteDidStartDissolvingEvent
  class INoteControllerNoteDidStartDissolvingEvent;
  // Forward declaring type: INoteControllerNoteDidDissolveEvent
  class INoteControllerNoteDidDissolveEvent;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: ILazyCopyHashSet`1<T>
  template<typename T>
  class ILazyCopyHashSet_1;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NoteController
  class NoteController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NoteController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NoteController*, "", "NoteController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: NoteController
  // [TokenAttribute] Offset: FFFFFFFF
  class NoteController : public ::GlobalNamespace::NoteControllerBase/*, public ::GlobalNamespace::IBeatmapObjectController, public ::GlobalNamespace::INoteMirrorable*/ {
    public:
    // Nested type: ::GlobalNamespace::NoteController::$DissolveCoroutine$d__73
    class $DissolveCoroutine$d__73;
    public:
    // protected NoteMovement _noteMovement
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::NoteMovement* noteMovement;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteMovement*) == 0x8);
    // protected UnityEngine.Transform _noteTransform
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Transform* noteTransform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Boolean <hidden>k__BackingField
    // Size: 0x1
    // Offset: 0x28
    bool hidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hidden and: didInitEvent
    char __padding2[0x7] = {};
    // private readonly LazyCopyHashSet`1<INoteControllerDidInitEvent> _didInitEvent
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>* didInitEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartJumpEvent> _noteDidStartJumpEvent
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* noteDidStartJumpEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidFinishJumpEvent> _noteDidFinishJumpEvent
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* noteDidFinishJumpEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> _noteDidPassJumpThreeQuartersEvent
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* noteDidPassJumpThreeQuartersEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteWasCutEvent> _noteWasCutEvent
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteWasMissedEvent> _noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> _noteDidStartDissolvingEvent
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* noteDidStartDissolvingEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*) == 0x8);
    // private readonly LazyCopyHashSet`1<INoteControllerNoteDidDissolveEvent> _noteDidDissolveEvent
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* noteDidDissolveEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>*) == 0x8);
    // private NoteData _noteData
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::NoteData* noteData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteData*) == 0x8);
    // private System.Boolean _dissolving
    // Size: 0x1
    // Offset: 0x78
    bool dissolving;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: dissolving and: uniformScale
    char __padding12[0x3] = {};
    // private System.Single _uniformScale
    // Size: 0x4
    // Offset: 0x7C
    float uniformScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapObjectController
    operator ::GlobalNamespace::IBeatmapObjectController() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectController*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapObjectController
    inline ::GlobalNamespace::IBeatmapObjectController* i_IBeatmapObjectController() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapObjectController*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INoteMirrorable
    operator ::GlobalNamespace::INoteMirrorable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INoteMirrorable*>(this);
    }
    // Creating interface conversion operator: i_INoteMirrorable
    inline ::GlobalNamespace::INoteMirrorable* i_INoteMirrorable() noexcept {
      return reinterpret_cast<::GlobalNamespace::INoteMirrorable*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected NoteMovement _noteMovement
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteMovement*& dyn__noteMovement();
    // Get instance field reference: protected UnityEngine.Transform _noteTransform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__noteTransform();
    // Get instance field reference: private System.Boolean <hidden>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$hidden$k__BackingField();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerDidInitEvent> _didInitEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>*& dyn__didInitEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartJumpEvent> _noteDidStartJumpEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>*& dyn__noteDidStartJumpEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteDidFinishJumpEvent> _noteDidFinishJumpEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>*& dyn__noteDidFinishJumpEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> _noteDidPassJumpThreeQuartersEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>*& dyn__noteDidPassJumpThreeQuartersEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteWasCutEvent> _noteWasCutEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>*& dyn__noteWasCutEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteWasMissedEvent> _noteWasMissedEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>*& dyn__noteWasMissedEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> _noteDidStartDissolvingEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>*& dyn__noteDidStartDissolvingEvent();
    // Get instance field reference: private readonly LazyCopyHashSet`1<INoteControllerNoteDidDissolveEvent> _noteDidDissolveEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>*& dyn__noteDidDissolveEvent();
    // Get instance field reference: private NoteData _noteData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteData*& dyn__noteData();
    // Get instance field reference: private System.Boolean _dissolving
    [[deprecated("Use field access instead!")]] bool& dyn__dissolving();
    // Get instance field reference: private System.Single _uniformScale
    [[deprecated("Use field access instead!")]] float& dyn__uniformScale();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidStartJumpEvent> get_noteDidStartJumpEvent()
    // Offset: 0x150B50C
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* get_noteDidStartJumpEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidFinishJumpEvent> get_noteDidFinishJumpEvent()
    // Offset: 0x150B514
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* get_noteDidFinishJumpEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteWasCutEvent> get_noteWasCutEvent()
    // Offset: 0x150B524
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>* get_noteWasCutEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteWasMissedEvent> get_noteWasMissedEvent()
    // Offset: 0x150B52C
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>* get_noteWasMissedEvent();
    // public ILazyCopyHashSet`1<INoteControllerNoteDidDissolveEvent> get_noteDidDissolveEvent()
    // Offset: 0x150B53C
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* get_noteDidDissolveEvent();
    // public UnityEngine.Transform get_noteTransform()
    // Offset: 0x150B544
    ::UnityEngine::Transform* get_noteTransform();
    // public UnityEngine.Quaternion get_worldRotation()
    // Offset: 0x150B54C
    ::UnityEngine::Quaternion get_worldRotation();
    // public UnityEngine.Quaternion get_inverseWorldRotation()
    // Offset: 0x150B568
    ::UnityEngine::Quaternion get_inverseWorldRotation();
    // public System.Single get_moveStartTime()
    // Offset: 0x150B584
    float get_moveStartTime();
    // public System.Single get_moveDuration()
    // Offset: 0x150B5A0
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0x150B5BC
    float get_jumpDuration();
    // public UnityEngine.Vector3 get_jumpMoveVec()
    // Offset: 0x150B5D8
    ::UnityEngine::Vector3 get_jumpMoveVec();
    // public UnityEngine.Vector3 get_beatPos()
    // Offset: 0x150B5F4
    ::UnityEngine::Vector3 get_beatPos();
    // public UnityEngine.Vector3 get_jumpStartPos()
    // Offset: 0x150B610
    ::UnityEngine::Vector3 get_jumpStartPos();
    // public UnityEngine.Vector3 get_moveVec()
    // Offset: 0x150B634
    ::UnityEngine::Vector3 get_moveVec();
    // public System.Single get_uniformScale()
    // Offset: 0x150B714
    float get_uniformScale();
    // public System.Boolean get_hidden()
    // Offset: 0x150B71C
    bool get_hidden();
    // private System.Void set_hidden(System.Boolean value)
    // Offset: 0x150B724
    void set_hidden(bool value);
    // protected System.Void Awake()
    // Offset: 0x150B730
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x150B880
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x150BA18
    void Update();
    // public System.Void ManualUpdate()
    // Offset: 0x150BA28
    void ManualUpdate();
    // private System.Void HandleNoteDidStartJump()
    // Offset: 0x150BA44
    void HandleNoteDidStartJump();
    // private System.Void HandleNoteDidFinishJump()
    // Offset: 0x150BBD0
    void HandleNoteDidFinishJump();
    // private System.Void HandleNoteDidPassJumpThreeQuarters(NoteMovement noteMovement)
    // Offset: 0x150BD64
    void HandleNoteDidPassJumpThreeQuarters(::GlobalNamespace::NoteMovement* noteMovement);
    // private System.Void HandleNoteDidPassMissedMarkerEvent()
    // Offset: 0x150BF00
    void HandleNoteDidPassMissedMarkerEvent();
    // protected System.Void NoteDidStartJump()
    // Offset: 0x150BF1C
    void NoteDidStartJump();
    // protected System.Void NoteDidFinishJump()
    // Offset: 0x150BF20
    void NoteDidFinishJump();
    // protected System.Void NoteDidPassJumpThreeQuarters(NoteMovement noteMovement)
    // Offset: 0x150BF24
    void NoteDidPassJumpThreeQuarters(::GlobalNamespace::NoteMovement* noteMovement);
    // protected System.Void NoteDidPassMissedMarker()
    // Offset: 0x150BF28
    void NoteDidPassMissedMarker();
    // protected System.Void NoteDidStartDissolving()
    // Offset: 0x150BF2C
    void NoteDidStartDissolving();
    // protected System.Void SendNoteWasMissedEvent()
    // Offset: 0x150BF30
    void SendNoteWasMissedEvent();
    // protected System.Void SendNoteWasCutEvent(in NoteCutInfo noteCutInfo)
    // Offset: 0x150C0A8
    void SendNoteWasCutEvent(ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo);
    // protected System.Void Init(NoteData noteData, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, System.Single endRotation, System.Single uniformScale, System.Boolean rotateTowardsPlayer, System.Boolean useRandomRotation)
    // Offset: 0x150C230
    void Init(::GlobalNamespace::NoteData* noteData, float worldRotation, ::UnityEngine::Vector3 moveStartPos, ::UnityEngine::Vector3 moveEndPos, ::UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, float endRotation, float uniformScale, bool rotateTowardsPlayer, bool useRandomRotation);
    // private System.Collections.IEnumerator DissolveCoroutine(System.Single duration)
    // Offset: 0x150C538
    ::System::Collections::IEnumerator* DissolveCoroutine(float duration);
    // public System.Void Dissolve(System.Single duration)
    // Offset: 0x150C5E4
    void Dissolve(float duration);
    // protected System.Void HiddenStateDidChange(System.Boolean hidden)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void HiddenStateDidChange(bool hidden);
    // public System.Void Hide(System.Boolean hide)
    // Offset: 0x150C648
    void Hide(bool hide);
    // public System.Void Pause(System.Boolean pause)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void Pause(bool pause);
    // public override ILazyCopyHashSet`1<INoteControllerDidInitEvent> get_didInitEvent()
    // Offset: 0x150B504
    // Implemented from: NoteControllerBase
    // Base method: ILazyCopyHashSet`1<INoteControllerDidInitEvent> NoteControllerBase::get_didInitEvent()
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>* get_didInitEvent();
    // public override ILazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> get_noteDidPassJumpThreeQuartersEvent()
    // Offset: 0x150B51C
    // Implemented from: NoteControllerBase
    // Base method: ILazyCopyHashSet`1<INoteControllerNoteDidPassJumpThreeQuartersEvent> NoteControllerBase::get_noteDidPassJumpThreeQuartersEvent()
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* get_noteDidPassJumpThreeQuartersEvent();
    // public override ILazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> get_noteDidStartDissolvingEvent()
    // Offset: 0x150B534
    // Implemented from: NoteControllerBase
    // Base method: ILazyCopyHashSet`1<INoteControllerNoteDidStartDissolvingEvent> NoteControllerBase::get_noteDidStartDissolvingEvent()
    ::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* get_noteDidStartDissolvingEvent();
    // public override NoteData get_noteData()
    // Offset: 0x150B62C
    // Implemented from: NoteControllerBase
    // Base method: NoteData NoteControllerBase::get_noteData()
    ::GlobalNamespace::NoteData* get_noteData();
    // protected System.Void .ctor()
    // Offset: 0x150C660
    // Implemented from: NoteControllerBase
    // Base method: System.Void NoteControllerBase::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NoteController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteController*, creationType>()));
    }
  }; // NoteController
  #pragma pack(pop)
  static check_size<sizeof(NoteController), 124 + sizeof(float)> __GlobalNamespace_NoteControllerSizeCheck;
  static_assert(sizeof(NoteController) == 0x80);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteDidStartJumpEvent
// Il2CppName: get_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteDidFinishJumpEvent
// Il2CppName: get_noteDidFinishJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteDidFinishJumpEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteDidFinishJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteWasCutEvent
// Il2CppName: get_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasCutEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteWasCutEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteWasMissedEvent
// Il2CppName: get_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteDidDissolveEvent
// Il2CppName: get_noteDidDissolveEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteDidDissolveEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteDidDissolveEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteTransform
// Il2CppName: get_noteTransform
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Transform* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteTransform)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteTransform", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_worldRotation
// Il2CppName: get_worldRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_worldRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_worldRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_inverseWorldRotation
// Il2CppName: get_inverseWorldRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_inverseWorldRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_inverseWorldRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_moveStartTime
// Il2CppName: get_moveStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_moveStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_moveStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_moveDuration
// Il2CppName: get_moveDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_moveDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_moveDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_jumpDuration
// Il2CppName: get_jumpDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_jumpDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_jumpDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_jumpMoveVec
// Il2CppName: get_jumpMoveVec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_jumpMoveVec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_jumpMoveVec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_beatPos
// Il2CppName: get_beatPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_beatPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_beatPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_jumpStartPos
// Il2CppName: get_jumpStartPos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_jumpStartPos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_jumpStartPos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_moveVec
// Il2CppName: get_moveVec
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_moveVec)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_moveVec", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_uniformScale
// Il2CppName: get_uniformScale
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_uniformScale)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_uniformScale", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_hidden
// Il2CppName: get_hidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_hidden)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_hidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::set_hidden
// Il2CppName: set_hidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(bool)>(&GlobalNamespace::NoteController::set_hidden)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "set_hidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::ManualUpdate
// Il2CppName: ManualUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::ManualUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "ManualUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::HandleNoteDidStartJump
// Il2CppName: HandleNoteDidStartJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::HandleNoteDidStartJump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "HandleNoteDidStartJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::HandleNoteDidFinishJump
// Il2CppName: HandleNoteDidFinishJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::HandleNoteDidFinishJump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "HandleNoteDidFinishJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::HandleNoteDidPassJumpThreeQuarters
// Il2CppName: HandleNoteDidPassJumpThreeQuarters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(::GlobalNamespace::NoteMovement*)>(&GlobalNamespace::NoteController::HandleNoteDidPassJumpThreeQuarters)> {
  static const MethodInfo* get() {
    static auto* noteMovement = &::il2cpp_utils::GetClassFromName("", "NoteMovement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "HandleNoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteMovement});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::HandleNoteDidPassMissedMarkerEvent
// Il2CppName: HandleNoteDidPassMissedMarkerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::HandleNoteDidPassMissedMarkerEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "HandleNoteDidPassMissedMarkerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::NoteDidStartJump
// Il2CppName: NoteDidStartJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::NoteDidStartJump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "NoteDidStartJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::NoteDidFinishJump
// Il2CppName: NoteDidFinishJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::NoteDidFinishJump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "NoteDidFinishJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::NoteDidPassJumpThreeQuarters
// Il2CppName: NoteDidPassJumpThreeQuarters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(::GlobalNamespace::NoteMovement*)>(&GlobalNamespace::NoteController::NoteDidPassJumpThreeQuarters)> {
  static const MethodInfo* get() {
    static auto* noteMovement = &::il2cpp_utils::GetClassFromName("", "NoteMovement")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "NoteDidPassJumpThreeQuarters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteMovement});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::NoteDidPassMissedMarker
// Il2CppName: NoteDidPassMissedMarker
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::NoteDidPassMissedMarker)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "NoteDidPassMissedMarker", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::NoteDidStartDissolving
// Il2CppName: NoteDidStartDissolving
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::NoteDidStartDissolving)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "NoteDidStartDissolving", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::SendNoteWasMissedEvent
// Il2CppName: SendNoteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::SendNoteWasMissedEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "SendNoteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::SendNoteWasCutEvent
// Il2CppName: SendNoteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(ByRef<::GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::NoteController::SendNoteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "SendNoteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(::GlobalNamespace::NoteData*, float, ::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::Vector3, float, float, float, float, float, bool, bool)>(&GlobalNamespace::NoteController::Init)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* worldRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* moveStartPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* moveEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* jumpEndPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* moveDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* jumpGravity = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* endRotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* uniformScale = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* rotateTowardsPlayer = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* useRandomRotation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, worldRotation, moveStartPos, moveEndPos, jumpEndPos, moveDuration, jumpDuration, jumpGravity, endRotation, uniformScale, rotateTowardsPlayer, useRandomRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::DissolveCoroutine
// Il2CppName: DissolveCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::NoteController::*)(float)>(&GlobalNamespace::NoteController::DissolveCoroutine)> {
  static const MethodInfo* get() {
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "DissolveCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::Dissolve
// Il2CppName: Dissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(float)>(&GlobalNamespace::NoteController::Dissolve)> {
  static const MethodInfo* get() {
    static auto* duration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "Dissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{duration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::HiddenStateDidChange
// Il2CppName: HiddenStateDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(bool)>(&GlobalNamespace::NoteController::HiddenStateDidChange)> {
  static const MethodInfo* get() {
    static auto* hidden = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "HiddenStateDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hidden});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::Hide
// Il2CppName: Hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(bool)>(&GlobalNamespace::NoteController::Hide)> {
  static const MethodInfo* get() {
    static auto* hide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "Hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::NoteController::*)(bool)>(&GlobalNamespace::NoteController::Pause)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_didInitEvent
// Il2CppName: get_didInitEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerDidInitEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_didInitEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_didInitEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteDidPassJumpThreeQuartersEvent
// Il2CppName: get_noteDidPassJumpThreeQuartersEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidPassJumpThreeQuartersEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteDidPassJumpThreeQuartersEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteDidPassJumpThreeQuartersEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteDidStartDissolvingEvent
// Il2CppName: get_noteDidStartDissolvingEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ILazyCopyHashSet_1<::GlobalNamespace::INoteControllerNoteDidStartDissolvingEvent*>* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteDidStartDissolvingEvent)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteDidStartDissolvingEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::get_noteData
// Il2CppName: get_noteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::NoteData* (GlobalNamespace::NoteController::*)()>(&GlobalNamespace::NoteController::get_noteData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NoteController*), "get_noteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NoteController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
