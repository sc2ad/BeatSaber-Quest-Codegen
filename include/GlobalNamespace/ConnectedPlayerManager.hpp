// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: RollingAverage
  class RollingAverage;
  // Forward declaring type: IConnectionManager
  class IConnectionManager;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
  // Forward declaring type: INetworkPacketSubSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSubSerializer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x138
  #pragma pack(push, 1)
  // Autogenerated type: ConnectedPlayerManager
  // [TokenAttribute] Offset: FFFFFFFF
  class ConnectedPlayerManager : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer
    class ConnectedPlayer;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::InternalMessageType
    struct InternalMessageType;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::MessageType
    struct MessageType;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket
    class PlayerConnectedPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket
    class PlayerIdentityPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket
    class PlayerAvatarPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket
    class PlayerStatePacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket
    class PlayerSortOrderPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket
    class PlayerDisconnectedPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket
    class KickPlayerPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::SyncTimePacket
    class SyncTimePacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket
    class PlayerLatencyPacket;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: ConnectedPlayerManager/InternalMessageType
    // [TokenAttribute] Offset: FFFFFFFF
    struct InternalMessageType/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: InternalMessageType
      constexpr InternalMessageType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static constexpr const uint8_t SyncTime = 0u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_SyncTime();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static void _set_SyncTime(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static constexpr const uint8_t PlayerConnected = 1u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerConnected();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static void _set_PlayerConnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
      static constexpr const uint8_t PlayerIdentity = 2u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerIdentity();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerIdentity
      static void _set_PlayerIdentity(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static constexpr const uint8_t PlayerLatencyUpdate = 3u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerLatencyUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static void _set_PlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static constexpr const uint8_t PlayerDisconnected = 4u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerDisconnected();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static void _set_PlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static constexpr const uint8_t PlayerSortOrderUpdate = 5u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerSortOrderUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static void _set_PlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType Party
      static constexpr const uint8_t Party = 6u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType Party
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_Party();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType Party
      static void _set_Party(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static constexpr const uint8_t MultiplayerSession = 7u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_MultiplayerSession();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static void _set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static constexpr const uint8_t KickPlayer = 8u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_KickPlayer();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static void _set_KickPlayer(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static constexpr const uint8_t PlayerStateUpdate = 9u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerStateUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static void _set_PlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
      static constexpr const uint8_t PlayerAvatarUpdate = 10u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerAvatarUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerAvatarUpdate
      static void _set_PlayerAvatarUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // Get instance field reference: public System.Byte value__
      uint8_t& dyn_value__();
    }; // ConnectedPlayerManager/InternalMessageType
    #pragma pack(pop)
    static check_size<sizeof(ConnectedPlayerManager::InternalMessageType), 0 + sizeof(uint8_t)> __GlobalNamespace_ConnectedPlayerManager_InternalMessageTypeSizeCheck;
    static_assert(sizeof(ConnectedPlayerManager::InternalMessageType) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xED9670
    // private System.Action connectedEvent
    // Size: 0x8
    // Offset: 0x10
    System::Action* connectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9680
    // private System.Action reinitializedEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action* reinitializedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9690
    // private System.Action`1<DisconnectedReason> disconnectedEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED96A0
    // private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED96B0
    // private System.Action`1<IConnectedPlayer> playerConnectedEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED96C0
    // private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED96D0
    // private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED96E0
    // private System.Action`1<IConnectedPlayer> playerAvatarChangedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerAvatarChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED96F0
    // private System.Action`1<IConnectedPlayer> playerOrderChangedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerOrderChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xED9700
    // private System.Action syncTimeInitializedEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action* syncTimeInitializedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private readonly System.Int64 _startTicks
    // Size: 0x8
    // Offset: 0x60
    int64_t startTicks;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private readonly RollingAverage _syncTimeOffset
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::RollingAverage* syncTimeOffset;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RollingAverage*) == 0x8);
    // private System.Single _syncTimeDelay
    // Size: 0x4
    // Offset: 0x70
    float syncTimeDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: syncTimeDelay and: connectionManager
    char __padding12[0x4] = {};
    // private readonly IConnectionManager _connectionManager
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::IConnectionManager* connectionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectionManager*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _temporaryDataWriter
    // Size: 0x8
    // Offset: 0x80
    LiteNetLib::Utils::NetDataWriter* temporaryDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _reliableDataWriter
    // Size: 0x8
    // Offset: 0x88
    LiteNetLib::Utils::NetDataWriter* reliableDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _unreliableDataWriter
    // Size: 0x8
    // Offset: 0x90
    LiteNetLib::Utils::NetDataWriter* unreliableDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly System.Collections.Generic.List`1<ConnectedPlayerManager/ConnectedPlayer> _players
    // Size: 0x8
    // Offset: 0x98
    System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* players;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
    // Size: 0x8
    // Offset: 0xA0
    System::Collections::Generic::HashSet_1<::Il2CppString*>* localPlayerState;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<::Il2CppString*>*) == 0x8);
    // private MultiplayerAvatarData _localPlayerAvatar
    // Size: 0x70
    // Offset: 0xA8
    GlobalNamespace::MultiplayerAvatarData localPlayerAvatar;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerAvatarData) == 0x70);
    // private ConnectedPlayerManager/ConnectedPlayer _localPlayer
    // Size: 0x8
    // Offset: 0x118
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* localPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*) == 0x8);
    // private System.Byte _lastConnectionId
    // Size: 0x1
    // Offset: 0x120
    uint8_t lastConnectionId;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: lastConnectionId and: lastSyncTimeUpdate
    char __padding21[0x3] = {};
    // private System.Single _lastSyncTimeUpdate
    // Size: 0x4
    // Offset: 0x124
    float lastSyncTimeUpdate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastPollTime
    // Size: 0x4
    // Offset: 0x128
    float lastPollTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lastPollTime and: messageSerializer
    char __padding23[0x4] = {};
    // private readonly NetworkPacketSerializer`2<ConnectedPlayerManager/InternalMessageType,IConnectedPlayer> _messageSerializer
    // Size: 0x8
    // Offset: 0x130
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* messageSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // Creating value type constructor for type: ConnectedPlayerManager
    ConnectedPlayerManager(System::Action* connectedEvent_ = {}, System::Action* reinitializedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerAvatarChangedEvent_ = {}, System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerOrderChangedEvent_ = {}, System::Action* syncTimeInitializedEvent_ = {}, int64_t startTicks_ = {}, GlobalNamespace::RollingAverage* syncTimeOffset_ = {}, float syncTimeDelay_ = {}, GlobalNamespace::IConnectionManager* connectionManager_ = {}, LiteNetLib::Utils::NetDataWriter* temporaryDataWriter_ = {}, LiteNetLib::Utils::NetDataWriter* reliableDataWriter_ = {}, LiteNetLib::Utils::NetDataWriter* unreliableDataWriter_ = {}, System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* players_ = {}, System::Collections::Generic::HashSet_1<::Il2CppString*>* localPlayerState_ = {}, GlobalNamespace::MultiplayerAvatarData localPlayerAvatar_ = {}, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* localPlayer_ = {}, uint8_t lastConnectionId_ = {}, float lastSyncTimeUpdate_ = {}, float lastPollTime_ = {}, GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* messageSerializer_ = {}) noexcept : connectedEvent{connectedEvent_}, reinitializedEvent{reinitializedEvent_}, disconnectedEvent{disconnectedEvent_}, connectionFailedEvent{connectionFailedEvent_}, playerConnectedEvent{playerConnectedEvent_}, playerDisconnectedEvent{playerDisconnectedEvent_}, playerStateChangedEvent{playerStateChangedEvent_}, playerAvatarChangedEvent{playerAvatarChangedEvent_}, playerOrderChangedEvent{playerOrderChangedEvent_}, syncTimeInitializedEvent{syncTimeInitializedEvent_}, startTicks{startTicks_}, syncTimeOffset{syncTimeOffset_}, syncTimeDelay{syncTimeDelay_}, connectionManager{connectionManager_}, temporaryDataWriter{temporaryDataWriter_}, reliableDataWriter{reliableDataWriter_}, unreliableDataWriter{unreliableDataWriter_}, players{players_}, localPlayerState{localPlayerState_}, localPlayerAvatar{localPlayerAvatar_}, localPlayer{localPlayer_}, lastConnectionId{lastConnectionId_}, lastSyncTimeUpdate{lastSyncTimeUpdate_}, lastPollTime{lastPollTime_}, messageSerializer{messageSerializer_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static public System.Int32 invalidSortIndex
    static constexpr const int invalidSortIndex = -1;
    // Get static field: static public System.Int32 invalidSortIndex
    static int _get_invalidSortIndex();
    // Set static field: static public System.Int32 invalidSortIndex
    static void _set_invalidSortIndex(int value);
    // static field const value: static private System.Byte kAllConnectionsId
    static constexpr const uint8_t kAllConnectionsId = 127u;
    // Get static field: static private System.Byte kAllConnectionsId
    static uint8_t _get_kAllConnectionsId();
    // Set static field: static private System.Byte kAllConnectionsId
    static void _set_kAllConnectionsId(uint8_t value);
    // static field const value: static private System.Byte kLocalConnectionId
    static constexpr const uint8_t kLocalConnectionId = 0u;
    // Get static field: static private System.Byte kLocalConnectionId
    static uint8_t _get_kLocalConnectionId();
    // Set static field: static private System.Byte kLocalConnectionId
    static void _set_kLocalConnectionId(uint8_t value);
    // static field const value: static private System.Single kSyncTimeUpdateFrequency
    static constexpr const float kSyncTimeUpdateFrequency = 5;
    // Get static field: static private System.Single kSyncTimeUpdateFrequency
    static float _get_kSyncTimeUpdateFrequency();
    // Set static field: static private System.Single kSyncTimeUpdateFrequency
    static void _set_kSyncTimeUpdateFrequency(float value);
    // static field const value: static private System.Single kSyncTimeAllowedReceiveWindow
    static constexpr const float kSyncTimeAllowedReceiveWindow = 0.03;
    // Get static field: static private System.Single kSyncTimeAllowedReceiveWindow
    static float _get_kSyncTimeAllowedReceiveWindow();
    // Set static field: static private System.Single kSyncTimeAllowedReceiveWindow
    static void _set_kSyncTimeAllowedReceiveWindow(float value);
    // static field const value: static private System.Int32 kMaxUnreliableMessageLength
    static constexpr const int kMaxUnreliableMessageLength = 412;
    // Get static field: static private System.Int32 kMaxUnreliableMessageLength
    static int _get_kMaxUnreliableMessageLength();
    // Set static field: static private System.Int32 kMaxUnreliableMessageLength
    static void _set_kMaxUnreliableMessageLength(int value);
    // Get instance field reference: private System.Action connectedEvent
    System::Action*& dyn_connectedEvent();
    // Get instance field reference: private System.Action reinitializedEvent
    System::Action*& dyn_reinitializedEvent();
    // Get instance field reference: private System.Action`1<DisconnectedReason> disconnectedEvent
    System::Action_1<GlobalNamespace::DisconnectedReason>*& dyn_disconnectedEvent();
    // Get instance field reference: private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    System::Action_1<GlobalNamespace::ConnectionFailedReason>*& dyn_connectionFailedEvent();
    // Get instance field reference: private System.Action`1<IConnectedPlayer> playerConnectedEvent
    System::Action_1<GlobalNamespace::IConnectedPlayer*>*& dyn_playerConnectedEvent();
    // Get instance field reference: private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    System::Action_1<GlobalNamespace::IConnectedPlayer*>*& dyn_playerDisconnectedEvent();
    // Get instance field reference: private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    System::Action_1<GlobalNamespace::IConnectedPlayer*>*& dyn_playerStateChangedEvent();
    // Get instance field reference: private System.Action`1<IConnectedPlayer> playerAvatarChangedEvent
    System::Action_1<GlobalNamespace::IConnectedPlayer*>*& dyn_playerAvatarChangedEvent();
    // Get instance field reference: private System.Action`1<IConnectedPlayer> playerOrderChangedEvent
    System::Action_1<GlobalNamespace::IConnectedPlayer*>*& dyn_playerOrderChangedEvent();
    // Get instance field reference: private System.Action syncTimeInitializedEvent
    System::Action*& dyn_syncTimeInitializedEvent();
    // Get instance field reference: private readonly System.Int64 _startTicks
    int64_t& dyn__startTicks();
    // Get instance field reference: private readonly RollingAverage _syncTimeOffset
    GlobalNamespace::RollingAverage*& dyn__syncTimeOffset();
    // Get instance field reference: private System.Single _syncTimeDelay
    float& dyn__syncTimeDelay();
    // Get instance field reference: private readonly IConnectionManager _connectionManager
    GlobalNamespace::IConnectionManager*& dyn__connectionManager();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataWriter _temporaryDataWriter
    LiteNetLib::Utils::NetDataWriter*& dyn__temporaryDataWriter();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataWriter _reliableDataWriter
    LiteNetLib::Utils::NetDataWriter*& dyn__reliableDataWriter();
    // Get instance field reference: private readonly LiteNetLib.Utils.NetDataWriter _unreliableDataWriter
    LiteNetLib::Utils::NetDataWriter*& dyn__unreliableDataWriter();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<ConnectedPlayerManager/ConnectedPlayer> _players
    System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>*& dyn__players();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
    System::Collections::Generic::HashSet_1<::Il2CppString*>*& dyn__localPlayerState();
    // Get instance field reference: private MultiplayerAvatarData _localPlayerAvatar
    GlobalNamespace::MultiplayerAvatarData& dyn__localPlayerAvatar();
    // Get instance field reference: private ConnectedPlayerManager/ConnectedPlayer _localPlayer
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*& dyn__localPlayer();
    // Get instance field reference: private System.Byte _lastConnectionId
    uint8_t& dyn__lastConnectionId();
    // Get instance field reference: private System.Single _lastSyncTimeUpdate
    float& dyn__lastSyncTimeUpdate();
    // Get instance field reference: private System.Single _lastPollTime
    float& dyn__lastPollTime();
    // Get instance field reference: private readonly NetworkPacketSerializer`2<ConnectedPlayerManager/InternalMessageType,IConnectedPlayer> _messageSerializer
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>*& dyn__messageSerializer();
    // private System.Byte GetNextConnectionId()
    // Offset: 0x144E29C
    uint8_t GetNextConnectionId();
    // private System.Void RemoveAllPlayers(DisconnectedReason reason)
    // Offset: 0x144E3B8
    void RemoveAllPlayers(GlobalNamespace::DisconnectedReason reason);
    // private System.Void RemovePlayer(ConnectedPlayerManager/ConnectedPlayer player, DisconnectedReason reason)
    // Offset: 0x144E434
    void RemovePlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player, GlobalNamespace::DisconnectedReason reason);
    // private System.Void AddPlayer(ConnectedPlayerManager/ConnectedPlayer player)
    // Offset: 0x144E76C
    void AddPlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(System.Byte connectionId)
    // Offset: 0x144E2E0
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(uint8_t connectionId);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(IConnection connection, System.Byte remoteConnectionId)
    // Offset: 0x144F01C
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(GlobalNamespace::IConnection* connection, uint8_t remoteConnectionId);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(System.String userId)
    // Offset: 0x144F140
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(::Il2CppString* userId);
    // public IConnectedPlayer GetConnectedPlayer(System.Int32 index)
    // Offset: 0x144F220
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayer(int index);
    // public System.Void add_connectedEvent(System.Action value)
    // Offset: 0x144F298
    void add_connectedEvent(System::Action* value);
    // public System.Void remove_connectedEvent(System.Action value)
    // Offset: 0x144F33C
    void remove_connectedEvent(System::Action* value);
    // public System.Void add_reinitializedEvent(System.Action value)
    // Offset: 0x144F3E0
    void add_reinitializedEvent(System::Action* value);
    // public System.Void remove_reinitializedEvent(System.Action value)
    // Offset: 0x144F484
    void remove_reinitializedEvent(System::Action* value);
    // public System.Void add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x144F528
    void add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x144F5CC
    void remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x144F670
    void add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x144F714
    void remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144F7B8
    void add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144F85C
    void remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144F900
    void add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144F9A4
    void remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144FA48
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144FAEC
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerAvatarChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144FB90
    void add_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerAvatarChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144FC34
    void remove_playerAvatarChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerOrderChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144FCD8
    void add_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerOrderChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x144FD7C
    void remove_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_syncTimeInitializedEvent(System.Action value)
    // Offset: 0x144FE20
    void add_syncTimeInitializedEvent(System::Action* value);
    // public System.Void remove_syncTimeInitializedEvent(System.Action value)
    // Offset: 0x144FEC4
    void remove_syncTimeInitializedEvent(System::Action* value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x144E9F4
    bool get_isConnectionOwner();
    // public System.Boolean get_isConnectedOrConnecting()
    // Offset: 0x144FF68
    bool get_isConnectedOrConnecting();
    // public System.Boolean get_isConnected()
    // Offset: 0x144E5F4
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x144FFA0
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x1450054
    bool get_isDisconnecting();
    // public IConnectedPlayer get_localPlayer()
    // Offset: 0x1450108
    GlobalNamespace::IConnectedPlayer* get_localPlayer();
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0x1450110
    int get_connectedPlayerCount();
    // public System.Single get_syncTime()
    // Offset: 0x144EA58
    float get_syncTime();
    // public System.Single get_syncTimeDelay()
    // Offset: 0x1450200
    float get_syncTimeDelay();
    // public System.Void set_syncTimeDelay(System.Single value)
    // Offset: 0x1450208
    void set_syncTimeDelay(float value);
    // public System.Boolean get_syncTimeInitialized()
    // Offset: 0x1450210
    bool get_syncTimeInitialized();
    // private System.Single get_runTime()
    // Offset: 0x1450160
    float get_runTime();
    // static public ConnectedPlayerManager TryCreate(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    static GlobalNamespace::ConnectedPlayerManager* TryCreate(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::TryCreate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager", "TryCreate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initParams)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, initParams);
    }
    // static public ConnectedPlayerManager TryCreate(T connectionManager, IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    static GlobalNamespace::ConnectedPlayerManager* TryCreate(T connectionManager, GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::TryCreate");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("", "ConnectedPlayerManager", "TryCreate", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(connectionManager), ::il2cpp_utils::ExtractType(initParams)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<GlobalNamespace::ConnectedPlayerManager*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, connectionManager, initParams);
    }
    // private System.Void .ctor(IConnectionManager connectionManager)
    // Offset: 0x145024C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectedPlayerManager* New_ctor(GlobalNamespace::IConnectionManager* connectionManager) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectedPlayerManager*, creationType>(connectionManager)));
    }
    // private System.Void ResetLocalState()
    // Offset: 0x1451120
    void ResetLocalState();
    // public System.Boolean TryReinitialize(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool TryReinitialize(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::TryReinitialize");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "TryReinitialize", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(initParams)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<bool, false>(___instance_arg, ___generic__method, initParams);
    }
    // public System.Void PollUpdate()
    // Offset: 0x1451458
    void PollUpdate();
    // public System.Void RegisterSerializer(ConnectedPlayerManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x1451824
    void RegisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void UnregisterSerializer(ConnectedPlayerManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x1451894
    void UnregisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public T GetConnectionManager()
    // Offset: 0xFFFFFFFF
    template<class T>
    T GetConnectionManager() {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::GetConnectionManager");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "GetConnectionManager", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      return ::il2cpp_utils::RunMethodThrow<T, false>(___instance_arg, ___generic__method);
    }
    // public System.Void Dispose()
    // Offset: 0x1451904
    void Dispose();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x144E6A8
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void KickPlayer(System.String userId, DisconnectedReason disconnectedReason)
    // Offset: 0x1451E44
    void KickPlayer(::Il2CppString* userId, GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void SetLocalPlayerState(System.String state, System.Boolean setState)
    // Offset: 0x1451F30
    void SetLocalPlayerState(::Il2CppString* state, bool setState);
    // public System.Void SetLocalPlayerAvatar(MultiplayerAvatarData multiplayerAvatarData)
    // Offset: 0x1452074
    void SetLocalPlayerAvatar(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData);
    // public System.Void SetLocalPlayerSortIndex(System.Int32 sortIndex)
    // Offset: 0x14521B0
    void SetLocalPlayerSortIndex(int sortIndex);
    // public System.Void SetPlayerSortIndex(IConnectedPlayer player, System.Int32 sortIndex)
    // Offset: 0x14521C0
    void SetPlayerSortIndex(GlobalNamespace::IConnectedPlayer* player, int sortIndex);
    // private System.Void HandleConnected()
    // Offset: 0x14522C4
    void HandleConnected();
    // private System.Void HandleDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x14522D8
    void HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0x1452358
    void HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void HandleConnectionConnected(IConnection connection)
    // Offset: 0x1451348
    void HandleConnectionConnected(GlobalNamespace::IConnection* connection);
    // private System.Void OnNetworkLatencyUpdate(IConnection connection, System.Single latency)
    // Offset: 0x14525C0
    void OnNetworkLatencyUpdate(GlobalNamespace::IConnection* connection, float latency);
    // private System.Void HandleConnectionDisconnected(IConnection connection, DisconnectedReason disconnectedReason)
    // Offset: 0x1452800
    void HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void OnNetworkReceive(IConnection connection, LiteNetLib.Utils.NetDataReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1452918
    void OnNetworkReceive(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Send(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::Send");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Send", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, message);
    }
    // public System.Void SendUnreliable(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SendUnreliable(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ConnectedPlayerManager::SendUnreliable");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "SendUnreliable", std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::std::vector<const Il2CppType*>{::il2cpp_utils::ExtractType(message)})));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      auto ___instance_arg = this;
      ::il2cpp_utils::RunMethodThrow<void, false>(___instance_arg, ___generic__method, message);
    }
    // private System.Void SendImmediately(LiteNetLib.Utils.INetSerializable message, System.Boolean onlyFirstDegree)
    // Offset: 0x144EA9C
    void SendImmediately(LiteNetLib::Utils::INetSerializable* message, bool onlyFirstDegree);
    // private System.Void SendImmediatelyExcludingPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer excludingPlayer, System.Boolean onlyFirstDegree)
    // Offset: 0x144EC08
    void SendImmediatelyExcludingPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* excludingPlayer, bool onlyFirstDegree);
    // private System.Void SendImmediatelyToPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer toPlayer)
    // Offset: 0x144ED24
    void SendImmediatelyToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer);
    // private System.Void SendImmediatelyFromPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer fromPlayer, System.Boolean onlyFirstDegree)
    // Offset: 0x14526FC
    void SendImmediatelyFromPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, bool onlyFirstDegree);
    // private System.Void SendImmediatelyFromPlayerToPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer fromPlayer, ConnectedPlayerManager/ConnectedPlayer toPlayer)
    // Offset: 0x144EF24
    void SendImmediatelyFromPlayerToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer);
    // private System.Void FlushReliableQueue()
    // Offset: 0x1451634
    void FlushReliableQueue();
    // private System.Void FlushUnreliableQueue()
    // Offset: 0x145172C
    void FlushUnreliableQueue();
    // private LiteNetLib.Utils.NetDataWriter WriteOne(System.Byte senderId, System.Byte receiverId, LiteNetLib.Utils.INetSerializable message)
    // Offset: 0x1452D2C
    LiteNetLib::Utils::NetDataWriter* WriteOne(uint8_t senderId, uint8_t receiverId, LiteNetLib::Utils::INetSerializable* message);
    // private System.Void Write(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.Utils.INetSerializable packet)
    // Offset: 0x1452DAC
    void Write(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::Utils::INetSerializable* packet);
    // private System.Void HandleServerPlayerConnected(ConnectedPlayerManager/PlayerConnectedPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1452EA8
    void HandleServerPlayerConnected(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerIdentityUpdate(ConnectedPlayerManager/PlayerIdentityPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x14530C4
    void HandlePlayerIdentityUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerStateUpdate(ConnectedPlayerManager/PlayerStatePacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x14531FC
    void HandlePlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerAvatarUpdate(ConnectedPlayerManager/PlayerAvatarPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x14532E0
    void HandlePlayerAvatarUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerLatencyUpdate(ConnectedPlayerManager/PlayerLatencyPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x14533D8
    void HandlePlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleServerPlayerDisconnected(ConnectedPlayerManager/PlayerDisconnectedPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1453528
    void HandleServerPlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleKickPlayerPacket(ConnectedPlayerManager/KickPlayerPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1453634
    void HandleKickPlayerPacket(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerSortOrderUpdate(ConnectedPlayerManager/PlayerSortOrderPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1453780
    void HandlePlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleSyncTimePacket(ConnectedPlayerManager/SyncTimePacket packet, IConnectedPlayer player)
    // Offset: 0x145391C
    void HandleSyncTimePacket(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* packet, GlobalNamespace::IConnectedPlayer* player);
    // private System.Void Log(System.String message)
    // Offset: 0x1453AD4
    void Log(::Il2CppString* message);
  }; // ConnectedPlayerManager
  #pragma pack(pop)
  static check_size<sizeof(ConnectedPlayerManager), 304 + sizeof(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>*)> __GlobalNamespace_ConnectedPlayerManagerSizeCheck;
  static_assert(sizeof(ConnectedPlayerManager) == 0x138);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager*, "", "ConnectedPlayerManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager::InternalMessageType, "", "ConnectedPlayerManager/InternalMessageType");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::GetNextConnectionId
// Il2CppName: GetNextConnectionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint8_t (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::GetNextConnectionId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "GetNextConnectionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::RemoveAllPlayers
// Il2CppName: RemoveAllPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::ConnectedPlayerManager::RemoveAllPlayers)> {
  static const MethodInfo* get() {
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "RemoveAllPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::RemovePlayer
// Il2CppName: RemovePlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::ConnectedPlayerManager::RemovePlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "RemovePlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::AddPlayer
// Il2CppName: AddPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::AddPlayer)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "AddPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (GlobalNamespace::ConnectedPlayerManager::*)(uint8_t)>(&GlobalNamespace::ConnectedPlayerManager::GetPlayer)> {
  static const MethodInfo* get() {
    static auto* connectionId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, uint8_t)>(&GlobalNamespace::ConnectedPlayerManager::GetPlayer)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* remoteConnectionId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, remoteConnectionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::GetPlayer
// Il2CppName: GetPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* (GlobalNamespace::ConnectedPlayerManager::*)(::Il2CppString*)>(&GlobalNamespace::ConnectedPlayerManager::GetPlayer)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "GetPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::GetConnectedPlayer
// Il2CppName: GetConnectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (GlobalNamespace::ConnectedPlayerManager::*)(int)>(&GlobalNamespace::ConnectedPlayerManager::GetConnectedPlayer)> {
  static const MethodInfo* get() {
    static auto* index = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "GetConnectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{index});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_connectedEvent
// Il2CppName: add_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action*)>(&GlobalNamespace::ConnectedPlayerManager::add_connectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_connectedEvent
// Il2CppName: remove_connectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action*)>(&GlobalNamespace::ConnectedPlayerManager::remove_connectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_connectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_reinitializedEvent
// Il2CppName: add_reinitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action*)>(&GlobalNamespace::ConnectedPlayerManager::add_reinitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_reinitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_reinitializedEvent
// Il2CppName: remove_reinitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action*)>(&GlobalNamespace::ConnectedPlayerManager::remove_reinitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_reinitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_disconnectedEvent
// Il2CppName: add_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::ConnectedPlayerManager::add_disconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_disconnectedEvent
// Il2CppName: remove_disconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::DisconnectedReason>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_disconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "DisconnectedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_disconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_connectionFailedEvent
// Il2CppName: add_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::ConnectedPlayerManager::add_connectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_connectionFailedEvent
// Il2CppName: remove_connectionFailedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::ConnectionFailedReason>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_connectionFailedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_connectionFailedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_playerConnectedEvent
// Il2CppName: add_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::add_playerConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_playerConnectedEvent
// Il2CppName: remove_playerConnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_playerConnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_playerConnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_playerDisconnectedEvent
// Il2CppName: add_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::add_playerDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_playerDisconnectedEvent
// Il2CppName: remove_playerDisconnectedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_playerDisconnectedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_playerDisconnectedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_playerStateChangedEvent
// Il2CppName: add_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::add_playerStateChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_playerStateChangedEvent
// Il2CppName: remove_playerStateChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_playerStateChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_playerStateChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_playerAvatarChangedEvent
// Il2CppName: add_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::add_playerAvatarChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_playerAvatarChangedEvent
// Il2CppName: remove_playerAvatarChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_playerAvatarChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_playerAvatarChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_playerOrderChangedEvent
// Il2CppName: add_playerOrderChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::add_playerOrderChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_playerOrderChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_playerOrderChangedEvent
// Il2CppName: remove_playerOrderChangedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::remove_playerOrderChangedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_playerOrderChangedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::add_syncTimeInitializedEvent
// Il2CppName: add_syncTimeInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action*)>(&GlobalNamespace::ConnectedPlayerManager::add_syncTimeInitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "add_syncTimeInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::remove_syncTimeInitializedEvent
// Il2CppName: remove_syncTimeInitializedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(System::Action*)>(&GlobalNamespace::ConnectedPlayerManager::remove_syncTimeInitializedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "remove_syncTimeInitializedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_isConnectionOwner
// Il2CppName: get_isConnectionOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_isConnectionOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_isConnectionOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_isConnectedOrConnecting
// Il2CppName: get_isConnectedOrConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_isConnectedOrConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_isConnectedOrConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_isConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_isConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_isDisconnecting
// Il2CppName: get_isDisconnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_isDisconnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_isDisconnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_localPlayer
// Il2CppName: get_localPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_localPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_localPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_connectedPlayerCount
// Il2CppName: get_connectedPlayerCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_connectedPlayerCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_connectedPlayerCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_syncTime
// Il2CppName: get_syncTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_syncTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_syncTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_syncTimeDelay
// Il2CppName: get_syncTimeDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_syncTimeDelay)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_syncTimeDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::set_syncTimeDelay
// Il2CppName: set_syncTimeDelay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(float)>(&GlobalNamespace::ConnectedPlayerManager::set_syncTimeDelay)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "set_syncTimeDelay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_syncTimeInitialized
// Il2CppName: get_syncTimeInitialized
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_syncTimeInitialized)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_syncTimeInitialized", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::get_runTime
// Il2CppName: get_runTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::get_runTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "get_runTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::TryCreate
// Il2CppName: TryCreate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::TryCreate
// Il2CppName: TryCreate
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::ResetLocalState
// Il2CppName: ResetLocalState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::ResetLocalState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "ResetLocalState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::TryReinitialize
// Il2CppName: TryReinitialize
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::PollUpdate
// Il2CppName: PollUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::PollUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "PollUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::RegisterSerializer
// Il2CppName: RegisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::RegisterSerializer)> {
  static const MethodInfo* get() {
    static auto* serializerType = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/MessageType")->byval_arg;
    static auto* subSerializer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "INetworkPacketSubSerializer`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "RegisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializerType, subSerializer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::UnregisterSerializer
// Il2CppName: UnregisterSerializer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::MessageType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>*)>(&GlobalNamespace::ConnectedPlayerManager::UnregisterSerializer)> {
  static const MethodInfo* get() {
    static auto* serializerType = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/MessageType")->byval_arg;
    static auto* subSerializer = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("", "INetworkPacketSubSerializer`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "UnregisterSerializer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{serializerType, subSerializer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::GetConnectionManager
// Il2CppName: GetConnectionManager
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::Dispose
// Il2CppName: Dispose
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::Dispose)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "Dispose", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::Disconnect
// Il2CppName: Disconnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::ConnectedPlayerManager::Disconnect)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "Disconnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::KickPlayer
// Il2CppName: KickPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(::Il2CppString*, GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::ConnectedPlayerManager::KickPlayer)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "KickPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId, disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerState
// Il2CppName: SetLocalPlayerState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(::Il2CppString*, bool)>(&GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerState)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* setState = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SetLocalPlayerState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state, setState});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerAvatar
// Il2CppName: SetLocalPlayerAvatar
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::MultiplayerAvatarData)>(&GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerAvatar)> {
  static const MethodInfo* get() {
    static auto* multiplayerAvatarData = &::il2cpp_utils::GetClassFromName("", "MultiplayerAvatarData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SetLocalPlayerAvatar", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerAvatarData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerSortIndex
// Il2CppName: SetLocalPlayerSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(int)>(&GlobalNamespace::ConnectedPlayerManager::SetLocalPlayerSortIndex)> {
  static const MethodInfo* get() {
    static auto* sortIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SetLocalPlayerSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sortIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SetPlayerSortIndex
// Il2CppName: SetPlayerSortIndex
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::IConnectedPlayer*, int)>(&GlobalNamespace::ConnectedPlayerManager::SetPlayerSortIndex)> {
  static const MethodInfo* get() {
    static auto* player = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    static auto* sortIndex = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SetPlayerSortIndex", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{player, sortIndex});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleConnected
// Il2CppName: HandleConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::HandleConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleDisconnected
// Il2CppName: HandleDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::ConnectedPlayerManager::HandleDisconnected)> {
  static const MethodInfo* get() {
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleConnectionFailed
// Il2CppName: HandleConnectionFailed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectionFailedReason)>(&GlobalNamespace::ConnectedPlayerManager::HandleConnectionFailed)> {
  static const MethodInfo* get() {
    static auto* reason = &::il2cpp_utils::GetClassFromName("", "ConnectionFailedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleConnectionFailed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleConnectionConnected
// Il2CppName: HandleConnectionConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::IConnection*)>(&GlobalNamespace::ConnectedPlayerManager::HandleConnectionConnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleConnectionConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::OnNetworkLatencyUpdate
// Il2CppName: OnNetworkLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, float)>(&GlobalNamespace::ConnectedPlayerManager::OnNetworkLatencyUpdate)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* latency = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "OnNetworkLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, latency});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleConnectionDisconnected
// Il2CppName: HandleConnectionDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason)>(&GlobalNamespace::ConnectedPlayerManager::HandleConnectionDisconnected)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* disconnectedReason = &::il2cpp_utils::GetClassFromName("", "DisconnectedReason")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleConnectionDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, disconnectedReason});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::OnNetworkReceive
// Il2CppName: OnNetworkReceive
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod)>(&GlobalNamespace::ConnectedPlayerManager::OnNetworkReceive)> {
  static const MethodInfo* get() {
    static auto* connection = &::il2cpp_utils::GetClassFromName("", "IConnection")->byval_arg;
    static auto* reader = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataReader")->byval_arg;
    static auto* deliveryMethod = &::il2cpp_utils::GetClassFromName("LiteNetLib", "DeliveryMethod")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "OnNetworkReceive", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connection, reader, deliveryMethod});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::Send
// Il2CppName: Send
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SendUnreliable
// Il2CppName: SendUnreliable
// Cannot write MetadataGetter for generic methods!
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SendImmediately
// Il2CppName: SendImmediately
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, bool)>(&GlobalNamespace::ConnectedPlayerManager::SendImmediately)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    static auto* onlyFirstDegree = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SendImmediately", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, onlyFirstDegree});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SendImmediatelyExcludingPlayer
// Il2CppName: SendImmediatelyExcludingPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, bool)>(&GlobalNamespace::ConnectedPlayerManager::SendImmediatelyExcludingPlayer)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    static auto* excludingPlayer = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    static auto* onlyFirstDegree = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SendImmediatelyExcludingPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, excludingPlayer, onlyFirstDegree});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SendImmediatelyToPlayer
// Il2CppName: SendImmediatelyToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::SendImmediatelyToPlayer)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SendImmediatelyToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, toPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayer
// Il2CppName: SendImmediatelyFromPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, bool)>(&GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayer)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    static auto* onlyFirstDegree = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SendImmediatelyFromPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, fromPlayer, onlyFirstDegree});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer
// Il2CppName: SendImmediatelyFromPlayerToPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(LiteNetLib::Utils::INetSerializable*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::SendImmediatelyFromPlayerToPlayer)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    static auto* fromPlayer = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    static auto* toPlayer = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/ConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "SendImmediatelyFromPlayerToPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message, fromPlayer, toPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::FlushReliableQueue
// Il2CppName: FlushReliableQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::FlushReliableQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "FlushReliableQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::FlushUnreliableQueue
// Il2CppName: FlushUnreliableQueue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)()>(&GlobalNamespace::ConnectedPlayerManager::FlushUnreliableQueue)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "FlushUnreliableQueue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::WriteOne
// Il2CppName: WriteOne
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<LiteNetLib::Utils::NetDataWriter* (GlobalNamespace::ConnectedPlayerManager::*)(uint8_t, uint8_t, LiteNetLib::Utils::INetSerializable*)>(&GlobalNamespace::ConnectedPlayerManager::WriteOne)> {
  static const MethodInfo* get() {
    static auto* senderId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* receiverId = &::il2cpp_utils::GetClassFromName("System", "Byte")->byval_arg;
    static auto* message = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "WriteOne", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{senderId, receiverId, message});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::Write
// Il2CppName: Write
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(LiteNetLib::Utils::NetDataWriter*, LiteNetLib::Utils::INetSerializable*)>(&GlobalNamespace::ConnectedPlayerManager::Write)> {
  static const MethodInfo* get() {
    static auto* writer = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "NetDataWriter")->byval_arg;
    static auto* packet = &::il2cpp_utils::GetClassFromName("LiteNetLib.Utils", "INetSerializable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "Write", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{writer, packet});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerConnected
// Il2CppName: HandleServerPlayerConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerConnected)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerConnectedPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleServerPlayerConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandlePlayerIdentityUpdate
// Il2CppName: HandlePlayerIdentityUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerIdentityPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandlePlayerIdentityUpdate)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerIdentityPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandlePlayerIdentityUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandlePlayerStateUpdate
// Il2CppName: HandlePlayerStateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandlePlayerStateUpdate)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerStatePacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandlePlayerStateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandlePlayerAvatarUpdate
// Il2CppName: HandlePlayerAvatarUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerAvatarPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandlePlayerAvatarUpdate)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerAvatarPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandlePlayerAvatarUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandlePlayerLatencyUpdate
// Il2CppName: HandlePlayerLatencyUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandlePlayerLatencyUpdate)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerLatencyPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandlePlayerLatencyUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerDisconnected
// Il2CppName: HandleServerPlayerDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandleServerPlayerDisconnected)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerDisconnectedPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleServerPlayerDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleKickPlayerPacket
// Il2CppName: HandleKickPlayerPacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandleKickPlayerPacket)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/KickPlayerPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleKickPlayerPacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandlePlayerSortOrderUpdate
// Il2CppName: HandlePlayerSortOrderUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandlePlayerSortOrderUpdate)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/PlayerSortOrderPacket")->byval_arg;
    static auto* iPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandlePlayerSortOrderUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, iPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::HandleSyncTimePacket
// Il2CppName: HandleSyncTimePacket
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket*, GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::ConnectedPlayerManager::HandleSyncTimePacket)> {
  static const MethodInfo* get() {
    static auto* packet = &::il2cpp_utils::GetClassFromName("", "ConnectedPlayerManager/SyncTimePacket")->byval_arg;
    static auto* player = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "HandleSyncTimePacket", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{packet, player});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ConnectedPlayerManager::Log
// Il2CppName: Log
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ConnectedPlayerManager::*)(::Il2CppString*)>(&GlobalNamespace::ConnectedPlayerManager::Log)> {
  static const MethodInfo* get() {
    static auto* message = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ConnectedPlayerManager*), "Log", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{message});
  }
};
