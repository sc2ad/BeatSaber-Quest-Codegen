// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ScoringElement
#include "GlobalNamespace/ScoringElement.hpp"
// Including type: ICutScoreBufferDidFinishReceiver
#include "GlobalNamespace/ICutScoreBufferDidFinishReceiver.hpp"
// Including type: ScoreMultiplierCounter/MultiplierEventType
#include "GlobalNamespace/ScoreMultiplierCounter_MultiplierEventType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CutScoreBuffer
  class CutScoreBuffer;
  // Forward declaring type: IReadonlyCutScoreBuffer
  class IReadonlyCutScoreBuffer;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GoodCutScoringElement
  class GoodCutScoringElement;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GoodCutScoringElement);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GoodCutScoringElement*, "", "GoodCutScoringElement");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GoodCutScoringElement
  // [TokenAttribute] Offset: FFFFFFFF
  class GoodCutScoringElement : public ::GlobalNamespace::ScoringElement/*, public ::GlobalNamespace::ICutScoreBufferDidFinishReceiver*/ {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x28
    char ___base_padding[0x7] = {};
    // Nested type: ::GlobalNamespace::GoodCutScoringElement::Pool
    class Pool;
    public:
    // private readonly CutScoreBuffer _cutScoreBuffer
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::CutScoreBuffer* cutScoreBuffer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::CutScoreBuffer*) == 0x8);
    // private ScoreMultiplierCounter/MultiplierEventType _multiplierEventType
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType multiplierEventType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType) == 0x4);
    // private ScoreMultiplierCounter/MultiplierEventType _wouldBeCorrectCutBestPossibleMultiplierEventType
    // Size: 0x4
    // Offset: 0x34
    ::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType wouldBeCorrectCutBestPossibleMultiplierEventType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType) == 0x4);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ICutScoreBufferDidFinishReceiver
    operator ::GlobalNamespace::ICutScoreBufferDidFinishReceiver() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ICutScoreBufferDidFinishReceiver*>(this);
    }
    // Creating interface conversion operator: i_ICutScoreBufferDidFinishReceiver
    inline ::GlobalNamespace::ICutScoreBufferDidFinishReceiver* i_ICutScoreBufferDidFinishReceiver() noexcept {
      return reinterpret_cast<::GlobalNamespace::ICutScoreBufferDidFinishReceiver*>(this);
    }
    // Get instance field reference: private readonly CutScoreBuffer _cutScoreBuffer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::CutScoreBuffer*& dyn__cutScoreBuffer();
    // Get instance field reference: private ScoreMultiplierCounter/MultiplierEventType _multiplierEventType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType& dyn__multiplierEventType();
    // Get instance field reference: private ScoreMultiplierCounter/MultiplierEventType _wouldBeCorrectCutBestPossibleMultiplierEventType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType& dyn__wouldBeCorrectCutBestPossibleMultiplierEventType();
    // public IReadonlyCutScoreBuffer get_cutScoreBuffer()
    // Offset: 0x1395B3C
    ::GlobalNamespace::IReadonlyCutScoreBuffer* get_cutScoreBuffer();
    // public System.Void Init(NoteCutInfo noteCutInfo)
    // Offset: 0x1395B7C
    void Init(::GlobalNamespace::NoteCutInfo noteCutInfo);
    // public System.Void HandleCutScoreBufferDidFinish(CutScoreBuffer cutScoreBuffer)
    // Offset: 0x1395C00
    void HandleCutScoreBufferDidFinish(::GlobalNamespace::CutScoreBuffer* cutScoreBuffer);
    // public override System.Int32 get_cutScore()
    // Offset: 0x1395B18
    // Implemented from: ScoringElement
    // Base method: System.Int32 ScoringElement::get_cutScore()
    int get_cutScore();
    // public override ScoreMultiplierCounter/MultiplierEventType get_wouldBeCorrectCutBestPossibleMultiplierEventType()
    // Offset: 0x1395B2C
    // Implemented from: ScoringElement
    // Base method: ScoreMultiplierCounter/MultiplierEventType ScoringElement::get_wouldBeCorrectCutBestPossibleMultiplierEventType()
    ::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType get_wouldBeCorrectCutBestPossibleMultiplierEventType();
    // public override ScoreMultiplierCounter/MultiplierEventType get_multiplierEventType()
    // Offset: 0x1395B34
    // Implemented from: ScoringElement
    // Base method: ScoreMultiplierCounter/MultiplierEventType ScoringElement::get_multiplierEventType()
    ::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType get_multiplierEventType();
    // protected override System.Int32 get_executionOrder()
    // Offset: 0x1395B44
    // Implemented from: ScoringElement
    // Base method: System.Int32 ScoringElement::get_executionOrder()
    int get_executionOrder();
    // public System.Void .ctor()
    // Offset: 0x1395C28
    // Implemented from: ScoringElement
    // Base method: System.Void ScoringElement::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GoodCutScoringElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GoodCutScoringElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GoodCutScoringElement*, creationType>()));
    }
    // protected override System.Void Reinitialize()
    // Offset: 0x1395B60
    // Implemented from: ScoringElement
    // Base method: System.Void ScoringElement::Reinitialize()
    void Reinitialize();
  }; // GoodCutScoringElement
  #pragma pack(pop)
  static check_size<sizeof(GoodCutScoringElement), 52 + sizeof(::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType)> __GlobalNamespace_GoodCutScoringElementSizeCheck;
  static_assert(sizeof(GoodCutScoringElement) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::get_cutScoreBuffer
// Il2CppName: get_cutScoreBuffer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IReadonlyCutScoreBuffer* (GlobalNamespace::GoodCutScoringElement::*)()>(&GlobalNamespace::GoodCutScoringElement::get_cutScoreBuffer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "get_cutScoreBuffer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::Init
// Il2CppName: Init
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GoodCutScoringElement::*)(::GlobalNamespace::NoteCutInfo)>(&GlobalNamespace::GoodCutScoringElement::Init)> {
  static const MethodInfo* get() {
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "Init", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::HandleCutScoreBufferDidFinish
// Il2CppName: HandleCutScoreBufferDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GoodCutScoringElement::*)(::GlobalNamespace::CutScoreBuffer*)>(&GlobalNamespace::GoodCutScoringElement::HandleCutScoreBufferDidFinish)> {
  static const MethodInfo* get() {
    static auto* cutScoreBuffer = &::il2cpp_utils::GetClassFromName("", "CutScoreBuffer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "HandleCutScoreBufferDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cutScoreBuffer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::get_cutScore
// Il2CppName: get_cutScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GoodCutScoringElement::*)()>(&GlobalNamespace::GoodCutScoringElement::get_cutScore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "get_cutScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::get_wouldBeCorrectCutBestPossibleMultiplierEventType
// Il2CppName: get_wouldBeCorrectCutBestPossibleMultiplierEventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType (GlobalNamespace::GoodCutScoringElement::*)()>(&GlobalNamespace::GoodCutScoringElement::get_wouldBeCorrectCutBestPossibleMultiplierEventType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "get_wouldBeCorrectCutBestPossibleMultiplierEventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::get_multiplierEventType
// Il2CppName: get_multiplierEventType
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ScoreMultiplierCounter::MultiplierEventType (GlobalNamespace::GoodCutScoringElement::*)()>(&GlobalNamespace::GoodCutScoringElement::get_multiplierEventType)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "get_multiplierEventType", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::get_executionOrder
// Il2CppName: get_executionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::GoodCutScoringElement::*)()>(&GlobalNamespace::GoodCutScoringElement::get_executionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "get_executionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GoodCutScoringElement::Reinitialize
// Il2CppName: Reinitialize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GoodCutScoringElement::*)()>(&GlobalNamespace::GoodCutScoringElement::Reinitialize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GoodCutScoringElement*), "Reinitialize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
