// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MirroredGameNoteController
  class MirroredGameNoteController;
  // Forward declaring type: MirroredBombNoteController
  class MirroredBombNoteController;
  // Forward declaring type: MirroredObstacleController
  class MirroredObstacleController;
  // Forward declaring type: MirroredSliderController
  class MirroredSliderController;
  // Forward declaring type: IntSO
  class IntSO;
  // Forward declaring type: MirrorRendererGraphicsSettingsPresets
  class MirrorRendererGraphicsSettingsPresets;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FakeMirrorObjectsInstaller
  class FakeMirrorObjectsInstaller;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FakeMirrorObjectsInstaller);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FakeMirrorObjectsInstaller*, "", "FakeMirrorObjectsInstaller");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: FakeMirrorObjectsInstaller
  // [TokenAttribute] Offset: FFFFFFFF
  class FakeMirrorObjectsInstaller : public ::Zenject::MonoInstaller {
    public:
    // Nested type: ::GlobalNamespace::FakeMirrorObjectsInstaller::$$c
    class $$c;
    public:
    // [SpaceAttribute] Offset: 0x1127D60
    // private MirroredGameNoteController _mirroredGameNoteControllerPrefab
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MirroredGameNoteController* mirroredGameNoteControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredGameNoteController*) == 0x8);
    // private MirroredGameNoteController _mirroredBurstSliderHeadGameNoteControllerPrefab
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MirroredGameNoteController* mirroredBurstSliderHeadGameNoteControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredGameNoteController*) == 0x8);
    // private MirroredGameNoteController _mirroredBurstSliderGameNoteControllerPrefab
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::MirroredGameNoteController* mirroredBurstSliderGameNoteControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredGameNoteController*) == 0x8);
    // private MirroredGameNoteController _mirroredBurstSliderFillControllerPrefab
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::MirroredGameNoteController* mirroredBurstSliderFillControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredGameNoteController*) == 0x8);
    // private MirroredBombNoteController _mirroredBombNoteControllerPrefab
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::MirroredBombNoteController* mirroredBombNoteControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredBombNoteController*) == 0x8);
    // private MirroredObstacleController _mirroredObstacleControllerPrefab
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::MirroredObstacleController* mirroredObstacleControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredObstacleController*) == 0x8);
    // private MirroredSliderController _mirroredSliderControllerPrefab
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::MirroredSliderController* mirroredSliderControllerPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirroredSliderController*) == 0x8);
    // [SpaceAttribute] Offset: 0x1127DF8
    // private IntSO _mirrorGraphicsSettings
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::IntSO* mirrorGraphicsSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IntSO*) == 0x8);
    // private MirrorRendererGraphicsSettingsPresets _mirrorRendererGraphicsSettingsPresets
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::MirrorRendererGraphicsSettingsPresets* mirrorRendererGraphicsSettingsPresets;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*) == 0x8);
    public:
    // Get instance field reference: private MirroredGameNoteController _mirroredGameNoteControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredGameNoteController*& dyn__mirroredGameNoteControllerPrefab();
    // Get instance field reference: private MirroredGameNoteController _mirroredBurstSliderHeadGameNoteControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredGameNoteController*& dyn__mirroredBurstSliderHeadGameNoteControllerPrefab();
    // Get instance field reference: private MirroredGameNoteController _mirroredBurstSliderGameNoteControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredGameNoteController*& dyn__mirroredBurstSliderGameNoteControllerPrefab();
    // Get instance field reference: private MirroredGameNoteController _mirroredBurstSliderFillControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredGameNoteController*& dyn__mirroredBurstSliderFillControllerPrefab();
    // Get instance field reference: private MirroredBombNoteController _mirroredBombNoteControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredBombNoteController*& dyn__mirroredBombNoteControllerPrefab();
    // Get instance field reference: private MirroredObstacleController _mirroredObstacleControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredObstacleController*& dyn__mirroredObstacleControllerPrefab();
    // Get instance field reference: private MirroredSliderController _mirroredSliderControllerPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirroredSliderController*& dyn__mirroredSliderControllerPrefab();
    // Get instance field reference: private IntSO _mirrorGraphicsSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IntSO*& dyn__mirrorGraphicsSettings();
    // Get instance field reference: private MirrorRendererGraphicsSettingsPresets _mirrorRendererGraphicsSettingsPresets
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*& dyn__mirrorRendererGraphicsSettingsPresets();
    // public MirroredGameNoteController get_mirroredGameNoteControllerPrefab()
    // Offset: 0x1408450
    ::GlobalNamespace::MirroredGameNoteController* get_mirroredGameNoteControllerPrefab();
    // public System.Void .ctor()
    // Offset: 0x1408918
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FakeMirrorObjectsInstaller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FakeMirrorObjectsInstaller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FakeMirrorObjectsInstaller*, creationType>()));
    }
    // public override System.Void InstallBindings()
    // Offset: 0x1408458
    // Implemented from: Zenject.MonoInstallerBase
    // Base method: System.Void MonoInstallerBase::InstallBindings()
    void InstallBindings();
  }; // FakeMirrorObjectsInstaller
  #pragma pack(pop)
  static check_size<sizeof(FakeMirrorObjectsInstaller), 96 + sizeof(::GlobalNamespace::MirrorRendererGraphicsSettingsPresets*)> __GlobalNamespace_FakeMirrorObjectsInstallerSizeCheck;
  static_assert(sizeof(FakeMirrorObjectsInstaller) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorObjectsInstaller::get_mirroredGameNoteControllerPrefab
// Il2CppName: get_mirroredGameNoteControllerPrefab
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MirroredGameNoteController* (GlobalNamespace::FakeMirrorObjectsInstaller::*)()>(&GlobalNamespace::FakeMirrorObjectsInstaller::get_mirroredGameNoteControllerPrefab)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorObjectsInstaller*), "get_mirroredGameNoteControllerPrefab", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorObjectsInstaller::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FakeMirrorObjectsInstaller::InstallBindings
// Il2CppName: InstallBindings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FakeMirrorObjectsInstaller::*)()>(&GlobalNamespace::FakeMirrorObjectsInstaller::InstallBindings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FakeMirrorObjectsInstaller*), "InstallBindings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
