// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaFriendCollider
  class GorillaFriendCollider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GroupJoinButton
  class GroupJoinButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GroupJoinButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GroupJoinButton*, "", "GroupJoinButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x69
  #pragma pack(push, 1)
  // Autogenerated type: GroupJoinButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GroupJoinButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public System.Int32 gameModeIndex
    // Size: 0x4
    // Offset: 0x58
    int gameModeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: gameModeIndex and: friendCollider
    char __padding0[0x4] = {};
    // public GorillaFriendCollider friendCollider
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::GorillaFriendCollider* friendCollider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaFriendCollider*) == 0x8);
    // public System.Boolean inPrivate
    // Size: 0x1
    // Offset: 0x68
    bool inPrivate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.Int32 gameModeIndex
    [[deprecated("Use field access instead!")]] int& dyn_gameModeIndex();
    // Get instance field reference: public GorillaFriendCollider friendCollider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaFriendCollider*& dyn_friendCollider();
    // Get instance field reference: public System.Boolean inPrivate
    [[deprecated("Use field access instead!")]] bool& dyn_inPrivate();
    // public System.Void Update()
    // Offset: 0xE8A60C
    void Update();
    // public System.Void .ctor()
    // Offset: 0xE8A6CC
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroupJoinButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GroupJoinButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroupJoinButton*, creationType>()));
    }
    // public override System.Void ButtonActivation()
    // Offset: 0xE8A57C
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivation()
    void ButtonActivation();
  }; // GroupJoinButton
  #pragma pack(pop)
  static check_size<sizeof(GroupJoinButton), 104 + sizeof(bool)> __GlobalNamespace_GroupJoinButtonSizeCheck;
  static_assert(sizeof(GroupJoinButton) == 0x69);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GroupJoinButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GroupJoinButton::*)()>(&GlobalNamespace::GroupJoinButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GroupJoinButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GroupJoinButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GroupJoinButton::ButtonActivation
// Il2CppName: ButtonActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GroupJoinButton::*)()>(&GlobalNamespace::GroupJoinButton::ButtonActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GroupJoinButton*), "ButtonActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
