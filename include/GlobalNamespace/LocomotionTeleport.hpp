// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Nullable`1
#include "System/Nullable_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TeleportAimHandler
  class TeleportAimHandler;
  // Forward declaring type: LocomotionController
  class LocomotionController;
  // Forward declaring type: TeleportDestination
  class TeleportDestination;
  // Forward declaring type: TeleportInputHandler
  class TeleportInputHandler;
  // Skipping declaration: States because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: LayerMask
  struct LayerMask;
  // Forward declaring type: RaycastHit
  struct RaycastHit;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LocomotionTeleport
  class LocomotionTeleport;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LocomotionTeleport);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocomotionTeleport*, "", "LocomotionTeleport");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: LocomotionTeleport
  // [TokenAttribute] Offset: FFFFFFFF
  class LocomotionTeleport : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LocomotionTeleport::States
    struct States;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::TeleportIntentions
    struct TeleportIntentions;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::AimCollisionTypes
    struct AimCollisionTypes;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::AimData
    class AimData;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$ReadyStateCoroutine$d__52
    class $ReadyStateCoroutine$d__52;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$AimStateCoroutine$d__64
    class $AimStateCoroutine$d__64;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$CancelAimStateCoroutine$d__68
    class $CancelAimStateCoroutine$d__68;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$PreTeleportStateCoroutine$d__72
    class $PreTeleportStateCoroutine$d__72;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$CancelTeleportStateCoroutine$d__76
    class $CancelTeleportStateCoroutine$d__76;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$TeleportingStateCoroutine$d__80
    class $TeleportingStateCoroutine$d__80;
    // Nested type: ::GlobalNamespace::LocomotionTeleport::$PostTeleportStateCoroutine$d__84
    class $PostTeleportStateCoroutine$d__84;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LocomotionTeleport/States
    // [TokenAttribute] Offset: FFFFFFFF
    struct States/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: States
      constexpr States(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LocomotionTeleport/States Ready
      static constexpr const int Ready = 0;
      // Get static field: static public LocomotionTeleport/States Ready
      static ::GlobalNamespace::LocomotionTeleport::States _get_Ready();
      // Set static field: static public LocomotionTeleport/States Ready
      static void _set_Ready(::GlobalNamespace::LocomotionTeleport::States value);
      // static field const value: static public LocomotionTeleport/States Aim
      static constexpr const int Aim = 1;
      // Get static field: static public LocomotionTeleport/States Aim
      static ::GlobalNamespace::LocomotionTeleport::States _get_Aim();
      // Set static field: static public LocomotionTeleport/States Aim
      static void _set_Aim(::GlobalNamespace::LocomotionTeleport::States value);
      // static field const value: static public LocomotionTeleport/States CancelAim
      static constexpr const int CancelAim = 2;
      // Get static field: static public LocomotionTeleport/States CancelAim
      static ::GlobalNamespace::LocomotionTeleport::States _get_CancelAim();
      // Set static field: static public LocomotionTeleport/States CancelAim
      static void _set_CancelAim(::GlobalNamespace::LocomotionTeleport::States value);
      // static field const value: static public LocomotionTeleport/States PreTeleport
      static constexpr const int PreTeleport = 3;
      // Get static field: static public LocomotionTeleport/States PreTeleport
      static ::GlobalNamespace::LocomotionTeleport::States _get_PreTeleport();
      // Set static field: static public LocomotionTeleport/States PreTeleport
      static void _set_PreTeleport(::GlobalNamespace::LocomotionTeleport::States value);
      // static field const value: static public LocomotionTeleport/States CancelTeleport
      static constexpr const int CancelTeleport = 4;
      // Get static field: static public LocomotionTeleport/States CancelTeleport
      static ::GlobalNamespace::LocomotionTeleport::States _get_CancelTeleport();
      // Set static field: static public LocomotionTeleport/States CancelTeleport
      static void _set_CancelTeleport(::GlobalNamespace::LocomotionTeleport::States value);
      // static field const value: static public LocomotionTeleport/States Teleporting
      static constexpr const int Teleporting = 5;
      // Get static field: static public LocomotionTeleport/States Teleporting
      static ::GlobalNamespace::LocomotionTeleport::States _get_Teleporting();
      // Set static field: static public LocomotionTeleport/States Teleporting
      static void _set_Teleporting(::GlobalNamespace::LocomotionTeleport::States value);
      // static field const value: static public LocomotionTeleport/States PostTeleport
      static constexpr const int PostTeleport = 6;
      // Get static field: static public LocomotionTeleport/States PostTeleport
      static ::GlobalNamespace::LocomotionTeleport::States _get_PostTeleport();
      // Set static field: static public LocomotionTeleport/States PostTeleport
      static void _set_PostTeleport(::GlobalNamespace::LocomotionTeleport::States value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LocomotionTeleport/States
    #pragma pack(pop)
    static check_size<sizeof(LocomotionTeleport::States), 0 + sizeof(int)> __GlobalNamespace_LocomotionTeleport_StatesSizeCheck;
    static_assert(sizeof(LocomotionTeleport::States) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LocomotionTeleport/TeleportIntentions
    // [TokenAttribute] Offset: FFFFFFFF
    struct TeleportIntentions/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: TeleportIntentions
      constexpr TeleportIntentions(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LocomotionTeleport/TeleportIntentions None
      static constexpr const int None = 0;
      // Get static field: static public LocomotionTeleport/TeleportIntentions None
      static ::GlobalNamespace::LocomotionTeleport::TeleportIntentions _get_None();
      // Set static field: static public LocomotionTeleport/TeleportIntentions None
      static void _set_None(::GlobalNamespace::LocomotionTeleport::TeleportIntentions value);
      // static field const value: static public LocomotionTeleport/TeleportIntentions Aim
      static constexpr const int Aim = 1;
      // Get static field: static public LocomotionTeleport/TeleportIntentions Aim
      static ::GlobalNamespace::LocomotionTeleport::TeleportIntentions _get_Aim();
      // Set static field: static public LocomotionTeleport/TeleportIntentions Aim
      static void _set_Aim(::GlobalNamespace::LocomotionTeleport::TeleportIntentions value);
      // static field const value: static public LocomotionTeleport/TeleportIntentions PreTeleport
      static constexpr const int PreTeleport = 2;
      // Get static field: static public LocomotionTeleport/TeleportIntentions PreTeleport
      static ::GlobalNamespace::LocomotionTeleport::TeleportIntentions _get_PreTeleport();
      // Set static field: static public LocomotionTeleport/TeleportIntentions PreTeleport
      static void _set_PreTeleport(::GlobalNamespace::LocomotionTeleport::TeleportIntentions value);
      // static field const value: static public LocomotionTeleport/TeleportIntentions Teleport
      static constexpr const int Teleport = 3;
      // Get static field: static public LocomotionTeleport/TeleportIntentions Teleport
      static ::GlobalNamespace::LocomotionTeleport::TeleportIntentions _get_Teleport();
      // Set static field: static public LocomotionTeleport/TeleportIntentions Teleport
      static void _set_Teleport(::GlobalNamespace::LocomotionTeleport::TeleportIntentions value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LocomotionTeleport/TeleportIntentions
    #pragma pack(pop)
    static check_size<sizeof(LocomotionTeleport::TeleportIntentions), 0 + sizeof(int)> __GlobalNamespace_LocomotionTeleport_TeleportIntentionsSizeCheck;
    static_assert(sizeof(LocomotionTeleport::TeleportIntentions) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: LocomotionTeleport/AimCollisionTypes
    // [TokenAttribute] Offset: FFFFFFFF
    struct AimCollisionTypes/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: AimCollisionTypes
      constexpr AimCollisionTypes(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LocomotionTeleport/AimCollisionTypes Point
      static constexpr const int Point = 0;
      // Get static field: static public LocomotionTeleport/AimCollisionTypes Point
      static ::GlobalNamespace::LocomotionTeleport::AimCollisionTypes _get_Point();
      // Set static field: static public LocomotionTeleport/AimCollisionTypes Point
      static void _set_Point(::GlobalNamespace::LocomotionTeleport::AimCollisionTypes value);
      // static field const value: static public LocomotionTeleport/AimCollisionTypes Sphere
      static constexpr const int Sphere = 1;
      // Get static field: static public LocomotionTeleport/AimCollisionTypes Sphere
      static ::GlobalNamespace::LocomotionTeleport::AimCollisionTypes _get_Sphere();
      // Set static field: static public LocomotionTeleport/AimCollisionTypes Sphere
      static void _set_Sphere(::GlobalNamespace::LocomotionTeleport::AimCollisionTypes value);
      // static field const value: static public LocomotionTeleport/AimCollisionTypes Capsule
      static constexpr const int Capsule = 2;
      // Get static field: static public LocomotionTeleport/AimCollisionTypes Capsule
      static ::GlobalNamespace::LocomotionTeleport::AimCollisionTypes _get_Capsule();
      // Set static field: static public LocomotionTeleport/AimCollisionTypes Capsule
      static void _set_Capsule(::GlobalNamespace::LocomotionTeleport::AimCollisionTypes value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // LocomotionTeleport/AimCollisionTypes
    #pragma pack(pop)
    static check_size<sizeof(LocomotionTeleport::AimCollisionTypes), 0 + sizeof(int)> __GlobalNamespace_LocomotionTeleport_AimCollisionTypesSizeCheck;
    static_assert(sizeof(LocomotionTeleport::AimCollisionTypes) == 0x4);
    public:
    // [TooltipAttribute] Offset: 0x9938BC
    // public System.Boolean EnableMovementDuringReady
    // Size: 0x1
    // Offset: 0x18
    bool EnableMovementDuringReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9938F4
    // public System.Boolean EnableMovementDuringAim
    // Size: 0x1
    // Offset: 0x19
    bool EnableMovementDuringAim;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x99392C
    // public System.Boolean EnableMovementDuringPreTeleport
    // Size: 0x1
    // Offset: 0x1A
    bool EnableMovementDuringPreTeleport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x993964
    // public System.Boolean EnableMovementDuringPostTeleport
    // Size: 0x1
    // Offset: 0x1B
    bool EnableMovementDuringPostTeleport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x99399C
    // public System.Boolean EnableRotationDuringReady
    // Size: 0x1
    // Offset: 0x1C
    bool EnableRotationDuringReady;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x9939D4
    // public System.Boolean EnableRotationDuringAim
    // Size: 0x1
    // Offset: 0x1D
    bool EnableRotationDuringAim;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x993A0C
    // public System.Boolean EnableRotationDuringPreTeleport
    // Size: 0x1
    // Offset: 0x1E
    bool EnableRotationDuringPreTeleport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [TooltipAttribute] Offset: 0x993A44
    // public System.Boolean EnableRotationDuringPostTeleport
    // Size: 0x1
    // Offset: 0x1F
    bool EnableRotationDuringPostTeleport;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private LocomotionTeleport/States <CurrentState>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::LocomotionTeleport::States CurrentState;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocomotionTeleport::States) == 0x4);
    // Padding between fields: CurrentState and: AimHandler
    char __padding8[0x4] = {};
    // public TeleportAimHandler AimHandler
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::TeleportAimHandler* AimHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TeleportAimHandler*) == 0x8);
    // [TooltipAttribute] Offset: 0x993A8C
    // public TeleportDestination TeleportDestinationPrefab
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::TeleportDestination* TeleportDestinationPrefab;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TeleportDestination*) == 0x8);
    // [TooltipAttribute] Offset: 0x993AC4
    // public System.Int32 TeleportDestinationLayer
    // Size: 0x4
    // Offset: 0x38
    int TeleportDestinationLayer;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: TeleportDestinationLayer and: UpdateTeleportDestination
    char __padding11[0x4] = {};
    // private System.Action`4<System.Boolean,System.Nullable`1<UnityEngine.Vector3>,System.Nullable`1<UnityEngine.Quaternion>,System.Nullable`1<UnityEngine.Quaternion>> UpdateTeleportDestination
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>* UpdateTeleportDestination;
    // Field size check
    static_assert(sizeof(::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>*) == 0x8);
    // public TeleportInputHandler InputHandler
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::TeleportInputHandler* InputHandler;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TeleportInputHandler*) == 0x8);
    // public LocomotionTeleport/TeleportIntentions CurrentIntention
    // Size: 0x4
    // Offset: 0x50
    ::GlobalNamespace::LocomotionTeleport::TeleportIntentions CurrentIntention;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocomotionTeleport::TeleportIntentions) == 0x4);
    // public System.Boolean IsPreTeleportRequested
    // Size: 0x1
    // Offset: 0x54
    bool IsPreTeleportRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsTransitioning
    // Size: 0x1
    // Offset: 0x55
    bool IsTransitioning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean IsPostTeleportRequested
    // Size: 0x1
    // Offset: 0x56
    bool IsPostTeleportRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: IsPostTeleportRequested and: teleportDestination
    char __padding17[0x1] = {};
    // private TeleportDestination _teleportDestination
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::TeleportDestination* teleportDestination;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::TeleportDestination*) == 0x8);
    // private LocomotionController <LocomotionController>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::LocomotionController* LocomotionController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocomotionController*) == 0x8);
    // [TooltipAttribute] Offset: 0x993B1C
    // public LocomotionTeleport/AimCollisionTypes AimCollisionType
    // Size: 0x4
    // Offset: 0x68
    ::GlobalNamespace::LocomotionTeleport::AimCollisionTypes AimCollisionType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::LocomotionTeleport::AimCollisionTypes) == 0x4);
    // [TooltipAttribute] Offset: 0x993B54
    // public System.Boolean UseCharacterCollisionData
    // Size: 0x1
    // Offset: 0x6C
    bool UseCharacterCollisionData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: UseCharacterCollisionData and: AimCollisionRadius
    char __padding21[0x3] = {};
    // [TooltipAttribute] Offset: 0x993B8C
    // public System.Single AimCollisionRadius
    // Size: 0x4
    // Offset: 0x70
    float AimCollisionRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0x993BC4
    // public System.Single AimCollisionHeight
    // Size: 0x4
    // Offset: 0x74
    float AimCollisionHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Action EnterStateReady
    // Size: 0x8
    // Offset: 0x78
    ::System::Action* EnterStateReady;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action EnterStateAim
    // Size: 0x8
    // Offset: 0x80
    ::System::Action* EnterStateAim;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`1<LocomotionTeleport/AimData> UpdateAimData
    // Size: 0x8
    // Offset: 0x88
    ::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>* UpdateAimData;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>*) == 0x8);
    // private System.Action ExitStateAim
    // Size: 0x8
    // Offset: 0x90
    ::System::Action* ExitStateAim;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action EnterStateCancelAim
    // Size: 0x8
    // Offset: 0x98
    ::System::Action* EnterStateCancelAim;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action EnterStatePreTeleport
    // Size: 0x8
    // Offset: 0xA0
    ::System::Action* EnterStatePreTeleport;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action EnterStateCancelTeleport
    // Size: 0x8
    // Offset: 0xA8
    ::System::Action* EnterStateCancelTeleport;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action EnterStateTeleporting
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action* EnterStateTeleporting;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action EnterStatePostTeleport
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action* EnterStatePostTeleport;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action`3<UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion> Teleported
    // Size: 0x8
    // Offset: 0xC0
    ::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>* Teleported;
    // Field size check
    static_assert(sizeof(::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean EnableMovementDuringReady
    [[deprecated("Use field access instead!")]] bool& dyn_EnableMovementDuringReady();
    // Get instance field reference: public System.Boolean EnableMovementDuringAim
    [[deprecated("Use field access instead!")]] bool& dyn_EnableMovementDuringAim();
    // Get instance field reference: public System.Boolean EnableMovementDuringPreTeleport
    [[deprecated("Use field access instead!")]] bool& dyn_EnableMovementDuringPreTeleport();
    // Get instance field reference: public System.Boolean EnableMovementDuringPostTeleport
    [[deprecated("Use field access instead!")]] bool& dyn_EnableMovementDuringPostTeleport();
    // Get instance field reference: public System.Boolean EnableRotationDuringReady
    [[deprecated("Use field access instead!")]] bool& dyn_EnableRotationDuringReady();
    // Get instance field reference: public System.Boolean EnableRotationDuringAim
    [[deprecated("Use field access instead!")]] bool& dyn_EnableRotationDuringAim();
    // Get instance field reference: public System.Boolean EnableRotationDuringPreTeleport
    [[deprecated("Use field access instead!")]] bool& dyn_EnableRotationDuringPreTeleport();
    // Get instance field reference: public System.Boolean EnableRotationDuringPostTeleport
    [[deprecated("Use field access instead!")]] bool& dyn_EnableRotationDuringPostTeleport();
    // Get instance field reference: private LocomotionTeleport/States <CurrentState>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocomotionTeleport::States& dyn_$CurrentState$k__BackingField();
    // Get instance field reference: public TeleportAimHandler AimHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TeleportAimHandler*& dyn_AimHandler();
    // Get instance field reference: public TeleportDestination TeleportDestinationPrefab
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TeleportDestination*& dyn_TeleportDestinationPrefab();
    // Get instance field reference: public System.Int32 TeleportDestinationLayer
    [[deprecated("Use field access instead!")]] int& dyn_TeleportDestinationLayer();
    // Get instance field reference: private System.Action`4<System.Boolean,System.Nullable`1<UnityEngine.Vector3>,System.Nullable`1<UnityEngine.Quaternion>,System.Nullable`1<UnityEngine.Quaternion>> UpdateTeleportDestination
    [[deprecated("Use field access instead!")]] ::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>*& dyn_UpdateTeleportDestination();
    // Get instance field reference: public TeleportInputHandler InputHandler
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TeleportInputHandler*& dyn_InputHandler();
    // Get instance field reference: public LocomotionTeleport/TeleportIntentions CurrentIntention
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocomotionTeleport::TeleportIntentions& dyn_CurrentIntention();
    // Get instance field reference: public System.Boolean IsPreTeleportRequested
    [[deprecated("Use field access instead!")]] bool& dyn_IsPreTeleportRequested();
    // Get instance field reference: public System.Boolean IsTransitioning
    [[deprecated("Use field access instead!")]] bool& dyn_IsTransitioning();
    // Get instance field reference: public System.Boolean IsPostTeleportRequested
    [[deprecated("Use field access instead!")]] bool& dyn_IsPostTeleportRequested();
    // Get instance field reference: private TeleportDestination _teleportDestination
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::TeleportDestination*& dyn__teleportDestination();
    // Get instance field reference: private LocomotionController <LocomotionController>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocomotionController*& dyn_$LocomotionController$k__BackingField();
    // Get instance field reference: public LocomotionTeleport/AimCollisionTypes AimCollisionType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::LocomotionTeleport::AimCollisionTypes& dyn_AimCollisionType();
    // Get instance field reference: public System.Boolean UseCharacterCollisionData
    [[deprecated("Use field access instead!")]] bool& dyn_UseCharacterCollisionData();
    // Get instance field reference: public System.Single AimCollisionRadius
    [[deprecated("Use field access instead!")]] float& dyn_AimCollisionRadius();
    // Get instance field reference: public System.Single AimCollisionHeight
    [[deprecated("Use field access instead!")]] float& dyn_AimCollisionHeight();
    // Get instance field reference: private System.Action EnterStateReady
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStateReady();
    // Get instance field reference: private System.Action EnterStateAim
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStateAim();
    // Get instance field reference: private System.Action`1<LocomotionTeleport/AimData> UpdateAimData
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>*& dyn_UpdateAimData();
    // Get instance field reference: private System.Action ExitStateAim
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_ExitStateAim();
    // Get instance field reference: private System.Action EnterStateCancelAim
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStateCancelAim();
    // Get instance field reference: private System.Action EnterStatePreTeleport
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStatePreTeleport();
    // Get instance field reference: private System.Action EnterStateCancelTeleport
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStateCancelTeleport();
    // Get instance field reference: private System.Action EnterStateTeleporting
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStateTeleporting();
    // Get instance field reference: private System.Action EnterStatePostTeleport
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_EnterStatePostTeleport();
    // Get instance field reference: private System.Action`3<UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion> Teleported
    [[deprecated("Use field access instead!")]] ::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>*& dyn_Teleported();
    // public LocomotionTeleport/States get_CurrentState()
    // Offset: 0xE9ED18
    ::GlobalNamespace::LocomotionTeleport::States get_CurrentState();
    // private System.Void set_CurrentState(LocomotionTeleport/States value)
    // Offset: 0xE9ED20
    void set_CurrentState(::GlobalNamespace::LocomotionTeleport::States value);
    // public UnityEngine.Quaternion get_DestinationRotation()
    // Offset: 0xE9EF50
    ::UnityEngine::Quaternion get_DestinationRotation();
    // public LocomotionController get_LocomotionController()
    // Offset: 0xE9EF78
    ::GlobalNamespace::LocomotionController* get_LocomotionController();
    // private System.Void set_LocomotionController(LocomotionController value)
    // Offset: 0xE9EF80
    void set_LocomotionController(::GlobalNamespace::LocomotionController* value);
    // public System.Void add_UpdateTeleportDestination(System.Action`4<System.Boolean,System.Nullable`1<UnityEngine.Vector3>,System.Nullable`1<UnityEngine.Quaternion>,System.Nullable`1<UnityEngine.Quaternion>> value)
    // Offset: 0xE9ED28
    void add_UpdateTeleportDestination(::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>* value);
    // public System.Void remove_UpdateTeleportDestination(System.Action`4<System.Boolean,System.Nullable`1<UnityEngine.Vector3>,System.Nullable`1<UnityEngine.Quaternion>,System.Nullable`1<UnityEngine.Quaternion>> value)
    // Offset: 0xE9EDCC
    void remove_UpdateTeleportDestination(::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>* value);
    // public System.Void add_EnterStateReady(System.Action value)
    // Offset: 0xE9F68C
    void add_EnterStateReady(::System::Action* value);
    // public System.Void remove_EnterStateReady(System.Action value)
    // Offset: 0xE9F730
    void remove_EnterStateReady(::System::Action* value);
    // public System.Void add_EnterStateAim(System.Action value)
    // Offset: 0xE9F800
    void add_EnterStateAim(::System::Action* value);
    // public System.Void remove_EnterStateAim(System.Action value)
    // Offset: 0xE9F8A4
    void remove_EnterStateAim(::System::Action* value);
    // public System.Void add_UpdateAimData(System.Action`1<LocomotionTeleport/AimData> value)
    // Offset: 0xE9F948
    void add_UpdateAimData(::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>* value);
    // public System.Void remove_UpdateAimData(System.Action`1<LocomotionTeleport/AimData> value)
    // Offset: 0xE9F9EC
    void remove_UpdateAimData(::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>* value);
    // public System.Void add_ExitStateAim(System.Action value)
    // Offset: 0xE9FB04
    void add_ExitStateAim(::System::Action* value);
    // public System.Void remove_ExitStateAim(System.Action value)
    // Offset: 0xE9FBA8
    void remove_ExitStateAim(::System::Action* value);
    // public System.Void add_EnterStateCancelAim(System.Action value)
    // Offset: 0xE9FCE8
    void add_EnterStateCancelAim(::System::Action* value);
    // public System.Void remove_EnterStateCancelAim(System.Action value)
    // Offset: 0xE9FD8C
    void remove_EnterStateCancelAim(::System::Action* value);
    // public System.Void add_EnterStatePreTeleport(System.Action value)
    // Offset: 0xE9FECC
    void add_EnterStatePreTeleport(::System::Action* value);
    // public System.Void remove_EnterStatePreTeleport(System.Action value)
    // Offset: 0xE9FF70
    void remove_EnterStatePreTeleport(::System::Action* value);
    // public System.Void add_EnterStateCancelTeleport(System.Action value)
    // Offset: 0xEA00B0
    void add_EnterStateCancelTeleport(::System::Action* value);
    // public System.Void remove_EnterStateCancelTeleport(System.Action value)
    // Offset: 0xEA0154
    void remove_EnterStateCancelTeleport(::System::Action* value);
    // public System.Void add_EnterStateTeleporting(System.Action value)
    // Offset: 0xEA0294
    void add_EnterStateTeleporting(::System::Action* value);
    // public System.Void remove_EnterStateTeleporting(System.Action value)
    // Offset: 0xEA0338
    void remove_EnterStateTeleporting(::System::Action* value);
    // public System.Void add_EnterStatePostTeleport(System.Action value)
    // Offset: 0xEA0478
    void add_EnterStatePostTeleport(::System::Action* value);
    // public System.Void remove_EnterStatePostTeleport(System.Action value)
    // Offset: 0xEA051C
    void remove_EnterStatePostTeleport(::System::Action* value);
    // public System.Void add_Teleported(System.Action`3<UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion> value)
    // Offset: 0xEA065C
    void add_Teleported(::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>* value);
    // public System.Void remove_Teleported(System.Action`3<UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion> value)
    // Offset: 0xEA0700
    void remove_Teleported(::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>* value);
    // public System.Void .ctor()
    // Offset: 0xEA0B68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocomotionTeleport* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LocomotionTeleport::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocomotionTeleport*, creationType>()));
    }
    // public System.Void EnableMovement(System.Boolean ready, System.Boolean aim, System.Boolean pre, System.Boolean post)
    // Offset: 0xE9ECD0
    void EnableMovement(bool ready, bool aim, bool pre, bool post);
    // public System.Void EnableRotation(System.Boolean ready, System.Boolean aim, System.Boolean pre, System.Boolean post)
    // Offset: 0xE9ECF4
    void EnableRotation(bool ready, bool aim, bool pre, bool post);
    // public System.Void OnUpdateTeleportDestination(System.Boolean isValidDestination, System.Nullable`1<UnityEngine.Vector3> position, System.Nullable`1<UnityEngine.Quaternion> rotation, System.Nullable`1<UnityEngine.Quaternion> landingRotation)
    // Offset: 0xE9EE70
    void OnUpdateTeleportDestination(bool isValidDestination, ::System::Nullable_1<::UnityEngine::Vector3> position, ::System::Nullable_1<::UnityEngine::Quaternion> rotation, ::System::Nullable_1<::UnityEngine::Quaternion> landingRotation);
    // public System.Boolean AimCollisionTest(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.LayerMask aimCollisionLayerMask, out UnityEngine.RaycastHit hitInfo)
    // Offset: 0xE9EF88
    bool AimCollisionTest(::UnityEngine::Vector3 start, ::UnityEngine::Vector3 end, ::UnityEngine::LayerMask aimCollisionLayerMask, ByRef<::UnityEngine::RaycastHit> hitInfo);
    // protected System.Void LogState(System.String msg)
    // Offset: 0xE9F2E0
    void LogState(::StringW msg);
    // protected System.Void CreateNewTeleportDestination()
    // Offset: 0xE9F398
    void CreateNewTeleportDestination();
    // private System.Void DeactivateDestination()
    // Offset: 0xE9F460
    void DeactivateDestination();
    // public System.Void RecycleTeleportDestination(TeleportDestination oldDestination)
    // Offset: 0xE9F47C
    void RecycleTeleportDestination(::GlobalNamespace::TeleportDestination* oldDestination);
    // private System.Void EnableMotion(System.Boolean enableLinear, System.Boolean enableRotation)
    // Offset: 0xE9F544
    void EnableMotion(bool enableLinear, bool enableRotation);
    // private System.Void Awake()
    // Offset: 0xE9F588
    void Awake();
    // public System.Void OnEnable()
    // Offset: 0xE9F5E4
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0xE9F684
    void OnDisable();
    // protected System.Collections.IEnumerator ReadyStateCoroutine()
    // Offset: 0xE9F614
    ::System::Collections::IEnumerator* ReadyStateCoroutine();
    // public System.Void OnUpdateAimData(LocomotionTeleport/AimData aimData)
    // Offset: 0xE9FA90
    void OnUpdateAimData(::GlobalNamespace::LocomotionTeleport::AimData* aimData);
    // protected System.Collections.IEnumerator AimStateCoroutine()
    // Offset: 0xE9FC4C
    ::System::Collections::IEnumerator* AimStateCoroutine();
    // protected System.Collections.IEnumerator CancelAimStateCoroutine()
    // Offset: 0xE9FE30
    ::System::Collections::IEnumerator* CancelAimStateCoroutine();
    // protected System.Collections.IEnumerator PreTeleportStateCoroutine()
    // Offset: 0xEA0014
    ::System::Collections::IEnumerator* PreTeleportStateCoroutine();
    // protected System.Collections.IEnumerator CancelTeleportStateCoroutine()
    // Offset: 0xEA01F8
    ::System::Collections::IEnumerator* CancelTeleportStateCoroutine();
    // protected System.Collections.IEnumerator TeleportingStateCoroutine()
    // Offset: 0xEA03DC
    ::System::Collections::IEnumerator* TeleportingStateCoroutine();
    // protected System.Collections.IEnumerator PostTeleportStateCoroutine()
    // Offset: 0xEA05C0
    ::System::Collections::IEnumerator* PostTeleportStateCoroutine();
    // public System.Void DoTeleport()
    // Offset: 0xEA07A4
    void DoTeleport();
    // public UnityEngine.Vector3 GetCharacterPosition()
    // Offset: 0xEA08E8
    ::UnityEngine::Vector3 GetCharacterPosition();
    // public UnityEngine.Quaternion GetHeadRotationY()
    // Offset: 0xEA091C
    ::UnityEngine::Quaternion GetHeadRotationY();
    // public System.Void DoWarp(UnityEngine.Vector3 startPos, System.Single positionPercent)
    // Offset: 0xEA0A3C
    void DoWarp(::UnityEngine::Vector3 startPos, float positionPercent);
  }; // LocomotionTeleport
  #pragma pack(pop)
  static check_size<sizeof(LocomotionTeleport), 192 + sizeof(::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>*)> __GlobalNamespace_LocomotionTeleportSizeCheck;
  static_assert(sizeof(LocomotionTeleport) == 0xC8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocomotionTeleport::AimCollisionTypes, "", "LocomotionTeleport/AimCollisionTypes");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocomotionTeleport::TeleportIntentions, "", "LocomotionTeleport/TeleportIntentions");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LocomotionTeleport::States, "", "LocomotionTeleport/States");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::get_CurrentState
// Il2CppName: get_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LocomotionTeleport::States (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::get_CurrentState)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "get_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::set_CurrentState
// Il2CppName: set_CurrentState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::GlobalNamespace::LocomotionTeleport::States)>(&GlobalNamespace::LocomotionTeleport::set_CurrentState)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocomotionTeleport/States")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "set_CurrentState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::get_DestinationRotation
// Il2CppName: get_DestinationRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::get_DestinationRotation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "get_DestinationRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::get_LocomotionController
// Il2CppName: get_LocomotionController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::LocomotionController* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::get_LocomotionController)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "get_LocomotionController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::set_LocomotionController
// Il2CppName: set_LocomotionController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::GlobalNamespace::LocomotionController*)>(&GlobalNamespace::LocomotionTeleport::set_LocomotionController)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "LocomotionController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "set_LocomotionController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_UpdateTeleportDestination
// Il2CppName: add_UpdateTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>*)>(&GlobalNamespace::LocomotionTeleport::add_UpdateTeleportDestination)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")}), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")}), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_UpdateTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_UpdateTeleportDestination
// Il2CppName: remove_UpdateTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action_4<bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>>*)>(&GlobalNamespace::LocomotionTeleport::remove_UpdateTeleportDestination)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`4"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean"), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")}), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")}), ::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_UpdateTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStateReady
// Il2CppName: add_EnterStateReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStateReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStateReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStateReady
// Il2CppName: remove_EnterStateReady
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStateReady)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStateReady", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStateAim
// Il2CppName: add_EnterStateAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStateAim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStateAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStateAim
// Il2CppName: remove_EnterStateAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStateAim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStateAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_UpdateAimData
// Il2CppName: add_UpdateAimData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>*)>(&GlobalNamespace::LocomotionTeleport::add_UpdateAimData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LocomotionTeleport/AimData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_UpdateAimData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_UpdateAimData
// Il2CppName: remove_UpdateAimData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action_1<::GlobalNamespace::LocomotionTeleport::AimData*>*)>(&GlobalNamespace::LocomotionTeleport::remove_UpdateAimData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "LocomotionTeleport/AimData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_UpdateAimData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_ExitStateAim
// Il2CppName: add_ExitStateAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_ExitStateAim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_ExitStateAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_ExitStateAim
// Il2CppName: remove_ExitStateAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_ExitStateAim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_ExitStateAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStateCancelAim
// Il2CppName: add_EnterStateCancelAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStateCancelAim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStateCancelAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStateCancelAim
// Il2CppName: remove_EnterStateCancelAim
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStateCancelAim)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStateCancelAim", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStatePreTeleport
// Il2CppName: add_EnterStatePreTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStatePreTeleport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStatePreTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStatePreTeleport
// Il2CppName: remove_EnterStatePreTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStatePreTeleport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStatePreTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStateCancelTeleport
// Il2CppName: add_EnterStateCancelTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStateCancelTeleport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStateCancelTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStateCancelTeleport
// Il2CppName: remove_EnterStateCancelTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStateCancelTeleport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStateCancelTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStateTeleporting
// Il2CppName: add_EnterStateTeleporting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStateTeleporting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStateTeleporting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStateTeleporting
// Il2CppName: remove_EnterStateTeleporting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStateTeleporting)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStateTeleporting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_EnterStatePostTeleport
// Il2CppName: add_EnterStatePostTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::add_EnterStatePostTeleport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_EnterStatePostTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_EnterStatePostTeleport
// Il2CppName: remove_EnterStatePostTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action*)>(&GlobalNamespace::LocomotionTeleport::remove_EnterStatePostTeleport)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_EnterStatePostTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::add_Teleported
// Il2CppName: add_Teleported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>*)>(&GlobalNamespace::LocomotionTeleport::add_Teleported)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "add_Teleported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::remove_Teleported
// Il2CppName: remove_Teleported
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::System::Action_3<::UnityEngine::Transform*, ::UnityEngine::Vector3, ::UnityEngine::Quaternion>*)>(&GlobalNamespace::LocomotionTeleport::remove_Teleported)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Transform"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3"), ::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "remove_Teleported", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::EnableMovement
// Il2CppName: EnableMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(bool, bool, bool, bool)>(&GlobalNamespace::LocomotionTeleport::EnableMovement)> {
  static const MethodInfo* get() {
    static auto* ready = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* aim = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pre = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* post = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "EnableMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ready, aim, pre, post});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::EnableRotation
// Il2CppName: EnableRotation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(bool, bool, bool, bool)>(&GlobalNamespace::LocomotionTeleport::EnableRotation)> {
  static const MethodInfo* get() {
    static auto* ready = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* aim = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* pre = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* post = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "EnableRotation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ready, aim, pre, post});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::OnUpdateTeleportDestination
// Il2CppName: OnUpdateTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(bool, ::System::Nullable_1<::UnityEngine::Vector3>, ::System::Nullable_1<::UnityEngine::Quaternion>, ::System::Nullable_1<::UnityEngine::Quaternion>)>(&GlobalNamespace::LocomotionTeleport::OnUpdateTeleportDestination)> {
  static const MethodInfo* get() {
    static auto* isValidDestination = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* position = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")})->byval_arg;
    static auto* rotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    static auto* landingRotation = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Nullable`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "OnUpdateTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isValidDestination, position, rotation, landingRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::AimCollisionTest
// Il2CppName: AimCollisionTest
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocomotionTeleport::*)(::UnityEngine::Vector3, ::UnityEngine::Vector3, ::UnityEngine::LayerMask, ByRef<::UnityEngine::RaycastHit>)>(&GlobalNamespace::LocomotionTeleport::AimCollisionTest)> {
  static const MethodInfo* get() {
    static auto* start = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* end = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* aimCollisionLayerMask = &::il2cpp_utils::GetClassFromName("UnityEngine", "LayerMask")->byval_arg;
    static auto* hitInfo = &::il2cpp_utils::GetClassFromName("UnityEngine", "RaycastHit")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "AimCollisionTest", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{start, end, aimCollisionLayerMask, hitInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::LogState
// Il2CppName: LogState
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::StringW)>(&GlobalNamespace::LocomotionTeleport::LogState)> {
  static const MethodInfo* get() {
    static auto* msg = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "LogState", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{msg});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::CreateNewTeleportDestination
// Il2CppName: CreateNewTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::CreateNewTeleportDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "CreateNewTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::DeactivateDestination
// Il2CppName: DeactivateDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::DeactivateDestination)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "DeactivateDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::RecycleTeleportDestination
// Il2CppName: RecycleTeleportDestination
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::GlobalNamespace::TeleportDestination*)>(&GlobalNamespace::LocomotionTeleport::RecycleTeleportDestination)> {
  static const MethodInfo* get() {
    static auto* oldDestination = &::il2cpp_utils::GetClassFromName("", "TeleportDestination")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "RecycleTeleportDestination", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{oldDestination});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::EnableMotion
// Il2CppName: EnableMotion
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(bool, bool)>(&GlobalNamespace::LocomotionTeleport::EnableMotion)> {
  static const MethodInfo* get() {
    static auto* enableLinear = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* enableRotation = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "EnableMotion", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{enableLinear, enableRotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::ReadyStateCoroutine
// Il2CppName: ReadyStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::ReadyStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "ReadyStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::OnUpdateAimData
// Il2CppName: OnUpdateAimData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::GlobalNamespace::LocomotionTeleport::AimData*)>(&GlobalNamespace::LocomotionTeleport::OnUpdateAimData)> {
  static const MethodInfo* get() {
    static auto* aimData = &::il2cpp_utils::GetClassFromName("", "LocomotionTeleport/AimData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "OnUpdateAimData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{aimData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::AimStateCoroutine
// Il2CppName: AimStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::AimStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "AimStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::CancelAimStateCoroutine
// Il2CppName: CancelAimStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::CancelAimStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "CancelAimStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::PreTeleportStateCoroutine
// Il2CppName: PreTeleportStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::PreTeleportStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "PreTeleportStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::CancelTeleportStateCoroutine
// Il2CppName: CancelTeleportStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::CancelTeleportStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "CancelTeleportStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::TeleportingStateCoroutine
// Il2CppName: TeleportingStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::TeleportingStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "TeleportingStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::PostTeleportStateCoroutine
// Il2CppName: PostTeleportStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::PostTeleportStateCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "PostTeleportStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::DoTeleport
// Il2CppName: DoTeleport
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::DoTeleport)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "DoTeleport", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::GetCharacterPosition
// Il2CppName: GetCharacterPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Vector3 (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::GetCharacterPosition)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "GetCharacterPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::GetHeadRotationY
// Il2CppName: GetHeadRotationY
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Quaternion (GlobalNamespace::LocomotionTeleport::*)()>(&GlobalNamespace::LocomotionTeleport::GetHeadRotationY)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "GetHeadRotationY", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocomotionTeleport::DoWarp
// Il2CppName: DoWarp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocomotionTeleport::*)(::UnityEngine::Vector3, float)>(&GlobalNamespace::LocomotionTeleport::DoWarp)> {
  static const MethodInfo* get() {
    static auto* startPos = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* positionPercent = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocomotionTeleport*), "DoWarp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{startPos, positionPercent});
  }
};
