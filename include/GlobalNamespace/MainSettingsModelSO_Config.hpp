// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: MainSettingsModelSO/WindowMode
#include "GlobalNamespace/MainSettingsModelSO_WindowMode.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MainSettingsModelSO::Config);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MainSettingsModelSO::Config*, "", "MainSettingsModelSO/Config");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xE1
  #pragma pack(push, 1)
  // Autogenerated type: MainSettingsModelSO/Config
  // [TokenAttribute] Offset: FFFFFFFF
  class MainSettingsModelSO::Config : public ::Il2CppObject {
    public:
    public:
    // public System.String version
    // Size: 0x8
    // Offset: 0x10
    ::StringW version;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Int32 windowResolutionWidth
    // Size: 0x4
    // Offset: 0x18
    int windowResolutionWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 windowResolutionHeight
    // Size: 0x4
    // Offset: 0x1C
    int windowResolutionHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 editorResolutionWidth
    // Size: 0x4
    // Offset: 0x20
    int editorResolutionWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 editorResolutionHeight
    // Size: 0x4
    // Offset: 0x24
    int editorResolutionHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public MainSettingsModelSO/WindowMode windowMode
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::MainSettingsModelSO::WindowMode windowMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MainSettingsModelSO::WindowMode) == 0x4);
    // public System.Single vrResolutionScale
    // Size: 0x4
    // Offset: 0x2C
    float vrResolutionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single menuVRResolutionScaleMultiplier
    // Size: 0x4
    // Offset: 0x30
    float menuVRResolutionScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useFixedFoveatedRenderingDuringGameplay
    // Size: 0x1
    // Offset: 0x34
    bool useFixedFoveatedRenderingDuringGameplay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useFixedFoveatedRenderingDuringGameplay and: antiAliasingLevel
    char __padding8[0x3] = {};
    // public System.Int32 antiAliasingLevel
    // Size: 0x4
    // Offset: 0x38
    int antiAliasingLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 mirrorGraphicsSettings
    // Size: 0x4
    // Offset: 0x3C
    int mirrorGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 mainEffectGraphicsSettings
    // Size: 0x4
    // Offset: 0x40
    int mainEffectGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bloomGraphicsSettings
    // Size: 0x4
    // Offset: 0x44
    int bloomGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 smokeGraphicsSettings
    // Size: 0x4
    // Offset: 0x48
    int smokeGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean burnMarkTrailsEnabled
    // Size: 0x1
    // Offset: 0x4C
    bool burnMarkTrailsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean screenDisplacementEffectsEnabled
    // Size: 0x1
    // Offset: 0x4D
    bool screenDisplacementEffectsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: screenDisplacementEffectsEnabled and: roomCenterX
    char __padding15[0x2] = {};
    // public System.Single roomCenterX
    // Size: 0x4
    // Offset: 0x50
    float roomCenterX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single roomCenterY
    // Size: 0x4
    // Offset: 0x54
    float roomCenterY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single roomCenterZ
    // Size: 0x4
    // Offset: 0x58
    float roomCenterZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single roomRotation
    // Size: 0x4
    // Offset: 0x5C
    float roomRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerPositionX
    // Size: 0x4
    // Offset: 0x60
    float controllerPositionX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerPositionY
    // Size: 0x4
    // Offset: 0x64
    float controllerPositionY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerPositionZ
    // Size: 0x4
    // Offset: 0x68
    float controllerPositionZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerRotationX
    // Size: 0x4
    // Offset: 0x6C
    float controllerRotationX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerRotationY
    // Size: 0x4
    // Offset: 0x70
    float controllerRotationY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerRotationZ
    // Size: 0x4
    // Offset: 0x74
    float controllerRotationZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 smoothCameraEnabled
    // Size: 0x4
    // Offset: 0x78
    int smoothCameraEnabled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single smoothCameraFieldOfView
    // Size: 0x4
    // Offset: 0x7C
    float smoothCameraFieldOfView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonPositionX
    // Size: 0x4
    // Offset: 0x80
    float smoothCameraThirdPersonPositionX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonPositionY
    // Size: 0x4
    // Offset: 0x84
    float smoothCameraThirdPersonPositionY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonPositionZ
    // Size: 0x4
    // Offset: 0x88
    float smoothCameraThirdPersonPositionZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonEulerAnglesX
    // Size: 0x4
    // Offset: 0x8C
    float smoothCameraThirdPersonEulerAnglesX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonEulerAnglesY
    // Size: 0x4
    // Offset: 0x90
    float smoothCameraThirdPersonEulerAnglesY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonEulerAnglesZ
    // Size: 0x4
    // Offset: 0x94
    float smoothCameraThirdPersonEulerAnglesZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 smoothCameraThirdPersonEnabled
    // Size: 0x4
    // Offset: 0x98
    int smoothCameraThirdPersonEnabled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single smoothCameraRotationSmooth
    // Size: 0x4
    // Offset: 0x9C
    float smoothCameraRotationSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraPositionSmooth
    // Size: 0x4
    // Offset: 0xA0
    float smoothCameraPositionSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useCustomServerEnvironment
    // Size: 0x1
    // Offset: 0xA4
    bool useCustomServerEnvironment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean forceGameLiftServerEnvironment
    // Size: 0x1
    // Offset: 0xA5
    bool forceGameLiftServerEnvironment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceGameLiftServerEnvironment and: customServerHostName
    char __padding38[0x2] = {};
    // public System.String customServerHostName
    // Size: 0x8
    // Offset: 0xA8
    ::StringW customServerHostName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Single volume
    // Size: 0x4
    // Offset: 0xB0
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ambientVolumeScale
    // Size: 0x4
    // Offset: 0xB4
    float ambientVolumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean controllersRumbleEnabled
    // Size: 0x1
    // Offset: 0xB8
    bool controllersRumbleEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: controllersRumbleEnabled and: enableAlphaFeatures
    char __padding42[0x3] = {};
    // public System.Int32 enableAlphaFeatures
    // Size: 0x4
    // Offset: 0xBC
    int enableAlphaFeatures;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pauseButtonPressDurationLevel
    // Size: 0x4
    // Offset: 0xC0
    int pauseButtonPressDurationLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxShockwaveParticles
    // Size: 0x4
    // Offset: 0xC4
    int maxShockwaveParticles;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean overrideAudioLatency
    // Size: 0x1
    // Offset: 0xC8
    bool overrideAudioLatency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideAudioLatency and: audioLatency
    char __padding46[0x3] = {};
    // public System.Single audioLatency
    // Size: 0x4
    // Offset: 0xCC
    float audioLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxNumberOfCutSoundEffects
    // Size: 0x4
    // Offset: 0xD0
    int maxNumberOfCutSoundEffects;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean onlineServicesEnabled
    // Size: 0x1
    // Offset: 0xD4
    bool onlineServicesEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean openVrThreadedHaptics
    // Size: 0x1
    // Offset: 0xD5
    bool openVrThreadedHaptics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: openVrThreadedHaptics and: language
    char __padding50[0x2] = {};
    // public System.String language
    // Size: 0x8
    // Offset: 0xD8
    ::StringW language;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean enableFPSCounter
    // Size: 0x1
    // Offset: 0xE0
    bool enableFPSCounter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String version
    [[deprecated("Use field access instead!")]] ::StringW& dyn_version();
    // Get instance field reference: public System.Int32 windowResolutionWidth
    [[deprecated("Use field access instead!")]] int& dyn_windowResolutionWidth();
    // Get instance field reference: public System.Int32 windowResolutionHeight
    [[deprecated("Use field access instead!")]] int& dyn_windowResolutionHeight();
    // Get instance field reference: public System.Int32 editorResolutionWidth
    [[deprecated("Use field access instead!")]] int& dyn_editorResolutionWidth();
    // Get instance field reference: public System.Int32 editorResolutionHeight
    [[deprecated("Use field access instead!")]] int& dyn_editorResolutionHeight();
    // Get instance field reference: public MainSettingsModelSO/WindowMode windowMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MainSettingsModelSO::WindowMode& dyn_windowMode();
    // Get instance field reference: public System.Single vrResolutionScale
    [[deprecated("Use field access instead!")]] float& dyn_vrResolutionScale();
    // Get instance field reference: public System.Single menuVRResolutionScaleMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_menuVRResolutionScaleMultiplier();
    // Get instance field reference: public System.Boolean useFixedFoveatedRenderingDuringGameplay
    [[deprecated("Use field access instead!")]] bool& dyn_useFixedFoveatedRenderingDuringGameplay();
    // Get instance field reference: public System.Int32 antiAliasingLevel
    [[deprecated("Use field access instead!")]] int& dyn_antiAliasingLevel();
    // Get instance field reference: public System.Int32 mirrorGraphicsSettings
    [[deprecated("Use field access instead!")]] int& dyn_mirrorGraphicsSettings();
    // Get instance field reference: public System.Int32 mainEffectGraphicsSettings
    [[deprecated("Use field access instead!")]] int& dyn_mainEffectGraphicsSettings();
    // Get instance field reference: public System.Int32 bloomGraphicsSettings
    [[deprecated("Use field access instead!")]] int& dyn_bloomGraphicsSettings();
    // Get instance field reference: public System.Int32 smokeGraphicsSettings
    [[deprecated("Use field access instead!")]] int& dyn_smokeGraphicsSettings();
    // Get instance field reference: public System.Boolean burnMarkTrailsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_burnMarkTrailsEnabled();
    // Get instance field reference: public System.Boolean screenDisplacementEffectsEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_screenDisplacementEffectsEnabled();
    // Get instance field reference: public System.Single roomCenterX
    [[deprecated("Use field access instead!")]] float& dyn_roomCenterX();
    // Get instance field reference: public System.Single roomCenterY
    [[deprecated("Use field access instead!")]] float& dyn_roomCenterY();
    // Get instance field reference: public System.Single roomCenterZ
    [[deprecated("Use field access instead!")]] float& dyn_roomCenterZ();
    // Get instance field reference: public System.Single roomRotation
    [[deprecated("Use field access instead!")]] float& dyn_roomRotation();
    // Get instance field reference: public System.Single controllerPositionX
    [[deprecated("Use field access instead!")]] float& dyn_controllerPositionX();
    // Get instance field reference: public System.Single controllerPositionY
    [[deprecated("Use field access instead!")]] float& dyn_controllerPositionY();
    // Get instance field reference: public System.Single controllerPositionZ
    [[deprecated("Use field access instead!")]] float& dyn_controllerPositionZ();
    // Get instance field reference: public System.Single controllerRotationX
    [[deprecated("Use field access instead!")]] float& dyn_controllerRotationX();
    // Get instance field reference: public System.Single controllerRotationY
    [[deprecated("Use field access instead!")]] float& dyn_controllerRotationY();
    // Get instance field reference: public System.Single controllerRotationZ
    [[deprecated("Use field access instead!")]] float& dyn_controllerRotationZ();
    // Get instance field reference: public System.Int32 smoothCameraEnabled
    [[deprecated("Use field access instead!")]] int& dyn_smoothCameraEnabled();
    // Get instance field reference: public System.Single smoothCameraFieldOfView
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraFieldOfView();
    // Get instance field reference: public System.Single smoothCameraThirdPersonPositionX
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraThirdPersonPositionX();
    // Get instance field reference: public System.Single smoothCameraThirdPersonPositionY
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraThirdPersonPositionY();
    // Get instance field reference: public System.Single smoothCameraThirdPersonPositionZ
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraThirdPersonPositionZ();
    // Get instance field reference: public System.Single smoothCameraThirdPersonEulerAnglesX
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraThirdPersonEulerAnglesX();
    // Get instance field reference: public System.Single smoothCameraThirdPersonEulerAnglesY
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraThirdPersonEulerAnglesY();
    // Get instance field reference: public System.Single smoothCameraThirdPersonEulerAnglesZ
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraThirdPersonEulerAnglesZ();
    // Get instance field reference: public System.Int32 smoothCameraThirdPersonEnabled
    [[deprecated("Use field access instead!")]] int& dyn_smoothCameraThirdPersonEnabled();
    // Get instance field reference: public System.Single smoothCameraRotationSmooth
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraRotationSmooth();
    // Get instance field reference: public System.Single smoothCameraPositionSmooth
    [[deprecated("Use field access instead!")]] float& dyn_smoothCameraPositionSmooth();
    // Get instance field reference: public System.Boolean useCustomServerEnvironment
    [[deprecated("Use field access instead!")]] bool& dyn_useCustomServerEnvironment();
    // Get instance field reference: public System.Boolean forceGameLiftServerEnvironment
    [[deprecated("Use field access instead!")]] bool& dyn_forceGameLiftServerEnvironment();
    // Get instance field reference: public System.String customServerHostName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_customServerHostName();
    // Get instance field reference: public System.Single volume
    [[deprecated("Use field access instead!")]] float& dyn_volume();
    // Get instance field reference: public System.Single ambientVolumeScale
    [[deprecated("Use field access instead!")]] float& dyn_ambientVolumeScale();
    // Get instance field reference: public System.Boolean controllersRumbleEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_controllersRumbleEnabled();
    // Get instance field reference: public System.Int32 enableAlphaFeatures
    [[deprecated("Use field access instead!")]] int& dyn_enableAlphaFeatures();
    // Get instance field reference: public System.Int32 pauseButtonPressDurationLevel
    [[deprecated("Use field access instead!")]] int& dyn_pauseButtonPressDurationLevel();
    // Get instance field reference: public System.Int32 maxShockwaveParticles
    [[deprecated("Use field access instead!")]] int& dyn_maxShockwaveParticles();
    // Get instance field reference: public System.Boolean overrideAudioLatency
    [[deprecated("Use field access instead!")]] bool& dyn_overrideAudioLatency();
    // Get instance field reference: public System.Single audioLatency
    [[deprecated("Use field access instead!")]] float& dyn_audioLatency();
    // Get instance field reference: public System.Int32 maxNumberOfCutSoundEffects
    [[deprecated("Use field access instead!")]] int& dyn_maxNumberOfCutSoundEffects();
    // Get instance field reference: public System.Boolean onlineServicesEnabled
    [[deprecated("Use field access instead!")]] bool& dyn_onlineServicesEnabled();
    // Get instance field reference: public System.Boolean openVrThreadedHaptics
    [[deprecated("Use field access instead!")]] bool& dyn_openVrThreadedHaptics();
    // Get instance field reference: public System.String language
    [[deprecated("Use field access instead!")]] ::StringW& dyn_language();
    // Get instance field reference: public System.Boolean enableFPSCounter
    [[deprecated("Use field access instead!")]] bool& dyn_enableFPSCounter();
    // public System.Void .ctor()
    // Offset: 0x13864B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainSettingsModelSO::Config* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MainSettingsModelSO::Config::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainSettingsModelSO::Config*, creationType>()));
    }
  }; // MainSettingsModelSO/Config
  #pragma pack(pop)
  static check_size<sizeof(MainSettingsModelSO::Config), 224 + sizeof(bool)> __GlobalNamespace_MainSettingsModelSO_ConfigSizeCheck;
  static_assert(sizeof(MainSettingsModelSO::Config) == 0xE1);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MainSettingsModelSO::Config::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
