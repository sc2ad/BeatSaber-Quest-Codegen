// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: MainSettingsModelSO
#include "GlobalNamespace/MainSettingsModelSO.hpp"
// Including type: MainSettingsModelSO/WindowMode
#include "GlobalNamespace/MainSettingsModelSO_WindowMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD8
  #pragma pack(push, 1)
  // Autogenerated type: MainSettingsModelSO/Config
  // [TokenAttribute] Offset: FFFFFFFF
  class MainSettingsModelSO::Config : public ::Il2CppObject {
    public:
    // public System.String version
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* version;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Int32 windowResolutionWidth
    // Size: 0x4
    // Offset: 0x18
    int windowResolutionWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 windowResolutionHeight
    // Size: 0x4
    // Offset: 0x1C
    int windowResolutionHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public MainSettingsModelSO/WindowMode windowMode
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::MainSettingsModelSO::WindowMode windowMode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MainSettingsModelSO::WindowMode) == 0x4);
    // public System.Single vrResolutionScale
    // Size: 0x4
    // Offset: 0x24
    float vrResolutionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single menuVRResolutionScaleMultiplier
    // Size: 0x4
    // Offset: 0x28
    float menuVRResolutionScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useFixedFoveatedRenderingDuringGameplay
    // Size: 0x1
    // Offset: 0x2C
    bool useFixedFoveatedRenderingDuringGameplay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useFixedFoveatedRenderingDuringGameplay and: antiAliasingLevel
    char __padding6[0x3] = {};
    // public System.Int32 antiAliasingLevel
    // Size: 0x4
    // Offset: 0x30
    int antiAliasingLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 mirrorGraphicsSettings
    // Size: 0x4
    // Offset: 0x34
    int mirrorGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 mainEffectGraphicsSettings
    // Size: 0x4
    // Offset: 0x38
    int mainEffectGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 bloomGraphicsSettings
    // Size: 0x4
    // Offset: 0x3C
    int bloomGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 smokeGraphicsSettings
    // Size: 0x4
    // Offset: 0x40
    int smokeGraphicsSettings;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean burnMarkTrailsEnabled
    // Size: 0x1
    // Offset: 0x44
    bool burnMarkTrailsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean screenDisplacementEffectsEnabled
    // Size: 0x1
    // Offset: 0x45
    bool screenDisplacementEffectsEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: screenDisplacementEffectsEnabled and: roomCenterX
    char __padding13[0x2] = {};
    // public System.Single roomCenterX
    // Size: 0x4
    // Offset: 0x48
    float roomCenterX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single roomCenterY
    // Size: 0x4
    // Offset: 0x4C
    float roomCenterY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single roomCenterZ
    // Size: 0x4
    // Offset: 0x50
    float roomCenterZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single roomRotation
    // Size: 0x4
    // Offset: 0x54
    float roomRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerPositionX
    // Size: 0x4
    // Offset: 0x58
    float controllerPositionX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerPositionY
    // Size: 0x4
    // Offset: 0x5C
    float controllerPositionY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerPositionZ
    // Size: 0x4
    // Offset: 0x60
    float controllerPositionZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerRotationX
    // Size: 0x4
    // Offset: 0x64
    float controllerRotationX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerRotationY
    // Size: 0x4
    // Offset: 0x68
    float controllerRotationY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single controllerRotationZ
    // Size: 0x4
    // Offset: 0x6C
    float controllerRotationZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 smoothCameraEnabled
    // Size: 0x4
    // Offset: 0x70
    int smoothCameraEnabled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single smoothCameraFieldOfView
    // Size: 0x4
    // Offset: 0x74
    float smoothCameraFieldOfView;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonPositionX
    // Size: 0x4
    // Offset: 0x78
    float smoothCameraThirdPersonPositionX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonPositionY
    // Size: 0x4
    // Offset: 0x7C
    float smoothCameraThirdPersonPositionY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonPositionZ
    // Size: 0x4
    // Offset: 0x80
    float smoothCameraThirdPersonPositionZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonEulerAnglesX
    // Size: 0x4
    // Offset: 0x84
    float smoothCameraThirdPersonEulerAnglesX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonEulerAnglesY
    // Size: 0x4
    // Offset: 0x88
    float smoothCameraThirdPersonEulerAnglesY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraThirdPersonEulerAnglesZ
    // Size: 0x4
    // Offset: 0x8C
    float smoothCameraThirdPersonEulerAnglesZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 smoothCameraThirdPersonEnabled
    // Size: 0x4
    // Offset: 0x90
    int smoothCameraThirdPersonEnabled;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single smoothCameraRotationSmooth
    // Size: 0x4
    // Offset: 0x94
    float smoothCameraRotationSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single smoothCameraPositionSmooth
    // Size: 0x4
    // Offset: 0x98
    float smoothCameraPositionSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useCustomServerEnvironment
    // Size: 0x1
    // Offset: 0x9C
    bool useCustomServerEnvironment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useCustomServerEnvironment and: customServerHostName
    char __padding35[0x3] = {};
    // public System.String customServerHostName
    // Size: 0x8
    // Offset: 0xA0
    ::Il2CppString* customServerHostName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Single volume
    // Size: 0x4
    // Offset: 0xA8
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single ambientVolumeScale
    // Size: 0x4
    // Offset: 0xAC
    float ambientVolumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean controllersRumbleEnabled
    // Size: 0x1
    // Offset: 0xB0
    bool controllersRumbleEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: controllersRumbleEnabled and: enableAlphaFeatures
    char __padding39[0x3] = {};
    // public System.Int32 enableAlphaFeatures
    // Size: 0x4
    // Offset: 0xB4
    int enableAlphaFeatures;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 pauseButtonPressDurationLevel
    // Size: 0x4
    // Offset: 0xB8
    int pauseButtonPressDurationLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 maxShockwaveParticles
    // Size: 0x4
    // Offset: 0xBC
    int maxShockwaveParticles;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean overrideAudioLatency
    // Size: 0x1
    // Offset: 0xC0
    bool overrideAudioLatency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideAudioLatency and: audioLatency
    char __padding43[0x3] = {};
    // public System.Single audioLatency
    // Size: 0x4
    // Offset: 0xC4
    float audioLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 maxNumberOfCutSoundEffects
    // Size: 0x4
    // Offset: 0xC8
    int maxNumberOfCutSoundEffects;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Boolean onlineServicesEnabled
    // Size: 0x1
    // Offset: 0xCC
    bool onlineServicesEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean oculusMRCEnabled
    // Size: 0x1
    // Offset: 0xCD
    bool oculusMRCEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean openVrThreadedHaptics
    // Size: 0x1
    // Offset: 0xCE
    bool openVrThreadedHaptics;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: openVrThreadedHaptics and: language
    char __padding48[0x1] = {};
    // public System.String language
    // Size: 0x8
    // Offset: 0xD0
    ::Il2CppString* language;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: Config
    Config(::Il2CppString* version_ = {}, int windowResolutionWidth_ = {}, int windowResolutionHeight_ = {}, GlobalNamespace::MainSettingsModelSO::WindowMode windowMode_ = {}, float vrResolutionScale_ = {}, float menuVRResolutionScaleMultiplier_ = {}, bool useFixedFoveatedRenderingDuringGameplay_ = {}, int antiAliasingLevel_ = {}, int mirrorGraphicsSettings_ = {}, int mainEffectGraphicsSettings_ = {}, int bloomGraphicsSettings_ = {}, int smokeGraphicsSettings_ = {}, bool burnMarkTrailsEnabled_ = {}, bool screenDisplacementEffectsEnabled_ = {}, float roomCenterX_ = {}, float roomCenterY_ = {}, float roomCenterZ_ = {}, float roomRotation_ = {}, float controllerPositionX_ = {}, float controllerPositionY_ = {}, float controllerPositionZ_ = {}, float controllerRotationX_ = {}, float controllerRotationY_ = {}, float controllerRotationZ_ = {}, int smoothCameraEnabled_ = {}, float smoothCameraFieldOfView_ = {}, float smoothCameraThirdPersonPositionX_ = {}, float smoothCameraThirdPersonPositionY_ = {}, float smoothCameraThirdPersonPositionZ_ = {}, float smoothCameraThirdPersonEulerAnglesX_ = {}, float smoothCameraThirdPersonEulerAnglesY_ = {}, float smoothCameraThirdPersonEulerAnglesZ_ = {}, int smoothCameraThirdPersonEnabled_ = {}, float smoothCameraRotationSmooth_ = {}, float smoothCameraPositionSmooth_ = {}, bool useCustomServerEnvironment_ = {}, ::Il2CppString* customServerHostName_ = {}, float volume_ = {}, float ambientVolumeScale_ = {}, bool controllersRumbleEnabled_ = {}, int enableAlphaFeatures_ = {}, int pauseButtonPressDurationLevel_ = {}, int maxShockwaveParticles_ = {}, bool overrideAudioLatency_ = {}, float audioLatency_ = {}, int maxNumberOfCutSoundEffects_ = {}, bool onlineServicesEnabled_ = {}, bool oculusMRCEnabled_ = {}, bool openVrThreadedHaptics_ = {}, ::Il2CppString* language_ = {}) noexcept : version{version_}, windowResolutionWidth{windowResolutionWidth_}, windowResolutionHeight{windowResolutionHeight_}, windowMode{windowMode_}, vrResolutionScale{vrResolutionScale_}, menuVRResolutionScaleMultiplier{menuVRResolutionScaleMultiplier_}, useFixedFoveatedRenderingDuringGameplay{useFixedFoveatedRenderingDuringGameplay_}, antiAliasingLevel{antiAliasingLevel_}, mirrorGraphicsSettings{mirrorGraphicsSettings_}, mainEffectGraphicsSettings{mainEffectGraphicsSettings_}, bloomGraphicsSettings{bloomGraphicsSettings_}, smokeGraphicsSettings{smokeGraphicsSettings_}, burnMarkTrailsEnabled{burnMarkTrailsEnabled_}, screenDisplacementEffectsEnabled{screenDisplacementEffectsEnabled_}, roomCenterX{roomCenterX_}, roomCenterY{roomCenterY_}, roomCenterZ{roomCenterZ_}, roomRotation{roomRotation_}, controllerPositionX{controllerPositionX_}, controllerPositionY{controllerPositionY_}, controllerPositionZ{controllerPositionZ_}, controllerRotationX{controllerRotationX_}, controllerRotationY{controllerRotationY_}, controllerRotationZ{controllerRotationZ_}, smoothCameraEnabled{smoothCameraEnabled_}, smoothCameraFieldOfView{smoothCameraFieldOfView_}, smoothCameraThirdPersonPositionX{smoothCameraThirdPersonPositionX_}, smoothCameraThirdPersonPositionY{smoothCameraThirdPersonPositionY_}, smoothCameraThirdPersonPositionZ{smoothCameraThirdPersonPositionZ_}, smoothCameraThirdPersonEulerAnglesX{smoothCameraThirdPersonEulerAnglesX_}, smoothCameraThirdPersonEulerAnglesY{smoothCameraThirdPersonEulerAnglesY_}, smoothCameraThirdPersonEulerAnglesZ{smoothCameraThirdPersonEulerAnglesZ_}, smoothCameraThirdPersonEnabled{smoothCameraThirdPersonEnabled_}, smoothCameraRotationSmooth{smoothCameraRotationSmooth_}, smoothCameraPositionSmooth{smoothCameraPositionSmooth_}, useCustomServerEnvironment{useCustomServerEnvironment_}, customServerHostName{customServerHostName_}, volume{volume_}, ambientVolumeScale{ambientVolumeScale_}, controllersRumbleEnabled{controllersRumbleEnabled_}, enableAlphaFeatures{enableAlphaFeatures_}, pauseButtonPressDurationLevel{pauseButtonPressDurationLevel_}, maxShockwaveParticles{maxShockwaveParticles_}, overrideAudioLatency{overrideAudioLatency_}, audioLatency{audioLatency_}, maxNumberOfCutSoundEffects{maxNumberOfCutSoundEffects_}, onlineServicesEnabled{onlineServicesEnabled_}, oculusMRCEnabled{oculusMRCEnabled_}, openVrThreadedHaptics{openVrThreadedHaptics_}, language{language_} {}
    // Get instance field reference: public System.String version
    ::Il2CppString*& dyn_version();
    // Get instance field reference: public System.Int32 windowResolutionWidth
    int& dyn_windowResolutionWidth();
    // Get instance field reference: public System.Int32 windowResolutionHeight
    int& dyn_windowResolutionHeight();
    // Get instance field reference: public MainSettingsModelSO/WindowMode windowMode
    GlobalNamespace::MainSettingsModelSO::WindowMode& dyn_windowMode();
    // Get instance field reference: public System.Single vrResolutionScale
    float& dyn_vrResolutionScale();
    // Get instance field reference: public System.Single menuVRResolutionScaleMultiplier
    float& dyn_menuVRResolutionScaleMultiplier();
    // Get instance field reference: public System.Boolean useFixedFoveatedRenderingDuringGameplay
    bool& dyn_useFixedFoveatedRenderingDuringGameplay();
    // Get instance field reference: public System.Int32 antiAliasingLevel
    int& dyn_antiAliasingLevel();
    // Get instance field reference: public System.Int32 mirrorGraphicsSettings
    int& dyn_mirrorGraphicsSettings();
    // Get instance field reference: public System.Int32 mainEffectGraphicsSettings
    int& dyn_mainEffectGraphicsSettings();
    // Get instance field reference: public System.Int32 bloomGraphicsSettings
    int& dyn_bloomGraphicsSettings();
    // Get instance field reference: public System.Int32 smokeGraphicsSettings
    int& dyn_smokeGraphicsSettings();
    // Get instance field reference: public System.Boolean burnMarkTrailsEnabled
    bool& dyn_burnMarkTrailsEnabled();
    // Get instance field reference: public System.Boolean screenDisplacementEffectsEnabled
    bool& dyn_screenDisplacementEffectsEnabled();
    // Get instance field reference: public System.Single roomCenterX
    float& dyn_roomCenterX();
    // Get instance field reference: public System.Single roomCenterY
    float& dyn_roomCenterY();
    // Get instance field reference: public System.Single roomCenterZ
    float& dyn_roomCenterZ();
    // Get instance field reference: public System.Single roomRotation
    float& dyn_roomRotation();
    // Get instance field reference: public System.Single controllerPositionX
    float& dyn_controllerPositionX();
    // Get instance field reference: public System.Single controllerPositionY
    float& dyn_controllerPositionY();
    // Get instance field reference: public System.Single controllerPositionZ
    float& dyn_controllerPositionZ();
    // Get instance field reference: public System.Single controllerRotationX
    float& dyn_controllerRotationX();
    // Get instance field reference: public System.Single controllerRotationY
    float& dyn_controllerRotationY();
    // Get instance field reference: public System.Single controllerRotationZ
    float& dyn_controllerRotationZ();
    // Get instance field reference: public System.Int32 smoothCameraEnabled
    int& dyn_smoothCameraEnabled();
    // Get instance field reference: public System.Single smoothCameraFieldOfView
    float& dyn_smoothCameraFieldOfView();
    // Get instance field reference: public System.Single smoothCameraThirdPersonPositionX
    float& dyn_smoothCameraThirdPersonPositionX();
    // Get instance field reference: public System.Single smoothCameraThirdPersonPositionY
    float& dyn_smoothCameraThirdPersonPositionY();
    // Get instance field reference: public System.Single smoothCameraThirdPersonPositionZ
    float& dyn_smoothCameraThirdPersonPositionZ();
    // Get instance field reference: public System.Single smoothCameraThirdPersonEulerAnglesX
    float& dyn_smoothCameraThirdPersonEulerAnglesX();
    // Get instance field reference: public System.Single smoothCameraThirdPersonEulerAnglesY
    float& dyn_smoothCameraThirdPersonEulerAnglesY();
    // Get instance field reference: public System.Single smoothCameraThirdPersonEulerAnglesZ
    float& dyn_smoothCameraThirdPersonEulerAnglesZ();
    // Get instance field reference: public System.Int32 smoothCameraThirdPersonEnabled
    int& dyn_smoothCameraThirdPersonEnabled();
    // Get instance field reference: public System.Single smoothCameraRotationSmooth
    float& dyn_smoothCameraRotationSmooth();
    // Get instance field reference: public System.Single smoothCameraPositionSmooth
    float& dyn_smoothCameraPositionSmooth();
    // Get instance field reference: public System.Boolean useCustomServerEnvironment
    bool& dyn_useCustomServerEnvironment();
    // Get instance field reference: public System.String customServerHostName
    ::Il2CppString*& dyn_customServerHostName();
    // Get instance field reference: public System.Single volume
    float& dyn_volume();
    // Get instance field reference: public System.Single ambientVolumeScale
    float& dyn_ambientVolumeScale();
    // Get instance field reference: public System.Boolean controllersRumbleEnabled
    bool& dyn_controllersRumbleEnabled();
    // Get instance field reference: public System.Int32 enableAlphaFeatures
    int& dyn_enableAlphaFeatures();
    // Get instance field reference: public System.Int32 pauseButtonPressDurationLevel
    int& dyn_pauseButtonPressDurationLevel();
    // Get instance field reference: public System.Int32 maxShockwaveParticles
    int& dyn_maxShockwaveParticles();
    // Get instance field reference: public System.Boolean overrideAudioLatency
    bool& dyn_overrideAudioLatency();
    // Get instance field reference: public System.Single audioLatency
    float& dyn_audioLatency();
    // Get instance field reference: public System.Int32 maxNumberOfCutSoundEffects
    int& dyn_maxNumberOfCutSoundEffects();
    // Get instance field reference: public System.Boolean onlineServicesEnabled
    bool& dyn_onlineServicesEnabled();
    // Get instance field reference: public System.Boolean oculusMRCEnabled
    bool& dyn_oculusMRCEnabled();
    // Get instance field reference: public System.Boolean openVrThreadedHaptics
    bool& dyn_openVrThreadedHaptics();
    // Get instance field reference: public System.String language
    ::Il2CppString*& dyn_language();
    // public System.Void .ctor()
    // Offset: 0x12644A8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainSettingsModelSO::Config* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainSettingsModelSO::Config::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainSettingsModelSO::Config*, creationType>()));
    }
  }; // MainSettingsModelSO/Config
  #pragma pack(pop)
  static check_size<sizeof(MainSettingsModelSO::Config), 208 + sizeof(::Il2CppString*)> __GlobalNamespace_MainSettingsModelSO_ConfigSizeCheck;
  static_assert(sizeof(MainSettingsModelSO::Config) == 0xD8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MainSettingsModelSO::Config*, "", "MainSettingsModelSO/Config");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MainSettingsModelSO::Config::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
