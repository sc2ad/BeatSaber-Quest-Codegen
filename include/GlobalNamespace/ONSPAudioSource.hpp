// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ONSPAudioSource
  class ONSPAudioSource;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ONSPAudioSource);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ONSPAudioSource*, "", "ONSPAudioSource");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x35
  #pragma pack(push, 1)
  // Autogenerated type: ONSPAudioSource
  // [TokenAttribute] Offset: FFFFFFFF
  class ONSPAudioSource : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ONSPAudioSource::Parameters
    struct Parameters;
    public:
    // private System.Boolean enableSpatialization
    // Size: 0x1
    // Offset: 0x18
    bool enableSpatialization;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableSpatialization and: gain
    char __padding0[0x3] = {};
    // private System.Single gain
    // Size: 0x4
    // Offset: 0x1C
    float gain;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean useInvSqr
    // Size: 0x1
    // Offset: 0x20
    bool useInvSqr;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useInvSqr and: near
    char __padding2[0x3] = {};
    // private System.Single near
    // Size: 0x4
    // Offset: 0x24
    float near;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single far
    // Size: 0x4
    // Offset: 0x28
    float far;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single volumetricRadius
    // Size: 0x4
    // Offset: 0x2C
    float volumetricRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single reverbSend
    // Size: 0x4
    // Offset: 0x30
    float reverbSend;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean enableRfl
    // Size: 0x1
    // Offset: 0x34
    bool enableRfl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String strONSPS
    static constexpr const char* strONSPS = "AudioPluginOculusSpatializer";
    // Get static field: static public System.String strONSPS
    static ::StringW _get_strONSPS();
    // Set static field: static public System.String strONSPS
    static void _set_strONSPS(::StringW value);
    // Get static field: static private ONSPAudioSource RoomReflectionGizmoAS
    static ::GlobalNamespace::ONSPAudioSource* _get_RoomReflectionGizmoAS();
    // Set static field: static private ONSPAudioSource RoomReflectionGizmoAS
    static void _set_RoomReflectionGizmoAS(::GlobalNamespace::ONSPAudioSource* value);
    // Get instance field reference: private System.Boolean enableSpatialization
    [[deprecated("Use field access instead!")]] bool& dyn_enableSpatialization();
    // Get instance field reference: private System.Single gain
    [[deprecated("Use field access instead!")]] float& dyn_gain();
    // Get instance field reference: private System.Boolean useInvSqr
    [[deprecated("Use field access instead!")]] bool& dyn_useInvSqr();
    // Get instance field reference: private System.Single near
    [[deprecated("Use field access instead!")]] float& dyn_near();
    // Get instance field reference: private System.Single far
    [[deprecated("Use field access instead!")]] float& dyn_far();
    // Get instance field reference: private System.Single volumetricRadius
    [[deprecated("Use field access instead!")]] float& dyn_volumetricRadius();
    // Get instance field reference: private System.Single reverbSend
    [[deprecated("Use field access instead!")]] float& dyn_reverbSend();
    // Get instance field reference: private System.Boolean enableRfl
    [[deprecated("Use field access instead!")]] bool& dyn_enableRfl();
    // public System.Boolean get_EnableSpatialization()
    // Offset: 0x137DA34
    bool get_EnableSpatialization();
    // public System.Void set_EnableSpatialization(System.Boolean value)
    // Offset: 0x137DA3C
    void set_EnableSpatialization(bool value);
    // public System.Single get_Gain()
    // Offset: 0x137DA48
    float get_Gain();
    // public System.Void set_Gain(System.Single value)
    // Offset: 0x137DA50
    void set_Gain(float value);
    // public System.Boolean get_UseInvSqr()
    // Offset: 0x137DAD4
    bool get_UseInvSqr();
    // public System.Void set_UseInvSqr(System.Boolean value)
    // Offset: 0x137DADC
    void set_UseInvSqr(bool value);
    // public System.Single get_Near()
    // Offset: 0x137DAE8
    float get_Near();
    // public System.Void set_Near(System.Single value)
    // Offset: 0x137DAF0
    void set_Near(float value);
    // public System.Single get_Far()
    // Offset: 0x137DB78
    float get_Far();
    // public System.Void set_Far(System.Single value)
    // Offset: 0x137DB80
    void set_Far(float value);
    // public System.Single get_VolumetricRadius()
    // Offset: 0x137DC08
    float get_VolumetricRadius();
    // public System.Void set_VolumetricRadius(System.Single value)
    // Offset: 0x137DC10
    void set_VolumetricRadius(float value);
    // public System.Single get_ReverbSend()
    // Offset: 0x137DC98
    float get_ReverbSend();
    // public System.Void set_ReverbSend(System.Single value)
    // Offset: 0x137DCA0
    void set_ReverbSend(float value);
    // public System.Boolean get_EnableRfl()
    // Offset: 0x137DD28
    bool get_EnableRfl();
    // public System.Void set_EnableRfl(System.Boolean value)
    // Offset: 0x137DD30
    void set_EnableRfl(bool value);
    // public System.Void .ctor()
    // Offset: 0x137E4AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ONSPAudioSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ONSPAudioSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ONSPAudioSource*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x137E4C8
    static void _cctor();
    // static private System.Void OnBeforeSceneLoadRuntimeMethod()
    // Offset: 0x137D74C
    static void OnBeforeSceneLoadRuntimeMethod();
    // static private System.Void ONSP_GetGlobalRoomReflectionValues(ref System.Boolean reflOn, ref System.Boolean reverbOn, ref System.Single width, ref System.Single height, ref System.Single length)
    // Offset: 0x137D954
    static void ONSP_GetGlobalRoomReflectionValues(ByRef<bool> reflOn, ByRef<bool> reverbOn, ByRef<float> width, ByRef<float> height, ByRef<float> length);
    // private System.Void Awake()
    // Offset: 0x137DD3C
    void Awake();
    // private System.Void Start()
    // Offset: 0x137DEB0
    void Start();
    // private System.Void Update()
    // Offset: 0x137DEB4
    void Update();
    // public System.Void SetParameters(ref UnityEngine.AudioSource source)
    // Offset: 0x137DDA8
    void SetParameters(ByRef<::UnityEngine::AudioSource*> source);
    // private System.Void OnDrawGizmos()
    // Offset: 0x137DF7C
    void OnDrawGizmos();
    // private System.Void OnDestroy()
    // Offset: 0x137E3DC
    void OnDestroy();
    // static private System.Int32 OSP_SetGlobalVoiceLimit(System.Int32 VoiceLimit)
    // Offset: 0x137D8D4
    static int OSP_SetGlobalVoiceLimit(int VoiceLimit);
  }; // ONSPAudioSource
  #pragma pack(pop)
  static check_size<sizeof(ONSPAudioSource), 52 + sizeof(bool)> __GlobalNamespace_ONSPAudioSourceSizeCheck;
  static_assert(sizeof(ONSPAudioSource) == 0x35);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_EnableSpatialization
// Il2CppName: get_EnableSpatialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_EnableSpatialization)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_EnableSpatialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_EnableSpatialization
// Il2CppName: set_EnableSpatialization
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(bool)>(&GlobalNamespace::ONSPAudioSource::set_EnableSpatialization)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_EnableSpatialization", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_Gain
// Il2CppName: get_Gain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_Gain)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_Gain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_Gain
// Il2CppName: set_Gain
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(float)>(&GlobalNamespace::ONSPAudioSource::set_Gain)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_Gain", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_UseInvSqr
// Il2CppName: get_UseInvSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_UseInvSqr)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_UseInvSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_UseInvSqr
// Il2CppName: set_UseInvSqr
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(bool)>(&GlobalNamespace::ONSPAudioSource::set_UseInvSqr)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_UseInvSqr", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_Near
// Il2CppName: get_Near
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_Near)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_Near", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_Near
// Il2CppName: set_Near
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(float)>(&GlobalNamespace::ONSPAudioSource::set_Near)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_Near", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_Far
// Il2CppName: get_Far
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_Far)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_Far", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_Far
// Il2CppName: set_Far
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(float)>(&GlobalNamespace::ONSPAudioSource::set_Far)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_Far", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_VolumetricRadius
// Il2CppName: get_VolumetricRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_VolumetricRadius)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_VolumetricRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_VolumetricRadius
// Il2CppName: set_VolumetricRadius
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(float)>(&GlobalNamespace::ONSPAudioSource::set_VolumetricRadius)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_VolumetricRadius", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_ReverbSend
// Il2CppName: get_ReverbSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_ReverbSend)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_ReverbSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_ReverbSend
// Il2CppName: set_ReverbSend
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(float)>(&GlobalNamespace::ONSPAudioSource::set_ReverbSend)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_ReverbSend", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::get_EnableRfl
// Il2CppName: get_EnableRfl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::get_EnableRfl)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "get_EnableRfl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::set_EnableRfl
// Il2CppName: set_EnableRfl
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(bool)>(&GlobalNamespace::ONSPAudioSource::set_EnableRfl)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "set_EnableRfl", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ONSPAudioSource::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::OnBeforeSceneLoadRuntimeMethod
// Il2CppName: OnBeforeSceneLoadRuntimeMethod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::ONSPAudioSource::OnBeforeSceneLoadRuntimeMethod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "OnBeforeSceneLoadRuntimeMethod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::ONSP_GetGlobalRoomReflectionValues
// Il2CppName: ONSP_GetGlobalRoomReflectionValues
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<bool>, ByRef<bool>, ByRef<float>, ByRef<float>, ByRef<float>)>(&GlobalNamespace::ONSPAudioSource::ONSP_GetGlobalRoomReflectionValues)> {
  static const MethodInfo* get() {
    static auto* reflOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* reverbOn = &::il2cpp_utils::GetClassFromName("System", "Boolean")->this_arg;
    static auto* width = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* height = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    static auto* length = &::il2cpp_utils::GetClassFromName("System", "Single")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "ONSP_GetGlobalRoomReflectionValues", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{reflOn, reverbOn, width, height, length});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::SetParameters
// Il2CppName: SetParameters
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)(ByRef<::UnityEngine::AudioSource*>)>(&GlobalNamespace::ONSPAudioSource::SetParameters)> {
  static const MethodInfo* get() {
    static auto* source = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioSource")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "SetParameters", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{source});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::OnDrawGizmos
// Il2CppName: OnDrawGizmos
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::OnDrawGizmos)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "OnDrawGizmos", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ONSPAudioSource::*)()>(&GlobalNamespace::ONSPAudioSource::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ONSPAudioSource::OSP_SetGlobalVoiceLimit
// Il2CppName: OSP_SetGlobalVoiceLimit
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (*)(int)>(&GlobalNamespace::ONSPAudioSource::OSP_SetGlobalVoiceLimit)> {
  static const MethodInfo* get() {
    static auto* VoiceLimit = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ONSPAudioSource*), "OSP_SetGlobalVoiceLimit", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{VoiceLimit});
  }
};
