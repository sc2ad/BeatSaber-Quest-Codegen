// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: TeleportTransition
#include "GlobalNamespace/TeleportTransition.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: TeleportTransitionWarp
  class TeleportTransitionWarp;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::TeleportTransitionWarp);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::TeleportTransitionWarp*, "", "TeleportTransitionWarp");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: TeleportTransitionWarp
  // [TokenAttribute] Offset: FFFFFFFF
  class TeleportTransitionWarp : public ::GlobalNamespace::TeleportTransition {
    public:
    // Writing base type padding for base size: 0x21 to desired offset: 0x24
    char ___base_padding[0x3] = {};
    // Nested type: ::GlobalNamespace::TeleportTransitionWarp::$DoWarp$d__3
    class $DoWarp$d__3;
    public:
    // [TooltipAttribute] Offset: 0x99440C
    // [RangeAttribute] Offset: 0x99440C
    // public System.Single TransitionDuration
    // Size: 0x4
    // Offset: 0x24
    float TransitionDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.AnimationCurve PositionLerp
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::AnimationCurve* PositionLerp;
    // Field size check
    static_assert(sizeof(::UnityEngine::AnimationCurve*) == 0x8);
    public:
    // Get instance field reference: public System.Single TransitionDuration
    [[deprecated("Use field access instead!")]] float& dyn_TransitionDuration();
    // Get instance field reference: public UnityEngine.AnimationCurve PositionLerp
    [[deprecated("Use field access instead!")]] ::UnityEngine::AnimationCurve*& dyn_PositionLerp();
    // private System.Collections.IEnumerator DoWarp()
    // Offset: 0xCF7F14
    ::System::Collections::IEnumerator* DoWarp();
    // public System.Void .ctor()
    // Offset: 0xCF7FB0
    // Implemented from: TeleportTransition
    // Base method: System.Void TeleportTransition::.ctor()
    // Base method: System.Void TeleportSupport::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TeleportTransitionWarp* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::TeleportTransitionWarp::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TeleportTransitionWarp*, creationType>()));
    }
    // protected override System.Void LocomotionTeleportOnEnterStateTeleporting()
    // Offset: 0xCF7EE8
    // Implemented from: TeleportTransition
    // Base method: System.Void TeleportTransition::LocomotionTeleportOnEnterStateTeleporting()
    void LocomotionTeleportOnEnterStateTeleporting();
  }; // TeleportTransitionWarp
  #pragma pack(pop)
  static check_size<sizeof(TeleportTransitionWarp), 40 + sizeof(::UnityEngine::AnimationCurve*)> __GlobalNamespace_TeleportTransitionWarpSizeCheck;
  static_assert(sizeof(TeleportTransitionWarp) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::TeleportTransitionWarp::DoWarp
// Il2CppName: DoWarp
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::TeleportTransitionWarp::*)()>(&GlobalNamespace::TeleportTransitionWarp::DoWarp)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportTransitionWarp*), "DoWarp", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::TeleportTransitionWarp::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::TeleportTransitionWarp::LocomotionTeleportOnEnterStateTeleporting
// Il2CppName: LocomotionTeleportOnEnterStateTeleporting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::TeleportTransitionWarp::*)()>(&GlobalNamespace::TeleportTransitionWarp::LocomotionTeleportOnEnterStateTeleporting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::TeleportTransitionWarp*), "LocomotionTeleportOnEnterStateTeleporting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
