// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ISortedListItemProcessor`1
#include "GlobalNamespace/ISortedListItemProcessor_1.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroup
  class BeatmapEventDataBoxGroup;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IReadOnlyCollection`1<T>
  template<typename T>
  class IReadOnlyCollection_1;
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventDataBoxGroupProcessor
  class BeatmapEventDataBoxGroupProcessor;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapEventDataBoxGroupProcessor);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapEventDataBoxGroupProcessor*, "", "BeatmapEventDataBoxGroupProcessor");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapEventDataBoxGroupProcessor
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapEventDataBoxGroupProcessor : public ::Il2CppObject/*, public ::GlobalNamespace::ISortedListItemProcessor_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*/ {
    public:
    public:
    // private readonly System.Collections.Generic.HashSet`1<BeatmapEventDataBoxGroup> _dirtyBoxGroups
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* dirtyBoxGroups;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::ISortedListItemProcessor_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>
    operator ::GlobalNamespace::ISortedListItemProcessor_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ISortedListItemProcessor_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*>(this);
    }
    // Creating interface conversion operator: i_BeatmapEventDataBoxGroup
    inline ::GlobalNamespace::ISortedListItemProcessor_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* i_BeatmapEventDataBoxGroup() noexcept {
      return reinterpret_cast<::GlobalNamespace::ISortedListItemProcessor_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*>(this);
    }
    // Creating conversion operator: operator ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*
    constexpr operator ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*() const noexcept {
      return dirtyBoxGroups;
    }
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<BeatmapEventDataBoxGroup> _dirtyBoxGroups
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*& dyn__dirtyBoxGroups();
    // public System.Collections.Generic.IReadOnlyCollection`1<BeatmapEventDataBoxGroup> get_dirtyBoxGroups()
    // Offset: 0x1535A58
    ::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* get_dirtyBoxGroups();
    // public System.Void .ctor()
    // Offset: 0x1534D30
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapEventDataBoxGroupProcessor* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapEventDataBoxGroupProcessor::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapEventDataBoxGroupProcessor*, creationType>()));
    }
    // public System.Void ProcessInsertedData(System.Collections.Generic.LinkedListNode`1<BeatmapEventDataBoxGroup> insertedNode)
    // Offset: 0x1535A60
    void ProcessInsertedData(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* insertedNode);
    // public System.Void ProcessBeforeDeleteData(System.Collections.Generic.LinkedListNode`1<BeatmapEventDataBoxGroup> nodeToDelete)
    // Offset: 0x1535F94
    void ProcessBeforeDeleteData(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* nodeToDelete);
    // public System.Void ClearDirtyData()
    // Offset: 0x15350E4
    void ClearDirtyData();
  }; // BeatmapEventDataBoxGroupProcessor
  #pragma pack(pop)
  static check_size<sizeof(BeatmapEventDataBoxGroupProcessor), 16 + sizeof(::System::Collections::Generic::HashSet_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*)> __GlobalNamespace_BeatmapEventDataBoxGroupProcessorSizeCheck;
  static_assert(sizeof(BeatmapEventDataBoxGroupProcessor) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupProcessor::get_dirtyBoxGroups
// Il2CppName: get_dirtyBoxGroups
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyCollection_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>* (GlobalNamespace::BeatmapEventDataBoxGroupProcessor::*)()>(&GlobalNamespace::BeatmapEventDataBoxGroupProcessor::get_dirtyBoxGroups)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupProcessor*), "get_dirtyBoxGroups", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupProcessor::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessInsertedData
// Il2CppName: ProcessInsertedData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroupProcessor::*)(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*)>(&GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessInsertedData)> {
  static const MethodInfo* get() {
    static auto* insertedNode = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBoxGroup")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupProcessor*), "ProcessInsertedData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{insertedNode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessBeforeDeleteData
// Il2CppName: ProcessBeforeDeleteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroupProcessor::*)(::System::Collections::Generic::LinkedListNode_1<::GlobalNamespace::BeatmapEventDataBoxGroup*>*)>(&GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ProcessBeforeDeleteData)> {
  static const MethodInfo* get() {
    static auto* nodeToDelete = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "LinkedListNode`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventDataBoxGroup")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupProcessor*), "ProcessBeforeDeleteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{nodeToDelete});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ClearDirtyData
// Il2CppName: ClearDirtyData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapEventDataBoxGroupProcessor::*)()>(&GlobalNamespace::BeatmapEventDataBoxGroupProcessor::ClearDirtyData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapEventDataBoxGroupProcessor*), "ClearDirtyData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
