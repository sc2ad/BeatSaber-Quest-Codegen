// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MissionNodesManager
  class MissionNodesManager;
  // Forward declaring type: MenuShockwave
  class MenuShockwave;
  // Forward declaring type: MissionNode
  class MissionNode;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScrollView
  class ScrollView;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MissionMapAnimationController
  class MissionMapAnimationController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MissionMapAnimationController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MissionMapAnimationController*, "", "MissionMapAnimationController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: MissionMapAnimationController
  // [TokenAttribute] Offset: FFFFFFFF
  class MissionMapAnimationController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MissionMapAnimationController::$UpdateMissionMapCoroutine$d__12
    class $UpdateMissionMapCoroutine$d__12;
    // Nested type: ::GlobalNamespace::MissionMapAnimationController::$UpdateClearedNodeStateCoroutine$d__13
    class $UpdateClearedNodeStateCoroutine$d__13;
    // Nested type: ::GlobalNamespace::MissionMapAnimationController::$UpdateStageCoroutine$d__14
    class $UpdateStageCoroutine$d__14;
    // Nested type: ::GlobalNamespace::MissionMapAnimationController::$$c
    class $$c;
    // Nested type: ::GlobalNamespace::MissionMapAnimationController::$UpdateNodesAndConnectionCoroutine$d__15
    class $UpdateNodesAndConnectionCoroutine$d__15;
    public:
    // private MissionNodesManager _missionNodesManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MissionNodesManager* missionNodesManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MissionNodesManager*) == 0x8);
    // private HMUI.ScrollView _mapScrollView
    // Size: 0x8
    // Offset: 0x20
    ::HMUI::ScrollView* mapScrollView;
    // Field size check
    static_assert(sizeof(::HMUI::ScrollView*) == 0x8);
    // [SpaceAttribute] Offset: 0x10E8C30
    // private System.Single _startDelay
    // Size: 0x4
    // Offset: 0x28
    float startDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _stageAnimationStartDelay
    // Size: 0x4
    // Offset: 0x2C
    float stageAnimationStartDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _missionConnectionAnimationStartDelay
    // Size: 0x4
    // Offset: 0x30
    float missionConnectionAnimationStartDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _missionConnectionAnimationSeparationTime
    // Size: 0x4
    // Offset: 0x34
    float missionConnectionAnimationSeparationTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _stageAnimationDuration
    // Size: 0x4
    // Offset: 0x38
    float stageAnimationDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: stageAnimationDuration and: shockwaveEffect
    char __padding6[0x4] = {};
    // [InjectAttribute] Offset: 0x10E8CA8
    // private MenuShockwave _shockwaveEffect
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::MenuShockwave* shockwaveEffect;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MenuShockwave*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MissionNodesManager _missionNodesManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MissionNodesManager*& dyn__missionNodesManager();
    // Get instance field reference: private HMUI.ScrollView _mapScrollView
    [[deprecated("Use field access instead!")]] ::HMUI::ScrollView*& dyn__mapScrollView();
    // Get instance field reference: private System.Single _startDelay
    [[deprecated("Use field access instead!")]] float& dyn__startDelay();
    // Get instance field reference: private System.Single _stageAnimationStartDelay
    [[deprecated("Use field access instead!")]] float& dyn__stageAnimationStartDelay();
    // Get instance field reference: private System.Single _missionConnectionAnimationStartDelay
    [[deprecated("Use field access instead!")]] float& dyn__missionConnectionAnimationStartDelay();
    // Get instance field reference: private System.Single _missionConnectionAnimationSeparationTime
    [[deprecated("Use field access instead!")]] float& dyn__missionConnectionAnimationSeparationTime();
    // Get instance field reference: private System.Single _stageAnimationDuration
    [[deprecated("Use field access instead!")]] float& dyn__stageAnimationDuration();
    // Get instance field reference: private MenuShockwave _shockwaveEffect
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MenuShockwave*& dyn__shockwaveEffect();
    // public System.Boolean get_animatedUpdateIsRequired()
    // Offset: 0x130BCB0
    bool get_animatedUpdateIsRequired();
    // public System.Void .ctor()
    // Offset: 0x130C404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MissionMapAnimationController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MissionMapAnimationController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MissionMapAnimationController*, creationType>()));
    }
    // public System.Void ScrollToTopMostNotClearedMission()
    // Offset: 0x130BDF8
    void ScrollToTopMostNotClearedMission();
    // public System.Void UpdateMissionMapAfterMissionWasCleared(System.Boolean animated, System.Action finishCallback)
    // Offset: 0x130C038
    void UpdateMissionMapAfterMissionWasCleared(bool animated, ::System::Action* finishCallback);
    // private System.Collections.IEnumerator UpdateMissionMapCoroutine(MissionNode lastClearedMissionNode, System.Action finishCallback)
    // Offset: 0x130C174
    ::System::Collections::IEnumerator* UpdateMissionMapCoroutine(::GlobalNamespace::MissionNode* lastClearedMissionNode, ::System::Action* finishCallback);
    // private System.Collections.IEnumerator UpdateClearedNodeStateCoroutine(MissionNode lastClearedMissionNode)
    // Offset: 0x130C224
    ::System::Collections::IEnumerator* UpdateClearedNodeStateCoroutine(::GlobalNamespace::MissionNode* lastClearedMissionNode);
    // private System.Collections.IEnumerator UpdateStageCoroutine()
    // Offset: 0x130C2CC
    ::System::Collections::IEnumerator* UpdateStageCoroutine();
    // private System.Collections.IEnumerator UpdateNodesAndConnectionCoroutine()
    // Offset: 0x130C368
    ::System::Collections::IEnumerator* UpdateNodesAndConnectionCoroutine();
  }; // MissionMapAnimationController
  #pragma pack(pop)
  static check_size<sizeof(MissionMapAnimationController), 64 + sizeof(::GlobalNamespace::MenuShockwave*)> __GlobalNamespace_MissionMapAnimationControllerSizeCheck;
  static_assert(sizeof(MissionMapAnimationController) == 0x48);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::get_animatedUpdateIsRequired
// Il2CppName: get_animatedUpdateIsRequired
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MissionMapAnimationController::*)()>(&GlobalNamespace::MissionMapAnimationController::get_animatedUpdateIsRequired)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "get_animatedUpdateIsRequired", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::ScrollToTopMostNotClearedMission
// Il2CppName: ScrollToTopMostNotClearedMission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionMapAnimationController::*)()>(&GlobalNamespace::MissionMapAnimationController::ScrollToTopMostNotClearedMission)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "ScrollToTopMostNotClearedMission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::UpdateMissionMapAfterMissionWasCleared
// Il2CppName: UpdateMissionMapAfterMissionWasCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MissionMapAnimationController::*)(bool, ::System::Action*)>(&GlobalNamespace::MissionMapAnimationController::UpdateMissionMapAfterMissionWasCleared)> {
  static const MethodInfo* get() {
    static auto* animated = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "UpdateMissionMapAfterMissionWasCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{animated, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::UpdateMissionMapCoroutine
// Il2CppName: UpdateMissionMapCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MissionMapAnimationController::*)(::GlobalNamespace::MissionNode*, ::System::Action*)>(&GlobalNamespace::MissionMapAnimationController::UpdateMissionMapCoroutine)> {
  static const MethodInfo* get() {
    static auto* lastClearedMissionNode = &::il2cpp_utils::GetClassFromName("", "MissionNode")->byval_arg;
    static auto* finishCallback = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "UpdateMissionMapCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastClearedMissionNode, finishCallback});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::UpdateClearedNodeStateCoroutine
// Il2CppName: UpdateClearedNodeStateCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MissionMapAnimationController::*)(::GlobalNamespace::MissionNode*)>(&GlobalNamespace::MissionMapAnimationController::UpdateClearedNodeStateCoroutine)> {
  static const MethodInfo* get() {
    static auto* lastClearedMissionNode = &::il2cpp_utils::GetClassFromName("", "MissionNode")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "UpdateClearedNodeStateCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{lastClearedMissionNode});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::UpdateStageCoroutine
// Il2CppName: UpdateStageCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MissionMapAnimationController::*)()>(&GlobalNamespace::MissionMapAnimationController::UpdateStageCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "UpdateStageCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MissionMapAnimationController::UpdateNodesAndConnectionCoroutine
// Il2CppName: UpdateNodesAndConnectionCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MissionMapAnimationController::*)()>(&GlobalNamespace::MissionMapAnimationController::UpdateNodesAndConnectionCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MissionMapAnimationController*), "UpdateNodesAndConnectionCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
