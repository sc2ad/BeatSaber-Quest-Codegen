// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightIdsRange
#include "GlobalNamespace/LightIdsRange.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightGroup
  class LightGroup;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightGroup);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightGroup*, "", "LightGroup");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: LightGroup
  // [TokenAttribute] Offset: FFFFFFFF
  class LightGroup : public ::GlobalNamespace::LightIdsRange {
    public:
    public:
    // private System.Int32 _groupId
    // Size: 0x4
    // Offset: 0x20
    int groupId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: groupId and: didRefreshContentEvent
    char __padding0[0x4] = {};
    // private System.Action didRefreshContentEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action* didRefreshContentEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // Get instance field reference: private System.Int32 _groupId
    [[deprecated("Use field access instead!")]] int& dyn__groupId();
    // Get instance field reference: private System.Action didRefreshContentEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didRefreshContentEvent();
    // public System.Int32 get_groupId()
    // Offset: 0x1E7FF50
    int get_groupId();
    // public System.Void add_didRefreshContentEvent(System.Action value)
    // Offset: 0x1E7FE08
    void add_didRefreshContentEvent(::System::Action* value);
    // public System.Void remove_didRefreshContentEvent(System.Action value)
    // Offset: 0x1E7FEAC
    void remove_didRefreshContentEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x1E7FF58
    // Implemented from: LightIdsRange
    // Base method: System.Void LightIdsRange::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightGroup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightGroup*, creationType>()));
    }
  }; // LightGroup
  #pragma pack(pop)
  static check_size<sizeof(LightGroup), 40 + sizeof(::System::Action*)> __GlobalNamespace_LightGroupSizeCheck;
  static_assert(sizeof(LightGroup) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightGroup::get_groupId
// Il2CppName: get_groupId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightGroup::*)()>(&GlobalNamespace::LightGroup::get_groupId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroup*), "get_groupId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroup::add_didRefreshContentEvent
// Il2CppName: add_didRefreshContentEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightGroup::*)(::System::Action*)>(&GlobalNamespace::LightGroup::add_didRefreshContentEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroup*), "add_didRefreshContentEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroup::remove_didRefreshContentEvent
// Il2CppName: remove_didRefreshContentEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightGroup::*)(::System::Action*)>(&GlobalNamespace::LightGroup::remove_didRefreshContentEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightGroup*), "remove_didRefreshContentEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightGroup::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
