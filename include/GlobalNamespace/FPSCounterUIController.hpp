// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
  // Forward declaring type: FPSCounter
  class FPSCounter;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: FPSCounterUIController
  class FPSCounterUIController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::FPSCounterUIController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::FPSCounterUIController*, "", "FPSCounterUIController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: FPSCounterUIController
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: 10D555C
  class FPSCounterUIController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::FPSCounterUIController::$Start$d__9
    class $Start$d__9;
    public:
    // private System.Single _uiUpdateTimeInterval
    // Size: 0x4
    // Offset: 0x18
    float uiUpdateTimeInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: uiUpdateTimeInterval and: currentFPSText
    char __padding0[0x4] = {};
    // private TMPro.TextMeshProUGUI _currentFPSText
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshProUGUI* currentFPSText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _lowestFPSText
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshProUGUI* lowestFPSText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _highestFPSText
    // Size: 0x8
    // Offset: 0x30
    ::TMPro::TextMeshProUGUI* highestFPSText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _droppedFramesText
    // Size: 0x8
    // Offset: 0x38
    ::TMPro::TextMeshProUGUI* droppedFramesText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // [InjectAttribute] Offset: 0x10E6024
    // private readonly GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameScenesManager*) == 0x8);
    // private FPSCounter _fpsCounter
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::FPSCounter* fpsCounter;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FPSCounter*) == 0x8);
    // private System.Single _timeToUpdateUI
    // Size: 0x4
    // Offset: 0x50
    float timeToUpdateUI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _uiUpdateTimeInterval
    [[deprecated("Use field access instead!")]] float& dyn__uiUpdateTimeInterval();
    // Get instance field reference: private TMPro.TextMeshProUGUI _currentFPSText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__currentFPSText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _lowestFPSText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__lowestFPSText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _highestFPSText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__highestFPSText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _droppedFramesText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__droppedFramesText();
    // Get instance field reference: private readonly GameScenesManager _gameScenesManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameScenesManager*& dyn__gameScenesManager();
    // Get instance field reference: private FPSCounter _fpsCounter
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FPSCounter*& dyn__fpsCounter();
    // Get instance field reference: private System.Single _timeToUpdateUI
    [[deprecated("Use field access instead!")]] float& dyn__timeToUpdateUI();
    // public System.Void .ctor()
    // Offset: 0x137AEE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FPSCounterUIController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::FPSCounterUIController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FPSCounterUIController*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x137ACC0
    void Awake();
    // protected System.Collections.IEnumerator Start()
    // Offset: 0x137AD28
    ::System::Collections::IEnumerator* Start();
    // protected System.Void LateUpdate()
    // Offset: 0x137ADC4
    void LateUpdate();
  }; // FPSCounterUIController
  #pragma pack(pop)
  static check_size<sizeof(FPSCounterUIController), 80 + sizeof(float)> __GlobalNamespace_FPSCounterUIControllerSizeCheck;
  static_assert(sizeof(FPSCounterUIController) == 0x54);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::FPSCounterUIController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::FPSCounterUIController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSCounterUIController::*)()>(&GlobalNamespace::FPSCounterUIController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSCounterUIController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FPSCounterUIController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::FPSCounterUIController::*)()>(&GlobalNamespace::FPSCounterUIController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSCounterUIController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::FPSCounterUIController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::FPSCounterUIController::*)()>(&GlobalNamespace::FPSCounterUIController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::FPSCounterUIController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
