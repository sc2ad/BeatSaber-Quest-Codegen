// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BlinkingLight
  class BlinkingLight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BlinkingLight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BlinkingLight*, "", "BlinkingLight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: BlinkingLight
  // [TokenAttribute] Offset: FFFFFFFF
  class BlinkingLight : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Material[] materialArray
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Material*> materialArray;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Material*>) == 0x8);
    // public System.Single minTime
    // Size: 0x4
    // Offset: 0x20
    float minTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxTime
    // Size: 0x4
    // Offset: 0x24
    float maxTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single nextChange
    // Size: 0x4
    // Offset: 0x28
    float nextChange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: nextChange and: meshRenderer
    char __padding3[0x4] = {};
    // private UnityEngine.MeshRenderer meshRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::MeshRenderer* meshRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Material[] materialArray
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Material*>& dyn_materialArray();
    // Get instance field reference: public System.Single minTime
    [[deprecated("Use field access instead!")]] float& dyn_minTime();
    // Get instance field reference: public System.Single maxTime
    [[deprecated("Use field access instead!")]] float& dyn_maxTime();
    // Get instance field reference: private System.Single nextChange
    [[deprecated("Use field access instead!")]] float& dyn_nextChange();
    // Get instance field reference: private UnityEngine.MeshRenderer meshRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_meshRenderer();
    // public System.Void .ctor()
    // Offset: 0xC5EF14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BlinkingLight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BlinkingLight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BlinkingLight*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0xC5EDF0
    void Awake();
    // private System.Void Update()
    // Offset: 0xC5EE5C
    void Update();
  }; // BlinkingLight
  #pragma pack(pop)
  static check_size<sizeof(BlinkingLight), 48 + sizeof(::UnityEngine::MeshRenderer*)> __GlobalNamespace_BlinkingLightSizeCheck;
  static_assert(sizeof(BlinkingLight) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BlinkingLight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BlinkingLight::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BlinkingLight::*)()>(&GlobalNamespace::BlinkingLight::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BlinkingLight*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BlinkingLight::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BlinkingLight::*)()>(&GlobalNamespace::BlinkingLight::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BlinkingLight*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
