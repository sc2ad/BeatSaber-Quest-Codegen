// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ReflectionProbeBakingOverride
  class ReflectionProbeBakingOverride;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ReflectionProbeBakingOverride);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ReflectionProbeBakingOverride*, "", "ReflectionProbeBakingOverride");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: ReflectionProbeBakingOverride
  // [TokenAttribute] Offset: FFFFFFFF
  class ReflectionProbeBakingOverride : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling
    struct ActiveStateHandling;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: ReflectionProbeBakingOverride/ActiveStateHandling
    // [TokenAttribute] Offset: FFFFFFFF
    struct ActiveStateHandling/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: ActiveStateHandling
      constexpr ActiveStateHandling(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating interface conversion operator: i_Enum
      inline ::System::Enum* i_Enum() noexcept {
        return reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public ReflectionProbeBakingOverride/ActiveStateHandling LeaveAsIs
      static constexpr const int LeaveAsIs = 0;
      // Get static field: static public ReflectionProbeBakingOverride/ActiveStateHandling LeaveAsIs
      static ::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling _get_LeaveAsIs();
      // Set static field: static public ReflectionProbeBakingOverride/ActiveStateHandling LeaveAsIs
      static void _set_LeaveAsIs(::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling value);
      // static field const value: static public ReflectionProbeBakingOverride/ActiveStateHandling Enable
      static constexpr const int Enable = 1;
      // Get static field: static public ReflectionProbeBakingOverride/ActiveStateHandling Enable
      static ::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling _get_Enable();
      // Set static field: static public ReflectionProbeBakingOverride/ActiveStateHandling Enable
      static void _set_Enable(::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling value);
      // static field const value: static public ReflectionProbeBakingOverride/ActiveStateHandling Disable
      static constexpr const int Disable = 2;
      // Get static field: static public ReflectionProbeBakingOverride/ActiveStateHandling Disable
      static ::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling _get_Disable();
      // Set static field: static public ReflectionProbeBakingOverride/ActiveStateHandling Disable
      static void _set_Disable(::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // ReflectionProbeBakingOverride/ActiveStateHandling
    #pragma pack(pop)
    static check_size<sizeof(ReflectionProbeBakingOverride::ActiveStateHandling), 0 + sizeof(int)> __GlobalNamespace_ReflectionProbeBakingOverride_ActiveStateHandlingSizeCheck;
    static_assert(sizeof(ReflectionProbeBakingOverride::ActiveStateHandling) == 0x4);
    public:
    // private ReflectionProbeBakingOverride/ActiveStateHandling _stateHandling
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling stateHandling;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling) == 0x4);
    // private System.Boolean _setPosition
    // Size: 0x1
    // Offset: 0x1C
    bool setPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setPosition and: localPosition
    char __padding1[0x3] = {};
    // [DrawIfAttribute] Offset: 0x1130328
    // private UnityEngine.Vector3 _localPosition
    // Size: 0xC
    // Offset: 0x20
    ::UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _setRotation
    // Size: 0x1
    // Offset: 0x2C
    bool setRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setRotation and: localRotation
    char __padding3[0x3] = {};
    // [DrawIfAttribute] Offset: 0x11303E0
    // private UnityEngine.Vector3 _localRotation
    // Size: 0xC
    // Offset: 0x30
    ::UnityEngine::Vector3 localRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _setScale
    // Size: 0x1
    // Offset: 0x3C
    bool setScale;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setScale and: localScale
    char __padding5[0x3] = {};
    // [DrawIfAttribute] Offset: 0x1130498
    // private UnityEngine.Vector3 _localScale
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 localScale;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private ReflectionProbeBakingOverride/ActiveStateHandling _stateHandling
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling& dyn__stateHandling();
    // Get instance field reference: private System.Boolean _setPosition
    [[deprecated("Use field access instead!")]] bool& dyn__setPosition();
    // Get instance field reference: private UnityEngine.Vector3 _localPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localPosition();
    // Get instance field reference: private System.Boolean _setRotation
    [[deprecated("Use field access instead!")]] bool& dyn__setRotation();
    // Get instance field reference: private UnityEngine.Vector3 _localRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localRotation();
    // Get instance field reference: private System.Boolean _setScale
    [[deprecated("Use field access instead!")]] bool& dyn__setScale();
    // Get instance field reference: private UnityEngine.Vector3 _localScale
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__localScale();
    // public System.Void .ctor()
    // Offset: 0x1449F94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ReflectionProbeBakingOverride* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ReflectionProbeBakingOverride::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ReflectionProbeBakingOverride*, creationType>()));
    }
    // public System.Void UpdateForProbeBaking()
    // Offset: 0x1449EA8
    void UpdateForProbeBaking();
  }; // ReflectionProbeBakingOverride
  #pragma pack(pop)
  static check_size<sizeof(ReflectionProbeBakingOverride), 64 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_ReflectionProbeBakingOverrideSizeCheck;
  static_assert(sizeof(ReflectionProbeBakingOverride) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ReflectionProbeBakingOverride::ActiveStateHandling, "", "ReflectionProbeBakingOverride/ActiveStateHandling");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ReflectionProbeBakingOverride::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ReflectionProbeBakingOverride::UpdateForProbeBaking
// Il2CppName: UpdateForProbeBaking
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ReflectionProbeBakingOverride::*)()>(&GlobalNamespace::ReflectionProbeBakingOverride::UpdateForProbeBaking)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ReflectionProbeBakingOverride*), "UpdateForProbeBaking", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
