// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ScoreModel
#include "GlobalNamespace/ScoreModel.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ScoreModel::NoteScoreDefinition);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ScoreModel::NoteScoreDefinition*, "", "ScoreModel/NoteScoreDefinition");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ScoreModel/NoteScoreDefinition
  // [TokenAttribute] Offset: FFFFFFFF
  class ScoreModel::NoteScoreDefinition : public ::Il2CppObject {
    public:
    public:
    // public readonly System.Int32 maxCenterDistanceCutScore
    // Size: 0x4
    // Offset: 0x10
    int maxCenterDistanceCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 minBeforeCutScore
    // Size: 0x4
    // Offset: 0x14
    int minBeforeCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 maxBeforeCutScore
    // Size: 0x4
    // Offset: 0x18
    int maxBeforeCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 minAfterCutScore
    // Size: 0x4
    // Offset: 0x1C
    int minAfterCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 maxAfterCutScore
    // Size: 0x4
    // Offset: 0x20
    int maxAfterCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public readonly System.Int32 fixedCutScore
    // Size: 0x4
    // Offset: 0x24
    int fixedCutScore;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public readonly System.Int32 maxCenterDistanceCutScore
    [[deprecated("Use field access instead!")]] int& dyn_maxCenterDistanceCutScore();
    // Get instance field reference: public readonly System.Int32 minBeforeCutScore
    [[deprecated("Use field access instead!")]] int& dyn_minBeforeCutScore();
    // Get instance field reference: public readonly System.Int32 maxBeforeCutScore
    [[deprecated("Use field access instead!")]] int& dyn_maxBeforeCutScore();
    // Get instance field reference: public readonly System.Int32 minAfterCutScore
    [[deprecated("Use field access instead!")]] int& dyn_minAfterCutScore();
    // Get instance field reference: public readonly System.Int32 maxAfterCutScore
    [[deprecated("Use field access instead!")]] int& dyn_maxAfterCutScore();
    // Get instance field reference: public readonly System.Int32 fixedCutScore
    [[deprecated("Use field access instead!")]] int& dyn_fixedCutScore();
    // public System.Int32 get_maxCutScore()
    // Offset: 0x1461EE8
    int get_maxCutScore();
    // public System.Int32 get_executionOrder()
    // Offset: 0x14622BC
    int get_executionOrder();
    // public System.Void .ctor(System.Int32 maxCenterDistanceCutScore, System.Int32 minBeforeCutScore, System.Int32 maxBeforeCutScore, System.Int32 minAfterCutScore, System.Int32 maxAfterCutScore, System.Int32 fixedCutScore)
    // Offset: 0x14621C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScoreModel::NoteScoreDefinition* New_ctor(int maxCenterDistanceCutScore, int minBeforeCutScore, int maxBeforeCutScore, int minAfterCutScore, int maxAfterCutScore, int fixedCutScore) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ScoreModel::NoteScoreDefinition::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScoreModel::NoteScoreDefinition*, creationType>(maxCenterDistanceCutScore, minBeforeCutScore, maxBeforeCutScore, minAfterCutScore, maxAfterCutScore, fixedCutScore)));
    }
  }; // ScoreModel/NoteScoreDefinition
  #pragma pack(pop)
  static check_size<sizeof(ScoreModel::NoteScoreDefinition), 36 + sizeof(int)> __GlobalNamespace_ScoreModel_NoteScoreDefinitionSizeCheck;
  static_assert(sizeof(ScoreModel::NoteScoreDefinition) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ScoreModel::NoteScoreDefinition::get_maxCutScore
// Il2CppName: get_maxCutScore
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreModel::NoteScoreDefinition::*)()>(&GlobalNamespace::ScoreModel::NoteScoreDefinition::get_maxCutScore)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreModel::NoteScoreDefinition*), "get_maxCutScore", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreModel::NoteScoreDefinition::get_executionOrder
// Il2CppName: get_executionOrder
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ScoreModel::NoteScoreDefinition::*)()>(&GlobalNamespace::ScoreModel::NoteScoreDefinition::get_executionOrder)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ScoreModel::NoteScoreDefinition*), "get_executionOrder", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ScoreModel::NoteScoreDefinition::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
