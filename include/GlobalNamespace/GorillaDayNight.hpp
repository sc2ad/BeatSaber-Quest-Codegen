// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaLightmapData
  class GorillaLightmapData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LightmapData
  class LightmapData;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaDayNight
  class GorillaDayNight;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaDayNight);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaDayNight*, "", "GorillaDayNight");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7A
  #pragma pack(push, 1)
  // Autogenerated type: GorillaDayNight
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaDayNight : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaDayNight::$LightMapSet$d__25
    class $LightMapSet$d__25;
    public:
    // public GorillaLightmapData[] lightmapDatas
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::GorillaLightmapData*> lightmapDatas;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::GorillaLightmapData*>) == 0x8);
    // private UnityEngine.LightmapData[] workingLightMapDatas
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::UnityEngine::LightmapData*> workingLightMapDatas;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::LightmapData*>) == 0x8);
    // private UnityEngine.LightmapData workingLightMapData
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::LightmapData* workingLightMapData;
    // Field size check
    static_assert(sizeof(::UnityEngine::LightmapData*) == 0x8);
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0x30
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean done
    // Size: 0x1
    // Offset: 0x34
    bool done;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean finishedStep
    // Size: 0x1
    // Offset: 0x35
    bool finishedStep;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: finishedStep and: fromPixels
    char __padding5[0x2] = {};
    // private UnityEngine.Color[] fromPixels
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::UnityEngine::Color> fromPixels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Color[] toPixels
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::UnityEngine::Color> toPixels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // private UnityEngine.Color[] mixedPixels
    // Size: 0x8
    // Offset: 0x48
    ::ArrayW<::UnityEngine::Color> mixedPixels;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Color>) == 0x8);
    // public System.Int32 firstData
    // Size: 0x4
    // Offset: 0x50
    int firstData;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 secondData
    // Size: 0x4
    // Offset: 0x54
    int secondData;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 i
    // Size: 0x4
    // Offset: 0x58
    int i;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 j
    // Size: 0x4
    // Offset: 0x5C
    int j;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 k
    // Size: 0x4
    // Offset: 0x60
    int k;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 l
    // Size: 0x4
    // Offset: 0x64
    int l;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Threading.Thread lightsThread
    // Size: 0x8
    // Offset: 0x68
    ::System::Threading::Thread* lightsThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // private System.Threading.Thread dirsThread
    // Size: 0x8
    // Offset: 0x70
    ::System::Threading::Thread* dirsThread;
    // Field size check
    static_assert(sizeof(::System::Threading::Thread*) == 0x8);
    // public System.Boolean test
    // Size: 0x1
    // Offset: 0x78
    bool test;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean working
    // Size: 0x1
    // Offset: 0x79
    bool working;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get static field: static public GorillaDayNight instance
    static ::GlobalNamespace::GorillaDayNight* _get_instance();
    // Set static field: static public GorillaDayNight instance
    static void _set_instance(::GlobalNamespace::GorillaDayNight* value);
    // Get instance field reference: public GorillaLightmapData[] lightmapDatas
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::GorillaLightmapData*>& dyn_lightmapDatas();
    // Get instance field reference: private UnityEngine.LightmapData[] workingLightMapDatas
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::LightmapData*>& dyn_workingLightMapDatas();
    // Get instance field reference: private UnityEngine.LightmapData workingLightMapData
    [[deprecated("Use field access instead!")]] ::UnityEngine::LightmapData*& dyn_workingLightMapData();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: public System.Boolean done
    [[deprecated("Use field access instead!")]] bool& dyn_done();
    // Get instance field reference: public System.Boolean finishedStep
    [[deprecated("Use field access instead!")]] bool& dyn_finishedStep();
    // Get instance field reference: private UnityEngine.Color[] fromPixels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_fromPixels();
    // Get instance field reference: private UnityEngine.Color[] toPixels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_toPixels();
    // Get instance field reference: private UnityEngine.Color[] mixedPixels
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Color>& dyn_mixedPixels();
    // Get instance field reference: public System.Int32 firstData
    [[deprecated("Use field access instead!")]] int& dyn_firstData();
    // Get instance field reference: public System.Int32 secondData
    [[deprecated("Use field access instead!")]] int& dyn_secondData();
    // Get instance field reference: public System.Int32 i
    [[deprecated("Use field access instead!")]] int& dyn_i();
    // Get instance field reference: public System.Int32 j
    [[deprecated("Use field access instead!")]] int& dyn_j();
    // Get instance field reference: public System.Int32 k
    [[deprecated("Use field access instead!")]] int& dyn_k();
    // Get instance field reference: public System.Int32 l
    [[deprecated("Use field access instead!")]] int& dyn_l();
    // Get instance field reference: private System.Threading.Thread lightsThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_lightsThread();
    // Get instance field reference: private System.Threading.Thread dirsThread
    [[deprecated("Use field access instead!")]] ::System::Threading::Thread*& dyn_dirsThread();
    // Get instance field reference: public System.Boolean test
    [[deprecated("Use field access instead!")]] bool& dyn_test();
    // Get instance field reference: public System.Boolean working
    [[deprecated("Use field access instead!")]] bool& dyn_working();
    // public System.Void .ctor()
    // Offset: 0xC689BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaDayNight* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaDayNight::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaDayNight*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xC680A4
    void Awake();
    // public System.Void Update()
    // Offset: 0xC68288
    void Update();
    // public System.Void DoWork()
    // Offset: 0xC68360
    void DoWork();
    // public System.Void DoLightsStep()
    // Offset: 0xC686D0
    void DoLightsStep();
    // public System.Void DoDirsStep()
    // Offset: 0xC68830
    void DoDirsStep();
    // private System.Collections.IEnumerator LightMapSet(System.Int32 setFirstData, System.Int32 setSecondData, System.Single setLerp)
    // Offset: 0xC682CC
    ::System::Collections::IEnumerator* LightMapSet(int setFirstData, int setSecondData, float setLerp);
    // private System.Boolean <LightMapSet>b__25_0()
    // Offset: 0xC689C4
    bool $LightMapSet$b__25_0();
    // private System.Boolean <LightMapSet>b__25_1()
    // Offset: 0xC689CC
    bool $LightMapSet$b__25_1();
  }; // GorillaDayNight
  #pragma pack(pop)
  static check_size<sizeof(GorillaDayNight), 121 + sizeof(bool)> __GlobalNamespace_GorillaDayNightSizeCheck;
  static_assert(sizeof(GorillaDayNight) == 0x7A);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::DoWork
// Il2CppName: DoWork
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::DoWork)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "DoWork", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::DoLightsStep
// Il2CppName: DoLightsStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::DoLightsStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "DoLightsStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::DoDirsStep
// Il2CppName: DoDirsStep
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::DoDirsStep)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "DoDirsStep", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::LightMapSet
// Il2CppName: LightMapSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaDayNight::*)(int, int, float)>(&GlobalNamespace::GorillaDayNight::LightMapSet)> {
  static const MethodInfo* get() {
    static auto* setFirstData = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* setSecondData = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* setLerp = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "LightMapSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{setFirstData, setSecondData, setLerp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::$LightMapSet$b__25_0
// Il2CppName: <LightMapSet>b__25_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::$LightMapSet$b__25_0)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "<LightMapSet>b__25_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaDayNight::$LightMapSet$b__25_1
// Il2CppName: <LightMapSet>b__25_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaDayNight::*)()>(&GlobalNamespace::GorillaDayNight::$LightMapSet$b__25_1)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaDayNight*), "<LightMapSet>b__25_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
