// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorScheme
  class ColorScheme;
  // Forward declaring type: ColorSchemeSO
  class ColorSchemeSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ColorSchemesSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ColorSchemesSettings*, "", "ColorSchemesSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: ColorSchemesSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class ColorSchemesSettings : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean overrideDefaultColors
    // Size: 0x1
    // Offset: 0x10
    bool overrideDefaultColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideDefaultColors and: colorSchemesList
    char __padding0[0x7] = {};
    // private System.Collections.Generic.List`1<ColorScheme> _colorSchemesList
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::GlobalNamespace::ColorScheme*>* colorSchemesList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::ColorScheme*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,ColorScheme> _colorSchemesDict
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ColorScheme*>* colorSchemesDict;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ColorScheme*>*) == 0x8);
    // private System.String _selectedColorSchemeId
    // Size: 0x8
    // Offset: 0x28
    ::StringW selectedColorSchemeId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: public System.Boolean overrideDefaultColors
    [[deprecated("Use field access instead!")]] bool& dyn_overrideDefaultColors();
    // Get instance field reference: private System.Collections.Generic.List`1<ColorScheme> _colorSchemesList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::ColorScheme*>*& dyn__colorSchemesList();
    // Get instance field reference: private System.Collections.Generic.Dictionary`2<System.String,ColorScheme> _colorSchemesDict
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::Dictionary_2<::StringW, ::GlobalNamespace::ColorScheme*>*& dyn__colorSchemesDict();
    // Get instance field reference: private System.String _selectedColorSchemeId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__selectedColorSchemeId();
    // public System.String get_selectedColorSchemeId()
    // Offset: 0x135D878
    ::StringW get_selectedColorSchemeId();
    // public System.Void set_selectedColorSchemeId(System.String value)
    // Offset: 0x135D870
    void set_selectedColorSchemeId(::StringW value);
    // public System.Void .ctor(ColorScheme[] colorSchemes)
    // Offset: 0x135D880
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorSchemesSettings* New_ctor(::ArrayW<::GlobalNamespace::ColorScheme*> colorSchemes) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSchemesSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorSchemesSettings*, creationType>(colorSchemes)));
    }
    // public System.Void .ctor(ColorSchemeSO[] colorSchemeSOs)
    // Offset: 0x135D9B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ColorSchemesSettings* New_ctor(::ArrayW<::GlobalNamespace::ColorSchemeSO*> colorSchemeSOs) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ColorSchemesSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ColorSchemesSettings*, creationType>(colorSchemeSOs)));
    }
    // static private ColorScheme[] ConvertColorSchemeSOs(ColorSchemeSO[] colorSchemeSOs)
    // Offset: 0x135D9DC
    static ::ArrayW<::GlobalNamespace::ColorScheme*> ConvertColorSchemeSOs(::ArrayW<::GlobalNamespace::ColorSchemeSO*> colorSchemeSOs);
    // public System.Int32 GetNumberOfColorSchemes()
    // Offset: 0x135DAF4
    int GetNumberOfColorSchemes();
    // public ColorScheme GetColorSchemeForIdx(System.Int32 idx)
    // Offset: 0x135DB44
    ::GlobalNamespace::ColorScheme* GetColorSchemeForIdx(int idx);
    // public ColorScheme GetColorSchemeForId(System.String id)
    // Offset: 0x135DBBC
    ::GlobalNamespace::ColorScheme* GetColorSchemeForId(::StringW id);
    // public System.Void SetColorSchemeForId(ColorScheme colorScheme)
    // Offset: 0x135DC24
    void SetColorSchemeForId(::GlobalNamespace::ColorScheme* colorScheme);
    // public ColorScheme GetSelectedColorScheme()
    // Offset: 0x135DD20
    ::GlobalNamespace::ColorScheme* GetSelectedColorScheme();
    // public System.Int32 GetSelectedColorSchemeIdx()
    // Offset: 0x135DD7C
    int GetSelectedColorSchemeIdx();
    // public ColorScheme GetOverrideColorScheme()
    // Offset: 0x135769C
    ::GlobalNamespace::ColorScheme* GetOverrideColorScheme();
  }; // ColorSchemesSettings
  #pragma pack(pop)
  static check_size<sizeof(ColorSchemesSettings), 40 + sizeof(::StringW)> __GlobalNamespace_ColorSchemesSettingsSizeCheck;
  static_assert(sizeof(ColorSchemesSettings) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::get_selectedColorSchemeId
// Il2CppName: get_selectedColorSchemeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::ColorSchemesSettings::*)()>(&GlobalNamespace::ColorSchemesSettings::get_selectedColorSchemeId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "get_selectedColorSchemeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::set_selectedColorSchemeId
// Il2CppName: set_selectedColorSchemeId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorSchemesSettings::*)(::StringW)>(&GlobalNamespace::ColorSchemesSettings::set_selectedColorSchemeId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "set_selectedColorSchemeId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::ConvertColorSchemeSOs
// Il2CppName: ConvertColorSchemeSOs
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::ColorScheme*> (*)(::ArrayW<::GlobalNamespace::ColorSchemeSO*>)>(&GlobalNamespace::ColorSchemesSettings::ConvertColorSchemeSOs)> {
  static const MethodInfo* get() {
    static auto* colorSchemeSOs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "ColorSchemeSO"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "ConvertColorSchemeSOs", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorSchemeSOs});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::GetNumberOfColorSchemes
// Il2CppName: GetNumberOfColorSchemes
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ColorSchemesSettings::*)()>(&GlobalNamespace::ColorSchemesSettings::GetNumberOfColorSchemes)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "GetNumberOfColorSchemes", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::GetColorSchemeForIdx
// Il2CppName: GetColorSchemeForIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorScheme* (GlobalNamespace::ColorSchemesSettings::*)(int)>(&GlobalNamespace::ColorSchemesSettings::GetColorSchemeForIdx)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "GetColorSchemeForIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::GetColorSchemeForId
// Il2CppName: GetColorSchemeForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorScheme* (GlobalNamespace::ColorSchemesSettings::*)(::StringW)>(&GlobalNamespace::ColorSchemesSettings::GetColorSchemeForId)> {
  static const MethodInfo* get() {
    static auto* id = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "GetColorSchemeForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{id});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::SetColorSchemeForId
// Il2CppName: SetColorSchemeForId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ColorSchemesSettings::*)(::GlobalNamespace::ColorScheme*)>(&GlobalNamespace::ColorSchemesSettings::SetColorSchemeForId)> {
  static const MethodInfo* get() {
    static auto* colorScheme = &::il2cpp_utils::GetClassFromName("", "ColorScheme")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "SetColorSchemeForId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{colorScheme});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::GetSelectedColorScheme
// Il2CppName: GetSelectedColorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorScheme* (GlobalNamespace::ColorSchemesSettings::*)()>(&GlobalNamespace::ColorSchemesSettings::GetSelectedColorScheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "GetSelectedColorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::GetSelectedColorSchemeIdx
// Il2CppName: GetSelectedColorSchemeIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::ColorSchemesSettings::*)()>(&GlobalNamespace::ColorSchemesSettings::GetSelectedColorSchemeIdx)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "GetSelectedColorSchemeIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ColorSchemesSettings::GetOverrideColorScheme
// Il2CppName: GetOverrideColorScheme
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorScheme* (GlobalNamespace::ColorSchemesSettings::*)()>(&GlobalNamespace::ColorSchemesSettings::GetOverrideColorScheme)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ColorSchemesSettings*), "GetOverrideColorScheme", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
