// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IBeatmapObjectCallbackController
#include "GlobalNamespace/IBeatmapObjectCallbackController.hpp"
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: EnvironmentKeywords
  class EnvironmentKeywords;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: BeatmapObjectCallbackData
  class BeatmapObjectCallbackData;
  // Forward declaring type: BeatmapEventCallbackData
  class BeatmapEventCallbackData;
  // Forward declaring type: IReadonlyBeatmapData
  class IReadonlyBeatmapData;
  // Forward declaring type: BeatmapObjectCallback
  class BeatmapObjectCallback;
  // Forward declaring type: BeatmapEventCallback
  class BeatmapEventCallback;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectCallbackController
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectCallbackController : public UnityEngine::MonoBehaviour/*, public GlobalNamespace::IBeatmapObjectCallbackController*/ {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectCallbackController::InitData
    class InitData;
    // [InjectAttribute] Offset: 0xF0436C
    // private readonly BeatmapObjectCallbackController/InitData _initData
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::BeatmapObjectCallbackController::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0xF0437C
    // private readonly IAudioTimeSource _audioTimeSource
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IAudioTimeSource* audioTimeSource;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAudioTimeSource*) == 0x8);
    // [InjectAttribute] Offset: 0xF0438C
    // private readonly EnvironmentKeywords _environmentKeywords
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::EnvironmentKeywords* environmentKeywords;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentKeywords*) == 0x8);
    // private readonly System.Collections.Generic.List`1<BeatmapObjectData> _beatmapObjectDataCallbackCacheList
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>* beatmapObjectDataCallbackCacheList;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0439C
    // private System.Action`1<BeatmapEventData> beatmapEventDidTriggerEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<GlobalNamespace::BeatmapEventData*>* beatmapEventDidTriggerEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::BeatmapEventData*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF043AC
    // private System.Action callbacksForThisFrameWereProcessedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action* callbacksForThisFrameWereProcessedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private readonly System.Collections.Generic.List`1<BeatmapObjectCallbackData> _beatmapObjectCallbackData
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectCallbackData*>* beatmapObjectCallbackData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectCallbackData*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<BeatmapEventCallbackData> _beatmapEventCallbackData
    // Size: 0x8
    // Offset: 0x50
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventCallbackData*>* beatmapEventCallbackData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventCallbackData*>*) == 0x8);
    // private System.Int32 _nextEventIndex
    // Size: 0x4
    // Offset: 0x58
    int nextEventIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _spawningStartTime
    // Size: 0x4
    // Offset: 0x5C
    float spawningStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private IReadonlyBeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::IReadonlyBeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IReadonlyBeatmapData*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<BeatmapEventType> _validEvents
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>* validEvents;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*) == 0x8);
    // Creating value type constructor for type: BeatmapObjectCallbackController
    BeatmapObjectCallbackController(GlobalNamespace::BeatmapObjectCallbackController::InitData* initData_ = {}, GlobalNamespace::IAudioTimeSource* audioTimeSource_ = {}, GlobalNamespace::EnvironmentKeywords* environmentKeywords_ = {}, System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>* beatmapObjectDataCallbackCacheList_ = {}, System::Action_1<GlobalNamespace::BeatmapEventData*>* beatmapEventDidTriggerEvent_ = {}, System::Action* callbacksForThisFrameWereProcessedEvent_ = {}, System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectCallbackData*>* beatmapObjectCallbackData_ = {}, System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventCallbackData*>* beatmapEventCallbackData_ = {}, int nextEventIndex_ = {}, float spawningStartTime_ = {}, GlobalNamespace::IReadonlyBeatmapData* beatmapData_ = {}, System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>* validEvents_ = {}) noexcept : initData{initData_}, audioTimeSource{audioTimeSource_}, environmentKeywords{environmentKeywords_}, beatmapObjectDataCallbackCacheList{beatmapObjectDataCallbackCacheList_}, beatmapEventDidTriggerEvent{beatmapEventDidTriggerEvent_}, callbacksForThisFrameWereProcessedEvent{callbacksForThisFrameWereProcessedEvent_}, beatmapObjectCallbackData{beatmapObjectCallbackData_}, beatmapEventCallbackData{beatmapEventCallbackData_}, nextEventIndex{nextEventIndex_}, spawningStartTime{spawningStartTime_}, beatmapData{beatmapData_}, validEvents{validEvents_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBeatmapObjectCallbackController
    operator GlobalNamespace::IBeatmapObjectCallbackController() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBeatmapObjectCallbackController*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private readonly BeatmapObjectCallbackController/InitData _initData
    GlobalNamespace::BeatmapObjectCallbackController::InitData*& dyn__initData();
    // Get instance field reference: private readonly IAudioTimeSource _audioTimeSource
    GlobalNamespace::IAudioTimeSource*& dyn__audioTimeSource();
    // Get instance field reference: private readonly EnvironmentKeywords _environmentKeywords
    GlobalNamespace::EnvironmentKeywords*& dyn__environmentKeywords();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<BeatmapObjectData> _beatmapObjectDataCallbackCacheList
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>*& dyn__beatmapObjectDataCallbackCacheList();
    // Get instance field reference: private System.Action`1<BeatmapEventData> beatmapEventDidTriggerEvent
    System::Action_1<GlobalNamespace::BeatmapEventData*>*& dyn_beatmapEventDidTriggerEvent();
    // Get instance field reference: private System.Action callbacksForThisFrameWereProcessedEvent
    System::Action*& dyn_callbacksForThisFrameWereProcessedEvent();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<BeatmapObjectCallbackData> _beatmapObjectCallbackData
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectCallbackData*>*& dyn__beatmapObjectCallbackData();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<BeatmapEventCallbackData> _beatmapEventCallbackData
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventCallbackData*>*& dyn__beatmapEventCallbackData();
    // Get instance field reference: private System.Int32 _nextEventIndex
    int& dyn__nextEventIndex();
    // Get instance field reference: private System.Single _spawningStartTime
    float& dyn__spawningStartTime();
    // Get instance field reference: private IReadonlyBeatmapData _beatmapData
    GlobalNamespace::IReadonlyBeatmapData*& dyn__beatmapData();
    // Get instance field reference: private readonly System.Collections.Generic.HashSet`1<BeatmapEventType> _validEvents
    System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*& dyn__validEvents();
    // public System.Void add_beatmapEventDidTriggerEvent(System.Action`1<BeatmapEventData> value)
    // Offset: 0x129EB4C
    void add_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value);
    // public System.Void remove_beatmapEventDidTriggerEvent(System.Action`1<BeatmapEventData> value)
    // Offset: 0x129EBF0
    void remove_beatmapEventDidTriggerEvent(System::Action_1<GlobalNamespace::BeatmapEventData*>* value);
    // public System.Void add_callbacksForThisFrameWereProcessedEvent(System.Action value)
    // Offset: 0x129EC94
    void add_callbacksForThisFrameWereProcessedEvent(System::Action* value);
    // public System.Void remove_callbacksForThisFrameWereProcessedEvent(System.Action value)
    // Offset: 0x129ED38
    void remove_callbacksForThisFrameWereProcessedEvent(System::Action* value);
    // public System.Boolean get_isPaused()
    // Offset: 0x129EDDC
    bool get_isPaused();
    // protected System.Void Start()
    // Offset: 0x129EDFC
    void Start();
    // protected System.Void LateUpdate()
    // Offset: 0x129F5C8
    void LateUpdate();
    // public BeatmapObjectCallbackData AddBeatmapObjectCallback(BeatmapObjectCallback callback, System.Single aheadTime)
    // Offset: 0x12A0418
    GlobalNamespace::BeatmapObjectCallbackData* AddBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallback* callback, float aheadTime);
    // public System.Void RemoveBeatmapObjectCallback(BeatmapObjectCallbackData callbackData)
    // Offset: 0x12A066C
    void RemoveBeatmapObjectCallback(GlobalNamespace::BeatmapObjectCallbackData* callbackData);
    // public BeatmapEventCallbackData AddBeatmapEventCallback(BeatmapEventCallback callback, System.Single aheadTime)
    // Offset: 0x12A06E0
    GlobalNamespace::BeatmapEventCallbackData* AddBeatmapEventCallback(GlobalNamespace::BeatmapEventCallback* callback, float aheadTime);
    // public System.Void RemoveBeatmapEventCallback(BeatmapEventCallbackData callbackData)
    // Offset: 0x12A0780
    void RemoveBeatmapEventCallback(GlobalNamespace::BeatmapEventCallbackData* callbackData);
    // public System.Void SendBeatmapEventDidTriggerEvent(BeatmapEventData beatmapEventData)
    // Offset: 0x12A037C
    void SendBeatmapEventDidTriggerEvent(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void SetNewBeatmapData(IReadonlyBeatmapData beatmapData)
    // Offset: 0x129EE2C
    void SetNewBeatmapData(GlobalNamespace::IReadonlyBeatmapData* beatmapData);
    // public System.Void Pause()
    // Offset: 0x12A07F4
    void Pause();
    // public System.Void Resume()
    // Offset: 0x12A0800
    void Resume();
    // public System.Void .ctor()
    // Offset: 0x12A080C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectCallbackController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectCallbackController*, creationType>()));
    }
  }; // BeatmapObjectCallbackController
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectCallbackController), 104 + sizeof(System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapEventType>*)> __GlobalNamespace_BeatmapObjectCallbackControllerSizeCheck;
  static_assert(sizeof(BeatmapObjectCallbackController) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectCallbackController*, "", "BeatmapObjectCallbackController");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent
// Il2CppName: add_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::BeatmapObjectCallbackController::add_beatmapEventDidTriggerEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "add_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent
// Il2CppName: remove_beatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(System::Action_1<GlobalNamespace::BeatmapEventData*>*)>(&GlobalNamespace::BeatmapObjectCallbackController::remove_beatmapEventDidTriggerEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "BeatmapEventData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "remove_beatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent
// Il2CppName: add_callbacksForThisFrameWereProcessedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(System::Action*)>(&GlobalNamespace::BeatmapObjectCallbackController::add_callbacksForThisFrameWereProcessedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "add_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent
// Il2CppName: remove_callbacksForThisFrameWereProcessedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(System::Action*)>(&GlobalNamespace::BeatmapObjectCallbackController::remove_callbacksForThisFrameWereProcessedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "remove_callbacksForThisFrameWereProcessedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::get_isPaused
// Il2CppName: get_isPaused
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapObjectCallbackController::*)()>(&GlobalNamespace::BeatmapObjectCallbackController::get_isPaused)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "get_isPaused", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)()>(&GlobalNamespace::BeatmapObjectCallbackController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)()>(&GlobalNamespace::BeatmapObjectCallbackController::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapObjectCallback
// Il2CppName: AddBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapObjectCallbackData* (GlobalNamespace::BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapObjectCallback*, float)>(&GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapObjectCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectCallback")->byval_arg;
    static auto* aheadTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "AddBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, aheadTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapObjectCallback
// Il2CppName: RemoveBeatmapObjectCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapObjectCallbackData*)>(&GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapObjectCallback)> {
  static const MethodInfo* get() {
    static auto* callbackData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectCallbackData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "RemoveBeatmapObjectCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapEventCallback
// Il2CppName: AddBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapEventCallbackData* (GlobalNamespace::BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventCallback*, float)>(&GlobalNamespace::BeatmapObjectCallbackController::AddBeatmapEventCallback)> {
  static const MethodInfo* get() {
    static auto* callback = &::il2cpp_utils::GetClassFromName("", "BeatmapEventCallback")->byval_arg;
    static auto* aheadTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "AddBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callback, aheadTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapEventCallback
// Il2CppName: RemoveBeatmapEventCallback
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventCallbackData*)>(&GlobalNamespace::BeatmapObjectCallbackController::RemoveBeatmapEventCallback)> {
  static const MethodInfo* get() {
    static auto* callbackData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventCallbackData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "RemoveBeatmapEventCallback", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{callbackData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent
// Il2CppName: SendBeatmapEventDidTriggerEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(GlobalNamespace::BeatmapEventData*)>(&GlobalNamespace::BeatmapObjectCallbackController::SendBeatmapEventDidTriggerEvent)> {
  static const MethodInfo* get() {
    static auto* beatmapEventData = &::il2cpp_utils::GetClassFromName("", "BeatmapEventData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "SendBeatmapEventDidTriggerEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapEventData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::SetNewBeatmapData
// Il2CppName: SetNewBeatmapData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)(GlobalNamespace::IReadonlyBeatmapData*)>(&GlobalNamespace::BeatmapObjectCallbackController::SetNewBeatmapData)> {
  static const MethodInfo* get() {
    static auto* beatmapData = &::il2cpp_utils::GetClassFromName("", "IReadonlyBeatmapData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "SetNewBeatmapData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapData});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::Pause
// Il2CppName: Pause
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)()>(&GlobalNamespace::BeatmapObjectCallbackController::Pause)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "Pause", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::Resume
// Il2CppName: Resume
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectCallbackController::*)()>(&GlobalNamespace::BeatmapObjectCallbackController::Resume)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectCallbackController*), "Resume", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectCallbackController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
