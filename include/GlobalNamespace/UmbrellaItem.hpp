// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ActionableItem
#include "GlobalNamespace/ActionableItem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UmbrellaItem
  class UmbrellaItem;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UmbrellaItem);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UmbrellaItem*, "", "UmbrellaItem");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: UmbrellaItem
  // [TokenAttribute] Offset: FFFFFFFF
  class UmbrellaItem : public ::GlobalNamespace::ActionableItem {
    public:
    public:
    // public UnityEngine.Transform[] umbrellaBones
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Transform*> umbrellaBones;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Transform*>) == 0x8);
    // public UnityEngine.Quaternion[] startingAngles
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::UnityEngine::Quaternion> startingAngles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // public UnityEngine.Quaternion[] endingAngles
    // Size: 0x8
    // Offset: 0x68
    ::ArrayW<::UnityEngine::Quaternion> endingAngles;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Quaternion>) == 0x8);
    // public UmbrellaItem umbrellaToCopy
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::UmbrellaItem* umbrellaToCopy;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::UmbrellaItem*) == 0x8);
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0x78
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lerpValue and: umbrellaRainDestroyTrigger
    char __padding4[0x4] = {};
    // public UnityEngine.Collider umbrellaRainDestroyTrigger
    // Size: 0x8
    // Offset: 0x80
    ::UnityEngine::Collider* umbrellaRainDestroyTrigger;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.Transform[] umbrellaBones
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Transform*>& dyn_umbrellaBones();
    // Get instance field reference: public UnityEngine.Quaternion[] startingAngles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn_startingAngles();
    // Get instance field reference: public UnityEngine.Quaternion[] endingAngles
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Quaternion>& dyn_endingAngles();
    // Get instance field reference: public UmbrellaItem umbrellaToCopy
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::UmbrellaItem*& dyn_umbrellaToCopy();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: public UnityEngine.Collider umbrellaRainDestroyTrigger
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_umbrellaRainDestroyTrigger();
    // public System.Void OnDisable()
    // Offset: 0xCFA6E4
    void OnDisable();
    // public System.Void LateUpdate()
    // Offset: 0xCFA75C
    void LateUpdate();
    // public System.Void GenerateEndingAngles()
    // Offset: 0xCFA9AC
    void GenerateEndingAngles();
    // public System.Void GenerateStartingAngles()
    // Offset: 0xCFAA94
    void GenerateStartingAngles();
    // public System.Void .ctor()
    // Offset: 0xCFAB9C
    // Implemented from: ActionableItem
    // Base method: System.Void ActionableItem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UmbrellaItem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UmbrellaItem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UmbrellaItem*, creationType>()));
    }
    // public override System.Void OnActivate()
    // Offset: 0xCF9AC4
    // Implemented from: ActionableItem
    // Base method: System.Void ActionableItem::OnActivate()
    void OnActivate();
    // public override System.Boolean CanActivate()
    // Offset: 0xCFAB8C
    // Implemented from: ActionableItem
    // Base method: System.Boolean ActionableItem::CanActivate()
    bool CanActivate();
    // public override System.Boolean CanDeactivate()
    // Offset: 0xCFAB94
    // Implemented from: ActionableItem
    // Base method: System.Boolean ActionableItem::CanDeactivate()
    bool CanDeactivate();
  }; // UmbrellaItem
  #pragma pack(pop)
  static check_size<sizeof(UmbrellaItem), 128 + sizeof(::UnityEngine::Collider*)> __GlobalNamespace_UmbrellaItemSizeCheck;
  static_assert(sizeof(UmbrellaItem) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::GenerateEndingAngles
// Il2CppName: GenerateEndingAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::GenerateEndingAngles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "GenerateEndingAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::GenerateStartingAngles
// Il2CppName: GenerateStartingAngles
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::GenerateStartingAngles)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "GenerateStartingAngles", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UmbrellaItem::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::UmbrellaItem::*)()>(&GlobalNamespace::UmbrellaItem::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UmbrellaItem*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
