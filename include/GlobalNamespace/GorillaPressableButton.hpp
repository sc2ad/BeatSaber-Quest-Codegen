// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaPressableButton
  class GorillaPressableButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaPressableButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaPressableButton*, "", "GorillaPressableButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: GorillaPressableButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaPressableButton : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaPressableButton::$TestPressCheck$d__14
    class $TestPressCheck$d__14;
    public:
    // public UnityEngine.Material pressedMaterial
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Material* pressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material unpressedMaterial
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::Material* unpressedMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.MeshRenderer buttonRenderer
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::MeshRenderer* buttonRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::MeshRenderer*) == 0x8);
    // public System.Boolean isOn
    // Size: 0x1
    // Offset: 0x30
    bool isOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOn and: debounceTime
    char __padding3[0x3] = {};
    // public System.Single debounceTime
    // Size: 0x4
    // Offset: 0x34
    float debounceTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single touchTime
    // Size: 0x4
    // Offset: 0x38
    float touchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean testPress
    // Size: 0x1
    // Offset: 0x3C
    bool testPress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean testHandLeft
    // Size: 0x1
    // Offset: 0x3D
    bool testHandLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: testHandLeft and: offText
    char __padding7[0x2] = {};
    // [TextAreaAttribute] Offset: 0x99465C
    // public System.String offText
    // Size: 0x8
    // Offset: 0x40
    ::StringW offText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // [TextAreaAttribute] Offset: 0x99466C
    // public System.String onText
    // Size: 0x8
    // Offset: 0x48
    ::StringW onText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.UI.Text myText
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Text* myText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Material pressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_pressedMaterial();
    // Get instance field reference: public UnityEngine.Material unpressedMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_unpressedMaterial();
    // Get instance field reference: public UnityEngine.MeshRenderer buttonRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::MeshRenderer*& dyn_buttonRenderer();
    // Get instance field reference: public System.Boolean isOn
    [[deprecated("Use field access instead!")]] bool& dyn_isOn();
    // Get instance field reference: public System.Single debounceTime
    [[deprecated("Use field access instead!")]] float& dyn_debounceTime();
    // Get instance field reference: public System.Single touchTime
    [[deprecated("Use field access instead!")]] float& dyn_touchTime();
    // Get instance field reference: public System.Boolean testPress
    [[deprecated("Use field access instead!")]] bool& dyn_testPress();
    // Get instance field reference: public System.Boolean testHandLeft
    [[deprecated("Use field access instead!")]] bool& dyn_testHandLeft();
    // Get instance field reference: public System.String offText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_offText();
    // Get instance field reference: public System.String onText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_onText();
    // Get instance field reference: public UnityEngine.UI.Text myText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_myText();
    // public System.Void .ctor()
    // Offset: 0xC7D6D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaPressableButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaPressableButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaPressableButton*, creationType>()));
    }
    // public System.Void Start()
    // Offset: 0xC7D0A4
    void Start();
    // private System.Void OnEnable()
    // Offset: 0xC7D0A8
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xC7D160
    void OnDisable();
    // private System.Collections.IEnumerator TestPressCheck()
    // Offset: 0xC7D0F0
    ::System::Collections::IEnumerator* TestPressCheck();
    // private System.Void OnTriggerEnter(UnityEngine.Collider collider)
    // Offset: 0xC7D1C8
    void OnTriggerEnter(::UnityEngine::Collider* collider);
    // public System.Void UpdateColor()
    // Offset: 0xC7D658
    void UpdateColor();
    // public System.Void ButtonActivation()
    // Offset: 0xC7D6D0
    void ButtonActivation();
    // public System.Void ButtonActivationWithHand(System.Boolean isLeftHand)
    // Offset: 0xC7D6D4
    void ButtonActivationWithHand(bool isLeftHand);
  }; // GorillaPressableButton
  #pragma pack(pop)
  static check_size<sizeof(GorillaPressableButton), 80 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_GorillaPressableButtonSizeCheck;
  static_assert(sizeof(GorillaPressableButton) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)()>(&GlobalNamespace::GorillaPressableButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)()>(&GlobalNamespace::GorillaPressableButton::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)()>(&GlobalNamespace::GorillaPressableButton::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::TestPressCheck
// Il2CppName: TestPressCheck
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::GorillaPressableButton::*)()>(&GlobalNamespace::GorillaPressableButton::TestPressCheck)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "TestPressCheck", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GorillaPressableButton::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)()>(&GlobalNamespace::GorillaPressableButton::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::ButtonActivation
// Il2CppName: ButtonActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)()>(&GlobalNamespace::GorillaPressableButton::ButtonActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "ButtonActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaPressableButton::ButtonActivationWithHand
// Il2CppName: ButtonActivationWithHand
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaPressableButton::*)(bool)>(&GlobalNamespace::GorillaPressableButton::ButtonActivationWithHand)> {
  static const MethodInfo* get() {
    static auto* isLeftHand = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaPressableButton*), "ButtonActivationWithHand", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeftHand});
  }
};
