// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightGroupSubsystem
#include "GlobalNamespace/LightGroupSubsystem.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightGroupGridLayouter
  class LightGroupGridLayouter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightGroupGridLayouter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightGroupGridLayouter*, "", "LightGroupGridLayouter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: LightGroupGridLayouter
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExecuteAlways] Offset: FFFFFFFF
  class LightGroupGridLayouter : public ::GlobalNamespace::LightGroupSubsystem {
    public:
    public:
    // [MinAttribute] Offset: 0x1121544
    // private System.Int32 _columns
    // Size: 0x4
    // Offset: 0x20
    int columns;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [HeaderAttribute] Offset: 0x1121580
    // private UnityEngine.Vector3 _columnStep
    // Size: 0xC
    // Offset: 0x24
    ::UnityEngine::Vector3 columnStep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _columnsFromCenter
    // Size: 0x1
    // Offset: 0x30
    bool columnsFromCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: columnsFromCenter and: rowStep
    char __padding2[0x3] = {};
    // [HeaderAttribute] Offset: 0x11215DC
    // private UnityEngine.Vector3 _rowStep
    // Size: 0xC
    // Offset: 0x34
    ::UnityEngine::Vector3 rowStep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private System.Boolean _rowsFromCenter
    // Size: 0x1
    // Offset: 0x40
    bool rowsFromCenter;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HeaderAttribute] Offset: 0x1121638
    // private System.Boolean _transposeOrder
    // Size: 0x1
    // Offset: 0x41
    bool transposeOrder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _alternateOrder
    // Size: 0x1
    // Offset: 0x42
    bool alternateOrder;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: alternateOrder and: defaultRotation
    char __padding6[0x1] = {};
    // private UnityEngine.Vector3 _defaultRotation
    // Size: 0xC
    // Offset: 0x44
    ::UnityEngine::Vector3 defaultRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    public:
    // Get instance field reference: private System.Int32 _columns
    [[deprecated("Use field access instead!")]] int& dyn__columns();
    // Get instance field reference: private UnityEngine.Vector3 _columnStep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__columnStep();
    // Get instance field reference: private System.Boolean _columnsFromCenter
    [[deprecated("Use field access instead!")]] bool& dyn__columnsFromCenter();
    // Get instance field reference: private UnityEngine.Vector3 _rowStep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__rowStep();
    // Get instance field reference: private System.Boolean _rowsFromCenter
    [[deprecated("Use field access instead!")]] bool& dyn__rowsFromCenter();
    // Get instance field reference: private System.Boolean _transposeOrder
    [[deprecated("Use field access instead!")]] bool& dyn__transposeOrder();
    // Get instance field reference: private System.Boolean _alternateOrder
    [[deprecated("Use field access instead!")]] bool& dyn__alternateOrder();
    // Get instance field reference: private UnityEngine.Vector3 _defaultRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn__defaultRotation();
    // public System.Void .ctor()
    // Offset: 0x156C798
    // Implemented from: LightGroupSubsystem
    // Base method: System.Void LightGroupSubsystem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightGroupGridLayouter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightGroupGridLayouter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightGroupGridLayouter*, creationType>()));
    }
  }; // LightGroupGridLayouter
  #pragma pack(pop)
  static check_size<sizeof(LightGroupGridLayouter), 68 + sizeof(::UnityEngine::Vector3)> __GlobalNamespace_LightGroupGridLayouterSizeCheck;
  static_assert(sizeof(LightGroupGridLayouter) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightGroupGridLayouter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
