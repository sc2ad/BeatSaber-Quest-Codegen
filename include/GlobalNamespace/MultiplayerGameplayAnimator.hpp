// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSO
  class ColorSO;
  // Forward declaring type: LightsAnimator
  class LightsAnimator;
  // Forward declaring type: MultiplayerLeadPlayerProvider
  class MultiplayerLeadPlayerProvider;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TimeTweeningManager
  class TimeTweeningManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerGameplayAnimator
  class MultiplayerGameplayAnimator;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerGameplayAnimator);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerGameplayAnimator*, "", "MultiplayerGameplayAnimator");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerGameplayAnimator
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerGameplayAnimator : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // protected ColorSO _activeLightsColor
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::ColorSO* activeLightsColor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // protected ColorSO _leadingLightsColor
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::ColorSO* leadingLightsColor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // protected ColorSO _failedLightsColor
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::ColorSO* failedLightsColor;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSO*) == 0x8);
    // [SpaceAttribute] Offset: 0x1125304
    // protected System.Single _leadingSwitchCrossFadeDuration
    // Size: 0x4
    // Offset: 0x30
    float leadingSwitchCrossFadeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: leadingSwitchCrossFadeDuration and: gameplayLightsAnimators
    char __padding3[0x4] = {};
    // [SpaceAttribute] Offset: 0x112533C
    // protected LightsAnimator[] _gameplayLightsAnimators
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::LightsAnimator*> gameplayLightsAnimators;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightsAnimator*>) == 0x8);
    // protected LightsAnimator[] _allLightsAnimators
    // Size: 0x8
    // Offset: 0x40
    ::ArrayW<::GlobalNamespace::LightsAnimator*> allLightsAnimators;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightsAnimator*>) == 0x8);
    // [InjectAttribute] Offset: 0x1125384
    // private readonly MultiplayerLeadPlayerProvider _leadPlayerProvider
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::MultiplayerLeadPlayerProvider* leadPlayerProvider;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLeadPlayerProvider*) == 0x8);
    // [InjectAttribute] Offset: 0x1125394
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerController*) == 0x8);
    // [InjectAttribute] Offset: 0x11253A4
    // protected readonly Tweening.TimeTweeningManager tweeningManager
    // Size: 0x8
    // Offset: 0x58
    ::Tweening::TimeTweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(::Tweening::TimeTweeningManager*) == 0x8);
    // [InjectAttribute] Offset: 0x11253B4
    // protected readonly IConnectedPlayer connectedPlayer
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IConnectedPlayer*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: protected ColorSO _activeLightsColor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__activeLightsColor();
    // Get instance field reference: protected ColorSO _leadingLightsColor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__leadingLightsColor();
    // Get instance field reference: protected ColorSO _failedLightsColor
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSO*& dyn__failedLightsColor();
    // Get instance field reference: protected System.Single _leadingSwitchCrossFadeDuration
    [[deprecated("Use field access instead!")]] float& dyn__leadingSwitchCrossFadeDuration();
    // Get instance field reference: protected LightsAnimator[] _gameplayLightsAnimators
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightsAnimator*>& dyn__gameplayLightsAnimators();
    // Get instance field reference: protected LightsAnimator[] _allLightsAnimators
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightsAnimator*>& dyn__allLightsAnimators();
    // Get instance field reference: private readonly MultiplayerLeadPlayerProvider _leadPlayerProvider
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLeadPlayerProvider*& dyn__leadPlayerProvider();
    // Get instance field reference: private readonly MultiplayerController _multiplayerController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerController*& dyn__multiplayerController();
    // Get instance field reference: protected readonly Tweening.TimeTweeningManager tweeningManager
    [[deprecated("Use field access instead!")]] ::Tweening::TimeTweeningManager*& dyn_tweeningManager();
    // Get instance field reference: protected readonly IConnectedPlayer connectedPlayer
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IConnectedPlayer*& dyn_connectedPlayer();
    // protected System.Void .ctor()
    // Offset: 0x1481390
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerGameplayAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerGameplayAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerGameplayAnimator*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x1480784
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x1480A24
    void OnDestroy();
    // protected System.Void AnimateNewLeaderSelected(System.Boolean isLeading)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void AnimateNewLeaderSelected(bool isLeading);
    // protected System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0x14810D8
    void HandleStateChanged(::GlobalNamespace::MultiplayerController::State state);
    // private System.Void HandleNewLeaderWasSelected(System.String userId)
    // Offset: 0x14885B0
    void HandleNewLeaderWasSelected(::StringW userId);
  }; // MultiplayerGameplayAnimator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerGameplayAnimator), 96 + sizeof(::GlobalNamespace::IConnectedPlayer*)> __GlobalNamespace_MultiplayerGameplayAnimatorSizeCheck;
  static_assert(sizeof(MultiplayerGameplayAnimator) == 0x68);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerGameplayAnimator::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerGameplayAnimator::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerGameplayAnimator::*)()>(&GlobalNamespace::MultiplayerGameplayAnimator::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerGameplayAnimator*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerGameplayAnimator::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerGameplayAnimator::*)()>(&GlobalNamespace::MultiplayerGameplayAnimator::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerGameplayAnimator*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerGameplayAnimator::AnimateNewLeaderSelected
// Il2CppName: AnimateNewLeaderSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerGameplayAnimator::*)(bool)>(&GlobalNamespace::MultiplayerGameplayAnimator::AnimateNewLeaderSelected)> {
  static const MethodInfo* get() {
    static auto* isLeading = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerGameplayAnimator*), "AnimateNewLeaderSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isLeading});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerGameplayAnimator::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerGameplayAnimator::*)(::GlobalNamespace::MultiplayerController::State)>(&GlobalNamespace::MultiplayerGameplayAnimator::HandleStateChanged)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "MultiplayerController/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerGameplayAnimator*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerGameplayAnimator::HandleNewLeaderWasSelected
// Il2CppName: HandleNewLeaderWasSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerGameplayAnimator::*)(::StringW)>(&GlobalNamespace::MultiplayerGameplayAnimator::HandleNewLeaderWasSelected)> {
  static const MethodInfo* get() {
    static auto* userId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerGameplayAnimator*), "HandleNewLeaderWasSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{userId});
  }
};
