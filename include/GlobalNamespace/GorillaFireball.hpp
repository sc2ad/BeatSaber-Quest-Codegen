// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaThrowable
#include "GlobalNamespace/GorillaThrowable.hpp"
// Including type: Photon.Pun.IPunInstantiateMagicCallback
#include "Photon/Pun/IPunInstantiateMagicCallback.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Photon::Pun
namespace Photon::Pun {
  // Forward declaring type: PhotonMessageInfo
  struct PhotonMessageInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaFireball
  class GorillaFireball;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaFireball);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaFireball*, "", "GorillaFireball");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x198
  #pragma pack(push, 1)
  // Autogenerated type: GorillaFireball
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaFireball : public ::GlobalNamespace::GorillaThrowable/*, public ::Photon::Pun::IPunInstantiateMagicCallback*/ {
    public:
    public:
    // public System.Single maxExplosionScale
    // Size: 0x4
    // Offset: 0x184
    float maxExplosionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single totalExplosionTime
    // Size: 0x4
    // Offset: 0x188
    float totalExplosionTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single gravityStrength
    // Size: 0x4
    // Offset: 0x18C
    float gravityStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean canExplode
    // Size: 0x1
    // Offset: 0x190
    bool canExplode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canExplode and: explosionStartTime
    char __padding3[0x3] = {};
    // private System.Single explosionStartTime
    // Size: 0x4
    // Offset: 0x194
    float explosionStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Creating interface conversion operator: operator ::Photon::Pun::IPunInstantiateMagicCallback
    operator ::Photon::Pun::IPunInstantiateMagicCallback() noexcept {
      return *reinterpret_cast<::Photon::Pun::IPunInstantiateMagicCallback*>(this);
    }
    // Get instance field reference: public System.Single maxExplosionScale
    [[deprecated("Use field access instead!")]] float& dyn_maxExplosionScale();
    // Get instance field reference: public System.Single totalExplosionTime
    [[deprecated("Use field access instead!")]] float& dyn_totalExplosionTime();
    // Get instance field reference: public System.Single gravityStrength
    [[deprecated("Use field access instead!")]] float& dyn_gravityStrength();
    // Get instance field reference: private System.Boolean canExplode
    [[deprecated("Use field access instead!")]] bool& dyn_canExplode();
    // Get instance field reference: private System.Single explosionStartTime
    [[deprecated("Use field access instead!")]] float& dyn_explosionStartTime();
    // private System.Void Update()
    // Offset: 0xC69688
    void Update();
    // public System.Void LocalExplode()
    // Offset: 0xC699CC
    void LocalExplode();
    // public System.Void OnPhotonInstantiate(Photon.Pun.PhotonMessageInfo info)
    // Offset: 0xC69A10
    void OnPhotonInstantiate(::Photon::Pun::PhotonMessageInfo info);
    // public System.Void Explode()
    // Offset: 0xC69B58
    void Explode();
    // public System.Void .ctor()
    // Offset: 0xC69B5C
    // Implemented from: GorillaThrowable
    // Base method: System.Void GorillaThrowable::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaFireball* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaFireball::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaFireball*, creationType>()));
    }
    // public override System.Void Start()
    // Offset: 0xC6965C
    // Implemented from: GorillaThrowable
    // Base method: System.Void GorillaThrowable::Start()
    void Start();
    // public override System.Void LateUpdate()
    // Offset: 0xC697EC
    // Implemented from: GorillaThrowable
    // Base method: System.Void GorillaThrowable::LateUpdate()
    void LateUpdate();
    // public override System.Void ThrowThisThingo()
    // Offset: 0xC69908
    // Implemented from: GorillaThrowable
    // Base method: System.Void GorillaThrowable::ThrowThisThingo()
    void ThrowThisThingo();
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0xC69934
    // Implemented from: GorillaThrowable
    // Base method: System.Void GorillaThrowable::OnCollisionEnter(UnityEngine.Collision collision)
    void OnCollisionEnter(::UnityEngine::Collision* collision);
  }; // GorillaFireball
  #pragma pack(pop)
  static check_size<sizeof(GorillaFireball), 404 + sizeof(float)> __GlobalNamespace_GorillaFireballSizeCheck;
  static_assert(sizeof(GorillaFireball) == 0x198);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)()>(&GlobalNamespace::GorillaFireball::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::LocalExplode
// Il2CppName: LocalExplode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)()>(&GlobalNamespace::GorillaFireball::LocalExplode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "LocalExplode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::OnPhotonInstantiate
// Il2CppName: OnPhotonInstantiate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)(::Photon::Pun::PhotonMessageInfo)>(&GlobalNamespace::GorillaFireball::OnPhotonInstantiate)> {
  static const MethodInfo* get() {
    static auto* info = &::il2cpp_utils::GetClassFromName("Photon.Pun", "PhotonMessageInfo")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "OnPhotonInstantiate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::Explode
// Il2CppName: Explode
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)()>(&GlobalNamespace::GorillaFireball::Explode)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "Explode", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)()>(&GlobalNamespace::GorillaFireball::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)()>(&GlobalNamespace::GorillaFireball::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::ThrowThisThingo
// Il2CppName: ThrowThisThingo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)()>(&GlobalNamespace::GorillaFireball::ThrowThisThingo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "ThrowThisThingo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaFireball::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaFireball::*)(::UnityEngine::Collision*)>(&GlobalNamespace::GorillaFireball::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaFireball*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
