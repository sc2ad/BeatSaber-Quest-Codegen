// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RandomizeTest
  class RandomizeTest;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RandomizeTest);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RandomizeTest*, "", "RandomizeTest");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: RandomizeTest
  // [TokenAttribute] Offset: FFFFFFFF
  class RandomizeTest : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Collections.Generic.List`1<System.Int32> testList
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<int>* testList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<int>*) == 0x8);
    // public System.Int32[] testListArray
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<int> testListArray;
    // Field size check
    static_assert(sizeof(::ArrayW<int>) == 0x8);
    // public System.Int32 randomIterator
    // Size: 0x4
    // Offset: 0x28
    int randomIterator;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tempRandIndex
    // Size: 0x4
    // Offset: 0x2C
    int tempRandIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 tempRandValue
    // Size: 0x4
    // Offset: 0x30
    int tempRandValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Collections.Generic.List`1<System.Int32> testList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<int>*& dyn_testList();
    // Get instance field reference: public System.Int32[] testListArray
    [[deprecated("Use field access instead!")]] ::ArrayW<int>& dyn_testListArray();
    // Get instance field reference: public System.Int32 randomIterator
    [[deprecated("Use field access instead!")]] int& dyn_randomIterator();
    // Get instance field reference: public System.Int32 tempRandIndex
    [[deprecated("Use field access instead!")]] int& dyn_tempRandIndex();
    // Get instance field reference: public System.Int32 tempRandValue
    [[deprecated("Use field access instead!")]] int& dyn_tempRandValue();
    // public System.Void .ctor()
    // Offset: 0xCC1BB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RandomizeTest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RandomizeTest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RandomizeTest*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xCC18D4
    void Start();
    // public System.Void RandomizeList(ref System.Collections.Generic.List`1<System.Int32> listToRandomize)
    // Offset: 0xCC1A84
    void RandomizeList(ByRef<::System::Collections::Generic::List_1<int>*> listToRandomize);
  }; // RandomizeTest
  #pragma pack(pop)
  static check_size<sizeof(RandomizeTest), 48 + sizeof(int)> __GlobalNamespace_RandomizeTestSizeCheck;
  static_assert(sizeof(RandomizeTest) == 0x34);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RandomizeTest::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RandomizeTest::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RandomizeTest::*)()>(&GlobalNamespace::RandomizeTest::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomizeTest*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::RandomizeTest::RandomizeList
// Il2CppName: RandomizeList
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::RandomizeTest::*)(ByRef<::System::Collections::Generic::List_1<int>*>)>(&GlobalNamespace::RandomizeTest::RandomizeList)> {
  static const MethodInfo* get() {
    static auto* listToRandomize = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Int32")})->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RandomizeTest*), "RandomizeList", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{listToRandomize});
  }
};
