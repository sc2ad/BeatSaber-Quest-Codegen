// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: BeatmapLevelSelectionMask
#include "GlobalNamespace/BeatmapLevelSelectionMask.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x97
  #pragma pack(push, 1)
  // Autogenerated type: LocalNetworkPlayerModel/LocalNetworkPlayer
  // [TokenAttribute] Offset: FFFFFFFF
  class LocalNetworkPlayerModel::LocalNetworkPlayer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly LocalNetworkPlayerModel _playerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::LocalNetworkPlayerModel* playerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkPlayerModel*) == 0x8);
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Net.IPAddress _ipAddress
    // Size: 0x8
    // Offset: 0x28
    System::Net::IPAddress* ipAddress;
    // Field size check
    static_assert(sizeof(System::Net::IPAddress*) == 0x8);
    // private readonly System.Boolean _isMe
    // Size: 0x1
    // Offset: 0x30
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isPartyOwner
    // Size: 0x1
    // Offset: 0x31
    bool isPartyOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isPartyOwner and: joinRequestTime
    char __padding5[0x2] = {};
    // private System.Single _joinRequestTime
    // Size: 0x4
    // Offset: 0x34
    float joinRequestTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _inviteSentTime
    // Size: 0x4
    // Offset: 0x38
    float inviteSentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isBlocked
    // Size: 0x1
    // Offset: 0x3C
    bool isBlocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasBlockedMe
    // Size: 0x1
    // Offset: 0x3D
    bool hasBlockedMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasBlockedMe and: secret
    char __padding9[0x2] = {};
    // private System.String _secret
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _multiplayerPort
    // Size: 0x4
    // Offset: 0x48
    int multiplayerPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: multiplayerPort and: connectedPlayer
    char __padding11[0x4] = {};
    // private IConnectedPlayer _connectedPlayer
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // private System.Single _connectingStartTime
    // Size: 0x4
    // Offset: 0x58
    float connectingStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 _currentPartySize
    // Size: 0x4
    // Offset: 0x5C
    int currentPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private BeatmapLevelSelectionMask _selectionMask
    // Size: 0x18
    // Offset: 0x60
    GlobalNamespace::BeatmapLevelSelectionMask selectionMask;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelSelectionMask) == 0x18);
    // private GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x78
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x90
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _allowedJoinToMyParty
    // Size: 0x1
    // Offset: 0x94
    bool allowedJoinToMyParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _requestedToJoinMyParty
    // Size: 0x1
    // Offset: 0x95
    bool requestedToJoinMyParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _invitedMeToJoinTheirParty
    // Size: 0x1
    // Offset: 0x96
    bool invitedMeToJoinTheirParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LocalNetworkPlayer
    LocalNetworkPlayer(GlobalNamespace::LocalNetworkPlayerModel* playerModel_ = {}, ::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, System::Net::IPAddress* ipAddress_ = {}, bool isMe_ = {}, bool isPartyOwner_ = {}, float joinRequestTime_ = {}, float inviteSentTime_ = {}, bool isBlocked_ = {}, bool hasBlockedMe_ = {}, ::Il2CppString* secret_ = {}, int multiplayerPort_ = {}, GlobalNamespace::IConnectedPlayer* connectedPlayer_ = {}, float connectingStartTime_ = {}, int currentPartySize_ = {}, GlobalNamespace::BeatmapLevelSelectionMask selectionMask_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, float lastUpdateTime_ = {}, bool allowedJoinToMyParty_ = {}, bool requestedToJoinMyParty_ = {}, bool invitedMeToJoinTheirParty_ = {}) noexcept : playerModel{playerModel_}, userId{userId_}, userName{userName_}, ipAddress{ipAddress_}, isMe{isMe_}, isPartyOwner{isPartyOwner_}, joinRequestTime{joinRequestTime_}, inviteSentTime{inviteSentTime_}, isBlocked{isBlocked_}, hasBlockedMe{hasBlockedMe_}, secret{secret_}, multiplayerPort{multiplayerPort_}, connectedPlayer{connectedPlayer_}, connectingStartTime{connectingStartTime_}, currentPartySize{currentPartySize_}, selectionMask{selectionMask_}, configuration{configuration_}, lastUpdateTime{lastUpdateTime_}, allowedJoinToMyParty{allowedJoinToMyParty_}, requestedToJoinMyParty{requestedToJoinMyParty_}, invitedMeToJoinTheirParty{invitedMeToJoinTheirParty_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // static field const value: static private System.Single kPeerBroadcastTimeout
    static constexpr const float kPeerBroadcastTimeout = 30;
    // Get static field: static private System.Single kPeerBroadcastTimeout
    static float _get_kPeerBroadcastTimeout();
    // Set static field: static private System.Single kPeerBroadcastTimeout
    static void _set_kPeerBroadcastTimeout(float value);
    // static field const value: static private System.Single kConnectionTimeout
    static constexpr const float kConnectionTimeout = 5;
    // Get static field: static private System.Single kConnectionTimeout
    static float _get_kConnectionTimeout();
    // Set static field: static private System.Single kConnectionTimeout
    static void _set_kConnectionTimeout(float value);
    // static field const value: static private System.Single kRequestTimeout
    static constexpr const float kRequestTimeout = 120;
    // Get static field: static private System.Single kRequestTimeout
    static float _get_kRequestTimeout();
    // Set static field: static private System.Single kRequestTimeout
    static void _set_kRequestTimeout(float value);
    // Get instance field reference: private readonly LocalNetworkPlayerModel _playerModel
    GlobalNamespace::LocalNetworkPlayerModel*& dyn__playerModel();
    // Get instance field reference: private readonly System.String _userId
    ::Il2CppString*& dyn__userId();
    // Get instance field reference: private readonly System.String _userName
    ::Il2CppString*& dyn__userName();
    // Get instance field reference: private readonly System.Net.IPAddress _ipAddress
    System::Net::IPAddress*& dyn__ipAddress();
    // Get instance field reference: private readonly System.Boolean _isMe
    bool& dyn__isMe();
    // Get instance field reference: private System.Boolean _isPartyOwner
    bool& dyn__isPartyOwner();
    // Get instance field reference: private System.Single _joinRequestTime
    float& dyn__joinRequestTime();
    // Get instance field reference: private System.Single _inviteSentTime
    float& dyn__inviteSentTime();
    // Get instance field reference: private System.Boolean _isBlocked
    bool& dyn__isBlocked();
    // Get instance field reference: private System.Boolean _hasBlockedMe
    bool& dyn__hasBlockedMe();
    // Get instance field reference: private System.String _secret
    ::Il2CppString*& dyn__secret();
    // Get instance field reference: private System.Int32 _multiplayerPort
    int& dyn__multiplayerPort();
    // Get instance field reference: private IConnectedPlayer _connectedPlayer
    GlobalNamespace::IConnectedPlayer*& dyn__connectedPlayer();
    // Get instance field reference: private System.Single _connectingStartTime
    float& dyn__connectingStartTime();
    // Get instance field reference: private System.Int32 _currentPartySize
    int& dyn__currentPartySize();
    // Get instance field reference: private BeatmapLevelSelectionMask _selectionMask
    GlobalNamespace::BeatmapLevelSelectionMask& dyn__selectionMask();
    // Get instance field reference: private GameplayServerConfiguration _configuration
    GlobalNamespace::GameplayServerConfiguration& dyn__configuration();
    // Get instance field reference: private System.Single _lastUpdateTime
    float& dyn__lastUpdateTime();
    // Get instance field reference: private System.Boolean _allowedJoinToMyParty
    bool& dyn__allowedJoinToMyParty();
    // Get instance field reference: private System.Boolean _requestedToJoinMyParty
    bool& dyn__requestedToJoinMyParty();
    // Get instance field reference: private System.Boolean _invitedMeToJoinTheirParty
    bool& dyn__invitedMeToJoinTheirParty();
    // public System.String get_userId()
    // Offset: 0x125F51C
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x125F524
    ::Il2CppString* get_userName();
    // public System.Net.IPAddress get_ipAddress()
    // Offset: 0x125F52C
    System::Net::IPAddress* get_ipAddress();
    // public System.Boolean get_isMe()
    // Offset: 0x125F534
    bool get_isMe();
    // public System.Boolean get_isPartyOwner()
    // Offset: 0x125F53C
    bool get_isPartyOwner();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x125F544
    int get_currentPartySize();
    // public BeatmapLevelSelectionMask get_selectionMask()
    // Offset: 0x125F54C
    GlobalNamespace::BeatmapLevelSelectionMask get_selectionMask();
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x125F560
    GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public IConnectedPlayer get_connectedPlayer()
    // Offset: 0x125F574
    GlobalNamespace::IConnectedPlayer* get_connectedPlayer();
    // public System.Boolean get_isBlocked()
    // Offset: 0x125F57C
    bool get_isBlocked();
    // public System.Boolean get_hasBlockedMe()
    // Offset: 0x125F584
    bool get_hasBlockedMe();
    // public System.String get_secret()
    // Offset: 0x125F58C
    ::Il2CppString* get_secret();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0x125F594
    int get_multiplayerPort();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x125EDC8
    bool get_isMyPartyOwner();
    // public System.Boolean get_isConnected()
    // Offset: 0x125F59C
    bool get_isConnected();
    // public System.Boolean get_allowedJoinToMyParty()
    // Offset: 0x125F65C
    bool get_allowedJoinToMyParty();
    // public System.Boolean get_isConnecting()
    // Offset: 0x125E980
    bool get_isConnecting();
    // private System.Boolean get_wasConnecting()
    // Offset: 0x125F664
    bool get_wasConnecting();
    // public System.Boolean get_isTimedOut()
    // Offset: 0x125CD10
    bool get_isTimedOut();
    // public System.Void .ctor(LocalNetworkPlayerModel playerModel, System.String userId, System.String userName, System.Net.IPAddress ipAddress, System.Boolean isMe)
    // Offset: 0x125D554
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalNetworkPlayerModel::LocalNetworkPlayer* New_ctor(GlobalNamespace::LocalNetworkPlayerModel* playerModel, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPAddress* ipAddress, bool isMe) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalNetworkPlayerModel::LocalNetworkPlayer*, creationType>(playerModel, userId, userName, ipAddress, isMe)));
    }
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x125F6A8
    bool get_isWaitingOnJoin();
    // public System.Boolean get_canJoin()
    // Offset: 0x125F6F0
    bool get_canJoin();
    // public System.Void Join()
    // Offset: 0x125F7AC
    void Join();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x125F804
    bool get_requiresPassword();
    // public System.Void Join(System.String password)
    // Offset: 0x125F80C
    void Join(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x125F810
    bool get_isWaitingOnInvite();
    // public System.Boolean get_canInvite()
    // Offset: 0x125F858
    bool get_canInvite();
    // public System.Void Invite()
    // Offset: 0x125F914
    void Invite();
    // public System.Boolean get_canKick()
    // Offset: 0x125F984
    bool get_canKick();
    // public System.Void Kick()
    // Offset: 0x125F9D0
    void Kick();
    // public System.Boolean get_canLeave()
    // Offset: 0x125F9F0
    bool get_canLeave();
    // public System.Void Leave()
    // Offset: 0x125FA4C
    void Leave();
    // public System.Boolean get_canBlock()
    // Offset: 0x125FA70
    bool get_canBlock();
    // public System.Void Block()
    // Offset: 0x125FAE4
    void Block();
    // public System.Boolean get_canUnblock()
    // Offset: 0x125FAF0
    bool get_canUnblock();
    // public System.Void Unblock()
    // Offset: 0x125FAF8
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x125D7DC
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x125E080
    void SendInviteResponse(bool accept);
    // public System.Boolean Update(System.Boolean isPartyOwner, System.Int32 currentPartySize, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration)
    // Offset: 0x125D1F0
    bool Update(bool isPartyOwner, int currentPartySize, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Boolean HasFailedToConnect()
    // Offset: 0x125CC7C
    bool HasFailedToConnect();
    // public System.Void SetInvited(System.Boolean isPartyOwner, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.String secret, System.Int32 multiplayerPort)
    // Offset: 0x125E044
    void SetInvited(bool isPartyOwner, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret, int multiplayerPort);
    // public System.Void SetJoinResponse(System.Boolean isPartyOwner, BeatmapLevelSelectionMask selectionMask, GameplayServerConfiguration configuration, System.String secret, System.Int32 multiplayerPort, System.Boolean blocked)
    // Offset: 0x125DCCC
    void SetJoinResponse(bool isPartyOwner, GlobalNamespace::BeatmapLevelSelectionMask selectionMask, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret, int multiplayerPort, bool blocked);
    // public System.Void SetInviteResponse(System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x125E250
    void SetInviteResponse(bool accepted, bool blocked);
    // public System.Void SetJoinRequested()
    // Offset: 0x125D7D0
    void SetJoinRequested();
    // public System.Boolean SetConnected(IConnectedPlayer connectedPlayer)
    // Offset: 0x125E88C
    bool SetConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // public System.Boolean SetDisconnected()
    // Offset: 0x125E9C4
    bool SetDisconnected();
    // private System.Boolean get_isConnectable()
    // Offset: 0x125FB64
    bool get_isConnectable();
    // public System.Void Connect()
    // Offset: 0x125FB00
    void Connect();
  }; // LocalNetworkPlayerModel/LocalNetworkPlayer
  #pragma pack(pop)
  static check_size<sizeof(LocalNetworkPlayerModel::LocalNetworkPlayer), 150 + sizeof(bool)> __GlobalNamespace_LocalNetworkPlayerModel_LocalNetworkPlayerSizeCheck;
  static_assert(sizeof(LocalNetworkPlayerModel::LocalNetworkPlayer) == 0x97);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, "", "LocalNetworkPlayerModel/LocalNetworkPlayer");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId
// Il2CppName: get_userId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_userId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName
// Il2CppName: get_userName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_userName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_userName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress
// Il2CppName: get_ipAddress
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Net::IPAddress* (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_ipAddress)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_ipAddress", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe
// Il2CppName: get_isMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner
// Il2CppName: get_isPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isPartyOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize
// Il2CppName: get_currentPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_currentPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_currentPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_selectionMask
// Il2CppName: get_selectionMask
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::BeatmapLevelSelectionMask (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_selectionMask)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_selectionMask", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_configuration
// Il2CppName: get_configuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GameplayServerConfiguration (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_configuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_configuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_connectedPlayer
// Il2CppName: get_connectedPlayer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::IConnectedPlayer* (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_connectedPlayer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_connectedPlayer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked
// Il2CppName: get_isBlocked
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isBlocked)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isBlocked", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe
// Il2CppName: get_hasBlockedMe
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_hasBlockedMe)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_hasBlockedMe", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret
// Il2CppName: get_secret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_secret)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_secret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort
// Il2CppName: get_multiplayerPort
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_multiplayerPort)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_multiplayerPort", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner
// Il2CppName: get_isMyPartyOwner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isMyPartyOwner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isMyPartyOwner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected
// Il2CppName: get_isConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty
// Il2CppName: get_allowedJoinToMyParty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_allowedJoinToMyParty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_allowedJoinToMyParty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting
// Il2CppName: get_isConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting
// Il2CppName: get_wasConnecting
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_wasConnecting)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_wasConnecting", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut
// Il2CppName: get_isTimedOut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isTimedOut)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isTimedOut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin
// Il2CppName: get_isWaitingOnJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isWaitingOnJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin
// Il2CppName: get_canJoin
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canJoin)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canJoin", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword
// Il2CppName: get_requiresPassword
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_requiresPassword)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_requiresPassword", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join
// Il2CppName: Join
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(::Il2CppString*)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Join)> {
  static const MethodInfo* get() {
    static auto* password = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Join", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{password});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite
// Il2CppName: get_isWaitingOnInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isWaitingOnInvite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isWaitingOnInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canInvite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Invite
// Il2CppName: Invite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Invite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Invite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick
// Il2CppName: get_canKick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canKick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canKick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Kick
// Il2CppName: Kick
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Kick)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Kick", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave
// Il2CppName: get_canLeave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canLeave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canLeave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Leave
// Il2CppName: Leave
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Leave)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Leave", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock
// Il2CppName: get_canBlock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canBlock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canBlock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Block
// Il2CppName: Block
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Block)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Block", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock
// Il2CppName: get_canUnblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_canUnblock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_canUnblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock
// Il2CppName: Unblock
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Unblock)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Unblock", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse
// Il2CppName: SendJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendJoinResponse)> {
  static const MethodInfo* get() {
    static auto* accept = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SendJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accept});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse
// Il2CppName: SendInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SendInviteResponse)> {
  static const MethodInfo* get() {
    static auto* accept = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SendInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accept});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool, int, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Update)> {
  static const MethodInfo* get() {
    static auto* isPartyOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* currentPartySize = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPartyOwner, currentPartySize, selectionMask, configuration});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect
// Il2CppName: HasFailedToConnect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::HasFailedToConnect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "HasFailedToConnect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited
// Il2CppName: SetInvited
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration, ::Il2CppString*, int)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInvited)> {
  static const MethodInfo* get() {
    static auto* isPartyOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* multiplayerPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetInvited", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPartyOwner, selectionMask, configuration, secret, multiplayerPort});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse
// Il2CppName: SetJoinResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool, GlobalNamespace::BeatmapLevelSelectionMask, GlobalNamespace::GameplayServerConfiguration, ::Il2CppString*, int, bool)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinResponse)> {
  static const MethodInfo* get() {
    static auto* isPartyOwner = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* selectionMask = &::il2cpp_utils::GetClassFromName("", "BeatmapLevelSelectionMask")->byval_arg;
    static auto* configuration = &::il2cpp_utils::GetClassFromName("", "GameplayServerConfiguration")->byval_arg;
    static auto* secret = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* multiplayerPort = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* blocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetJoinResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{isPartyOwner, selectionMask, configuration, secret, multiplayerPort, blocked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse
// Il2CppName: SetInviteResponse
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(bool, bool)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetInviteResponse)> {
  static const MethodInfo* get() {
    static auto* accepted = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    static auto* blocked = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetInviteResponse", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{accepted, blocked});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested
// Il2CppName: SetJoinRequested
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetJoinRequested)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetJoinRequested", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected
// Il2CppName: SetConnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)(GlobalNamespace::IConnectedPlayer*)>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetConnected)> {
  static const MethodInfo* get() {
    static auto* connectedPlayer = &::il2cpp_utils::GetClassFromName("", "IConnectedPlayer")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetConnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{connectedPlayer});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected
// Il2CppName: SetDisconnected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::SetDisconnected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "SetDisconnected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable
// Il2CppName: get_isConnectable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::get_isConnectable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "get_isConnectable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Connect
// Il2CppName: Connect
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::*)()>(&GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::Connect)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*), "Connect", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
