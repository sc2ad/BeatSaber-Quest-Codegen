// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collision
  class Collision;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaWalkingGrab
  class GorillaWalkingGrab;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaWalkingGrab);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaWalkingGrab*, "", "GorillaWalkingGrab");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x64
  #pragma pack(push, 1)
  // Autogenerated type: GorillaWalkingGrab
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaWalkingGrab : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject handToStickTo
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* handToStickTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Single ratioToUse
    // Size: 0x4
    // Offset: 0x20
    float ratioToUse;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single forceMultiplier
    // Size: 0x4
    // Offset: 0x24
    float forceMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 historySteps
    // Size: 0x4
    // Offset: 0x28
    int historySteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: historySteps and: playspaceRigidbody
    char __padding3[0x4] = {};
    // public UnityEngine.Rigidbody playspaceRigidbody
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Rigidbody* playspaceRigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Rigidbody thisRigidbody
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::Rigidbody* thisRigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.Vector3 lastPosition
    // Size: 0xC
    // Offset: 0x40
    ::UnityEngine::Vector3 lastPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 maybeLastPositionIDK
    // Size: 0xC
    // Offset: 0x4C
    ::UnityEngine::Vector3 maybeLastPositionIDK;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3[] positionHistory
    // Size: 0x8
    // Offset: 0x58
    ::ArrayW<::UnityEngine::Vector3> positionHistory;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Vector3>) == 0x8);
    // private System.Int32 historyIndex
    // Size: 0x4
    // Offset: 0x60
    int historyIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject handToStickTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_handToStickTo();
    // Get instance field reference: public System.Single ratioToUse
    [[deprecated("Use field access instead!")]] float& dyn_ratioToUse();
    // Get instance field reference: public System.Single forceMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_forceMultiplier();
    // Get instance field reference: public System.Int32 historySteps
    [[deprecated("Use field access instead!")]] int& dyn_historySteps();
    // Get instance field reference: public UnityEngine.Rigidbody playspaceRigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_playspaceRigidbody();
    // Get instance field reference: private UnityEngine.Rigidbody thisRigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_thisRigidbody();
    // Get instance field reference: private UnityEngine.Vector3 lastPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_lastPosition();
    // Get instance field reference: private UnityEngine.Vector3 maybeLastPositionIDK
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_maybeLastPositionIDK();
    // Get instance field reference: private UnityEngine.Vector3[] positionHistory
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Vector3>& dyn_positionHistory();
    // Get instance field reference: private System.Int32 historyIndex
    [[deprecated("Use field access instead!")]] int& dyn_historyIndex();
    // public System.Void .ctor()
    // Offset: 0xC89558
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaWalkingGrab* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaWalkingGrab::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaWalkingGrab*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xC89174
    void Start();
    // private System.Void FixedUpdate()
    // Offset: 0xC891F8
    void FixedUpdate();
    // private System.Boolean MakeJump()
    // Offset: 0xC892F4
    bool MakeJump();
    // private System.Void OnCollisionStay(UnityEngine.Collision collision)
    // Offset: 0xC892FC
    void OnCollisionStay(::UnityEngine::Collision* collision);
  }; // GorillaWalkingGrab
  #pragma pack(pop)
  static check_size<sizeof(GorillaWalkingGrab), 96 + sizeof(int)> __GlobalNamespace_GorillaWalkingGrabSizeCheck;
  static_assert(sizeof(GorillaWalkingGrab) == 0x64);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaWalkingGrab::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaWalkingGrab::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaWalkingGrab::*)()>(&GlobalNamespace::GorillaWalkingGrab::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaWalkingGrab*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaWalkingGrab::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaWalkingGrab::*)()>(&GlobalNamespace::GorillaWalkingGrab::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaWalkingGrab*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaWalkingGrab::MakeJump
// Il2CppName: MakeJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GorillaWalkingGrab::*)()>(&GlobalNamespace::GorillaWalkingGrab::MakeJump)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaWalkingGrab*), "MakeJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaWalkingGrab::OnCollisionStay
// Il2CppName: OnCollisionStay
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaWalkingGrab::*)(::UnityEngine::Collision*)>(&GlobalNamespace::GorillaWalkingGrab::OnCollisionStay)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaWalkingGrab*), "OnCollisionStay", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
