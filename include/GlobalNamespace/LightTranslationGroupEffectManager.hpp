// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LightTranslationGroup
  class LightTranslationGroup;
  // Forward declaring type: LightTranslationGroupEffect
  class LightTranslationGroupEffect;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightTranslationGroupEffectManager
  class LightTranslationGroupEffectManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightTranslationGroupEffectManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightTranslationGroupEffectManager*, "", "LightTranslationGroupEffectManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: LightTranslationGroupEffectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class LightTranslationGroupEffectManager : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [InjectAttribute] Offset: 0x1121924
    // private readonly LightTranslationGroup[] _lightTranslationGroups
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::LightTranslationGroup*> lightTranslationGroups;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::LightTranslationGroup*>) == 0x8);
    // [InjectAttribute] Offset: 0x1121934
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x20
    ::Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(::Zenject::DiContainer*) == 0x8);
    // private readonly System.Collections.Generic.List`1<LightTranslationGroupEffect> _lightTranslationGroupEffects
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GlobalNamespace::LightTranslationGroupEffect*>* lightTranslationGroupEffects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LightTranslationGroupEffect*>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private readonly LightTranslationGroup[] _lightTranslationGroups
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::LightTranslationGroup*>& dyn__lightTranslationGroups();
    // Get instance field reference: private readonly Zenject.DiContainer _container
    [[deprecated("Use field access instead!")]] ::Zenject::DiContainer*& dyn__container();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<LightTranslationGroupEffect> _lightTranslationGroupEffects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::LightTranslationGroupEffect*>*& dyn__lightTranslationGroupEffects();
    // public System.Void .ctor()
    // Offset: 0x1516830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightTranslationGroupEffectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightTranslationGroupEffectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightTranslationGroupEffectManager*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x1516410
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x151673C
    void OnDestroy();
  }; // LightTranslationGroupEffectManager
  #pragma pack(pop)
  static check_size<sizeof(LightTranslationGroupEffectManager), 40 + sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::LightTranslationGroupEffect*>*)> __GlobalNamespace_LightTranslationGroupEffectManagerSizeCheck;
  static_assert(sizeof(LightTranslationGroupEffectManager) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffectManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightTranslationGroupEffectManager::*)()>(&GlobalNamespace::LightTranslationGroupEffectManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffectManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightTranslationGroupEffectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LightTranslationGroupEffectManager::*)()>(&GlobalNamespace::LightTranslationGroupEffectManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightTranslationGroupEffectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
