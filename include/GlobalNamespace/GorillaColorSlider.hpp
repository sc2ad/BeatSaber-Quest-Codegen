// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaTriggerBox
  class GorillaTriggerBox;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaColorSlider
  class GorillaColorSlider;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaColorSlider);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaColorSlider*, "", "GorillaColorSlider");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: GorillaColorSlider
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaColorSlider : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public System.Boolean setRandomly
    // Size: 0x1
    // Offset: 0x18
    bool setRandomly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: setRandomly and: zRange
    char __padding0[0x3] = {};
    // public System.Single zRange
    // Size: 0x4
    // Offset: 0x1C
    float zRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxValue
    // Size: 0x4
    // Offset: 0x20
    float maxValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minValue
    // Size: 0x4
    // Offset: 0x24
    float minValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 startingLocation
    // Size: 0xC
    // Offset: 0x28
    ::UnityEngine::Vector3 startingLocation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public System.Int32 valueIndex
    // Size: 0x4
    // Offset: 0x34
    int valueIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single valueImReporting
    // Size: 0x4
    // Offset: 0x38
    float valueImReporting;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: valueImReporting and: gorilla
    char __padding6[0x4] = {};
    // public GorillaTriggerBox gorilla
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GorillaTriggerBox* gorilla;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerBox*) == 0x8);
    // private System.Single startingZ
    // Size: 0x4
    // Offset: 0x48
    float startingZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public System.Boolean setRandomly
    [[deprecated("Use field access instead!")]] bool& dyn_setRandomly();
    // Get instance field reference: public System.Single zRange
    [[deprecated("Use field access instead!")]] float& dyn_zRange();
    // Get instance field reference: public System.Single maxValue
    [[deprecated("Use field access instead!")]] float& dyn_maxValue();
    // Get instance field reference: public System.Single minValue
    [[deprecated("Use field access instead!")]] float& dyn_minValue();
    // Get instance field reference: public UnityEngine.Vector3 startingLocation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startingLocation();
    // Get instance field reference: public System.Int32 valueIndex
    [[deprecated("Use field access instead!")]] int& dyn_valueIndex();
    // Get instance field reference: public System.Single valueImReporting
    [[deprecated("Use field access instead!")]] float& dyn_valueImReporting();
    // Get instance field reference: public GorillaTriggerBox gorilla
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerBox*& dyn_gorilla();
    // Get instance field reference: private System.Single startingZ
    [[deprecated("Use field access instead!")]] float& dyn_startingZ();
    // public System.Void .ctor()
    // Offset: 0xC67F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaColorSlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaColorSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaColorSlider*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xC67C2C
    void Start();
    // public System.Void SetPosition(System.Single speed)
    // Offset: 0xC67C70
    void SetPosition(float speed);
    // public System.Single InterpolateValue(System.Single value)
    // Offset: 0xC67D58
    float InterpolateValue(float value);
    // public System.Void OnSliderRelease()
    // Offset: 0xC67D8C
    void OnSliderRelease();
  }; // GorillaColorSlider
  #pragma pack(pop)
  static check_size<sizeof(GorillaColorSlider), 72 + sizeof(float)> __GlobalNamespace_GorillaColorSliderSizeCheck;
  static_assert(sizeof(GorillaColorSlider) == 0x4C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorSlider::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorSlider::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaColorSlider::*)()>(&GlobalNamespace::GorillaColorSlider::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaColorSlider*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorSlider::SetPosition
// Il2CppName: SetPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaColorSlider::*)(float)>(&GlobalNamespace::GorillaColorSlider::SetPosition)> {
  static const MethodInfo* get() {
    static auto* speed = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaColorSlider*), "SetPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{speed});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorSlider::InterpolateValue
// Il2CppName: InterpolateValue
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::GorillaColorSlider::*)(float)>(&GlobalNamespace::GorillaColorSlider::InterpolateValue)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaColorSlider*), "InterpolateValue", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaColorSlider::OnSliderRelease
// Il2CppName: OnSliderRelease
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaColorSlider::*)()>(&GlobalNamespace::GorillaColorSlider::OnSliderRelease)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaColorSlider*), "OnSliderRelease", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
