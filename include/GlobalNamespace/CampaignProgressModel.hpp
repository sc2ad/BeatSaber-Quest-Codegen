// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CampaignProgressModel
  class CampaignProgressModel;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CampaignProgressModel);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CampaignProgressModel*, "", "CampaignProgressModel");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CampaignProgressModel
  // [TokenAttribute] Offset: FFFFFFFF
  class CampaignProgressModel : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // [InjectAttribute] Offset: 0x10DBE4C
    // private PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerDataModel*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _missionIds
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::HashSet_1<::StringW>* missionIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private System.String _finalMissionId
    // Size: 0x8
    // Offset: 0x28
    ::StringW finalMissionId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean _numberOfClearedMissionsDirty
    // Size: 0x1
    // Offset: 0x30
    bool numberOfClearedMissionsDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: numberOfClearedMissionsDirty and: numberOfClearedMissions
    char __padding3[0x3] = {};
    // private System.Int32 _numberOfClearedMissions
    // Size: 0x4
    // Offset: 0x34
    int numberOfClearedMissions;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private PlayerDataModel _playerDataModel
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerDataModel*& dyn__playerDataModel();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _missionIds
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__missionIds();
    // Get instance field reference: private System.String _finalMissionId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__finalMissionId();
    // Get instance field reference: private System.Boolean _numberOfClearedMissionsDirty
    [[deprecated("Use field access instead!")]] bool& dyn__numberOfClearedMissionsDirty();
    // Get instance field reference: private System.Int32 _numberOfClearedMissions
    [[deprecated("Use field access instead!")]] int& dyn__numberOfClearedMissions();
    // public System.Int32 get_numberOfClearedMissions()
    // Offset: 0x1357AC8
    int get_numberOfClearedMissions();
    // public System.Void .ctor()
    // Offset: 0x1357E0C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CampaignProgressModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CampaignProgressModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CampaignProgressModel*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x1357C30
    void Awake();
    // public System.Boolean IsMissionRegistered(System.String missionId)
    // Offset: 0x1357C98
    bool IsMissionRegistered(::StringW missionId);
    // public System.Void RegisterMissionId(System.String missionId)
    // Offset: 0x1357D00
    void RegisterMissionId(::StringW missionId);
    // public System.Boolean IsMissionCleared(System.String missionId)
    // Offset: 0x1357D74
    bool IsMissionCleared(::StringW missionId);
    // public System.Boolean IsMissionFinal(System.String missionId)
    // Offset: 0x1357DA8
    bool IsMissionFinal(::StringW missionId);
    // public System.Void SetFinalMissionId(System.String missionId)
    // Offset: 0x1357DB4
    void SetFinalMissionId(::StringW missionId);
    // public System.Boolean WillFinishGameAfterThisMission(System.String missionId)
    // Offset: 0x1357840
    bool WillFinishGameAfterThisMission(::StringW missionId);
    // public System.Void SetMissionCleared(System.String missionId)
    // Offset: 0x135788C
    void SetMissionCleared(::StringW missionId);
    // public System.Void __SetMissionCleared(System.String missionId, System.Boolean cleared)
    // Offset: 0x1357DBC
    void __SetMissionCleared(::StringW missionId, bool cleared);
    // private System.Int32 UpdateNumberOfClearedMissions()
    // Offset: 0x1357AFC
    int UpdateNumberOfClearedMissions();
  }; // CampaignProgressModel
  #pragma pack(pop)
  static check_size<sizeof(CampaignProgressModel), 52 + sizeof(int)> __GlobalNamespace_CampaignProgressModelSizeCheck;
  static_assert(sizeof(CampaignProgressModel) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::get_numberOfClearedMissions
// Il2CppName: get_numberOfClearedMissions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::CampaignProgressModel::*)()>(&GlobalNamespace::CampaignProgressModel::get_numberOfClearedMissions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "get_numberOfClearedMissions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CampaignProgressModel::*)()>(&GlobalNamespace::CampaignProgressModel::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::IsMissionRegistered
// Il2CppName: IsMissionRegistered
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::IsMissionRegistered)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "IsMissionRegistered", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::RegisterMissionId
// Il2CppName: RegisterMissionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::RegisterMissionId)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "RegisterMissionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::IsMissionCleared
// Il2CppName: IsMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::IsMissionCleared)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "IsMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::IsMissionFinal
// Il2CppName: IsMissionFinal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::IsMissionFinal)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "IsMissionFinal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::SetFinalMissionId
// Il2CppName: SetFinalMissionId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::SetFinalMissionId)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "SetFinalMissionId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::WillFinishGameAfterThisMission
// Il2CppName: WillFinishGameAfterThisMission
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::WillFinishGameAfterThisMission)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "WillFinishGameAfterThisMission", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::SetMissionCleared
// Il2CppName: SetMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CampaignProgressModel::*)(::StringW)>(&GlobalNamespace::CampaignProgressModel::SetMissionCleared)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "SetMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::__SetMissionCleared
// Il2CppName: __SetMissionCleared
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CampaignProgressModel::*)(::StringW, bool)>(&GlobalNamespace::CampaignProgressModel::__SetMissionCleared)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* cleared = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "__SetMissionCleared", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId, cleared});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CampaignProgressModel::UpdateNumberOfClearedMissions
// Il2CppName: UpdateNumberOfClearedMissions
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::CampaignProgressModel::*)()>(&GlobalNamespace::CampaignProgressModel::UpdateNumberOfClearedMissions)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CampaignProgressModel*), "UpdateNumberOfClearedMissions", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
