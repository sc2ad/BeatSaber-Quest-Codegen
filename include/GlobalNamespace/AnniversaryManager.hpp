// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MainMenuViewController
#include "GlobalNamespace/MainMenuViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: FireworksController
  class FireworksController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: AnniversaryManager
  // [TokenAttribute] Offset: FFFFFFFF
  class AnniversaryManager : public UnityEngine::MonoBehaviour {
    public:
    // private FireworksController _fireworksController
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::FireworksController* fireworksController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FireworksController*) == 0x8);
    // [InjectAttribute] Offset: 0xEFF4A0
    // private readonly MainMenuViewController _mainMenuViewController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MainMenuViewController* mainMenuViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MainMenuViewController*) == 0x8);
    // Creating value type constructor for type: AnniversaryManager
    AnniversaryManager(GlobalNamespace::FireworksController* fireworksController_ = {}, GlobalNamespace::MainMenuViewController* mainMenuViewController_ = {}) noexcept : fireworksController{fireworksController_}, mainMenuViewController{mainMenuViewController_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private FireworksController _fireworksController
    GlobalNamespace::FireworksController*& dyn__fireworksController();
    // Get instance field reference: private readonly MainMenuViewController _mainMenuViewController
    GlobalNamespace::MainMenuViewController*& dyn__mainMenuViewController();
    // protected System.Void Start()
    // Offset: 0x1241860
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x124191C
    void OnDestroy();
    // private System.Void HandleMainMenuViewControllerDidFinish(MainMenuViewController mainMenuViewController, MainMenuViewController/MenuButton menuButton)
    // Offset: 0x12419F8
    void HandleMainMenuViewControllerDidFinish(GlobalNamespace::MainMenuViewController* mainMenuViewController, GlobalNamespace::MainMenuViewController::MenuButton menuButton);
    // private System.Void StartFireworks()
    // Offset: 0x12418FC
    void StartFireworks();
    // private System.Void StopFireworks()
    // Offset: 0x12419FC
    void StopFireworks();
    // public System.Void .ctor()
    // Offset: 0x1241A1C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnniversaryManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AnniversaryManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnniversaryManager*, creationType>()));
    }
  }; // AnniversaryManager
  #pragma pack(pop)
  static check_size<sizeof(AnniversaryManager), 32 + sizeof(GlobalNamespace::MainMenuViewController*)> __GlobalNamespace_AnniversaryManagerSizeCheck;
  static_assert(sizeof(AnniversaryManager) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AnniversaryManager*, "", "AnniversaryManager");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AnniversaryManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnniversaryManager::*)()>(&GlobalNamespace::AnniversaryManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnniversaryManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnniversaryManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnniversaryManager::*)()>(&GlobalNamespace::AnniversaryManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnniversaryManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnniversaryManager::HandleMainMenuViewControllerDidFinish
// Il2CppName: HandleMainMenuViewControllerDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnniversaryManager::*)(GlobalNamespace::MainMenuViewController*, GlobalNamespace::MainMenuViewController::MenuButton)>(&GlobalNamespace::AnniversaryManager::HandleMainMenuViewControllerDidFinish)> {
  static const MethodInfo* get() {
    static auto* mainMenuViewController = &::il2cpp_utils::GetClassFromName("", "MainMenuViewController")->byval_arg;
    static auto* menuButton = &::il2cpp_utils::GetClassFromName("", "MainMenuViewController/MenuButton")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnniversaryManager*), "HandleMainMenuViewControllerDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{mainMenuViewController, menuButton});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnniversaryManager::StartFireworks
// Il2CppName: StartFireworks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnniversaryManager::*)()>(&GlobalNamespace::AnniversaryManager::StartFireworks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnniversaryManager*), "StartFireworks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnniversaryManager::StopFireworks
// Il2CppName: StopFireworks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AnniversaryManager::*)()>(&GlobalNamespace::AnniversaryManager::StopFireworks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AnniversaryManager*), "StopFireworks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::AnniversaryManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
