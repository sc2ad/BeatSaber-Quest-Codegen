// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OffsetDirection
  struct OffsetDirection;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OffsetDirectionExtensions
  class OffsetDirectionExtensions;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OffsetDirectionExtensions);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OffsetDirectionExtensions*, "", "OffsetDirectionExtensions");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: OffsetDirectionExtensions
  // [TokenAttribute] Offset: FFFFFFFF
  // [ExtensionAttribute] Offset: FFFFFFFF
  class OffsetDirectionExtensions : public ::Il2CppObject {
    public:
    // static public OffsetDirection OppositeDirection(OffsetDirection offsetDirection)
    // Offset: 0x283F4E4
    static ::GlobalNamespace::OffsetDirection OppositeDirection(::GlobalNamespace::OffsetDirection offsetDirection);
  }; // OffsetDirectionExtensions
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OffsetDirectionExtensions::OppositeDirection
// Il2CppName: OppositeDirection
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OffsetDirection (*)(::GlobalNamespace::OffsetDirection)>(&GlobalNamespace::OffsetDirectionExtensions::OppositeDirection)> {
  static const MethodInfo* get() {
    static auto* offsetDirection = &::il2cpp_utils::GetClassFromName("", "OffsetDirection")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OffsetDirectionExtensions*), "OppositeDirection", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{offsetDirection});
  }
};
