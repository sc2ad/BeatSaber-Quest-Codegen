// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IDiffieHellmanKeyPair
  class IDiffieHellmanKeyPair;
}
// Forward declaring namespace: Org::BouncyCastle::Security
namespace Org::BouncyCastle::Security {
  // Forward declaring type: SecureRandom
  class SecureRandom;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Forward declaring type: DHParameters
  class DHParameters;
  // Forward declaring type: ECDomainParameters
  class ECDomainParameters;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Agreement
namespace Org::BouncyCastle::Crypto::Agreement {
  // Forward declaring type: DHBasicAgreement
  class DHBasicAgreement;
  // Forward declaring type: ECDHBasicAgreement
  class ECDHBasicAgreement;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DiffieHellmanUtility
  class DiffieHellmanUtility;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DiffieHellmanUtility);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DiffieHellmanUtility*, "", "DiffieHellmanUtility");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: DiffieHellmanUtility
  // [TokenAttribute] Offset: FFFFFFFF
  class DiffieHellmanUtility : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::DiffieHellmanUtility::KeyType
    struct KeyType;
    // Nested type: ::GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair
    class DiffieHellmanKeyPair;
    // Nested type: ::GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair
    class ElipticalCurveKeyPair;
    // Nested type: ::GlobalNamespace::DiffieHellmanUtility::OperationTimer
    class OperationTimer;
    // static field const value: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
    static constexpr const int kMaxDiffieHellmanPublicKeyLength = 2048;
    // Get static field: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
    static int _get_kMaxDiffieHellmanPublicKeyLength();
    // Set static field: static public System.Int32 kMaxDiffieHellmanPublicKeyLength
    static void _set_kMaxDiffieHellmanPublicKeyLength(int value);
    // static field const value: static public System.Int32 kMaxElipticalCurvePublicKeyLength
    static constexpr const int kMaxElipticalCurvePublicKeyLength = 256;
    // Get static field: static public System.Int32 kMaxElipticalCurvePublicKeyLength
    static int _get_kMaxElipticalCurvePublicKeyLength();
    // Set static field: static public System.Int32 kMaxElipticalCurvePublicKeyLength
    static void _set_kMaxElipticalCurvePublicKeyLength(int value);
    // Get static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
    static ::Org::BouncyCastle::Security::SecureRandom* _get__secureRandom();
    // Set static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
    static void _set__secureRandom(::Org::BouncyCastle::Security::SecureRandom* value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C01D8
    // Get static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
    static ::Org::BouncyCastle::Crypto::Parameters::DHParameters* _get__dhParameters();
    // Set static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
    static void _set__dhParameters(::Org::BouncyCastle::Crypto::Parameters::DHParameters* value);
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x10C01E8
    // Get static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
    static ::Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* _get__ecParameters();
    // Set static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
    static void _set__ecParameters(::Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* value);
    // Get static field: static private System.Byte[] _ecPointFormats
    static ::ArrayW<uint8_t> _get__ecPointFormats();
    // Set static field: static private System.Byte[] _ecPointFormats
    static void _set__ecPointFormats(::ArrayW<uint8_t> value);
    // static private System.Void .cctor()
    // Offset: 0x167F970
    static void _cctor();
    // static public System.Threading.Tasks.Task`1<IDiffieHellmanKeyPair> GenerateKeysAsync(DiffieHellmanUtility/KeyType keyType)
    // Offset: 0x167F15C
    static ::System::Threading::Tasks::Task_1<::GlobalNamespace::IDiffieHellmanKeyPair*>* GenerateKeysAsync(::GlobalNamespace::DiffieHellmanUtility::KeyType keyType);
    // static public IDiffieHellmanKeyPair GenerateKeys(DiffieHellmanUtility/KeyType keyType)
    // Offset: 0x167F218
    static ::GlobalNamespace::IDiffieHellmanKeyPair* GenerateKeys(::GlobalNamespace::DiffieHellmanUtility::KeyType keyType);
    // static private DiffieHellmanUtility/DiffieHellmanKeyPair GenerateDiffieHellmanKeys()
    // Offset: 0x167F3F0
    static ::GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* GenerateDiffieHellmanKeys();
    // static private DiffieHellmanUtility/ElipticalCurveKeyPair GenerateElipticalCurveKeys()
    // Offset: 0x167F29C
    static ::GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* GenerateElipticalCurveKeys();
    // static private System.Byte[] GetPreMasterSecret(Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement dhBasicAgreement, System.Byte[] clientPublicKey)
    // Offset: 0x167F680
    static ::ArrayW<uint8_t> GetPreMasterSecret(::Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement* dhBasicAgreement, ::ArrayW<uint8_t> clientPublicKey);
    // static private System.Byte[] GetPreMasterSecret(Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement ecdhBasicAgreement, System.Byte[] clientPublicKey)
    // Offset: 0x167F7D4
    static ::ArrayW<uint8_t> GetPreMasterSecret(::Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement* ecdhBasicAgreement, ::ArrayW<uint8_t> clientPublicKey);
  }; // DiffieHellmanUtility
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::DiffieHellmanUtility::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::GenerateKeysAsync
// Il2CppName: GenerateKeysAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::IDiffieHellmanKeyPair*>* (*)(::GlobalNamespace::DiffieHellmanUtility::KeyType)>(&GlobalNamespace::DiffieHellmanUtility::GenerateKeysAsync)> {
  static const MethodInfo* get() {
    static auto* keyType = &::il2cpp_utils::GetClassFromName("", "DiffieHellmanUtility/KeyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), "GenerateKeysAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::GenerateKeys
// Il2CppName: GenerateKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IDiffieHellmanKeyPair* (*)(::GlobalNamespace::DiffieHellmanUtility::KeyType)>(&GlobalNamespace::DiffieHellmanUtility::GenerateKeys)> {
  static const MethodInfo* get() {
    static auto* keyType = &::il2cpp_utils::GetClassFromName("", "DiffieHellmanUtility/KeyType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), "GenerateKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{keyType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::GenerateDiffieHellmanKeys
// Il2CppName: GenerateDiffieHellmanKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* (*)()>(&GlobalNamespace::DiffieHellmanUtility::GenerateDiffieHellmanKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), "GenerateDiffieHellmanKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::GenerateElipticalCurveKeys
// Il2CppName: GenerateElipticalCurveKeys
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* (*)()>(&GlobalNamespace::DiffieHellmanUtility::GenerateElipticalCurveKeys)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), "GenerateElipticalCurveKeys", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement*, ::ArrayW<uint8_t>)>(&GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret)> {
  static const MethodInfo* get() {
    static auto* dhBasicAgreement = &::il2cpp_utils::GetClassFromName("Org.BouncyCastle.Crypto.Agreement", "DHBasicAgreement")->byval_arg;
    static auto* clientPublicKey = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dhBasicAgreement, clientPublicKey});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret
// Il2CppName: GetPreMasterSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(::Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement*, ::ArrayW<uint8_t>)>(&GlobalNamespace::DiffieHellmanUtility::GetPreMasterSecret)> {
  static const MethodInfo* get() {
    static auto* ecdhBasicAgreement = &::il2cpp_utils::GetClassFromName("Org.BouncyCastle.Crypto.Agreement", "ECDHBasicAgreement")->byval_arg;
    static auto* clientPublicKey = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Byte"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DiffieHellmanUtility*), "GetPreMasterSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{ecdhBasicAgreement, clientPublicKey});
  }
};
