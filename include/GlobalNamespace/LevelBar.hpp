// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ImageView
  class ImageView;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LevelBar
  class LevelBar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LevelBar);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LevelBar*, "", "LevelBar");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: LevelBar
  // [TokenAttribute] Offset: FFFFFFFF
  class LevelBar : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::LevelBar::$Setup$d__17
    struct $Setup$d__17;
    public:
    // private HMUI.ImageView _songArtworkImageView
    // Size: 0x8
    // Offset: 0x18
    ::HMUI::ImageView* songArtworkImageView;
    // Field size check
    static_assert(sizeof(::HMUI::ImageView*) == 0x8);
    // private TMPro.TextMeshProUGUI _songNameText
    // Size: 0x8
    // Offset: 0x20
    ::TMPro::TextMeshProUGUI* songNameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _authorNameText
    // Size: 0x8
    // Offset: 0x28
    ::TMPro::TextMeshProUGUI* authorNameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // [SpaceAttribute] Offset: 0x10ECE4C
    // private System.Boolean _showSongSubName
    // Size: 0x1
    // Offset: 0x30
    bool showSongSubName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showSongSubName and: singleLineSongInfoContainer
    char __padding3[0x7] = {};
    // [DrawIfAttribute] Offset: 0x10ECE84
    // [NullAllowed] Offset: 0x10ECE84
    // private UnityEngine.GameObject _singleLineSongInfoContainer
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::GameObject* singleLineSongInfoContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [DrawIfAttribute] Offset: 0x10ECF7C
    // [NullAllowed] Offset: 0x10ECF7C
    // private UnityEngine.GameObject _multiLineSongInfoContainer
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::GameObject* multiLineSongInfoContainer;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // [DrawIfAttribute] Offset: 0x10ED074
    // [NullAllowed] Offset: 0x10ED074
    // private TMPro.TextMeshProUGUI _multiLineSongNameText
    // Size: 0x8
    // Offset: 0x48
    ::TMPro::TextMeshProUGUI* multiLineSongNameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // [DrawIfAttribute] Offset: 0x10ED16C
    // [NullAllowed] Offset: 0x10ED16C
    // private TMPro.TextMeshProUGUI _multiLineAuthorNameText
    // Size: 0x8
    // Offset: 0x50
    ::TMPro::TextMeshProUGUI* multiLineAuthorNameText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // [SpaceAttribute] Offset: 0x10ED264
    // private System.Boolean _showDifficultyAndCharacteristic
    // Size: 0x1
    // Offset: 0x58
    bool showDifficultyAndCharacteristic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: showDifficultyAndCharacteristic and: difficultyText
    char __padding8[0x7] = {};
    // [DrawIfAttribute] Offset: 0x10ED29C
    // [NullAllowed] Offset: 0x10ED29C
    // private TMPro.TextMeshProUGUI _difficultyText
    // Size: 0x8
    // Offset: 0x60
    ::TMPro::TextMeshProUGUI* difficultyText;
    // Field size check
    static_assert(sizeof(::TMPro::TextMeshProUGUI*) == 0x8);
    // [DrawIfAttribute] Offset: 0x10ED394
    // [NullAllowed] Offset: 0x10ED394
    // private HMUI.ImageView _characteristicIconImageView
    // Size: 0x8
    // Offset: 0x68
    ::HMUI::ImageView* characteristicIconImageView;
    // Field size check
    static_assert(sizeof(::HMUI::ImageView*) == 0x8);
    // private System.Boolean _useArtworkBackground
    // Size: 0x1
    // Offset: 0x70
    bool useArtworkBackground;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useArtworkBackground and: artworkBackgroundImage
    char __padding11[0x7] = {};
    // [DrawIfAttribute] Offset: 0x10ED49C
    // [NullAllowed] Offset: 0x10ED49C
    // private HMUI.ImageView _artworkBackgroundImage
    // Size: 0x8
    // Offset: 0x78
    ::HMUI::ImageView* artworkBackgroundImage;
    // Field size check
    static_assert(sizeof(::HMUI::ImageView*) == 0x8);
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Size: 0x8
    // Offset: 0x80
    ::System::Threading::CancellationTokenSource* cancellationTokenSource;
    // Field size check
    static_assert(sizeof(::System::Threading::CancellationTokenSource*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private HMUI.ImageView _songArtworkImageView
    [[deprecated("Use field access instead!")]] ::HMUI::ImageView*& dyn__songArtworkImageView();
    // Get instance field reference: private TMPro.TextMeshProUGUI _songNameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__songNameText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _authorNameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__authorNameText();
    // Get instance field reference: private System.Boolean _showSongSubName
    [[deprecated("Use field access instead!")]] bool& dyn__showSongSubName();
    // Get instance field reference: private UnityEngine.GameObject _singleLineSongInfoContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__singleLineSongInfoContainer();
    // Get instance field reference: private UnityEngine.GameObject _multiLineSongInfoContainer
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__multiLineSongInfoContainer();
    // Get instance field reference: private TMPro.TextMeshProUGUI _multiLineSongNameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__multiLineSongNameText();
    // Get instance field reference: private TMPro.TextMeshProUGUI _multiLineAuthorNameText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__multiLineAuthorNameText();
    // Get instance field reference: private System.Boolean _showDifficultyAndCharacteristic
    [[deprecated("Use field access instead!")]] bool& dyn__showDifficultyAndCharacteristic();
    // Get instance field reference: private TMPro.TextMeshProUGUI _difficultyText
    [[deprecated("Use field access instead!")]] ::TMPro::TextMeshProUGUI*& dyn__difficultyText();
    // Get instance field reference: private HMUI.ImageView _characteristicIconImageView
    [[deprecated("Use field access instead!")]] ::HMUI::ImageView*& dyn__characteristicIconImageView();
    // Get instance field reference: private System.Boolean _useArtworkBackground
    [[deprecated("Use field access instead!")]] bool& dyn__useArtworkBackground();
    // Get instance field reference: private HMUI.ImageView _artworkBackgroundImage
    [[deprecated("Use field access instead!")]] ::HMUI::ImageView*& dyn__artworkBackgroundImage();
    // Get instance field reference: private System.Threading.CancellationTokenSource _cancellationTokenSource
    [[deprecated("Use field access instead!")]] ::System::Threading::CancellationTokenSource*& dyn__cancellationTokenSource();
    // public System.Void set_hide(System.Boolean value)
    // Offset: 0x13A5FE8
    void set_hide(bool value);
    // public System.Void .ctor()
    // Offset: 0x13A611C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LevelBar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LevelBar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LevelBar*, creationType>()));
    }
    // public System.Void Setup(IPreviewBeatmapLevel previewBeatmapLevel)
    // Offset: 0x13A6020
    void Setup(::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel);
    // public System.Void Setup(IPreviewBeatmapLevel previewBeatmapLevel, BeatmapCharacteristicSO beatmapCharacteristic, BeatmapDifficulty beatmapDifficulty)
    // Offset: 0x13A602C
    void Setup(::GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, ::GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // protected System.Void OnDestroy()
    // Offset: 0x13A6108
    void OnDestroy();
  }; // LevelBar
  #pragma pack(pop)
  static check_size<sizeof(LevelBar), 128 + sizeof(::System::Threading::CancellationTokenSource*)> __GlobalNamespace_LevelBarSizeCheck;
  static_assert(sizeof(LevelBar) == 0x88);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LevelBar::set_hide
// Il2CppName: set_hide
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelBar::*)(bool)>(&GlobalNamespace::LevelBar::set_hide)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelBar*), "set_hide", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelBar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::LevelBar::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelBar::*)(::GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::LevelBar::Setup)> {
  static const MethodInfo* get() {
    static auto* previewBeatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelBar*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previewBeatmapLevel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelBar::Setup
// Il2CppName: Setup
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelBar::*)(::GlobalNamespace::IPreviewBeatmapLevel*, ::GlobalNamespace::BeatmapCharacteristicSO*, ::GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::LevelBar::Setup)> {
  static const MethodInfo* get() {
    static auto* previewBeatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    static auto* beatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    static auto* beatmapDifficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelBar*), "Setup", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{previewBeatmapLevel, beatmapCharacteristic, beatmapDifficulty});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LevelBar::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::LevelBar::*)()>(&GlobalNamespace::LevelBar::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LevelBar*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
