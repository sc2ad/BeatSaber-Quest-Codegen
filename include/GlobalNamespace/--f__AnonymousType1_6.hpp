// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: <>f__AnonymousType1`6<$AccessToken$j__TPar, $UserID$j__TPar, $Nonce$j__TPar, $Platform$j__TPar, $SKU$j__TPar, $DebugParameters$j__TPar>
  template<typename $AccessToken$j__TPar, typename $UserID$j__TPar, typename $Nonce$j__TPar, typename $Platform$j__TPar, typename $SKU$j__TPar, typename $DebugParameters$j__TPar>
  class $$f__AnonymousType1_6;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(::GlobalNamespace::$$f__AnonymousType1_6, "", "<>f__AnonymousType1`6");
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: <>f__AnonymousType1`6
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  template<typename $AccessToken$j__TPar, typename $UserID$j__TPar, typename $Nonce$j__TPar, typename $Platform$j__TPar, typename $SKU$j__TPar, typename $DebugParameters$j__TPar>
  class $$f__AnonymousType1_6 : public ::Il2CppObject {
    public:
    public:
    // [DebuggerBrowsableAttribute] Offset: 0x993628
    // private readonly <AccessToken>j__TPar <AccessToken>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $AccessToken$j__TPar $AccessToken$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x99363C
    // private readonly <UserID>j__TPar <UserID>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $UserID$j__TPar $UserID$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x993650
    // private readonly <Nonce>j__TPar <Nonce>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $Nonce$j__TPar $Nonce$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x993664
    // private readonly <Platform>j__TPar <Platform>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $Platform$j__TPar $Platform$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x993678
    // private readonly <SKU>j__TPar <SKU>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $SKU$j__TPar $SKU$i__Field;
    // [DebuggerBrowsableAttribute] Offset: 0x99368C
    // private readonly <DebugParameters>j__TPar <DebugParameters>i__Field
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    $DebugParameters$j__TPar $DebugParameters$i__Field;
    public:
    // Autogenerated instance field getter
    // Get instance field: private readonly <AccessToken>j__TPar <AccessToken>i__Field
    [[deprecated("Use field access instead!")]] $AccessToken$j__TPar& dyn_$AccessToken$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::dyn_$AccessToken$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<AccessToken>i__Field"))->offset;
      return *reinterpret_cast<$AccessToken$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <UserID>j__TPar <UserID>i__Field
    [[deprecated("Use field access instead!")]] $UserID$j__TPar& dyn_$UserID$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::dyn_$UserID$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<UserID>i__Field"))->offset;
      return *reinterpret_cast<$UserID$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <Nonce>j__TPar <Nonce>i__Field
    [[deprecated("Use field access instead!")]] $Nonce$j__TPar& dyn_$Nonce$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::dyn_$Nonce$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Nonce>i__Field"))->offset;
      return *reinterpret_cast<$Nonce$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <Platform>j__TPar <Platform>i__Field
    [[deprecated("Use field access instead!")]] $Platform$j__TPar& dyn_$Platform$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::dyn_$Platform$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<Platform>i__Field"))->offset;
      return *reinterpret_cast<$Platform$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <SKU>j__TPar <SKU>i__Field
    [[deprecated("Use field access instead!")]] $SKU$j__TPar& dyn_$SKU$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::dyn_$SKU$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<SKU>i__Field"))->offset;
      return *reinterpret_cast<$SKU$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // Autogenerated instance field getter
    // Get instance field: private readonly <DebugParameters>j__TPar <DebugParameters>i__Field
    [[deprecated("Use field access instead!")]] $DebugParameters$j__TPar& dyn_$DebugParameters$i__Field() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::dyn_$DebugParameters$i__Field");
      auto ___internal__instance = this;
      static auto ___internal__field__offset = THROW_UNLESS(il2cpp_utils::FindField(___internal__instance, "<DebugParameters>i__Field"))->offset;
      return *reinterpret_cast<$DebugParameters$j__TPar*>(reinterpret_cast<char*>(this) + ___internal__field__offset);
    }
    // public <AccessToken>j__TPar get_AccessToken()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $AccessToken$j__TPar get_AccessToken() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::get_AccessToken");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_AccessToken", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$AccessToken$j__TPar, false>(this, ___internal__method);
    }
    // public <UserID>j__TPar get_UserID()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $UserID$j__TPar get_UserID() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::get_UserID");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_UserID", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$UserID$j__TPar, false>(this, ___internal__method);
    }
    // public <Nonce>j__TPar get_Nonce()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $Nonce$j__TPar get_Nonce() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::get_Nonce");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Nonce", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$Nonce$j__TPar, false>(this, ___internal__method);
    }
    // public <Platform>j__TPar get_Platform()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $Platform$j__TPar get_Platform() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::get_Platform");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_Platform", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$Platform$j__TPar, false>(this, ___internal__method);
    }
    // public <SKU>j__TPar get_SKU()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $SKU$j__TPar get_SKU() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::get_SKU");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_SKU", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$SKU$j__TPar, false>(this, ___internal__method);
    }
    // public <DebugParameters>j__TPar get_DebugParameters()
    // Offset: 0xFFFFFFFFFFFFFFFF
    $DebugParameters$j__TPar get_DebugParameters() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::get_DebugParameters");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "get_DebugParameters", std::vector<Il2CppClass*>{}, ::std::vector<const Il2CppType*>{})));
      return ::il2cpp_utils::RunMethodRethrow<$DebugParameters$j__TPar, false>(this, ___internal__method);
    }
    // public System.Void .ctor(<AccessToken>j__TPar AccessToken, <UserID>j__TPar UserID, <Nonce>j__TPar Nonce, <Platform>j__TPar Platform, <SKU>j__TPar SKU, <DebugParameters>j__TPar DebugParameters)
    // Offset: 0xFFFFFFFFFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static $$f__AnonymousType1_6<$AccessToken$j__TPar, $UserID$j__TPar, $Nonce$j__TPar, $Platform$j__TPar, $SKU$j__TPar, $DebugParameters$j__TPar>* New_ctor($AccessToken$j__TPar AccessToken, $UserID$j__TPar UserID, $Nonce$j__TPar Nonce, $Platform$j__TPar Platform, $SKU$j__TPar SKU, $DebugParameters$j__TPar DebugParameters) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<$$f__AnonymousType1_6<$AccessToken$j__TPar, $UserID$j__TPar, $Nonce$j__TPar, $Platform$j__TPar, $SKU$j__TPar, $DebugParameters$j__TPar>*, creationType>(AccessToken, UserID, Nonce, Platform, SKU, DebugParameters)));
    }
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::Equals");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<bool, false>(this, ___internal__method, value);
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::GetHashCode");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<int, false>(this, ___internal__method);
    }
    // public override System.String ToString()
    // Offset: 0xFFFFFFFFFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::$$f__AnonymousType1_6::ToString");
      auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(this, classof(::Il2CppObject*), -1));
      return ::il2cpp_utils::RunMethodRethrow<::StringW, false>(this, ___internal__method);
    }
  }; // <>f__AnonymousType1`6
  // Could not write size check! Type: <>f__AnonymousType1`6 is generic, or has no fields that are valid for size checks!
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
