// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PreviewBeatmapLevelPackSO
  class PreviewBeatmapLevelPackSO;
  // Forward declaring type: PreviewBeatmapLevelSO
  class PreviewBeatmapLevelSO;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelsPromoDataSO
  class BeatmapLevelsPromoDataSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapLevelsPromoDataSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelsPromoDataSO*, "", "BeatmapLevelsPromoDataSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelsPromoDataSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelsPromoDataSO : public ::UnityEngine::ScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::BeatmapLevelsPromoDataSO::$$c
    class $$c;
    public:
    // [SpaceAttribute] Offset: 0x112FAA8
    // private System.Collections.Generic.List`1<PreviewBeatmapLevelPackSO> _promotedBeatmapLevelPacks
    // Size: 0x8
    // Offset: 0x18
    ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelPackSO*>* promotedBeatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelPackSO*>*) == 0x8);
    // private System.Collections.Generic.List`1<PreviewBeatmapLevelPackSO> _updatedBeatmapLevelPacks
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelPackSO*>* updatedBeatmapLevelPacks;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelPackSO*>*) == 0x8);
    // [SpaceAttribute] Offset: 0x112FAF0
    // private System.Collections.Generic.List`1<PreviewBeatmapLevelSO> _promotedBeatmapLevels
    // Size: 0x8
    // Offset: 0x28
    ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelSO*>* promotedBeatmapLevels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelSO*>*) == 0x8);
    // private System.Collections.Generic.List`1<PreviewBeatmapLevelSO> _updatedBeatmapLevels
    // Size: 0x8
    // Offset: 0x30
    ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelSO*>* updatedBeatmapLevels;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelSO*>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _promotedBeatmapLevelPacksSet
    // Size: 0x8
    // Offset: 0x38
    ::System::Collections::Generic::HashSet_1<::StringW>* promotedBeatmapLevelPacksSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _updatedBeatmapLevelPacksSet
    // Size: 0x8
    // Offset: 0x40
    ::System::Collections::Generic::HashSet_1<::StringW>* updatedBeatmapLevelPacksSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _promotedBeatmapLevelsSet
    // Size: 0x8
    // Offset: 0x48
    ::System::Collections::Generic::HashSet_1<::StringW>* promotedBeatmapLevelsSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> _updatedBeatmapLevelsSet
    // Size: 0x8
    // Offset: 0x50
    ::System::Collections::Generic::HashSet_1<::StringW>* updatedBeatmapLevelsSet;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Collections.Generic.List`1<PreviewBeatmapLevelPackSO> _promotedBeatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelPackSO*>*& dyn__promotedBeatmapLevelPacks();
    // Get instance field reference: private System.Collections.Generic.List`1<PreviewBeatmapLevelPackSO> _updatedBeatmapLevelPacks
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelPackSO*>*& dyn__updatedBeatmapLevelPacks();
    // Get instance field reference: private System.Collections.Generic.List`1<PreviewBeatmapLevelSO> _promotedBeatmapLevels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelSO*>*& dyn__promotedBeatmapLevels();
    // Get instance field reference: private System.Collections.Generic.List`1<PreviewBeatmapLevelSO> _updatedBeatmapLevels
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PreviewBeatmapLevelSO*>*& dyn__updatedBeatmapLevels();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _promotedBeatmapLevelPacksSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__promotedBeatmapLevelPacksSet();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _updatedBeatmapLevelPacksSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__updatedBeatmapLevelPacksSet();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _promotedBeatmapLevelsSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__promotedBeatmapLevelsSet();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> _updatedBeatmapLevelsSet
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn__updatedBeatmapLevelsSet();
    // public System.Void .ctor()
    // Offset: 0x1541134
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelsPromoDataSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelsPromoDataSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelsPromoDataSO*, creationType>()));
    }
    // public System.Boolean IsBeatmapLevelPackPromoted(IBeatmapLevelPack beatmapLevelPack)
    // Offset: 0x1540A24
    bool IsBeatmapLevelPackPromoted(::GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack);
    // public System.Boolean IsBeatmapLevelPackUpdated(IBeatmapLevelPack beatmapLevelPack)
    // Offset: 0x1540BE8
    bool IsBeatmapLevelPackUpdated(::GlobalNamespace::IBeatmapLevelPack* beatmapLevelPack);
    // public System.Boolean IsBeatmapLevelPromoted(IPreviewBeatmapLevel beatmapLevel)
    // Offset: 0x1540DAC
    bool IsBeatmapLevelPromoted(::GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel);
    // public System.Boolean IsBeatmapLevelUpdated(IPreviewBeatmapLevel beatmapLevel)
    // Offset: 0x1540F70
    bool IsBeatmapLevelUpdated(::GlobalNamespace::IPreviewBeatmapLevel* beatmapLevel);
  }; // BeatmapLevelsPromoDataSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelsPromoDataSO), 80 + sizeof(::System::Collections::Generic::HashSet_1<::StringW>*)> __GlobalNamespace_BeatmapLevelsPromoDataSOSizeCheck;
  static_assert(sizeof(BeatmapLevelsPromoDataSO) == 0x58);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelsPromoDataSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelPackPromoted
// Il2CppName: IsBeatmapLevelPackPromoted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapLevelsPromoDataSO::*)(::GlobalNamespace::IBeatmapLevelPack*)>(&GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelPackPromoted)> {
  static const MethodInfo* get() {
    static auto* beatmapLevelPack = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelsPromoDataSO*), "IsBeatmapLevelPackPromoted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevelPack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelPackUpdated
// Il2CppName: IsBeatmapLevelPackUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapLevelsPromoDataSO::*)(::GlobalNamespace::IBeatmapLevelPack*)>(&GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelPackUpdated)> {
  static const MethodInfo* get() {
    static auto* beatmapLevelPack = &::il2cpp_utils::GetClassFromName("", "IBeatmapLevelPack")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelsPromoDataSO*), "IsBeatmapLevelPackUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevelPack});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelPromoted
// Il2CppName: IsBeatmapLevelPromoted
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapLevelsPromoDataSO::*)(::GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelPromoted)> {
  static const MethodInfo* get() {
    static auto* beatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelsPromoDataSO*), "IsBeatmapLevelPromoted", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevel});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelUpdated
// Il2CppName: IsBeatmapLevelUpdated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapLevelsPromoDataSO::*)(::GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::BeatmapLevelsPromoDataSO::IsBeatmapLevelUpdated)> {
  static const MethodInfo* get() {
    static auto* beatmapLevel = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelsPromoDataSO*), "IsBeatmapLevelUpdated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapLevel});
  }
};
