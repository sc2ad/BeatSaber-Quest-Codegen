// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: LightIdsRange
  class LightIdsRange;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::LightIdsRange);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::LightIdsRange*, "", "LightIdsRange");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: LightIdsRange
  // [TokenAttribute] Offset: FFFFFFFF
  class LightIdsRange : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private System.Int32 _numberOfElements
    // Size: 0x4
    // Offset: 0x18
    int numberOfElements;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _startLightId
    // Size: 0x4
    // Offset: 0x1C
    int startLightId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Int32 _numberOfElements
    [[deprecated("Use field access instead!")]] int& dyn__numberOfElements();
    // Get instance field reference: private System.Int32 _startLightId
    [[deprecated("Use field access instead!")]] int& dyn__startLightId();
    // public System.Int32 get_numberOfElements()
    // Offset: 0x1E7FF78
    int get_numberOfElements();
    // public System.Int32 get_startLightId()
    // Offset: 0x1E7FF80
    int get_startLightId();
    // public System.Void .ctor()
    // Offset: 0x1E7FF68
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightIdsRange* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::LightIdsRange::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightIdsRange*, creationType>()));
    }
  }; // LightIdsRange
  #pragma pack(pop)
  static check_size<sizeof(LightIdsRange), 28 + sizeof(int)> __GlobalNamespace_LightIdsRangeSizeCheck;
  static_assert(sizeof(LightIdsRange) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::LightIdsRange::get_numberOfElements
// Il2CppName: get_numberOfElements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightIdsRange::*)()>(&GlobalNamespace::LightIdsRange::get_numberOfElements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightIdsRange*), "get_numberOfElements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightIdsRange::get_startLightId
// Il2CppName: get_startLightId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::LightIdsRange::*)()>(&GlobalNamespace::LightIdsRange::get_startLightId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::LightIdsRange*), "get_startLightId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::LightIdsRange::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
