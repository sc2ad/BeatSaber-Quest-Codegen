// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IBeatmapDataBasicInfo
#include "GlobalNamespace/IBeatmapDataBasicInfo.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapDataBasicInfo
  class BeatmapDataBasicInfo;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapDataBasicInfo);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapDataBasicInfo*, "", "BeatmapDataBasicInfo");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapDataBasicInfo
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapDataBasicInfo : public ::Il2CppObject/*, public ::GlobalNamespace::IBeatmapDataBasicInfo*/ {
    public:
    public:
    // private readonly System.Int32 <numberOfLines>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int numberOfLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <cuttableNotesCount>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int cuttableNotesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <obstaclesCount>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int obstaclesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 <bombsCount>k__BackingField
    // Size: 0x4
    // Offset: 0x1C
    int bombsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.IEnumerable`1<System.String> <specialBasicBeatmapEventKeywords>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    ::System::Collections::Generic::IEnumerable_1<::StringW>* specialBasicBeatmapEventKeywords;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IEnumerable_1<::StringW>*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapDataBasicInfo
    operator ::GlobalNamespace::IBeatmapDataBasicInfo() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapDataBasicInfo*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapDataBasicInfo
    inline ::GlobalNamespace::IBeatmapDataBasicInfo* i_IBeatmapDataBasicInfo() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapDataBasicInfo*>(this);
    }
    // Get instance field reference: private readonly System.Int32 <numberOfLines>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$numberOfLines$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <cuttableNotesCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$cuttableNotesCount$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <obstaclesCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$obstaclesCount$k__BackingField();
    // Get instance field reference: private readonly System.Int32 <bombsCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$bombsCount$k__BackingField();
    // Get instance field reference: private readonly System.Collections.Generic.IEnumerable`1<System.String> <specialBasicBeatmapEventKeywords>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IEnumerable_1<::StringW>*& dyn_$specialBasicBeatmapEventKeywords$k__BackingField();
    // public System.Int32 get_numberOfLines()
    // Offset: 0x13C8A5C
    int get_numberOfLines();
    // public System.Int32 get_cuttableNotesCount()
    // Offset: 0x13C8A64
    int get_cuttableNotesCount();
    // public System.Int32 get_obstaclesCount()
    // Offset: 0x13C8A6C
    int get_obstaclesCount();
    // public System.Int32 get_bombsCount()
    // Offset: 0x13C8A74
    int get_bombsCount();
    // public System.Collections.Generic.IEnumerable`1<System.String> get_specialBasicBeatmapEventKeywords()
    // Offset: 0x13C8A7C
    ::System::Collections::Generic::IEnumerable_1<::StringW>* get_specialBasicBeatmapEventKeywords();
    // public System.Void .ctor(System.Int32 numberOfLines, System.Int32 cuttableNotesCount, System.Int32 obstaclesCount, System.Int32 bombsCount, System.Collections.Generic.IEnumerable`1<System.String> specialBasicBeatmapEventKeywords)
    // Offset: 0x13C8A84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapDataBasicInfo* New_ctor(int numberOfLines, int cuttableNotesCount, int obstaclesCount, int bombsCount, ::System::Collections::Generic::IEnumerable_1<::StringW>* specialBasicBeatmapEventKeywords) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapDataBasicInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapDataBasicInfo*, creationType>(numberOfLines, cuttableNotesCount, obstaclesCount, bombsCount, specialBasicBeatmapEventKeywords)));
    }
  }; // BeatmapDataBasicInfo
  #pragma pack(pop)
  static check_size<sizeof(BeatmapDataBasicInfo), 32 + sizeof(::System::Collections::Generic::IEnumerable_1<::StringW>*)> __GlobalNamespace_BeatmapDataBasicInfoSizeCheck;
  static_assert(sizeof(BeatmapDataBasicInfo) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataBasicInfo::get_numberOfLines
// Il2CppName: get_numberOfLines
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataBasicInfo::*)()>(&GlobalNamespace::BeatmapDataBasicInfo::get_numberOfLines)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataBasicInfo*), "get_numberOfLines", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataBasicInfo::get_cuttableNotesCount
// Il2CppName: get_cuttableNotesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataBasicInfo::*)()>(&GlobalNamespace::BeatmapDataBasicInfo::get_cuttableNotesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataBasicInfo*), "get_cuttableNotesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataBasicInfo::get_obstaclesCount
// Il2CppName: get_obstaclesCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataBasicInfo::*)()>(&GlobalNamespace::BeatmapDataBasicInfo::get_obstaclesCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataBasicInfo*), "get_obstaclesCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataBasicInfo::get_bombsCount
// Il2CppName: get_bombsCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::BeatmapDataBasicInfo::*)()>(&GlobalNamespace::BeatmapDataBasicInfo::get_bombsCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataBasicInfo*), "get_bombsCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataBasicInfo::get_specialBasicBeatmapEventKeywords
// Il2CppName: get_specialBasicBeatmapEventKeywords
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IEnumerable_1<::StringW>* (GlobalNamespace::BeatmapDataBasicInfo::*)()>(&GlobalNamespace::BeatmapDataBasicInfo::get_specialBasicBeatmapEventKeywords)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapDataBasicInfo*), "get_specialBasicBeatmapEventKeywords", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapDataBasicInfo::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
