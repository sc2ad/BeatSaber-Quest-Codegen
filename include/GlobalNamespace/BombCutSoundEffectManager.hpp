// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BombCutSoundEffect
#include "GlobalNamespace/BombCutSoundEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: RandomObjectPicker`1<T>
  template<typename T>
  class RandomObjectPicker_1;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: BombCutSoundEffectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BombCutSoundEffectManager : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _volume
    // Size: 0x4
    // Offset: 0x18
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: volume and: bombExplosionAudioClips
    char __padding0[0x4] = {};
    // private UnityEngine.AudioClip[] _bombExplosionAudioClips
    // Size: 0x8
    // Offset: 0x20
    ::Array<UnityEngine::AudioClip*>* bombExplosionAudioClips;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::AudioClip*>*) == 0x8);
    // [InjectAttribute] Offset: 0xF0025C
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF0026C
    // private readonly SaberManager saberManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::SaberManager* saberManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberManager*) == 0x8);
    // [InjectAttribute] Offset: 0xF0027C
    // private readonly BombCutSoundEffect/Pool _bombCutSoundEffectPool
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::BombCutSoundEffect::Pool* bombCutSoundEffectPool;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BombCutSoundEffect::Pool*) == 0x8);
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _randomSoundPicker
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* randomSoundPicker;
    // Field size check
    static_assert(sizeof(GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>*) == 0x8);
    // Creating value type constructor for type: BombCutSoundEffectManager
    BombCutSoundEffectManager(float volume_ = {}, ::Array<UnityEngine::AudioClip*>* bombExplosionAudioClips_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::SaberManager* saberManager_ = {}, GlobalNamespace::BombCutSoundEffect::Pool* bombCutSoundEffectPool_ = {}, GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* randomSoundPicker_ = {}) noexcept : volume{volume_}, bombExplosionAudioClips{bombExplosionAudioClips_}, beatmapObjectManager{beatmapObjectManager_}, saberManager{saberManager_}, bombCutSoundEffectPool{bombCutSoundEffectPool_}, randomSoundPicker{randomSoundPicker_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Single _volume
    float& dyn__volume();
    // Get instance field reference: private UnityEngine.AudioClip[] _bombExplosionAudioClips
    ::Array<UnityEngine::AudioClip*>*& dyn__bombExplosionAudioClips();
    // Get instance field reference: private readonly BeatmapObjectManager _beatmapObjectManager
    GlobalNamespace::BeatmapObjectManager*& dyn__beatmapObjectManager();
    // Get instance field reference: private readonly SaberManager saberManager
    GlobalNamespace::SaberManager*& dyn_saberManager();
    // Get instance field reference: private readonly BombCutSoundEffect/Pool _bombCutSoundEffectPool
    GlobalNamespace::BombCutSoundEffect::Pool*& dyn__bombCutSoundEffectPool();
    // Get instance field reference: private RandomObjectPicker`1<UnityEngine.AudioClip> _randomSoundPicker
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>*& dyn__randomSoundPicker();
    // protected System.Void Start()
    // Offset: 0x12AB620
    void Start();
    // private System.Void HandleNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x12AB6D8
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, ByRef<GlobalNamespace::NoteCutInfo> noteCutInfo);
    // protected System.Void OnDestroy()
    // Offset: 0x12AB8C4
    void OnDestroy();
    // private System.Void HandleBombCutSoundEffectDidFinish(BombCutSoundEffect bombCutSoundEffect)
    // Offset: 0x12AB948
    void HandleBombCutSoundEffectDidFinish(GlobalNamespace::BombCutSoundEffect* bombCutSoundEffect);
    // public System.Void .ctor()
    // Offset: 0x12AB9F4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BombCutSoundEffectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BombCutSoundEffectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BombCutSoundEffectManager*, creationType>()));
    }
  }; // BombCutSoundEffectManager
  #pragma pack(pop)
  static check_size<sizeof(BombCutSoundEffectManager), 64 + sizeof(GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>*)> __GlobalNamespace_BombCutSoundEffectManagerSizeCheck;
  static_assert(sizeof(BombCutSoundEffectManager) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BombCutSoundEffectManager*, "", "BombCutSoundEffectManager");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BombCutSoundEffectManager::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BombCutSoundEffectManager::*)()>(&GlobalNamespace::BombCutSoundEffectManager::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BombCutSoundEffectManager*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BombCutSoundEffectManager::HandleNoteWasCut
// Il2CppName: HandleNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BombCutSoundEffectManager::*)(GlobalNamespace::NoteController*, ByRef<GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::BombCutSoundEffectManager::HandleNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BombCutSoundEffectManager*), "HandleNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BombCutSoundEffectManager::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BombCutSoundEffectManager::*)()>(&GlobalNamespace::BombCutSoundEffectManager::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BombCutSoundEffectManager*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BombCutSoundEffectManager::HandleBombCutSoundEffectDidFinish
// Il2CppName: HandleBombCutSoundEffectDidFinish
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BombCutSoundEffectManager::*)(GlobalNamespace::BombCutSoundEffect*)>(&GlobalNamespace::BombCutSoundEffectManager::HandleBombCutSoundEffectDidFinish)> {
  static const MethodInfo* get() {
    static auto* bombCutSoundEffect = &::il2cpp_utils::GetClassFromName("", "BombCutSoundEffect")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BombCutSoundEffectManager*), "HandleBombCutSoundEffectDidFinish", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{bombCutSoundEffect});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BombCutSoundEffectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
