// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: IRefreshable
#include "GlobalNamespace/IRefreshable.hpp"
// Including type: ArcVisibilityType
#include "GlobalNamespace/ArcVisibilityType.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerHeightSettingsController
  class PlayerHeightSettingsController;
  // Forward declaring type: FormattedFloatListSettingsController
  class FormattedFloatListSettingsController;
  // Forward declaring type: NoteJumpDurationTypeSettingsDropdown
  class NoteJumpDurationTypeSettingsDropdown;
  // Forward declaring type: NoteJumpStartBeatOffsetDropdown
  class NoteJumpStartBeatOffsetDropdown;
  // Forward declaring type: EnvironmentEffectsFilterPresetDropdown
  class EnvironmentEffectsFilterPresetDropdown;
  // Forward declaring type: ArcVisibilityTypeSettingsDropdown
  class ArcVisibilityTypeSettingsDropdown;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: EventBinder
  class EventBinder;
  // Forward declaring type: EnvironmentEffectsFilterPreset
  struct EnvironmentEffectsFilterPreset;
  // Forward declaring type: NoteJumpDurationTypeSettings
  struct NoteJumpDurationTypeSettings;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ToggleBinder
  class ToggleBinder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerSettingsPanelController
  class PlayerSettingsPanelController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerSettingsPanelController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerSettingsPanelController*, "", "PlayerSettingsPanelController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: PlayerSettingsPanelController
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerSettingsPanelController : public ::UnityEngine::MonoBehaviour/*, public ::GlobalNamespace::IRefreshable*/ {
    public:
    // Nested type: ::GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout
    struct PlayerSettingsPanelLayout;
    public:
    // private UnityEngine.UI.Toggle _leftHandedToggle
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::UI::Toggle* leftHandedToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _reduceDebrisToggle
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::UI::Toggle* reduceDebrisToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _noTextsAndHudsToggle
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::UI::Toggle* noTextsAndHudsToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _advanceHudToggle
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::UI::Toggle* advanceHudToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _autoRestartToggle
    // Size: 0x8
    // Offset: 0x38
    ::UnityEngine::UI::Toggle* autoRestartToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private PlayerHeightSettingsController _playerHeightSettingsController
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::PlayerHeightSettingsController* playerHeightSettingsController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerHeightSettingsController*) == 0x8);
    // private UnityEngine.CanvasGroup _playerHeightSettingsCanvasGroup
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::CanvasGroup* playerHeightSettingsCanvasGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasGroup*) == 0x8);
    // private UnityEngine.UI.Toggle _automaticPlayerHeightToggle
    // Size: 0x8
    // Offset: 0x50
    ::UnityEngine::UI::Toggle* automaticPlayerHeightToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private FormattedFloatListSettingsController _sfxVolumeSettingsController
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::FormattedFloatListSettingsController* sfxVolumeSettingsController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FormattedFloatListSettingsController*) == 0x8);
    // private FormattedFloatListSettingsController _saberTrailIntensitySettingsController
    // Size: 0x8
    // Offset: 0x60
    ::GlobalNamespace::FormattedFloatListSettingsController* saberTrailIntensitySettingsController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FormattedFloatListSettingsController*) == 0x8);
    // private NoteJumpDurationTypeSettingsDropdown _noteJumpDurationTypeSettingsDropdown
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::NoteJumpDurationTypeSettingsDropdown* noteJumpDurationTypeSettingsDropdown;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteJumpDurationTypeSettingsDropdown*) == 0x8);
    // private FormattedFloatListSettingsController _noteJumpFixedDurationSettingsController
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::FormattedFloatListSettingsController* noteJumpFixedDurationSettingsController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FormattedFloatListSettingsController*) == 0x8);
    // private UnityEngine.CanvasGroup _noteJumpFixedDurationSettingsCanvasGroup
    // Size: 0x8
    // Offset: 0x78
    ::UnityEngine::CanvasGroup* noteJumpFixedDurationSettingsCanvasGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasGroup*) == 0x8);
    // private NoteJumpStartBeatOffsetDropdown _noteJumpStartBeatOffsetDropdown
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::NoteJumpStartBeatOffsetDropdown* noteJumpStartBeatOffsetDropdown;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::NoteJumpStartBeatOffsetDropdown*) == 0x8);
    // private UnityEngine.CanvasGroup _noteJumpStartBeatOffsetCanvasGroup
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::CanvasGroup* noteJumpStartBeatOffsetCanvasGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasGroup*) == 0x8);
    // private EnvironmentEffectsFilterPresetDropdown _environmentEffectsFilterDefaultPresetDropdown
    // Size: 0x8
    // Offset: 0x90
    ::GlobalNamespace::EnvironmentEffectsFilterPresetDropdown* environmentEffectsFilterDefaultPresetDropdown;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentEffectsFilterPresetDropdown*) == 0x8);
    // private EnvironmentEffectsFilterPresetDropdown _environmentEffectsFilterExpertPlusPresetDropdown
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::EnvironmentEffectsFilterPresetDropdown* environmentEffectsFilterExpertPlusPresetDropdown;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentEffectsFilterPresetDropdown*) == 0x8);
    // private UnityEngine.UI.Toggle _hideNoteSpawnEffectToggle
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::UI::Toggle* hideNoteSpawnEffectToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _adaptiveSfxToggle
    // Size: 0x8
    // Offset: 0xA8
    ::UnityEngine::UI::Toggle* adaptiveSfxToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private UnityEngine.UI.Toggle _arcsHapticFeedbackToggle
    // Size: 0x8
    // Offset: 0xB0
    ::UnityEngine::UI::Toggle* arcsHapticFeedbackToggle;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Toggle*) == 0x8);
    // private ArcVisibilityTypeSettingsDropdown _arcsVisibilityTypeSettingsDropdown
    // Size: 0x8
    // Offset: 0xB8
    ::GlobalNamespace::ArcVisibilityTypeSettingsDropdown* arcsVisibilityTypeSettingsDropdown;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ArcVisibilityTypeSettingsDropdown*) == 0x8);
    // [SpaceAttribute] Offset: 0x112C158
    // private UnityEngine.CanvasGroup _singleplayerOnlyCanvasGroup
    // Size: 0x8
    // Offset: 0xC0
    ::UnityEngine::CanvasGroup* singleplayerOnlyCanvasGroup;
    // Field size check
    static_assert(sizeof(::UnityEngine::CanvasGroup*) == 0x8);
    // [SpaceAttribute] Offset: 0x112C190
    // private UnityEngine.GameObject _arcVisibilityWarning
    // Size: 0x8
    // Offset: 0xC8
    ::UnityEngine::GameObject* arcVisibilityWarning;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // private System.Action didChangePlayerSettingsEvent
    // Size: 0x8
    // Offset: 0xD0
    ::System::Action* didChangePlayerSettingsEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private ArcVisibilityType _currentArcType
    // Size: 0x4
    // Offset: 0xD8
    ::GlobalNamespace::ArcVisibilityType currentArcType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ArcVisibilityType) == 0x4);
    // Padding between fields: currentArcType and: playerSpecificSettings
    char __padding24[0x4] = {};
    // private PlayerSpecificSettings _playerSpecificSettings
    // Size: 0x8
    // Offset: 0xE0
    ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerSpecificSettings*) == 0x8);
    // private HMUI.ToggleBinder _toggleBinder
    // Size: 0x8
    // Offset: 0xE8
    ::HMUI::ToggleBinder* toggleBinder;
    // Field size check
    static_assert(sizeof(::HMUI::ToggleBinder*) == 0x8);
    // private System.Boolean _dirty
    // Size: 0x1
    // Offset: 0xF0
    bool dirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _refreshed
    // Size: 0x1
    // Offset: 0xF1
    bool refreshed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: refreshed and: eventBinder
    char __padding28[0x6] = {};
    // private readonly EventBinder _eventBinder
    // Size: 0x8
    // Offset: 0xF8
    ::GlobalNamespace::EventBinder* eventBinder;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EventBinder*) == 0x8);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IRefreshable
    operator ::GlobalNamespace::IRefreshable() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IRefreshable*>(this);
    }
    // Creating interface conversion operator: i_IRefreshable
    inline ::GlobalNamespace::IRefreshable* i_IRefreshable() noexcept {
      return reinterpret_cast<::GlobalNamespace::IRefreshable*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kDisabledSectionAlpha
    static constexpr const float kDisabledSectionAlpha = 0.2;
    // Get static field: static private System.Single kDisabledSectionAlpha
    static float _get_kDisabledSectionAlpha();
    // Set static field: static private System.Single kDisabledSectionAlpha
    static void _set_kDisabledSectionAlpha(float value);
    // Get instance field reference: private UnityEngine.UI.Toggle _leftHandedToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__leftHandedToggle();
    // Get instance field reference: private UnityEngine.UI.Toggle _reduceDebrisToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__reduceDebrisToggle();
    // Get instance field reference: private UnityEngine.UI.Toggle _noTextsAndHudsToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__noTextsAndHudsToggle();
    // Get instance field reference: private UnityEngine.UI.Toggle _advanceHudToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__advanceHudToggle();
    // Get instance field reference: private UnityEngine.UI.Toggle _autoRestartToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__autoRestartToggle();
    // Get instance field reference: private PlayerHeightSettingsController _playerHeightSettingsController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerHeightSettingsController*& dyn__playerHeightSettingsController();
    // Get instance field reference: private UnityEngine.CanvasGroup _playerHeightSettingsCanvasGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& dyn__playerHeightSettingsCanvasGroup();
    // Get instance field reference: private UnityEngine.UI.Toggle _automaticPlayerHeightToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__automaticPlayerHeightToggle();
    // Get instance field reference: private FormattedFloatListSettingsController _sfxVolumeSettingsController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FormattedFloatListSettingsController*& dyn__sfxVolumeSettingsController();
    // Get instance field reference: private FormattedFloatListSettingsController _saberTrailIntensitySettingsController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FormattedFloatListSettingsController*& dyn__saberTrailIntensitySettingsController();
    // Get instance field reference: private NoteJumpDurationTypeSettingsDropdown _noteJumpDurationTypeSettingsDropdown
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteJumpDurationTypeSettingsDropdown*& dyn__noteJumpDurationTypeSettingsDropdown();
    // Get instance field reference: private FormattedFloatListSettingsController _noteJumpFixedDurationSettingsController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FormattedFloatListSettingsController*& dyn__noteJumpFixedDurationSettingsController();
    // Get instance field reference: private UnityEngine.CanvasGroup _noteJumpFixedDurationSettingsCanvasGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& dyn__noteJumpFixedDurationSettingsCanvasGroup();
    // Get instance field reference: private NoteJumpStartBeatOffsetDropdown _noteJumpStartBeatOffsetDropdown
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::NoteJumpStartBeatOffsetDropdown*& dyn__noteJumpStartBeatOffsetDropdown();
    // Get instance field reference: private UnityEngine.CanvasGroup _noteJumpStartBeatOffsetCanvasGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& dyn__noteJumpStartBeatOffsetCanvasGroup();
    // Get instance field reference: private EnvironmentEffectsFilterPresetDropdown _environmentEffectsFilterDefaultPresetDropdown
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentEffectsFilterPresetDropdown*& dyn__environmentEffectsFilterDefaultPresetDropdown();
    // Get instance field reference: private EnvironmentEffectsFilterPresetDropdown _environmentEffectsFilterExpertPlusPresetDropdown
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentEffectsFilterPresetDropdown*& dyn__environmentEffectsFilterExpertPlusPresetDropdown();
    // Get instance field reference: private UnityEngine.UI.Toggle _hideNoteSpawnEffectToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__hideNoteSpawnEffectToggle();
    // Get instance field reference: private UnityEngine.UI.Toggle _adaptiveSfxToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__adaptiveSfxToggle();
    // Get instance field reference: private UnityEngine.UI.Toggle _arcsHapticFeedbackToggle
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Toggle*& dyn__arcsHapticFeedbackToggle();
    // Get instance field reference: private ArcVisibilityTypeSettingsDropdown _arcsVisibilityTypeSettingsDropdown
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ArcVisibilityTypeSettingsDropdown*& dyn__arcsVisibilityTypeSettingsDropdown();
    // Get instance field reference: private UnityEngine.CanvasGroup _singleplayerOnlyCanvasGroup
    [[deprecated("Use field access instead!")]] ::UnityEngine::CanvasGroup*& dyn__singleplayerOnlyCanvasGroup();
    // Get instance field reference: private UnityEngine.GameObject _arcVisibilityWarning
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn__arcVisibilityWarning();
    // Get instance field reference: private System.Action didChangePlayerSettingsEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didChangePlayerSettingsEvent();
    // Get instance field reference: private ArcVisibilityType _currentArcType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ArcVisibilityType& dyn__currentArcType();
    // Get instance field reference: private PlayerSpecificSettings _playerSpecificSettings
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpecificSettings*& dyn__playerSpecificSettings();
    // Get instance field reference: private HMUI.ToggleBinder _toggleBinder
    [[deprecated("Use field access instead!")]] ::HMUI::ToggleBinder*& dyn__toggleBinder();
    // Get instance field reference: private System.Boolean _dirty
    [[deprecated("Use field access instead!")]] bool& dyn__dirty();
    // Get instance field reference: private System.Boolean _refreshed
    [[deprecated("Use field access instead!")]] bool& dyn__refreshed();
    // Get instance field reference: private readonly EventBinder _eventBinder
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EventBinder*& dyn__eventBinder();
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0x15A7844
    ::GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // public System.Void add_didChangePlayerSettingsEvent(System.Action value)
    // Offset: 0x15A7DFC
    void add_didChangePlayerSettingsEvent(::System::Action* value);
    // public System.Void remove_didChangePlayerSettingsEvent(System.Action value)
    // Offset: 0x15A7EA0
    void remove_didChangePlayerSettingsEvent(::System::Action* value);
    // public System.Void .ctor()
    // Offset: 0x15A86CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerSettingsPanelController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerSettingsPanelController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerSettingsPanelController*, creationType>()));
    }
    // public System.Void SetData(PlayerSpecificSettings playerSpecificSettings)
    // Offset: 0x15A74C8
    void SetData(::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings);
    // public System.Void SetLayout(PlayerSettingsPanelController/PlayerSettingsPanelLayout layout)
    // Offset: 0x15A7498
    void SetLayout(::GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout layout);
    // protected System.Void Awake()
    // Offset: 0x15A7FB0
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x15A8010
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x15A8340
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0x15A8388
    void OnDestroy();
    // private System.Void UnsubscribeAllUICallbacks()
    // Offset: 0x15A8344
    void UnsubscribeAllUICallbacks();
    // public System.Void Refresh()
    // Offset: 0x15A74D4
    void Refresh();
    // private System.Void HandleSFXVolumeSettingsControllerValueDidChange(FormattedFloatListSettingsController settingsController, System.Single value)
    // Offset: 0x15A84B0
    void HandleSFXVolumeSettingsControllerValueDidChange(::GlobalNamespace::FormattedFloatListSettingsController* settingsController, float value);
    // private System.Void HandleArcVisibilityDropdownDidSelectCellWithIdx(System.Int32 idx, ArcVisibilityType arcVisibilityType)
    // Offset: 0x15A84F0
    void HandleArcVisibilityDropdownDidSelectCellWithIdx(int idx, ::GlobalNamespace::ArcVisibilityType arcVisibilityType);
    // private System.Void HandleSaberTrailIntensitySettingsControllerValueDidChange(FormattedFloatListSettingsController settingsController, System.Single value)
    // Offset: 0x15A8538
    void HandleSaberTrailIntensitySettingsControllerValueDidChange(::GlobalNamespace::FormattedFloatListSettingsController* settingsController, float value);
    // private System.Void HandlePlayerHeightSettingsControllerValueDidChange(System.Single value)
    // Offset: 0x15A8558
    void HandlePlayerHeightSettingsControllerValueDidChange(float value);
    // private System.Void HandleNoteJumpStartBeatOffsetPositionSelected(System.Int32 idx, System.Single startBeatOffset)
    // Offset: 0x15A8578
    void HandleNoteJumpStartBeatOffsetPositionSelected(int idx, float startBeatOffset);
    // private System.Void HandleLightReductionAmountSelected(System.Int32 obj, EnvironmentEffectsFilterPreset environmentEffectsFilterPreset)
    // Offset: 0x15A8598
    void HandleLightReductionAmountSelected(int obj, ::GlobalNamespace::EnvironmentEffectsFilterPreset environmentEffectsFilterPreset);
    // private System.Void HandleAdvancedHudToggleChanged(System.Boolean on)
    // Offset: 0x15A85B8
    void HandleAdvancedHudToggleChanged(bool on);
    // private System.Void HandleNoteJumpDurationTypeSettingsDropdownDidSelectCellWithIdx(System.Int32 idx, NoteJumpDurationTypeSettings noteJumpDurationTypeSettings)
    // Offset: 0x15A8610
    void HandleNoteJumpDurationTypeSettingsDropdownDidSelectCellWithIdx(int idx, ::GlobalNamespace::NoteJumpDurationTypeSettings noteJumpDurationTypeSettings);
    // private System.Void HandleNoteJumpFixedDurationSettingsControllerValueDidChange(FormattedFloatListSettingsController formattedFloatListSettingsController, System.Single value)
    // Offset: 0x15A8654
    void HandleNoteJumpFixedDurationSettingsControllerValueDidChange(::GlobalNamespace::FormattedFloatListSettingsController* formattedFloatListSettingsController, float value);
    // private System.Void HandleNoTextsAndHudsToggleChanged(System.Boolean on)
    // Offset: 0x15A8674
    void HandleNoTextsAndHudsToggleChanged(bool on);
    // private System.Void SetIsDirty()
    // Offset: 0x15A84D0
    void SetIsDirty();
    // private System.Void RefreshNoteJumpUI(NoteJumpDurationTypeSettings noteJumpDurationTypeSettings)
    // Offset: 0x15A838C
    void RefreshNoteJumpUI(::GlobalNamespace::NoteJumpDurationTypeSettings noteJumpDurationTypeSettings);
    // private System.Void SetSectionDisabled(UnityEngine.CanvasGroup sectionCanvasGroup, System.Boolean disable)
    // Offset: 0x15A7F44
    void SetSectionDisabled(::UnityEngine::CanvasGroup* sectionCanvasGroup, bool disable);
    // private System.Void RefreshArcsWarning(ArcVisibilityType arcVisibilityType, System.Boolean forceRebuild)
    // Offset: 0x15A83CC
    void RefreshArcsWarning(::GlobalNamespace::ArcVisibilityType arcVisibilityType, bool forceRebuild);
    // private System.Void <OnEnable>b__39_0(System.Boolean on)
    // Offset: 0x15A8734
    void $OnEnable$b__39_0(bool on);
    // private System.Void <OnEnable>b__39_1(System.Boolean on)
    // Offset: 0x15A8754
    void $OnEnable$b__39_1(bool on);
    // private System.Void <OnEnable>b__39_2(System.Boolean on)
    // Offset: 0x15A8774
    void $OnEnable$b__39_2(bool on);
    // private System.Void <OnEnable>b__39_3(System.Boolean on)
    // Offset: 0x15A8794
    void $OnEnable$b__39_3(bool on);
    // private System.Void <OnEnable>b__39_4(System.Boolean on)
    // Offset: 0x15A87B4
    void $OnEnable$b__39_4(bool on);
    // private System.Void <OnEnable>b__39_5(System.Boolean on)
    // Offset: 0x15A87D4
    void $OnEnable$b__39_5(bool on);
    // private System.Void <OnEnable>b__39_6(System.Boolean on)
    // Offset: 0x15A8820
    void $OnEnable$b__39_6(bool on);
    // private System.Void <OnEnable>b__39_7()
    // Offset: 0x15A8840
    void $OnEnable$b__39_7();
    // private System.Void <OnEnable>b__39_8()
    // Offset: 0x15A8B28
    void $OnEnable$b__39_8();
  }; // PlayerSettingsPanelController
  #pragma pack(pop)
  static check_size<sizeof(PlayerSettingsPanelController), 248 + sizeof(::GlobalNamespace::EventBinder*)> __GlobalNamespace_PlayerSettingsPanelControllerSizeCheck;
  static_assert(sizeof(PlayerSettingsPanelController) == 0x100);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::get_playerSpecificSettings
// Il2CppName: get_playerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerSpecificSettings* (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::get_playerSpecificSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "get_playerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::add_didChangePlayerSettingsEvent
// Il2CppName: add_didChangePlayerSettingsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::System::Action*)>(&GlobalNamespace::PlayerSettingsPanelController::add_didChangePlayerSettingsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "add_didChangePlayerSettingsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::remove_didChangePlayerSettingsEvent
// Il2CppName: remove_didChangePlayerSettingsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::System::Action*)>(&GlobalNamespace::PlayerSettingsPanelController::remove_didChangePlayerSettingsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "remove_didChangePlayerSettingsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::SetData
// Il2CppName: SetData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::PlayerSpecificSettings*)>(&GlobalNamespace::PlayerSettingsPanelController::SetData)> {
  static const MethodInfo* get() {
    static auto* playerSpecificSettings = &::il2cpp_utils::GetClassFromName("", "PlayerSpecificSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "SetData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerSpecificSettings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::SetLayout
// Il2CppName: SetLayout
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::PlayerSettingsPanelController::PlayerSettingsPanelLayout)>(&GlobalNamespace::PlayerSettingsPanelController::SetLayout)> {
  static const MethodInfo* get() {
    static auto* layout = &::il2cpp_utils::GetClassFromName("", "PlayerSettingsPanelController/PlayerSettingsPanelLayout")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "SetLayout", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{layout});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::UnsubscribeAllUICallbacks
// Il2CppName: UnsubscribeAllUICallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::UnsubscribeAllUICallbacks)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "UnsubscribeAllUICallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::Refresh
// Il2CppName: Refresh
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::Refresh)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "Refresh", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleSFXVolumeSettingsControllerValueDidChange
// Il2CppName: HandleSFXVolumeSettingsControllerValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::FormattedFloatListSettingsController*, float)>(&GlobalNamespace::PlayerSettingsPanelController::HandleSFXVolumeSettingsControllerValueDidChange)> {
  static const MethodInfo* get() {
    static auto* settingsController = &::il2cpp_utils::GetClassFromName("", "FormattedFloatListSettingsController")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleSFXVolumeSettingsControllerValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settingsController, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleArcVisibilityDropdownDidSelectCellWithIdx
// Il2CppName: HandleArcVisibilityDropdownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(int, ::GlobalNamespace::ArcVisibilityType)>(&GlobalNamespace::PlayerSettingsPanelController::HandleArcVisibilityDropdownDidSelectCellWithIdx)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* arcVisibilityType = &::il2cpp_utils::GetClassFromName("", "ArcVisibilityType")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleArcVisibilityDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, arcVisibilityType});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleSaberTrailIntensitySettingsControllerValueDidChange
// Il2CppName: HandleSaberTrailIntensitySettingsControllerValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::FormattedFloatListSettingsController*, float)>(&GlobalNamespace::PlayerSettingsPanelController::HandleSaberTrailIntensitySettingsControllerValueDidChange)> {
  static const MethodInfo* get() {
    static auto* settingsController = &::il2cpp_utils::GetClassFromName("", "FormattedFloatListSettingsController")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleSaberTrailIntensitySettingsControllerValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{settingsController, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandlePlayerHeightSettingsControllerValueDidChange
// Il2CppName: HandlePlayerHeightSettingsControllerValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(float)>(&GlobalNamespace::PlayerSettingsPanelController::HandlePlayerHeightSettingsControllerValueDidChange)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandlePlayerHeightSettingsControllerValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleNoteJumpStartBeatOffsetPositionSelected
// Il2CppName: HandleNoteJumpStartBeatOffsetPositionSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(int, float)>(&GlobalNamespace::PlayerSettingsPanelController::HandleNoteJumpStartBeatOffsetPositionSelected)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* startBeatOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleNoteJumpStartBeatOffsetPositionSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, startBeatOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleLightReductionAmountSelected
// Il2CppName: HandleLightReductionAmountSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(int, ::GlobalNamespace::EnvironmentEffectsFilterPreset)>(&GlobalNamespace::PlayerSettingsPanelController::HandleLightReductionAmountSelected)> {
  static const MethodInfo* get() {
    static auto* obj = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* environmentEffectsFilterPreset = &::il2cpp_utils::GetClassFromName("", "EnvironmentEffectsFilterPreset")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleLightReductionAmountSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obj, environmentEffectsFilterPreset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleAdvancedHudToggleChanged
// Il2CppName: HandleAdvancedHudToggleChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::HandleAdvancedHudToggleChanged)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleAdvancedHudToggleChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleNoteJumpDurationTypeSettingsDropdownDidSelectCellWithIdx
// Il2CppName: HandleNoteJumpDurationTypeSettingsDropdownDidSelectCellWithIdx
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(int, ::GlobalNamespace::NoteJumpDurationTypeSettings)>(&GlobalNamespace::PlayerSettingsPanelController::HandleNoteJumpDurationTypeSettingsDropdownDidSelectCellWithIdx)> {
  static const MethodInfo* get() {
    static auto* idx = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* noteJumpDurationTypeSettings = &::il2cpp_utils::GetClassFromName("", "NoteJumpDurationTypeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleNoteJumpDurationTypeSettingsDropdownDidSelectCellWithIdx", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{idx, noteJumpDurationTypeSettings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleNoteJumpFixedDurationSettingsControllerValueDidChange
// Il2CppName: HandleNoteJumpFixedDurationSettingsControllerValueDidChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::FormattedFloatListSettingsController*, float)>(&GlobalNamespace::PlayerSettingsPanelController::HandleNoteJumpFixedDurationSettingsControllerValueDidChange)> {
  static const MethodInfo* get() {
    static auto* formattedFloatListSettingsController = &::il2cpp_utils::GetClassFromName("", "FormattedFloatListSettingsController")->byval_arg;
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleNoteJumpFixedDurationSettingsControllerValueDidChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{formattedFloatListSettingsController, value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::HandleNoTextsAndHudsToggleChanged
// Il2CppName: HandleNoTextsAndHudsToggleChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::HandleNoTextsAndHudsToggleChanged)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "HandleNoTextsAndHudsToggleChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::SetIsDirty
// Il2CppName: SetIsDirty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::SetIsDirty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "SetIsDirty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::RefreshNoteJumpUI
// Il2CppName: RefreshNoteJumpUI
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::NoteJumpDurationTypeSettings)>(&GlobalNamespace::PlayerSettingsPanelController::RefreshNoteJumpUI)> {
  static const MethodInfo* get() {
    static auto* noteJumpDurationTypeSettings = &::il2cpp_utils::GetClassFromName("", "NoteJumpDurationTypeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "RefreshNoteJumpUI", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteJumpDurationTypeSettings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::SetSectionDisabled
// Il2CppName: SetSectionDisabled
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::UnityEngine::CanvasGroup*, bool)>(&GlobalNamespace::PlayerSettingsPanelController::SetSectionDisabled)> {
  static const MethodInfo* get() {
    static auto* sectionCanvasGroup = &::il2cpp_utils::GetClassFromName("UnityEngine", "CanvasGroup")->byval_arg;
    static auto* disable = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "SetSectionDisabled", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sectionCanvasGroup, disable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::RefreshArcsWarning
// Il2CppName: RefreshArcsWarning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(::GlobalNamespace::ArcVisibilityType, bool)>(&GlobalNamespace::PlayerSettingsPanelController::RefreshArcsWarning)> {
  static const MethodInfo* get() {
    static auto* arcVisibilityType = &::il2cpp_utils::GetClassFromName("", "ArcVisibilityType")->byval_arg;
    static auto* forceRebuild = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "RefreshArcsWarning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{arcVisibilityType, forceRebuild});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_0
// Il2CppName: <OnEnable>b__39_0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_0)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_1
// Il2CppName: <OnEnable>b__39_1
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_1)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_1", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_2
// Il2CppName: <OnEnable>b__39_2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_2)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_3
// Il2CppName: <OnEnable>b__39_3
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_3)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_3", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_4
// Il2CppName: <OnEnable>b__39_4
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_4)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_4", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_5
// Il2CppName: <OnEnable>b__39_5
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_5)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_5", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_6
// Il2CppName: <OnEnable>b__39_6
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)(bool)>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_6)> {
  static const MethodInfo* get() {
    static auto* on = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_6", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{on});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_7
// Il2CppName: <OnEnable>b__39_7
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_7)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_7", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_8
// Il2CppName: <OnEnable>b__39_8
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerSettingsPanelController::*)()>(&GlobalNamespace::PlayerSettingsPanelController::$OnEnable$b__39_8)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerSettingsPanelController*), "<OnEnable>b__39_8", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
