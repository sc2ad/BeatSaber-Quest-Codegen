// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
// Including type: ISliderDidFinishJumpEvent
#include "GlobalNamespace/ISliderDidFinishJumpEvent.hpp"
// Including type: ISliderDidDissolveEvent
#include "GlobalNamespace/ISliderDidDissolveEvent.hpp"
// Including type: BeatmapObjectSpawnMovementData/NoteSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_NoteSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/ObstacleSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_ObstacleSpawnData.hpp"
// Including type: BeatmapObjectSpawnMovementData/SliderSpawnData
#include "GlobalNamespace/BeatmapObjectSpawnMovementData_SliderSpawnData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: SliderData
  class SliderData;
  // Forward declaring type: SliderController
  class SliderController;
  // Forward declaring type: IBeatmapObjectController
  class IBeatmapObjectController;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapObjectManager);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapObjectManager*, "", "BeatmapObjectManager");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectManager : public ::Il2CppObject/*, public ::GlobalNamespace::IBeatmapObjectSpawner, public ::GlobalNamespace::INoteControllerNoteDidStartJumpEvent, public ::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent, public ::GlobalNamespace::INoteControllerNoteWasCutEvent, public ::GlobalNamespace::INoteControllerNoteWasMissedEvent, public ::GlobalNamespace::INoteControllerNoteDidDissolveEvent, public ::GlobalNamespace::ISliderDidFinishJumpEvent, public ::GlobalNamespace::ISliderDidDissolveEvent*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate
    class NoteWasCutDelegate;
    public:
    // private System.Action`3<NoteData,BeatmapObjectSpawnMovementData/NoteSpawnData,System.Single> noteWasAddedEvent
    // Size: 0x8
    // Offset: 0x10
    ::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>* noteWasAddedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>*) == 0x8);
    // private System.Action`1<NoteController> noteWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x18
    ::System::Action_1<::GlobalNamespace::NoteController*>* noteWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::NoteController*>*) == 0x8);
    // private System.Action`1<NoteController> noteWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x20
    ::System::Action_1<::GlobalNamespace::NoteController*>* noteWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::NoteController*>*) == 0x8);
    // private System.Action`1<NoteController> noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x28
    ::System::Action_1<::GlobalNamespace::NoteController*>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::NoteController*>*) == 0x8);
    // private BeatmapObjectManager/NoteWasCutDelegate noteWasCutEvent
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*) == 0x8);
    // private System.Action`1<NoteController> noteDidStartJumpEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::GlobalNamespace::NoteController*>* noteDidStartJumpEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::NoteController*>*) == 0x8);
    // private System.Action`3<ObstacleData,BeatmapObjectSpawnMovementData/ObstacleSpawnData,System.Single> obstacleWasAddedEvent
    // Size: 0x8
    // Offset: 0x40
    ::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>* obstacleWasAddedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>*) == 0x8);
    // private System.Action`1<ObstacleController> obstacleWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x48
    ::System::Action_1<::GlobalNamespace::ObstacleController*>* obstacleWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::ObstacleController*>*) == 0x8);
    // private System.Action`1<ObstacleController> obstacleWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x50
    ::System::Action_1<::GlobalNamespace::ObstacleController*>* obstacleWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::ObstacleController*>*) == 0x8);
    // private System.Action`1<ObstacleController> obstacleDidPassThreeQuartersOfMove2Event
    // Size: 0x8
    // Offset: 0x58
    ::System::Action_1<::GlobalNamespace::ObstacleController*>* obstacleDidPassThreeQuartersOfMove2Event;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::ObstacleController*>*) == 0x8);
    // private System.Action`1<ObstacleController> obstacleDidPassAvoidedMarkEvent
    // Size: 0x8
    // Offset: 0x60
    ::System::Action_1<::GlobalNamespace::ObstacleController*>* obstacleDidPassAvoidedMarkEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::ObstacleController*>*) == 0x8);
    // private System.Action`3<SliderData,BeatmapObjectSpawnMovementData/SliderSpawnData,System.Single> sliderWasAddedEvent
    // Size: 0x8
    // Offset: 0x68
    ::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>* sliderWasAddedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>*) == 0x8);
    // private System.Action`1<SliderController> sliderWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x70
    ::System::Action_1<::GlobalNamespace::SliderController*>* sliderWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::SliderController*>*) == 0x8);
    // private System.Action`1<SliderController> sliderWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x78
    ::System::Action_1<::GlobalNamespace::SliderController*>* sliderWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::SliderController*>*) == 0x8);
    // private System.Action`1<System.Boolean> didHideAllBeatmapObjectsEvent
    // Size: 0x8
    // Offset: 0x80
    ::System::Action_1<bool>* didHideAllBeatmapObjectsEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<bool>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<IBeatmapObjectController> _allBeatmapObjects
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapObjectController*>* allBeatmapObjects;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapObjectController*>*) == 0x8);
    // private System.Boolean <spawnHidden>k__BackingField
    // Size: 0x1
    // Offset: 0x90
    bool spawnHidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapObjectSpawner
    operator ::GlobalNamespace::IBeatmapObjectSpawner() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawner*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapObjectSpawner
    inline ::GlobalNamespace::IBeatmapObjectSpawner* i_IBeatmapObjectSpawner() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapObjectSpawner*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INoteControllerNoteDidStartJumpEvent
    operator ::GlobalNamespace::INoteControllerNoteDidStartJumpEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>(this);
    }
    // Creating interface conversion operator: i_INoteControllerNoteDidStartJumpEvent
    inline ::GlobalNamespace::INoteControllerNoteDidStartJumpEvent* i_INoteControllerNoteDidStartJumpEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent
    operator ::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>(this);
    }
    // Creating interface conversion operator: i_INoteControllerNoteDidFinishJumpEvent
    inline ::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent* i_INoteControllerNoteDidFinishJumpEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INoteControllerNoteWasCutEvent
    operator ::GlobalNamespace::INoteControllerNoteWasCutEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INoteControllerNoteWasCutEvent*>(this);
    }
    // Creating interface conversion operator: i_INoteControllerNoteWasCutEvent
    inline ::GlobalNamespace::INoteControllerNoteWasCutEvent* i_INoteControllerNoteWasCutEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::INoteControllerNoteWasCutEvent*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INoteControllerNoteWasMissedEvent
    operator ::GlobalNamespace::INoteControllerNoteWasMissedEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>(this);
    }
    // Creating interface conversion operator: i_INoteControllerNoteWasMissedEvent
    inline ::GlobalNamespace::INoteControllerNoteWasMissedEvent* i_INoteControllerNoteWasMissedEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::INoteControllerNoteWasMissedEvent*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::INoteControllerNoteDidDissolveEvent
    operator ::GlobalNamespace::INoteControllerNoteDidDissolveEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>(this);
    }
    // Creating interface conversion operator: i_INoteControllerNoteDidDissolveEvent
    inline ::GlobalNamespace::INoteControllerNoteDidDissolveEvent* i_INoteControllerNoteDidDissolveEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::INoteControllerNoteDidDissolveEvent*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ISliderDidFinishJumpEvent
    operator ::GlobalNamespace::ISliderDidFinishJumpEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ISliderDidFinishJumpEvent*>(this);
    }
    // Creating interface conversion operator: i_ISliderDidFinishJumpEvent
    inline ::GlobalNamespace::ISliderDidFinishJumpEvent* i_ISliderDidFinishJumpEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::ISliderDidFinishJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::ISliderDidDissolveEvent
    operator ::GlobalNamespace::ISliderDidDissolveEvent() noexcept {
      return *reinterpret_cast<::GlobalNamespace::ISliderDidDissolveEvent*>(this);
    }
    // Creating interface conversion operator: i_ISliderDidDissolveEvent
    inline ::GlobalNamespace::ISliderDidDissolveEvent* i_ISliderDidDissolveEvent() noexcept {
      return reinterpret_cast<::GlobalNamespace::ISliderDidDissolveEvent*>(this);
    }
    // Get instance field reference: private System.Action`3<NoteData,BeatmapObjectSpawnMovementData/NoteSpawnData,System.Single> noteWasAddedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>*& dyn_noteWasAddedEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteWasSpawnedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteController*>*& dyn_noteWasSpawnedEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteWasDespawnedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteController*>*& dyn_noteWasDespawnedEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteWasMissedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteController*>*& dyn_noteWasMissedEvent();
    // Get instance field reference: private BeatmapObjectManager/NoteWasCutDelegate noteWasCutEvent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*& dyn_noteWasCutEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteDidStartJumpEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::NoteController*>*& dyn_noteDidStartJumpEvent();
    // Get instance field reference: private System.Action`3<ObstacleData,BeatmapObjectSpawnMovementData/ObstacleSpawnData,System.Single> obstacleWasAddedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>*& dyn_obstacleWasAddedEvent();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleWasSpawnedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& dyn_obstacleWasSpawnedEvent();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleWasDespawnedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& dyn_obstacleWasDespawnedEvent();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleDidPassThreeQuartersOfMove2Event
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& dyn_obstacleDidPassThreeQuartersOfMove2Event();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleDidPassAvoidedMarkEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::ObstacleController*>*& dyn_obstacleDidPassAvoidedMarkEvent();
    // Get instance field reference: private System.Action`3<SliderData,BeatmapObjectSpawnMovementData/SliderSpawnData,System.Single> sliderWasAddedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>*& dyn_sliderWasAddedEvent();
    // Get instance field reference: private System.Action`1<SliderController> sliderWasSpawnedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::SliderController*>*& dyn_sliderWasSpawnedEvent();
    // Get instance field reference: private System.Action`1<SliderController> sliderWasDespawnedEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::SliderController*>*& dyn_sliderWasDespawnedEvent();
    // Get instance field reference: private System.Action`1<System.Boolean> didHideAllBeatmapObjectsEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<bool>*& dyn_didHideAllBeatmapObjectsEvent();
    // Get instance field reference: private readonly System.Collections.Generic.List`1<IBeatmapObjectController> _allBeatmapObjects
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::IBeatmapObjectController*>*& dyn__allBeatmapObjects();
    // Get instance field reference: private System.Boolean <spawnHidden>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$spawnHidden$k__BackingField();
    // public System.Collections.Generic.List`1<ObstacleController> get_activeObstacleControllers()
    // Offset: 0xFFFFFFFFFFFFFFFF
    ::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>* get_activeObstacleControllers();
    // public System.Boolean get_spawnHidden()
    // Offset: 0x15438DC
    bool get_spawnHidden();
    // public System.Void set_spawnHidden(System.Boolean value)
    // Offset: 0x15438E4
    void set_spawnHidden(bool value);
    // public System.Void add_noteWasAddedEvent(System.Action`3<NoteData,BeatmapObjectSpawnMovementData/NoteSpawnData,System.Single> value)
    // Offset: 0x15426EC
    void add_noteWasAddedEvent(::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>* value);
    // public System.Void remove_noteWasAddedEvent(System.Action`3<NoteData,BeatmapObjectSpawnMovementData/NoteSpawnData,System.Single> value)
    // Offset: 0x1542790
    void remove_noteWasAddedEvent(::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>* value);
    // public System.Void add_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1542834
    void add_noteWasSpawnedEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x15428D8
    void remove_noteWasSpawnedEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasDespawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x154297C
    void add_noteWasDespawnedEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasDespawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1542A20
    void remove_noteWasDespawnedEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1542AC4
    void add_noteWasMissedEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x1542B68
    void remove_noteWasMissedEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasCutEvent(BeatmapObjectManager/NoteWasCutDelegate value)
    // Offset: 0x1542C0C
    void add_noteWasCutEvent(::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value);
    // public System.Void remove_noteWasCutEvent(BeatmapObjectManager/NoteWasCutDelegate value)
    // Offset: 0x1542CB0
    void remove_noteWasCutEvent(::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value);
    // public System.Void add_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1542D54
    void add_noteDidStartJumpEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x1542DF8
    void remove_noteDidStartJumpEvent(::System::Action_1<::GlobalNamespace::NoteController*>* value);
    // public System.Void add_obstacleWasAddedEvent(System.Action`3<ObstacleData,BeatmapObjectSpawnMovementData/ObstacleSpawnData,System.Single> value)
    // Offset: 0x1542E9C
    void add_obstacleWasAddedEvent(::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>* value);
    // public System.Void remove_obstacleWasAddedEvent(System.Action`3<ObstacleData,BeatmapObjectSpawnMovementData/ObstacleSpawnData,System.Single> value)
    // Offset: 0x1542F40
    void remove_obstacleWasAddedEvent(::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>* value);
    // public System.Void add_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x1542FE4
    void add_obstacleWasSpawnedEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x1543088
    void remove_obstacleWasSpawnedEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleWasDespawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x154312C
    void add_obstacleWasDespawnedEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasDespawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x15431D0
    void remove_obstacleWasDespawnedEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0x1543274
    void add_obstacleDidPassThreeQuartersOfMove2Event(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0x1543318
    void remove_obstacleDidPassThreeQuartersOfMove2Event(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x1541DA0
    void add_obstacleDidPassAvoidedMarkEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x1542014
    void remove_obstacleDidPassAvoidedMarkEvent(::System::Action_1<::GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_sliderWasAddedEvent(System.Action`3<SliderData,BeatmapObjectSpawnMovementData/SliderSpawnData,System.Single> value)
    // Offset: 0x15433BC
    void add_sliderWasAddedEvent(::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>* value);
    // public System.Void remove_sliderWasAddedEvent(System.Action`3<SliderData,BeatmapObjectSpawnMovementData/SliderSpawnData,System.Single> value)
    // Offset: 0x1543460
    void remove_sliderWasAddedEvent(::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>* value);
    // public System.Void add_sliderWasSpawnedEvent(System.Action`1<SliderController> value)
    // Offset: 0x1543504
    void add_sliderWasSpawnedEvent(::System::Action_1<::GlobalNamespace::SliderController*>* value);
    // public System.Void remove_sliderWasSpawnedEvent(System.Action`1<SliderController> value)
    // Offset: 0x15435A8
    void remove_sliderWasSpawnedEvent(::System::Action_1<::GlobalNamespace::SliderController*>* value);
    // public System.Void add_sliderWasDespawnedEvent(System.Action`1<SliderController> value)
    // Offset: 0x154364C
    void add_sliderWasDespawnedEvent(::System::Action_1<::GlobalNamespace::SliderController*>* value);
    // public System.Void remove_sliderWasDespawnedEvent(System.Action`1<SliderController> value)
    // Offset: 0x15436F0
    void remove_sliderWasDespawnedEvent(::System::Action_1<::GlobalNamespace::SliderController*>* value);
    // public System.Void add_didHideAllBeatmapObjectsEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x1543794
    void add_didHideAllBeatmapObjectsEvent(::System::Action_1<bool>* value);
    // public System.Void remove_didHideAllBeatmapObjectsEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x1543838
    void remove_didHideAllBeatmapObjectsEvent(::System::Action_1<bool>* value);
    // protected System.Void .ctor()
    // Offset: 0x1544FFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapObjectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectManager*, creationType>()));
    }
    // public System.Void ProcessObstacleData(ObstacleData obstacleData, in BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessObstacleData(::GlobalNamespace::ObstacleData* obstacleData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData> obstacleSpawnData, float rotation);
    // public System.Void ProcessNoteData(NoteData noteData, in BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Boolean forceIsFirstNoteBehaviour)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessNoteData(::GlobalNamespace::NoteData* noteData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData> noteSpawnData, float rotation, bool forceIsFirstNoteBehaviour);
    // public System.Void ProcessSliderData(SliderData sliderData, in BeatmapObjectSpawnMovementData/SliderSpawnData sliderSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void ProcessSliderData(::GlobalNamespace::SliderData* sliderData, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData> sliderSpawnData, float rotation);
    // protected System.Void DespawnInternal(NoteController noteController)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DespawnInternal(::GlobalNamespace::NoteController* noteController);
    // protected System.Void DespawnInternal(ObstacleController obstacleController)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DespawnInternal(::GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void DespawnInternal(SliderController sliderNoteController)
    // Offset: 0xFFFFFFFFFFFFFFFF
    void DespawnInternal(::GlobalNamespace::SliderController* sliderNoteController);
    // protected System.Void AddSpawnedObstacleController(ObstacleController obstacleController, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0x15438F0
    void AddSpawnedObstacleController(::GlobalNamespace::ObstacleController* obstacleController, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // protected System.Void AddSpawnedNoteController(NoteController noteController, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0x1543B88
    void AddSpawnedNoteController(::GlobalNamespace::NoteController* noteController, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // protected System.Void AddSpawnedSliderController(SliderController sliderController, BeatmapObjectSpawnMovementData/SliderSpawnData sliderSpawnData, System.Single rotation)
    // Offset: 0x1543F84
    void AddSpawnedSliderController(::GlobalNamespace::SliderController* sliderController, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData sliderSpawnData, float rotation);
    // private System.Void SetNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0x1543CF0
    void SetNoteControllerEventCallbacks(::GlobalNamespace::NoteController* noteController);
    // private System.Void RemoveNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0x154421C
    void RemoveNoteControllerEventCallbacks(::GlobalNamespace::NoteController* noteController);
    // private System.Void SetSliderNoteControllerEventCallbacks(SliderController sliderNoteController)
    // Offset: 0x15440E4
    void SetSliderNoteControllerEventCallbacks(::GlobalNamespace::SliderController* sliderNoteController);
    // private System.Void RemoveSliderNoteControllerEventCallbacks(SliderController sliderNoteController)
    // Offset: 0x15444C4
    void RemoveSliderNoteControllerEventCallbacks(::GlobalNamespace::SliderController* sliderNoteController);
    // private System.Void SetObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0x1543A50
    void SetObstacleEventCallbacks(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void RemoveObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0x1544604
    void RemoveObstacleEventCallbacks(::GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void Despawn(NoteController noteController)
    // Offset: 0x154473C
    void Despawn(::GlobalNamespace::NoteController* noteController);
    // private System.Void Despawn(ObstacleController obstacleController)
    // Offset: 0x15447F4
    void Despawn(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void Despawn(SliderController sliderNoteController)
    // Offset: 0x15448AC
    void Despawn(::GlobalNamespace::SliderController* sliderNoteController);
    // public System.Void HandleNoteControllerNoteDidStartJump(NoteController noteController)
    // Offset: 0x1544964
    void HandleNoteControllerNoteDidStartJump(::GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteWasMissed(NoteController noteController)
    // Offset: 0x15449D8
    void HandleNoteControllerNoteWasMissed(::GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteDidFinishJump(NoteController noteController)
    // Offset: 0x1544A4C
    void HandleNoteControllerNoteDidFinishJump(::GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteDidDissolve(NoteController noteController)
    // Offset: 0x1544A50
    void HandleNoteControllerNoteDidDissolve(::GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x1544A54
    void HandleNoteControllerNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo);
    // private System.Void HandleObstaclePassedThreeQuartersOfMove2(ObstacleController obstacleController)
    // Offset: 0x1544A90
    void HandleObstaclePassedThreeQuartersOfMove2(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstaclePassedAvoidedMark(ObstacleController obstacleController)
    // Offset: 0x1544B04
    void HandleObstaclePassedAvoidedMark(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleFinishedMovement(ObstacleController obstacleController)
    // Offset: 0x1544B78
    void HandleObstacleFinishedMovement(::GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleDidDissolve(ObstacleController obstacleController)
    // Offset: 0x1544B7C
    void HandleObstacleDidDissolve(::GlobalNamespace::ObstacleController* obstacleController);
    // public System.Void HandleSliderDidFinishJump(SliderController sliderController)
    // Offset: 0x1544B80
    void HandleSliderDidFinishJump(::GlobalNamespace::SliderController* sliderController);
    // public System.Void HandleSliderDidDissolve(SliderController sliderController)
    // Offset: 0x1544B84
    void HandleSliderDidDissolve(::GlobalNamespace::SliderController* sliderController);
    // public System.Void DissolveAllObjects()
    // Offset: 0x1544B88
    void DissolveAllObjects();
    // public System.Void HideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0x1544CFC
    void HideAllBeatmapObjects(bool hide);
    // public System.Void PauseAllBeatmapObjects(System.Boolean pause)
    // Offset: 0x1544E8C
    void PauseAllBeatmapObjects(bool pause);
    // private System.Void INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x154506C
    void INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut(::GlobalNamespace::NoteController* noteController, ByRef<::GlobalNamespace::NoteCutInfo> noteCutInfo);
  }; // BeatmapObjectManager
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectManager), 144 + sizeof(bool)> __GlobalNamespace_BeatmapObjectManagerSizeCheck;
  static_assert(sizeof(BeatmapObjectManager) == 0x91);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers
// Il2CppName: get_activeObstacleControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::ObstacleController*>* (GlobalNamespace::BeatmapObjectManager::*)()>(&GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "get_activeObstacleControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::get_spawnHidden
// Il2CppName: get_spawnHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapObjectManager::*)()>(&GlobalNamespace::BeatmapObjectManager::get_spawnHidden)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "get_spawnHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::set_spawnHidden
// Il2CppName: set_spawnHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::set_spawnHidden)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "set_spawnHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasAddedEvent
// Il2CppName: add_noteWasAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasAddedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData"), ::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasAddedEvent
// Il2CppName: remove_noteWasAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_3<::GlobalNamespace::NoteData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasAddedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteData"), ::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent
// Il2CppName: add_noteWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent
// Il2CppName: remove_noteWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent
// Il2CppName: add_noteWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent
// Il2CppName: remove_noteWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectManager/NoteWasCutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectManager/NoteWasCutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent
// Il2CppName: add_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent
// Il2CppName: remove_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasAddedEvent
// Il2CppName: add_obstacleWasAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleWasAddedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleData"), ::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/ObstacleSpawnData"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleWasAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasAddedEvent
// Il2CppName: remove_obstacleWasAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_3<::GlobalNamespace::ObstacleData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleWasAddedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleData"), ::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/ObstacleSpawnData"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleWasAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent
// Il2CppName: add_obstacleWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent
// Il2CppName: remove_obstacleWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent
// Il2CppName: add_obstacleWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent
// Il2CppName: remove_obstacleWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: add_obstacleDidPassThreeQuartersOfMove2Event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: remove_obstacleDidPassThreeQuartersOfMove2Event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent
// Il2CppName: add_obstacleDidPassAvoidedMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent
// Il2CppName: remove_obstacleDidPassAvoidedMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_sliderWasAddedEvent
// Il2CppName: add_sliderWasAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>*)>(&GlobalNamespace::BeatmapObjectManager::add_sliderWasAddedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderData"), ::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/SliderSpawnData"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_sliderWasAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_sliderWasAddedEvent
// Il2CppName: remove_sliderWasAddedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_3<::GlobalNamespace::SliderData*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float>*)>(&GlobalNamespace::BeatmapObjectManager::remove_sliderWasAddedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`3"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderData"), ::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/SliderSpawnData"), ::il2cpp_utils::GetClassFromName("System", "Single")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_sliderWasAddedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_sliderWasSpawnedEvent
// Il2CppName: add_sliderWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::SliderController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_sliderWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_sliderWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_sliderWasSpawnedEvent
// Il2CppName: remove_sliderWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::SliderController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_sliderWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_sliderWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_sliderWasDespawnedEvent
// Il2CppName: add_sliderWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::SliderController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_sliderWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_sliderWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_sliderWasDespawnedEvent
// Il2CppName: remove_sliderWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<::GlobalNamespace::SliderController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_sliderWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "SliderController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_sliderWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent
// Il2CppName: add_didHideAllBeatmapObjectsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<bool>*)>(&GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent
// Il2CppName: remove_didHideAllBeatmapObjectsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::System::Action_1<bool>*)>(&GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::ProcessObstacleData
// Il2CppName: ProcessObstacleData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleData*, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData>, float)>(&GlobalNamespace::BeatmapObjectManager::ProcessObstacleData)> {
  static const MethodInfo* get() {
    static auto* obstacleData = &::il2cpp_utils::GetClassFromName("", "ObstacleData")->byval_arg;
    static auto* obstacleSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/ObstacleSpawnData")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "ProcessObstacleData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleData, obstacleSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::ProcessNoteData
// Il2CppName: ProcessNoteData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteData*, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData>, float, bool)>(&GlobalNamespace::BeatmapObjectManager::ProcessNoteData)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* noteSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* forceIsFirstNoteBehaviour = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "ProcessNoteData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, noteSpawnData, rotation, forceIsFirstNoteBehaviour});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::ProcessSliderData
// Il2CppName: ProcessSliderData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderData*, ByRef<::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData>, float)>(&GlobalNamespace::BeatmapObjectManager::ProcessSliderData)> {
  static const MethodInfo* get() {
    static auto* sliderData = &::il2cpp_utils::GetClassFromName("", "SliderData")->byval_arg;
    static auto* sliderSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/SliderSpawnData")->this_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "ProcessSliderData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderData, sliderSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::DespawnInternal)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::DespawnInternal)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::BeatmapObjectManager::DespawnInternal)> {
  static const MethodInfo* get() {
    static auto* sliderNoteController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderNoteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::AddSpawnedObstacleController
// Il2CppName: AddSpawnedObstacleController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::AddSpawnedObstacleController)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    static auto* obstacleSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/ObstacleSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "AddSpawnedObstacleController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController, obstacleSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::AddSpawnedNoteController
// Il2CppName: AddSpawnedNoteController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::AddSpawnedNoteController)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "AddSpawnedNoteController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::AddSpawnedSliderController
// Il2CppName: AddSpawnedSliderController
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*, ::GlobalNamespace::BeatmapObjectSpawnMovementData::SliderSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::AddSpawnedSliderController)> {
  static const MethodInfo* get() {
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    static auto* sliderSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/SliderSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "AddSpawnedSliderController", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderController, sliderSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks
// Il2CppName: SetNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SetNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks
// Il2CppName: RemoveNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "RemoveNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetSliderNoteControllerEventCallbacks
// Il2CppName: SetSliderNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::BeatmapObjectManager::SetSliderNoteControllerEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* sliderNoteController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SetSliderNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderNoteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveSliderNoteControllerEventCallbacks
// Il2CppName: RemoveSliderNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::BeatmapObjectManager::RemoveSliderNoteControllerEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* sliderNoteController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "RemoveSliderNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderNoteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks
// Il2CppName: SetObstacleEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SetObstacleEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks
// Il2CppName: RemoveObstacleEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "RemoveObstacleEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::Despawn)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::Despawn)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::BeatmapObjectManager::Despawn)> {
  static const MethodInfo* get() {
    static auto* sliderNoteController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderNoteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump
// Il2CppName: HandleNoteControllerNoteDidStartJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed
// Il2CppName: HandleNoteControllerNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump
// Il2CppName: HandleNoteControllerNoteDidFinishJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve
// Il2CppName: HandleNoteControllerNoteDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut
// Il2CppName: HandleNoteControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*, ByRef<::GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2
// Il2CppName: HandleObstaclePassedThreeQuartersOfMove2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstaclePassedThreeQuartersOfMove2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark
// Il2CppName: HandleObstaclePassedAvoidedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstaclePassedAvoidedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement
// Il2CppName: HandleObstacleFinishedMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstacleFinishedMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve
// Il2CppName: HandleObstacleDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstacleDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleSliderDidFinishJump
// Il2CppName: HandleSliderDidFinishJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::BeatmapObjectManager::HandleSliderDidFinishJump)> {
  static const MethodInfo* get() {
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleSliderDidFinishJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleSliderDidDissolve
// Il2CppName: HandleSliderDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::SliderController*)>(&GlobalNamespace::BeatmapObjectManager::HandleSliderDidDissolve)> {
  static const MethodInfo* get() {
    static auto* sliderController = &::il2cpp_utils::GetClassFromName("", "SliderController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleSliderDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{sliderController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DissolveAllObjects
// Il2CppName: DissolveAllObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)()>(&GlobalNamespace::BeatmapObjectManager::DissolveAllObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DissolveAllObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects
// Il2CppName: HideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects)> {
  static const MethodInfo* get() {
    static auto* hide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects
// Il2CppName: PauseAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "PauseAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut
// Il2CppName: INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(::GlobalNamespace::NoteController*, ByRef<::GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
