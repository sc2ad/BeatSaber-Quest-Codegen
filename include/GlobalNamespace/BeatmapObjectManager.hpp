// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: IBeatmapObjectSpawner
#include "GlobalNamespace/IBeatmapObjectSpawner.hpp"
// Including type: INoteControllerNoteDidStartJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidStartJumpEvent.hpp"
// Including type: INoteControllerNoteDidFinishJumpEvent
#include "GlobalNamespace/INoteControllerNoteDidFinishJumpEvent.hpp"
// Including type: INoteControllerNoteWasCutEvent
#include "GlobalNamespace/INoteControllerNoteWasCutEvent.hpp"
// Including type: INoteControllerNoteWasMissedEvent
#include "GlobalNamespace/INoteControllerNoteWasMissedEvent.hpp"
// Including type: INoteControllerNoteDidDissolveEvent
#include "GlobalNamespace/INoteControllerNoteDidDissolveEvent.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteCutInfo
  struct NoteCutInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectManager
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapObjectManager : public ::Il2CppObject/*, public GlobalNamespace::IBeatmapObjectSpawner, public GlobalNamespace::INoteControllerNoteDidStartJumpEvent, public GlobalNamespace::INoteControllerNoteDidFinishJumpEvent, public GlobalNamespace::INoteControllerNoteWasCutEvent, public GlobalNamespace::INoteControllerNoteWasMissedEvent, public GlobalNamespace::INoteControllerNoteDidDissolveEvent*/ {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate
    class NoteWasCutDelegate;
    // [CompilerGeneratedAttribute] Offset: 0xF0440C
    // private System.Action`1<NoteController> noteWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x10
    System::Action_1<GlobalNamespace::NoteController*>* noteWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0441C
    // private System.Action`1<NoteController> noteWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action_1<GlobalNamespace::NoteController*>* noteWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0442C
    // private System.Action`1<NoteController> noteWasMissedEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action_1<GlobalNamespace::NoteController*>* noteWasMissedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0443C
    // private BeatmapObjectManager/NoteWasCutDelegate noteWasCutEvent
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* noteWasCutEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0444C
    // private System.Action`1<NoteController> noteDidStartJumpEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<GlobalNamespace::NoteController*>* noteDidStartJumpEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::NoteController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0445C
    // private System.Action`1<ObstacleController> obstacleWasSpawnedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasSpawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0446C
    // private System.Action`1<ObstacleController> obstacleWasDespawnedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasDespawnedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0447C
    // private System.Action`1<ObstacleController> obstacleDidPassThreeQuartersOfMove2Event
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassThreeQuartersOfMove2Event;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0448C
    // private System.Action`1<ObstacleController> obstacleDidPassAvoidedMarkEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassAvoidedMarkEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ObstacleController*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF0449C
    // private System.Action`1<System.Boolean> didHideAllBeatmapObjectsEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<bool>* didHideAllBeatmapObjectsEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<bool>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xF044AC
    // private System.Boolean <spawnHidden>k__BackingField
    // Size: 0x1
    // Offset: 0x60
    bool spawnHidden;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: BeatmapObjectManager
    BeatmapObjectManager(System::Action_1<GlobalNamespace::NoteController*>* noteWasSpawnedEvent_ = {}, System::Action_1<GlobalNamespace::NoteController*>* noteWasDespawnedEvent_ = {}, System::Action_1<GlobalNamespace::NoteController*>* noteWasMissedEvent_ = {}, GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* noteWasCutEvent_ = {}, System::Action_1<GlobalNamespace::NoteController*>* noteDidStartJumpEvent_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasSpawnedEvent_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleWasDespawnedEvent_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassThreeQuartersOfMove2Event_ = {}, System::Action_1<GlobalNamespace::ObstacleController*>* obstacleDidPassAvoidedMarkEvent_ = {}, System::Action_1<bool>* didHideAllBeatmapObjectsEvent_ = {}, bool spawnHidden_ = {}) noexcept : noteWasSpawnedEvent{noteWasSpawnedEvent_}, noteWasDespawnedEvent{noteWasDespawnedEvent_}, noteWasMissedEvent{noteWasMissedEvent_}, noteWasCutEvent{noteWasCutEvent_}, noteDidStartJumpEvent{noteDidStartJumpEvent_}, obstacleWasSpawnedEvent{obstacleWasSpawnedEvent_}, obstacleWasDespawnedEvent{obstacleWasDespawnedEvent_}, obstacleDidPassThreeQuartersOfMove2Event{obstacleDidPassThreeQuartersOfMove2Event_}, obstacleDidPassAvoidedMarkEvent{obstacleDidPassAvoidedMarkEvent_}, didHideAllBeatmapObjectsEvent{didHideAllBeatmapObjectsEvent_}, spawnHidden{spawnHidden_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IBeatmapObjectSpawner
    operator GlobalNamespace::IBeatmapObjectSpawner() noexcept {
      return *reinterpret_cast<GlobalNamespace::IBeatmapObjectSpawner*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteDidStartJumpEvent
    operator GlobalNamespace::INoteControllerNoteDidStartJumpEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteDidStartJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteDidFinishJumpEvent
    operator GlobalNamespace::INoteControllerNoteDidFinishJumpEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteDidFinishJumpEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteWasCutEvent
    operator GlobalNamespace::INoteControllerNoteWasCutEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteWasCutEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteWasMissedEvent
    operator GlobalNamespace::INoteControllerNoteWasMissedEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteWasMissedEvent*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::INoteControllerNoteDidDissolveEvent
    operator GlobalNamespace::INoteControllerNoteDidDissolveEvent() noexcept {
      return *reinterpret_cast<GlobalNamespace::INoteControllerNoteDidDissolveEvent*>(this);
    }
    // Get instance field reference: private System.Action`1<NoteController> noteWasSpawnedEvent
    System::Action_1<GlobalNamespace::NoteController*>*& dyn_noteWasSpawnedEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteWasDespawnedEvent
    System::Action_1<GlobalNamespace::NoteController*>*& dyn_noteWasDespawnedEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteWasMissedEvent
    System::Action_1<GlobalNamespace::NoteController*>*& dyn_noteWasMissedEvent();
    // Get instance field reference: private BeatmapObjectManager/NoteWasCutDelegate noteWasCutEvent
    GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*& dyn_noteWasCutEvent();
    // Get instance field reference: private System.Action`1<NoteController> noteDidStartJumpEvent
    System::Action_1<GlobalNamespace::NoteController*>*& dyn_noteDidStartJumpEvent();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleWasSpawnedEvent
    System::Action_1<GlobalNamespace::ObstacleController*>*& dyn_obstacleWasSpawnedEvent();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleWasDespawnedEvent
    System::Action_1<GlobalNamespace::ObstacleController*>*& dyn_obstacleWasDespawnedEvent();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleDidPassThreeQuartersOfMove2Event
    System::Action_1<GlobalNamespace::ObstacleController*>*& dyn_obstacleDidPassThreeQuartersOfMove2Event();
    // Get instance field reference: private System.Action`1<ObstacleController> obstacleDidPassAvoidedMarkEvent
    System::Action_1<GlobalNamespace::ObstacleController*>*& dyn_obstacleDidPassAvoidedMarkEvent();
    // Get instance field reference: private System.Action`1<System.Boolean> didHideAllBeatmapObjectsEvent
    System::Action_1<bool>*& dyn_didHideAllBeatmapObjectsEvent();
    // Get instance field reference: private System.Boolean <spawnHidden>k__BackingField
    bool& dyn_$spawnHidden$k__BackingField();
    // public System.Void add_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1A64
    void add_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasSpawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1B08
    void remove_noteWasSpawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasDespawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1BAC
    void add_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasDespawnedEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1C50
    void remove_noteWasDespawnedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1CF4
    void add_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteWasMissedEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1D98
    void remove_noteWasMissedEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_noteWasCutEvent(BeatmapObjectManager/NoteWasCutDelegate value)
    // Offset: 0x12A1E3C
    void add_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value);
    // public System.Void remove_noteWasCutEvent(BeatmapObjectManager/NoteWasCutDelegate value)
    // Offset: 0x12A1EE0
    void remove_noteWasCutEvent(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate* value);
    // public System.Void add_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A1F84
    void add_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void remove_noteDidStartJumpEvent(System.Action`1<NoteController> value)
    // Offset: 0x12A2028
    void remove_noteDidStartJumpEvent(System::Action_1<GlobalNamespace::NoteController*>* value);
    // public System.Void add_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x12A20CC
    void add_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasSpawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x12A2170
    void remove_obstacleWasSpawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleWasDespawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x12A2214
    void add_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleWasDespawnedEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x12A22B8
    void remove_obstacleWasDespawnedEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0x12A235C
    void add_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassThreeQuartersOfMove2Event(System.Action`1<ObstacleController> value)
    // Offset: 0x12A2400
    void remove_obstacleDidPassThreeQuartersOfMove2Event(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x12A0B1C
    void add_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void remove_obstacleDidPassAvoidedMarkEvent(System.Action`1<ObstacleController> value)
    // Offset: 0x12A0DA8
    void remove_obstacleDidPassAvoidedMarkEvent(System::Action_1<GlobalNamespace::ObstacleController*>* value);
    // public System.Void add_didHideAllBeatmapObjectsEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x12A24A4
    void add_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value);
    // public System.Void remove_didHideAllBeatmapObjectsEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x12A2548
    void remove_didHideAllBeatmapObjectsEvent(System::Action_1<bool>* value);
    // public System.Collections.Generic.List`1<ObstacleController> get_activeObstacleControllers()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* get_activeObstacleControllers();
    // protected ObstacleController SpawnObstacleInternal(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::ObstacleController* SpawnObstacleInternal(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // protected NoteController SpawnBombNoteInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteController* SpawnBombNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // protected NoteController SpawnBasicNoteInternal(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::NoteController* SpawnBasicNoteInternal(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset);
    // protected System.Void DespawnInternal(NoteController noteController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::NoteController* noteController);
    // protected System.Void DespawnInternal(ObstacleController obstacleController)
    // Offset: 0xFFFFFFFF
    void DespawnInternal(GlobalNamespace::ObstacleController* obstacleController);
    // public System.Boolean get_spawnHidden()
    // Offset: 0x12A25EC
    bool get_spawnHidden();
    // public System.Void set_spawnHidden(System.Boolean value)
    // Offset: 0x12A25F4
    void set_spawnHidden(bool value);
    // public ObstacleController SpawnObstacle(ObstacleData obstacleData, BeatmapObjectSpawnMovementData/ObstacleSpawnData obstacleSpawnData, System.Single rotation)
    // Offset: 0x12A2600
    GlobalNamespace::ObstacleController* SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData obstacleSpawnData, float rotation);
    // public NoteController SpawnBombNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation)
    // Offset: 0x12A287C
    GlobalNamespace::NoteController* SpawnBombNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation);
    // public NoteController SpawnBasicNote(NoteData noteData, BeatmapObjectSpawnMovementData/NoteSpawnData noteSpawnData, System.Single rotation, System.Single cutDirectionAngleOffset)
    // Offset: 0x12A2C4C
    GlobalNamespace::NoteController* SpawnBasicNote(GlobalNamespace::NoteData* noteData, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData noteSpawnData, float rotation, float cutDirectionAngleOffset);
    // private System.Void SetNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0x12A29B8
    void SetNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController);
    // private System.Void RemoveNoteControllerEventCallbacks(NoteController noteController)
    // Offset: 0x12A2D58
    void RemoveNoteControllerEventCallbacks(GlobalNamespace::NoteController* noteController);
    // private System.Void SetObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0x12A2744
    void SetObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void RemoveObstacleEventCallbacks(ObstacleController obstacleController)
    // Offset: 0x12A3000
    void RemoveObstacleEventCallbacks(GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void Despawn(NoteController noteController)
    // Offset: 0x12A3138
    void Despawn(GlobalNamespace::NoteController* noteController);
    // private System.Void Despawn(ObstacleController obstacleController)
    // Offset: 0x12A31D0
    void Despawn(GlobalNamespace::ObstacleController* obstacleController);
    // public System.Void HandleNoteControllerNoteDidStartJump(NoteController noteController)
    // Offset: 0x12A3268
    void HandleNoteControllerNoteDidStartJump(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteWasMissed(NoteController noteController)
    // Offset: 0x12A32DC
    void HandleNoteControllerNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteDidFinishJump(NoteController noteController)
    // Offset: 0x12A3350
    void HandleNoteControllerNoteDidFinishJump(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteDidDissolve(NoteController noteController)
    // Offset: 0x12A3354
    void HandleNoteControllerNoteDidDissolve(GlobalNamespace::NoteController* noteController);
    // public System.Void HandleNoteControllerNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x12A3358
    void HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, ByRef<GlobalNamespace::NoteCutInfo> noteCutInfo);
    // private System.Void HandleObstaclePassedThreeQuartersOfMove2(ObstacleController obstacleController)
    // Offset: 0x12A3778
    void HandleObstaclePassedThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstaclePassedAvoidedMark(ObstacleController obstacleController)
    // Offset: 0x12A37EC
    void HandleObstaclePassedAvoidedMark(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleFinishedMovement(ObstacleController obstacleController)
    // Offset: 0x12A3860
    void HandleObstacleFinishedMovement(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void HandleObstacleDidDissolve(ObstacleController obstacleController)
    // Offset: 0x12A3864
    void HandleObstacleDidDissolve(GlobalNamespace::ObstacleController* obstacleController);
    // protected System.Void InvokeDidHideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0x12A3868
    void InvokeDidHideAllBeatmapObjects(bool hide);
    // public System.Void DissolveAllObjects()
    // Offset: 0xFFFFFFFF
    void DissolveAllObjects();
    // public System.Void HideAllBeatmapObjects(System.Boolean hide)
    // Offset: 0xFFFFFFFF
    void HideAllBeatmapObjects(bool hide);
    // public System.Void PauseAllBeatmapObjects(System.Boolean pause)
    // Offset: 0xFFFFFFFF
    void PauseAllBeatmapObjects(bool pause);
    // private System.Void INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut(NoteController noteController, in NoteCutInfo noteCutInfo)
    // Offset: 0x12A38E4
    void INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut(GlobalNamespace::NoteController* noteController, ByRef<GlobalNamespace::NoteCutInfo> noteCutInfo);
    // protected System.Void .ctor()
    // Offset: 0x12A38DC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectManager*, creationType>()));
    }
  }; // BeatmapObjectManager
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectManager), 96 + sizeof(bool)> __GlobalNamespace_BeatmapObjectManagerSizeCheck;
  static_assert(sizeof(BeatmapObjectManager) == 0x61);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectManager*, "", "BeatmapObjectManager");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent
// Il2CppName: add_noteWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent
// Il2CppName: remove_noteWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent
// Il2CppName: add_noteWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent
// Il2CppName: remove_noteWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent
// Il2CppName: add_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent
// Il2CppName: remove_noteWasMissedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasMissedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasMissedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent
// Il2CppName: add_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*)>(&GlobalNamespace::BeatmapObjectManager::add_noteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectManager/NoteWasCutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent
// Il2CppName: remove_noteWasCutEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::BeatmapObjectManager::NoteWasCutDelegate*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteWasCutEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectManager/NoteWasCutDelegate")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteWasCutEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent
// Il2CppName: add_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent
// Il2CppName: remove_noteDidStartJumpEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::NoteController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_noteDidStartJumpEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "NoteController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_noteDidStartJumpEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent
// Il2CppName: add_obstacleWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent
// Il2CppName: remove_obstacleWasSpawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleWasSpawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleWasSpawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent
// Il2CppName: add_obstacleWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent
// Il2CppName: remove_obstacleWasDespawnedEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleWasDespawnedEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleWasDespawnedEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: add_obstacleDidPassThreeQuartersOfMove2Event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassThreeQuartersOfMove2Event)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event
// Il2CppName: remove_obstacleDidPassThreeQuartersOfMove2Event
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassThreeQuartersOfMove2Event)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleDidPassThreeQuartersOfMove2Event", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent
// Il2CppName: add_obstacleDidPassAvoidedMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::add_obstacleDidPassAvoidedMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent
// Il2CppName: remove_obstacleDidPassAvoidedMarkEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<GlobalNamespace::ObstacleController*>*)>(&GlobalNamespace::BeatmapObjectManager::remove_obstacleDidPassAvoidedMarkEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "ObstacleController")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_obstacleDidPassAvoidedMarkEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent
// Il2CppName: add_didHideAllBeatmapObjectsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<bool>*)>(&GlobalNamespace::BeatmapObjectManager::add_didHideAllBeatmapObjectsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "add_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent
// Il2CppName: remove_didHideAllBeatmapObjectsEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(System::Action_1<bool>*)>(&GlobalNamespace::BeatmapObjectManager::remove_didHideAllBeatmapObjectsEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "Boolean")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "remove_didHideAllBeatmapObjectsEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers
// Il2CppName: get_activeObstacleControllers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Collections::Generic::List_1<GlobalNamespace::ObstacleController*>* (GlobalNamespace::BeatmapObjectManager::*)()>(&GlobalNamespace::BeatmapObjectManager::get_activeObstacleControllers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "get_activeObstacleControllers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal
// Il2CppName: SpawnObstacleInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleController* (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleData*, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::SpawnObstacleInternal)> {
  static const MethodInfo* get() {
    static auto* obstacleData = &::il2cpp_utils::GetClassFromName("", "ObstacleData")->byval_arg;
    static auto* obstacleSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/ObstacleSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SpawnObstacleInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleData, obstacleSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal
// Il2CppName: SpawnBombNoteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::SpawnBombNoteInternal)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* noteSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SpawnBombNoteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, noteSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal
// Il2CppName: SpawnBasicNoteInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float, float)>(&GlobalNamespace::BeatmapObjectManager::SpawnBasicNoteInternal)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* noteSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cutDirectionAngleOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SpawnBasicNoteInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, noteSpawnData, rotation, cutDirectionAngleOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::DespawnInternal)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DespawnInternal
// Il2CppName: DespawnInternal
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::DespawnInternal)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DespawnInternal", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::get_spawnHidden
// Il2CppName: get_spawnHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::BeatmapObjectManager::*)()>(&GlobalNamespace::BeatmapObjectManager::get_spawnHidden)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "get_spawnHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::set_spawnHidden
// Il2CppName: set_spawnHidden
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::set_spawnHidden)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "set_spawnHidden", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnObstacle
// Il2CppName: SpawnObstacle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::ObstacleController* (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleData*, GlobalNamespace::BeatmapObjectSpawnMovementData::ObstacleSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::SpawnObstacle)> {
  static const MethodInfo* get() {
    static auto* obstacleData = &::il2cpp_utils::GetClassFromName("", "ObstacleData")->byval_arg;
    static auto* obstacleSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/ObstacleSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SpawnObstacle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleData, obstacleSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBombNote
// Il2CppName: SpawnBombNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float)>(&GlobalNamespace::BeatmapObjectManager::SpawnBombNote)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* noteSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SpawnBombNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, noteSpawnData, rotation});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SpawnBasicNote
// Il2CppName: SpawnBasicNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::NoteController* (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteData*, GlobalNamespace::BeatmapObjectSpawnMovementData::NoteSpawnData, float, float)>(&GlobalNamespace::BeatmapObjectManager::SpawnBasicNote)> {
  static const MethodInfo* get() {
    static auto* noteData = &::il2cpp_utils::GetClassFromName("", "NoteData")->byval_arg;
    static auto* noteSpawnData = &::il2cpp_utils::GetClassFromName("", "BeatmapObjectSpawnMovementData/NoteSpawnData")->byval_arg;
    static auto* rotation = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* cutDirectionAngleOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SpawnBasicNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteData, noteSpawnData, rotation, cutDirectionAngleOffset});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks
// Il2CppName: SetNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::SetNoteControllerEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SetNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks
// Il2CppName: RemoveNoteControllerEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::RemoveNoteControllerEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "RemoveNoteControllerEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks
// Il2CppName: SetObstacleEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::SetObstacleEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "SetObstacleEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks
// Il2CppName: RemoveObstacleEventCallbacks
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::RemoveObstacleEventCallbacks)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "RemoveObstacleEventCallbacks", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::Despawn)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::Despawn
// Il2CppName: Despawn
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::Despawn)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "Despawn", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump
// Il2CppName: HandleNoteControllerNoteDidStartJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidStartJump)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteDidStartJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed
// Il2CppName: HandleNoteControllerNoteWasMissed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasMissed)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteWasMissed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump
// Il2CppName: HandleNoteControllerNoteDidFinishJump
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidFinishJump)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteDidFinishJump", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve
// Il2CppName: HandleNoteControllerNoteDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteDidDissolve)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut
// Il2CppName: HandleNoteControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*, ByRef<GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::BeatmapObjectManager::HandleNoteControllerNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2
// Il2CppName: HandleObstaclePassedThreeQuartersOfMove2
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedThreeQuartersOfMove2)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstaclePassedThreeQuartersOfMove2", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark
// Il2CppName: HandleObstaclePassedAvoidedMark
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstaclePassedAvoidedMark)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstaclePassedAvoidedMark", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement
// Il2CppName: HandleObstacleFinishedMovement
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstacleFinishedMovement)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstacleFinishedMovement", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve
// Il2CppName: HandleObstacleDidDissolve
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::ObstacleController*)>(&GlobalNamespace::BeatmapObjectManager::HandleObstacleDidDissolve)> {
  static const MethodInfo* get() {
    static auto* obstacleController = &::il2cpp_utils::GetClassFromName("", "ObstacleController")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HandleObstacleDidDissolve", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{obstacleController});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects
// Il2CppName: InvokeDidHideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::InvokeDidHideAllBeatmapObjects)> {
  static const MethodInfo* get() {
    static auto* hide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "InvokeDidHideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::DissolveAllObjects
// Il2CppName: DissolveAllObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)()>(&GlobalNamespace::BeatmapObjectManager::DissolveAllObjects)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "DissolveAllObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects
// Il2CppName: HideAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::HideAllBeatmapObjects)> {
  static const MethodInfo* get() {
    static auto* hide = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "HideAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{hide});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects
// Il2CppName: PauseAllBeatmapObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(bool)>(&GlobalNamespace::BeatmapObjectManager::PauseAllBeatmapObjects)> {
  static const MethodInfo* get() {
    static auto* pause = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "PauseAllBeatmapObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{pause});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut
// Il2CppName: INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapObjectManager::*)(GlobalNamespace::NoteController*, ByRef<GlobalNamespace::NoteCutInfo>)>(&GlobalNamespace::BeatmapObjectManager::INoteControllerNoteWasCutEvent_HandleNoteControllerNoteWasCut)> {
  static const MethodInfo* get() {
    static auto* noteController = &::il2cpp_utils::GetClassFromName("", "NoteController")->byval_arg;
    static auto* noteCutInfo = &::il2cpp_utils::GetClassFromName("", "NoteCutInfo")->this_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapObjectManager*), "INoteControllerNoteWasCutEvent.HandleNoteControllerNoteWasCut", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{noteController, noteCutInfo});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapObjectManager::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
