// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: NamedPreset
  class NamedPreset;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::NamedPreset);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::NamedPreset*, "", "NamedPreset");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: NamedPreset
  // [TokenAttribute] Offset: FFFFFFFF
  class NamedPreset : public ::Il2CppObject {
    public:
    public:
    // [LocalizationKeyAttribute] Offset: 0x111CDEC
    // private System.String _presetNameLocalizationKey
    // Size: 0x8
    // Offset: 0x10
    ::StringW presetNameLocalizationKey;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Creating conversion operator: operator ::StringW
    constexpr operator ::StringW() const noexcept {
      return presetNameLocalizationKey;
    }
    // Get instance field reference: private System.String _presetNameLocalizationKey
    [[deprecated("Use field access instead!")]] ::StringW& dyn__presetNameLocalizationKey();
    // public System.String get_presetNameLocalizationKey()
    // Offset: 0x1506A8C
    ::StringW get_presetNameLocalizationKey();
    // public System.Void .ctor()
    // Offset: 0x1506A94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamedPreset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::NamedPreset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamedPreset*, creationType>()));
    }
  }; // NamedPreset
  #pragma pack(pop)
  static check_size<sizeof(NamedPreset), 16 + sizeof(::StringW)> __GlobalNamespace_NamedPresetSizeCheck;
  static_assert(sizeof(NamedPreset) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::NamedPreset::get_presetNameLocalizationKey
// Il2CppName: get_presetNameLocalizationKey
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::NamedPreset::*)()>(&GlobalNamespace::NamedPreset::get_presetNameLocalizationKey)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::NamedPreset*), "get_presetNameLocalizationKey", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::NamedPreset::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
