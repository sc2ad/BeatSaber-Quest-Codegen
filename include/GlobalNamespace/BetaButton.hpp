// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BetaButton
  class BetaButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BetaButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BetaButton*, "", "BetaButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: BetaButton
  // [TokenAttribute] Offset: FFFFFFFF
  class BetaButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    // Nested type: ::GlobalNamespace::BetaButton::$ButtonColorUpdate$d__6
    class $ButtonColorUpdate$d__6;
    public:
    // public UnityEngine.GameObject betaParent
    // Size: 0x8
    // Offset: 0x58
    ::UnityEngine::GameObject* betaParent;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x60
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Single buttonFadeTime
    // Size: 0x4
    // Offset: 0x64
    float buttonFadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.UI.Text messageText
    // Size: 0x8
    // Offset: 0x68
    ::UnityEngine::UI::Text* messageText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    public:
    // Get instance field reference: public UnityEngine.GameObject betaParent
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_betaParent();
    // Get instance field reference: public System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: public System.Single buttonFadeTime
    [[deprecated("Use field access instead!")]] float& dyn_buttonFadeTime();
    // Get instance field reference: public UnityEngine.UI.Text messageText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_messageText();
    // private System.Collections.IEnumerator ButtonColorUpdate()
    // Offset: 0xC5D5B4
    ::System::Collections::IEnumerator* ButtonColorUpdate();
    // public System.Void .ctor()
    // Offset: 0xC5D650
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BetaButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BetaButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BetaButton*, creationType>()));
    }
    // public override System.Void Start()
    // Offset: 0xC5D480
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::Start()
    void Start();
    // public override System.Void ButtonActivation()
    // Offset: 0xC5D4F0
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivation()
    void ButtonActivation();
  }; // BetaButton
  #pragma pack(pop)
  static check_size<sizeof(BetaButton), 104 + sizeof(::UnityEngine::UI::Text*)> __GlobalNamespace_BetaButtonSizeCheck;
  static_assert(sizeof(BetaButton) == 0x70);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BetaButton::ButtonColorUpdate
// Il2CppName: ButtonColorUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::BetaButton::*)()>(&GlobalNamespace::BetaButton::ButtonColorUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetaButton*), "ButtonColorUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetaButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BetaButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetaButton::*)()>(&GlobalNamespace::BetaButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetaButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BetaButton::ButtonActivation
// Il2CppName: ButtonActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BetaButton::*)()>(&GlobalNamespace::BetaButton::ButtonActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BetaButton*), "ButtonActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
