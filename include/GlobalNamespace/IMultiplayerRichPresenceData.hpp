// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: IRichPresenceData
#include "GlobalNamespace/IRichPresenceData.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: IMultiplayerRichPresenceData
  // [TokenAttribute] Offset: FFFFFFFF
  class IMultiplayerRichPresenceData/*, public GlobalNamespace::IRichPresenceData*/ {
    public:
    // Creating value type constructor for type: IMultiplayerRichPresenceData
    IMultiplayerRichPresenceData() noexcept {}
    // Creating interface conversion operator: operator GlobalNamespace::IRichPresenceData
    operator GlobalNamespace::IRichPresenceData() noexcept {
      return *reinterpret_cast<GlobalNamespace::IRichPresenceData*>(this);
    }
    // public System.String get_multiplayerSecret()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_multiplayerSecret();
    // public System.Void set_multiplayerSecret(System.String value)
    // Offset: 0xFFFFFFFF
    void set_multiplayerSecret(::Il2CppString* value);
    // public System.Boolean get_atMaxPartySize()
    // Offset: 0xFFFFFFFF
    bool get_atMaxPartySize();
    // public System.Void set_atMaxPartySize(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_atMaxPartySize(bool value);
    // public System.Boolean get_canInvite()
    // Offset: 0xFFFFFFFF
    bool get_canInvite();
    // public System.Void set_canInvite(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_canInvite(bool value);
    // public System.Boolean get_isJoinable()
    // Offset: 0xFFFFFFFF
    bool get_isJoinable();
  }; // IMultiplayerRichPresenceData
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::IMultiplayerRichPresenceData*, "", "IMultiplayerRichPresenceData");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::get_multiplayerSecret
// Il2CppName: get_multiplayerSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::Il2CppString* (GlobalNamespace::IMultiplayerRichPresenceData::*)()>(&GlobalNamespace::IMultiplayerRichPresenceData::get_multiplayerSecret)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "get_multiplayerSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::set_multiplayerSecret
// Il2CppName: set_multiplayerSecret
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IMultiplayerRichPresenceData::*)(::Il2CppString*)>(&GlobalNamespace::IMultiplayerRichPresenceData::set_multiplayerSecret)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "set_multiplayerSecret", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::get_atMaxPartySize
// Il2CppName: get_atMaxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::IMultiplayerRichPresenceData::*)()>(&GlobalNamespace::IMultiplayerRichPresenceData::get_atMaxPartySize)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "get_atMaxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::set_atMaxPartySize
// Il2CppName: set_atMaxPartySize
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IMultiplayerRichPresenceData::*)(bool)>(&GlobalNamespace::IMultiplayerRichPresenceData::set_atMaxPartySize)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "set_atMaxPartySize", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::get_canInvite
// Il2CppName: get_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::IMultiplayerRichPresenceData::*)()>(&GlobalNamespace::IMultiplayerRichPresenceData::get_canInvite)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "get_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::set_canInvite
// Il2CppName: set_canInvite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::IMultiplayerRichPresenceData::*)(bool)>(&GlobalNamespace::IMultiplayerRichPresenceData::set_canInvite)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "set_canInvite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::IMultiplayerRichPresenceData::get_isJoinable
// Il2CppName: get_isJoinable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::IMultiplayerRichPresenceData::*)()>(&GlobalNamespace::IMultiplayerRichPresenceData::get_isJoinable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::IMultiplayerRichPresenceData*), "get_isJoinable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
