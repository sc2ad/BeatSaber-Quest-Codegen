// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: DefaultEnvironmentEvents
  class DefaultEnvironmentEvents;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::DefaultEnvironmentEvents);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::DefaultEnvironmentEvents*, "", "DefaultEnvironmentEvents");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: DefaultEnvironmentEvents
  // [TokenAttribute] Offset: FFFFFFFF
  class DefaultEnvironmentEvents : public ::Il2CppObject {
    public:
    // Nested type: ::GlobalNamespace::DefaultEnvironmentEvents::BasicBeatmapEvent
    class BasicBeatmapEvent;
    // Nested type: ::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent
    class LightGroupEvent;
    public:
    // private DefaultEnvironmentEvents/BasicBeatmapEvent[] _basicBeatmapEvents
    // Size: 0x8
    // Offset: 0x10
    ::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::BasicBeatmapEvent*> basicBeatmapEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::BasicBeatmapEvent*>) == 0x8);
    // private DefaultEnvironmentEvents/LightGroupEvent[] _lightGroupEvents
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*> lightGroupEvents;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*>) == 0x8);
    public:
    // Get instance field reference: private DefaultEnvironmentEvents/BasicBeatmapEvent[] _basicBeatmapEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::BasicBeatmapEvent*>& dyn__basicBeatmapEvents();
    // Get instance field reference: private DefaultEnvironmentEvents/LightGroupEvent[] _lightGroupEvents
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*>& dyn__lightGroupEvents();
    // public DefaultEnvironmentEvents/BasicBeatmapEvent[] get_basicBeatmapEvents()
    // Offset: 0x14920E4
    ::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::BasicBeatmapEvent*> get_basicBeatmapEvents();
    // public DefaultEnvironmentEvents/LightGroupEvent[] get_lightGroupEvents()
    // Offset: 0x14920EC
    ::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*> get_lightGroupEvents();
    // public System.Boolean get_isEmpty()
    // Offset: 0x14920F4
    bool get_isEmpty();
    // public System.Void .ctor()
    // Offset: 0x149212C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static DefaultEnvironmentEvents* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::DefaultEnvironmentEvents::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<DefaultEnvironmentEvents*, creationType>()));
    }
  }; // DefaultEnvironmentEvents
  #pragma pack(pop)
  static check_size<sizeof(DefaultEnvironmentEvents), 24 + sizeof(::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*>)> __GlobalNamespace_DefaultEnvironmentEventsSizeCheck;
  static_assert(sizeof(DefaultEnvironmentEvents) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::get_basicBeatmapEvents
// Il2CppName: get_basicBeatmapEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::BasicBeatmapEvent*> (GlobalNamespace::DefaultEnvironmentEvents::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::get_basicBeatmapEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents*), "get_basicBeatmapEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::get_lightGroupEvents
// Il2CppName: get_lightGroupEvents
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::DefaultEnvironmentEvents::LightGroupEvent*> (GlobalNamespace::DefaultEnvironmentEvents::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::get_lightGroupEvents)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents*), "get_lightGroupEvents", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::get_isEmpty
// Il2CppName: get_isEmpty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::DefaultEnvironmentEvents::*)()>(&GlobalNamespace::DefaultEnvironmentEvents::get_isEmpty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::DefaultEnvironmentEvents*), "get_isEmpty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::DefaultEnvironmentEvents::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
