// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
// Including type: IBeatmapLevel
#include "GlobalNamespace/IBeatmapLevel.hpp"
// Including type: IAssetSongPreviewAudioClipProvider
#include "GlobalNamespace/IAssetSongPreviewAudioClipProvider.hpp"
// Including type: IAssetSongAudioClipProvider
#include "GlobalNamespace/IAssetSongAudioClipProvider.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IDifficultyBeatmapSet
  class IDifficultyBeatmapSet;
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
  // Forward declaring type: PreviewDifficultyBeatmapSet
  class PreviewDifficultyBeatmapSet;
  // Forward declaring type: IBeatmapLevelData
  class IBeatmapLevelData;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelSO
  class BeatmapLevelSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapLevelSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelSO*, "", "BeatmapLevelSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelSO : public ::GlobalNamespace::PersistentScriptableObject/*, public ::GlobalNamespace::IBeatmapLevel, public ::GlobalNamespace::IAssetSongPreviewAudioClipProvider, public ::GlobalNamespace::IAssetSongAudioClipProvider*/ {
    public:
    // Nested type: ::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet
    class DifficultyBeatmapSet;
    // Nested type: ::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmap
    class DifficultyBeatmap;
    // Nested type: ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult
    struct GetBeatmapLevelDataResult;
    // Nested type: ::GlobalNamespace::BeatmapLevelSO::$GetPreviewAudioClipAsync$d__65
    struct $GetPreviewAudioClipAsync$d__65;
    // Nested type: ::GlobalNamespace::BeatmapLevelSO::$GetCoverImageAsync$d__66
    struct $GetCoverImageAsync$d__66;
    // Nested type: ::GlobalNamespace::BeatmapLevelSO::$GetBeatmapLevelDataAsync$d__69
    struct $GetBeatmapLevelDataAsync$d__69;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BeatmapLevelSO/GetBeatmapLevelDataResult
    // [TokenAttribute] Offset: FFFFFFFF
    // [IsReadOnlyAttribute] Offset: FFFFFFFF
    struct GetBeatmapLevelDataResult/*, public ::System::ValueType*/ {
      public:
      // Nested type: ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result
      struct Result;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: BeatmapLevelSO/GetBeatmapLevelDataResult/Result
      // [TokenAttribute] Offset: FFFFFFFF
      struct Result/*, public ::System::Enum*/ {
        public:
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        public:
        // Creating value type constructor for type: Result
        constexpr Result(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator ::System::Enum
        operator ::System::Enum() noexcept {
          return *reinterpret_cast<::System::Enum*>(this);
        }
        // Creating interface conversion operator: i_Enum
        inline ::System::Enum* i_Enum() noexcept {
          return reinterpret_cast<::System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
        static constexpr const int OK = 0;
        // Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
        static ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_OK();
        // Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result OK
        static void _set_OK(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
        // static field const value: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
        static constexpr const int NotOwned = 1;
        // Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
        static ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_NotOwned();
        // Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result NotOwned
        static void _set_NotOwned(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
        // static field const value: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
        static constexpr const int Fail = 2;
        // Get static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
        static ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result _get_Fail();
        // Set static field: static public BeatmapLevelSO/GetBeatmapLevelDataResult/Result Fail
        static void _set_Fail(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result value);
        // Get instance field reference: public System.Int32 value__
        [[deprecated("Use field access instead!")]] int& dyn_value__();
      }; // BeatmapLevelSO/GetBeatmapLevelDataResult/Result
      #pragma pack(pop)
      static check_size<sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult::Result), 0 + sizeof(int)> __GlobalNamespace_BeatmapLevelSO_GetBeatmapLevelDataResult_ResultSizeCheck;
      static_assert(sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult::Result) == 0x4);
      public:
      // public readonly BeatmapLevelSO/GetBeatmapLevelDataResult/Result result
      // Size: 0x4
      // Offset: 0x0
      ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result) == 0x4);
      // Padding between fields: result and: beatmapLevelData
      char __padding0[0x4] = {};
      // public readonly IBeatmapLevelData beatmapLevelData
      // Size: 0x8
      // Offset: 0x8
      ::GlobalNamespace::IBeatmapLevelData* beatmapLevelData;
      // Field size check
      static_assert(sizeof(::GlobalNamespace::IBeatmapLevelData*) == 0x8);
      public:
      // Creating value type constructor for type: GetBeatmapLevelDataResult
      constexpr GetBeatmapLevelDataResult(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result_ = {}, ::GlobalNamespace::IBeatmapLevelData* beatmapLevelData_ = {}) noexcept : result{result_}, beatmapLevelData{beatmapLevelData_} {}
      // Creating interface conversion operator: operator ::System::ValueType
      operator ::System::ValueType() noexcept {
        return *reinterpret_cast<::System::ValueType*>(this);
      }
      // Creating interface conversion operator: i_ValueType
      inline ::System::ValueType* i_ValueType() noexcept {
        return reinterpret_cast<::System::ValueType*>(this);
      }
      // Get instance field reference: public readonly BeatmapLevelSO/GetBeatmapLevelDataResult/Result result
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result& dyn_result();
      // Get instance field reference: public readonly IBeatmapLevelData beatmapLevelData
      [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelData*& dyn_beatmapLevelData();
      // public System.Void .ctor(BeatmapLevelSO/GetBeatmapLevelDataResult/Result result, IBeatmapLevelData beatmapLevelData)
      // Offset: 0x1512EEC
      // ABORTED: conflicts with another method.  GetBeatmapLevelDataResult(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result result, ::GlobalNamespace::IBeatmapLevelData* beatmapLevelData);
    }; // BeatmapLevelSO/GetBeatmapLevelDataResult
    #pragma pack(pop)
    static check_size<sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult), 8 + sizeof(::GlobalNamespace::IBeatmapLevelData*)> __GlobalNamespace_BeatmapLevelSO_GetBeatmapLevelDataResultSizeCheck;
    static_assert(sizeof(BeatmapLevelSO::GetBeatmapLevelDataResult) == 0x10);
    public:
    // private System.String _levelID
    // Size: 0x8
    // Offset: 0x18
    ::StringW levelID;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _songName
    // Size: 0x8
    // Offset: 0x20
    ::StringW songName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _songSubName
    // Size: 0x8
    // Offset: 0x28
    ::StringW songSubName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _songAuthorName
    // Size: 0x8
    // Offset: 0x30
    ::StringW songAuthorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String _levelAuthorName
    // Size: 0x8
    // Offset: 0x38
    ::StringW levelAuthorName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private System.Single _beatsPerMinute
    // Size: 0x4
    // Offset: 0x48
    float beatsPerMinute;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _songTimeOffset
    // Size: 0x4
    // Offset: 0x4C
    float songTimeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shuffle
    // Size: 0x4
    // Offset: 0x50
    float shuffle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _shufflePeriod
    // Size: 0x4
    // Offset: 0x54
    float shufflePeriod;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previewStartTime
    // Size: 0x4
    // Offset: 0x58
    float previewStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _previewDuration
    // Size: 0x4
    // Offset: 0x5C
    float previewDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Sprite _coverImage
    // Size: 0x8
    // Offset: 0x60
    ::UnityEngine::Sprite* coverImage;
    // Field size check
    static_assert(sizeof(::UnityEngine::Sprite*) == 0x8);
    // private EnvironmentInfoSO _environmentInfo
    // Size: 0x8
    // Offset: 0x68
    ::GlobalNamespace::EnvironmentInfoSO* environmentInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    // Size: 0x8
    // Offset: 0x70
    ::GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // private BeatmapLevelSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x78
    ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*> difficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>) == 0x8);
    // public System.Boolean _ignore360MovementBeatmaps
    // Size: 0x1
    // Offset: 0x80
    bool ignore360MovementBeatmaps;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignore360MovementBeatmaps and: no360MovementDifficultyBeatmapSets
    char __padding16[0x7] = {};
    // private System.Collections.Generic.IReadOnlyList`1<BeatmapLevelSO/DifficultyBeatmapSet> _no360MovementDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x88
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>* no360MovementDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*) == 0x8);
    // private System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> _previewDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* previewDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*) == 0x8);
    // private System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> _no360MovementPreviewDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x98
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* no360MovementPreviewDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*) == 0x8);
    // private IBeatmapLevelData _beatmapLevelData
    // Size: 0x8
    // Offset: 0xA0
    ::GlobalNamespace::IBeatmapLevelData* beatmapLevelData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatmapLevelData*) == 0x8);
    // private BeatmapLevelSO/GetBeatmapLevelDataResult _getBeatmapLevelDataResult
    // Size: 0x10
    // Offset: 0xA8
    ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult getBeatmapLevelDataResult;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult) == 0x10);
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IBeatmapLevel
    operator ::GlobalNamespace::IBeatmapLevel() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IBeatmapLevel*>(this);
    }
    // Creating interface conversion operator: i_IBeatmapLevel
    inline ::GlobalNamespace::IBeatmapLevel* i_IBeatmapLevel() noexcept {
      return reinterpret_cast<::GlobalNamespace::IBeatmapLevel*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IAssetSongPreviewAudioClipProvider
    operator ::GlobalNamespace::IAssetSongPreviewAudioClipProvider() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IAssetSongPreviewAudioClipProvider*>(this);
    }
    // Creating interface conversion operator: i_IAssetSongPreviewAudioClipProvider
    inline ::GlobalNamespace::IAssetSongPreviewAudioClipProvider* i_IAssetSongPreviewAudioClipProvider() noexcept {
      return reinterpret_cast<::GlobalNamespace::IAssetSongPreviewAudioClipProvider*>(this);
    }
    // Creating interface conversion operator: operator ::GlobalNamespace::IAssetSongAudioClipProvider
    operator ::GlobalNamespace::IAssetSongAudioClipProvider() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IAssetSongAudioClipProvider*>(this);
    }
    // Creating interface conversion operator: i_IAssetSongAudioClipProvider
    inline ::GlobalNamespace::IAssetSongAudioClipProvider* i_IAssetSongAudioClipProvider() noexcept {
      return reinterpret_cast<::GlobalNamespace::IAssetSongAudioClipProvider*>(this);
    }
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.String _levelID
    [[deprecated("Use field access instead!")]] ::StringW& dyn__levelID();
    // Get instance field reference: private System.String _songName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__songName();
    // Get instance field reference: private System.String _songSubName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__songSubName();
    // Get instance field reference: private System.String _songAuthorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__songAuthorName();
    // Get instance field reference: private System.String _levelAuthorName
    [[deprecated("Use field access instead!")]] ::StringW& dyn__levelAuthorName();
    // Get instance field reference: private UnityEngine.AudioClip _audioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__audioClip();
    // Get instance field reference: private System.Single _beatsPerMinute
    [[deprecated("Use field access instead!")]] float& dyn__beatsPerMinute();
    // Get instance field reference: private System.Single _songTimeOffset
    [[deprecated("Use field access instead!")]] float& dyn__songTimeOffset();
    // Get instance field reference: private System.Single _shuffle
    [[deprecated("Use field access instead!")]] float& dyn__shuffle();
    // Get instance field reference: private System.Single _shufflePeriod
    [[deprecated("Use field access instead!")]] float& dyn__shufflePeriod();
    // Get instance field reference: private System.Single _previewStartTime
    [[deprecated("Use field access instead!")]] float& dyn__previewStartTime();
    // Get instance field reference: private System.Single _previewDuration
    [[deprecated("Use field access instead!")]] float& dyn__previewDuration();
    // Get instance field reference: private UnityEngine.Sprite _coverImage
    [[deprecated("Use field access instead!")]] ::UnityEngine::Sprite*& dyn__coverImage();
    // Get instance field reference: private EnvironmentInfoSO _environmentInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& dyn__environmentInfo();
    // Get instance field reference: private EnvironmentInfoSO _allDirectionsEnvironmentInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& dyn__allDirectionsEnvironmentInfo();
    // Get instance field reference: private BeatmapLevelSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>& dyn__difficultyBeatmapSets();
    // Get instance field reference: public System.Boolean _ignore360MovementBeatmaps
    [[deprecated("Use field access instead!")]] bool& dyn__ignore360MovementBeatmaps();
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<BeatmapLevelSO/DifficultyBeatmapSet> _no360MovementDifficultyBeatmapSets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>*& dyn__no360MovementDifficultyBeatmapSets();
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> _previewDifficultyBeatmapSets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*& dyn__previewDifficultyBeatmapSets();
    // Get instance field reference: private System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> _no360MovementPreviewDifficultyBeatmapSets
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>*& dyn__no360MovementPreviewDifficultyBeatmapSets();
    // Get instance field reference: private IBeatmapLevelData _beatmapLevelData
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelData*& dyn__beatmapLevelData();
    // Get instance field reference: private BeatmapLevelSO/GetBeatmapLevelDataResult _getBeatmapLevelDataResult
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult& dyn__getBeatmapLevelDataResult();
    // public System.String get_levelID()
    // Offset: 0x1511F40
    ::StringW get_levelID();
    // public System.String get_songName()
    // Offset: 0x1511F48
    ::StringW get_songName();
    // public System.String get_songSubName()
    // Offset: 0x1511F50
    ::StringW get_songSubName();
    // public System.String get_songAuthorName()
    // Offset: 0x1511F58
    ::StringW get_songAuthorName();
    // public System.String get_levelAuthorName()
    // Offset: 0x1511F60
    ::StringW get_levelAuthorName();
    // public System.Single get_beatsPerMinute()
    // Offset: 0x1511F68
    float get_beatsPerMinute();
    // public System.Single get_songTimeOffset()
    // Offset: 0x1511F70
    float get_songTimeOffset();
    // public System.Single get_shuffle()
    // Offset: 0x1511F78
    float get_shuffle();
    // public System.Single get_shufflePeriod()
    // Offset: 0x1511F80
    float get_shufflePeriod();
    // public System.Single get_previewStartTime()
    // Offset: 0x1511F88
    float get_previewStartTime();
    // public System.Single get_previewDuration()
    // Offset: 0x1511F90
    float get_previewDuration();
    // public UnityEngine.Sprite get_coverImage()
    // Offset: 0x1511F98
    ::UnityEngine::Sprite* get_coverImage();
    // public EnvironmentInfoSO get_environmentInfo()
    // Offset: 0x1511FA0
    ::GlobalNamespace::EnvironmentInfoSO* get_environmentInfo();
    // public EnvironmentInfoSO get_allDirectionsEnvironmentInfo()
    // Offset: 0x1511FA8
    ::GlobalNamespace::EnvironmentInfoSO* get_allDirectionsEnvironmentInfo();
    // public System.Collections.Generic.IReadOnlyList`1<IDifficultyBeatmapSet> get_difficultyBeatmapSets()
    // Offset: 0x1511FB0
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* get_difficultyBeatmapSets();
    // public System.Single get_songDuration()
    // Offset: 0x1511FC8
    float get_songDuration();
    // public System.Collections.Generic.IReadOnlyList`1<PreviewDifficultyBeatmapSet> get_previewDifficultyBeatmapSets()
    // Offset: 0x1511FE4
    ::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* get_previewDifficultyBeatmapSets();
    // public UnityEngine.AudioClip get_songPreviewAudioClip()
    // Offset: 0x1512000
    ::UnityEngine::AudioClip* get_songPreviewAudioClip();
    // public UnityEngine.AudioClip get_songAudioClip()
    // Offset: 0x1512008
    ::UnityEngine::AudioClip* get_songAudioClip();
    // public IBeatmapLevelData get_beatmapLevelData()
    // Offset: 0x15123F4
    ::GlobalNamespace::IBeatmapLevelData* get_beatmapLevelData();
    // public System.Void .ctor()
    // Offset: 0x1512C94
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelSO*, creationType>()));
    }
    // private System.Void InitData()
    // Offset: 0x1512038
    void InitData();
    // public System.Threading.Tasks.Task`1<UnityEngine.AudioClip> GetPreviewAudioClipAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15121AC
    ::System::Threading::Tasks::Task_1<::UnityEngine::AudioClip*>* GetPreviewAudioClipAsync(::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<UnityEngine.Sprite> GetCoverImageAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x15122D0
    ::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* GetCoverImageAsync(::System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<BeatmapLevelSO/GetBeatmapLevelDataResult> GetBeatmapLevelDataAsync(System.Threading.CancellationToken token)
    // Offset: 0x1512474
    ::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>* GetBeatmapLevelDataAsync(::System::Threading::CancellationToken token);
    // public IDifficultyBeatmap GetDifficultyBeatmap(BeatmapCharacteristicSO characteristic, BeatmapDifficulty difficulty)
    // Offset: 0x1512574
    ::GlobalNamespace::IDifficultyBeatmap* GetDifficultyBeatmap(::GlobalNamespace::BeatmapCharacteristicSO* characteristic, ::GlobalNamespace::BeatmapDifficulty difficulty);
    // public System.Void InitFull(System.String levelID, System.String songName, System.String songSubName, System.String songAuthorName, System.String levelAuthorName, UnityEngine.AudioClip audioClip, System.Single beatsPerMinute, System.Single songTimeOffset, System.Single shuffle, System.Single shufflePeriod, System.Single previewStartTime, System.Single previewDuration, UnityEngine.Sprite coverImage, EnvironmentInfoSO environmentInfo, EnvironmentInfoSO allDirectionsEnvironmentInfo, BeatmapLevelSO/DifficultyBeatmapSet[] difficultyBeatmapSets)
    // Offset: 0x1512C64
    void InitFull(::StringW levelID, ::StringW songName, ::StringW songSubName, ::StringW songAuthorName, ::StringW levelAuthorName, ::UnityEngine::AudioClip* audioClip, float beatsPerMinute, float songTimeOffset, float shuffle, float shufflePeriod, float previewStartTime, float previewDuration, ::UnityEngine::Sprite* coverImage, ::GlobalNamespace::EnvironmentInfoSO* environmentInfo, ::GlobalNamespace::EnvironmentInfoSO* allDirectionsEnvironmentInfo, ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*> difficultyBeatmapSets);
    // protected override System.Void OnEnable()
    // Offset: 0x1512010
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::OnEnable()
    void OnEnable();
  }; // BeatmapLevelSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelSO), 168 + sizeof(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult)> __GlobalNamespace_BeatmapLevelSOSizeCheck;
  static_assert(sizeof(BeatmapLevelSO) == 0xB8);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult, "", "BeatmapLevelSO/GetBeatmapLevelDataResult");
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult::Result, "", "BeatmapLevelSO/GetBeatmapLevelDataResult/Result");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_levelID
// Il2CppName: get_levelID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_levelID)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_levelID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songName
// Il2CppName: get_songName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songSubName
// Il2CppName: get_songSubName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songSubName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songSubName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songAuthorName
// Il2CppName: get_songAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songAuthorName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_levelAuthorName
// Il2CppName: get_levelAuthorName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_levelAuthorName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_levelAuthorName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_beatsPerMinute
// Il2CppName: get_beatsPerMinute
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_beatsPerMinute)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_beatsPerMinute", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songTimeOffset
// Il2CppName: get_songTimeOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songTimeOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songTimeOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_shuffle
// Il2CppName: get_shuffle
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_shuffle)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_shuffle", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_shufflePeriod
// Il2CppName: get_shufflePeriod
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_shufflePeriod)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_shufflePeriod", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewStartTime
// Il2CppName: get_previewStartTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewStartTime)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewStartTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewDuration
// Il2CppName: get_previewDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_coverImage
// Il2CppName: get_coverImage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Sprite* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_coverImage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_coverImage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_environmentInfo
// Il2CppName: get_environmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_environmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_environmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_allDirectionsEnvironmentInfo
// Il2CppName: get_allDirectionsEnvironmentInfo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::EnvironmentInfoSO* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_allDirectionsEnvironmentInfo)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_allDirectionsEnvironmentInfo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_difficultyBeatmapSets
// Il2CppName: get_difficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::IDifficultyBeatmapSet*>* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_difficultyBeatmapSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_difficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songDuration
// Il2CppName: get_songDuration
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songDuration)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songDuration", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_previewDifficultyBeatmapSets
// Il2CppName: get_previewDifficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::GlobalNamespace::PreviewDifficultyBeatmapSet*>* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_previewDifficultyBeatmapSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_previewDifficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songPreviewAudioClip
// Il2CppName: get_songPreviewAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songPreviewAudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songPreviewAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_songAudioClip
// Il2CppName: get_songAudioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_songAudioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_songAudioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::get_beatmapLevelData
// Il2CppName: get_beatmapLevelData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IBeatmapLevelData* (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::get_beatmapLevelData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "get_beatmapLevelData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::InitData
// Il2CppName: InitData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::InitData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "InitData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetPreviewAudioClipAsync
// Il2CppName: GetPreviewAudioClipAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::UnityEngine::AudioClip*>* (GlobalNamespace::BeatmapLevelSO::*)(::System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelSO::GetPreviewAudioClipAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetPreviewAudioClipAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetCoverImageAsync
// Il2CppName: GetCoverImageAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::UnityEngine::Sprite*>* (GlobalNamespace::BeatmapLevelSO::*)(::System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelSO::GetCoverImageAsync)> {
  static const MethodInfo* get() {
    static auto* cancellationToken = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetCoverImageAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{cancellationToken});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataAsync
// Il2CppName: GetBeatmapLevelDataAsync
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Threading::Tasks::Task_1<::GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataResult>* (GlobalNamespace::BeatmapLevelSO::*)(::System::Threading::CancellationToken)>(&GlobalNamespace::BeatmapLevelSO::GetBeatmapLevelDataAsync)> {
  static const MethodInfo* get() {
    static auto* token = &::il2cpp_utils::GetClassFromName("System.Threading", "CancellationToken")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetBeatmapLevelDataAsync", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{token});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::GetDifficultyBeatmap
// Il2CppName: GetDifficultyBeatmap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IDifficultyBeatmap* (GlobalNamespace::BeatmapLevelSO::*)(::GlobalNamespace::BeatmapCharacteristicSO*, ::GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::BeatmapLevelSO::GetDifficultyBeatmap)> {
  static const MethodInfo* get() {
    static auto* characteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    static auto* difficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "GetDifficultyBeatmap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{characteristic, difficulty});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::InitFull
// Il2CppName: InitFull
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapLevelSO::*)(::StringW, ::StringW, ::StringW, ::StringW, ::StringW, ::UnityEngine::AudioClip*, float, float, float, float, float, float, ::UnityEngine::Sprite*, ::GlobalNamespace::EnvironmentInfoSO*, ::GlobalNamespace::EnvironmentInfoSO*, ::ArrayW<::GlobalNamespace::BeatmapLevelSO::DifficultyBeatmapSet*>)>(&GlobalNamespace::BeatmapLevelSO::InitFull)> {
  static const MethodInfo* get() {
    static auto* levelID = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songSubName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* songAuthorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* levelAuthorName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* audioClip = &::il2cpp_utils::GetClassFromName("UnityEngine", "AudioClip")->byval_arg;
    static auto* beatsPerMinute = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* songTimeOffset = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shuffle = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* shufflePeriod = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* previewStartTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* previewDuration = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    static auto* coverImage = &::il2cpp_utils::GetClassFromName("UnityEngine", "Sprite")->byval_arg;
    static auto* environmentInfo = &::il2cpp_utils::GetClassFromName("", "EnvironmentInfoSO")->byval_arg;
    static auto* allDirectionsEnvironmentInfo = &::il2cpp_utils::GetClassFromName("", "EnvironmentInfoSO")->byval_arg;
    static auto* difficultyBeatmapSets = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("", "BeatmapLevelSO/DifficultyBeatmapSet"), 1)->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "InitFull", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelID, songName, songSubName, songAuthorName, levelAuthorName, audioClip, beatsPerMinute, songTimeOffset, shuffle, shufflePeriod, previewStartTime, previewDuration, coverImage, environmentInfo, allDirectionsEnvironmentInfo, difficultyBeatmapSets});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelSO::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::BeatmapLevelSO::*)()>(&GlobalNamespace::BeatmapLevelSO::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelSO*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
