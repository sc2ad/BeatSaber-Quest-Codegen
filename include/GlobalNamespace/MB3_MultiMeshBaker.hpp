// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: MB3_MeshBakerCommon
#include "GlobalNamespace/MB3_MeshBakerCommon.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: DigitalOpus::MB::Core
namespace DigitalOpus::MB::Core {
  // Forward declaring type: MB3_MultiMeshCombiner
  class MB3_MultiMeshCombiner;
  // Skipping declaration: MB3_MeshCombiner because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MB3_MultiMeshBaker
  class MB3_MultiMeshBaker;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MB3_MultiMeshBaker);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MB3_MultiMeshBaker*, "", "MB3_MultiMeshBaker");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: MB3_MultiMeshBaker
  // [TokenAttribute] Offset: FFFFFFFF
  class MB3_MultiMeshBaker : public ::GlobalNamespace::MB3_MeshBakerCommon {
    public:
    public:
    // protected DigitalOpus.MB.Core.MB3_MultiMeshCombiner _meshCombiner
    // Size: 0x8
    // Offset: 0x58
    ::DigitalOpus::MB::Core::MB3_MultiMeshCombiner* meshCombiner;
    // Field size check
    static_assert(sizeof(::DigitalOpus::MB::Core::MB3_MultiMeshCombiner*) == 0x8);
    public:
    // Get instance field reference: protected DigitalOpus.MB.Core.MB3_MultiMeshCombiner _meshCombiner
    [[deprecated("Use field access instead!")]] ::DigitalOpus::MB::Core::MB3_MultiMeshCombiner*& dyn__meshCombiner();
    // public System.Void OnDestroy()
    // Offset: 0x1B5FBB4
    void OnDestroy();
    // public override DigitalOpus.MB.Core.MB3_MeshCombiner get_meshCombiner()
    // Offset: 0x1B5F89C
    // Implemented from: MB3_MeshBakerCommon
    // Base method: DigitalOpus.MB.Core.MB3_MeshCombiner MB3_MeshBakerCommon::get_meshCombiner()
    ::DigitalOpus::MB::Core::MB3_MeshCombiner* get_meshCombiner();
    // public System.Void .ctor()
    // Offset: 0x1B5FBD8
    // Implemented from: MB3_MeshBakerCommon
    // Base method: System.Void MB3_MeshBakerCommon::.ctor()
    // Base method: System.Void MB3_MeshBakerRoot::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MB3_MultiMeshBaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MB3_MultiMeshBaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MB3_MultiMeshBaker*, creationType>()));
    }
    // public override System.Boolean AddDeleteGameObjects(UnityEngine.GameObject[] gos, UnityEngine.GameObject[] deleteGOs, System.Boolean disableRendererInSource)
    // Offset: 0x1B5F8A4
    // Implemented from: MB3_MeshBakerCommon
    // Base method: System.Boolean MB3_MeshBakerCommon::AddDeleteGameObjects(UnityEngine.GameObject[] gos, UnityEngine.GameObject[] deleteGOs, System.Boolean disableRendererInSource)
    bool AddDeleteGameObjects(::ArrayW<::UnityEngine::GameObject*> gos, ::ArrayW<::UnityEngine::GameObject*> deleteGOs, bool disableRendererInSource);
    // public override System.Boolean AddDeleteGameObjectsByID(UnityEngine.GameObject[] gos, System.Int32[] deleteGOs, System.Boolean disableRendererInSource)
    // Offset: 0x1B5FA2C
    // Implemented from: MB3_MeshBakerCommon
    // Base method: System.Boolean MB3_MeshBakerCommon::AddDeleteGameObjectsByID(UnityEngine.GameObject[] gos, System.Int32[] deleteGOs, System.Boolean disableRendererInSource)
    bool AddDeleteGameObjectsByID(::ArrayW<::UnityEngine::GameObject*> gos, ::ArrayW<int> deleteGOs, bool disableRendererInSource);
  }; // MB3_MultiMeshBaker
  #pragma pack(pop)
  static check_size<sizeof(MB3_MultiMeshBaker), 88 + sizeof(::DigitalOpus::MB::Core::MB3_MultiMeshCombiner*)> __GlobalNamespace_MB3_MultiMeshBakerSizeCheck;
  static_assert(sizeof(MB3_MultiMeshBaker) == 0x60);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MB3_MultiMeshBaker::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MB3_MultiMeshBaker::*)()>(&GlobalNamespace::MB3_MultiMeshBaker::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_MultiMeshBaker*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_MultiMeshBaker::get_meshCombiner
// Il2CppName: get_meshCombiner
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::DigitalOpus::MB::Core::MB3_MeshCombiner* (GlobalNamespace::MB3_MultiMeshBaker::*)()>(&GlobalNamespace::MB3_MultiMeshBaker::get_meshCombiner)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_MultiMeshBaker*), "get_meshCombiner", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_MultiMeshBaker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MB3_MultiMeshBaker::AddDeleteGameObjects
// Il2CppName: AddDeleteGameObjects
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_MultiMeshBaker::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<::UnityEngine::GameObject*>, bool)>(&GlobalNamespace::MB3_MultiMeshBaker::AddDeleteGameObjects)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* deleteGOs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* disableRendererInSource = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_MultiMeshBaker*), "AddDeleteGameObjects", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, deleteGOs, disableRendererInSource});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MB3_MultiMeshBaker::AddDeleteGameObjectsByID
// Il2CppName: AddDeleteGameObjectsByID
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::MB3_MultiMeshBaker::*)(::ArrayW<::UnityEngine::GameObject*>, ::ArrayW<int>, bool)>(&GlobalNamespace::MB3_MultiMeshBaker::AddDeleteGameObjectsByID)> {
  static const MethodInfo* get() {
    static auto* gos = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("UnityEngine", "GameObject"), 1)->byval_arg;
    static auto* deleteGOs = &il2cpp_functions::array_class_get(::il2cpp_utils::GetClassFromName("System", "Int32"), 1)->byval_arg;
    static auto* disableRendererInSource = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MB3_MultiMeshBaker*), "AddDeleteGameObjectsByID", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{gos, deleteGOs, disableRendererInSource});
  }
};
