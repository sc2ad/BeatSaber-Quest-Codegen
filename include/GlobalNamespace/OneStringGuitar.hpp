// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: ActionableItem
#include "GlobalNamespace/ActionableItem.hpp"
// Including type: UnityEngine.RaycastHit
#include "UnityEngine/RaycastHit.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaTriggerColliderHandIndicator
  class GorillaTriggerColliderHandIndicator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: OneStringGuitar
  class OneStringGuitar;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::OneStringGuitar);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OneStringGuitar*, "", "OneStringGuitar");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1DC
  #pragma pack(push, 1)
  // Autogenerated type: OneStringGuitar
  // [TokenAttribute] Offset: FFFFFFFF
  class OneStringGuitar : public ::GlobalNamespace::ActionableItem {
    public:
    public:
    // public UnityEngine.Vector3 chestOffset
    // Size: 0xC
    // Offset: 0x58
    ::UnityEngine::Vector3 chestOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion holdingOffsetRotation
    // Size: 0x10
    // Offset: 0x64
    ::UnityEngine::Quaternion holdingOffsetRotation;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Quaternion chestRotationOffset
    // Size: 0x10
    // Offset: 0x74
    ::UnityEngine::Quaternion chestRotationOffset;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // Padding between fields: chestRotationOffset and: chestCollider
    char __padding2[0x4] = {};
    // public UnityEngine.Collider chestCollider
    // Size: 0x8
    // Offset: 0x88
    ::UnityEngine::Collider* chestCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public System.Single lerpValue
    // Size: 0x4
    // Offset: 0x90
    float lerpValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: lerpValue and: audioSource
    char __padding4[0x4] = {};
    // public UnityEngine.AudioSource audioSource
    // Size: 0x8
    // Offset: 0x98
    ::UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioSource*) == 0x8);
    // public UnityEngine.Transform parentHand
    // Size: 0x8
    // Offset: 0xA0
    ::UnityEngine::Transform* parentHand;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // public System.Single unsnapDistance
    // Size: 0x4
    // Offset: 0xA8
    float unsnapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single snapDistance
    // Size: 0x4
    // Offset: 0xAC
    float snapDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 startPosition
    // Size: 0xC
    // Offset: 0xB0
    ::UnityEngine::Vector3 startPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion startQuat
    // Size: 0x10
    // Offset: 0xBC
    ::UnityEngine::Quaternion startQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public UnityEngine.Vector3 reverseGripPosition
    // Size: 0xC
    // Offset: 0xCC
    ::UnityEngine::Vector3 reverseGripPosition;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion reverseGripQuat
    // Size: 0x10
    // Offset: 0xD8
    ::UnityEngine::Quaternion reverseGripQuat;
    // Field size check
    static_assert(sizeof(::UnityEngine::Quaternion) == 0x10);
    // public System.Single angleLerpSnap
    // Size: 0x4
    // Offset: 0xE8
    float angleLerpSnap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single vectorLerpSnap
    // Size: 0x4
    // Offset: 0xEC
    float vectorLerpSnap;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean angleSnapped
    // Size: 0x1
    // Offset: 0xF0
    bool angleSnapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean positionSnapped
    // Size: 0x1
    // Offset: 0xF1
    bool positionSnapped;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: positionSnapped and: chestTouch
    char __padding16[0x6] = {};
    // public UnityEngine.Transform chestTouch
    // Size: 0x8
    // Offset: 0xF8
    ::UnityEngine::Transform* chestTouch;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private System.Int32 collidersHitCount
    // Size: 0x4
    // Offset: 0x100
    int collidersHitCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: collidersHitCount and: collidersHit
    char __padding18[0x4] = {};
    // private UnityEngine.Collider[] collidersHit
    // Size: 0x8
    // Offset: 0x108
    ::ArrayW<::UnityEngine::Collider*> collidersHit;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private UnityEngine.RaycastHit[] raycastHits
    // Size: 0x8
    // Offset: 0x110
    ::ArrayW<::UnityEngine::RaycastHit> raycastHits;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::RaycastHit>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.RaycastHit> raycastHitList
    // Size: 0x8
    // Offset: 0x118
    ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>* raycastHitList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*) == 0x8);
    // private UnityEngine.RaycastHit nullHit
    // Size: 0x2C
    // Offset: 0x120
    ::UnityEngine::RaycastHit nullHit;
    // Field size check
    static_assert(sizeof(::UnityEngine::RaycastHit) == 0x2C);
    // Padding between fields: nullHit and: collidersToBeIn
    char __padding22[0x4] = {};
    // public UnityEngine.Collider[] collidersToBeIn
    // Size: 0x8
    // Offset: 0x150
    ::ArrayW<::UnityEngine::Collider*> collidersToBeIn;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public UnityEngine.LayerMask interactableMask
    // Size: 0x4
    // Offset: 0x158
    ::UnityEngine::LayerMask interactableMask;
    // Field size check
    static_assert(sizeof(::UnityEngine::LayerMask) == 0x4);
    // public System.Int32 currentFretIndex
    // Size: 0x4
    // Offset: 0x15C
    int currentFretIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 lastFretIndex
    // Size: 0x4
    // Offset: 0x160
    int lastFretIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: lastFretIndex and: frets
    char __padding26[0x4] = {};
    // public UnityEngine.Collider[] frets
    // Size: 0x8
    // Offset: 0x168
    ::ArrayW<::UnityEngine::Collider*> frets;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.Collider> fretsList
    // Size: 0x8
    // Offset: 0x170
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* fretsList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public UnityEngine.AudioClip[] audioClips
    // Size: 0x8
    // Offset: 0x178
    ::ArrayW<::UnityEngine::AudioClip*> audioClips;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::AudioClip*>) == 0x8);
    // private GorillaTriggerColliderHandIndicator leftHandIndicator
    // Size: 0x8
    // Offset: 0x180
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* leftHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator rightHandIndicator
    // Size: 0x8
    // Offset: 0x188
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* rightHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator fretHandIndicator
    // Size: 0x8
    // Offset: 0x190
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* fretHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private GorillaTriggerColliderHandIndicator strumHandIndicator
    // Size: 0x8
    // Offset: 0x198
    ::GlobalNamespace::GorillaTriggerColliderHandIndicator* strumHandIndicator;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaTriggerColliderHandIndicator*) == 0x8);
    // private System.Single sphereRadius
    // Size: 0x4
    // Offset: 0x1A0
    float sphereRadius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean anyHit
    // Size: 0x1
    // Offset: 0x1A4
    bool anyHit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean handIn
    // Size: 0x1
    // Offset: 0x1A5
    bool handIn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: handIn and: spherecastSweep
    char __padding36[0x2] = {};
    // private UnityEngine.Vector3 spherecastSweep
    // Size: 0xC
    // Offset: 0x1A8
    ::UnityEngine::Vector3 spherecastSweep;
    // Field size check
    static_assert(sizeof(::UnityEngine::Vector3) == 0xC);
    // Padding between fields: spherecastSweep and: strumCollider
    char __padding37[0x4] = {};
    // public UnityEngine.Collider strumCollider
    // Size: 0x8
    // Offset: 0x1B8
    ::UnityEngine::Collider* strumCollider;
    // Field size check
    static_assert(sizeof(::UnityEngine::Collider*) == 0x8);
    // public System.Single maxVolume
    // Size: 0x4
    // Offset: 0x1C0
    float maxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single minVolume
    // Size: 0x4
    // Offset: 0x1C4
    float minVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single maxVelocity
    // Size: 0x4
    // Offset: 0x1C8
    float maxVelocity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxVelocity and: strumList
    char __padding41[0x4] = {};
    // private System.Collections.Generic.List`1<UnityEngine.Collider> strumList
    // Size: 0x8
    // Offset: 0x1D0
    ::System::Collections::Generic::List_1<::UnityEngine::Collider*>* strumList;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::UnityEngine::Collider*>*) == 0x8);
    // public System.Int32 selfInstrumentIndex
    // Size: 0x4
    // Offset: 0x1D8
    int selfInstrumentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Get instance field reference: public UnityEngine.Vector3 chestOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_chestOffset();
    // Get instance field reference: public UnityEngine.Quaternion holdingOffsetRotation
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_holdingOffsetRotation();
    // Get instance field reference: public UnityEngine.Quaternion chestRotationOffset
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_chestRotationOffset();
    // Get instance field reference: public UnityEngine.Collider chestCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_chestCollider();
    // Get instance field reference: public System.Single lerpValue
    [[deprecated("Use field access instead!")]] float& dyn_lerpValue();
    // Get instance field reference: public UnityEngine.AudioSource audioSource
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioSource*& dyn_audioSource();
    // Get instance field reference: public UnityEngine.Transform parentHand
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_parentHand();
    // Get instance field reference: public System.Single unsnapDistance
    [[deprecated("Use field access instead!")]] float& dyn_unsnapDistance();
    // Get instance field reference: public System.Single snapDistance
    [[deprecated("Use field access instead!")]] float& dyn_snapDistance();
    // Get instance field reference: public UnityEngine.Vector3 startPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_startPosition();
    // Get instance field reference: public UnityEngine.Quaternion startQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_startQuat();
    // Get instance field reference: public UnityEngine.Vector3 reverseGripPosition
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_reverseGripPosition();
    // Get instance field reference: public UnityEngine.Quaternion reverseGripQuat
    [[deprecated("Use field access instead!")]] ::UnityEngine::Quaternion& dyn_reverseGripQuat();
    // Get instance field reference: public System.Single angleLerpSnap
    [[deprecated("Use field access instead!")]] float& dyn_angleLerpSnap();
    // Get instance field reference: public System.Single vectorLerpSnap
    [[deprecated("Use field access instead!")]] float& dyn_vectorLerpSnap();
    // Get instance field reference: private System.Boolean angleSnapped
    [[deprecated("Use field access instead!")]] bool& dyn_angleSnapped();
    // Get instance field reference: private System.Boolean positionSnapped
    [[deprecated("Use field access instead!")]] bool& dyn_positionSnapped();
    // Get instance field reference: public UnityEngine.Transform chestTouch
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn_chestTouch();
    // Get instance field reference: private System.Int32 collidersHitCount
    [[deprecated("Use field access instead!")]] int& dyn_collidersHitCount();
    // Get instance field reference: private UnityEngine.Collider[] collidersHit
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_collidersHit();
    // Get instance field reference: private UnityEngine.RaycastHit[] raycastHits
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::RaycastHit>& dyn_raycastHits();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.RaycastHit> raycastHitList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::RaycastHit>*& dyn_raycastHitList();
    // Get instance field reference: private UnityEngine.RaycastHit nullHit
    [[deprecated("Use field access instead!")]] ::UnityEngine::RaycastHit& dyn_nullHit();
    // Get instance field reference: public UnityEngine.Collider[] collidersToBeIn
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_collidersToBeIn();
    // Get instance field reference: public UnityEngine.LayerMask interactableMask
    [[deprecated("Use field access instead!")]] ::UnityEngine::LayerMask& dyn_interactableMask();
    // Get instance field reference: public System.Int32 currentFretIndex
    [[deprecated("Use field access instead!")]] int& dyn_currentFretIndex();
    // Get instance field reference: public System.Int32 lastFretIndex
    [[deprecated("Use field access instead!")]] int& dyn_lastFretIndex();
    // Get instance field reference: public UnityEngine.Collider[] frets
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_frets();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> fretsList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_fretsList();
    // Get instance field reference: public UnityEngine.AudioClip[] audioClips
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::AudioClip*>& dyn_audioClips();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator leftHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_leftHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator rightHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_rightHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator fretHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_fretHandIndicator();
    // Get instance field reference: private GorillaTriggerColliderHandIndicator strumHandIndicator
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaTriggerColliderHandIndicator*& dyn_strumHandIndicator();
    // Get instance field reference: private System.Single sphereRadius
    [[deprecated("Use field access instead!")]] float& dyn_sphereRadius();
    // Get instance field reference: private System.Boolean anyHit
    [[deprecated("Use field access instead!")]] bool& dyn_anyHit();
    // Get instance field reference: private System.Boolean handIn
    [[deprecated("Use field access instead!")]] bool& dyn_handIn();
    // Get instance field reference: private UnityEngine.Vector3 spherecastSweep
    [[deprecated("Use field access instead!")]] ::UnityEngine::Vector3& dyn_spherecastSweep();
    // Get instance field reference: public UnityEngine.Collider strumCollider
    [[deprecated("Use field access instead!")]] ::UnityEngine::Collider*& dyn_strumCollider();
    // Get instance field reference: public System.Single maxVolume
    [[deprecated("Use field access instead!")]] float& dyn_maxVolume();
    // Get instance field reference: public System.Single minVolume
    [[deprecated("Use field access instead!")]] float& dyn_minVolume();
    // Get instance field reference: public System.Single maxVelocity
    [[deprecated("Use field access instead!")]] float& dyn_maxVelocity();
    // Get instance field reference: private System.Collections.Generic.List`1<UnityEngine.Collider> strumList
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::UnityEngine::Collider*>*& dyn_strumList();
    // Get instance field reference: public System.Int32 selfInstrumentIndex
    [[deprecated("Use field access instead!")]] int& dyn_selfInstrumentIndex();
    // private System.Void Start()
    // Offset: 0xCBEEB4
    void Start();
    // private System.Void LateUpdate()
    // Offset: 0xCBF178
    void LateUpdate();
    // private System.Boolean Unsnap()
    // Offset: 0xCBFC8C
    bool Unsnap();
    // private System.Void CheckFretFinger(UnityEngine.Transform finger)
    // Offset: 0xCBFD90
    void CheckFretFinger(::UnityEngine::Transform* finger);
    // public System.Void UpdateNonPlayingPosition(UnityEngine.Vector3 positionTarget, UnityEngine.Quaternion rotationTarget)
    // Offset: 0xCBF968
    void UpdateNonPlayingPosition(::UnityEngine::Vector3 positionTarget, ::UnityEngine::Quaternion rotationTarget);
    // public System.Void GenerateVectorOffset()
    // Offset: 0xCC0100
    void GenerateVectorOffset();
    // public System.Void GenerateReverseGripOffset()
    // Offset: 0xCC0298
    void GenerateReverseGripOffset();
    // public System.Void GenerateClubOffset()
    // Offset: 0xCC02F4
    void GenerateClubOffset();
    // public System.Void .ctor()
    // Offset: 0xCC0378
    // Implemented from: ActionableItem
    // Base method: System.Void ActionableItem::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OneStringGuitar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::OneStringGuitar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OneStringGuitar*, creationType>()));
    }
    // public override System.Void PlayNote(System.Int32 note, System.Single volume)
    // Offset: 0xCC0008
    // Implemented from: ActionableItem
    // Base method: System.Void ActionableItem::PlayNote(System.Int32 note, System.Single volume)
    void PlayNote(int note, float volume);
    // public override System.Boolean CanDeactivate()
    // Offset: 0xCC00A8
    // Implemented from: ActionableItem
    // Base method: System.Boolean ActionableItem::CanDeactivate()
    bool CanDeactivate();
    // public override System.Boolean CanActivate()
    // Offset: 0xCC00B8
    // Implemented from: ActionableItem
    // Base method: System.Boolean ActionableItem::CanActivate()
    bool CanActivate();
    // public override System.Void OnActivate()
    // Offset: 0xCC00C8
    // Implemented from: ActionableItem
    // Base method: System.Void ActionableItem::OnActivate()
    void OnActivate();
    // public override System.Void StateChange()
    // Offset: 0xCC0350
    // Implemented from: ActionableItem
    // Base method: System.Void ActionableItem::StateChange()
    void StateChange();
  }; // OneStringGuitar
  #pragma pack(pop)
  static check_size<sizeof(OneStringGuitar), 472 + sizeof(int)> __GlobalNamespace_OneStringGuitarSizeCheck;
  static_assert(sizeof(OneStringGuitar) == 0x1DC);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::LateUpdate
// Il2CppName: LateUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::LateUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "LateUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::Unsnap
// Il2CppName: Unsnap
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::Unsnap)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "Unsnap", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::CheckFretFinger
// Il2CppName: CheckFretFinger
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)(::UnityEngine::Transform*)>(&GlobalNamespace::OneStringGuitar::CheckFretFinger)> {
  static const MethodInfo* get() {
    static auto* finger = &::il2cpp_utils::GetClassFromName("UnityEngine", "Transform")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "CheckFretFinger", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{finger});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::UpdateNonPlayingPosition
// Il2CppName: UpdateNonPlayingPosition
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)(::UnityEngine::Vector3, ::UnityEngine::Quaternion)>(&GlobalNamespace::OneStringGuitar::UpdateNonPlayingPosition)> {
  static const MethodInfo* get() {
    static auto* positionTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Vector3")->byval_arg;
    static auto* rotationTarget = &::il2cpp_utils::GetClassFromName("UnityEngine", "Quaternion")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "UpdateNonPlayingPosition", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{positionTarget, rotationTarget});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateVectorOffset
// Il2CppName: GenerateVectorOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateVectorOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateVectorOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateReverseGripOffset
// Il2CppName: GenerateReverseGripOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateReverseGripOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateReverseGripOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::GenerateClubOffset
// Il2CppName: GenerateClubOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::GenerateClubOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "GenerateClubOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::PlayNote
// Il2CppName: PlayNote
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)(int, float)>(&GlobalNamespace::OneStringGuitar::PlayNote)> {
  static const MethodInfo* get() {
    static auto* note = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    static auto* volume = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "PlayNote", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{note, volume});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::CanDeactivate
// Il2CppName: CanDeactivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::CanDeactivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "CanDeactivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::CanActivate
// Il2CppName: CanActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::CanActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "CanActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::OnActivate
// Il2CppName: OnActivate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::OnActivate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "OnActivate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::OneStringGuitar::StateChange
// Il2CppName: StateChange
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::OneStringGuitar::*)()>(&GlobalNamespace::OneStringGuitar::StateChange)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::OneStringGuitar*), "StateChange", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
