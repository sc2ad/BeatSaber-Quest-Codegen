// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyBlockController
  class MaterialPropertyBlockController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MaterialPropertyValuesSetter
  class MaterialPropertyValuesSetter;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MaterialPropertyValuesSetter);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MaterialPropertyValuesSetter*, "", "MaterialPropertyValuesSetter");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: MaterialPropertyValuesSetter
  // [TokenAttribute] Offset: FFFFFFFF
  class MaterialPropertyValuesSetter : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MaterialPropertyValuesSetter::PropertyValuePairBase
    class PropertyValuePairBase;
    // Nested type: ::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair
    class PropertyNameFloatValuePair;
    // Nested type: ::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair
    class PropertyNameIntValuePair;
    // Nested type: ::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair
    class PropertyNameVectorValuePair;
    // Nested type: ::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair
    class PropertyNameColorValuePair;
    public:
    // private MaterialPropertyBlockController _materialPropertyBlockController
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MaterialPropertyBlockController* materialPropertyBlockController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MaterialPropertyBlockController*) == 0x8);
    // private MaterialPropertyValuesSetter/PropertyNameFloatValuePair[] _floats
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*> floats;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*>) == 0x8);
    // private MaterialPropertyValuesSetter/PropertyNameVectorValuePair[] _vectors
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*> vectors;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*>) == 0x8);
    // private MaterialPropertyValuesSetter/PropertyNameColorValuePair[] _colors
    // Size: 0x8
    // Offset: 0x30
    ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*> colors;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*>) == 0x8);
    // private MaterialPropertyValuesSetter/PropertyNameIntValuePair[] _ints
    // Size: 0x8
    // Offset: 0x38
    ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*> ints;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private MaterialPropertyBlockController _materialPropertyBlockController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MaterialPropertyBlockController*& dyn__materialPropertyBlockController();
    // Get instance field reference: private MaterialPropertyValuesSetter/PropertyNameFloatValuePair[] _floats
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameFloatValuePair*>& dyn__floats();
    // Get instance field reference: private MaterialPropertyValuesSetter/PropertyNameVectorValuePair[] _vectors
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameVectorValuePair*>& dyn__vectors();
    // Get instance field reference: private MaterialPropertyValuesSetter/PropertyNameColorValuePair[] _colors
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameColorValuePair*>& dyn__colors();
    // Get instance field reference: private MaterialPropertyValuesSetter/PropertyNameIntValuePair[] _ints
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>& dyn__ints();
    // public System.Void .ctor()
    // Offset: 0x1CC1074
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialPropertyValuesSetter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MaterialPropertyValuesSetter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialPropertyValuesSetter*, creationType>()));
    }
    // protected System.Void Start()
    // Offset: 0x1CC0C48
    void Start();
    // protected System.Void OnValidate()
    // Offset: 0x1CC0FAC
    void OnValidate();
    // private System.Void RefreshPropertyIds()
    // Offset: 0x1CC0C6C
    void RefreshPropertyIds();
    // private System.Void ApplyParams()
    // Offset: 0x1CC0DD8
    void ApplyParams();
  }; // MaterialPropertyValuesSetter
  #pragma pack(pop)
  static check_size<sizeof(MaterialPropertyValuesSetter), 56 + sizeof(::ArrayW<::GlobalNamespace::MaterialPropertyValuesSetter::PropertyNameIntValuePair*>)> __GlobalNamespace_MaterialPropertyValuesSetterSizeCheck;
  static_assert(sizeof(MaterialPropertyValuesSetter) == 0x40);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyValuesSetter::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyValuesSetter::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialPropertyValuesSetter::*)()>(&GlobalNamespace::MaterialPropertyValuesSetter::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialPropertyValuesSetter*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyValuesSetter::OnValidate
// Il2CppName: OnValidate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialPropertyValuesSetter::*)()>(&GlobalNamespace::MaterialPropertyValuesSetter::OnValidate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialPropertyValuesSetter*), "OnValidate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds
// Il2CppName: RefreshPropertyIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialPropertyValuesSetter::*)()>(&GlobalNamespace::MaterialPropertyValuesSetter::RefreshPropertyIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialPropertyValuesSetter*), "RefreshPropertyIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams
// Il2CppName: ApplyParams
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MaterialPropertyValuesSetter::*)()>(&GlobalNamespace::MaterialPropertyValuesSetter::ApplyParams)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MaterialPropertyValuesSetter*), "ApplyParams", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
