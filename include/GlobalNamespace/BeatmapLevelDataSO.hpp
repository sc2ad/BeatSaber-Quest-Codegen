// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: BeatmapLevelDataSO
  class BeatmapLevelDataSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::BeatmapLevelDataSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::BeatmapLevelDataSO*, "", "BeatmapLevelDataSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelDataSO
  // [TokenAttribute] Offset: FFFFFFFF
  class BeatmapLevelDataSO : public ::GlobalNamespace::PersistentScriptableObject {
    public:
    // Nested type: ::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet
    class DifficultyBeatmapSet;
    public:
    // private UnityEngine.AudioClip _audioClip
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::AudioClip* audioClip;
    // Field size check
    static_assert(sizeof(::UnityEngine::AudioClip*) == 0x8);
    // private BeatmapLevelDataSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x20
    ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*> difficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>) == 0x8);
    // private BeatmapLevelDataSO/DifficultyBeatmapSet[] _no360MovementDifficultyBeatmapSets
    // Size: 0x8
    // Offset: 0x28
    ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*> no360MovementDifficultyBeatmapSets;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.AudioClip _audioClip
    [[deprecated("Use field access instead!")]] ::UnityEngine::AudioClip*& dyn__audioClip();
    // Get instance field reference: private BeatmapLevelDataSO/DifficultyBeatmapSet[] _difficultyBeatmapSets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>& dyn__difficultyBeatmapSets();
    // Get instance field reference: private BeatmapLevelDataSO/DifficultyBeatmapSet[] _no360MovementDifficultyBeatmapSets
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>& dyn__no360MovementDifficultyBeatmapSets();
    // public UnityEngine.AudioClip get_audioClip()
    // Offset: 0x150F8EC
    ::UnityEngine::AudioClip* get_audioClip();
    // public BeatmapLevelDataSO/DifficultyBeatmapSet[] get_difficultyBeatmapSets()
    // Offset: 0x150F8F4
    ::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*> get_difficultyBeatmapSets();
    // public System.Void .ctor()
    // Offset: 0x150F8FC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelDataSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::BeatmapLevelDataSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelDataSO*, creationType>()));
    }
  }; // BeatmapLevelDataSO
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelDataSO), 40 + sizeof(::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*>)> __GlobalNamespace_BeatmapLevelDataSOSizeCheck;
  static_assert(sizeof(BeatmapLevelDataSO) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataSO::get_audioClip
// Il2CppName: get_audioClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::AudioClip* (GlobalNamespace::BeatmapLevelDataSO::*)()>(&GlobalNamespace::BeatmapLevelDataSO::get_audioClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelDataSO*), "get_audioClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataSO::get_difficultyBeatmapSets
// Il2CppName: get_difficultyBeatmapSets
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::GlobalNamespace::BeatmapLevelDataSO::DifficultyBeatmapSet*> (GlobalNamespace::BeatmapLevelDataSO::*)()>(&GlobalNamespace::BeatmapLevelDataSO::get_difficultyBeatmapSets)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::BeatmapLevelDataSO*), "get_difficultyBeatmapSets", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::BeatmapLevelDataSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
