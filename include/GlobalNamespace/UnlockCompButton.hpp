// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: GorillaPressableButton
#include "GlobalNamespace/GorillaPressableButton.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: UnlockCompButton
  class UnlockCompButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::UnlockCompButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::UnlockCompButton*, "", "UnlockCompButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: UnlockCompButton
  // [TokenAttribute] Offset: FFFFFFFF
  class UnlockCompButton : public ::GlobalNamespace::GorillaPressableButton {
    public:
    public:
    // public System.String gameMode
    // Size: 0x8
    // Offset: 0x58
    ::StringW gameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean initialized
    // Size: 0x1
    // Offset: 0x60
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String gameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameMode();
    // Get instance field reference: private System.Boolean initialized
    [[deprecated("Use field access instead!")]] bool& dyn_initialized();
    // public System.Void Update()
    // Offset: 0xCFB300
    void Update();
    // public System.Void .ctor()
    // Offset: 0xCFB490
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnlockCompButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::UnlockCompButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnlockCompButton*, creationType>()));
    }
    // public override System.Void Start()
    // Offset: 0xCFB2F8
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::Start()
    void Start();
    // public override System.Void ButtonActivation()
    // Offset: 0xCFB3F0
    // Implemented from: GorillaPressableButton
    // Base method: System.Void GorillaPressableButton::ButtonActivation()
    void ButtonActivation();
  }; // UnlockCompButton
  #pragma pack(pop)
  static check_size<sizeof(UnlockCompButton), 96 + sizeof(bool)> __GlobalNamespace_UnlockCompButtonSizeCheck;
  static_assert(sizeof(UnlockCompButton) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::UnlockCompButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnlockCompButton::*)()>(&GlobalNamespace::UnlockCompButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnlockCompButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnlockCompButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::UnlockCompButton::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnlockCompButton::*)()>(&GlobalNamespace::UnlockCompButton::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnlockCompButton*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::UnlockCompButton::ButtonActivation
// Il2CppName: ButtonActivation
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::UnlockCompButton::*)()>(&GlobalNamespace::UnlockCompButton::ButtonActivation)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::UnlockCompButton*), "ButtonActivation", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
