// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: VRPlatformSDK
#include "GlobalNamespace/VRPlatformSDK.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ActivateOnPlatform
  class ActivateOnPlatform;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ActivateOnPlatform);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ActivateOnPlatform*, "", "ActivateOnPlatform");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: ActivateOnPlatform
  // [TokenAttribute] Offset: FFFFFFFF
  class ActivateOnPlatform : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // private VRPlatformSDK _vrPlatformSdk
    // Size: 0x4
    // Offset: 0x18
    ::GlobalNamespace::VRPlatformSDK vrPlatformSdk;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::VRPlatformSDK) == 0x4);
    // Padding between fields: vrPlatformSdk and: vrPlatformHelper
    char __padding0[0x4] = {};
    // [InjectAttribute] Offset: 0x10F54F0
    // private readonly IVRPlatformHelper _vrPlatformHelper
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IVRPlatformHelper* vrPlatformHelper;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IVRPlatformHelper*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private VRPlatformSDK _vrPlatformSdk
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::VRPlatformSDK& dyn__vrPlatformSdk();
    // Get instance field reference: private readonly IVRPlatformHelper _vrPlatformHelper
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IVRPlatformHelper*& dyn__vrPlatformHelper();
    // public System.Void .ctor()
    // Offset: 0x1631534
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActivateOnPlatform* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ActivateOnPlatform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActivateOnPlatform*, creationType>()));
    }
    // private System.Void Awake()
    // Offset: 0x163144C
    void Awake();
  }; // ActivateOnPlatform
  #pragma pack(pop)
  static check_size<sizeof(ActivateOnPlatform), 32 + sizeof(::GlobalNamespace::IVRPlatformHelper*)> __GlobalNamespace_ActivateOnPlatformSizeCheck;
  static_assert(sizeof(ActivateOnPlatform) == 0x28);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ActivateOnPlatform::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ActivateOnPlatform::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::ActivateOnPlatform::*)()>(&GlobalNamespace::ActivateOnPlatform::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ActivateOnPlatform*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
