// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PosesRecordingInfoSaveData
#include "GlobalNamespace/PosesRecordingInfoSaveData.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*, "", "PosesRecordingInfoSaveData/ExternalCameraCalibrationSaveData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: PosesRecordingInfoSaveData/ExternalCameraCalibrationSaveData
  // [TokenAttribute] Offset: FFFFFFFF
  class PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData : public ::Il2CppObject {
    public:
    public:
    // private System.Single _fieldOfVision
    // Size: 0x4
    // Offset: 0x10
    float fieldOfVision;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _nearClip
    // Size: 0x4
    // Offset: 0x14
    float nearClip;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _farClip
    // Size: 0x4
    // Offset: 0x18
    float farClip;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _hmdOffset
    // Size: 0x4
    // Offset: 0x1C
    float hmdOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _nearOffset
    // Size: 0x4
    // Offset: 0x20
    float nearOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _fieldOfVision
    [[deprecated("Use field access instead!")]] float& dyn__fieldOfVision();
    // Get instance field reference: private System.Single _nearClip
    [[deprecated("Use field access instead!")]] float& dyn__nearClip();
    // Get instance field reference: private System.Single _farClip
    [[deprecated("Use field access instead!")]] float& dyn__farClip();
    // Get instance field reference: private System.Single _hmdOffset
    [[deprecated("Use field access instead!")]] float& dyn__hmdOffset();
    // Get instance field reference: private System.Single _nearOffset
    [[deprecated("Use field access instead!")]] float& dyn__nearOffset();
    // public System.Single get_fieldOfVision()
    // Offset: 0x13681E8
    float get_fieldOfVision();
    // public System.Single get_nearClip()
    // Offset: 0x13681F0
    float get_nearClip();
    // public System.Single get_farClip()
    // Offset: 0x13681F8
    float get_farClip();
    // public System.Single get_hmdOffset()
    // Offset: 0x1368200
    float get_hmdOffset();
    // public System.Single get_nearOffset()
    // Offset: 0x1368208
    float get_nearOffset();
    // public System.Void .ctor(System.Single fieldOfVision, System.Single nearClip, System.Single farClip, System.Single hmdOffset, System.Single nearOffset)
    // Offset: 0x1368210
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData* New_ctor(float fieldOfVision, float nearClip, float farClip, float hmdOffset, float nearOffset) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*, creationType>(fieldOfVision, nearClip, farClip, hmdOffset, nearOffset)));
    }
  }; // PosesRecordingInfoSaveData/ExternalCameraCalibrationSaveData
  #pragma pack(pop)
  static check_size<sizeof(PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData), 32 + sizeof(float)> __GlobalNamespace_PosesRecordingInfoSaveData_ExternalCameraCalibrationSaveDataSizeCheck;
  static_assert(sizeof(PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData) == 0x24);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_fieldOfVision
// Il2CppName: get_fieldOfVision
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::*)()>(&GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_fieldOfVision)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*), "get_fieldOfVision", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_nearClip
// Il2CppName: get_nearClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::*)()>(&GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_nearClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*), "get_nearClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_farClip
// Il2CppName: get_farClip
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::*)()>(&GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_farClip)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*), "get_farClip", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_hmdOffset
// Il2CppName: get_hmdOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::*)()>(&GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_hmdOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*), "get_hmdOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_nearOffset
// Il2CppName: get_nearOffset
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::*)()>(&GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::get_nearOffset)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData*), "get_nearOffset", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PosesRecordingInfoSaveData::ExternalCameraCalibrationSaveData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
