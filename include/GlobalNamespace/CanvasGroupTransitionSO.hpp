// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BaseTransitionSO
#include "GlobalNamespace/BaseTransitionSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CanvasGroupTransitionSO
  class CanvasGroupTransitionSO;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CanvasGroupTransitionSO);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CanvasGroupTransitionSO*, "", "CanvasGroupTransitionSO");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: CanvasGroupTransitionSO
  // [TokenAttribute] Offset: FFFFFFFF
  class CanvasGroupTransitionSO : public ::GlobalNamespace::BaseTransitionSO {
    public:
    public:
    // private System.Single _normalAlpha
    // Size: 0x4
    // Offset: 0x20
    float normalAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _highlightedAlpha
    // Size: 0x4
    // Offset: 0x24
    float highlightedAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _pressedAlpha
    // Size: 0x4
    // Offset: 0x28
    float pressedAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _disabledAlpha
    // Size: 0x4
    // Offset: 0x2C
    float disabledAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _selectedAlpha
    // Size: 0x4
    // Offset: 0x30
    float selectedAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _selectedAndHighlightedAlpha
    // Size: 0x4
    // Offset: 0x34
    float selectedAndHighlightedAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Get instance field reference: private System.Single _normalAlpha
    [[deprecated("Use field access instead!")]] float& dyn__normalAlpha();
    // Get instance field reference: private System.Single _highlightedAlpha
    [[deprecated("Use field access instead!")]] float& dyn__highlightedAlpha();
    // Get instance field reference: private System.Single _pressedAlpha
    [[deprecated("Use field access instead!")]] float& dyn__pressedAlpha();
    // Get instance field reference: private System.Single _disabledAlpha
    [[deprecated("Use field access instead!")]] float& dyn__disabledAlpha();
    // Get instance field reference: private System.Single _selectedAlpha
    [[deprecated("Use field access instead!")]] float& dyn__selectedAlpha();
    // Get instance field reference: private System.Single _selectedAndHighlightedAlpha
    [[deprecated("Use field access instead!")]] float& dyn__selectedAndHighlightedAlpha();
    // public System.Single get_normalAlpha()
    // Offset: 0x13F6D4C
    float get_normalAlpha();
    // public System.Single get_highlightedAlpha()
    // Offset: 0x13F6D54
    float get_highlightedAlpha();
    // public System.Single get_pressedAlpha()
    // Offset: 0x13F6D5C
    float get_pressedAlpha();
    // public System.Single get_disabledAlpha()
    // Offset: 0x13F6D64
    float get_disabledAlpha();
    // public System.Single get_selectedAlpha()
    // Offset: 0x13F6D6C
    float get_selectedAlpha();
    // public System.Single get_selectedAndHighlightedAlpha()
    // Offset: 0x13F6D74
    float get_selectedAndHighlightedAlpha();
    // public System.Void .ctor()
    // Offset: 0x13F6D7C
    // Implemented from: BaseTransitionSO
    // Base method: System.Void BaseTransitionSO::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CanvasGroupTransitionSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CanvasGroupTransitionSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CanvasGroupTransitionSO*, creationType>()));
    }
  }; // CanvasGroupTransitionSO
  #pragma pack(pop)
  static check_size<sizeof(CanvasGroupTransitionSO), 52 + sizeof(float)> __GlobalNamespace_CanvasGroupTransitionSOSizeCheck;
  static_assert(sizeof(CanvasGroupTransitionSO) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::get_normalAlpha
// Il2CppName: get_normalAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CanvasGroupTransitionSO::*)()>(&GlobalNamespace::CanvasGroupTransitionSO::get_normalAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CanvasGroupTransitionSO*), "get_normalAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::get_highlightedAlpha
// Il2CppName: get_highlightedAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CanvasGroupTransitionSO::*)()>(&GlobalNamespace::CanvasGroupTransitionSO::get_highlightedAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CanvasGroupTransitionSO*), "get_highlightedAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::get_pressedAlpha
// Il2CppName: get_pressedAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CanvasGroupTransitionSO::*)()>(&GlobalNamespace::CanvasGroupTransitionSO::get_pressedAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CanvasGroupTransitionSO*), "get_pressedAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::get_disabledAlpha
// Il2CppName: get_disabledAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CanvasGroupTransitionSO::*)()>(&GlobalNamespace::CanvasGroupTransitionSO::get_disabledAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CanvasGroupTransitionSO*), "get_disabledAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::get_selectedAlpha
// Il2CppName: get_selectedAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CanvasGroupTransitionSO::*)()>(&GlobalNamespace::CanvasGroupTransitionSO::get_selectedAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CanvasGroupTransitionSO*), "get_selectedAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::get_selectedAndHighlightedAlpha
// Il2CppName: get_selectedAndHighlightedAlpha
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CanvasGroupTransitionSO::*)()>(&GlobalNamespace::CanvasGroupTransitionSO::get_selectedAndHighlightedAlpha)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CanvasGroupTransitionSO*), "get_selectedAndHighlightedAlpha", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CanvasGroupTransitionSO::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
