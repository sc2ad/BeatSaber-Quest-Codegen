// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Collider
  class Collider;
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: AddCollidersToParticleSystemTriggers
  class AddCollidersToParticleSystemTriggers;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::AddCollidersToParticleSystemTriggers);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::AddCollidersToParticleSystemTriggers*, "", "AddCollidersToParticleSystemTriggers");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: AddCollidersToParticleSystemTriggers
  // [TokenAttribute] Offset: FFFFFFFF
  class AddCollidersToParticleSystemTriggers : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.Collider[] collidersToAdd
    // Size: 0x8
    // Offset: 0x18
    ::ArrayW<::UnityEngine::Collider*> collidersToAdd;
    // Field size check
    static_assert(sizeof(::ArrayW<::UnityEngine::Collider*>) == 0x8);
    // public UnityEngine.ParticleSystem particleSystemToUpdate
    // Size: 0x8
    // Offset: 0x20
    ::UnityEngine::ParticleSystem* particleSystemToUpdate;
    // Field size check
    static_assert(sizeof(::UnityEngine::ParticleSystem*) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x28
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x2C
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.Collider[] collidersToAdd
    [[deprecated("Use field access instead!")]] ::ArrayW<::UnityEngine::Collider*>& dyn_collidersToAdd();
    // Get instance field reference: public UnityEngine.ParticleSystem particleSystemToUpdate
    [[deprecated("Use field access instead!")]] ::UnityEngine::ParticleSystem*& dyn_particleSystemToUpdate();
    // Get instance field reference: private System.Int32 count
    [[deprecated("Use field access instead!")]] int& dyn_count();
    // Get instance field reference: private System.Int32 index
    [[deprecated("Use field access instead!")]] int& dyn_index();
    // public System.Void .ctor()
    // Offset: 0xC5D478
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AddCollidersToParticleSystemTriggers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::AddCollidersToParticleSystemTriggers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AddCollidersToParticleSystemTriggers*, creationType>()));
    }
    // private System.Void Update()
    // Offset: 0xC5D2BC
    void Update();
  }; // AddCollidersToParticleSystemTriggers
  #pragma pack(pop)
  static check_size<sizeof(AddCollidersToParticleSystemTriggers), 44 + sizeof(int)> __GlobalNamespace_AddCollidersToParticleSystemTriggersSizeCheck;
  static_assert(sizeof(AddCollidersToParticleSystemTriggers) == 0x30);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::AddCollidersToParticleSystemTriggers::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::AddCollidersToParticleSystemTriggers::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::AddCollidersToParticleSystemTriggers::*)()>(&GlobalNamespace::AddCollidersToParticleSystemTriggers::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::AddCollidersToParticleSystemTriggers*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
