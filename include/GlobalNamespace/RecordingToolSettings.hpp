// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: ObjectsMovementRecorder/Mode
#include "GlobalNamespace/ObjectsMovementRecorder.hpp"
// Including type: ObjectsMovementRecorder/CameraView
// Already included the same include: GlobalNamespace/ObjectsMovementRecorder.hpp
// Including type: PlaybackRenderer
#include "GlobalNamespace/PlaybackRenderer.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: EnvironmentTypeSO
  class EnvironmentTypeSO;
  // Forward declaring type: EnvironmentInfoSO
  class EnvironmentInfoSO;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: RecordingToolSettings
  class RecordingToolSettings;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::RecordingToolSettings);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::RecordingToolSettings*, "", "RecordingToolSettings");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: RecordingToolSettings
  // [TokenAttribute] Offset: FFFFFFFF
  class RecordingToolSettings : public ::Il2CppObject {
    public:
    public:
    // public System.String gameMode
    // Size: 0x8
    // Offset: 0x10
    ::StringW gameMode;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public IBeatmapLevelPack pack
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::IBeatmapLevelPack* pack;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IBeatmapLevelPack*) == 0x8);
    // public IPreviewBeatmapLevel level
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::IPreviewBeatmapLevel* level;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IPreviewBeatmapLevel*) == 0x8);
    // public BeatmapDifficulty difficulty
    // Size: 0x4
    // Offset: 0x28
    ::GlobalNamespace::BeatmapDifficulty difficulty;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDifficulty) == 0x4);
    // Padding between fields: difficulty and: characteristic
    char __padding3[0x4] = {};
    // public BeatmapCharacteristicSO characteristic
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::BeatmapCharacteristicSO* characteristic;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicSO*) == 0x8);
    // public System.Boolean runLevel
    // Size: 0x1
    // Offset: 0x38
    bool runLevel;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: runLevel and: recordingMode
    char __padding5[0x3] = {};
    // public ObjectsMovementRecorder/Mode recordingMode
    // Size: 0x4
    // Offset: 0x3C
    ::GlobalNamespace::ObjectsMovementRecorder::Mode recordingMode;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::Mode) == 0x4);
    // public System.String recordingPath
    // Size: 0x8
    // Offset: 0x40
    ::StringW recordingPath;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public ObjectsMovementRecorder/CameraView cameraView
    // Size: 0x4
    // Offset: 0x48
    ::GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ObjectsMovementRecorder::CameraView) == 0x4);
    // public System.Boolean addDateTimeSuffixToRecordingName
    // Size: 0x1
    // Offset: 0x4C
    bool addDateTimeSuffixToRecordingName;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean screenshotRecording
    // Size: 0x1
    // Offset: 0x4D
    bool screenshotRecording;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: screenshotRecording and: screenshotWidth
    char __padding10[0x2] = {};
    // public System.Int32 screenshotWidth
    // Size: 0x4
    // Offset: 0x50
    int screenshotWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 screenshotHeight
    // Size: 0x4
    // Offset: 0x54
    int screenshotHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 framerate
    // Size: 0x4
    // Offset: 0x58
    int framerate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: framerate and: playbackScreenshots
    char __padding13[0x4] = {};
    // public PlaybackRenderer/PlaybackScreenshot[] playbackScreenshots
    // Size: 0x8
    // Offset: 0x60
    ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> playbackScreenshots;
    // Field size check
    static_assert(sizeof(::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>) == 0x8);
    // public System.Boolean practice
    // Size: 0x1
    // Offset: 0x68
    bool practice;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: practice and: startSongTime
    char __padding15[0x3] = {};
    // public System.Single startSongTime
    // Size: 0x4
    // Offset: 0x6C
    float startSongTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single songSpeedMultiplier
    // Size: 0x4
    // Offset: 0x70
    float songSpeedMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean overrideEnvironments
    // Size: 0x1
    // Offset: 0x74
    bool overrideEnvironments;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: overrideEnvironments and: environmentType
    char __padding18[0x3] = {};
    // public EnvironmentTypeSO environmentType
    // Size: 0x8
    // Offset: 0x78
    ::GlobalNamespace::EnvironmentTypeSO* environmentType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentTypeSO*) == 0x8);
    // public EnvironmentInfoSO environmentInfo
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::EnvironmentInfoSO* environmentInfo;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::EnvironmentInfoSO*) == 0x8);
    // public System.Boolean saveToOldFormat
    // Size: 0x1
    // Offset: 0x88
    bool saveToOldFormat;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: public System.String gameMode
    [[deprecated("Use field access instead!")]] ::StringW& dyn_gameMode();
    // Get instance field reference: public IBeatmapLevelPack pack
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IBeatmapLevelPack*& dyn_pack();
    // Get instance field reference: public IPreviewBeatmapLevel level
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IPreviewBeatmapLevel*& dyn_level();
    // Get instance field reference: public BeatmapDifficulty difficulty
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& dyn_difficulty();
    // Get instance field reference: public BeatmapCharacteristicSO characteristic
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& dyn_characteristic();
    // Get instance field reference: public System.Boolean runLevel
    [[deprecated("Use field access instead!")]] bool& dyn_runLevel();
    // Get instance field reference: public ObjectsMovementRecorder/Mode recordingMode
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ObjectsMovementRecorder::Mode& dyn_recordingMode();
    // Get instance field reference: public System.String recordingPath
    [[deprecated("Use field access instead!")]] ::StringW& dyn_recordingPath();
    // Get instance field reference: public ObjectsMovementRecorder/CameraView cameraView
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ObjectsMovementRecorder::CameraView& dyn_cameraView();
    // Get instance field reference: public System.Boolean addDateTimeSuffixToRecordingName
    [[deprecated("Use field access instead!")]] bool& dyn_addDateTimeSuffixToRecordingName();
    // Get instance field reference: public System.Boolean screenshotRecording
    [[deprecated("Use field access instead!")]] bool& dyn_screenshotRecording();
    // Get instance field reference: public System.Int32 screenshotWidth
    [[deprecated("Use field access instead!")]] int& dyn_screenshotWidth();
    // Get instance field reference: public System.Int32 screenshotHeight
    [[deprecated("Use field access instead!")]] int& dyn_screenshotHeight();
    // Get instance field reference: public System.Int32 framerate
    [[deprecated("Use field access instead!")]] int& dyn_framerate();
    // Get instance field reference: public PlaybackRenderer/PlaybackScreenshot[] playbackScreenshots
    [[deprecated("Use field access instead!")]] ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*>& dyn_playbackScreenshots();
    // Get instance field reference: public System.Boolean practice
    [[deprecated("Use field access instead!")]] bool& dyn_practice();
    // Get instance field reference: public System.Single startSongTime
    [[deprecated("Use field access instead!")]] float& dyn_startSongTime();
    // Get instance field reference: public System.Single songSpeedMultiplier
    [[deprecated("Use field access instead!")]] float& dyn_songSpeedMultiplier();
    // Get instance field reference: public System.Boolean overrideEnvironments
    [[deprecated("Use field access instead!")]] bool& dyn_overrideEnvironments();
    // Get instance field reference: public EnvironmentTypeSO environmentType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentTypeSO*& dyn_environmentType();
    // Get instance field reference: public EnvironmentInfoSO environmentInfo
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::EnvironmentInfoSO*& dyn_environmentInfo();
    // Get instance field reference: public System.Boolean saveToOldFormat
    [[deprecated("Use field access instead!")]] bool& dyn_saveToOldFormat();
    // public System.Void .ctor(System.String gameMode, IBeatmapLevelPack pack, IPreviewBeatmapLevel level, BeatmapDifficulty difficulty, BeatmapCharacteristicSO characteristic, System.Boolean runLevel, ObjectsMovementRecorder/Mode recordingMode, System.String recordingPath, ObjectsMovementRecorder/CameraView cameraView, System.Boolean addDateTimeSuffixToRecordingName, System.Boolean screenshotRecording, System.Int32 screenshotWidth, System.Int32 screenshotHeight, System.Int32 framerate, PlaybackRenderer/PlaybackScreenshot[] playbackScreenshots, System.Boolean practice, System.Single startSongTime, System.Single songSpeedMultiplier, System.Boolean overrideEnvironments, EnvironmentTypeSO environmentType, EnvironmentInfoSO environmentInfo, System.Boolean saveToOldFormat)
    // Offset: 0x144F330
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RecordingToolSettings* New_ctor(::StringW gameMode, ::GlobalNamespace::IBeatmapLevelPack* pack, ::GlobalNamespace::IPreviewBeatmapLevel* level, ::GlobalNamespace::BeatmapDifficulty difficulty, ::GlobalNamespace::BeatmapCharacteristicSO* characteristic, bool runLevel, ::GlobalNamespace::ObjectsMovementRecorder::Mode recordingMode, ::StringW recordingPath, ::GlobalNamespace::ObjectsMovementRecorder::CameraView cameraView, bool addDateTimeSuffixToRecordingName, bool screenshotRecording, int screenshotWidth, int screenshotHeight, int framerate, ::ArrayW<::GlobalNamespace::PlaybackRenderer::PlaybackScreenshot*> playbackScreenshots, bool practice, float startSongTime, float songSpeedMultiplier, bool overrideEnvironments, ::GlobalNamespace::EnvironmentTypeSO* environmentType, ::GlobalNamespace::EnvironmentInfoSO* environmentInfo, bool saveToOldFormat) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::RecordingToolSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RecordingToolSettings*, creationType>(gameMode, pack, level, difficulty, characteristic, runLevel, recordingMode, recordingPath, cameraView, addDateTimeSuffixToRecordingName, screenshotRecording, screenshotWidth, screenshotHeight, framerate, playbackScreenshots, practice, startSongTime, songSpeedMultiplier, overrideEnvironments, environmentType, environmentInfo, saveToOldFormat)));
    }
    // public override System.String ToString()
    // Offset: 0x144F488
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::StringW ToString();
  }; // RecordingToolSettings
  #pragma pack(pop)
  static check_size<sizeof(RecordingToolSettings), 136 + sizeof(bool)> __GlobalNamespace_RecordingToolSettingsSizeCheck;
  static_assert(sizeof(RecordingToolSettings) == 0x89);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolSettings::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::RecordingToolSettings::ToString
// Il2CppName: ToString
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::RecordingToolSettings::*)()>(&GlobalNamespace::RecordingToolSettings::ToString)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::RecordingToolSettings*), "ToString", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
