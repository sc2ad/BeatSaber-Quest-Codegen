// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Collider
  class Collider;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GorillaHatButtonParent
  class GorillaHatButtonParent;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaHatButton
  class GorillaHatButton;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaHatButton);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaHatButton*, "", "GorillaHatButton");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x61
  #pragma pack(push, 1)
  // Autogenerated type: GorillaHatButton
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaHatButton : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::GorillaHatButton::HatButtonType
    struct HatButtonType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GorillaHatButton/HatButtonType
    // [TokenAttribute] Offset: FFFFFFFF
    struct HatButtonType/*, public ::System::Enum*/ {
      public:
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      public:
      // Creating value type constructor for type: HatButtonType
      constexpr HatButtonType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator ::System::Enum
      operator ::System::Enum() noexcept {
        return *reinterpret_cast<::System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GorillaHatButton/HatButtonType Hat
      static constexpr const int Hat = 0;
      // Get static field: static public GorillaHatButton/HatButtonType Hat
      static ::GlobalNamespace::GorillaHatButton::HatButtonType _get_Hat();
      // Set static field: static public GorillaHatButton/HatButtonType Hat
      static void _set_Hat(::GlobalNamespace::GorillaHatButton::HatButtonType value);
      // static field const value: static public GorillaHatButton/HatButtonType Face
      static constexpr const int Face = 1;
      // Get static field: static public GorillaHatButton/HatButtonType Face
      static ::GlobalNamespace::GorillaHatButton::HatButtonType _get_Face();
      // Set static field: static public GorillaHatButton/HatButtonType Face
      static void _set_Face(::GlobalNamespace::GorillaHatButton::HatButtonType value);
      // static field const value: static public GorillaHatButton/HatButtonType Badge
      static constexpr const int Badge = 2;
      // Get static field: static public GorillaHatButton/HatButtonType Badge
      static ::GlobalNamespace::GorillaHatButton::HatButtonType _get_Badge();
      // Set static field: static public GorillaHatButton/HatButtonType Badge
      static void _set_Badge(::GlobalNamespace::GorillaHatButton::HatButtonType value);
      // Get instance field reference: public System.Int32 value__
      [[deprecated("Use field access instead!")]] int& dyn_value__();
    }; // GorillaHatButton/HatButtonType
    #pragma pack(pop)
    static check_size<sizeof(GorillaHatButton::HatButtonType), 0 + sizeof(int)> __GlobalNamespace_GorillaHatButton_HatButtonTypeSizeCheck;
    static_assert(sizeof(GorillaHatButton::HatButtonType) == 0x4);
    public:
    // public GorillaHatButtonParent buttonParent
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::GorillaHatButtonParent* buttonParent;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaHatButtonParent*) == 0x8);
    // public GorillaHatButton/HatButtonType buttonType
    // Size: 0x4
    // Offset: 0x20
    ::GlobalNamespace::GorillaHatButton::HatButtonType buttonType;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GorillaHatButton::HatButtonType) == 0x4);
    // public System.Boolean isOn
    // Size: 0x1
    // Offset: 0x24
    bool isOn;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOn and: offMaterial
    char __padding2[0x3] = {};
    // public UnityEngine.Material offMaterial
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Material* offMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public UnityEngine.Material onMaterial
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::Material* onMaterial;
    // Field size check
    static_assert(sizeof(::UnityEngine::Material*) == 0x8);
    // public System.String offText
    // Size: 0x8
    // Offset: 0x38
    ::StringW offText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.String onText
    // Size: 0x8
    // Offset: 0x40
    ::StringW onText;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public UnityEngine.UI.Text myText
    // Size: 0x8
    // Offset: 0x48
    ::UnityEngine::UI::Text* myText;
    // Field size check
    static_assert(sizeof(::UnityEngine::UI::Text*) == 0x8);
    // public System.Single debounceTime
    // Size: 0x4
    // Offset: 0x50
    float debounceTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single touchTime
    // Size: 0x4
    // Offset: 0x54
    float touchTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.String cosmeticName
    // Size: 0x8
    // Offset: 0x58
    ::StringW cosmeticName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // public System.Boolean testPress
    // Size: 0x1
    // Offset: 0x60
    bool testPress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public GorillaHatButtonParent buttonParent
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaHatButtonParent*& dyn_buttonParent();
    // Get instance field reference: public GorillaHatButton/HatButtonType buttonType
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GorillaHatButton::HatButtonType& dyn_buttonType();
    // Get instance field reference: public System.Boolean isOn
    [[deprecated("Use field access instead!")]] bool& dyn_isOn();
    // Get instance field reference: public UnityEngine.Material offMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_offMaterial();
    // Get instance field reference: public UnityEngine.Material onMaterial
    [[deprecated("Use field access instead!")]] ::UnityEngine::Material*& dyn_onMaterial();
    // Get instance field reference: public System.String offText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_offText();
    // Get instance field reference: public System.String onText
    [[deprecated("Use field access instead!")]] ::StringW& dyn_onText();
    // Get instance field reference: public UnityEngine.UI.Text myText
    [[deprecated("Use field access instead!")]] ::UnityEngine::UI::Text*& dyn_myText();
    // Get instance field reference: public System.Single debounceTime
    [[deprecated("Use field access instead!")]] float& dyn_debounceTime();
    // Get instance field reference: public System.Single touchTime
    [[deprecated("Use field access instead!")]] float& dyn_touchTime();
    // Get instance field reference: public System.String cosmeticName
    [[deprecated("Use field access instead!")]] ::StringW& dyn_cosmeticName();
    // Get instance field reference: public System.Boolean testPress
    [[deprecated("Use field access instead!")]] bool& dyn_testPress();
    // public System.Void .ctor()
    // Offset: 0xC6DC14
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaHatButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaHatButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaHatButton*, creationType>()));
    }
    // public System.Void Update()
    // Offset: 0xC6D6F4
    void Update();
    // private System.Void OnTriggerEnter(UnityEngine.Collider collider)
    // Offset: 0xC6D93C
    void OnTriggerEnter(::UnityEngine::Collider* collider);
    // public System.Void UpdateColor()
    // Offset: 0xC6DB68
    void UpdateColor();
  }; // GorillaHatButton
  #pragma pack(pop)
  static check_size<sizeof(GorillaHatButton), 96 + sizeof(bool)> __GlobalNamespace_GorillaHatButtonSizeCheck;
  static_assert(sizeof(GorillaHatButton) == 0x61);
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaHatButton::HatButtonType, "", "GorillaHatButton/HatButtonType");
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButton::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButton::Update
// Il2CppName: Update
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButton::*)()>(&GlobalNamespace::GorillaHatButton::Update)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButton*), "Update", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButton::OnTriggerEnter
// Il2CppName: OnTriggerEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButton::*)(::UnityEngine::Collider*)>(&GlobalNamespace::GorillaHatButton::OnTriggerEnter)> {
  static const MethodInfo* get() {
    static auto* collider = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collider")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButton*), "OnTriggerEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collider});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaHatButton::UpdateColor
// Il2CppName: UpdateColor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaHatButton::*)()>(&GlobalNamespace::GorillaHatButton::UpdateColor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaHatButton*), "UpdateColor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
