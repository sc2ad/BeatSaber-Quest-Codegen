// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: Cinemachine
namespace Cinemachine {
  // Forward declaring type: CinemachineBrain
  class CinemachineBrain;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: CinemachineMixer
  class CinemachineMixer;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::CinemachineMixer);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::CinemachineMixer*, "", "CinemachineMixer");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1D
  #pragma pack(push, 1)
  // Autogenerated type: CinemachineMixer
  // [TokenAttribute] Offset: FFFFFFFF
  class CinemachineMixer : public ::UnityEngine::Playables::PlayableBehaviour {
    public:
    // Nested type: ::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate
    class MasterDirectorDelegate;
    public:
    // private Cinemachine.CinemachineBrain mBrain
    // Size: 0x8
    // Offset: 0x10
    ::Cinemachine::CinemachineBrain* mBrain;
    // Field size check
    static_assert(sizeof(::Cinemachine::CinemachineBrain*) == 0x8);
    // private System.Int32 mBrainOverrideId
    // Size: 0x4
    // Offset: 0x18
    int mBrainOverrideId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean mPreviewPlay
    // Size: 0x1
    // Offset: 0x1C
    bool mPreviewPlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get static field: static public CinemachineMixer/MasterDirectorDelegate GetMasterPlayableDirector
    static ::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate* _get_GetMasterPlayableDirector();
    // Set static field: static public CinemachineMixer/MasterDirectorDelegate GetMasterPlayableDirector
    static void _set_GetMasterPlayableDirector(::GlobalNamespace::CinemachineMixer::MasterDirectorDelegate* value);
    // Get instance field reference: private Cinemachine.CinemachineBrain mBrain
    [[deprecated("Use field access instead!")]] ::Cinemachine::CinemachineBrain*& dyn_mBrain();
    // Get instance field reference: private System.Int32 mBrainOverrideId
    [[deprecated("Use field access instead!")]] int& dyn_mBrainOverrideId();
    // Get instance field reference: private System.Boolean mPreviewPlay
    [[deprecated("Use field access instead!")]] bool& dyn_mPreviewPlay();
    // public System.Void .ctor()
    // Offset: 0x1BA2B90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CinemachineMixer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::CinemachineMixer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CinemachineMixer*, creationType>()));
    }
    // private System.Single GetDeltaTime(System.Single deltaTime)
    // Offset: 0x1BA2A94
    float GetDeltaTime(float deltaTime);
    // public override System.Void OnPlayableDestroy(UnityEngine.Playables.Playable playable)
    // Offset: 0x1BA23B4
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::OnPlayableDestroy(UnityEngine.Playables.Playable playable)
    void OnPlayableDestroy(::UnityEngine::Playables::Playable playable);
    // public override System.Void PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    // Offset: 0x1BA2454
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    void PrepareFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info);
    // public override System.Void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    // Offset: 0x1BA245C
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, System.Object playerData)
    void ProcessFrame(::UnityEngine::Playables::Playable playable, ::UnityEngine::Playables::FrameData info, ::Il2CppObject* playerData);
  }; // CinemachineMixer
  #pragma pack(pop)
  static check_size<sizeof(CinemachineMixer), 28 + sizeof(bool)> __GlobalNamespace_CinemachineMixerSizeCheck;
  static_assert(sizeof(CinemachineMixer) == 0x1D);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::CinemachineMixer::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::CinemachineMixer::GetDeltaTime
// Il2CppName: GetDeltaTime
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float (GlobalNamespace::CinemachineMixer::*)(float)>(&GlobalNamespace::CinemachineMixer::GetDeltaTime)> {
  static const MethodInfo* get() {
    static auto* deltaTime = &::il2cpp_utils::GetClassFromName("System", "Single")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineMixer*), "GetDeltaTime", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{deltaTime});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CinemachineMixer::OnPlayableDestroy
// Il2CppName: OnPlayableDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CinemachineMixer::*)(::UnityEngine::Playables::Playable)>(&GlobalNamespace::CinemachineMixer::OnPlayableDestroy)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineMixer*), "OnPlayableDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CinemachineMixer::PrepareFrame
// Il2CppName: PrepareFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CinemachineMixer::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData)>(&GlobalNamespace::CinemachineMixer::PrepareFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineMixer*), "PrepareFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::CinemachineMixer::ProcessFrame
// Il2CppName: ProcessFrame
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::CinemachineMixer::*)(::UnityEngine::Playables::Playable, ::UnityEngine::Playables::FrameData, ::Il2CppObject*)>(&GlobalNamespace::CinemachineMixer::ProcessFrame)> {
  static const MethodInfo* get() {
    static auto* playable = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "Playable")->byval_arg;
    static auto* info = &::il2cpp_utils::GetClassFromName("UnityEngine.Playables", "FrameData")->byval_arg;
    static auto* playerData = &::il2cpp_utils::GetClassFromName("System", "Object")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::CinemachineMixer*), "ProcessFrame", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playable, info, playerData});
  }
};
