// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: SteamLevelProductsModelSO
#include "GlobalNamespace/SteamLevelProductsModelSO.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SteamLevelProductsModelSO::LevelProductData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SteamLevelProductsModelSO::LevelProductData*, "", "SteamLevelProductsModelSO/LevelProductData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: SteamLevelProductsModelSO/LevelProductData
  // [TokenAttribute] Offset: FFFFFFFF
  class SteamLevelProductsModelSO::LevelProductData : public ::Il2CppObject {
    public:
    public:
    // private System.UInt32 _appId
    // Size: 0x4
    // Offset: 0x10
    uint appId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: appId and: levelId
    char __padding0[0x4] = {};
    // private System.String _levelId
    // Size: 0x8
    // Offset: 0x18
    ::StringW levelId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    public:
    // Get instance field reference: private System.UInt32 _appId
    [[deprecated("Use field access instead!")]] uint& dyn__appId();
    // Get instance field reference: private System.String _levelId
    [[deprecated("Use field access instead!")]] ::StringW& dyn__levelId();
    // public System.UInt32 get_appId()
    // Offset: 0x1447360
    uint get_appId();
    // public System.String get_levelId()
    // Offset: 0x1447368
    ::StringW get_levelId();
    // public System.Void .ctor()
    // Offset: 0x1447370
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamLevelProductsModelSO::LevelProductData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamLevelProductsModelSO::LevelProductData*, creationType>()));
    }
  }; // SteamLevelProductsModelSO/LevelProductData
  #pragma pack(pop)
  static check_size<sizeof(SteamLevelProductsModelSO::LevelProductData), 24 + sizeof(::StringW)> __GlobalNamespace_SteamLevelProductsModelSO_LevelProductDataSizeCheck;
  static_assert(sizeof(SteamLevelProductsModelSO::LevelProductData) == 0x20);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::get_appId
// Il2CppName: get_appId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint (GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::*)()>(&GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::get_appId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamLevelProductsModelSO::LevelProductData*), "get_appId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::get_levelId
// Il2CppName: get_levelId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::*)()>(&GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::get_levelId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SteamLevelProductsModelSO::LevelProductData*), "get_levelId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SteamLevelProductsModelSO::LevelProductData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
