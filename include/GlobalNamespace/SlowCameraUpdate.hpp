// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SlowCameraUpdate
  class SlowCameraUpdate;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SlowCameraUpdate);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SlowCameraUpdate*, "", "SlowCameraUpdate");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: SlowCameraUpdate
  // [TokenAttribute] Offset: FFFFFFFF
  class SlowCameraUpdate : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::SlowCameraUpdate::$UpdateMirror$d__7
    class $UpdateMirror$d__7;
    public:
    // private UnityEngine.Camera myCamera
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::Camera* myCamera;
    // Field size check
    static_assert(sizeof(::UnityEngine::Camera*) == 0x8);
    // private System.Single frameRate
    // Size: 0x4
    // Offset: 0x20
    float frameRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeToNextFrame
    // Size: 0x4
    // Offset: 0x24
    float timeToNextFrame;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single lastFrameCaptured
    // Size: 0x4
    // Offset: 0x28
    float lastFrameCaptured;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private UnityEngine.Camera myCamera
    [[deprecated("Use field access instead!")]] ::UnityEngine::Camera*& dyn_myCamera();
    // Get instance field reference: private System.Single frameRate
    [[deprecated("Use field access instead!")]] float& dyn_frameRate();
    // Get instance field reference: private System.Single timeToNextFrame
    [[deprecated("Use field access instead!")]] float& dyn_timeToNextFrame();
    // Get instance field reference: private System.Single lastFrameCaptured
    [[deprecated("Use field access instead!")]] float& dyn_lastFrameCaptured();
    // public System.Void .ctor()
    // Offset: 0xCC28C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SlowCameraUpdate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SlowCameraUpdate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SlowCameraUpdate*, creationType>()));
    }
    // public System.Void Awake()
    // Offset: 0xCC2788
    void Awake();
    // public System.Void OnEnable()
    // Offset: 0xCC27F0
    void OnEnable();
    // public System.Void OnDisable()
    // Offset: 0xCC288C
    void OnDisable();
    // public System.Collections.IEnumerator UpdateMirror()
    // Offset: 0xCC281C
    ::System::Collections::IEnumerator* UpdateMirror();
  }; // SlowCameraUpdate
  #pragma pack(pop)
  static check_size<sizeof(SlowCameraUpdate), 40 + sizeof(float)> __GlobalNamespace_SlowCameraUpdateSizeCheck;
  static_assert(sizeof(SlowCameraUpdate) == 0x2C);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SlowCameraUpdate::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SlowCameraUpdate::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlowCameraUpdate::*)()>(&GlobalNamespace::SlowCameraUpdate::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlowCameraUpdate*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlowCameraUpdate::OnEnable
// Il2CppName: OnEnable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlowCameraUpdate::*)()>(&GlobalNamespace::SlowCameraUpdate::OnEnable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlowCameraUpdate*), "OnEnable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlowCameraUpdate::OnDisable
// Il2CppName: OnDisable
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SlowCameraUpdate::*)()>(&GlobalNamespace::SlowCameraUpdate::OnDisable)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlowCameraUpdate*), "OnDisable", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SlowCameraUpdate::UpdateMirror
// Il2CppName: UpdateMirror
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::SlowCameraUpdate::*)()>(&GlobalNamespace::SlowCameraUpdate::UpdateMirror)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SlowCameraUpdate*), "UpdateMirror", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
