// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerSpectatingSpotManager
  class MultiplayerSpectatingSpotManager;
  // Forward declaring type: MultiplayerLocalInactivePlayerSongSyncController
  class MultiplayerLocalInactivePlayerSongSyncController;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: IMultiplayerSpectatingSpot
  class IMultiplayerSpectatingSpot;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerSpectatorController
  class MultiplayerSpectatorController;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::MultiplayerSpectatorController);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::MultiplayerSpectatorController*, "", "MultiplayerSpectatorController");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerSpectatorController
  // [TokenAttribute] Offset: FFFFFFFF
  class MultiplayerSpectatorController : public ::UnityEngine::MonoBehaviour {
    public:
    // Nested type: ::GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotWithFadeCoroutine$d__17
    class $SwitchToDefaultSpotWithFadeCoroutine$d__17;
    // Nested type: ::GlobalNamespace::MultiplayerSpectatorController::$SwitchToDefaultSpotCoroutine$d__18
    class $SwitchToDefaultSpotCoroutine$d__18;
    public:
    // [InjectAttribute] Offset: 0x10E48FC
    // private readonly MultiplayerSpectatingSpotManager _spotManager
    // Size: 0x8
    // Offset: 0x18
    ::GlobalNamespace::MultiplayerSpectatingSpotManager* spotManager;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerSpectatingSpotManager*) == 0x8);
    // [InjectAttribute] Offset: 0x10E490C
    // private readonly MultiplayerLocalInactivePlayerSongSyncController _songController
    // Size: 0x8
    // Offset: 0x20
    ::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController* songController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0x10E491C
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerController*) == 0x8);
    // [InjectAttribute] Offset: 0x10E492C
    // private readonly FadeInOutController _fadeInOutController
    // Size: 0x8
    // Offset: 0x30
    ::GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::FadeInOutController*) == 0x8);
    // private System.Action`1<IMultiplayerSpectatingSpot> spectatingSpotDidChangeEvent
    // Size: 0x8
    // Offset: 0x38
    ::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>* spectatingSpotDidChangeEvent;
    // Field size check
    static_assert(sizeof(::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x40
    ::UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(::UnityEngine::Transform*) == 0x8);
    // private IMultiplayerSpectatingSpot _currentSpot
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::IMultiplayerSpectatingSpot* currentSpot;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::IMultiplayerSpectatingSpot*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: private readonly MultiplayerSpectatingSpotManager _spotManager
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerSpectatingSpotManager*& dyn__spotManager();
    // Get instance field reference: private readonly MultiplayerLocalInactivePlayerSongSyncController _songController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerLocalInactivePlayerSongSyncController*& dyn__songController();
    // Get instance field reference: private readonly MultiplayerController _multiplayerController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerController*& dyn__multiplayerController();
    // Get instance field reference: private readonly FadeInOutController _fadeInOutController
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::FadeInOutController*& dyn__fadeInOutController();
    // Get instance field reference: private System.Action`1<IMultiplayerSpectatingSpot> spectatingSpotDidChangeEvent
    [[deprecated("Use field access instead!")]] ::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>*& dyn_spectatingSpotDidChangeEvent();
    // Get instance field reference: private UnityEngine.Transform _transform
    [[deprecated("Use field access instead!")]] ::UnityEngine::Transform*& dyn__transform();
    // Get instance field reference: private IMultiplayerSpectatingSpot _currentSpot
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::IMultiplayerSpectatingSpot*& dyn__currentSpot();
    // public IMultiplayerSpectatingSpot get_currentSpot()
    // Offset: 0x13C4200
    ::GlobalNamespace::IMultiplayerSpectatingSpot* get_currentSpot();
    // public System.Void add_spectatingSpotDidChangeEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0x13C3E5C
    void add_spectatingSpotDidChangeEvent(::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void remove_spectatingSpotDidChangeEvent(System.Action`1<IMultiplayerSpectatingSpot> value)
    // Offset: 0x13C4088
    void remove_spectatingSpotDidChangeEvent(::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>* value);
    // public System.Void .ctor()
    // Offset: 0x13C4780
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerSpectatorController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::MultiplayerSpectatorController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerSpectatorController*, creationType>()));
    }
    // protected System.Void Awake()
    // Offset: 0x13C4208
    void Awake();
    // protected System.Void Start()
    // Offset: 0x13C4230
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x13C42C4
    void OnDestroy();
    // public System.Void SwitchToDefaultSpot()
    // Offset: 0x13BC7EC
    void SwitchToDefaultSpot();
    // public System.Void SwitchToPrev()
    // Offset: 0x13C41AC
    void SwitchToPrev();
    // public System.Void SwitchToNext()
    // Offset: 0x13C4148
    void SwitchToNext();
    // private System.Collections.IEnumerator SwitchToDefaultSpotWithFadeCoroutine()
    // Offset: 0x13C4680
    ::System::Collections::IEnumerator* SwitchToDefaultSpotWithFadeCoroutine();
    // private System.Collections.IEnumerator SwitchToDefaultSpotCoroutine()
    // Offset: 0x13C43A0
    ::System::Collections::IEnumerator* SwitchToDefaultSpotCoroutine();
    // private System.Void SwitchToSpectatingSpot(IMultiplayerSpectatingSpot spectatingSpot)
    // Offset: 0x13C4410
    void SwitchToSpectatingSpot(::GlobalNamespace::IMultiplayerSpectatingSpot* spectatingSpot);
    // private System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0x13C4748
    void HandleStateChanged(::GlobalNamespace::MultiplayerController::State state);
  }; // MultiplayerSpectatorController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerSpectatorController), 72 + sizeof(::GlobalNamespace::IMultiplayerSpectatingSpot*)> __GlobalNamespace_MultiplayerSpectatorControllerSizeCheck;
  static_assert(sizeof(MultiplayerSpectatorController) == 0x50);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::get_currentSpot
// Il2CppName: get_currentSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::IMultiplayerSpectatingSpot* (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::get_currentSpot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "get_currentSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent
// Il2CppName: add_spectatingSpotDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)(::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>*)>(&GlobalNamespace::MultiplayerSpectatorController::add_spectatingSpotDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IMultiplayerSpectatingSpot")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "add_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent
// Il2CppName: remove_spectatingSpotDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)(::System::Action_1<::GlobalNamespace::IMultiplayerSpectatingSpot*>*)>(&GlobalNamespace::MultiplayerSpectatorController::remove_spectatingSpotDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System", "Action`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "IMultiplayerSpectatingSpot")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "remove_spectatingSpotDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::Awake
// Il2CppName: Awake
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::Awake)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "Awake", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::OnDestroy
// Il2CppName: OnDestroy
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::OnDestroy)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "OnDestroy", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpot
// Il2CppName: SwitchToDefaultSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpot)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "SwitchToDefaultSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::SwitchToPrev
// Il2CppName: SwitchToPrev
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::SwitchToPrev)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "SwitchToPrev", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::SwitchToNext
// Il2CppName: SwitchToNext
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::SwitchToNext)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "SwitchToNext", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine
// Il2CppName: SwitchToDefaultSpotWithFadeCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotWithFadeCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "SwitchToDefaultSpotWithFadeCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine
// Il2CppName: SwitchToDefaultSpotCoroutine
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::IEnumerator* (GlobalNamespace::MultiplayerSpectatorController::*)()>(&GlobalNamespace::MultiplayerSpectatorController::SwitchToDefaultSpotCoroutine)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "SwitchToDefaultSpotCoroutine", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::SwitchToSpectatingSpot
// Il2CppName: SwitchToSpectatingSpot
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)(::GlobalNamespace::IMultiplayerSpectatingSpot*)>(&GlobalNamespace::MultiplayerSpectatorController::SwitchToSpectatingSpot)> {
  static const MethodInfo* get() {
    static auto* spectatingSpot = &::il2cpp_utils::GetClassFromName("", "IMultiplayerSpectatingSpot")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "SwitchToSpectatingSpot", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{spectatingSpot});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::MultiplayerSpectatorController::HandleStateChanged
// Il2CppName: HandleStateChanged
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::MultiplayerSpectatorController::*)(::GlobalNamespace::MultiplayerController::State)>(&GlobalNamespace::MultiplayerSpectatorController::HandleStateChanged)> {
  static const MethodInfo* get() {
    static auto* state = &::il2cpp_utils::GetClassFromName("", "MultiplayerController/State")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::MultiplayerSpectatorController*), "HandleStateChanged", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{state});
  }
};
