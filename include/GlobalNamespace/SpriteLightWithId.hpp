// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: LightWithIdMonoBehaviour
#include "GlobalNamespace/LightWithIdMonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: SpriteLightWithId
  class SpriteLightWithId;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::SpriteLightWithId);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::SpriteLightWithId*, "", "SpriteLightWithId");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4E
  #pragma pack(push, 1)
  // Autogenerated type: SpriteLightWithId
  // [TokenAttribute] Offset: FFFFFFFF
  class SpriteLightWithId : public ::GlobalNamespace::LightWithIdMonoBehaviour {
    public:
    // Writing base type padding for base size: 0x29 to desired offset: 0x30
    char ___base_padding[0x7] = {};
    public:
    // private UnityEngine.SpriteRenderer _spriteRenderer
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::SpriteRenderer* spriteRenderer;
    // Field size check
    static_assert(sizeof(::UnityEngine::SpriteRenderer*) == 0x8);
    // [SpaceAttribute] Offset: 0x10C7F54
    // private System.Boolean _hideIfAlphaOutOfRange
    // Size: 0x1
    // Offset: 0x38
    bool hideIfAlphaOutOfRange;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hideIfAlphaOutOfRange and: hideAlphaRangeMin
    char __padding1[0x3] = {};
    // [DrawIfAttribute] Offset: 0x10C7F8C
    // private System.Single _hideAlphaRangeMin
    // Size: 0x4
    // Offset: 0x3C
    float hideAlphaRangeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0x10C8034
    // private System.Single _hideAlphaRangeMax
    // Size: 0x4
    // Offset: 0x40
    float hideAlphaRangeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0x10C80DC
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x44
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minAlpha
    // Size: 0x4
    // Offset: 0x48
    float minAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _setColorOnly
    // Size: 0x1
    // Offset: 0x4C
    bool setColorOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [SpaceAttribute] Offset: 0x10C8134
    // private System.Boolean _setOnlyOnce
    // Size: 0x1
    // Offset: 0x4D
    bool setOnlyOnce;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Get instance field reference: private UnityEngine.SpriteRenderer _spriteRenderer
    [[deprecated("Use field access instead!")]] ::UnityEngine::SpriteRenderer*& dyn__spriteRenderer();
    // Get instance field reference: private System.Boolean _hideIfAlphaOutOfRange
    [[deprecated("Use field access instead!")]] bool& dyn__hideIfAlphaOutOfRange();
    // Get instance field reference: private System.Single _hideAlphaRangeMin
    [[deprecated("Use field access instead!")]] float& dyn__hideAlphaRangeMin();
    // Get instance field reference: private System.Single _hideAlphaRangeMax
    [[deprecated("Use field access instead!")]] float& dyn__hideAlphaRangeMax();
    // Get instance field reference: private System.Single _intensity
    [[deprecated("Use field access instead!")]] float& dyn__intensity();
    // Get instance field reference: private System.Single _minAlpha
    [[deprecated("Use field access instead!")]] float& dyn__minAlpha();
    // Get instance field reference: private System.Boolean _setColorOnly
    [[deprecated("Use field access instead!")]] bool& dyn__setColorOnly();
    // Get instance field reference: private System.Boolean _setOnlyOnce
    [[deprecated("Use field access instead!")]] bool& dyn__setOnlyOnce();
    // public UnityEngine.Color get_color()
    // Offset: 0x1E881F0
    ::UnityEngine::Color get_color();
    // public System.Void .ctor()
    // Offset: 0x1E88368
    // Implemented from: LightWithIdMonoBehaviour
    // Base method: System.Void LightWithIdMonoBehaviour::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SpriteLightWithId* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::SpriteLightWithId::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SpriteLightWithId*, creationType>()));
    }
    // public override System.Void ColorWasSet(UnityEngine.Color color)
    // Offset: 0x1E8820C
    // Implemented from: LightWithIdMonoBehaviour
    // Base method: System.Void LightWithIdMonoBehaviour::ColorWasSet(UnityEngine.Color color)
    void ColorWasSet(::UnityEngine::Color color);
  }; // SpriteLightWithId
  #pragma pack(pop)
  static check_size<sizeof(SpriteLightWithId), 77 + sizeof(bool)> __GlobalNamespace_SpriteLightWithIdSizeCheck;
  static_assert(sizeof(SpriteLightWithId) == 0x4E);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::SpriteLightWithId::get_color
// Il2CppName: get_color
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::UnityEngine::Color (GlobalNamespace::SpriteLightWithId::*)()>(&GlobalNamespace::SpriteLightWithId::get_color)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpriteLightWithId*), "get_color", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::SpriteLightWithId::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::SpriteLightWithId::ColorWasSet
// Il2CppName: ColorWasSet
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::SpriteLightWithId::*)(::UnityEngine::Color)>(&GlobalNamespace::SpriteLightWithId::ColorWasSet)> {
  static const MethodInfo* get() {
    static auto* color = &::il2cpp_utils::GetClassFromName("UnityEngine", "Color")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::SpriteLightWithId*), "ColorWasSet", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{color});
  }
};
