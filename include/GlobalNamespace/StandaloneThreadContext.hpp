// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: IStandaloneThreadRunner
#include "GlobalNamespace/IStandaloneThreadRunner.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IStandaloneThreadRunnable
  class IStandaloneThreadRunnable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: StandaloneThreadContext
  class StandaloneThreadContext;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::StandaloneThreadContext);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::StandaloneThreadContext*, "", "StandaloneThreadContext");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: StandaloneThreadContext
  // [TokenAttribute] Offset: FFFFFFFF
  class StandaloneThreadContext : public ::Il2CppObject/*, public ::GlobalNamespace::IStandaloneThreadRunner*/ {
    public:
    // Creating interface conversion operator: operator ::GlobalNamespace::IStandaloneThreadRunner
    operator ::GlobalNamespace::IStandaloneThreadRunner() noexcept {
      return *reinterpret_cast<::GlobalNamespace::IStandaloneThreadRunner*>(this);
    }
    // Creating interface conversion operator: i_IStandaloneThreadRunner
    inline ::GlobalNamespace::IStandaloneThreadRunner* i_IStandaloneThreadRunner() noexcept {
      return reinterpret_cast<::GlobalNamespace::IStandaloneThreadRunner*>(this);
    }
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0x1101814
    // Get static field: static public StandaloneThreadContext instance
    static ::GlobalNamespace::StandaloneThreadContext* _get_instance();
    // Set static field: static public StandaloneThreadContext instance
    static void _set_instance(::GlobalNamespace::StandaloneThreadContext* value);
    // public System.Void .ctor()
    // Offset: 0x1A08AF0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StandaloneThreadContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::StandaloneThreadContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StandaloneThreadContext*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x1A08AF8
    static void _cctor();
    // public System.Void Run(IStandaloneThreadRunnable runnable)
    // Offset: 0x1A08AEC
    void Run(::GlobalNamespace::IStandaloneThreadRunnable* runnable);
  }; // StandaloneThreadContext
  #pragma pack(pop)
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::StandaloneThreadContext::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::StandaloneThreadContext::_cctor
// Il2CppName: .cctor
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::StandaloneThreadContext::_cctor)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandaloneThreadContext*), ".cctor", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::StandaloneThreadContext::Run
// Il2CppName: Run
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::StandaloneThreadContext::*)(::GlobalNamespace::IStandaloneThreadRunnable*)>(&GlobalNamespace::StandaloneThreadContext::Run)> {
  static const MethodInfo* get() {
    static auto* runnable = &::il2cpp_utils::GetClassFromName("", "IStandaloneThreadRunnable")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::StandaloneThreadContext*), "Run", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{runnable});
  }
};
