// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: ProgramArguments
  class ProgramArguments;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::ProgramArguments);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::ProgramArguments*, "", "ProgramArguments");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: ProgramArguments
  // [TokenAttribute] Offset: FFFFFFFF
  class ProgramArguments : public ::Il2CppObject {
    public:
    public:
    // private readonly System.Collections.Generic.IReadOnlyList`1<System.String> _arguments
    // Size: 0x8
    // Offset: 0x10
    ::System::Collections::Generic::IReadOnlyList_1<::StringW>* arguments;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::IReadOnlyList_1<::StringW>*) == 0x8);
    public:
    // Creating conversion operator: operator ::System::Collections::Generic::IReadOnlyList_1<::StringW>*
    constexpr operator ::System::Collections::Generic::IReadOnlyList_1<::StringW>*() const noexcept {
      return arguments;
    }
    // Get instance field reference: private readonly System.Collections.Generic.IReadOnlyList`1<System.String> _arguments
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::IReadOnlyList_1<::StringW>*& dyn__arguments();
    // public System.Collections.Generic.IReadOnlyList`1<System.String> get_arguments()
    // Offset: 0x1442BA4
    ::System::Collections::Generic::IReadOnlyList_1<::StringW>* get_arguments();
    // public System.Void .ctor(System.Collections.Generic.IReadOnlyList`1<System.String> arguments)
    // Offset: 0x1442BAC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProgramArguments* New_ctor(::System::Collections::Generic::IReadOnlyList_1<::StringW>* arguments) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::ProgramArguments::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProgramArguments*, creationType>(arguments)));
    }
    // static public ProgramArguments Empty()
    // Offset: 0x1442BD8
    static ::GlobalNamespace::ProgramArguments* Empty();
  }; // ProgramArguments
  #pragma pack(pop)
  static check_size<sizeof(ProgramArguments), 16 + sizeof(::System::Collections::Generic::IReadOnlyList_1<::StringW>*)> __GlobalNamespace_ProgramArgumentsSizeCheck;
  static_assert(sizeof(ProgramArguments) == 0x18);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::ProgramArguments::get_arguments
// Il2CppName: get_arguments
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::IReadOnlyList_1<::StringW>* (GlobalNamespace::ProgramArguments::*)()>(&GlobalNamespace::ProgramArguments::get_arguments)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProgramArguments*), "get_arguments", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::ProgramArguments::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::ProgramArguments::Empty
// Il2CppName: Empty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ProgramArguments* (*)()>(&GlobalNamespace::ProgramArguments::Empty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::ProgramArguments*), "Empty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
