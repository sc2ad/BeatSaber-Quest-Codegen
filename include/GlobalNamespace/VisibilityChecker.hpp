// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: VisibilityChecker
  // [TokenAttribute] Offset: FFFFFFFF
  // [RequireComponent] Offset: EC8FCC
  class VisibilityChecker : public UnityEngine::MonoBehaviour {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xEC99E0
    // private System.Action OnBecameVisibleEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action* OnBecameVisibleEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xEC99F0
    // private System.Action OnBecameInvisibleEvent
    // Size: 0x8
    // Offset: 0x20
    System::Action* OnBecameInvisibleEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // Creating value type constructor for type: VisibilityChecker
    VisibilityChecker(System::Action* OnBecameVisibleEvent_ = {}, System::Action* OnBecameInvisibleEvent_ = {}) noexcept : OnBecameVisibleEvent{OnBecameVisibleEvent_}, OnBecameInvisibleEvent{OnBecameInvisibleEvent_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get instance field reference: private System.Action OnBecameVisibleEvent
    System::Action*& dyn_OnBecameVisibleEvent();
    // Get instance field reference: private System.Action OnBecameInvisibleEvent
    System::Action*& dyn_OnBecameInvisibleEvent();
    // public System.Void add_OnBecameVisibleEvent(System.Action value)
    // Offset: 0x259E708
    void add_OnBecameVisibleEvent(System::Action* value);
    // public System.Void remove_OnBecameVisibleEvent(System.Action value)
    // Offset: 0x259E7AC
    void remove_OnBecameVisibleEvent(System::Action* value);
    // public System.Void add_OnBecameInvisibleEvent(System.Action value)
    // Offset: 0x259E850
    void add_OnBecameInvisibleEvent(System::Action* value);
    // public System.Void remove_OnBecameInvisibleEvent(System.Action value)
    // Offset: 0x259E8F4
    void remove_OnBecameInvisibleEvent(System::Action* value);
    // private System.Void OnBecameVisible()
    // Offset: 0x259E998
    void OnBecameVisible();
    // private System.Void OnBecameInvisible()
    // Offset: 0x259E9AC
    void OnBecameInvisible();
    // public System.Void .ctor()
    // Offset: 0x259E9C0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VisibilityChecker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VisibilityChecker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VisibilityChecker*, creationType>()));
    }
  }; // VisibilityChecker
  #pragma pack(pop)
  static check_size<sizeof(VisibilityChecker), 32 + sizeof(System::Action*)> __GlobalNamespace_VisibilityCheckerSizeCheck;
  static_assert(sizeof(VisibilityChecker) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::VisibilityChecker*, "", "VisibilityChecker");
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::add_OnBecameVisibleEvent
// Il2CppName: add_OnBecameVisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VisibilityChecker::*)(System::Action*)>(&GlobalNamespace::VisibilityChecker::add_OnBecameVisibleEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VisibilityChecker*), "add_OnBecameVisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::remove_OnBecameVisibleEvent
// Il2CppName: remove_OnBecameVisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VisibilityChecker::*)(System::Action*)>(&GlobalNamespace::VisibilityChecker::remove_OnBecameVisibleEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VisibilityChecker*), "remove_OnBecameVisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::add_OnBecameInvisibleEvent
// Il2CppName: add_OnBecameInvisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VisibilityChecker::*)(System::Action*)>(&GlobalNamespace::VisibilityChecker::add_OnBecameInvisibleEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VisibilityChecker*), "add_OnBecameInvisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::remove_OnBecameInvisibleEvent
// Il2CppName: remove_OnBecameInvisibleEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VisibilityChecker::*)(System::Action*)>(&GlobalNamespace::VisibilityChecker::remove_OnBecameInvisibleEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VisibilityChecker*), "remove_OnBecameInvisibleEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::OnBecameVisible
// Il2CppName: OnBecameVisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VisibilityChecker::*)()>(&GlobalNamespace::VisibilityChecker::OnBecameVisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VisibilityChecker*), "OnBecameVisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::OnBecameInvisible
// Il2CppName: OnBecameInvisible
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::VisibilityChecker::*)()>(&GlobalNamespace::VisibilityChecker::OnBecameInvisible)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::VisibilityChecker*), "OnBecameInvisible", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::VisibilityChecker::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
