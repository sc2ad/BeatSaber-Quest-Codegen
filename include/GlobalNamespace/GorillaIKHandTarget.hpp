// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collision
  class Collision;
}
// Forward declaring namespace: UnityEngine::XR::Interaction::Toolkit
namespace UnityEngine::XR::Interaction::Toolkit {
  // Forward declaring type: XRController
  class XRController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: GorillaIKHandTarget
  class GorillaIKHandTarget;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::GorillaIKHandTarget);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::GorillaIKHandTarget*, "", "GorillaIKHandTarget");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: GorillaIKHandTarget
  // [TokenAttribute] Offset: FFFFFFFF
  class GorillaIKHandTarget : public ::UnityEngine::MonoBehaviour {
    public:
    public:
    // public UnityEngine.GameObject handToStickTo
    // Size: 0x8
    // Offset: 0x18
    ::UnityEngine::GameObject* handToStickTo;
    // Field size check
    static_assert(sizeof(::UnityEngine::GameObject*) == 0x8);
    // public System.Boolean isLeftHand
    // Size: 0x1
    // Offset: 0x20
    bool isLeftHand;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isLeftHand and: hapticStrength
    char __padding1[0x3] = {};
    // public System.Single hapticStrength
    // Size: 0x4
    // Offset: 0x24
    float hapticStrength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Rigidbody thisRigidbody
    // Size: 0x8
    // Offset: 0x28
    ::UnityEngine::Rigidbody* thisRigidbody;
    // Field size check
    static_assert(sizeof(::UnityEngine::Rigidbody*) == 0x8);
    // private UnityEngine.XR.Interaction.Toolkit.XRController controllerReference
    // Size: 0x8
    // Offset: 0x30
    ::UnityEngine::XR::Interaction::Toolkit::XRController* controllerReference;
    // Field size check
    static_assert(sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController*) == 0x8);
    public:
    // Deleting conversion operator: operator ::System::IntPtr
    constexpr operator ::System::IntPtr() const noexcept = delete;
    // Get instance field reference: public UnityEngine.GameObject handToStickTo
    [[deprecated("Use field access instead!")]] ::UnityEngine::GameObject*& dyn_handToStickTo();
    // Get instance field reference: public System.Boolean isLeftHand
    [[deprecated("Use field access instead!")]] bool& dyn_isLeftHand();
    // Get instance field reference: public System.Single hapticStrength
    [[deprecated("Use field access instead!")]] float& dyn_hapticStrength();
    // Get instance field reference: private UnityEngine.Rigidbody thisRigidbody
    [[deprecated("Use field access instead!")]] ::UnityEngine::Rigidbody*& dyn_thisRigidbody();
    // Get instance field reference: private UnityEngine.XR.Interaction.Toolkit.XRController controllerReference
    [[deprecated("Use field access instead!")]] ::UnityEngine::XR::Interaction::Toolkit::XRController*& dyn_controllerReference();
    // public System.Void .ctor()
    // Offset: 0xC71EB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GorillaIKHandTarget* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::GorillaIKHandTarget::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GorillaIKHandTarget*, creationType>()));
    }
    // private System.Void Start()
    // Offset: 0xC71DBC
    void Start();
    // private System.Void FixedUpdate()
    // Offset: 0xC71E24
    void FixedUpdate();
    // private System.Void OnCollisionEnter(UnityEngine.Collision collision)
    // Offset: 0xC71EB0
    void OnCollisionEnter(::UnityEngine::Collision* collision);
  }; // GorillaIKHandTarget
  #pragma pack(pop)
  static check_size<sizeof(GorillaIKHandTarget), 48 + sizeof(::UnityEngine::XR::Interaction::Toolkit::XRController*)> __GlobalNamespace_GorillaIKHandTargetSizeCheck;
  static_assert(sizeof(GorillaIKHandTarget) == 0x38);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKHandTarget::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKHandTarget::Start
// Il2CppName: Start
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKHandTarget::*)()>(&GlobalNamespace::GorillaIKHandTarget::Start)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKHandTarget*), "Start", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKHandTarget::FixedUpdate
// Il2CppName: FixedUpdate
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKHandTarget::*)()>(&GlobalNamespace::GorillaIKHandTarget::FixedUpdate)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKHandTarget*), "FixedUpdate", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::GorillaIKHandTarget::OnCollisionEnter
// Il2CppName: OnCollisionEnter
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GorillaIKHandTarget::*)(::UnityEngine::Collision*)>(&GlobalNamespace::GorillaIKHandTarget::OnCollisionEnter)> {
  static const MethodInfo* get() {
    static auto* collision = &::il2cpp_utils::GetClassFromName("UnityEngine", "Collision")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::GorillaIKHandTarget*), "OnCollisionEnter", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{collision});
  }
};
