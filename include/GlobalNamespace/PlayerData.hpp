// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerAgreements
  class PlayerAgreements;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: PracticeSettings
  class PracticeSettings;
  // Forward declaring type: PlayerAllOverallStatsData
  class PlayerAllOverallStatsData;
  // Forward declaring type: PlayerLevelStatsData
  class PlayerLevelStatsData;
  // Forward declaring type: PlayerMissionStatsData
  class PlayerMissionStatsData;
  // Forward declaring type: ColorSchemesSettings
  class ColorSchemesSettings;
  // Forward declaring type: OverrideEnvironmentSettings
  class OverrideEnvironmentSettings;
  // Forward declaring type: MultiplayerModeSettings
  class MultiplayerModeSettings;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: MissionHelpSO
  class MissionHelpSO;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Forward declaring type: PlayerData
  class PlayerData;
}
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PlayerData);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PlayerData*, "", "PlayerData");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: PlayerData
  // [TokenAttribute] Offset: FFFFFFFF
  class PlayerData : public ::Il2CppObject {
    public:
    public:
    // private System.String <playerId>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    ::StringW playerId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.String <playerName>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::StringW playerName;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Boolean <shouldShowTutorialPrompt>k__BackingField
    // Size: 0x1
    // Offset: 0x20
    bool shouldShowTutorialPrompt;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <shouldShow360Warning>k__BackingField
    // Size: 0x1
    // Offset: 0x21
    bool shouldShow360Warning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <agreedToEula>k__BackingField
    // Size: 0x1
    // Offset: 0x22
    bool agreedToEula;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <didSelectLanguage>k__BackingField
    // Size: 0x1
    // Offset: 0x23
    bool didSelectLanguage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <agreedToMultiplayerDisclaimer>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    bool agreedToMultiplayerDisclaimer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean <avatarCreated>k__BackingField
    // Size: 0x1
    // Offset: 0x25
    bool avatarCreated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: avatarCreated and: playerAgreements
    char __padding7[0x2] = {};
    // private PlayerAgreements <playerAgreements>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::GlobalNamespace::PlayerAgreements* playerAgreements;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerAgreements*) == 0x8);
    // private BeatmapDifficulty <lastSelectedBeatmapDifficulty>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    ::GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapDifficulty) == 0x4);
    // Padding between fields: lastSelectedBeatmapDifficulty and: lastSelectedBeatmapCharacteristic
    char __padding9[0x4] = {};
    // private BeatmapCharacteristicSO <lastSelectedBeatmapCharacteristic>k__BackingField
    // Size: 0x8
    // Offset: 0x38
    ::GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::BeatmapCharacteristicSO*) == 0x8);
    // private GameplayModifiers <gameplayModifiers>k__BackingField
    // Size: 0x8
    // Offset: 0x40
    ::GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::GameplayModifiers*) == 0x8);
    // private PlayerSpecificSettings <playerSpecificSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x48
    ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerSpecificSettings*) == 0x8);
    // private PracticeSettings <practiceSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x50
    ::GlobalNamespace::PracticeSettings* practiceSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PracticeSettings*) == 0x8);
    // private PlayerAllOverallStatsData <playerAllOverallStatsData>k__BackingField
    // Size: 0x8
    // Offset: 0x58
    ::GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::PlayerAllOverallStatsData*) == 0x8);
    // private System.Collections.Generic.List`1<PlayerLevelStatsData> <levelsStatsData>k__BackingField
    // Size: 0x8
    // Offset: 0x60
    ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>*) == 0x8);
    // private System.Collections.Generic.List`1<PlayerMissionStatsData> <missionsStatsData>k__BackingField
    // Size: 0x8
    // Offset: 0x68
    ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> <showedMissionHelpIds>k__BackingField
    // Size: 0x8
    // Offset: 0x70
    ::System::Collections::Generic::List_1<::StringW>* showedMissionHelpIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> <guestPlayerNames>k__BackingField
    // Size: 0x8
    // Offset: 0x78
    ::System::Collections::Generic::List_1<::StringW>* guestPlayerNames;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::List_1<::StringW>*) == 0x8);
    // private ColorSchemesSettings <colorSchemesSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x80
    ::GlobalNamespace::ColorSchemesSettings* colorSchemesSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::ColorSchemesSettings*) == 0x8);
    // private OverrideEnvironmentSettings <overrideEnvironmentSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x88
    ::GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::OverrideEnvironmentSettings*) == 0x8);
    // private System.Collections.Generic.HashSet`1<System.String> <favoritesLevelIds>k__BackingField
    // Size: 0x8
    // Offset: 0x90
    ::System::Collections::Generic::HashSet_1<::StringW>* favoritesLevelIds;
    // Field size check
    static_assert(sizeof(::System::Collections::Generic::HashSet_1<::StringW>*) == 0x8);
    // private MultiplayerModeSettings <multiplayerModeSettings>k__BackingField
    // Size: 0x8
    // Offset: 0x98
    ::GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings;
    // Field size check
    static_assert(sizeof(::GlobalNamespace::MultiplayerModeSettings*) == 0x8);
    // private System.Int32 <currentDlcPromoDisplayCount>k__BackingField
    // Size: 0x4
    // Offset: 0xA0
    int currentDlcPromoDisplayCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentDlcPromoDisplayCount and: currentDlcPromoId
    char __padding23[0x4] = {};
    // private System.String <currentDlcPromoId>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::StringW currentDlcPromoId;
    // Field size check
    static_assert(sizeof(::StringW) == 0x8);
    // private System.Action favoriteLevelsSetDidChangeEvent
    // Size: 0x8
    // Offset: 0xB0
    ::System::Action* favoriteLevelsSetDidChangeEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    // private System.Action didIncreaseNumberOfGameplaysEvent
    // Size: 0x8
    // Offset: 0xB8
    ::System::Action* didIncreaseNumberOfGameplaysEvent;
    // Field size check
    static_assert(sizeof(::System::Action*) == 0x8);
    public:
    // static field const value: static public System.Int32 kMaxGuestPlayers
    static constexpr const int kMaxGuestPlayers = 10;
    // Get static field: static public System.Int32 kMaxGuestPlayers
    static int _get_kMaxGuestPlayers();
    // Set static field: static public System.Int32 kMaxGuestPlayers
    static void _set_kMaxGuestPlayers(int value);
    // Get instance field reference: private System.String <playerId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$playerId$k__BackingField();
    // Get instance field reference: private System.String <playerName>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$playerName$k__BackingField();
    // Get instance field reference: private System.Boolean <shouldShowTutorialPrompt>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$shouldShowTutorialPrompt$k__BackingField();
    // Get instance field reference: private System.Boolean <shouldShow360Warning>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$shouldShow360Warning$k__BackingField();
    // Get instance field reference: private System.Boolean <agreedToEula>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$agreedToEula$k__BackingField();
    // Get instance field reference: private System.Boolean <didSelectLanguage>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$didSelectLanguage$k__BackingField();
    // Get instance field reference: private System.Boolean <agreedToMultiplayerDisclaimer>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$agreedToMultiplayerDisclaimer$k__BackingField();
    // Get instance field reference: private System.Boolean <avatarCreated>k__BackingField
    [[deprecated("Use field access instead!")]] bool& dyn_$avatarCreated$k__BackingField();
    // Get instance field reference: private PlayerAgreements <playerAgreements>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerAgreements*& dyn_$playerAgreements$k__BackingField();
    // Get instance field reference: private BeatmapDifficulty <lastSelectedBeatmapDifficulty>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapDifficulty& dyn_$lastSelectedBeatmapDifficulty$k__BackingField();
    // Get instance field reference: private BeatmapCharacteristicSO <lastSelectedBeatmapCharacteristic>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::BeatmapCharacteristicSO*& dyn_$lastSelectedBeatmapCharacteristic$k__BackingField();
    // Get instance field reference: private GameplayModifiers <gameplayModifiers>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::GameplayModifiers*& dyn_$gameplayModifiers$k__BackingField();
    // Get instance field reference: private PlayerSpecificSettings <playerSpecificSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerSpecificSettings*& dyn_$playerSpecificSettings$k__BackingField();
    // Get instance field reference: private PracticeSettings <practiceSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PracticeSettings*& dyn_$practiceSettings$k__BackingField();
    // Get instance field reference: private PlayerAllOverallStatsData <playerAllOverallStatsData>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::PlayerAllOverallStatsData*& dyn_$playerAllOverallStatsData$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<PlayerLevelStatsData> <levelsStatsData>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>*& dyn_$levelsStatsData$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<PlayerMissionStatsData> <missionsStatsData>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>*& dyn_$missionsStatsData$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> <showedMissionHelpIds>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$showedMissionHelpIds$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.List`1<System.String> <guestPlayerNames>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::List_1<::StringW>*& dyn_$guestPlayerNames$k__BackingField();
    // Get instance field reference: private ColorSchemesSettings <colorSchemesSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::ColorSchemesSettings*& dyn_$colorSchemesSettings$k__BackingField();
    // Get instance field reference: private OverrideEnvironmentSettings <overrideEnvironmentSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::OverrideEnvironmentSettings*& dyn_$overrideEnvironmentSettings$k__BackingField();
    // Get instance field reference: private System.Collections.Generic.HashSet`1<System.String> <favoritesLevelIds>k__BackingField
    [[deprecated("Use field access instead!")]] ::System::Collections::Generic::HashSet_1<::StringW>*& dyn_$favoritesLevelIds$k__BackingField();
    // Get instance field reference: private MultiplayerModeSettings <multiplayerModeSettings>k__BackingField
    [[deprecated("Use field access instead!")]] ::GlobalNamespace::MultiplayerModeSettings*& dyn_$multiplayerModeSettings$k__BackingField();
    // Get instance field reference: private System.Int32 <currentDlcPromoDisplayCount>k__BackingField
    [[deprecated("Use field access instead!")]] int& dyn_$currentDlcPromoDisplayCount$k__BackingField();
    // Get instance field reference: private System.String <currentDlcPromoId>k__BackingField
    [[deprecated("Use field access instead!")]] ::StringW& dyn_$currentDlcPromoId$k__BackingField();
    // Get instance field reference: private System.Action favoriteLevelsSetDidChangeEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_favoriteLevelsSetDidChangeEvent();
    // Get instance field reference: private System.Action didIncreaseNumberOfGameplaysEvent
    [[deprecated("Use field access instead!")]] ::System::Action*& dyn_didIncreaseNumberOfGameplaysEvent();
    // public System.String get_playerId()
    // Offset: 0x13483D0
    ::StringW get_playerId();
    // private System.Void set_playerId(System.String value)
    // Offset: 0x13483D8
    void set_playerId(::StringW value);
    // public System.String get_playerName()
    // Offset: 0x13483E0
    ::StringW get_playerName();
    // private System.Void set_playerName(System.String value)
    // Offset: 0x13483E8
    void set_playerName(::StringW value);
    // public System.Boolean get_shouldShowTutorialPrompt()
    // Offset: 0x13483F0
    bool get_shouldShowTutorialPrompt();
    // private System.Void set_shouldShowTutorialPrompt(System.Boolean value)
    // Offset: 0x13483F8
    void set_shouldShowTutorialPrompt(bool value);
    // public System.Boolean get_shouldShow360Warning()
    // Offset: 0x1348404
    bool get_shouldShow360Warning();
    // private System.Void set_shouldShow360Warning(System.Boolean value)
    // Offset: 0x134840C
    void set_shouldShow360Warning(bool value);
    // public System.Boolean get_agreedToEula()
    // Offset: 0x1348418
    bool get_agreedToEula();
    // private System.Void set_agreedToEula(System.Boolean value)
    // Offset: 0x1348420
    void set_agreedToEula(bool value);
    // public System.Boolean get_didSelectLanguage()
    // Offset: 0x134842C
    bool get_didSelectLanguage();
    // private System.Void set_didSelectLanguage(System.Boolean value)
    // Offset: 0x1348434
    void set_didSelectLanguage(bool value);
    // public System.Boolean get_agreedToMultiplayerDisclaimer()
    // Offset: 0x1348440
    bool get_agreedToMultiplayerDisclaimer();
    // private System.Void set_agreedToMultiplayerDisclaimer(System.Boolean value)
    // Offset: 0x1348448
    void set_agreedToMultiplayerDisclaimer(bool value);
    // public System.Boolean get_avatarCreated()
    // Offset: 0x1348454
    bool get_avatarCreated();
    // private System.Void set_avatarCreated(System.Boolean value)
    // Offset: 0x134845C
    void set_avatarCreated(bool value);
    // public PlayerAgreements get_playerAgreements()
    // Offset: 0x1348468
    ::GlobalNamespace::PlayerAgreements* get_playerAgreements();
    // private System.Void set_playerAgreements(PlayerAgreements value)
    // Offset: 0x1348470
    void set_playerAgreements(::GlobalNamespace::PlayerAgreements* value);
    // public BeatmapDifficulty get_lastSelectedBeatmapDifficulty()
    // Offset: 0x1348478
    ::GlobalNamespace::BeatmapDifficulty get_lastSelectedBeatmapDifficulty();
    // private System.Void set_lastSelectedBeatmapDifficulty(BeatmapDifficulty value)
    // Offset: 0x1348480
    void set_lastSelectedBeatmapDifficulty(::GlobalNamespace::BeatmapDifficulty value);
    // public BeatmapCharacteristicSO get_lastSelectedBeatmapCharacteristic()
    // Offset: 0x1348488
    ::GlobalNamespace::BeatmapCharacteristicSO* get_lastSelectedBeatmapCharacteristic();
    // private System.Void set_lastSelectedBeatmapCharacteristic(BeatmapCharacteristicSO value)
    // Offset: 0x1348490
    void set_lastSelectedBeatmapCharacteristic(::GlobalNamespace::BeatmapCharacteristicSO* value);
    // public GameplayModifiers get_gameplayModifiers()
    // Offset: 0x1348498
    ::GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // private System.Void set_gameplayModifiers(GameplayModifiers value)
    // Offset: 0x13484A0
    void set_gameplayModifiers(::GlobalNamespace::GameplayModifiers* value);
    // public PlayerSpecificSettings get_playerSpecificSettings()
    // Offset: 0x13484A8
    ::GlobalNamespace::PlayerSpecificSettings* get_playerSpecificSettings();
    // private System.Void set_playerSpecificSettings(PlayerSpecificSettings value)
    // Offset: 0x13484B0
    void set_playerSpecificSettings(::GlobalNamespace::PlayerSpecificSettings* value);
    // public PracticeSettings get_practiceSettings()
    // Offset: 0x13484B8
    ::GlobalNamespace::PracticeSettings* get_practiceSettings();
    // private System.Void set_practiceSettings(PracticeSettings value)
    // Offset: 0x13484C0
    void set_practiceSettings(::GlobalNamespace::PracticeSettings* value);
    // public PlayerAllOverallStatsData get_playerAllOverallStatsData()
    // Offset: 0x13484C8
    ::GlobalNamespace::PlayerAllOverallStatsData* get_playerAllOverallStatsData();
    // private System.Void set_playerAllOverallStatsData(PlayerAllOverallStatsData value)
    // Offset: 0x13484D0
    void set_playerAllOverallStatsData(::GlobalNamespace::PlayerAllOverallStatsData* value);
    // public System.Collections.Generic.List`1<PlayerLevelStatsData> get_levelsStatsData()
    // Offset: 0x13484D8
    ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>* get_levelsStatsData();
    // private System.Void set_levelsStatsData(System.Collections.Generic.List`1<PlayerLevelStatsData> value)
    // Offset: 0x13484E0
    void set_levelsStatsData(::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>* value);
    // public System.Collections.Generic.List`1<PlayerMissionStatsData> get_missionsStatsData()
    // Offset: 0x13484E8
    ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>* get_missionsStatsData();
    // private System.Void set_missionsStatsData(System.Collections.Generic.List`1<PlayerMissionStatsData> value)
    // Offset: 0x13484F0
    void set_missionsStatsData(::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>* value);
    // public System.Collections.Generic.List`1<System.String> get_showedMissionHelpIds()
    // Offset: 0x13484F8
    ::System::Collections::Generic::List_1<::StringW>* get_showedMissionHelpIds();
    // private System.Void set_showedMissionHelpIds(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x1348500
    void set_showedMissionHelpIds(::System::Collections::Generic::List_1<::StringW>* value);
    // public System.Collections.Generic.List`1<System.String> get_guestPlayerNames()
    // Offset: 0x1348508
    ::System::Collections::Generic::List_1<::StringW>* get_guestPlayerNames();
    // private System.Void set_guestPlayerNames(System.Collections.Generic.List`1<System.String> value)
    // Offset: 0x1348510
    void set_guestPlayerNames(::System::Collections::Generic::List_1<::StringW>* value);
    // public ColorSchemesSettings get_colorSchemesSettings()
    // Offset: 0x1348518
    ::GlobalNamespace::ColorSchemesSettings* get_colorSchemesSettings();
    // private System.Void set_colorSchemesSettings(ColorSchemesSettings value)
    // Offset: 0x1348520
    void set_colorSchemesSettings(::GlobalNamespace::ColorSchemesSettings* value);
    // public OverrideEnvironmentSettings get_overrideEnvironmentSettings()
    // Offset: 0x1348528
    ::GlobalNamespace::OverrideEnvironmentSettings* get_overrideEnvironmentSettings();
    // private System.Void set_overrideEnvironmentSettings(OverrideEnvironmentSettings value)
    // Offset: 0x1348530
    void set_overrideEnvironmentSettings(::GlobalNamespace::OverrideEnvironmentSettings* value);
    // public System.Collections.Generic.HashSet`1<System.String> get_favoritesLevelIds()
    // Offset: 0x1348538
    ::System::Collections::Generic::HashSet_1<::StringW>* get_favoritesLevelIds();
    // private System.Void set_favoritesLevelIds(System.Collections.Generic.HashSet`1<System.String> value)
    // Offset: 0x1348540
    void set_favoritesLevelIds(::System::Collections::Generic::HashSet_1<::StringW>* value);
    // public MultiplayerModeSettings get_multiplayerModeSettings()
    // Offset: 0x1348548
    ::GlobalNamespace::MultiplayerModeSettings* get_multiplayerModeSettings();
    // private System.Void set_multiplayerModeSettings(MultiplayerModeSettings value)
    // Offset: 0x1348550
    void set_multiplayerModeSettings(::GlobalNamespace::MultiplayerModeSettings* value);
    // public System.Int32 get_currentDlcPromoDisplayCount()
    // Offset: 0x1348558
    int get_currentDlcPromoDisplayCount();
    // private System.Void set_currentDlcPromoDisplayCount(System.Int32 value)
    // Offset: 0x1348560
    void set_currentDlcPromoDisplayCount(int value);
    // public System.String get_currentDlcPromoId()
    // Offset: 0x1348568
    ::StringW get_currentDlcPromoId();
    // private System.Void set_currentDlcPromoId(System.String value)
    // Offset: 0x1348570
    void set_currentDlcPromoId(::StringW value);
    // public System.Void add_favoriteLevelsSetDidChangeEvent(System.Action value)
    // Offset: 0x1348578
    void add_favoriteLevelsSetDidChangeEvent(::System::Action* value);
    // public System.Void remove_favoriteLevelsSetDidChangeEvent(System.Action value)
    // Offset: 0x134861C
    void remove_favoriteLevelsSetDidChangeEvent(::System::Action* value);
    // public System.Void add_didIncreaseNumberOfGameplaysEvent(System.Action value)
    // Offset: 0x13486C0
    void add_didIncreaseNumberOfGameplaysEvent(::System::Action* value);
    // public System.Void remove_didIncreaseNumberOfGameplaysEvent(System.Action value)
    // Offset: 0x1348764
    void remove_didIncreaseNumberOfGameplaysEvent(::System::Action* value);
    // public System.Void .ctor(System.String playerId, System.String playerName, BeatmapCharacteristicSO lastSelectedBeatmapCharacteristic, ColorSchemesSettings colorSchemesSettings, OverrideEnvironmentSettings overrideEnvironmentSettings)
    // Offset: 0x1348808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerData* New_ctor(::StringW playerId, ::StringW playerName, ::GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic, ::GlobalNamespace::ColorSchemesSettings* colorSchemesSettings, ::GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerData*, creationType>(playerId, playerName, lastSelectedBeatmapCharacteristic, colorSchemesSettings, overrideEnvironmentSettings)));
    }
    // public System.Void .ctor(System.String playerId, System.String playerName, System.Boolean shouldShowTutorialPrompt, System.Boolean shouldShow360Warning, System.Boolean agreedToEula, System.Boolean didSelectLanguage, System.Boolean agreedToMultiplayerDisclaimer, System.Boolean avatarCreated, PlayerAgreements playerAgreements, BeatmapDifficulty lastSelectedBeatmapDifficulty, BeatmapCharacteristicSO lastSelectedBeatmapCharacteristic, GameplayModifiers gameplayModifiers, PlayerSpecificSettings playerSpecificSettings, PracticeSettings practiceSettings, PlayerAllOverallStatsData playerAllOverallStatsData, System.Collections.Generic.List`1<PlayerLevelStatsData> levelsStatsData, System.Collections.Generic.List`1<PlayerMissionStatsData> missionsStatsData, System.Collections.Generic.List`1<System.String> showedMissionHelpIds, System.Collections.Generic.List`1<System.String> guestPlayerNames, ColorSchemesSettings colorSchemesSettings, OverrideEnvironmentSettings overrideEnvironmentSettings, System.Collections.Generic.List`1<System.String> favoritesLevelIds, MultiplayerModeSettings multiplayerModeSettings, System.Int32 currentDlcPromoDisplayCount, System.String currentDlcPromoId)
    // Offset: 0x1348A18
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerData* New_ctor(::StringW playerId, ::StringW playerName, bool shouldShowTutorialPrompt, bool shouldShow360Warning, bool agreedToEula, bool didSelectLanguage, bool agreedToMultiplayerDisclaimer, bool avatarCreated, ::GlobalNamespace::PlayerAgreements* playerAgreements, ::GlobalNamespace::BeatmapDifficulty lastSelectedBeatmapDifficulty, ::GlobalNamespace::BeatmapCharacteristicSO* lastSelectedBeatmapCharacteristic, ::GlobalNamespace::GameplayModifiers* gameplayModifiers, ::GlobalNamespace::PlayerSpecificSettings* playerSpecificSettings, ::GlobalNamespace::PracticeSettings* practiceSettings, ::GlobalNamespace::PlayerAllOverallStatsData* playerAllOverallStatsData, ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>* levelsStatsData, ::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>* missionsStatsData, ::System::Collections::Generic::List_1<::StringW>* showedMissionHelpIds, ::System::Collections::Generic::List_1<::StringW>* guestPlayerNames, ::GlobalNamespace::ColorSchemesSettings* colorSchemesSettings, ::GlobalNamespace::OverrideEnvironmentSettings* overrideEnvironmentSettings, ::System::Collections::Generic::List_1<::StringW>* favoritesLevelIds, ::GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings, int currentDlcPromoDisplayCount, ::StringW currentDlcPromoId) {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PlayerData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerData*, creationType>(playerId, playerName, shouldShowTutorialPrompt, shouldShow360Warning, agreedToEula, didSelectLanguage, agreedToMultiplayerDisclaimer, avatarCreated, playerAgreements, lastSelectedBeatmapDifficulty, lastSelectedBeatmapCharacteristic, gameplayModifiers, playerSpecificSettings, practiceSettings, playerAllOverallStatsData, levelsStatsData, missionsStatsData, showedMissionHelpIds, guestPlayerNames, colorSchemesSettings, overrideEnvironmentSettings, favoritesLevelIds, multiplayerModeSettings, currentDlcPromoDisplayCount, currentDlcPromoId)));
    }
    // public System.Void SetNewDlcPromo(System.String dlcPromoId)
    // Offset: 0x1348C10
    void SetNewDlcPromo(::StringW dlcPromoId);
    // public System.Void IncreaseCurrentDlcPromoDisplayCount()
    // Offset: 0x1348C1C
    void IncreaseCurrentDlcPromoDisplayCount();
    // public PlayerLevelStatsData GetPlayerLevelStatsData(IDifficultyBeatmap difficultyBeatmap)
    // Offset: 0x133E298
    ::GlobalNamespace::PlayerLevelStatsData* GetPlayerLevelStatsData(::GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap);
    // public PlayerLevelStatsData GetPlayerLevelStatsData(System.String levelId, BeatmapDifficulty difficulty, BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0x1348C2C
    ::GlobalNamespace::PlayerLevelStatsData* GetPlayerLevelStatsData(::StringW levelId, ::GlobalNamespace::BeatmapDifficulty difficulty, ::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
    // public PlayerMissionStatsData GetPlayerMissionStatsData(System.String missionId)
    // Offset: 0x1348DFC
    ::GlobalNamespace::PlayerMissionStatsData* GetPlayerMissionStatsData(::StringW missionId);
    // public System.Boolean WasMissionHelpShowed(MissionHelpSO missionHelp)
    // Offset: 0x1348F64
    bool WasMissionHelpShowed(::GlobalNamespace::MissionHelpSO* missionHelp);
    // public System.Void MissionHelpWasShowed(MissionHelpSO missionHelp)
    // Offset: 0x1348FD0
    void MissionHelpWasShowed(::GlobalNamespace::MissionHelpSO* missionHelp);
    // public System.Void IncreaseNumberOfGameplays(PlayerLevelStatsData playerLevelStats)
    // Offset: 0x133E514
    void IncreaseNumberOfGameplays(::GlobalNamespace::PlayerLevelStatsData* playerLevelStats);
    // public System.Boolean IsLevelUserFavorite(IPreviewBeatmapLevel level)
    // Offset: 0x134906C
    bool IsLevelUserFavorite(::GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void AddLevelToFavorites(IPreviewBeatmapLevel level)
    // Offset: 0x1349144
    void AddLevelToFavorites(::GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void RemoveLevelFromFavorites(IPreviewBeatmapLevel level)
    // Offset: 0x134924C
    void RemoveLevelFromFavorites(::GlobalNamespace::IPreviewBeatmapLevel* level);
    // public System.Void MarkTutorialAsShown()
    // Offset: 0x1349354
    void MarkTutorialAsShown();
    // public System.Void Mark360WarningAsShown()
    // Offset: 0x134935C
    void Mark360WarningAsShown();
    // public System.Void MarkEulaAsAgreed()
    // Offset: 0x1349364
    void MarkEulaAsAgreed();
    // public System.Void MarkLanguageAsSelected()
    // Offset: 0x1349384
    void MarkLanguageAsSelected();
    // public System.Void MarkMultiplayerDisclaimerAsAgreed()
    // Offset: 0x1349390
    void MarkMultiplayerDisclaimerAsAgreed();
    // public System.Void MarkPrivacyPolicyAsAgreed()
    // Offset: 0x134939C
    void MarkPrivacyPolicyAsAgreed();
    // public System.Void MarkHealthAndSafetyAsAgreed()
    // Offset: 0x13493BC
    void MarkHealthAndSafetyAsAgreed();
    // public System.Void MarkAvatarCreated()
    // Offset: 0x13493DC
    void MarkAvatarCreated();
    // public System.Void AddGuestPlayerName(System.String guestPlayerName)
    // Offset: 0x13493E8
    void AddGuestPlayerName(::StringW guestPlayerName);
    // public System.Void DeleteAllGuestPlayers()
    // Offset: 0x1349540
    void DeleteAllGuestPlayers();
    // public System.Void SetLastSelectedBeatmapDifficulty(BeatmapDifficulty beatmapDifficulty)
    // Offset: 0x1349598
    void SetLastSelectedBeatmapDifficulty(::GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // public System.Void SetLastSelectedBeatmapCharacteristic(BeatmapCharacteristicSO beatmapCharacteristic)
    // Offset: 0x13495A0
    void SetLastSelectedBeatmapCharacteristic(::GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic);
    // public System.Void SetGameplayModifiers(GameplayModifiers newGameplayModifiers)
    // Offset: 0x13495A8
    void SetGameplayModifiers(::GlobalNamespace::GameplayModifiers* newGameplayModifiers);
    // public System.Void SetPlayerSpecificSettings(PlayerSpecificSettings newPlayerSpecificSettings)
    // Offset: 0x13495B0
    void SetPlayerSpecificSettings(::GlobalNamespace::PlayerSpecificSettings* newPlayerSpecificSettings);
    // public System.Void SetMultiplayerModeSettings(MultiplayerModeSettings multiplayerModeSettings)
    // Offset: 0x13495B8
    void SetMultiplayerModeSettings(::GlobalNamespace::MultiplayerModeSettings* multiplayerModeSettings);
  }; // PlayerData
  #pragma pack(pop)
  static check_size<sizeof(PlayerData), 184 + sizeof(::System::Action*)> __GlobalNamespace_PlayerDataSizeCheck;
  static_assert(sizeof(PlayerData) == 0xC0);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_playerId
// Il2CppName: get_playerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_playerId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_playerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_playerId
// Il2CppName: set_playerId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::StringW)>(&GlobalNamespace::PlayerData::set_playerId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_playerId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_playerName
// Il2CppName: get_playerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_playerName)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_playerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_playerName
// Il2CppName: set_playerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::StringW)>(&GlobalNamespace::PlayerData::set_playerName)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_playerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_shouldShowTutorialPrompt
// Il2CppName: get_shouldShowTutorialPrompt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_shouldShowTutorialPrompt)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_shouldShowTutorialPrompt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_shouldShowTutorialPrompt
// Il2CppName: set_shouldShowTutorialPrompt
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(bool)>(&GlobalNamespace::PlayerData::set_shouldShowTutorialPrompt)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_shouldShowTutorialPrompt", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_shouldShow360Warning
// Il2CppName: get_shouldShow360Warning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_shouldShow360Warning)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_shouldShow360Warning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_shouldShow360Warning
// Il2CppName: set_shouldShow360Warning
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(bool)>(&GlobalNamespace::PlayerData::set_shouldShow360Warning)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_shouldShow360Warning", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_agreedToEula
// Il2CppName: get_agreedToEula
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_agreedToEula)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_agreedToEula", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_agreedToEula
// Il2CppName: set_agreedToEula
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(bool)>(&GlobalNamespace::PlayerData::set_agreedToEula)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_agreedToEula", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_didSelectLanguage
// Il2CppName: get_didSelectLanguage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_didSelectLanguage)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_didSelectLanguage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_didSelectLanguage
// Il2CppName: set_didSelectLanguage
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(bool)>(&GlobalNamespace::PlayerData::set_didSelectLanguage)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_didSelectLanguage", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_agreedToMultiplayerDisclaimer
// Il2CppName: get_agreedToMultiplayerDisclaimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_agreedToMultiplayerDisclaimer)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_agreedToMultiplayerDisclaimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_agreedToMultiplayerDisclaimer
// Il2CppName: set_agreedToMultiplayerDisclaimer
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(bool)>(&GlobalNamespace::PlayerData::set_agreedToMultiplayerDisclaimer)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_agreedToMultiplayerDisclaimer", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_avatarCreated
// Il2CppName: get_avatarCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_avatarCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_avatarCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_avatarCreated
// Il2CppName: set_avatarCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(bool)>(&GlobalNamespace::PlayerData::set_avatarCreated)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_avatarCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_playerAgreements
// Il2CppName: get_playerAgreements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerAgreements* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_playerAgreements)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_playerAgreements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_playerAgreements
// Il2CppName: set_playerAgreements
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::PlayerAgreements*)>(&GlobalNamespace::PlayerData::set_playerAgreements)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PlayerAgreements")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_playerAgreements", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_lastSelectedBeatmapDifficulty
// Il2CppName: get_lastSelectedBeatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapDifficulty (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_lastSelectedBeatmapDifficulty)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_lastSelectedBeatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_lastSelectedBeatmapDifficulty
// Il2CppName: set_lastSelectedBeatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::PlayerData::set_lastSelectedBeatmapDifficulty)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_lastSelectedBeatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_lastSelectedBeatmapCharacteristic
// Il2CppName: get_lastSelectedBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::BeatmapCharacteristicSO* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_lastSelectedBeatmapCharacteristic)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_lastSelectedBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_lastSelectedBeatmapCharacteristic
// Il2CppName: set_lastSelectedBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::PlayerData::set_lastSelectedBeatmapCharacteristic)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_lastSelectedBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_gameplayModifiers
// Il2CppName: get_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::GameplayModifiers* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_gameplayModifiers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_gameplayModifiers
// Il2CppName: set_gameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::PlayerData::set_gameplayModifiers)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_gameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_playerSpecificSettings
// Il2CppName: get_playerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerSpecificSettings* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_playerSpecificSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_playerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_playerSpecificSettings
// Il2CppName: set_playerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::PlayerSpecificSettings*)>(&GlobalNamespace::PlayerData::set_playerSpecificSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PlayerSpecificSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_playerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_practiceSettings
// Il2CppName: get_practiceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PracticeSettings* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_practiceSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_practiceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_practiceSettings
// Il2CppName: set_practiceSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::PracticeSettings*)>(&GlobalNamespace::PlayerData::set_practiceSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PracticeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_practiceSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_playerAllOverallStatsData
// Il2CppName: get_playerAllOverallStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerAllOverallStatsData* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_playerAllOverallStatsData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_playerAllOverallStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_playerAllOverallStatsData
// Il2CppName: set_playerAllOverallStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::PlayerAllOverallStatsData*)>(&GlobalNamespace::PlayerData::set_playerAllOverallStatsData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "PlayerAllOverallStatsData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_playerAllOverallStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_levelsStatsData
// Il2CppName: get_levelsStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_levelsStatsData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_levelsStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_levelsStatsData
// Il2CppName: set_levelsStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Collections::Generic::List_1<::GlobalNamespace::PlayerLevelStatsData*>*)>(&GlobalNamespace::PlayerData::set_levelsStatsData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PlayerLevelStatsData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_levelsStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_missionsStatsData
// Il2CppName: get_missionsStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_missionsStatsData)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_missionsStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_missionsStatsData
// Il2CppName: set_missionsStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Collections::Generic::List_1<::GlobalNamespace::PlayerMissionStatsData*>*)>(&GlobalNamespace::PlayerData::set_missionsStatsData)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("", "PlayerMissionStatsData")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_missionsStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_showedMissionHelpIds
// Il2CppName: get_showedMissionHelpIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_showedMissionHelpIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_showedMissionHelpIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_showedMissionHelpIds
// Il2CppName: set_showedMissionHelpIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::PlayerData::set_showedMissionHelpIds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_showedMissionHelpIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_guestPlayerNames
// Il2CppName: get_guestPlayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::List_1<::StringW>* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_guestPlayerNames)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_guestPlayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_guestPlayerNames
// Il2CppName: set_guestPlayerNames
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Collections::Generic::List_1<::StringW>*)>(&GlobalNamespace::PlayerData::set_guestPlayerNames)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "List`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_guestPlayerNames", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_colorSchemesSettings
// Il2CppName: get_colorSchemesSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::ColorSchemesSettings* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_colorSchemesSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_colorSchemesSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_colorSchemesSettings
// Il2CppName: set_colorSchemesSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::ColorSchemesSettings*)>(&GlobalNamespace::PlayerData::set_colorSchemesSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "ColorSchemesSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_colorSchemesSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_overrideEnvironmentSettings
// Il2CppName: get_overrideEnvironmentSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::OverrideEnvironmentSettings* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_overrideEnvironmentSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_overrideEnvironmentSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_overrideEnvironmentSettings
// Il2CppName: set_overrideEnvironmentSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::OverrideEnvironmentSettings*)>(&GlobalNamespace::PlayerData::set_overrideEnvironmentSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "OverrideEnvironmentSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_overrideEnvironmentSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_favoritesLevelIds
// Il2CppName: get_favoritesLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::System::Collections::Generic::HashSet_1<::StringW>* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_favoritesLevelIds)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_favoritesLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_favoritesLevelIds
// Il2CppName: set_favoritesLevelIds
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Collections::Generic::HashSet_1<::StringW>*)>(&GlobalNamespace::PlayerData::set_favoritesLevelIds)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::MakeGeneric(::il2cpp_utils::GetClassFromName("System.Collections.Generic", "HashSet`1"), ::std::vector<const Il2CppClass*>{::il2cpp_utils::GetClassFromName("System", "String")})->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_favoritesLevelIds", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_multiplayerModeSettings
// Il2CppName: get_multiplayerModeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::MultiplayerModeSettings* (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_multiplayerModeSettings)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_multiplayerModeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_multiplayerModeSettings
// Il2CppName: set_multiplayerModeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::MultiplayerModeSettings*)>(&GlobalNamespace::PlayerData::set_multiplayerModeSettings)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("", "MultiplayerModeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_multiplayerModeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_currentDlcPromoDisplayCount
// Il2CppName: get_currentDlcPromoDisplayCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_currentDlcPromoDisplayCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_currentDlcPromoDisplayCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_currentDlcPromoDisplayCount
// Il2CppName: set_currentDlcPromoDisplayCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(int)>(&GlobalNamespace::PlayerData::set_currentDlcPromoDisplayCount)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Int32")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_currentDlcPromoDisplayCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::get_currentDlcPromoId
// Il2CppName: get_currentDlcPromoId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::get_currentDlcPromoId)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "get_currentDlcPromoId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::set_currentDlcPromoId
// Il2CppName: set_currentDlcPromoId
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::StringW)>(&GlobalNamespace::PlayerData::set_currentDlcPromoId)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "set_currentDlcPromoId", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::add_favoriteLevelsSetDidChangeEvent
// Il2CppName: add_favoriteLevelsSetDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Action*)>(&GlobalNamespace::PlayerData::add_favoriteLevelsSetDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "add_favoriteLevelsSetDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::remove_favoriteLevelsSetDidChangeEvent
// Il2CppName: remove_favoriteLevelsSetDidChangeEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Action*)>(&GlobalNamespace::PlayerData::remove_favoriteLevelsSetDidChangeEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "remove_favoriteLevelsSetDidChangeEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::add_didIncreaseNumberOfGameplaysEvent
// Il2CppName: add_didIncreaseNumberOfGameplaysEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Action*)>(&GlobalNamespace::PlayerData::add_didIncreaseNumberOfGameplaysEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "add_didIncreaseNumberOfGameplaysEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::remove_didIncreaseNumberOfGameplaysEvent
// Il2CppName: remove_didIncreaseNumberOfGameplaysEvent
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::System::Action*)>(&GlobalNamespace::PlayerData::remove_didIncreaseNumberOfGameplaysEvent)> {
  static const MethodInfo* get() {
    static auto* value = &::il2cpp_utils::GetClassFromName("System", "Action")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "remove_didIncreaseNumberOfGameplaysEvent", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{value});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::SetNewDlcPromo
// Il2CppName: SetNewDlcPromo
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::StringW)>(&GlobalNamespace::PlayerData::SetNewDlcPromo)> {
  static const MethodInfo* get() {
    static auto* dlcPromoId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "SetNewDlcPromo", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{dlcPromoId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::IncreaseCurrentDlcPromoDisplayCount
// Il2CppName: IncreaseCurrentDlcPromoDisplayCount
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::IncreaseCurrentDlcPromoDisplayCount)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "IncreaseCurrentDlcPromoDisplayCount", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::GetPlayerLevelStatsData
// Il2CppName: GetPlayerLevelStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerLevelStatsData* (GlobalNamespace::PlayerData::*)(::GlobalNamespace::IDifficultyBeatmap*)>(&GlobalNamespace::PlayerData::GetPlayerLevelStatsData)> {
  static const MethodInfo* get() {
    static auto* difficultyBeatmap = &::il2cpp_utils::GetClassFromName("", "IDifficultyBeatmap")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "GetPlayerLevelStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{difficultyBeatmap});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::GetPlayerLevelStatsData
// Il2CppName: GetPlayerLevelStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerLevelStatsData* (GlobalNamespace::PlayerData::*)(::StringW, ::GlobalNamespace::BeatmapDifficulty, ::GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::PlayerData::GetPlayerLevelStatsData)> {
  static const MethodInfo* get() {
    static auto* levelId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    static auto* difficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    static auto* beatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "GetPlayerLevelStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{levelId, difficulty, beatmapCharacteristic});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::GetPlayerMissionStatsData
// Il2CppName: GetPlayerMissionStatsData
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::GlobalNamespace::PlayerMissionStatsData* (GlobalNamespace::PlayerData::*)(::StringW)>(&GlobalNamespace::PlayerData::GetPlayerMissionStatsData)> {
  static const MethodInfo* get() {
    static auto* missionId = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "GetPlayerMissionStatsData", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionId});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::WasMissionHelpShowed
// Il2CppName: WasMissionHelpShowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)(::GlobalNamespace::MissionHelpSO*)>(&GlobalNamespace::PlayerData::WasMissionHelpShowed)> {
  static const MethodInfo* get() {
    static auto* missionHelp = &::il2cpp_utils::GetClassFromName("", "MissionHelpSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "WasMissionHelpShowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionHelp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MissionHelpWasShowed
// Il2CppName: MissionHelpWasShowed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::MissionHelpSO*)>(&GlobalNamespace::PlayerData::MissionHelpWasShowed)> {
  static const MethodInfo* get() {
    static auto* missionHelp = &::il2cpp_utils::GetClassFromName("", "MissionHelpSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MissionHelpWasShowed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{missionHelp});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::IncreaseNumberOfGameplays
// Il2CppName: IncreaseNumberOfGameplays
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::PlayerLevelStatsData*)>(&GlobalNamespace::PlayerData::IncreaseNumberOfGameplays)> {
  static const MethodInfo* get() {
    static auto* playerLevelStats = &::il2cpp_utils::GetClassFromName("", "PlayerLevelStatsData")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "IncreaseNumberOfGameplays", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{playerLevelStats});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::IsLevelUserFavorite
// Il2CppName: IsLevelUserFavorite
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::PlayerData::*)(::GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::PlayerData::IsLevelUserFavorite)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "IsLevelUserFavorite", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::AddLevelToFavorites
// Il2CppName: AddLevelToFavorites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::PlayerData::AddLevelToFavorites)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "AddLevelToFavorites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::RemoveLevelFromFavorites
// Il2CppName: RemoveLevelFromFavorites
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::IPreviewBeatmapLevel*)>(&GlobalNamespace::PlayerData::RemoveLevelFromFavorites)> {
  static const MethodInfo* get() {
    static auto* level = &::il2cpp_utils::GetClassFromName("", "IPreviewBeatmapLevel")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "RemoveLevelFromFavorites", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{level});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkTutorialAsShown
// Il2CppName: MarkTutorialAsShown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkTutorialAsShown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkTutorialAsShown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::Mark360WarningAsShown
// Il2CppName: Mark360WarningAsShown
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::Mark360WarningAsShown)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "Mark360WarningAsShown", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkEulaAsAgreed
// Il2CppName: MarkEulaAsAgreed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkEulaAsAgreed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkEulaAsAgreed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkLanguageAsSelected
// Il2CppName: MarkLanguageAsSelected
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkLanguageAsSelected)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkLanguageAsSelected", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkMultiplayerDisclaimerAsAgreed
// Il2CppName: MarkMultiplayerDisclaimerAsAgreed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkMultiplayerDisclaimerAsAgreed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkMultiplayerDisclaimerAsAgreed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkPrivacyPolicyAsAgreed
// Il2CppName: MarkPrivacyPolicyAsAgreed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkPrivacyPolicyAsAgreed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkPrivacyPolicyAsAgreed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkHealthAndSafetyAsAgreed
// Il2CppName: MarkHealthAndSafetyAsAgreed
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkHealthAndSafetyAsAgreed)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkHealthAndSafetyAsAgreed", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::MarkAvatarCreated
// Il2CppName: MarkAvatarCreated
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::MarkAvatarCreated)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "MarkAvatarCreated", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::AddGuestPlayerName
// Il2CppName: AddGuestPlayerName
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::StringW)>(&GlobalNamespace::PlayerData::AddGuestPlayerName)> {
  static const MethodInfo* get() {
    static auto* guestPlayerName = &::il2cpp_utils::GetClassFromName("System", "String")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "AddGuestPlayerName", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{guestPlayerName});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::DeleteAllGuestPlayers
// Il2CppName: DeleteAllGuestPlayers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)()>(&GlobalNamespace::PlayerData::DeleteAllGuestPlayers)> {
  static const MethodInfo* get() {
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "DeleteAllGuestPlayers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::SetLastSelectedBeatmapDifficulty
// Il2CppName: SetLastSelectedBeatmapDifficulty
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::BeatmapDifficulty)>(&GlobalNamespace::PlayerData::SetLastSelectedBeatmapDifficulty)> {
  static const MethodInfo* get() {
    static auto* beatmapDifficulty = &::il2cpp_utils::GetClassFromName("", "BeatmapDifficulty")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "SetLastSelectedBeatmapDifficulty", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapDifficulty});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::SetLastSelectedBeatmapCharacteristic
// Il2CppName: SetLastSelectedBeatmapCharacteristic
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::BeatmapCharacteristicSO*)>(&GlobalNamespace::PlayerData::SetLastSelectedBeatmapCharacteristic)> {
  static const MethodInfo* get() {
    static auto* beatmapCharacteristic = &::il2cpp_utils::GetClassFromName("", "BeatmapCharacteristicSO")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "SetLastSelectedBeatmapCharacteristic", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{beatmapCharacteristic});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::SetGameplayModifiers
// Il2CppName: SetGameplayModifiers
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::GameplayModifiers*)>(&GlobalNamespace::PlayerData::SetGameplayModifiers)> {
  static const MethodInfo* get() {
    static auto* newGameplayModifiers = &::il2cpp_utils::GetClassFromName("", "GameplayModifiers")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "SetGameplayModifiers", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newGameplayModifiers});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::SetPlayerSpecificSettings
// Il2CppName: SetPlayerSpecificSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::PlayerSpecificSettings*)>(&GlobalNamespace::PlayerData::SetPlayerSpecificSettings)> {
  static const MethodInfo* get() {
    static auto* newPlayerSpecificSettings = &::il2cpp_utils::GetClassFromName("", "PlayerSpecificSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "SetPlayerSpecificSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newPlayerSpecificSettings});
  }
};
// Writing MetadataGetter for method: GlobalNamespace::PlayerData::SetMultiplayerModeSettings
// Il2CppName: SetMultiplayerModeSettings
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PlayerData::*)(::GlobalNamespace::MultiplayerModeSettings*)>(&GlobalNamespace::PlayerData::SetMultiplayerModeSettings)> {
  static const MethodInfo* get() {
    static auto* multiplayerModeSettings = &::il2cpp_utils::GetClassFromName("", "MultiplayerModeSettings")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PlayerData*), "SetMultiplayerModeSettings", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{multiplayerModeSettings});
  }
};
