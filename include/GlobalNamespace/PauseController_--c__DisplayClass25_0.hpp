// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "beatsaber-hook/shared/utils/typedefs.h"
#include "beatsaber-hook/shared/utils/byref.hpp"
// Including type: PauseController
#include "GlobalNamespace/PauseController.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "beatsaber-hook/shared/utils/utils.h"
// Completed includes
#include "beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
NEED_NO_BOX(::GlobalNamespace::PauseController::$$c__DisplayClass25_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::PauseController::$$c__DisplayClass25_0*, "", "PauseController/<>c__DisplayClass25_0");
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x11
  #pragma pack(push, 1)
  // Autogenerated type: PauseController/<>c__DisplayClass25_0
  // [TokenAttribute] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: FFFFFFFF
  class PauseController::$$c__DisplayClass25_0 : public ::Il2CppObject {
    public:
    public:
    // public System.Boolean value
    // Size: 0x1
    // Offset: 0x10
    bool value;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    public:
    // Creating conversion operator: operator bool
    constexpr operator bool() const noexcept {
      return value;
    }
    // Get instance field reference: public System.Boolean value
    [[deprecated("Use field access instead!")]] bool& dyn_value();
    // public System.Void .ctor()
    // Offset: 0x159A39C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PauseController::$$c__DisplayClass25_0* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("::GlobalNamespace::PauseController::$$c__DisplayClass25_0::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PauseController::$$c__DisplayClass25_0*, creationType>()));
    }
    // System.Void <get_canPause>b__0(System.Boolean newValue)
    // Offset: 0x159A3A4
    void $get_canPause$b__0(bool newValue);
  }; // PauseController/<>c__DisplayClass25_0
  #pragma pack(pop)
  static check_size<sizeof(PauseController::$$c__DisplayClass25_0), 16 + sizeof(bool)> __GlobalNamespace_PauseController_$$c__DisplayClass25_0SizeCheck;
  static_assert(sizeof(PauseController::$$c__DisplayClass25_0) == 0x11);
}
#include "beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
// Writing MetadataGetter for method: GlobalNamespace::PauseController::$$c__DisplayClass25_0::New_ctor
// Il2CppName: .ctor
// Cannot get method pointer of value based method overload from template for constructor!
// Try using FindMethod instead!
// Writing MetadataGetter for method: GlobalNamespace::PauseController::$$c__DisplayClass25_0::$get_canPause$b__0
// Il2CppName: <get_canPause>b__0
template<>
struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::PauseController::$$c__DisplayClass25_0::*)(bool)>(&GlobalNamespace::PauseController::$$c__DisplayClass25_0::$get_canPause$b__0)> {
  static const MethodInfo* get() {
    static auto* newValue = &::il2cpp_utils::GetClassFromName("System", "Boolean")->byval_arg;
    return ::il2cpp_utils::FindMethod(classof(GlobalNamespace::PauseController::$$c__DisplayClass25_0*), "<get_canPause>b__0", std::vector<Il2CppClass*>(), ::std::vector<const Il2CppType*>{newValue});
  }
};
